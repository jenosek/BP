
thesis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010c64  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000314  08010f10  08010f10  00011f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08011224  08011224  00012224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08011228  08011228  00012228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000108  24000000  0801122c  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001f6c  24000108  08011334  00013108  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24002074  08011334  00014074  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00013108  2**0
                  CONTENTS, READONLY
  9 .debug_info   000229d5  00000000  00000000  00013136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00004c81  00000000  00000000  00035b0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001a98  00000000  00000000  0003a790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00001438  00000000  00000000  0003c228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000364ad  00000000  00000000  0003d660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000268ae  00000000  00000000  00073b0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014dc32  00000000  00000000  0009a3bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001e7fed  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000703c  00000000  00000000  001e8030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000056  00000000  00000000  001ef06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000108 	.word	0x24000108
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08010ef8 	.word	0x08010ef8

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	2400010c 	.word	0x2400010c
 80002e8:	08010ef8 	.word	0x08010ef8

080002ec <I2C_write>:
#include "comms.h"


// I2C
void I2C_write(HAL_StatusTypeDef* status, DeviceAdress dev_adress, uint8_t reg_adress, uint8_t* data) {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b088      	sub	sp, #32
 80002f0:	af04      	add	r7, sp, #16
 80002f2:	60f8      	str	r0, [r7, #12]
 80002f4:	607b      	str	r3, [r7, #4]
 80002f6:	460b      	mov	r3, r1
 80002f8:	72fb      	strb	r3, [r7, #11]
 80002fa:	4613      	mov	r3, r2
 80002fc:	72bb      	strb	r3, [r7, #10]
	*status = HAL_I2C_Mem_Write(&hi2c2, dev_adress, reg_adress, I2C_MEMADD_SIZE_8BIT, data, 1, 100);
 80002fe:	7afb      	ldrb	r3, [r7, #11]
 8000300:	b299      	uxth	r1, r3
 8000302:	7abb      	ldrb	r3, [r7, #10]
 8000304:	b29a      	uxth	r2, r3
 8000306:	2364      	movs	r3, #100	@ 0x64
 8000308:	9302      	str	r3, [sp, #8]
 800030a:	2301      	movs	r3, #1
 800030c:	9301      	str	r3, [sp, #4]
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	9300      	str	r3, [sp, #0]
 8000312:	2301      	movs	r3, #1
 8000314:	4805      	ldr	r0, [pc, #20]	@ (800032c <I2C_write+0x40>)
 8000316:	f006 fddd 	bl	8006ed4 <HAL_I2C_Mem_Write>
 800031a:	4603      	mov	r3, r0
 800031c:	461a      	mov	r2, r3
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	701a      	strb	r2, [r3, #0]
}
 8000322:	bf00      	nop
 8000324:	3710      	adds	r7, #16
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	240002b8 	.word	0x240002b8

08000330 <HAL_SPI_TxCpltCallback>:
	  hspi->RxXferCount = (uint16_t)0UL;
}

// DMA callbacks, when SPI finishes
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
	dma_flag = DMA_COMPLETED;
 8000338:	4b04      	ldr	r3, [pc, #16]	@ (800034c <HAL_SPI_TxCpltCallback+0x1c>)
 800033a:	2200      	movs	r2, #0
 800033c:	701a      	strb	r2, [r3, #0]
}
 800033e:	bf00      	nop
 8000340:	370c      	adds	r7, #12
 8000342:	46bd      	mov	sp, r7
 8000344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000348:	4770      	bx	lr
 800034a:	bf00      	nop
 800034c:	24000124 	.word	0x24000124

08000350 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
	dma_flag = DMA_COMPLETED;
 8000358:	4b04      	ldr	r3, [pc, #16]	@ (800036c <HAL_SPI_TxRxCpltCallback+0x1c>)
 800035a:	2200      	movs	r2, #0
 800035c:	701a      	strb	r2, [r3, #0]
}
 800035e:	bf00      	nop
 8000360:	370c      	adds	r7, #12
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	24000124 	.word	0x24000124

08000370 <USB_CDC_RxHandler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#ifdef GROUND_STATION
void USB_CDC_RxHandler(uint8_t *buffer, uint32_t size) {
 8000370:	b480      	push	{r7}
 8000372:	b085      	sub	sp, #20
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
 8000378:	6039      	str	r1, [r7, #0]
	char cmd_temp = buffer[0];
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	73fb      	strb	r3, [r7, #15]
	if (cmd_temp == '\r') {
 8000380:	7bfb      	ldrb	r3, [r7, #15]
 8000382:	2b0d      	cmp	r3, #13
 8000384:	d019      	beq.n	80003ba <USB_CDC_RxHandler+0x4a>
		return;
	}
	else if (size == 1) {
 8000386:	683b      	ldr	r3, [r7, #0]
 8000388:	2b01      	cmp	r3, #1
 800038a:	d104      	bne.n	8000396 <USB_CDC_RxHandler+0x26>
		cmd_index = (char) buffer[0];
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	781a      	ldrb	r2, [r3, #0]
 8000390:	4b0d      	ldr	r3, [pc, #52]	@ (80003c8 <USB_CDC_RxHandler+0x58>)
 8000392:	701a      	strb	r2, [r3, #0]
 8000394:	e012      	b.n	80003bc <USB_CDC_RxHandler+0x4c>
	}
	else {
		uint8_t first = (uint8_t) buffer[0] - '1';
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	3b31      	subs	r3, #49	@ 0x31
 800039c:	73bb      	strb	r3, [r7, #14]
		uint8_t second = (uint8_t) buffer[1] - '1';
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	3301      	adds	r3, #1
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	3b31      	subs	r3, #49	@ 0x31
 80003a6:	737b      	strb	r3, [r7, #13]

		cam_mode_select = first * 16 + second;
 80003a8:	7bbb      	ldrb	r3, [r7, #14]
 80003aa:	011b      	lsls	r3, r3, #4
 80003ac:	b2da      	uxtb	r2, r3
 80003ae:	7b7b      	ldrb	r3, [r7, #13]
 80003b0:	4413      	add	r3, r2
 80003b2:	b2da      	uxtb	r2, r3
 80003b4:	4b05      	ldr	r3, [pc, #20]	@ (80003cc <USB_CDC_RxHandler+0x5c>)
 80003b6:	701a      	strb	r2, [r3, #0]
 80003b8:	e000      	b.n	80003bc <USB_CDC_RxHandler+0x4c>
		return;
 80003ba:	bf00      	nop
			default: {
				cam_mode_select = 0xAA; //ERROR
			}
		}*/
	}
}
 80003bc:	3714      	adds	r7, #20
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	24000000 	.word	0x24000000
 80003cc:	24000001 	.word	0x24000001

080003d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003d0:	b5b0      	push	{r4, r5, r7, lr}
 80003d2:	b092      	sub	sp, #72	@ 0x48
 80003d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80003d6:	f000 fc0f 	bl	8000bf8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003da:	f001 fb2d 	bl	8001a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003de:	f000 f8a1 	bl	8000524 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80003e2:	f000 f921 	bl	8000628 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003e6:	f000 fb19 	bl	8000a1c <MX_GPIO_Init>
  MX_DMA_Init();
 80003ea:	f000 fae7 	bl	80009bc <MX_DMA_Init>
  MX_DCMI_Init();
 80003ee:	f000 fa1b 	bl	8000828 <MX_DCMI_Init>
  MX_I2C2_Init();
 80003f2:	f000 fa4d 	bl	8000890 <MX_I2C2_Init>
  MX_ADC1_Init();
 80003f6:	f000 f937 	bl	8000668 <MX_ADC1_Init>
  MX_ADC2_Init();
 80003fa:	f000 f9af 	bl	800075c <MX_ADC2_Init>
  MX_USB_DEVICE_Init();
 80003fe:	f00f ffc3 	bl	8010388 <MX_USB_DEVICE_Init>
  MX_SPI4_Init();
 8000402:	f000 fa85 	bl	8000910 <MX_SPI4_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //setup(&status, &error_index);                       - <<<<<<--------------------------------------------------------------------------------------------
  HAL_Delay(1000);
 8000406:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800040a:	f001 fba7 	bl	8001b5c <HAL_Delay>
  cmd_main_win();
 800040e:	f000 fd91 	bl	8000f34 <cmd_main_win>
  while (1) {

	  switch (cmd_index) {
 8000412:	4b3e      	ldr	r3, [pc, #248]	@ (800050c <main+0x13c>)
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	3b30      	subs	r3, #48	@ 0x30
 8000418:	2b03      	cmp	r3, #3
 800041a:	d860      	bhi.n	80004de <main+0x10e>
 800041c:	a201      	add	r2, pc, #4	@ (adr r2, 8000424 <main+0x54>)
 800041e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000422:	bf00      	nop
 8000424:	08000435 	.word	0x08000435
 8000428:	0800043d 	.word	0x0800043d
 800042c:	08000445 	.word	0x08000445
 8000430:	080004a5 	.word	0x080004a5

	  		  // Idle
	  		  case '0':
	  			HAL_Delay(100);
 8000434:	2064      	movs	r0, #100	@ 0x64
 8000436:	f001 fb91 	bl	8001b5c <HAL_Delay>
	  			break;
 800043a:	e066      	b.n	800050a <main+0x13a>

	  		  // Telemetry
	  		  case '1':
	  			  cmd_index = '0';
 800043c:	4b33      	ldr	r3, [pc, #204]	@ (800050c <main+0x13c>)
 800043e:	2230      	movs	r2, #48	@ 0x30
 8000440:	701a      	strb	r2, [r3, #0]
	  			break;
 8000442:	e062      	b.n	800050a <main+0x13a>

	  		  // IMG
	  		  case '2':
	  			  cmd_img_options();
 8000444:	f000 fd98 	bl	8000f78 <cmd_img_options>
	  			  while (cam_mode_select == 0xFF) {
 8000448:	e01c      	b.n	8000484 <main+0xb4>
	  				  if (cam_mode_select == 0xAA) {
 800044a:	4b31      	ldr	r3, [pc, #196]	@ (8000510 <main+0x140>)
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	2baa      	cmp	r3, #170	@ 0xaa
 8000450:	d118      	bne.n	8000484 <main+0xb4>
	  					  uint8_t buffer[] = "Unrecognized command \r\n";
 8000452:	4b30      	ldr	r3, [pc, #192]	@ (8000514 <main+0x144>)
 8000454:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8000458:	461d      	mov	r5, r3
 800045a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800045c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800045e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000462:	e884 0003 	stmia.w	r4, {r0, r1}
	  					  uint16_t buffer_size = sizeof(buffer);
 8000466:	2318      	movs	r3, #24
 8000468:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
	  					  CDC_Transmit_HS(buffer, buffer_size);
 800046c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8000470:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000474:	4611      	mov	r1, r2
 8000476:	4618      	mov	r0, r3
 8000478:	f010 f854 	bl	8010524 <CDC_Transmit_HS>
	  					  cmd_index = '0';
 800047c:	4b23      	ldr	r3, [pc, #140]	@ (800050c <main+0x13c>)
 800047e:	2230      	movs	r2, #48	@ 0x30
 8000480:	701a      	strb	r2, [r3, #0]
	  					  break;
 8000482:	e003      	b.n	800048c <main+0xbc>
	  			  while (cam_mode_select == 0xFF) {
 8000484:	4b22      	ldr	r3, [pc, #136]	@ (8000510 <main+0x140>)
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	2bff      	cmp	r3, #255	@ 0xff
 800048a:	d0de      	beq.n	800044a <main+0x7a>
	  				  }
	  			  }
	  			  capture_img(&status, &error_index, &cam_mode_select);
 800048c:	4a20      	ldr	r2, [pc, #128]	@ (8000510 <main+0x140>)
 800048e:	4922      	ldr	r1, [pc, #136]	@ (8000518 <main+0x148>)
 8000490:	4822      	ldr	r0, [pc, #136]	@ (800051c <main+0x14c>)
 8000492:	f000 fd93 	bl	8000fbc <capture_img>
	  			  cmd_index = '0';
 8000496:	4b1d      	ldr	r3, [pc, #116]	@ (800050c <main+0x13c>)
 8000498:	2230      	movs	r2, #48	@ 0x30
 800049a:	701a      	strb	r2, [r3, #0]
	  			  cam_mode_select = 0xFF; //return to default state
 800049c:	4b1c      	ldr	r3, [pc, #112]	@ (8000510 <main+0x140>)
 800049e:	22ff      	movs	r2, #255	@ 0xff
 80004a0:	701a      	strb	r2, [r3, #0]
	  			break;
 80004a2:	e032      	b.n	800050a <main+0x13a>

	  		  case '3': {
	  			uint8_t buffer[] = "\e[1;1H\e[2J";
 80004a4:	4a1e      	ldr	r2, [pc, #120]	@ (8000520 <main+0x150>)
 80004a6:	f107 031c 	add.w	r3, r7, #28
 80004aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80004ac:	c303      	stmia	r3!, {r0, r1}
 80004ae:	801a      	strh	r2, [r3, #0]
 80004b0:	3302      	adds	r3, #2
 80004b2:	0c12      	lsrs	r2, r2, #16
 80004b4:	701a      	strb	r2, [r3, #0]
	  			uint16_t buffer_size = sizeof(buffer);
 80004b6:	230b      	movs	r3, #11
 80004b8:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
	  			CDC_Transmit_HS(buffer, buffer_size);
 80004bc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80004c0:	f107 031c 	add.w	r3, r7, #28
 80004c4:	4611      	mov	r1, r2
 80004c6:	4618      	mov	r0, r3
 80004c8:	f010 f82c 	bl	8010524 <CDC_Transmit_HS>
	  			cmd_index = '0';
 80004cc:	4b0f      	ldr	r3, [pc, #60]	@ (800050c <main+0x13c>)
 80004ce:	2230      	movs	r2, #48	@ 0x30
 80004d0:	701a      	strb	r2, [r3, #0]
	  			HAL_Delay(100);
 80004d2:	2064      	movs	r0, #100	@ 0x64
 80004d4:	f001 fb42 	bl	8001b5c <HAL_Delay>
	  			cmd_main_win();
 80004d8:	f000 fd2c 	bl	8000f34 <cmd_main_win>
	  			break;
 80004dc:	e015      	b.n	800050a <main+0x13a>
	  		  }
	  		  default: {
	  			uint8_t buffer[] = "Unrecognized command \r\n";
 80004de:	4b0d      	ldr	r3, [pc, #52]	@ (8000514 <main+0x144>)
 80004e0:	1d3c      	adds	r4, r7, #4
 80004e2:	461d      	mov	r5, r3
 80004e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004e8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80004ec:	e884 0003 	stmia.w	r4, {r0, r1}
	  			uint16_t buffer_size = sizeof(buffer);
 80004f0:	2318      	movs	r3, #24
 80004f2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	  			CDC_Transmit_HS(buffer, buffer_size);
 80004f6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	4611      	mov	r1, r2
 80004fe:	4618      	mov	r0, r3
 8000500:	f010 f810 	bl	8010524 <CDC_Transmit_HS>
	  			cmd_index = '0';
 8000504:	4b01      	ldr	r3, [pc, #4]	@ (800050c <main+0x13c>)
 8000506:	2230      	movs	r2, #48	@ 0x30
 8000508:	701a      	strb	r2, [r3, #0]
	  switch (cmd_index) {
 800050a:	e782      	b.n	8000412 <main+0x42>
 800050c:	24000000 	.word	0x24000000
 8000510:	24000001 	.word	0x24000001
 8000514:	08010f10 	.word	0x08010f10
 8000518:	24000485 	.word	0x24000485
 800051c:	24000484 	.word	0x24000484
 8000520:	08010f28 	.word	0x08010f28

08000524 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b09c      	sub	sp, #112	@ 0x70
 8000528:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800052e:	224c      	movs	r2, #76	@ 0x4c
 8000530:	2100      	movs	r1, #0
 8000532:	4618      	mov	r0, r3
 8000534:	f010 fca6 	bl	8010e84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000538:	1d3b      	adds	r3, r7, #4
 800053a:	2220      	movs	r2, #32
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f010 fca0 	bl	8010e84 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000544:	4b36      	ldr	r3, [pc, #216]	@ (8000620 <SystemClock_Config+0xfc>)
 8000546:	f04f 32ff 	mov.w	r2, #4294967295
 800054a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800054e:	2002      	movs	r0, #2
 8000550:	f008 fb7a 	bl	8008c48 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000554:	2300      	movs	r3, #0
 8000556:	603b      	str	r3, [r7, #0]
 8000558:	4b32      	ldr	r3, [pc, #200]	@ (8000624 <SystemClock_Config+0x100>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	4a31      	ldr	r2, [pc, #196]	@ (8000624 <SystemClock_Config+0x100>)
 800055e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000562:	6193      	str	r3, [r2, #24]
 8000564:	4b2f      	ldr	r3, [pc, #188]	@ (8000624 <SystemClock_Config+0x100>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800056c:	603b      	str	r3, [r7, #0]
 800056e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000570:	bf00      	nop
 8000572:	4b2c      	ldr	r3, [pc, #176]	@ (8000624 <SystemClock_Config+0x100>)
 8000574:	699b      	ldr	r3, [r3, #24]
 8000576:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800057a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800057e:	d1f8      	bne.n	8000572 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000580:	2301      	movs	r3, #1
 8000582:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000584:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000588:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	2302      	movs	r3, #2
 800058c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800058e:	2302      	movs	r3, #2
 8000590:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000592:	2301      	movs	r3, #1
 8000594:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000596:	2346      	movs	r3, #70	@ 0x46
 8000598:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800059a:	2302      	movs	r3, #2
 800059c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 25;
 800059e:	2319      	movs	r3, #25
 80005a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 80005a2:	2304      	movs	r3, #4
 80005a4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80005a6:	230c      	movs	r3, #12
 80005a8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80005aa:	2300      	movs	r3, #0
 80005ac:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005b6:	4618      	mov	r0, r3
 80005b8:	f008 fb90 	bl	8008cdc <HAL_RCC_OscConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80005c2:	f000 fb45 	bl	8000c50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c6:	233f      	movs	r3, #63	@ 0x3f
 80005c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ca:	2303      	movs	r3, #3
 80005cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80005d6:	2340      	movs	r3, #64	@ 0x40
 80005d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80005da:	2340      	movs	r3, #64	@ 0x40
 80005dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80005de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005e2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80005e4:	2340      	movs	r3, #64	@ 0x40
 80005e6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2106      	movs	r1, #6
 80005ec:	4618      	mov	r0, r3
 80005ee:	f008 ffa7 	bl	8009540 <HAL_RCC_ClockConfig>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <SystemClock_Config+0xd8>
  {
    Error_Handler();
 80005f8:	f000 fb2a 	bl	8000c50 <Error_Handler>
  }
  __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80005fc:	4b08      	ldr	r3, [pc, #32]	@ (8000620 <SystemClock_Config+0xfc>)
 80005fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000600:	4a07      	ldr	r2, [pc, #28]	@ (8000620 <SystemClock_Config+0xfc>)
 8000602:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000606:	62d3      	str	r3, [r2, #44]	@ 0x2c
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLL1QCLK, RCC_MCODIV_1);
 8000608:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800060c:	f44f 0140 	mov.w	r1, #12582912	@ 0xc00000
 8000610:	2000      	movs	r0, #0
 8000612:	f009 f94b 	bl	80098ac <HAL_RCC_MCOConfig>
}
 8000616:	bf00      	nop
 8000618:	3770      	adds	r7, #112	@ 0x70
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	58024400 	.word	0x58024400
 8000624:	58024800 	.word	0x58024800

08000628 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b0b0      	sub	sp, #192	@ 0xc0
 800062c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800062e:	463b      	mov	r3, r7
 8000630:	22c0      	movs	r2, #192	@ 0xc0
 8000632:	2100      	movs	r1, #0
 8000634:	4618      	mov	r0, r3
 8000636:	f010 fc25 	bl	8010e84 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 800063a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800063e:	f04f 0300 	mov.w	r3, #0
 8000642:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSE;
 8000646:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800064a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800064c:	463b      	mov	r3, r7
 800064e:	4618      	mov	r0, r3
 8000650:	f009 fb56 	bl	8009d00 <HAL_RCCEx_PeriphCLKConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <PeriphCommonClock_Config+0x36>
  {
    Error_Handler();
 800065a:	f000 faf9 	bl	8000c50 <Error_Handler>
  }
}
 800065e:	bf00      	nop
 8000660:	37c0      	adds	r7, #192	@ 0xc0
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
	...

08000668 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08a      	sub	sp, #40	@ 0x28
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800066e:	f107 031c 	add.w	r3, r7, #28
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800067a:	463b      	mov	r3, r7
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
 8000688:	615a      	str	r2, [r3, #20]
 800068a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800068c:	4b30      	ldr	r3, [pc, #192]	@ (8000750 <MX_ADC1_Init+0xe8>)
 800068e:	4a31      	ldr	r2, [pc, #196]	@ (8000754 <MX_ADC1_Init+0xec>)
 8000690:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000692:	4b2f      	ldr	r3, [pc, #188]	@ (8000750 <MX_ADC1_Init+0xe8>)
 8000694:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000698:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800069a:	4b2d      	ldr	r3, [pc, #180]	@ (8000750 <MX_ADC1_Init+0xe8>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000750 <MX_ADC1_Init+0xe8>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006a6:	4b2a      	ldr	r3, [pc, #168]	@ (8000750 <MX_ADC1_Init+0xe8>)
 80006a8:	2204      	movs	r2, #4
 80006aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80006ac:	4b28      	ldr	r3, [pc, #160]	@ (8000750 <MX_ADC1_Init+0xe8>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006b2:	4b27      	ldr	r3, [pc, #156]	@ (8000750 <MX_ADC1_Init+0xe8>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80006b8:	4b25      	ldr	r3, [pc, #148]	@ (8000750 <MX_ADC1_Init+0xe8>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006be:	4b24      	ldr	r3, [pc, #144]	@ (8000750 <MX_ADC1_Init+0xe8>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006c4:	4b22      	ldr	r3, [pc, #136]	@ (8000750 <MX_ADC1_Init+0xe8>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006ca:	4b21      	ldr	r3, [pc, #132]	@ (8000750 <MX_ADC1_Init+0xe8>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80006d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000750 <MX_ADC1_Init+0xe8>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000750 <MX_ADC1_Init+0xe8>)
 80006d8:	2200      	movs	r2, #0
 80006da:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80006dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000750 <MX_ADC1_Init+0xe8>)
 80006de:	2200      	movs	r2, #0
 80006e0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80006e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000750 <MX_ADC1_Init+0xe8>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006ea:	4819      	ldr	r0, [pc, #100]	@ (8000750 <MX_ADC1_Init+0xe8>)
 80006ec:	f001 fc18 	bl	8001f20 <HAL_ADC_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80006f6:	f000 faab 	bl	8000c50 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006fa:	2300      	movs	r3, #0
 80006fc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006fe:	f107 031c 	add.w	r3, r7, #28
 8000702:	4619      	mov	r1, r3
 8000704:	4812      	ldr	r0, [pc, #72]	@ (8000750 <MX_ADC1_Init+0xe8>)
 8000706:	f002 f8d7 	bl	80028b8 <HAL_ADCEx_MultiModeConfigChannel>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000710:	f000 fa9e 	bl	8000c50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000714:	4b10      	ldr	r3, [pc, #64]	@ (8000758 <MX_ADC1_Init+0xf0>)
 8000716:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000718:	2306      	movs	r3, #6
 800071a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800071c:	2300      	movs	r3, #0
 800071e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000720:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000724:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000726:	2304      	movs	r3, #4
 8000728:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800072e:	2300      	movs	r3, #0
 8000730:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000732:	463b      	mov	r3, r7
 8000734:	4619      	mov	r1, r3
 8000736:	4806      	ldr	r0, [pc, #24]	@ (8000750 <MX_ADC1_Init+0xe8>)
 8000738:	f001 fd4c 	bl	80021d4 <HAL_ADC_ConfigChannel>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000742:	f000 fa85 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	3728      	adds	r7, #40	@ 0x28
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	24000128 	.word	0x24000128
 8000754:	40022000 	.word	0x40022000
 8000758:	25b00200 	.word	0x25b00200

0800075c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b088      	sub	sp, #32
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
 8000770:	615a      	str	r2, [r3, #20]
 8000772:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000774:	4b29      	ldr	r3, [pc, #164]	@ (800081c <MX_ADC2_Init+0xc0>)
 8000776:	4a2a      	ldr	r2, [pc, #168]	@ (8000820 <MX_ADC2_Init+0xc4>)
 8000778:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800077a:	4b28      	ldr	r3, [pc, #160]	@ (800081c <MX_ADC2_Init+0xc0>)
 800077c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000780:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000782:	4b26      	ldr	r3, [pc, #152]	@ (800081c <MX_ADC2_Init+0xc0>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000788:	4b24      	ldr	r3, [pc, #144]	@ (800081c <MX_ADC2_Init+0xc0>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800078e:	4b23      	ldr	r3, [pc, #140]	@ (800081c <MX_ADC2_Init+0xc0>)
 8000790:	2204      	movs	r2, #4
 8000792:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000794:	4b21      	ldr	r3, [pc, #132]	@ (800081c <MX_ADC2_Init+0xc0>)
 8000796:	2200      	movs	r2, #0
 8000798:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800079a:	4b20      	ldr	r3, [pc, #128]	@ (800081c <MX_ADC2_Init+0xc0>)
 800079c:	2200      	movs	r2, #0
 800079e:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 80007a0:	4b1e      	ldr	r3, [pc, #120]	@ (800081c <MX_ADC2_Init+0xc0>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007a6:	4b1d      	ldr	r3, [pc, #116]	@ (800081c <MX_ADC2_Init+0xc0>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ac:	4b1b      	ldr	r3, [pc, #108]	@ (800081c <MX_ADC2_Init+0xc0>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007b2:	4b1a      	ldr	r3, [pc, #104]	@ (800081c <MX_ADC2_Init+0xc0>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80007b8:	4b18      	ldr	r3, [pc, #96]	@ (800081c <MX_ADC2_Init+0xc0>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007be:	4b17      	ldr	r3, [pc, #92]	@ (800081c <MX_ADC2_Init+0xc0>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80007c4:	4b15      	ldr	r3, [pc, #84]	@ (800081c <MX_ADC2_Init+0xc0>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 80007ca:	4b14      	ldr	r3, [pc, #80]	@ (800081c <MX_ADC2_Init+0xc0>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007d2:	4812      	ldr	r0, [pc, #72]	@ (800081c <MX_ADC2_Init+0xc0>)
 80007d4:	f001 fba4 	bl	8001f20 <HAL_ADC_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 80007de:	f000 fa37 	bl	8000c50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80007e2:	4b10      	ldr	r3, [pc, #64]	@ (8000824 <MX_ADC2_Init+0xc8>)
 80007e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007e6:	2306      	movs	r3, #6
 80007e8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80007ea:	2300      	movs	r3, #0
 80007ec:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007ee:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 80007f2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007f4:	2304      	movs	r3, #4
 80007f6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000800:	1d3b      	adds	r3, r7, #4
 8000802:	4619      	mov	r1, r3
 8000804:	4805      	ldr	r0, [pc, #20]	@ (800081c <MX_ADC2_Init+0xc0>)
 8000806:	f001 fce5 	bl	80021d4 <HAL_ADC_ConfigChannel>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000810:	f000 fa1e 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	3720      	adds	r7, #32
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	2400018c 	.word	0x2400018c
 8000820:	40022100 	.word	0x40022100
 8000824:	21800100 	.word	0x21800100

08000828 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 800082c:	4b16      	ldr	r3, [pc, #88]	@ (8000888 <MX_DCMI_Init+0x60>)
 800082e:	4a17      	ldr	r2, [pc, #92]	@ (800088c <MX_DCMI_Init+0x64>)
 8000830:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000832:	4b15      	ldr	r3, [pc, #84]	@ (8000888 <MX_DCMI_Init+0x60>)
 8000834:	2200      	movs	r2, #0
 8000836:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000838:	4b13      	ldr	r3, [pc, #76]	@ (8000888 <MX_DCMI_Init+0x60>)
 800083a:	2220      	movs	r2, #32
 800083c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 800083e:	4b12      	ldr	r3, [pc, #72]	@ (8000888 <MX_DCMI_Init+0x60>)
 8000840:	2280      	movs	r2, #128	@ 0x80
 8000842:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000844:	4b10      	ldr	r3, [pc, #64]	@ (8000888 <MX_DCMI_Init+0x60>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800084a:	4b0f      	ldr	r3, [pc, #60]	@ (8000888 <MX_DCMI_Init+0x60>)
 800084c:	2200      	movs	r2, #0
 800084e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000850:	4b0d      	ldr	r3, [pc, #52]	@ (8000888 <MX_DCMI_Init+0x60>)
 8000852:	2200      	movs	r2, #0
 8000854:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000856:	4b0c      	ldr	r3, [pc, #48]	@ (8000888 <MX_DCMI_Init+0x60>)
 8000858:	2200      	movs	r2, #0
 800085a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800085c:	4b0a      	ldr	r3, [pc, #40]	@ (8000888 <MX_DCMI_Init+0x60>)
 800085e:	2200      	movs	r2, #0
 8000860:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000862:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <MX_DCMI_Init+0x60>)
 8000864:	2200      	movs	r2, #0
 8000866:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000868:	4b07      	ldr	r3, [pc, #28]	@ (8000888 <MX_DCMI_Init+0x60>)
 800086a:	2200      	movs	r2, #0
 800086c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800086e:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <MX_DCMI_Init+0x60>)
 8000870:	2200      	movs	r2, #0
 8000872:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000874:	4804      	ldr	r0, [pc, #16]	@ (8000888 <MX_DCMI_Init+0x60>)
 8000876:	f002 fa43 	bl	8002d00 <HAL_DCMI_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000880:	f000 f9e6 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	240001f0 	.word	0x240001f0
 800088c:	48020000 	.word	0x48020000

08000890 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000894:	4b1b      	ldr	r3, [pc, #108]	@ (8000904 <MX_I2C2_Init+0x74>)
 8000896:	4a1c      	ldr	r2, [pc, #112]	@ (8000908 <MX_I2C2_Init+0x78>)
 8000898:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B0CCFF;
 800089a:	4b1a      	ldr	r3, [pc, #104]	@ (8000904 <MX_I2C2_Init+0x74>)
 800089c:	4a1b      	ldr	r2, [pc, #108]	@ (800090c <MX_I2C2_Init+0x7c>)
 800089e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80008a0:	4b18      	ldr	r3, [pc, #96]	@ (8000904 <MX_I2C2_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a6:	4b17      	ldr	r3, [pc, #92]	@ (8000904 <MX_I2C2_Init+0x74>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ac:	4b15      	ldr	r3, [pc, #84]	@ (8000904 <MX_I2C2_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80008b2:	4b14      	ldr	r3, [pc, #80]	@ (8000904 <MX_I2C2_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008b8:	4b12      	ldr	r3, [pc, #72]	@ (8000904 <MX_I2C2_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008be:	4b11      	ldr	r3, [pc, #68]	@ (8000904 <MX_I2C2_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000904 <MX_I2C2_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008ca:	480e      	ldr	r0, [pc, #56]	@ (8000904 <MX_I2C2_Init+0x74>)
 80008cc:	f006 fa66 	bl	8006d9c <HAL_I2C_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80008d6:	f000 f9bb 	bl	8000c50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008da:	2100      	movs	r1, #0
 80008dc:	4809      	ldr	r0, [pc, #36]	@ (8000904 <MX_I2C2_Init+0x74>)
 80008de:	f006 fe7b 	bl	80075d8 <HAL_I2CEx_ConfigAnalogFilter>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008e8:	f000 f9b2 	bl	8000c50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008ec:	2100      	movs	r1, #0
 80008ee:	4805      	ldr	r0, [pc, #20]	@ (8000904 <MX_I2C2_Init+0x74>)
 80008f0:	f006 febd 	bl	800766e <HAL_I2CEx_ConfigDigitalFilter>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008fa:	f000 f9a9 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	240002b8 	.word	0x240002b8
 8000908:	40005800 	.word	0x40005800
 800090c:	20b0ccff 	.word	0x20b0ccff

08000910 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000914:	4b27      	ldr	r3, [pc, #156]	@ (80009b4 <MX_SPI4_Init+0xa4>)
 8000916:	4a28      	ldr	r2, [pc, #160]	@ (80009b8 <MX_SPI4_Init+0xa8>)
 8000918:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800091a:	4b26      	ldr	r3, [pc, #152]	@ (80009b4 <MX_SPI4_Init+0xa4>)
 800091c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000920:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000922:	4b24      	ldr	r3, [pc, #144]	@ (80009b4 <MX_SPI4_Init+0xa4>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000928:	4b22      	ldr	r3, [pc, #136]	@ (80009b4 <MX_SPI4_Init+0xa4>)
 800092a:	2207      	movs	r2, #7
 800092c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800092e:	4b21      	ldr	r3, [pc, #132]	@ (80009b4 <MX_SPI4_Init+0xa4>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000934:	4b1f      	ldr	r3, [pc, #124]	@ (80009b4 <MX_SPI4_Init+0xa4>)
 8000936:	2200      	movs	r2, #0
 8000938:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800093a:	4b1e      	ldr	r3, [pc, #120]	@ (80009b4 <MX_SPI4_Init+0xa4>)
 800093c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000940:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000942:	4b1c      	ldr	r3, [pc, #112]	@ (80009b4 <MX_SPI4_Init+0xa4>)
 8000944:	2200      	movs	r2, #0
 8000946:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000948:	4b1a      	ldr	r3, [pc, #104]	@ (80009b4 <MX_SPI4_Init+0xa4>)
 800094a:	2200      	movs	r2, #0
 800094c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800094e:	4b19      	ldr	r3, [pc, #100]	@ (80009b4 <MX_SPI4_Init+0xa4>)
 8000950:	2200      	movs	r2, #0
 8000952:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000954:	4b17      	ldr	r3, [pc, #92]	@ (80009b4 <MX_SPI4_Init+0xa4>)
 8000956:	2200      	movs	r2, #0
 8000958:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 800095a:	4b16      	ldr	r3, [pc, #88]	@ (80009b4 <MX_SPI4_Init+0xa4>)
 800095c:	2200      	movs	r2, #0
 800095e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000960:	4b14      	ldr	r3, [pc, #80]	@ (80009b4 <MX_SPI4_Init+0xa4>)
 8000962:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000966:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000968:	4b12      	ldr	r3, [pc, #72]	@ (80009b4 <MX_SPI4_Init+0xa4>)
 800096a:	2200      	movs	r2, #0
 800096c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800096e:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <MX_SPI4_Init+0xa4>)
 8000970:	2200      	movs	r2, #0
 8000972:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000974:	4b0f      	ldr	r3, [pc, #60]	@ (80009b4 <MX_SPI4_Init+0xa4>)
 8000976:	2200      	movs	r2, #0
 8000978:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800097a:	4b0e      	ldr	r3, [pc, #56]	@ (80009b4 <MX_SPI4_Init+0xa4>)
 800097c:	2200      	movs	r2, #0
 800097e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000980:	4b0c      	ldr	r3, [pc, #48]	@ (80009b4 <MX_SPI4_Init+0xa4>)
 8000982:	2200      	movs	r2, #0
 8000984:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000986:	4b0b      	ldr	r3, [pc, #44]	@ (80009b4 <MX_SPI4_Init+0xa4>)
 8000988:	2200      	movs	r2, #0
 800098a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800098c:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <MX_SPI4_Init+0xa4>)
 800098e:	2200      	movs	r2, #0
 8000990:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000992:	4b08      	ldr	r3, [pc, #32]	@ (80009b4 <MX_SPI4_Init+0xa4>)
 8000994:	2200      	movs	r2, #0
 8000996:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000998:	4b06      	ldr	r3, [pc, #24]	@ (80009b4 <MX_SPI4_Init+0xa4>)
 800099a:	2200      	movs	r2, #0
 800099c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800099e:	4805      	ldr	r0, [pc, #20]	@ (80009b4 <MX_SPI4_Init+0xa4>)
 80009a0:	f00b fdb8 	bl	800c514 <HAL_SPI_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 80009aa:	f000 f951 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	2400030c 	.word	0x2400030c
 80009b8:	40013400 	.word	0x40013400

080009bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009c2:	4b15      	ldr	r3, [pc, #84]	@ (8000a18 <MX_DMA_Init+0x5c>)
 80009c4:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80009c8:	4a13      	ldr	r2, [pc, #76]	@ (8000a18 <MX_DMA_Init+0x5c>)
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80009d2:	4b11      	ldr	r3, [pc, #68]	@ (8000a18 <MX_DMA_Init+0x5c>)
 80009d4:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80009d8:	f003 0301 	and.w	r3, r3, #1
 80009dc:	607b      	str	r3, [r7, #4]
 80009de:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2100      	movs	r1, #0
 80009e4:	200b      	movs	r0, #11
 80009e6:	f002 f8de 	bl	8002ba6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80009ea:	200b      	movs	r0, #11
 80009ec:	f002 f8f5 	bl	8002bda <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2100      	movs	r1, #0
 80009f4:	200c      	movs	r0, #12
 80009f6:	f002 f8d6 	bl	8002ba6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80009fa:	200c      	movs	r0, #12
 80009fc:	f002 f8ed 	bl	8002bda <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000a00:	2200      	movs	r2, #0
 8000a02:	2100      	movs	r1, #0
 8000a04:	200d      	movs	r0, #13
 8000a06:	f002 f8ce 	bl	8002ba6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000a0a:	200d      	movs	r0, #13
 8000a0c:	f002 f8e5 	bl	8002bda <HAL_NVIC_EnableIRQ>

}
 8000a10:	bf00      	nop
 8000a12:	3708      	adds	r7, #8
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	58024400 	.word	0x58024400

08000a1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08c      	sub	sp, #48	@ 0x30
 8000a20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
 8000a30:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a32:	4b6c      	ldr	r3, [pc, #432]	@ (8000be4 <MX_GPIO_Init+0x1c8>)
 8000a34:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a38:	4a6a      	ldr	r2, [pc, #424]	@ (8000be4 <MX_GPIO_Init+0x1c8>)
 8000a3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a3e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a42:	4b68      	ldr	r3, [pc, #416]	@ (8000be4 <MX_GPIO_Init+0x1c8>)
 8000a44:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a4c:	61bb      	str	r3, [r7, #24]
 8000a4e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a50:	4b64      	ldr	r3, [pc, #400]	@ (8000be4 <MX_GPIO_Init+0x1c8>)
 8000a52:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a56:	4a63      	ldr	r2, [pc, #396]	@ (8000be4 <MX_GPIO_Init+0x1c8>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a60:	4b60      	ldr	r3, [pc, #384]	@ (8000be4 <MX_GPIO_Init+0x1c8>)
 8000a62:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	617b      	str	r3, [r7, #20]
 8000a6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6e:	4b5d      	ldr	r3, [pc, #372]	@ (8000be4 <MX_GPIO_Init+0x1c8>)
 8000a70:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a74:	4a5b      	ldr	r2, [pc, #364]	@ (8000be4 <MX_GPIO_Init+0x1c8>)
 8000a76:	f043 0304 	orr.w	r3, r3, #4
 8000a7a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a7e:	4b59      	ldr	r3, [pc, #356]	@ (8000be4 <MX_GPIO_Init+0x1c8>)
 8000a80:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a84:	f003 0304 	and.w	r3, r3, #4
 8000a88:	613b      	str	r3, [r7, #16]
 8000a8a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a8c:	4b55      	ldr	r3, [pc, #340]	@ (8000be4 <MX_GPIO_Init+0x1c8>)
 8000a8e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000a92:	4a54      	ldr	r2, [pc, #336]	@ (8000be4 <MX_GPIO_Init+0x1c8>)
 8000a94:	f043 0302 	orr.w	r3, r3, #2
 8000a98:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000a9c:	4b51      	ldr	r3, [pc, #324]	@ (8000be4 <MX_GPIO_Init+0x1c8>)
 8000a9e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000aa2:	f003 0302 	and.w	r3, r3, #2
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aaa:	4b4e      	ldr	r3, [pc, #312]	@ (8000be4 <MX_GPIO_Init+0x1c8>)
 8000aac:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ab0:	4a4c      	ldr	r2, [pc, #304]	@ (8000be4 <MX_GPIO_Init+0x1c8>)
 8000ab2:	f043 0310 	orr.w	r3, r3, #16
 8000ab6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000aba:	4b4a      	ldr	r3, [pc, #296]	@ (8000be4 <MX_GPIO_Init+0x1c8>)
 8000abc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ac0:	f003 0310 	and.w	r3, r3, #16
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ac8:	4b46      	ldr	r3, [pc, #280]	@ (8000be4 <MX_GPIO_Init+0x1c8>)
 8000aca:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ace:	4a45      	ldr	r2, [pc, #276]	@ (8000be4 <MX_GPIO_Init+0x1c8>)
 8000ad0:	f043 0308 	orr.w	r3, r3, #8
 8000ad4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000ad8:	4b42      	ldr	r3, [pc, #264]	@ (8000be4 <MX_GPIO_Init+0x1c8>)
 8000ada:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000ade:	f003 0308 	and.w	r3, r3, #8
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_3V3_GPIO_Port, DCMI_3V3_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000aec:	483e      	ldr	r0, [pc, #248]	@ (8000be8 <MX_GPIO_Init+0x1cc>)
 8000aee:	f006 f93b 	bl	8006d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SDN_GPIO_Port, SDN_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000af8:	483c      	ldr	r0, [pc, #240]	@ (8000bec <MX_GPIO_Init+0x1d0>)
 8000afa:	f006 f935 	bl	8006d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_RST_GPIO_Port, DCMI_RST_Pin, GPIO_PIN_RESET);
 8000afe:	2200      	movs	r2, #0
 8000b00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b04:	483a      	ldr	r0, [pc, #232]	@ (8000bf0 <MX_GPIO_Init+0x1d4>)
 8000b06:	f006 f92f 	bl	8006d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWDN_GPIO_Port, DCMI_PWDN_Pin, GPIO_PIN_SET);
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b10:	4837      	ldr	r0, [pc, #220]	@ (8000bf0 <MX_GPIO_Init+0x1d4>)
 8000b12:	f006 f929 	bl	8006d68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : INT_N_Pin */
  GPIO_InitStruct.Pin = INT_N_Pin;
 8000b16:	2380      	movs	r3, #128	@ 0x80
 8000b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(INT_N_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 031c 	add.w	r3, r7, #28
 8000b26:	4619      	mov	r1, r3
 8000b28:	4832      	ldr	r0, [pc, #200]	@ (8000bf4 <MX_GPIO_Init+0x1d8>)
 8000b2a:	f005 ff6d 	bl	8006a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLT__Pin */
  GPIO_InitStruct.Pin = FLT__Pin;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b32:	2300      	movs	r3, #0
 8000b34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(FLT__GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f107 031c 	add.w	r3, r7, #28
 8000b3e:	4619      	mov	r1, r3
 8000b40:	482a      	ldr	r0, [pc, #168]	@ (8000bec <MX_GPIO_Init+0x1d0>)
 8000b42:	f005 ff61 	bl	8006a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : COMMAND_DONE_Pin nIRQ_Pin */
  GPIO_InitStruct.Pin = COMMAND_DONE_Pin|nIRQ_Pin;
 8000b46:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000b4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b54:	f107 031c 	add.w	r3, r7, #28
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4823      	ldr	r0, [pc, #140]	@ (8000be8 <MX_GPIO_Init+0x1cc>)
 8000b5c:	f005 ff54 	bl	8006a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_3V3_Pin */
  GPIO_InitStruct.Pin = DCMI_3V3_Pin;
 8000b60:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b66:	2301      	movs	r3, #1
 8000b68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(DCMI_3V3_GPIO_Port, &GPIO_InitStruct);
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	4619      	mov	r1, r3
 8000b78:	481b      	ldr	r0, [pc, #108]	@ (8000be8 <MX_GPIO_Init+0x1cc>)
 8000b7a:	f005 ff45 	bl	8006a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDN_Pin */
  GPIO_InitStruct.Pin = SDN_Pin;
 8000b7e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b84:	2301      	movs	r3, #1
 8000b86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SDN_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 031c 	add.w	r3, r7, #28
 8000b94:	4619      	mov	r1, r3
 8000b96:	4815      	ldr	r0, [pc, #84]	@ (8000bec <MX_GPIO_Init+0x1d0>)
 8000b98:	f005 ff36 	bl	8006a08 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_RST_Pin DCMI_PWDN_Pin */
  GPIO_InitStruct.Pin = DCMI_RST_Pin|DCMI_PWDN_Pin;
 8000b9c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	480e      	ldr	r0, [pc, #56]	@ (8000bf0 <MX_GPIO_Init+0x1d4>)
 8000bb6:	f005 ff27 	bl	8006a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_MCLK_Pin */
  GPIO_InitStruct.Pin = DCMI_MCLK_Pin;
 8000bba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DCMI_MCLK_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 031c 	add.w	r3, r7, #28
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4807      	ldr	r0, [pc, #28]	@ (8000bf4 <MX_GPIO_Init+0x1d8>)
 8000bd8:	f005 ff16 	bl	8006a08 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000bdc:	bf00      	nop
 8000bde:	3730      	adds	r7, #48	@ 0x30
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	58024400 	.word	0x58024400
 8000be8:	58021000 	.word	0x58021000
 8000bec:	58020400 	.word	0x58020400
 8000bf0:	58020c00 	.word	0x58020c00
 8000bf4:	58020000 	.word	0x58020000

08000bf8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000bfe:	463b      	mov	r3, r7
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
 8000c04:	605a      	str	r2, [r3, #4]
 8000c06:	609a      	str	r2, [r3, #8]
 8000c08:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000c0a:	f002 f801 	bl	8002c10 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000c1a:	231f      	movs	r3, #31
 8000c1c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000c1e:	2387      	movs	r3, #135	@ 0x87
 8000c20:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000c26:	2300      	movs	r3, #0
 8000c28:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c32:	2300      	movs	r3, #0
 8000c34:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c3a:	463b      	mov	r3, r7
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f002 f81f 	bl	8002c80 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c42:	2004      	movs	r0, #4
 8000c44:	f001 fffc 	bl	8002c40 <HAL_MPU_Enable>

}
 8000c48:	bf00      	nop
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c54:	b672      	cpsid	i
}
 8000c56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <Error_Handler+0x8>

08000c5c <camera_init>:
	status |= HAL_I2C_Master_Receive(p_I2C, CAM_READ, data, 1, 100);
	return status;
}
*/

void camera_init(HAL_StatusTypeDef* status, uint8_t* mode){
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
	//uint8_t read_value;



	// Power-up camera
	HAL_GPIO_WritePin(CAM_PWR_PORT, CAM_PWR_PIN, GPIO_PIN_SET);
 8000c66:	2201      	movs	r2, #1
 8000c68:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000c6c:	489e      	ldr	r0, [pc, #632]	@ (8000ee8 <camera_init+0x28c>)
 8000c6e:	f006 f87b 	bl	8006d68 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8000c72:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000c76:	f000 ff71 	bl	8001b5c <HAL_Delay>

	// Enable camera
	HAL_GPIO_WritePin(CAM_PWDN_PORT, CAM_PWDN_PIN, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c80:	489a      	ldr	r0, [pc, #616]	@ (8000eec <camera_init+0x290>)
 8000c82:	f006 f871 	bl	8006d68 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8000c86:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8000c8a:	f000 ff67 	bl	8001b5c <HAL_Delay>

	// Reset camera
	HAL_GPIO_WritePin(CAM_RESET_PORT, CAM_RESET_PIN, GPIO_PIN_RESET);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c94:	4895      	ldr	r0, [pc, #596]	@ (8000eec <camera_init+0x290>)
 8000c96:	f006 f867 	bl	8006d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000c9a:	2064      	movs	r0, #100	@ 0x64
 8000c9c:	f000 ff5e 	bl	8001b5c <HAL_Delay>
	HAL_GPIO_WritePin(CAM_RESET_PORT, CAM_RESET_PIN, GPIO_PIN_SET);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000ca6:	4891      	ldr	r0, [pc, #580]	@ (8000eec <camera_init+0x290>)
 8000ca8:	f006 f85e 	bl	8006d68 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000cac:	2064      	movs	r0, #100	@ 0x64
 8000cae:	f000 ff55 	bl	8001b5c <HAL_Delay>


	// Initialization common for all modes
	uint8_t data = 0x80;
 8000cb2:	2380      	movs	r3, #128	@ 0x80
 8000cb4:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 8000cb6:	f107 030f 	add.w	r3, r7, #15
 8000cba:	2212      	movs	r2, #18
 8000cbc:	2142      	movs	r1, #66	@ 0x42
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f7ff fb14 	bl	80002ec <I2C_write>
	//status = camera_write(CAM_COM7, 0x80);			// Reset all registers
	data = 0x01;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, CAM_WRITE, CAM_CLKRC, &data);
 8000cc8:	f107 030f 	add.w	r3, r7, #15
 8000ccc:	2211      	movs	r2, #17
 8000cce:	2142      	movs	r1, #66	@ 0x42
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff fb0b 	bl	80002ec <I2C_write>
	//status |= camera_write(CAM_CLKRC, 0x01);		// Set clock pre-scaler /2, since A/C converter operates up to 12 MHz and input CLK is 24 MHz
	data = 0x0A;
 8000cd6:	230a      	movs	r3, #10
 8000cd8:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, CAM_WRITE, CAM_DBLV, &data);
 8000cda:	f107 030f 	add.w	r3, r7, #15
 8000cde:	226b      	movs	r2, #107	@ 0x6b
 8000ce0:	2142      	movs	r1, #66	@ 0x42
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f7ff fb02 	bl	80002ec <I2C_write>
	//status |= camera_write(CAM_DBLV, 0x0A);			// Bypass PLL

	// Enable scaling for resolutions smaller than VGA
	if ((*mode != 0x00) && (*mode != 0x01)) {
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d00c      	beq.n	8000d0a <camera_init+0xae>
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d008      	beq.n	8000d0a <camera_init+0xae>
		//status |= camera_write(CAM_COM3, 0x08);
		data = 0x08;
 8000cf8:	2308      	movs	r3, #8
 8000cfa:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM3, &data);
 8000cfc:	f107 030f 	add.w	r3, r7, #15
 8000d00:	220c      	movs	r2, #12
 8000d02:	2142      	movs	r1, #66	@ 0x42
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff faf1 	bl	80002ec <I2C_write>
	}

	// Settings depending on choice of mode
	switch (*mode) {
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b31      	cmp	r3, #49	@ 0x31
 8000d10:	f200 80dc 	bhi.w	8000ecc <camera_init+0x270>
 8000d14:	a201      	add	r2, pc, #4	@ (adr r2, 8000d1c <camera_init+0xc0>)
 8000d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d1a:	bf00      	nop
 8000d1c:	08000de5 	.word	0x08000de5
 8000d20:	08000df9 	.word	0x08000df9
 8000d24:	08000ecd 	.word	0x08000ecd
 8000d28:	08000ecd 	.word	0x08000ecd
 8000d2c:	08000ecd 	.word	0x08000ecd
 8000d30:	08000ecd 	.word	0x08000ecd
 8000d34:	08000ecd 	.word	0x08000ecd
 8000d38:	08000ecd 	.word	0x08000ecd
 8000d3c:	08000ecd 	.word	0x08000ecd
 8000d40:	08000ecd 	.word	0x08000ecd
 8000d44:	08000ecd 	.word	0x08000ecd
 8000d48:	08000ecd 	.word	0x08000ecd
 8000d4c:	08000ecd 	.word	0x08000ecd
 8000d50:	08000ecd 	.word	0x08000ecd
 8000d54:	08000ecd 	.word	0x08000ecd
 8000d58:	08000ecd 	.word	0x08000ecd
 8000d5c:	08000e1f 	.word	0x08000e1f
 8000d60:	08000e33 	.word	0x08000e33
 8000d64:	08000ecd 	.word	0x08000ecd
 8000d68:	08000ecd 	.word	0x08000ecd
 8000d6c:	08000ecd 	.word	0x08000ecd
 8000d70:	08000ecd 	.word	0x08000ecd
 8000d74:	08000ecd 	.word	0x08000ecd
 8000d78:	08000ecd 	.word	0x08000ecd
 8000d7c:	08000ecd 	.word	0x08000ecd
 8000d80:	08000ecd 	.word	0x08000ecd
 8000d84:	08000ecd 	.word	0x08000ecd
 8000d88:	08000ecd 	.word	0x08000ecd
 8000d8c:	08000ecd 	.word	0x08000ecd
 8000d90:	08000ecd 	.word	0x08000ecd
 8000d94:	08000ecd 	.word	0x08000ecd
 8000d98:	08000ecd 	.word	0x08000ecd
 8000d9c:	08000e59 	.word	0x08000e59
 8000da0:	08000e6d 	.word	0x08000e6d
 8000da4:	08000ecd 	.word	0x08000ecd
 8000da8:	08000ecd 	.word	0x08000ecd
 8000dac:	08000ecd 	.word	0x08000ecd
 8000db0:	08000ecd 	.word	0x08000ecd
 8000db4:	08000ecd 	.word	0x08000ecd
 8000db8:	08000ecd 	.word	0x08000ecd
 8000dbc:	08000ecd 	.word	0x08000ecd
 8000dc0:	08000ecd 	.word	0x08000ecd
 8000dc4:	08000ecd 	.word	0x08000ecd
 8000dc8:	08000ecd 	.word	0x08000ecd
 8000dcc:	08000ecd 	.word	0x08000ecd
 8000dd0:	08000ecd 	.word	0x08000ecd
 8000dd4:	08000ecd 	.word	0x08000ecd
 8000dd8:	08000ecd 	.word	0x08000ecd
 8000ddc:	08000e93 	.word	0x08000e93
 8000de0:	08000ea7 	.word	0x08000ea7
	// VGA - YUV
	case 0x00: {
		//status |= camera_write(CAM_COM7, 0x00);		// Set output format
		data = 0x00;
 8000de4:	2300      	movs	r3, #0
 8000de6:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 8000de8:	f107 030f 	add.w	r3, r7, #15
 8000dec:	2212      	movs	r2, #18
 8000dee:	2142      	movs	r1, #66	@ 0x42
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f7ff fa7b 	bl	80002ec <I2C_write>
		break;
 8000df6:	e069      	b.n	8000ecc <camera_init+0x270>
	}
	// VGA - RGB565
	case 0x01: {
		//status |= camera_write(CAM_COM7, 0x04);		// Set output format
		data = 0x04;
 8000df8:	2304      	movs	r3, #4
 8000dfa:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 8000dfc:	f107 030f 	add.w	r3, r7, #15
 8000e00:	2212      	movs	r2, #18
 8000e02:	2142      	movs	r1, #66	@ 0x42
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff fa71 	bl	80002ec <I2C_write>
		//status |= camera_write(CAM_COM15, 0xD0);	// Set 565 RGB option
		data = 0xD0;
 8000e0a:	23d0      	movs	r3, #208	@ 0xd0
 8000e0c:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM15, &data);
 8000e0e:	f107 030f 	add.w	r3, r7, #15
 8000e12:	2240      	movs	r2, #64	@ 0x40
 8000e14:	2142      	movs	r1, #66	@ 0x42
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff fa68 	bl	80002ec <I2C_write>
		break;
 8000e1c:	e056      	b.n	8000ecc <camera_init+0x270>
	}
	// CIF - YUV
	case 0x10: {
		//status |= camera_write(CAM_COM7, 0x20);		// Set output format
		data = 0x20;
 8000e1e:	2320      	movs	r3, #32
 8000e20:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 8000e22:	f107 030f 	add.w	r3, r7, #15
 8000e26:	2212      	movs	r2, #18
 8000e28:	2142      	movs	r1, #66	@ 0x42
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f7ff fa5e 	bl	80002ec <I2C_write>
		break;
 8000e30:	e04c      	b.n	8000ecc <camera_init+0x270>
	}
	// CIF - RGB565
	case 0x11: {
		//status |= camera_write(CAM_COM7, 0x24);		// Set output format
		data = 0x24;
 8000e32:	2324      	movs	r3, #36	@ 0x24
 8000e34:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 8000e36:	f107 030f 	add.w	r3, r7, #15
 8000e3a:	2212      	movs	r2, #18
 8000e3c:	2142      	movs	r1, #66	@ 0x42
 8000e3e:	6878      	ldr	r0, [r7, #4]
 8000e40:	f7ff fa54 	bl	80002ec <I2C_write>
		//status |= camera_write(CAM_COM15, 0xD0);	// Set 565 RGB option
		data = 0xD0;
 8000e44:	23d0      	movs	r3, #208	@ 0xd0
 8000e46:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM15, &data);
 8000e48:	f107 030f 	add.w	r3, r7, #15
 8000e4c:	2240      	movs	r2, #64	@ 0x40
 8000e4e:	2142      	movs	r1, #66	@ 0x42
 8000e50:	6878      	ldr	r0, [r7, #4]
 8000e52:	f7ff fa4b 	bl	80002ec <I2C_write>
		break;
 8000e56:	e039      	b.n	8000ecc <camera_init+0x270>
	}
	// QVGA - YUV
	case 0x20: {
		//status |= camera_write(CAM_COM7, 0x10);		// Set output format
		data = 0x10;
 8000e58:	2310      	movs	r3, #16
 8000e5a:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 8000e5c:	f107 030f 	add.w	r3, r7, #15
 8000e60:	2212      	movs	r2, #18
 8000e62:	2142      	movs	r1, #66	@ 0x42
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f7ff fa41 	bl	80002ec <I2C_write>
		break;
 8000e6a:	e02f      	b.n	8000ecc <camera_init+0x270>
	}
	// QVGA - RGB565
	case 0x21: {
		//status |= camera_write(CAM_COM7, 0x14);		// Set output format
		data = 0x14;
 8000e6c:	2314      	movs	r3, #20
 8000e6e:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 8000e70:	f107 030f 	add.w	r3, r7, #15
 8000e74:	2212      	movs	r2, #18
 8000e76:	2142      	movs	r1, #66	@ 0x42
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f7ff fa37 	bl	80002ec <I2C_write>
		//status |= camera_write(CAM_COM15, 0xD0);	// Set 565 RGB option
		data = 0xD0;
 8000e7e:	23d0      	movs	r3, #208	@ 0xd0
 8000e80:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM15, &data);
 8000e82:	f107 030f 	add.w	r3, r7, #15
 8000e86:	2240      	movs	r2, #64	@ 0x40
 8000e88:	2142      	movs	r1, #66	@ 0x42
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f7ff fa2e 	bl	80002ec <I2C_write>
		break;
 8000e90:	e01c      	b.n	8000ecc <camera_init+0x270>
	}
	// QCIF - YUV
	case 0x30: {
		//status |= camera_write(CAM_COM7, 0x08);		// Set output format
		data = 0x08;
 8000e92:	2308      	movs	r3, #8
 8000e94:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 8000e96:	f107 030f 	add.w	r3, r7, #15
 8000e9a:	2212      	movs	r2, #18
 8000e9c:	2142      	movs	r1, #66	@ 0x42
 8000e9e:	6878      	ldr	r0, [r7, #4]
 8000ea0:	f7ff fa24 	bl	80002ec <I2C_write>
		break;
 8000ea4:	e012      	b.n	8000ecc <camera_init+0x270>
	}
	// QCIF - RGB565
	case 0x31: {
		//status |= camera_write(CAM_COM7, 0x0C);		// Set output format
		data = 0x0C;
 8000ea6:	230c      	movs	r3, #12
 8000ea8:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 8000eaa:	f107 030f 	add.w	r3, r7, #15
 8000eae:	2212      	movs	r2, #18
 8000eb0:	2142      	movs	r1, #66	@ 0x42
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff fa1a 	bl	80002ec <I2C_write>
		//status |= camera_write(CAM_COM15, 0xD0);	// Set 565 RGB option
		data = 0xD0;
 8000eb8:	23d0      	movs	r3, #208	@ 0xd0
 8000eba:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM15, &data);
 8000ebc:	f107 030f 	add.w	r3, r7, #15
 8000ec0:	2240      	movs	r2, #64	@ 0x40
 8000ec2:	2142      	movs	r1, #66	@ 0x42
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f7ff fa11 	bl	80002ec <I2C_write>
		break;
 8000eca:	bf00      	nop
	}


	//status |= camera_write(CAM_COM8, 0x8F);		// Automatic exposure & gain control
	//status |= camera_write(CAM_RSVD, 0x84);			// Colour correction
	data = 0x84;
 8000ecc:	2384      	movs	r3, #132	@ 0x84
 8000ece:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, CAM_WRITE, CAM_RSVD, &data);
 8000ed0:	f107 030f 	add.w	r3, r7, #15
 8000ed4:	22b0      	movs	r2, #176	@ 0xb0
 8000ed6:	2142      	movs	r1, #66	@ 0x42
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff fa07 	bl	80002ec <I2C_write>

	//return status;
}
 8000ede:	bf00      	nop
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	58021000 	.word	0x58021000
 8000eec:	58020c00 	.word	0x58020c00

08000ef0 <camera_capture_photo>:


void camera_capture_photo(HAL_StatusTypeDef* status, uint8_t* destination_adress, uint32_t* size) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
	//HAL_StatusTypeDef status;

	// Begin transmission of data from camera to memory
	*status = HAL_DCMI_Start_DMA(&hdma_dcmi, DCMI_MODE_SNAPSHOT, destination_adress, *size);
 8000efc:	68ba      	ldr	r2, [r7, #8]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	2102      	movs	r1, #2
 8000f04:	480a      	ldr	r0, [pc, #40]	@ (8000f30 <camera_capture_photo+0x40>)
 8000f06:	f001 ff75 	bl	8002df4 <HAL_DCMI_Start_DMA>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	701a      	strb	r2, [r3, #0]
	HAL_Delay(5000);
 8000f12:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000f16:	f000 fe21 	bl	8001b5c <HAL_Delay>

	// End transmission
	*status = HAL_DCMI_Stop(&hdma_dcmi);
 8000f1a:	4805      	ldr	r0, [pc, #20]	@ (8000f30 <camera_capture_photo+0x40>)
 8000f1c:	f002 f82c 	bl	8002f78 <HAL_DCMI_Stop>
 8000f20:	4603      	mov	r3, r0
 8000f22:	461a      	mov	r2, r3
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	701a      	strb	r2, [r3, #0]

	//return status;
}
 8000f28:	bf00      	nop
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	24000240 	.word	0x24000240

08000f34 <cmd_main_win>:
		*error_index = RADIO_SET_RX;
	}

}

void cmd_main_win() {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b0c6      	sub	sp, #280	@ 0x118
 8000f38:	af00      	add	r7, sp, #0
	uint8_t TxBuffer[] = "==================================================\r\n"
 8000f3a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f3e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000f42:	4a0c      	ldr	r2, [pc, #48]	@ (8000f74 <cmd_main_win+0x40>)
 8000f44:	4618      	mov	r0, r3
 8000f46:	4611      	mov	r1, r2
 8000f48:	f240 1313 	movw	r3, #275	@ 0x113
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	f00f ffc5 	bl	8010edc <memcpy>
						 "--------------------------------------------------\r\n"
						 "1) Get satellite's telemetry \r\n "
						 "2) Get image \r\n "
						 "3) Clear terminal \r\n"
						 "==================================================\r\n";
	uint16_t TxBufferLen = sizeof(TxBuffer);
 8000f52:	f240 1313 	movw	r3, #275	@ 0x113
 8000f56:	f8a7 3116 	strh.w	r3, [r7, #278]	@ 0x116
	CDC_Transmit_HS(TxBuffer, TxBufferLen);
 8000f5a:	f8b7 2116 	ldrh.w	r2, [r7, #278]	@ 0x116
 8000f5e:	463b      	mov	r3, r7
 8000f60:	4611      	mov	r1, r2
 8000f62:	4618      	mov	r0, r3
 8000f64:	f00f fade 	bl	8010524 <CDC_Transmit_HS>
}
 8000f68:	bf00      	nop
 8000f6a:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	08010f34 	.word	0x08010f34

08000f78 <cmd_img_options>:

void cmd_img_options() {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b0e0      	sub	sp, #384	@ 0x180
 8000f7c:	af00      	add	r7, sp, #0
	uint8_t TxBuffer[] = "==================================================\r\n"
 8000f7e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8000f82:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8000f86:	4a0c      	ldr	r2, [pc, #48]	@ (8000fb8 <cmd_img_options+0x40>)
 8000f88:	4618      	mov	r0, r3
 8000f8a:	4611      	mov	r1, r2
 8000f8c:	f240 137b 	movw	r3, #379	@ 0x17b
 8000f90:	461a      	mov	r2, r3
 8000f92:	f00f ffa3 	bl	8010edc <memcpy>
						 "--------------------------------------------------\r\n"
						 "Y - Colour mode: \r\n"
						 "1) Black & White \r\n"
						 "2) Colourful \r\n"
						 "==================================================\r\n";
	uint16_t TxBufferLen = sizeof(TxBuffer);
 8000f96:	f240 137b 	movw	r3, #379	@ 0x17b
 8000f9a:	f8a7 317e 	strh.w	r3, [r7, #382]	@ 0x17e
	CDC_Transmit_HS(TxBuffer, TxBufferLen);
 8000f9e:	f8b7 217e 	ldrh.w	r2, [r7, #382]	@ 0x17e
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	4611      	mov	r1, r2
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f00f fabc 	bl	8010524 <CDC_Transmit_HS>
}
 8000fac:	bf00      	nop
 8000fae:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	08011048 	.word	0x08011048

08000fbc <capture_img>:

void capture_img(HAL_StatusTypeDef* status, fault_flag* error_index, uint8_t* img_mode) {
 8000fbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000fc0:	b089      	sub	sp, #36	@ 0x24
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	60f8      	str	r0, [r7, #12]
 8000fc6:	60b9      	str	r1, [r7, #8]
 8000fc8:	607a      	str	r2, [r7, #4]
	/*#define IMG_SIZE 614400 // VGA = 640 * 480 * 2
//#define IMG_SIZE 202752 // CIF = 352 * 288 * 2
//#define IMG_SIZE 153600 // QVGA = 320 * 240 * 2
//#define IMG_SIZE 50688 // QCIF = 176 * 144 * 2*/

	uint8_t res = (*img_mode & 0b11110000);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	f023 030f 	bic.w	r3, r3, #15
 8000fd2:	77fb      	strb	r3, [r7, #31]
	uint32_t size;
	switch (res) {
 8000fd4:	7ffb      	ldrb	r3, [r7, #31]
 8000fd6:	2b30      	cmp	r3, #48	@ 0x30
 8000fd8:	d016      	beq.n	8001008 <capture_img+0x4c>
 8000fda:	2b30      	cmp	r3, #48	@ 0x30
 8000fdc:	dc18      	bgt.n	8001010 <capture_img+0x54>
 8000fde:	2b20      	cmp	r3, #32
 8000fe0:	d00e      	beq.n	8001000 <capture_img+0x44>
 8000fe2:	2b20      	cmp	r3, #32
 8000fe4:	dc14      	bgt.n	8001010 <capture_img+0x54>
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d002      	beq.n	8000ff0 <capture_img+0x34>
 8000fea:	2b10      	cmp	r3, #16
 8000fec:	d004      	beq.n	8000ff8 <capture_img+0x3c>
 8000fee:	e00f      	b.n	8001010 <capture_img+0x54>
		case (0x00): {
			size = 614400;
 8000ff0:	f44f 2316 	mov.w	r3, #614400	@ 0x96000
 8000ff4:	613b      	str	r3, [r7, #16]
			break;
 8000ff6:	e012      	b.n	800101e <capture_img+0x62>
		}
		case (0x10): {
			size = 202752;
 8000ff8:	f44f 3346 	mov.w	r3, #202752	@ 0x31800
 8000ffc:	613b      	str	r3, [r7, #16]
			break;
 8000ffe:	e00e      	b.n	800101e <capture_img+0x62>
		}
		case (0x20): {
			size = 153600;
 8001000:	f44f 3316 	mov.w	r3, #153600	@ 0x25800
 8001004:	613b      	str	r3, [r7, #16]
			break;
 8001006:	e00a      	b.n	800101e <capture_img+0x62>
		}
		case (0x30): {
			size = 50688;
 8001008:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 800100c:	613b      	str	r3, [r7, #16]
			break;
 800100e:	e006      	b.n	800101e <capture_img+0x62>
		}
		default: {
			*status = HAL_ERROR;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	2201      	movs	r2, #1
 8001014:	701a      	strb	r2, [r3, #0]
			*error_index = IMG_DEF;
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	2208      	movs	r2, #8
 800101a:	701a      	strb	r2, [r3, #0]
 800101c:	e03f      	b.n	800109e <capture_img+0xe2>
			return;
		}
	}

	uint8_t buff[size];
 800101e:	6939      	ldr	r1, [r7, #16]
 8001020:	466b      	mov	r3, sp
 8001022:	461e      	mov	r6, r3
 8001024:	460b      	mov	r3, r1
 8001026:	3b01      	subs	r3, #1
 8001028:	61bb      	str	r3, [r7, #24]
 800102a:	2300      	movs	r3, #0
 800102c:	4688      	mov	r8, r1
 800102e:	4699      	mov	r9, r3
 8001030:	f04f 0200 	mov.w	r2, #0
 8001034:	f04f 0300 	mov.w	r3, #0
 8001038:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800103c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001040:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001044:	2300      	movs	r3, #0
 8001046:	460c      	mov	r4, r1
 8001048:	461d      	mov	r5, r3
 800104a:	f04f 0200 	mov.w	r2, #0
 800104e:	f04f 0300 	mov.w	r3, #0
 8001052:	00eb      	lsls	r3, r5, #3
 8001054:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001058:	00e2      	lsls	r2, r4, #3
 800105a:	1dcb      	adds	r3, r1, #7
 800105c:	08db      	lsrs	r3, r3, #3
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	ebad 0d03 	sub.w	sp, sp, r3
 8001064:	466b      	mov	r3, sp
 8001066:	3300      	adds	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
	camera_init(status, img_mode);
 800106a:	6879      	ldr	r1, [r7, #4]
 800106c:	68f8      	ldr	r0, [r7, #12]
 800106e:	f7ff fdf5 	bl	8000c5c <camera_init>
	if (*status != 0) {
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d002      	beq.n	8001080 <capture_img+0xc4>
		*error_index = CAM_INIT;
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	2209      	movs	r2, #9
 800107e:	701a      	strb	r2, [r3, #0]
	}
	camera_capture_photo(status, buff, &size);
 8001080:	f107 0310 	add.w	r3, r7, #16
 8001084:	461a      	mov	r2, r3
 8001086:	6979      	ldr	r1, [r7, #20]
 8001088:	68f8      	ldr	r0, [r7, #12]
 800108a:	f7ff ff31 	bl	8000ef0 <camera_capture_photo>

	if (*status != 0) {
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d002      	beq.n	800109c <capture_img+0xe0>
		*error_index = CAM_CAPTURE;
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	220a      	movs	r2, #10
 800109a:	701a      	strb	r2, [r3, #0]
 800109c:	46b5      	mov	sp, r6
	}
}
 800109e:	3724      	adds	r7, #36	@ 0x24
 80010a0:	46bd      	mov	sp, r7
 80010a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080010a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ae:	4b0a      	ldr	r3, [pc, #40]	@ (80010d8 <HAL_MspInit+0x30>)
 80010b0:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80010b4:	4a08      	ldr	r2, [pc, #32]	@ (80010d8 <HAL_MspInit+0x30>)
 80010b6:	f043 0302 	orr.w	r3, r3, #2
 80010ba:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80010be:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <HAL_MspInit+0x30>)
 80010c0:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80010c4:	f003 0302 	and.w	r3, r3, #2
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	58024400 	.word	0x58024400

080010dc <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b0be      	sub	sp, #248	@ 0xf8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010f4:	f107 0320 	add.w	r3, r7, #32
 80010f8:	22c0      	movs	r2, #192	@ 0xc0
 80010fa:	2100      	movs	r1, #0
 80010fc:	4618      	mov	r0, r3
 80010fe:	f00f fec1 	bl	8010e84 <memset>
  if(hadc->Instance==ADC1)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a6f      	ldr	r2, [pc, #444]	@ (80012c4 <HAL_ADC_MspInit+0x1e8>)
 8001108:	4293      	cmp	r3, r2
 800110a:	f040 8087 	bne.w	800121c <HAL_ADC_MspInit+0x140>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800110e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001112:	f04f 0300 	mov.w	r3, #0
 8001116:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 800111a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800111e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001122:	f107 0320 	add.w	r3, r7, #32
 8001126:	4618      	mov	r0, r3
 8001128:	f008 fdea 	bl	8009d00 <HAL_RCCEx_PeriphCLKConfig>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <HAL_ADC_MspInit+0x5a>
    {
      Error_Handler();
 8001132:	f7ff fd8d 	bl	8000c50 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001136:	4b64      	ldr	r3, [pc, #400]	@ (80012c8 <HAL_ADC_MspInit+0x1ec>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	3301      	adds	r3, #1
 800113c:	4a62      	ldr	r2, [pc, #392]	@ (80012c8 <HAL_ADC_MspInit+0x1ec>)
 800113e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001140:	4b61      	ldr	r3, [pc, #388]	@ (80012c8 <HAL_ADC_MspInit+0x1ec>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d10e      	bne.n	8001166 <HAL_ADC_MspInit+0x8a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001148:	4b60      	ldr	r3, [pc, #384]	@ (80012cc <HAL_ADC_MspInit+0x1f0>)
 800114a:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800114e:	4a5f      	ldr	r2, [pc, #380]	@ (80012cc <HAL_ADC_MspInit+0x1f0>)
 8001150:	f043 0320 	orr.w	r3, r3, #32
 8001154:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8001158:	4b5c      	ldr	r3, [pc, #368]	@ (80012cc <HAL_ADC_MspInit+0x1f0>)
 800115a:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800115e:	f003 0320 	and.w	r3, r3, #32
 8001162:	61fb      	str	r3, [r7, #28]
 8001164:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001166:	4b59      	ldr	r3, [pc, #356]	@ (80012cc <HAL_ADC_MspInit+0x1f0>)
 8001168:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800116c:	4a57      	ldr	r2, [pc, #348]	@ (80012cc <HAL_ADC_MspInit+0x1f0>)
 800116e:	f043 0301 	orr.w	r3, r3, #1
 8001172:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001176:	4b55      	ldr	r3, [pc, #340]	@ (80012cc <HAL_ADC_MspInit+0x1f0>)
 8001178:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800117c:	f003 0301 	and.w	r3, r3, #1
 8001180:	61bb      	str	r3, [r7, #24]
 8001182:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001184:	4b51      	ldr	r3, [pc, #324]	@ (80012cc <HAL_ADC_MspInit+0x1f0>)
 8001186:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800118a:	4a50      	ldr	r2, [pc, #320]	@ (80012cc <HAL_ADC_MspInit+0x1f0>)
 800118c:	f043 0304 	orr.w	r3, r3, #4
 8001190:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001194:	4b4d      	ldr	r3, [pc, #308]	@ (80012cc <HAL_ADC_MspInit+0x1f0>)
 8001196:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800119a:	f003 0304 	and.w	r3, r3, #4
 800119e:	617b      	str	r3, [r7, #20]
 80011a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a2:	4b4a      	ldr	r3, [pc, #296]	@ (80012cc <HAL_ADC_MspInit+0x1f0>)
 80011a4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011a8:	4a48      	ldr	r2, [pc, #288]	@ (80012cc <HAL_ADC_MspInit+0x1f0>)
 80011aa:	f043 0302 	orr.w	r3, r3, #2
 80011ae:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80011b2:	4b46      	ldr	r3, [pc, #280]	@ (80012cc <HAL_ADC_MspInit+0x1f0>)
 80011b4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80011b8:	f003 0302 	and.w	r3, r3, #2
 80011bc:	613b      	str	r3, [r7, #16]
 80011be:	693b      	ldr	r3, [r7, #16]
    PA0     ------> ADC1_INP16
    PA1     ------> ADC1_INN16
    PC4     ------> ADC1_INP4
    PB0     ------> ADC1_INP9
    */
    GPIO_InitStruct.Pin = NTC_2__Pin|NTC_2_A1_Pin;
 80011c0:	2303      	movs	r3, #3
 80011c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c6:	2303      	movs	r3, #3
 80011c8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80011d6:	4619      	mov	r1, r3
 80011d8:	483d      	ldr	r0, [pc, #244]	@ (80012d0 <HAL_ADC_MspInit+0x1f4>)
 80011da:	f005 fc15 	bl	8006a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CC1_Pin;
 80011de:	2310      	movs	r3, #16
 80011e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011e4:	2303      	movs	r3, #3
 80011e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(CC1_GPIO_Port, &GPIO_InitStruct);
 80011f0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80011f4:	4619      	mov	r1, r3
 80011f6:	4837      	ldr	r0, [pc, #220]	@ (80012d4 <HAL_ADC_MspInit+0x1f8>)
 80011f8:	f005 fc06 	bl	8006a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_VBUS_Pin;
 80011fc:	2301      	movs	r3, #1
 80011fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001202:	2303      	movs	r3, #3
 8001204:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(ADC_VBUS_GPIO_Port, &GPIO_InitStruct);
 800120e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001212:	4619      	mov	r1, r3
 8001214:	4830      	ldr	r0, [pc, #192]	@ (80012d8 <HAL_ADC_MspInit+0x1fc>)
 8001216:	f005 fbf7 	bl	8006a08 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 800121a:	e04e      	b.n	80012ba <HAL_ADC_MspInit+0x1de>
  else if(hadc->Instance==ADC2)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a2e      	ldr	r2, [pc, #184]	@ (80012dc <HAL_ADC_MspInit+0x200>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d149      	bne.n	80012ba <HAL_ADC_MspInit+0x1de>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001226:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800122a:	f04f 0300 	mov.w	r3, #0
 800122e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8001232:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001236:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800123a:	f107 0320 	add.w	r3, r7, #32
 800123e:	4618      	mov	r0, r3
 8001240:	f008 fd5e 	bl	8009d00 <HAL_RCCEx_PeriphCLKConfig>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_ADC_MspInit+0x172>
      Error_Handler();
 800124a:	f7ff fd01 	bl	8000c50 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800124e:	4b1e      	ldr	r3, [pc, #120]	@ (80012c8 <HAL_ADC_MspInit+0x1ec>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	3301      	adds	r3, #1
 8001254:	4a1c      	ldr	r2, [pc, #112]	@ (80012c8 <HAL_ADC_MspInit+0x1ec>)
 8001256:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001258:	4b1b      	ldr	r3, [pc, #108]	@ (80012c8 <HAL_ADC_MspInit+0x1ec>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d10e      	bne.n	800127e <HAL_ADC_MspInit+0x1a2>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001260:	4b1a      	ldr	r3, [pc, #104]	@ (80012cc <HAL_ADC_MspInit+0x1f0>)
 8001262:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001266:	4a19      	ldr	r2, [pc, #100]	@ (80012cc <HAL_ADC_MspInit+0x1f0>)
 8001268:	f043 0320 	orr.w	r3, r3, #32
 800126c:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8001270:	4b16      	ldr	r3, [pc, #88]	@ (80012cc <HAL_ADC_MspInit+0x1f0>)
 8001272:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8001276:	f003 0320 	and.w	r3, r3, #32
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800127e:	4b13      	ldr	r3, [pc, #76]	@ (80012cc <HAL_ADC_MspInit+0x1f0>)
 8001280:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001284:	4a11      	ldr	r2, [pc, #68]	@ (80012cc <HAL_ADC_MspInit+0x1f0>)
 8001286:	f043 0304 	orr.w	r3, r3, #4
 800128a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800128e:	4b0f      	ldr	r3, [pc, #60]	@ (80012cc <HAL_ADC_MspInit+0x1f0>)
 8001290:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001294:	f003 0304 	and.w	r3, r3, #4
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CC2_Pin;
 800129c:	2320      	movs	r3, #32
 800129e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a2:	2303      	movs	r3, #3
 80012a4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(CC2_GPIO_Port, &GPIO_InitStruct);
 80012ae:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80012b2:	4619      	mov	r1, r3
 80012b4:	4807      	ldr	r0, [pc, #28]	@ (80012d4 <HAL_ADC_MspInit+0x1f8>)
 80012b6:	f005 fba7 	bl	8006a08 <HAL_GPIO_Init>
}
 80012ba:	bf00      	nop
 80012bc:	37f8      	adds	r7, #248	@ 0xf8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40022000 	.word	0x40022000
 80012c8:	24000488 	.word	0x24000488
 80012cc:	58024400 	.word	0x58024400
 80012d0:	58020000 	.word	0x58020000
 80012d4:	58020800 	.word	0x58020800
 80012d8:	58020400 	.word	0x58020400
 80012dc:	40022100 	.word	0x40022100

080012e0 <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08c      	sub	sp, #48	@ 0x30
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 031c 	add.w	r3, r7, #28
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a6a      	ldr	r2, [pc, #424]	@ (80014a8 <HAL_DCMI_MspInit+0x1c8>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	f040 80ce 	bne.w	80014a0 <HAL_DCMI_MspInit+0x1c0>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8001304:	4b69      	ldr	r3, [pc, #420]	@ (80014ac <HAL_DCMI_MspInit+0x1cc>)
 8001306:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800130a:	4a68      	ldr	r2, [pc, #416]	@ (80014ac <HAL_DCMI_MspInit+0x1cc>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	f8c2 313c 	str.w	r3, [r2, #316]	@ 0x13c
 8001314:	4b65      	ldr	r3, [pc, #404]	@ (80014ac <HAL_DCMI_MspInit+0x1cc>)
 8001316:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800131a:	f003 0301 	and.w	r3, r3, #1
 800131e:	61bb      	str	r3, [r7, #24]
 8001320:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	4b62      	ldr	r3, [pc, #392]	@ (80014ac <HAL_DCMI_MspInit+0x1cc>)
 8001324:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001328:	4a60      	ldr	r2, [pc, #384]	@ (80014ac <HAL_DCMI_MspInit+0x1cc>)
 800132a:	f043 0301 	orr.w	r3, r3, #1
 800132e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001332:	4b5e      	ldr	r3, [pc, #376]	@ (80014ac <HAL_DCMI_MspInit+0x1cc>)
 8001334:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	617b      	str	r3, [r7, #20]
 800133e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001340:	4b5a      	ldr	r3, [pc, #360]	@ (80014ac <HAL_DCMI_MspInit+0x1cc>)
 8001342:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001346:	4a59      	ldr	r2, [pc, #356]	@ (80014ac <HAL_DCMI_MspInit+0x1cc>)
 8001348:	f043 0304 	orr.w	r3, r3, #4
 800134c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001350:	4b56      	ldr	r3, [pc, #344]	@ (80014ac <HAL_DCMI_MspInit+0x1cc>)
 8001352:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001356:	f003 0304 	and.w	r3, r3, #4
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800135e:	4b53      	ldr	r3, [pc, #332]	@ (80014ac <HAL_DCMI_MspInit+0x1cc>)
 8001360:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001364:	4a51      	ldr	r2, [pc, #324]	@ (80014ac <HAL_DCMI_MspInit+0x1cc>)
 8001366:	f043 0308 	orr.w	r3, r3, #8
 800136a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800136e:	4b4f      	ldr	r3, [pc, #316]	@ (80014ac <HAL_DCMI_MspInit+0x1cc>)
 8001370:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001374:	f003 0308 	and.w	r3, r3, #8
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137c:	4b4b      	ldr	r3, [pc, #300]	@ (80014ac <HAL_DCMI_MspInit+0x1cc>)
 800137e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001382:	4a4a      	ldr	r2, [pc, #296]	@ (80014ac <HAL_DCMI_MspInit+0x1cc>)
 8001384:	f043 0302 	orr.w	r3, r3, #2
 8001388:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800138c:	4b47      	ldr	r3, [pc, #284]	@ (80014ac <HAL_DCMI_MspInit+0x1cc>)
 800138e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PB8     ------> DCMI_D6
    PB9     ------> DCMI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800139a:	2350      	movs	r3, #80	@ 0x50
 800139c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139e:	2302      	movs	r3, #2
 80013a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a6:	2303      	movs	r3, #3
 80013a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80013aa:	230d      	movs	r3, #13
 80013ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	f107 031c 	add.w	r3, r7, #28
 80013b2:	4619      	mov	r1, r3
 80013b4:	483e      	ldr	r0, [pc, #248]	@ (80014b0 <HAL_DCMI_MspInit+0x1d0>)
 80013b6:	f005 fb27 	bl	8006a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 80013ba:	f44f 633c 	mov.w	r3, #3008	@ 0xbc0
 80013be:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c0:	2302      	movs	r3, #2
 80013c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c8:	2303      	movs	r3, #3
 80013ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80013cc:	230d      	movs	r3, #13
 80013ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d0:	f107 031c 	add.w	r3, r7, #28
 80013d4:	4619      	mov	r1, r3
 80013d6:	4837      	ldr	r0, [pc, #220]	@ (80014b4 <HAL_DCMI_MspInit+0x1d4>)
 80013d8:	f005 fb16 	bl	8006a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013dc:	2308      	movs	r3, #8
 80013de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	2302      	movs	r3, #2
 80013e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e8:	2303      	movs	r3, #3
 80013ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80013ec:	230d      	movs	r3, #13
 80013ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013f0:	f107 031c 	add.w	r3, r7, #28
 80013f4:	4619      	mov	r1, r3
 80013f6:	4830      	ldr	r0, [pc, #192]	@ (80014b8 <HAL_DCMI_MspInit+0x1d8>)
 80013f8:	f005 fb06 	bl	8006a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80013fc:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001402:	2302      	movs	r3, #2
 8001404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140a:	2303      	movs	r3, #3
 800140c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800140e:	230d      	movs	r3, #13
 8001410:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001412:	f107 031c 	add.w	r3, r7, #28
 8001416:	4619      	mov	r1, r3
 8001418:	4828      	ldr	r0, [pc, #160]	@ (80014bc <HAL_DCMI_MspInit+0x1dc>)
 800141a:	f005 faf5 	bl	8006a08 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 800141e:	4b28      	ldr	r3, [pc, #160]	@ (80014c0 <HAL_DCMI_MspInit+0x1e0>)
 8001420:	4a28      	ldr	r2, [pc, #160]	@ (80014c4 <HAL_DCMI_MspInit+0x1e4>)
 8001422:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI_PSSI;
 8001424:	4b26      	ldr	r3, [pc, #152]	@ (80014c0 <HAL_DCMI_MspInit+0x1e0>)
 8001426:	224b      	movs	r2, #75	@ 0x4b
 8001428:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800142a:	4b25      	ldr	r3, [pc, #148]	@ (80014c0 <HAL_DCMI_MspInit+0x1e0>)
 800142c:	2200      	movs	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8001430:	4b23      	ldr	r3, [pc, #140]	@ (80014c0 <HAL_DCMI_MspInit+0x1e0>)
 8001432:	2200      	movs	r2, #0
 8001434:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8001436:	4b22      	ldr	r3, [pc, #136]	@ (80014c0 <HAL_DCMI_MspInit+0x1e0>)
 8001438:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800143c:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800143e:	4b20      	ldr	r3, [pc, #128]	@ (80014c0 <HAL_DCMI_MspInit+0x1e0>)
 8001440:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001444:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001446:	4b1e      	ldr	r3, [pc, #120]	@ (80014c0 <HAL_DCMI_MspInit+0x1e0>)
 8001448:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800144c:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 800144e:	4b1c      	ldr	r3, [pc, #112]	@ (80014c0 <HAL_DCMI_MspInit+0x1e0>)
 8001450:	2200      	movs	r2, #0
 8001452:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001454:	4b1a      	ldr	r3, [pc, #104]	@ (80014c0 <HAL_DCMI_MspInit+0x1e0>)
 8001456:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800145a:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800145c:	4b18      	ldr	r3, [pc, #96]	@ (80014c0 <HAL_DCMI_MspInit+0x1e0>)
 800145e:	2204      	movs	r2, #4
 8001460:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001462:	4b17      	ldr	r3, [pc, #92]	@ (80014c0 <HAL_DCMI_MspInit+0x1e0>)
 8001464:	2203      	movs	r2, #3
 8001466:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8001468:	4b15      	ldr	r3, [pc, #84]	@ (80014c0 <HAL_DCMI_MspInit+0x1e0>)
 800146a:	2200      	movs	r2, #0
 800146c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800146e:	4b14      	ldr	r3, [pc, #80]	@ (80014c0 <HAL_DCMI_MspInit+0x1e0>)
 8001470:	2200      	movs	r2, #0
 8001472:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8001474:	4812      	ldr	r0, [pc, #72]	@ (80014c0 <HAL_DCMI_MspInit+0x1e0>)
 8001476:	f001 ff39 	bl	80032ec <HAL_DMA_Init>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <HAL_DCMI_MspInit+0x1a4>
    {
      Error_Handler();
 8001480:	f7ff fbe6 	bl	8000c50 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4a0e      	ldr	r2, [pc, #56]	@ (80014c0 <HAL_DCMI_MspInit+0x1e0>)
 8001488:	649a      	str	r2, [r3, #72]	@ 0x48
 800148a:	4a0d      	ldr	r2, [pc, #52]	@ (80014c0 <HAL_DCMI_MspInit+0x1e0>)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_PSSI_IRQn, 0, 0);
 8001490:	2200      	movs	r2, #0
 8001492:	2100      	movs	r1, #0
 8001494:	204e      	movs	r0, #78	@ 0x4e
 8001496:	f001 fb86 	bl	8002ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_PSSI_IRQn);
 800149a:	204e      	movs	r0, #78	@ 0x4e
 800149c:	f001 fb9d 	bl	8002bda <HAL_NVIC_EnableIRQ>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 80014a0:	bf00      	nop
 80014a2:	3730      	adds	r7, #48	@ 0x30
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	48020000 	.word	0x48020000
 80014ac:	58024400 	.word	0x58024400
 80014b0:	58020000 	.word	0x58020000
 80014b4:	58020800 	.word	0x58020800
 80014b8:	58020c00 	.word	0x58020c00
 80014bc:	58020400 	.word	0x58020400
 80014c0:	24000240 	.word	0x24000240
 80014c4:	40020010 	.word	0x40020010

080014c8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b0ba      	sub	sp, #232	@ 0xe8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014e0:	f107 0310 	add.w	r3, r7, #16
 80014e4:	22c0      	movs	r2, #192	@ 0xc0
 80014e6:	2100      	movs	r1, #0
 80014e8:	4618      	mov	r0, r3
 80014ea:	f00f fccb 	bl	8010e84 <memset>
  if(hi2c->Instance==I2C2)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a27      	ldr	r2, [pc, #156]	@ (8001590 <HAL_I2C_MspInit+0xc8>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d146      	bne.n	8001586 <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80014f8:	f04f 0208 	mov.w	r2, #8
 80014fc:	f04f 0300 	mov.w	r3, #0
 8001500:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8001504:	2300      	movs	r3, #0
 8001506:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800150a:	f107 0310 	add.w	r3, r7, #16
 800150e:	4618      	mov	r0, r3
 8001510:	f008 fbf6 	bl	8009d00 <HAL_RCCEx_PeriphCLKConfig>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800151a:	f7ff fb99 	bl	8000c50 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800151e:	4b1d      	ldr	r3, [pc, #116]	@ (8001594 <HAL_I2C_MspInit+0xcc>)
 8001520:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001524:	4a1b      	ldr	r2, [pc, #108]	@ (8001594 <HAL_I2C_MspInit+0xcc>)
 8001526:	f043 0302 	orr.w	r3, r3, #2
 800152a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800152e:	4b19      	ldr	r3, [pc, #100]	@ (8001594 <HAL_I2C_MspInit+0xcc>)
 8001530:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800153c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001540:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001544:	2312      	movs	r3, #18
 8001546:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800154a:	2301      	movs	r3, #1
 800154c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001550:	2303      	movs	r3, #3
 8001552:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001556:	2304      	movs	r3, #4
 8001558:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001560:	4619      	mov	r1, r3
 8001562:	480d      	ldr	r0, [pc, #52]	@ (8001598 <HAL_I2C_MspInit+0xd0>)
 8001564:	f005 fa50 	bl	8006a08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001568:	4b0a      	ldr	r3, [pc, #40]	@ (8001594 <HAL_I2C_MspInit+0xcc>)
 800156a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800156e:	4a09      	ldr	r2, [pc, #36]	@ (8001594 <HAL_I2C_MspInit+0xcc>)
 8001570:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001574:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8001578:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <HAL_I2C_MspInit+0xcc>)
 800157a:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800157e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8001586:	bf00      	nop
 8001588:	37e8      	adds	r7, #232	@ 0xe8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40005800 	.word	0x40005800
 8001594:	58024400 	.word	0x58024400
 8001598:	58020400 	.word	0x58020400

0800159c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b0ba      	sub	sp, #232	@ 0xe8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015b4:	f107 0310 	add.w	r3, r7, #16
 80015b8:	22c0      	movs	r2, #192	@ 0xc0
 80015ba:	2100      	movs	r1, #0
 80015bc:	4618      	mov	r0, r3
 80015be:	f00f fc61 	bl	8010e84 <memset>
  if(hspi->Instance==SPI4)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a6b      	ldr	r2, [pc, #428]	@ (8001774 <HAL_SPI_MspInit+0x1d8>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	f040 80cf 	bne.w	800176c <HAL_SPI_MspInit+0x1d0>

    /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 80015ce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015d2:	f04f 0300 	mov.w	r3, #0
 80015d6:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80015da:	2301      	movs	r3, #1
 80015dc:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 80015de:	2310      	movs	r3, #16
 80015e0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80015e2:	2302      	movs	r3, #2
 80015e4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 16;
 80015e6:	2310      	movs	r3, #16
 80015e8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80015ea:	2302      	movs	r3, #2
 80015ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80015ee:	23c0      	movs	r3, #192	@ 0xc0
 80015f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80015f2:	2300      	movs	r3, #0
 80015f4:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 80015fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015fe:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001600:	f107 0310 	add.w	r3, r7, #16
 8001604:	4618      	mov	r0, r3
 8001606:	f008 fb7b 	bl	8009d00 <HAL_RCCEx_PeriphCLKConfig>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <HAL_SPI_MspInit+0x78>
    {
      Error_Handler();
 8001610:	f7ff fb1e 	bl	8000c50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001614:	4b58      	ldr	r3, [pc, #352]	@ (8001778 <HAL_SPI_MspInit+0x1dc>)
 8001616:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800161a:	4a57      	ldr	r2, [pc, #348]	@ (8001778 <HAL_SPI_MspInit+0x1dc>)
 800161c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001620:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8001624:	4b54      	ldr	r3, [pc, #336]	@ (8001778 <HAL_SPI_MspInit+0x1dc>)
 8001626:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 800162a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001632:	4b51      	ldr	r3, [pc, #324]	@ (8001778 <HAL_SPI_MspInit+0x1dc>)
 8001634:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001638:	4a4f      	ldr	r2, [pc, #316]	@ (8001778 <HAL_SPI_MspInit+0x1dc>)
 800163a:	f043 0310 	orr.w	r3, r3, #16
 800163e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8001642:	4b4d      	ldr	r3, [pc, #308]	@ (8001778 <HAL_SPI_MspInit+0x1dc>)
 8001644:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8001648:	f003 0310 	and.w	r3, r3, #16
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	68bb      	ldr	r3, [r7, #8]
    PE11     ------> SPI4_NSS
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = SPI4_nSEL_Pin;
 8001650:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001654:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001658:	2302      	movs	r3, #2
 800165a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800165e:	2301      	movs	r3, #1
 8001660:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001664:	2303      	movs	r3, #3
 8001666:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800166a:	2305      	movs	r3, #5
 800166c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(SPI4_nSEL_GPIO_Port, &GPIO_InitStruct);
 8001670:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001674:	4619      	mov	r1, r3
 8001676:	4841      	ldr	r0, [pc, #260]	@ (800177c <HAL_SPI_MspInit+0x1e0>)
 8001678:	f005 f9c6 	bl	8006a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800167c:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8001680:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001690:	2303      	movs	r3, #3
 8001692:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001696:	2305      	movs	r3, #5
 8001698:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800169c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80016a0:	4619      	mov	r1, r3
 80016a2:	4836      	ldr	r0, [pc, #216]	@ (800177c <HAL_SPI_MspInit+0x1e0>)
 80016a4:	f005 f9b0 	bl	8006a08 <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA1_Stream1;
 80016a8:	4b35      	ldr	r3, [pc, #212]	@ (8001780 <HAL_SPI_MspInit+0x1e4>)
 80016aa:	4a36      	ldr	r2, [pc, #216]	@ (8001784 <HAL_SPI_MspInit+0x1e8>)
 80016ac:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 80016ae:	4b34      	ldr	r3, [pc, #208]	@ (8001780 <HAL_SPI_MspInit+0x1e4>)
 80016b0:	2254      	movs	r2, #84	@ 0x54
 80016b2:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016b4:	4b32      	ldr	r3, [pc, #200]	@ (8001780 <HAL_SPI_MspInit+0x1e4>)
 80016b6:	2240      	movs	r2, #64	@ 0x40
 80016b8:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ba:	4b31      	ldr	r3, [pc, #196]	@ (8001780 <HAL_SPI_MspInit+0x1e4>)
 80016bc:	2200      	movs	r2, #0
 80016be:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001780 <HAL_SPI_MspInit+0x1e4>)
 80016c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016c6:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001780 <HAL_SPI_MspInit+0x1e4>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001780 <HAL_SPI_MspInit+0x1e4>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 80016d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001780 <HAL_SPI_MspInit+0x1e4>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016da:	4b29      	ldr	r3, [pc, #164]	@ (8001780 <HAL_SPI_MspInit+0x1e4>)
 80016dc:	2200      	movs	r2, #0
 80016de:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016e0:	4b27      	ldr	r3, [pc, #156]	@ (8001780 <HAL_SPI_MspInit+0x1e4>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 80016e6:	4826      	ldr	r0, [pc, #152]	@ (8001780 <HAL_SPI_MspInit+0x1e4>)
 80016e8:	f001 fe00 	bl	80032ec <HAL_DMA_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_SPI_MspInit+0x15a>
    {
      Error_Handler();
 80016f2:	f7ff faad 	bl	8000c50 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a21      	ldr	r2, [pc, #132]	@ (8001780 <HAL_SPI_MspInit+0x1e4>)
 80016fa:	679a      	str	r2, [r3, #120]	@ 0x78
 80016fc:	4a20      	ldr	r2, [pc, #128]	@ (8001780 <HAL_SPI_MspInit+0x1e4>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI4_RX Init */
    hdma_spi4_rx.Instance = DMA1_Stream2;
 8001702:	4b21      	ldr	r3, [pc, #132]	@ (8001788 <HAL_SPI_MspInit+0x1ec>)
 8001704:	4a21      	ldr	r2, [pc, #132]	@ (800178c <HAL_SPI_MspInit+0x1f0>)
 8001706:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 8001708:	4b1f      	ldr	r3, [pc, #124]	@ (8001788 <HAL_SPI_MspInit+0x1ec>)
 800170a:	2253      	movs	r2, #83	@ 0x53
 800170c:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800170e:	4b1e      	ldr	r3, [pc, #120]	@ (8001788 <HAL_SPI_MspInit+0x1ec>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001714:	4b1c      	ldr	r3, [pc, #112]	@ (8001788 <HAL_SPI_MspInit+0x1ec>)
 8001716:	2200      	movs	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800171a:	4b1b      	ldr	r3, [pc, #108]	@ (8001788 <HAL_SPI_MspInit+0x1ec>)
 800171c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001720:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001722:	4b19      	ldr	r3, [pc, #100]	@ (8001788 <HAL_SPI_MspInit+0x1ec>)
 8001724:	2200      	movs	r2, #0
 8001726:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001728:	4b17      	ldr	r3, [pc, #92]	@ (8001788 <HAL_SPI_MspInit+0x1ec>)
 800172a:	2200      	movs	r2, #0
 800172c:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 800172e:	4b16      	ldr	r3, [pc, #88]	@ (8001788 <HAL_SPI_MspInit+0x1ec>)
 8001730:	2200      	movs	r2, #0
 8001732:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001734:	4b14      	ldr	r3, [pc, #80]	@ (8001788 <HAL_SPI_MspInit+0x1ec>)
 8001736:	2200      	movs	r2, #0
 8001738:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800173a:	4b13      	ldr	r3, [pc, #76]	@ (8001788 <HAL_SPI_MspInit+0x1ec>)
 800173c:	2200      	movs	r2, #0
 800173e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8001740:	4811      	ldr	r0, [pc, #68]	@ (8001788 <HAL_SPI_MspInit+0x1ec>)
 8001742:	f001 fdd3 	bl	80032ec <HAL_DMA_Init>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <HAL_SPI_MspInit+0x1b4>
    {
      Error_Handler();
 800174c:	f7ff fa80 	bl	8000c50 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	4a0d      	ldr	r2, [pc, #52]	@ (8001788 <HAL_SPI_MspInit+0x1ec>)
 8001754:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001756:	4a0c      	ldr	r2, [pc, #48]	@ (8001788 <HAL_SPI_MspInit+0x1ec>)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 800175c:	2200      	movs	r2, #0
 800175e:	2100      	movs	r1, #0
 8001760:	2054      	movs	r0, #84	@ 0x54
 8001762:	f001 fa20 	bl	8002ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001766:	2054      	movs	r0, #84	@ 0x54
 8001768:	f001 fa37 	bl	8002bda <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 800176c:	bf00      	nop
 800176e:	37e8      	adds	r7, #232	@ 0xe8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40013400 	.word	0x40013400
 8001778:	58024400 	.word	0x58024400
 800177c:	58021000 	.word	0x58021000
 8001780:	24000394 	.word	0x24000394
 8001784:	40020028 	.word	0x40020028
 8001788:	2400040c 	.word	0x2400040c
 800178c:	40020040 	.word	0x40020040

08001790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001794:	bf00      	nop
 8001796:	e7fd      	b.n	8001794 <NMI_Handler+0x4>

08001798 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800179c:	bf00      	nop
 800179e:	e7fd      	b.n	800179c <HardFault_Handler+0x4>

080017a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a4:	bf00      	nop
 80017a6:	e7fd      	b.n	80017a4 <MemManage_Handler+0x4>

080017a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ac:	bf00      	nop
 80017ae:	e7fd      	b.n	80017ac <BusFault_Handler+0x4>

080017b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b4:	bf00      	nop
 80017b6:	e7fd      	b.n	80017b4 <UsageFault_Handler+0x4>

080017b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017e6:	f000 f999 	bl	8001b1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 80017f4:	4802      	ldr	r0, [pc, #8]	@ (8001800 <DMA1_Stream0_IRQHandler+0x10>)
 80017f6:	f003 f8d5 	bl	80049a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	24000240 	.word	0x24000240

08001804 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001808:	4802      	ldr	r0, [pc, #8]	@ (8001814 <DMA1_Stream1_IRQHandler+0x10>)
 800180a:	f003 f8cb 	bl	80049a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	24000394 	.word	0x24000394

08001818 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 800181c:	4802      	ldr	r0, [pc, #8]	@ (8001828 <DMA1_Stream2_IRQHandler+0x10>)
 800181e:	f003 f8c1 	bl	80049a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	2400040c 	.word	0x2400040c

0800182c <OTG_HS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 Out global interrupt.
  */
void OTG_HS_EP1_OUT_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001830:	4802      	ldr	r0, [pc, #8]	@ (800183c <OTG_HS_EP1_OUT_IRQHandler+0x10>)
 8001832:	f006 f8a9 	bl	8007988 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	24001970 	.word	0x24001970

08001840 <OTG_HS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 In global interrupt.
  */
void OTG_HS_EP1_IN_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001844:	4802      	ldr	r0, [pc, #8]	@ (8001850 <OTG_HS_EP1_IN_IRQHandler+0x10>)
 8001846:	f006 f89f 	bl	8007988 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	24001970 	.word	0x24001970

08001854 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001858:	4802      	ldr	r0, [pc, #8]	@ (8001864 <OTG_HS_IRQHandler+0x10>)
 800185a:	f006 f895 	bl	8007988 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	24001970 	.word	0x24001970

08001868 <DCMI_PSSI_IRQHandler>:

/**
  * @brief This function handles DCMI and PSSI global interrupt.
  */
void DCMI_PSSI_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_PSSI_IRQn 0 */

  /* USER CODE END DCMI_PSSI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 800186c:	4802      	ldr	r0, [pc, #8]	@ (8001878 <DCMI_PSSI_IRQHandler+0x10>)
 800186e:	f001 fbe3 	bl	8003038 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_PSSI_IRQn 1 */

  /* USER CODE END DCMI_PSSI_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	240001f0 	.word	0x240001f0

0800187c <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001880:	4802      	ldr	r0, [pc, #8]	@ (800188c <SPI4_IRQHandler+0x10>)
 8001882:	f00a ff6b 	bl	800c75c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	2400030c 	.word	0x2400030c

08001890 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001894:	4b3e      	ldr	r3, [pc, #248]	@ (8001990 <SystemInit+0x100>)
 8001896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800189a:	4a3d      	ldr	r2, [pc, #244]	@ (8001990 <SystemInit+0x100>)
 800189c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018a4:	4b3b      	ldr	r3, [pc, #236]	@ (8001994 <SystemInit+0x104>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 030f 	and.w	r3, r3, #15
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d807      	bhi.n	80018c0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018b0:	4b38      	ldr	r3, [pc, #224]	@ (8001994 <SystemInit+0x104>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f023 030f 	bic.w	r3, r3, #15
 80018b8:	4a36      	ldr	r2, [pc, #216]	@ (8001994 <SystemInit+0x104>)
 80018ba:	f043 0303 	orr.w	r3, r3, #3
 80018be:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80018c0:	4b35      	ldr	r3, [pc, #212]	@ (8001998 <SystemInit+0x108>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a34      	ldr	r2, [pc, #208]	@ (8001998 <SystemInit+0x108>)
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80018cc:	4b32      	ldr	r3, [pc, #200]	@ (8001998 <SystemInit+0x108>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80018d2:	4b31      	ldr	r3, [pc, #196]	@ (8001998 <SystemInit+0x108>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	4930      	ldr	r1, [pc, #192]	@ (8001998 <SystemInit+0x108>)
 80018d8:	4b30      	ldr	r3, [pc, #192]	@ (800199c <SystemInit+0x10c>)
 80018da:	4013      	ands	r3, r2
 80018dc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80018de:	4b2d      	ldr	r3, [pc, #180]	@ (8001994 <SystemInit+0x104>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 030c 	and.w	r3, r3, #12
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d007      	beq.n	80018fa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80018ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001994 <SystemInit+0x104>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f023 030f 	bic.w	r3, r3, #15
 80018f2:	4a28      	ldr	r2, [pc, #160]	@ (8001994 <SystemInit+0x104>)
 80018f4:	f043 0303 	orr.w	r3, r3, #3
 80018f8:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 80018fa:	4b27      	ldr	r3, [pc, #156]	@ (8001998 <SystemInit+0x108>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8001900:	4b25      	ldr	r3, [pc, #148]	@ (8001998 <SystemInit+0x108>)
 8001902:	2200      	movs	r2, #0
 8001904:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8001906:	4b24      	ldr	r3, [pc, #144]	@ (8001998 <SystemInit+0x108>)
 8001908:	2200      	movs	r2, #0
 800190a:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800190c:	4b22      	ldr	r3, [pc, #136]	@ (8001998 <SystemInit+0x108>)
 800190e:	4a24      	ldr	r2, [pc, #144]	@ (80019a0 <SystemInit+0x110>)
 8001910:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001912:	4b21      	ldr	r3, [pc, #132]	@ (8001998 <SystemInit+0x108>)
 8001914:	4a23      	ldr	r2, [pc, #140]	@ (80019a4 <SystemInit+0x114>)
 8001916:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001918:	4b1f      	ldr	r3, [pc, #124]	@ (8001998 <SystemInit+0x108>)
 800191a:	4a23      	ldr	r2, [pc, #140]	@ (80019a8 <SystemInit+0x118>)
 800191c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800191e:	4b1e      	ldr	r3, [pc, #120]	@ (8001998 <SystemInit+0x108>)
 8001920:	2200      	movs	r2, #0
 8001922:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001924:	4b1c      	ldr	r3, [pc, #112]	@ (8001998 <SystemInit+0x108>)
 8001926:	4a20      	ldr	r2, [pc, #128]	@ (80019a8 <SystemInit+0x118>)
 8001928:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800192a:	4b1b      	ldr	r3, [pc, #108]	@ (8001998 <SystemInit+0x108>)
 800192c:	2200      	movs	r2, #0
 800192e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001930:	4b19      	ldr	r3, [pc, #100]	@ (8001998 <SystemInit+0x108>)
 8001932:	4a1d      	ldr	r2, [pc, #116]	@ (80019a8 <SystemInit+0x118>)
 8001934:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001936:	4b18      	ldr	r3, [pc, #96]	@ (8001998 <SystemInit+0x108>)
 8001938:	2200      	movs	r2, #0
 800193a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800193c:	4b16      	ldr	r3, [pc, #88]	@ (8001998 <SystemInit+0x108>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a15      	ldr	r2, [pc, #84]	@ (8001998 <SystemInit+0x108>)
 8001942:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001946:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001948:	4b13      	ldr	r3, [pc, #76]	@ (8001998 <SystemInit+0x108>)
 800194a:	2200      	movs	r2, #0
 800194c:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800194e:	4b12      	ldr	r3, [pc, #72]	@ (8001998 <SystemInit+0x108>)
 8001950:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001954:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001958:	2b00      	cmp	r3, #0
 800195a:	d113      	bne.n	8001984 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800195c:	4b0e      	ldr	r3, [pc, #56]	@ (8001998 <SystemInit+0x108>)
 800195e:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8001962:	4a0d      	ldr	r2, [pc, #52]	@ (8001998 <SystemInit+0x108>)
 8001964:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001968:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800196c:	4b0f      	ldr	r3, [pc, #60]	@ (80019ac <SystemInit+0x11c>)
 800196e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001972:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8001974:	4b08      	ldr	r3, [pc, #32]	@ (8001998 <SystemInit+0x108>)
 8001976:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 800197a:	4a07      	ldr	r2, [pc, #28]	@ (8001998 <SystemInit+0x108>)
 800197c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001980:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000ed00 	.word	0xe000ed00
 8001994:	52002000 	.word	0x52002000
 8001998:	58024400 	.word	0x58024400
 800199c:	eaf6ed7f 	.word	0xeaf6ed7f
 80019a0:	02020200 	.word	0x02020200
 80019a4:	01ff0000 	.word	0x01ff0000
 80019a8:	01010280 	.word	0x01010280
 80019ac:	52004000 	.word	0x52004000

080019b0 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80019b4:	4b09      	ldr	r3, [pc, #36]	@ (80019dc <ExitRun0Mode+0x2c>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	4a08      	ldr	r2, [pc, #32]	@ (80019dc <ExitRun0Mode+0x2c>)
 80019ba:	f043 0302 	orr.w	r3, r3, #2
 80019be:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80019c0:	bf00      	nop
 80019c2:	4b06      	ldr	r3, [pc, #24]	@ (80019dc <ExitRun0Mode+0x2c>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d0f9      	beq.n	80019c2 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80019ce:	bf00      	nop
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	58024800 	.word	0x58024800

080019e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80019e0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001a1c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80019e4:	f7ff ffe4 	bl	80019b0 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80019e8:	f7ff ff52 	bl	8001890 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019ec:	480c      	ldr	r0, [pc, #48]	@ (8001a20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019ee:	490d      	ldr	r1, [pc, #52]	@ (8001a24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001a28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019f4:	e002      	b.n	80019fc <LoopCopyDataInit>

080019f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019fa:	3304      	adds	r3, #4

080019fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a00:	d3f9      	bcc.n	80019f6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a02:	4a0a      	ldr	r2, [pc, #40]	@ (8001a2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a04:	4c0a      	ldr	r4, [pc, #40]	@ (8001a30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a08:	e001      	b.n	8001a0e <LoopFillZerobss>

08001a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a0c:	3204      	adds	r2, #4

08001a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a10:	d3fb      	bcc.n	8001a0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a12:	f00f fa3f 	bl	8010e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a16:	f7fe fcdb 	bl	80003d0 <main>
  bx  lr
 8001a1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a1c:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8001a20:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a24:	24000108 	.word	0x24000108
  ldr r2, =_sidata
 8001a28:	0801122c 	.word	0x0801122c
  ldr r2, =_sbss
 8001a2c:	24000108 	.word	0x24000108
  ldr r4, =_ebss
 8001a30:	24002074 	.word	0x24002074

08001a34 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a34:	e7fe      	b.n	8001a34 <ADC_IRQHandler>
	...

08001a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a3e:	2003      	movs	r0, #3
 8001a40:	f001 f8a6 	bl	8002b90 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8001a44:	f007 ff9c 	bl	8009980 <HAL_RCC_GetSysClockFreq>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	4b15      	ldr	r3, [pc, #84]	@ (8001aa0 <HAL_Init+0x68>)
 8001a4c:	699b      	ldr	r3, [r3, #24]
 8001a4e:	0a1b      	lsrs	r3, r3, #8
 8001a50:	f003 030f 	and.w	r3, r3, #15
 8001a54:	4913      	ldr	r1, [pc, #76]	@ (8001aa4 <HAL_Init+0x6c>)
 8001a56:	5ccb      	ldrb	r3, [r1, r3]
 8001a58:	f003 031f 	and.w	r3, r3, #31
 8001a5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a60:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8001a62:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa0 <HAL_Init+0x68>)
 8001a64:	699b      	ldr	r3, [r3, #24]
 8001a66:	f003 030f 	and.w	r3, r3, #15
 8001a6a:	4a0e      	ldr	r2, [pc, #56]	@ (8001aa4 <HAL_Init+0x6c>)
 8001a6c:	5cd3      	ldrb	r3, [r2, r3]
 8001a6e:	f003 031f 	and.w	r3, r3, #31
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	fa22 f303 	lsr.w	r3, r2, r3
 8001a78:	4a0b      	ldr	r2, [pc, #44]	@ (8001aa8 <HAL_Init+0x70>)
 8001a7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001a7c:	4a0b      	ldr	r2, [pc, #44]	@ (8001aac <HAL_Init+0x74>)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a82:	200f      	movs	r0, #15
 8001a84:	f000 f814 	bl	8001ab0 <HAL_InitTick>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e002      	b.n	8001a98 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001a92:	f7ff fb09 	bl	80010a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a96:	2300      	movs	r3, #0
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	58024400 	.word	0x58024400
 8001aa4:	0801120c 	.word	0x0801120c
 8001aa8:	24000008 	.word	0x24000008
 8001aac:	24000004 	.word	0x24000004

08001ab0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001ab8:	4b15      	ldr	r3, [pc, #84]	@ (8001b10 <HAL_InitTick+0x60>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d101      	bne.n	8001ac4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e021      	b.n	8001b08 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ac4:	4b13      	ldr	r3, [pc, #76]	@ (8001b14 <HAL_InitTick+0x64>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	4b11      	ldr	r3, [pc, #68]	@ (8001b10 <HAL_InitTick+0x60>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	4619      	mov	r1, r3
 8001ace:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ad2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ada:	4618      	mov	r0, r3
 8001adc:	f001 f88b 	bl	8002bf6 <HAL_SYSTICK_Config>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e00e      	b.n	8001b08 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2b0f      	cmp	r3, #15
 8001aee:	d80a      	bhi.n	8001b06 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001af0:	2200      	movs	r2, #0
 8001af2:	6879      	ldr	r1, [r7, #4]
 8001af4:	f04f 30ff 	mov.w	r0, #4294967295
 8001af8:	f001 f855 	bl	8002ba6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001afc:	4a06      	ldr	r2, [pc, #24]	@ (8001b18 <HAL_InitTick+0x68>)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
 8001b04:	e000      	b.n	8001b08 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3708      	adds	r7, #8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	24000010 	.word	0x24000010
 8001b14:	24000004 	.word	0x24000004
 8001b18:	2400000c 	.word	0x2400000c

08001b1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b20:	4b06      	ldr	r3, [pc, #24]	@ (8001b3c <HAL_IncTick+0x20>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	461a      	mov	r2, r3
 8001b26:	4b06      	ldr	r3, [pc, #24]	@ (8001b40 <HAL_IncTick+0x24>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	4a04      	ldr	r2, [pc, #16]	@ (8001b40 <HAL_IncTick+0x24>)
 8001b2e:	6013      	str	r3, [r2, #0]
}
 8001b30:	bf00      	nop
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	24000010 	.word	0x24000010
 8001b40:	2400048c 	.word	0x2400048c

08001b44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return uwTick;
 8001b48:	4b03      	ldr	r3, [pc, #12]	@ (8001b58 <HAL_GetTick+0x14>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	2400048c 	.word	0x2400048c

08001b5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b64:	f7ff ffee 	bl	8001b44 <HAL_GetTick>
 8001b68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b74:	d005      	beq.n	8001b82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba0 <HAL_Delay+0x44>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	4413      	add	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b82:	bf00      	nop
 8001b84:	f7ff ffde 	bl	8001b44 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d8f7      	bhi.n	8001b84 <HAL_Delay+0x28>
  {
  }
}
 8001b94:	bf00      	nop
 8001b96:	bf00      	nop
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	24000010 	.word	0x24000010

08001ba4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	609a      	str	r2, [r3, #8]
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	609a      	str	r2, [r3, #8]
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b087      	sub	sp, #28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d107      	bne.n	8001c30 <LL_ADC_SetChannelPreselection+0x24>
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	0e9b      	lsrs	r3, r3, #26
 8001c24:	f003 031f 	and.w	r3, r3, #31
 8001c28:	2201      	movs	r2, #1
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	e015      	b.n	8001c5c <LL_ADC_SetChannelPreselection+0x50>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	fa93 f3a3 	rbit	r3, r3
 8001c3a:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8001c46:	2320      	movs	r3, #32
 8001c48:	e003      	b.n	8001c52 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	fab3 f383 	clz	r3, r3
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	f003 031f 	and.w	r3, r3, #31
 8001c56:	2201      	movs	r2, #1
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	69d2      	ldr	r2, [r2, #28]
 8001c60:	431a      	orrs	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8001c66:	bf00      	nop
 8001c68:	371c      	adds	r7, #28
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b087      	sub	sp, #28
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	60f8      	str	r0, [r7, #12]
 8001c7a:	60b9      	str	r1, [r7, #8]
 8001c7c:	607a      	str	r2, [r7, #4]
 8001c7e:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	3360      	adds	r3, #96	@ 0x60
 8001c84:	461a      	mov	r2, r3
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	430b      	orrs	r3, r1
 8001ca0:	431a      	orrs	r2, r3
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001ca6:	bf00      	nop
 8001ca8:	371c      	adds	r7, #28
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b085      	sub	sp, #20
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	60f8      	str	r0, [r7, #12]
 8001cba:	60b9      	str	r1, [r7, #8]
 8001cbc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	f003 031f 	and.w	r3, r3, #31
 8001ccc:	6879      	ldr	r1, [r7, #4]
 8001cce:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
}
 8001cd8:	bf00      	nop
 8001cda:	3714      	adds	r7, #20
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b087      	sub	sp, #28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	3360      	adds	r3, #96	@ 0x60
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	431a      	orrs	r2, r3
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	601a      	str	r2, [r3, #0]
  }
}
 8001d0e:	bf00      	nop
 8001d10:	371c      	adds	r7, #28
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr

08001d1a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	b087      	sub	sp, #28
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	60f8      	str	r0, [r7, #12]
 8001d22:	60b9      	str	r1, [r7, #8]
 8001d24:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	3330      	adds	r3, #48	@ 0x30
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	0a1b      	lsrs	r3, r3, #8
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	f003 030c 	and.w	r3, r3, #12
 8001d36:	4413      	add	r3, r2
 8001d38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	f003 031f 	and.w	r3, r3, #31
 8001d44:	211f      	movs	r1, #31
 8001d46:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	401a      	ands	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	0e9b      	lsrs	r3, r3, #26
 8001d52:	f003 011f 	and.w	r1, r3, #31
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	f003 031f 	and.w	r3, r3, #31
 8001d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d60:	431a      	orrs	r2, r3
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001d66:	bf00      	nop
 8001d68:	371c      	adds	r7, #28
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b087      	sub	sp, #28
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	60f8      	str	r0, [r7, #12]
 8001d7a:	60b9      	str	r1, [r7, #8]
 8001d7c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	3314      	adds	r3, #20
 8001d82:	461a      	mov	r2, r3
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	0e5b      	lsrs	r3, r3, #25
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	f003 0304 	and.w	r3, r3, #4
 8001d8e:	4413      	add	r3, r2
 8001d90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	0d1b      	lsrs	r3, r3, #20
 8001d9a:	f003 031f 	and.w	r3, r3, #31
 8001d9e:	2107      	movs	r1, #7
 8001da0:	fa01 f303 	lsl.w	r3, r1, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	401a      	ands	r2, r3
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	0d1b      	lsrs	r3, r3, #20
 8001dac:	f003 031f 	and.w	r3, r3, #31
 8001db0:	6879      	ldr	r1, [r7, #4]
 8001db2:	fa01 f303 	lsl.w	r3, r1, r3
 8001db6:	431a      	orrs	r2, r3
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001dbc:	bf00      	nop
 8001dbe:	371c      	adds	r7, #28
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	60b9      	str	r1, [r7, #8]
 8001dd2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001de0:	43db      	mvns	r3, r3
 8001de2:	401a      	ands	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f003 0318 	and.w	r3, r3, #24
 8001dea:	4908      	ldr	r1, [pc, #32]	@ (8001e0c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001dec:	40d9      	lsrs	r1, r3
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	400b      	ands	r3, r1
 8001df2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001df6:	431a      	orrs	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001dfe:	bf00      	nop
 8001e00:	3714      	adds	r7, #20
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	000fffff 	.word	0x000fffff

08001e10 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	4b04      	ldr	r3, [pc, #16]	@ (8001e30 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001e1e:	4013      	ands	r3, r2
 8001e20:	687a      	ldr	r2, [r7, #4]
 8001e22:	6093      	str	r3, [r2, #8]
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	5fffffc0 	.word	0x5fffffc0

08001e34 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001e44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e48:	d101      	bne.n	8001e4e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689a      	ldr	r2, [r3, #8]
 8001e68:	4b05      	ldr	r3, [pc, #20]	@ (8001e80 <LL_ADC_EnableInternalRegulator+0x24>)
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	6fffffc0 	.word	0x6fffffc0

08001e84 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001e98:	d101      	bne.n	8001e9e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d101      	bne.n	8001ec4 <LL_ADC_IsEnabled+0x18>
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e000      	b.n	8001ec6 <LL_ADC_IsEnabled+0x1a>
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f003 0304 	and.w	r3, r3, #4
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d101      	bne.n	8001eea <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	370c      	adds	r7, #12
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 0308 	and.w	r3, r3, #8
 8001f08:	2b08      	cmp	r3, #8
 8001f0a:	d101      	bne.n	8001f10 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e000      	b.n	8001f12 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
	...

08001f20 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f20:	b590      	push	{r4, r7, lr}
 8001f22:	b089      	sub	sp, #36	@ 0x24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e138      	b.n	80021ac <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d109      	bne.n	8001f5c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff f8c7 	bl	80010dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff ff67 	bl	8001e34 <LL_ADC_IsDeepPowerDownEnabled>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d004      	beq.n	8001f76 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff ff4d 	bl	8001e10 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff ff82 	bl	8001e84 <LL_ADC_IsInternalRegulatorEnabled>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d114      	bne.n	8001fb0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff ff66 	bl	8001e5c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f90:	4b88      	ldr	r3, [pc, #544]	@ (80021b4 <HAL_ADC_Init+0x294>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	099b      	lsrs	r3, r3, #6
 8001f96:	4a88      	ldr	r2, [pc, #544]	@ (80021b8 <HAL_ADC_Init+0x298>)
 8001f98:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9c:	099b      	lsrs	r3, r3, #6
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001fa2:	e002      	b.n	8001faa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1f9      	bne.n	8001fa4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff ff65 	bl	8001e84 <LL_ADC_IsInternalRegulatorEnabled>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10d      	bne.n	8001fdc <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc4:	f043 0210 	orr.w	r2, r3, #16
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd0:	f043 0201 	orr.w	r2, r3, #1
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f7ff ff76 	bl	8001ed2 <LL_ADC_REG_IsConversionOngoing>
 8001fe6:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fec:	f003 0310 	and.w	r3, r3, #16
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f040 80d2 	bne.w	800219a <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f040 80ce 	bne.w	800219a <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002002:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002006:	f043 0202 	orr.w	r2, r3, #2
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff ff4a 	bl	8001eac <LL_ADC_IsEnabled>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d110      	bne.n	8002040 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800201e:	4867      	ldr	r0, [pc, #412]	@ (80021bc <HAL_ADC_Init+0x29c>)
 8002020:	f7ff ff44 	bl	8001eac <LL_ADC_IsEnabled>
 8002024:	4604      	mov	r4, r0
 8002026:	4866      	ldr	r0, [pc, #408]	@ (80021c0 <HAL_ADC_Init+0x2a0>)
 8002028:	f7ff ff40 	bl	8001eac <LL_ADC_IsEnabled>
 800202c:	4603      	mov	r3, r0
 800202e:	4323      	orrs	r3, r4
 8002030:	2b00      	cmp	r3, #0
 8002032:	d105      	bne.n	8002040 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	4619      	mov	r1, r3
 800203a:	4862      	ldr	r0, [pc, #392]	@ (80021c4 <HAL_ADC_Init+0x2a4>)
 800203c:	f7ff fdb2 	bl	8001ba4 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	7d5b      	ldrb	r3, [r3, #21]
 8002044:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800204a:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8002050:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	7f1b      	ldrb	r3, [r3, #28]
 8002056:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002058:	4313      	orrs	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	7f1b      	ldrb	r3, [r3, #28]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d106      	bne.n	8002072 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a1b      	ldr	r3, [r3, #32]
 8002068:	3b01      	subs	r3, #1
 800206a:	045b      	lsls	r3, r3, #17
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	4313      	orrs	r3, r2
 8002070:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002076:	2b00      	cmp	r3, #0
 8002078:	d009      	beq.n	800208e <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002086:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4313      	orrs	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68da      	ldr	r2, [r3, #12]
 8002094:	4b4c      	ldr	r3, [pc, #304]	@ (80021c8 <HAL_ADC_Init+0x2a8>)
 8002096:	4013      	ands	r3, r2
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	6812      	ldr	r2, [r2, #0]
 800209c:	69b9      	ldr	r1, [r7, #24]
 800209e:	430b      	orrs	r3, r1
 80020a0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f7ff ff13 	bl	8001ed2 <LL_ADC_REG_IsConversionOngoing>
 80020ac:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff ff20 	bl	8001ef8 <LL_ADC_INJ_IsConversionOngoing>
 80020b8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d14a      	bne.n	8002156 <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d147      	bne.n	8002156 <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	7d1b      	ldrb	r3, [r3, #20]
 80020ca:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 80020d0:	4313      	orrs	r3, r2
 80020d2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68da      	ldr	r2, [r3, #12]
 80020da:	4b3c      	ldr	r3, [pc, #240]	@ (80021cc <HAL_ADC_Init+0x2ac>)
 80020dc:	4013      	ands	r3, r2
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	6812      	ldr	r2, [r2, #0]
 80020e2:	69b9      	ldr	r1, [r7, #24]
 80020e4:	430b      	orrs	r3, r1
 80020e6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d11b      	bne.n	800212a <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	691a      	ldr	r2, [r3, #16]
 80020fe:	4b34      	ldr	r3, [pc, #208]	@ (80021d0 <HAL_ADC_Init+0x2b0>)
 8002100:	4013      	ands	r3, r2
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002106:	3a01      	subs	r2, #1
 8002108:	0411      	lsls	r1, r2, #16
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800210e:	4311      	orrs	r1, r2
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002114:	4311      	orrs	r1, r2
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800211a:	430a      	orrs	r2, r1
 800211c:	431a      	orrs	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 0201 	orr.w	r2, r2, #1
 8002126:	611a      	str	r2, [r3, #16]
 8002128:	e007      	b.n	800213a <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	691a      	ldr	r2, [r3, #16]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 0201 	bic.w	r2, r2, #1
 8002138:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	691b      	ldr	r3, [r3, #16]
 8002140:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f000 fabd 	bl	80026d0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d10c      	bne.n	8002178 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002164:	f023 010f 	bic.w	r1, r3, #15
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	1e5a      	subs	r2, r3, #1
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	631a      	str	r2, [r3, #48]	@ 0x30
 8002176:	e007      	b.n	8002188 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 020f 	bic.w	r2, r2, #15
 8002186:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800218c:	f023 0303 	bic.w	r3, r3, #3
 8002190:	f043 0201 	orr.w	r2, r3, #1
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	655a      	str	r2, [r3, #84]	@ 0x54
 8002198:	e007      	b.n	80021aa <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800219e:	f043 0210 	orr.w	r2, r3, #16
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3724      	adds	r7, #36	@ 0x24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd90      	pop	{r4, r7, pc}
 80021b4:	24000004 	.word	0x24000004
 80021b8:	053e2d63 	.word	0x053e2d63
 80021bc:	40022000 	.word	0x40022000
 80021c0:	40022100 	.word	0x40022100
 80021c4:	40022300 	.word	0x40022300
 80021c8:	fff0c003 	.word	0xfff0c003
 80021cc:	ffffbffc 	.word	0xffffbffc
 80021d0:	fc00f81e 	.word	0xfc00f81e

080021d4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021d4:	b590      	push	{r4, r7, lr}
 80021d6:	b08d      	sub	sp, #52	@ 0x34
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80021e4:	2300      	movs	r3, #0
 80021e6:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	4a5b      	ldr	r2, [pc, #364]	@ (800235c <HAL_ADC_ConfigChannel+0x188>)
 80021ee:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d101      	bne.n	80021fe <HAL_ADC_ConfigChannel+0x2a>
 80021fa:	2302      	movs	r3, #2
 80021fc:	e263      	b.n	80026c6 <HAL_ADC_ConfigChannel+0x4f2>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f7ff fe61 	bl	8001ed2 <LL_ADC_REG_IsConversionOngoing>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	f040 8248 	bne.w	80026a8 <HAL_ADC_ConfigChannel+0x4d4>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	db2c      	blt.n	800227a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002228:	2b00      	cmp	r3, #0
 800222a:	d108      	bne.n	800223e <HAL_ADC_ConfigChannel+0x6a>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	0e9b      	lsrs	r3, r3, #26
 8002232:	f003 031f 	and.w	r3, r3, #31
 8002236:	2201      	movs	r2, #1
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	e016      	b.n	800226c <HAL_ADC_ConfigChannel+0x98>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	fa93 f3a3 	rbit	r3, r3
 800224a:	613b      	str	r3, [r7, #16]
  return result;
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8002256:	2320      	movs	r3, #32
 8002258:	e003      	b.n	8002262 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	fab3 f383 	clz	r3, r3
 8002260:	b2db      	uxtb	r3, r3
 8002262:	f003 031f 	and.w	r3, r3, #31
 8002266:	2201      	movs	r2, #1
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	6812      	ldr	r2, [r2, #0]
 8002270:	69d1      	ldr	r1, [r2, #28]
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	6812      	ldr	r2, [r2, #0]
 8002276:	430b      	orrs	r3, r1
 8002278:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6818      	ldr	r0, [r3, #0]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	6859      	ldr	r1, [r3, #4]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	461a      	mov	r2, r3
 8002288:	f7ff fd47 	bl	8001d1a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff fe1e 	bl	8001ed2 <LL_ADC_REG_IsConversionOngoing>
 8002296:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff fe2b 	bl	8001ef8 <LL_ADC_INJ_IsConversionOngoing>
 80022a2:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80022a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f040 80a2 	bne.w	80023f0 <HAL_ADC_ConfigChannel+0x21c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80022ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	f040 809e 	bne.w	80023f0 <HAL_ADC_ConfigChannel+0x21c>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6818      	ldr	r0, [r3, #0]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	6819      	ldr	r1, [r3, #0]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	461a      	mov	r2, r3
 80022c2:	f7ff fd56 	bl	8001d72 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	f003 0310 	and.w	r3, r3, #16
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10b      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x118>
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	695a      	ldr	r2, [r3, #20]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	089b      	lsrs	r3, r3, #2
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	e00a      	b.n	8002302 <HAL_ADC_ConfigChannel+0x12e>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	695a      	ldr	r2, [r3, #20]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	089b      	lsrs	r3, r3, #2
 80022f8:	f003 0304 	and.w	r3, r3, #4
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002302:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	691b      	ldr	r3, [r3, #16]
 8002308:	2b04      	cmp	r3, #4
 800230a:	d029      	beq.n	8002360 <HAL_ADC_ConfigChannel+0x18c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6818      	ldr	r0, [r3, #0]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	6919      	ldr	r1, [r3, #16]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	6a3b      	ldr	r3, [r7, #32]
 800231a:	f7ff fcaa 	bl	8001c72 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6818      	ldr	r0, [r3, #0]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	6919      	ldr	r1, [r3, #16]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	7e5b      	ldrb	r3, [r3, #25]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d102      	bne.n	8002334 <HAL_ADC_ConfigChannel+0x160>
 800232e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8002332:	e000      	b.n	8002336 <HAL_ADC_ConfigChannel+0x162>
 8002334:	2300      	movs	r3, #0
 8002336:	461a      	mov	r2, r3
 8002338:	f7ff fcd4 	bl	8001ce4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6818      	ldr	r0, [r3, #0]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	6919      	ldr	r1, [r3, #16]
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	7e1b      	ldrb	r3, [r3, #24]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d102      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x17e>
 800234c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002350:	e000      	b.n	8002354 <HAL_ADC_ConfigChannel+0x180>
 8002352:	2300      	movs	r3, #0
 8002354:	461a      	mov	r2, r3
 8002356:	f7ff fcac 	bl	8001cb2 <LL_ADC_SetDataRightShift>
 800235a:	e049      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x21c>
 800235c:	47ff0000 	.word	0x47ff0000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002366:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	069b      	lsls	r3, r3, #26
 8002370:	429a      	cmp	r2, r3
 8002372:	d107      	bne.n	8002384 <HAL_ADC_ConfigChannel+0x1b0>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002382:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800238a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	069b      	lsls	r3, r3, #26
 8002394:	429a      	cmp	r2, r3
 8002396:	d107      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x1d4>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80023a6:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80023ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	069b      	lsls	r3, r3, #26
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d107      	bne.n	80023cc <HAL_ADC_ConfigChannel+0x1f8>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80023ca:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	069b      	lsls	r3, r3, #26
 80023dc:	429a      	cmp	r2, r3
 80023de:	d107      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x21c>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80023ee:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff fd59 	bl	8001eac <LL_ADC_IsEnabled>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f040 815c 	bne.w	80026ba <HAL_ADC_ConfigChannel+0x4e6>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6818      	ldr	r0, [r3, #0]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	6819      	ldr	r1, [r3, #0]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	461a      	mov	r2, r3
 8002410:	f7ff fcda 	bl	8001dc8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	4a89      	ldr	r2, [pc, #548]	@ (8002640 <HAL_ADC_ConfigChannel+0x46c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	f040 809a 	bne.w	8002554 <HAL_ADC_ConfigChannel+0x380>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4986      	ldr	r1, [pc, #536]	@ (8002644 <HAL_ADC_ConfigChannel+0x470>)
 800242a:	428b      	cmp	r3, r1
 800242c:	d147      	bne.n	80024be <HAL_ADC_ConfigChannel+0x2ea>
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4985      	ldr	r1, [pc, #532]	@ (8002648 <HAL_ADC_ConfigChannel+0x474>)
 8002434:	428b      	cmp	r3, r1
 8002436:	d040      	beq.n	80024ba <HAL_ADC_ConfigChannel+0x2e6>
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4983      	ldr	r1, [pc, #524]	@ (800264c <HAL_ADC_ConfigChannel+0x478>)
 800243e:	428b      	cmp	r3, r1
 8002440:	d039      	beq.n	80024b6 <HAL_ADC_ConfigChannel+0x2e2>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4982      	ldr	r1, [pc, #520]	@ (8002650 <HAL_ADC_ConfigChannel+0x47c>)
 8002448:	428b      	cmp	r3, r1
 800244a:	d032      	beq.n	80024b2 <HAL_ADC_ConfigChannel+0x2de>
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4980      	ldr	r1, [pc, #512]	@ (8002654 <HAL_ADC_ConfigChannel+0x480>)
 8002452:	428b      	cmp	r3, r1
 8002454:	d02b      	beq.n	80024ae <HAL_ADC_ConfigChannel+0x2da>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	497f      	ldr	r1, [pc, #508]	@ (8002658 <HAL_ADC_ConfigChannel+0x484>)
 800245c:	428b      	cmp	r3, r1
 800245e:	d024      	beq.n	80024aa <HAL_ADC_ConfigChannel+0x2d6>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	497d      	ldr	r1, [pc, #500]	@ (800265c <HAL_ADC_ConfigChannel+0x488>)
 8002466:	428b      	cmp	r3, r1
 8002468:	d01d      	beq.n	80024a6 <HAL_ADC_ConfigChannel+0x2d2>
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	497c      	ldr	r1, [pc, #496]	@ (8002660 <HAL_ADC_ConfigChannel+0x48c>)
 8002470:	428b      	cmp	r3, r1
 8002472:	d016      	beq.n	80024a2 <HAL_ADC_ConfigChannel+0x2ce>
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	497a      	ldr	r1, [pc, #488]	@ (8002664 <HAL_ADC_ConfigChannel+0x490>)
 800247a:	428b      	cmp	r3, r1
 800247c:	d00f      	beq.n	800249e <HAL_ADC_ConfigChannel+0x2ca>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4979      	ldr	r1, [pc, #484]	@ (8002668 <HAL_ADC_ConfigChannel+0x494>)
 8002484:	428b      	cmp	r3, r1
 8002486:	d008      	beq.n	800249a <HAL_ADC_ConfigChannel+0x2c6>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4977      	ldr	r1, [pc, #476]	@ (800266c <HAL_ADC_ConfigChannel+0x498>)
 800248e:	428b      	cmp	r3, r1
 8002490:	d101      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x2c2>
 8002492:	4b77      	ldr	r3, [pc, #476]	@ (8002670 <HAL_ADC_ConfigChannel+0x49c>)
 8002494:	e05a      	b.n	800254c <HAL_ADC_ConfigChannel+0x378>
 8002496:	2300      	movs	r3, #0
 8002498:	e058      	b.n	800254c <HAL_ADC_ConfigChannel+0x378>
 800249a:	4b76      	ldr	r3, [pc, #472]	@ (8002674 <HAL_ADC_ConfigChannel+0x4a0>)
 800249c:	e056      	b.n	800254c <HAL_ADC_ConfigChannel+0x378>
 800249e:	4b76      	ldr	r3, [pc, #472]	@ (8002678 <HAL_ADC_ConfigChannel+0x4a4>)
 80024a0:	e054      	b.n	800254c <HAL_ADC_ConfigChannel+0x378>
 80024a2:	4b70      	ldr	r3, [pc, #448]	@ (8002664 <HAL_ADC_ConfigChannel+0x490>)
 80024a4:	e052      	b.n	800254c <HAL_ADC_ConfigChannel+0x378>
 80024a6:	4b6e      	ldr	r3, [pc, #440]	@ (8002660 <HAL_ADC_ConfigChannel+0x48c>)
 80024a8:	e050      	b.n	800254c <HAL_ADC_ConfigChannel+0x378>
 80024aa:	4b74      	ldr	r3, [pc, #464]	@ (800267c <HAL_ADC_ConfigChannel+0x4a8>)
 80024ac:	e04e      	b.n	800254c <HAL_ADC_ConfigChannel+0x378>
 80024ae:	4b74      	ldr	r3, [pc, #464]	@ (8002680 <HAL_ADC_ConfigChannel+0x4ac>)
 80024b0:	e04c      	b.n	800254c <HAL_ADC_ConfigChannel+0x378>
 80024b2:	4b74      	ldr	r3, [pc, #464]	@ (8002684 <HAL_ADC_ConfigChannel+0x4b0>)
 80024b4:	e04a      	b.n	800254c <HAL_ADC_ConfigChannel+0x378>
 80024b6:	4b74      	ldr	r3, [pc, #464]	@ (8002688 <HAL_ADC_ConfigChannel+0x4b4>)
 80024b8:	e048      	b.n	800254c <HAL_ADC_ConfigChannel+0x378>
 80024ba:	2301      	movs	r3, #1
 80024bc:	e046      	b.n	800254c <HAL_ADC_ConfigChannel+0x378>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4972      	ldr	r1, [pc, #456]	@ (800268c <HAL_ADC_ConfigChannel+0x4b8>)
 80024c4:	428b      	cmp	r3, r1
 80024c6:	d140      	bne.n	800254a <HAL_ADC_ConfigChannel+0x376>
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	495e      	ldr	r1, [pc, #376]	@ (8002648 <HAL_ADC_ConfigChannel+0x474>)
 80024ce:	428b      	cmp	r3, r1
 80024d0:	d039      	beq.n	8002546 <HAL_ADC_ConfigChannel+0x372>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	495d      	ldr	r1, [pc, #372]	@ (800264c <HAL_ADC_ConfigChannel+0x478>)
 80024d8:	428b      	cmp	r3, r1
 80024da:	d032      	beq.n	8002542 <HAL_ADC_ConfigChannel+0x36e>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	495b      	ldr	r1, [pc, #364]	@ (8002650 <HAL_ADC_ConfigChannel+0x47c>)
 80024e2:	428b      	cmp	r3, r1
 80024e4:	d02b      	beq.n	800253e <HAL_ADC_ConfigChannel+0x36a>
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	495a      	ldr	r1, [pc, #360]	@ (8002654 <HAL_ADC_ConfigChannel+0x480>)
 80024ec:	428b      	cmp	r3, r1
 80024ee:	d024      	beq.n	800253a <HAL_ADC_ConfigChannel+0x366>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4958      	ldr	r1, [pc, #352]	@ (8002658 <HAL_ADC_ConfigChannel+0x484>)
 80024f6:	428b      	cmp	r3, r1
 80024f8:	d01d      	beq.n	8002536 <HAL_ADC_ConfigChannel+0x362>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4957      	ldr	r1, [pc, #348]	@ (800265c <HAL_ADC_ConfigChannel+0x488>)
 8002500:	428b      	cmp	r3, r1
 8002502:	d016      	beq.n	8002532 <HAL_ADC_ConfigChannel+0x35e>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4955      	ldr	r1, [pc, #340]	@ (8002660 <HAL_ADC_ConfigChannel+0x48c>)
 800250a:	428b      	cmp	r3, r1
 800250c:	d00f      	beq.n	800252e <HAL_ADC_ConfigChannel+0x35a>
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4954      	ldr	r1, [pc, #336]	@ (8002664 <HAL_ADC_ConfigChannel+0x490>)
 8002514:	428b      	cmp	r3, r1
 8002516:	d008      	beq.n	800252a <HAL_ADC_ConfigChannel+0x356>
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4953      	ldr	r1, [pc, #332]	@ (800266c <HAL_ADC_ConfigChannel+0x498>)
 800251e:	428b      	cmp	r3, r1
 8002520:	d101      	bne.n	8002526 <HAL_ADC_ConfigChannel+0x352>
 8002522:	4b53      	ldr	r3, [pc, #332]	@ (8002670 <HAL_ADC_ConfigChannel+0x49c>)
 8002524:	e012      	b.n	800254c <HAL_ADC_ConfigChannel+0x378>
 8002526:	2300      	movs	r3, #0
 8002528:	e010      	b.n	800254c <HAL_ADC_ConfigChannel+0x378>
 800252a:	4b53      	ldr	r3, [pc, #332]	@ (8002678 <HAL_ADC_ConfigChannel+0x4a4>)
 800252c:	e00e      	b.n	800254c <HAL_ADC_ConfigChannel+0x378>
 800252e:	4b4d      	ldr	r3, [pc, #308]	@ (8002664 <HAL_ADC_ConfigChannel+0x490>)
 8002530:	e00c      	b.n	800254c <HAL_ADC_ConfigChannel+0x378>
 8002532:	4b4b      	ldr	r3, [pc, #300]	@ (8002660 <HAL_ADC_ConfigChannel+0x48c>)
 8002534:	e00a      	b.n	800254c <HAL_ADC_ConfigChannel+0x378>
 8002536:	4b51      	ldr	r3, [pc, #324]	@ (800267c <HAL_ADC_ConfigChannel+0x4a8>)
 8002538:	e008      	b.n	800254c <HAL_ADC_ConfigChannel+0x378>
 800253a:	4b51      	ldr	r3, [pc, #324]	@ (8002680 <HAL_ADC_ConfigChannel+0x4ac>)
 800253c:	e006      	b.n	800254c <HAL_ADC_ConfigChannel+0x378>
 800253e:	4b51      	ldr	r3, [pc, #324]	@ (8002684 <HAL_ADC_ConfigChannel+0x4b0>)
 8002540:	e004      	b.n	800254c <HAL_ADC_ConfigChannel+0x378>
 8002542:	4b51      	ldr	r3, [pc, #324]	@ (8002688 <HAL_ADC_ConfigChannel+0x4b4>)
 8002544:	e002      	b.n	800254c <HAL_ADC_ConfigChannel+0x378>
 8002546:	2301      	movs	r3, #1
 8002548:	e000      	b.n	800254c <HAL_ADC_ConfigChannel+0x378>
 800254a:	2300      	movs	r3, #0
 800254c:	4619      	mov	r1, r3
 800254e:	4610      	mov	r0, r2
 8002550:	f7ff fb5c 	bl	8001c0c <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	f280 80ae 	bge.w	80026ba <HAL_ADC_ConfigChannel+0x4e6>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800255e:	484c      	ldr	r0, [pc, #304]	@ (8002690 <HAL_ADC_ConfigChannel+0x4bc>)
 8002560:	f7ff fb46 	bl	8001bf0 <LL_ADC_GetCommonPathInternalCh>
 8002564:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002566:	4837      	ldr	r0, [pc, #220]	@ (8002644 <HAL_ADC_ConfigChannel+0x470>)
 8002568:	f7ff fca0 	bl	8001eac <LL_ADC_IsEnabled>
 800256c:	4604      	mov	r4, r0
 800256e:	4847      	ldr	r0, [pc, #284]	@ (800268c <HAL_ADC_ConfigChannel+0x4b8>)
 8002570:	f7ff fc9c 	bl	8001eac <LL_ADC_IsEnabled>
 8002574:	4603      	mov	r3, r0
 8002576:	4323      	orrs	r3, r4
 8002578:	2b00      	cmp	r3, #0
 800257a:	d156      	bne.n	800262a <HAL_ADC_ConfigChannel+0x456>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a44      	ldr	r2, [pc, #272]	@ (8002694 <HAL_ADC_ConfigChannel+0x4c0>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d123      	bne.n	80025ce <HAL_ADC_ConfigChannel+0x3fa>
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d11e      	bne.n	80025ce <HAL_ADC_ConfigChannel+0x3fa>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a3d      	ldr	r2, [pc, #244]	@ (800268c <HAL_ADC_ConfigChannel+0x4b8>)
 8002596:	4293      	cmp	r3, r2
 8002598:	f040 808f 	bne.w	80026ba <HAL_ADC_ConfigChannel+0x4e6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80025a2:	4619      	mov	r1, r3
 80025a4:	483a      	ldr	r0, [pc, #232]	@ (8002690 <HAL_ADC_ConfigChannel+0x4bc>)
 80025a6:	f7ff fb10 	bl	8001bca <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002698 <HAL_ADC_ConfigChannel+0x4c4>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	099b      	lsrs	r3, r3, #6
 80025b0:	4a3a      	ldr	r2, [pc, #232]	@ (800269c <HAL_ADC_ConfigChannel+0x4c8>)
 80025b2:	fba2 2303 	umull	r2, r3, r2, r3
 80025b6:	099b      	lsrs	r3, r3, #6
 80025b8:	3301      	adds	r3, #1
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80025be:	e002      	b.n	80025c6 <HAL_ADC_ConfigChannel+0x3f2>
              {
                wait_loop_index--;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	3b01      	subs	r3, #1
 80025c4:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1f9      	bne.n	80025c0 <HAL_ADC_ConfigChannel+0x3ec>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025cc:	e075      	b.n	80026ba <HAL_ADC_ConfigChannel+0x4e6>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a33      	ldr	r2, [pc, #204]	@ (80026a0 <HAL_ADC_ConfigChannel+0x4cc>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d111      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x428>
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d10c      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x428>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a29      	ldr	r2, [pc, #164]	@ (800268c <HAL_ADC_ConfigChannel+0x4b8>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d166      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x4e6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025f2:	4619      	mov	r1, r3
 80025f4:	4826      	ldr	r0, [pc, #152]	@ (8002690 <HAL_ADC_ConfigChannel+0x4bc>)
 80025f6:	f7ff fae8 	bl	8001bca <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025fa:	e05e      	b.n	80026ba <HAL_ADC_ConfigChannel+0x4e6>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a28      	ldr	r2, [pc, #160]	@ (80026a4 <HAL_ADC_ConfigChannel+0x4d0>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d159      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x4e6>
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d154      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x4e6>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a1d      	ldr	r2, [pc, #116]	@ (800268c <HAL_ADC_ConfigChannel+0x4b8>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d14f      	bne.n	80026ba <HAL_ADC_ConfigChannel+0x4e6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002620:	4619      	mov	r1, r3
 8002622:	481b      	ldr	r0, [pc, #108]	@ (8002690 <HAL_ADC_ConfigChannel+0x4bc>)
 8002624:	f7ff fad1 	bl	8001bca <LL_ADC_SetCommonPathInternalCh>
 8002628:	e047      	b.n	80026ba <HAL_ADC_ConfigChannel+0x4e6>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800262e:	f043 0220 	orr.w	r2, r3, #32
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800263c:	e03d      	b.n	80026ba <HAL_ADC_ConfigChannel+0x4e6>
 800263e:	bf00      	nop
 8002640:	47ff0000 	.word	0x47ff0000
 8002644:	40022000 	.word	0x40022000
 8002648:	04300002 	.word	0x04300002
 800264c:	08600004 	.word	0x08600004
 8002650:	0c900008 	.word	0x0c900008
 8002654:	10c00010 	.word	0x10c00010
 8002658:	14f00020 	.word	0x14f00020
 800265c:	2a000400 	.word	0x2a000400
 8002660:	2e300800 	.word	0x2e300800
 8002664:	32601000 	.word	0x32601000
 8002668:	43210000 	.word	0x43210000
 800266c:	4b840000 	.word	0x4b840000
 8002670:	4fb80000 	.word	0x4fb80000
 8002674:	47520000 	.word	0x47520000
 8002678:	36902000 	.word	0x36902000
 800267c:	25b00200 	.word	0x25b00200
 8002680:	21800100 	.word	0x21800100
 8002684:	1d500080 	.word	0x1d500080
 8002688:	19200040 	.word	0x19200040
 800268c:	40022100 	.word	0x40022100
 8002690:	40022300 	.word	0x40022300
 8002694:	cb840000 	.word	0xcb840000
 8002698:	24000004 	.word	0x24000004
 800269c:	053e2d63 	.word	0x053e2d63
 80026a0:	bac04000 	.word	0xbac04000
 80026a4:	cfb80000 	.word	0xcfb80000
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ac:	f043 0220 	orr.w	r2, r3, #32
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80026c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3734      	adds	r7, #52	@ 0x34
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd90      	pop	{r4, r7, pc}
 80026ce:	bf00      	nop

080026d0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80026d8:	4b60      	ldr	r3, [pc, #384]	@ (800285c <ADC_ConfigureBoostMode+0x18c>)
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d01c      	beq.n	800271e <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80026e4:	f007 fac6 	bl	8009c74 <HAL_RCC_GetHCLKFreq>
 80026e8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80026f2:	d010      	beq.n	8002716 <ADC_ConfigureBoostMode+0x46>
 80026f4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80026f8:	d873      	bhi.n	80027e2 <ADC_ConfigureBoostMode+0x112>
 80026fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026fe:	d002      	beq.n	8002706 <ADC_ConfigureBoostMode+0x36>
 8002700:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002704:	d16d      	bne.n	80027e2 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	0c1b      	lsrs	r3, r3, #16
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002712:	60fb      	str	r3, [r7, #12]
        break;
 8002714:	e068      	b.n	80027e8 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	089b      	lsrs	r3, r3, #2
 800271a:	60fb      	str	r3, [r7, #12]
        break;
 800271c:	e064      	b.n	80027e8 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 800271e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002722:	f04f 0100 	mov.w	r1, #0
 8002726:	f008 fca9 	bl	800b07c <HAL_RCCEx_GetPeriphCLKFreq>
 800272a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002734:	d051      	beq.n	80027da <ADC_ConfigureBoostMode+0x10a>
 8002736:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800273a:	d854      	bhi.n	80027e6 <ADC_ConfigureBoostMode+0x116>
 800273c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002740:	d047      	beq.n	80027d2 <ADC_ConfigureBoostMode+0x102>
 8002742:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002746:	d84e      	bhi.n	80027e6 <ADC_ConfigureBoostMode+0x116>
 8002748:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800274c:	d03d      	beq.n	80027ca <ADC_ConfigureBoostMode+0xfa>
 800274e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002752:	d848      	bhi.n	80027e6 <ADC_ConfigureBoostMode+0x116>
 8002754:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002758:	d033      	beq.n	80027c2 <ADC_ConfigureBoostMode+0xf2>
 800275a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800275e:	d842      	bhi.n	80027e6 <ADC_ConfigureBoostMode+0x116>
 8002760:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002764:	d029      	beq.n	80027ba <ADC_ConfigureBoostMode+0xea>
 8002766:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800276a:	d83c      	bhi.n	80027e6 <ADC_ConfigureBoostMode+0x116>
 800276c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002770:	d01a      	beq.n	80027a8 <ADC_ConfigureBoostMode+0xd8>
 8002772:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002776:	d836      	bhi.n	80027e6 <ADC_ConfigureBoostMode+0x116>
 8002778:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800277c:	d014      	beq.n	80027a8 <ADC_ConfigureBoostMode+0xd8>
 800277e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002782:	d830      	bhi.n	80027e6 <ADC_ConfigureBoostMode+0x116>
 8002784:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002788:	d00e      	beq.n	80027a8 <ADC_ConfigureBoostMode+0xd8>
 800278a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800278e:	d82a      	bhi.n	80027e6 <ADC_ConfigureBoostMode+0x116>
 8002790:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002794:	d008      	beq.n	80027a8 <ADC_ConfigureBoostMode+0xd8>
 8002796:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800279a:	d824      	bhi.n	80027e6 <ADC_ConfigureBoostMode+0x116>
 800279c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80027a0:	d002      	beq.n	80027a8 <ADC_ConfigureBoostMode+0xd8>
 80027a2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80027a6:	d11e      	bne.n	80027e6 <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	0c9b      	lsrs	r3, r3, #18
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b6:	60fb      	str	r3, [r7, #12]
        break;
 80027b8:	e016      	b.n	80027e8 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	091b      	lsrs	r3, r3, #4
 80027be:	60fb      	str	r3, [r7, #12]
        break;
 80027c0:	e012      	b.n	80027e8 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	095b      	lsrs	r3, r3, #5
 80027c6:	60fb      	str	r3, [r7, #12]
        break;
 80027c8:	e00e      	b.n	80027e8 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	099b      	lsrs	r3, r3, #6
 80027ce:	60fb      	str	r3, [r7, #12]
        break;
 80027d0:	e00a      	b.n	80027e8 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	09db      	lsrs	r3, r3, #7
 80027d6:	60fb      	str	r3, [r7, #12]
        break;
 80027d8:	e006      	b.n	80027e8 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	0a1b      	lsrs	r3, r3, #8
 80027de:	60fb      	str	r3, [r7, #12]
        break;
 80027e0:	e002      	b.n	80027e8 <ADC_ConfigureBoostMode+0x118>
        break;
 80027e2:	bf00      	nop
 80027e4:	e000      	b.n	80027e8 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 80027e6:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	085b      	lsrs	r3, r3, #1
 80027ec:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	4a1b      	ldr	r2, [pc, #108]	@ (8002860 <ADC_ConfigureBoostMode+0x190>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d808      	bhi.n	8002808 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002804:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002806:	e025      	b.n	8002854 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4a16      	ldr	r2, [pc, #88]	@ (8002864 <ADC_ConfigureBoostMode+0x194>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d80a      	bhi.n	8002826 <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002822:	609a      	str	r2, [r3, #8]
}
 8002824:	e016      	b.n	8002854 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	4a0f      	ldr	r2, [pc, #60]	@ (8002868 <ADC_ConfigureBoostMode+0x198>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d80a      	bhi.n	8002844 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002840:	609a      	str	r2, [r3, #8]
}
 8002842:	e007      	b.n	8002854 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	689a      	ldr	r2, [r3, #8]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002852:	609a      	str	r2, [r3, #8]
}
 8002854:	bf00      	nop
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40022300 	.word	0x40022300
 8002860:	005f5e10 	.word	0x005f5e10
 8002864:	00bebc20 	.word	0x00bebc20
 8002868:	017d7840 	.word	0x017d7840

0800286c <LL_ADC_IsEnabled>:
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	2b01      	cmp	r3, #1
 800287e:	d101      	bne.n	8002884 <LL_ADC_IsEnabled+0x18>
 8002880:	2301      	movs	r3, #1
 8002882:	e000      	b.n	8002886 <LL_ADC_IsEnabled+0x1a>
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <LL_ADC_REG_IsConversionOngoing>:
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f003 0304 	and.w	r3, r3, #4
 80028a2:	2b04      	cmp	r3, #4
 80028a4:	d101      	bne.n	80028aa <LL_ADC_REG_IsConversionOngoing+0x18>
 80028a6:	2301      	movs	r3, #1
 80028a8:	e000      	b.n	80028ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028aa:	2300      	movs	r3, #0
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80028b8:	b590      	push	{r4, r7, lr}
 80028ba:	b09f      	sub	sp, #124	@ 0x7c
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028c2:	2300      	movs	r3, #0
 80028c4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d101      	bne.n	80028d6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80028d2:	2302      	movs	r3, #2
 80028d4:	e080      	b.n	80029d8 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80028de:	2300      	movs	r3, #0
 80028e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80028e2:	2300      	movs	r3, #0
 80028e4:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a3d      	ldr	r2, [pc, #244]	@ (80029e0 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d102      	bne.n	80028f6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80028f0:	4b3c      	ldr	r3, [pc, #240]	@ (80029e4 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	e001      	b.n	80028fa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80028f6:	2300      	movs	r3, #0
 80028f8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10b      	bne.n	8002918 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002904:	f043 0220 	orr.w	r2, r3, #32
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e05f      	b.n	80029d8 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff ffb9 	bl	8002892 <LL_ADC_REG_IsConversionOngoing>
 8002920:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff ffb3 	bl	8002892 <LL_ADC_REG_IsConversionOngoing>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d141      	bne.n	80029b6 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002932:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002934:	2b00      	cmp	r3, #0
 8002936:	d13e      	bne.n	80029b6 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002938:	4b2b      	ldr	r3, [pc, #172]	@ (80029e8 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 800293a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d020      	beq.n	8002986 <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8002944:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	431a      	orrs	r2, r3
 8002952:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002954:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002956:	4822      	ldr	r0, [pc, #136]	@ (80029e0 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002958:	f7ff ff88 	bl	800286c <LL_ADC_IsEnabled>
 800295c:	4604      	mov	r4, r0
 800295e:	4821      	ldr	r0, [pc, #132]	@ (80029e4 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8002960:	f7ff ff84 	bl	800286c <LL_ADC_IsEnabled>
 8002964:	4603      	mov	r3, r0
 8002966:	4323      	orrs	r3, r4
 8002968:	2b00      	cmp	r3, #0
 800296a:	d12e      	bne.n	80029ca <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800296c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800296e:	689a      	ldr	r2, [r3, #8]
 8002970:	4b1e      	ldr	r3, [pc, #120]	@ (80029ec <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8002972:	4013      	ands	r3, r2
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	6811      	ldr	r1, [r2, #0]
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	6892      	ldr	r2, [r2, #8]
 800297c:	430a      	orrs	r2, r1
 800297e:	431a      	orrs	r2, r3
 8002980:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002982:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002984:	e021      	b.n	80029ca <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002986:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800298e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002990:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002992:	4813      	ldr	r0, [pc, #76]	@ (80029e0 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8002994:	f7ff ff6a 	bl	800286c <LL_ADC_IsEnabled>
 8002998:	4604      	mov	r4, r0
 800299a:	4812      	ldr	r0, [pc, #72]	@ (80029e4 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 800299c:	f7ff ff66 	bl	800286c <LL_ADC_IsEnabled>
 80029a0:	4603      	mov	r3, r0
 80029a2:	4323      	orrs	r3, r4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d110      	bne.n	80029ca <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80029a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	4b0f      	ldr	r3, [pc, #60]	@ (80029ec <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 80029ae:	4013      	ands	r3, r2
 80029b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80029b2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029b4:	e009      	b.n	80029ca <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ba:	f043 0220 	orr.w	r2, r3, #32
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80029c8:	e000      	b.n	80029cc <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029ca:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80029d4:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 80029d8:	4618      	mov	r0, r3
 80029da:	377c      	adds	r7, #124	@ 0x7c
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd90      	pop	{r4, r7, pc}
 80029e0:	40022000 	.word	0x40022000
 80029e4:	40022100 	.word	0x40022100
 80029e8:	40022300 	.word	0x40022300
 80029ec:	fffff0e0 	.word	0xfffff0e0

080029f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b085      	sub	sp, #20
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a00:	4b0b      	ldr	r3, [pc, #44]	@ (8002a30 <__NVIC_SetPriorityGrouping+0x40>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a06:	68ba      	ldr	r2, [r7, #8]
 8002a08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002a18:	4b06      	ldr	r3, [pc, #24]	@ (8002a34 <__NVIC_SetPriorityGrouping+0x44>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a1e:	4a04      	ldr	r2, [pc, #16]	@ (8002a30 <__NVIC_SetPriorityGrouping+0x40>)
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	60d3      	str	r3, [r2, #12]
}
 8002a24:	bf00      	nop
 8002a26:	3714      	adds	r7, #20
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	e000ed00 	.word	0xe000ed00
 8002a34:	05fa0000 	.word	0x05fa0000

08002a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a3c:	4b04      	ldr	r3, [pc, #16]	@ (8002a50 <__NVIC_GetPriorityGrouping+0x18>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	0a1b      	lsrs	r3, r3, #8
 8002a42:	f003 0307 	and.w	r3, r3, #7
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	e000ed00 	.word	0xe000ed00

08002a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	db0b      	blt.n	8002a7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a66:	88fb      	ldrh	r3, [r7, #6]
 8002a68:	f003 021f 	and.w	r2, r3, #31
 8002a6c:	4907      	ldr	r1, [pc, #28]	@ (8002a8c <__NVIC_EnableIRQ+0x38>)
 8002a6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a72:	095b      	lsrs	r3, r3, #5
 8002a74:	2001      	movs	r0, #1
 8002a76:	fa00 f202 	lsl.w	r2, r0, r2
 8002a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a7e:	bf00      	nop
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	e000e100 	.word	0xe000e100

08002a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	6039      	str	r1, [r7, #0]
 8002a9a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	db0a      	blt.n	8002aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	b2da      	uxtb	r2, r3
 8002aa8:	490c      	ldr	r1, [pc, #48]	@ (8002adc <__NVIC_SetPriority+0x4c>)
 8002aaa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002aae:	0112      	lsls	r2, r2, #4
 8002ab0:	b2d2      	uxtb	r2, r2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ab8:	e00a      	b.n	8002ad0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	4908      	ldr	r1, [pc, #32]	@ (8002ae0 <__NVIC_SetPriority+0x50>)
 8002ac0:	88fb      	ldrh	r3, [r7, #6]
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	3b04      	subs	r3, #4
 8002ac8:	0112      	lsls	r2, r2, #4
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	440b      	add	r3, r1
 8002ace:	761a      	strb	r2, [r3, #24]
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	e000e100 	.word	0xe000e100
 8002ae0:	e000ed00 	.word	0xe000ed00

08002ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b089      	sub	sp, #36	@ 0x24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	60f8      	str	r0, [r7, #12]
 8002aec:	60b9      	str	r1, [r7, #8]
 8002aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	f1c3 0307 	rsb	r3, r3, #7
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	bf28      	it	cs
 8002b02:	2304      	movcs	r3, #4
 8002b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	3304      	adds	r3, #4
 8002b0a:	2b06      	cmp	r3, #6
 8002b0c:	d902      	bls.n	8002b14 <NVIC_EncodePriority+0x30>
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	3b03      	subs	r3, #3
 8002b12:	e000      	b.n	8002b16 <NVIC_EncodePriority+0x32>
 8002b14:	2300      	movs	r3, #0
 8002b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b18:	f04f 32ff 	mov.w	r2, #4294967295
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b22:	43da      	mvns	r2, r3
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	401a      	ands	r2, r3
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	fa01 f303 	lsl.w	r3, r1, r3
 8002b36:	43d9      	mvns	r1, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b3c:	4313      	orrs	r3, r2
         );
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3724      	adds	r7, #36	@ 0x24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
	...

08002b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	3b01      	subs	r3, #1
 8002b58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b5c:	d301      	bcc.n	8002b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e00f      	b.n	8002b82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b62:	4a0a      	ldr	r2, [pc, #40]	@ (8002b8c <SysTick_Config+0x40>)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b6a:	210f      	movs	r1, #15
 8002b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b70:	f7ff ff8e 	bl	8002a90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b74:	4b05      	ldr	r3, [pc, #20]	@ (8002b8c <SysTick_Config+0x40>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b7a:	4b04      	ldr	r3, [pc, #16]	@ (8002b8c <SysTick_Config+0x40>)
 8002b7c:	2207      	movs	r2, #7
 8002b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	e000e010 	.word	0xe000e010

08002b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f7ff ff29 	bl	80029f0 <__NVIC_SetPriorityGrouping>
}
 8002b9e:	bf00      	nop
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	b086      	sub	sp, #24
 8002baa:	af00      	add	r7, sp, #0
 8002bac:	4603      	mov	r3, r0
 8002bae:	60b9      	str	r1, [r7, #8]
 8002bb0:	607a      	str	r2, [r7, #4]
 8002bb2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bb4:	f7ff ff40 	bl	8002a38 <__NVIC_GetPriorityGrouping>
 8002bb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	68b9      	ldr	r1, [r7, #8]
 8002bbe:	6978      	ldr	r0, [r7, #20]
 8002bc0:	f7ff ff90 	bl	8002ae4 <NVIC_EncodePriority>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002bca:	4611      	mov	r1, r2
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff ff5f 	bl	8002a90 <__NVIC_SetPriority>
}
 8002bd2:	bf00      	nop
 8002bd4:	3718      	adds	r7, #24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b082      	sub	sp, #8
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	4603      	mov	r3, r0
 8002be2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002be4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff ff33 	bl	8002a54 <__NVIC_EnableIRQ>
}
 8002bee:	bf00      	nop
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b082      	sub	sp, #8
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7ff ffa4 	bl	8002b4c <SysTick_Config>
 8002c04:	4603      	mov	r3, r0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
	...

08002c10 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8002c14:	f3bf 8f5f 	dmb	sy
}
 8002c18:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002c1a:	4b07      	ldr	r3, [pc, #28]	@ (8002c38 <HAL_MPU_Disable+0x28>)
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1e:	4a06      	ldr	r2, [pc, #24]	@ (8002c38 <HAL_MPU_Disable+0x28>)
 8002c20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c24:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002c26:	4b05      	ldr	r3, [pc, #20]	@ (8002c3c <HAL_MPU_Disable+0x2c>)
 8002c28:	2200      	movs	r2, #0
 8002c2a:	605a      	str	r2, [r3, #4]
}
 8002c2c:	bf00      	nop
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	e000ed00 	.word	0xe000ed00
 8002c3c:	e000ed90 	.word	0xe000ed90

08002c40 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002c48:	4a0b      	ldr	r2, [pc, #44]	@ (8002c78 <HAL_MPU_Enable+0x38>)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f043 0301 	orr.w	r3, r3, #1
 8002c50:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002c52:	4b0a      	ldr	r3, [pc, #40]	@ (8002c7c <HAL_MPU_Enable+0x3c>)
 8002c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c56:	4a09      	ldr	r2, [pc, #36]	@ (8002c7c <HAL_MPU_Enable+0x3c>)
 8002c58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c5c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002c5e:	f3bf 8f4f 	dsb	sy
}
 8002c62:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002c64:	f3bf 8f6f 	isb	sy
}
 8002c68:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	e000ed90 	.word	0xe000ed90
 8002c7c:	e000ed00 	.word	0xe000ed00

08002c80 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	785a      	ldrb	r2, [r3, #1]
 8002c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002cfc <HAL_MPU_ConfigRegion+0x7c>)
 8002c8e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002c90:	4b1a      	ldr	r3, [pc, #104]	@ (8002cfc <HAL_MPU_ConfigRegion+0x7c>)
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	4a19      	ldr	r2, [pc, #100]	@ (8002cfc <HAL_MPU_ConfigRegion+0x7c>)
 8002c96:	f023 0301 	bic.w	r3, r3, #1
 8002c9a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002c9c:	4a17      	ldr	r2, [pc, #92]	@ (8002cfc <HAL_MPU_ConfigRegion+0x7c>)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	7b1b      	ldrb	r3, [r3, #12]
 8002ca8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	7adb      	ldrb	r3, [r3, #11]
 8002cae:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002cb0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	7a9b      	ldrb	r3, [r3, #10]
 8002cb6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002cb8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	7b5b      	ldrb	r3, [r3, #13]
 8002cbe:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002cc0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	7b9b      	ldrb	r3, [r3, #14]
 8002cc6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002cc8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	7bdb      	ldrb	r3, [r3, #15]
 8002cce:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002cd0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	7a5b      	ldrb	r3, [r3, #9]
 8002cd6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002cd8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	7a1b      	ldrb	r3, [r3, #8]
 8002cde:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002ce0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	7812      	ldrb	r2, [r2, #0]
 8002ce6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002ce8:	4a04      	ldr	r2, [pc, #16]	@ (8002cfc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002cea:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002cec:	6113      	str	r3, [r2, #16]
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	e000ed90 	.word	0xe000ed90

08002d00 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e069      	b.n	8002de6 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d102      	bne.n	8002d24 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f7fe fade 	bl	80012e0 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2202      	movs	r2, #2
 8002d28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d002      	beq.n	8002d3a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6819      	ldr	r1, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	4b2a      	ldr	r3, [pc, #168]	@ (8002df0 <HAL_DCMI_Init+0xf0>)
 8002d46:	400b      	ands	r3, r1
 8002d48:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6819      	ldr	r1, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685a      	ldr	r2, [r3, #4]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002d5e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8002d6a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8002d76:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7c:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8002d82:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d88:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8002d8e:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	430a      	orrs	r2, r1
 8002d96:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	2b10      	cmp	r3, #16
 8002d9e:	d112      	bne.n	8002dc6 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	7f1b      	ldrb	r3, [r3, #28]
 8002da4:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	7f5b      	ldrb	r3, [r3, #29]
 8002daa:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002dac:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	7f9b      	ldrb	r3, [r3, #30]
 8002db2:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8002db4:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	7fdb      	ldrb	r3, [r3, #31]
 8002dbc:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8002dc2:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8002dc4:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68da      	ldr	r2, [r3, #12]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f042 021e 	orr.w	r2, r2, #30
 8002dd4:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	ffe0f007 	.word	0xffe0f007

08002df4 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b088      	sub	sp, #32
 8002df8:	af02      	add	r7, sp, #8
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
 8002e00:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d101      	bne.n	8002e10 <HAL_DCMI_Start_DMA+0x1c>
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	e0ab      	b.n	8002f68 <HAL_DCMI_Start_DMA+0x174>
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e2e:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f022 0202 	bic.w	r2, r2, #2
 8002e3e:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	6819      	ldr	r1, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e54:	4a46      	ldr	r2, [pc, #280]	@ (8002f70 <HAL_DCMI_Start_DMA+0x17c>)
 8002e56:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e5c:	4a45      	ldr	r2, [pc, #276]	@ (8002f74 <HAL_DCMI_Start_DMA+0x180>)
 8002e5e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e64:	2200      	movs	r2, #0
 8002e66:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	639a      	str	r2, [r3, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	641a      	str	r2, [r3, #64]	@ 0x40
  hdcmi->XferSize = 0;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdcmi->pBuffPtr = 0;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	645a      	str	r2, [r3, #68]	@ 0x44

  if (Length <= 0xFFFFU)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e86:	d219      	bcs.n	8002ebc <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	3328      	adds	r3, #40	@ 0x28
 8002e92:	4619      	mov	r1, r3
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	f000 fdb6 	bl	8003a08 <HAL_DMA_Start_IT>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d055      	beq.n	8002f4e <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2240      	movs	r2, #64	@ 0x40
 8002ea6:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e055      	b.n	8002f68 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ec0:	4a2b      	ldr	r2, [pc, #172]	@ (8002f70 <HAL_DCMI_Start_DMA+0x17c>)
 8002ec2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferSize = Length;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdcmi->pBuffPtr = pData;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8002ed6:	e009      	b.n	8002eec <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002edc:	085a      	lsrs	r2, r3, #1
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee6:	005a      	lsls	r2, r3, #1
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	639a      	str	r2, [r3, #56]	@ 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ef4:	d2f0      	bcs.n	8002ed8 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002efa:	1e9a      	subs	r2, r3, #2
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	4413      	add	r3, r2
 8002f12:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	3328      	adds	r3, #40	@ 0x28
 8002f1e:	4619      	mov	r1, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	f003 f8bd 	bl	80060a8 <HAL_DMAEx_MultiBufferStart_IT>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00c      	beq.n	8002f4e <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2240      	movs	r2, #64	@ 0x40
 8002f38:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e00c      	b.n	8002f68 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f042 0201 	orr.w	r2, r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3718      	adds	r7, #24
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	0800318d 	.word	0x0800318d
 8002f74:	080032b3 	.word	0x080032b3

08002f78 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8002f80:	4b2b      	ldr	r3, [pc, #172]	@ (8003030 <HAL_DCMI_Stop+0xb8>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a2b      	ldr	r2, [pc, #172]	@ (8003034 <HAL_DCMI_Stop+0xbc>)
 8002f86:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8a:	0a5b      	lsrs	r3, r3, #9
 8002f8c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002f90:	fb02 f303 	mul.w	r3, r2, r3
 8002f94:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8002f96:	2300      	movs	r3, #0
 8002f98:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d101      	bne.n	8002fa8 <HAL_DCMI_Stop+0x30>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	e03f      	b.n	8003028 <HAL_DCMI_Stop+0xb0>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 0201 	bic.w	r2, r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d108      	bne.n	8002fe6 <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002fd8:	f043 0220 	orr.w	r2, r3, #32
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	64da      	str	r2, [r3, #76]	@ 0x4c

      status = HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	72fb      	strb	r3, [r7, #11]
      break;
 8002fe4:	e006      	b.n	8002ff4 <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0301 	and.w	r3, r3, #1
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1e9      	bne.n	8002fc8 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003002:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003008:	4618      	mov	r0, r3
 800300a:	f000 ff67 	bl	8003edc <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return status;
 8003026:	7afb      	ldrb	r3, [r7, #11]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	24000004 	.word	0x24000004
 8003034:	10624dd3 	.word	0x10624dd3

08003038 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f003 0304 	and.w	r3, r3, #4
 800304e:	2b00      	cmp	r3, #0
 8003050:	d016      	beq.n	8003080 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2204      	movs	r2, #4
 8003058:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800305e:	f043 0202 	orr.w	r2, r3, #2
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2204      	movs	r2, #4
 800306a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003072:	4a31      	ldr	r2, [pc, #196]	@ (8003138 <HAL_DCMI_IRQHandler+0x100>)
 8003074:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800307a:	4618      	mov	r0, r3
 800307c:	f001 fa4c 	bl	8004518 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d016      	beq.n	80030b8 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2202      	movs	r2, #2
 8003090:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003096:	f043 0201 	orr.w	r2, r3, #1
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2204      	movs	r2, #4
 80030a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030aa:	4a23      	ldr	r2, [pc, #140]	@ (8003138 <HAL_DCMI_IRQHandler+0x100>)
 80030ac:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030b2:	4618      	mov	r0, r3
 80030b4:	f001 fa30 	bl	8004518 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f003 0310 	and.w	r3, r3, #16
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d006      	beq.n	80030d0 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2210      	movs	r2, #16
 80030c8:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f840 	bl	8003150 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d006      	beq.n	80030e8 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2208      	movs	r2, #8
 80030e0:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f83e 	bl	8003164 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d01d      	beq.n	800312e <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	d107      	bne.n	8003110 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68da      	ldr	r2, [r3, #12]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 021e 	bic.w	r2, r2, #30
 800310e:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68da      	ldr	r2, [r3, #12]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 0201 	bic.w	r2, r2, #1
 800311e:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2201      	movs	r2, #1
 8003126:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	f000 f825 	bl	8003178 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 800312e:	bf00      	nop
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	080032b3 	.word	0x080032b3

0800313c <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr

08003178 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003198:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d043      	beq.n	800322a <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031ae:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d118      	bne.n	80031ee <DCMI_DMAXferCplt+0x62>
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d015      	beq.n	80031ee <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031d4:	00da      	lsls	r2, r3, #3
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	4413      	add	r3, r2
 80031da:	2200      	movs	r2, #0
 80031dc:	4619      	mov	r1, r3
 80031de:	f003 fac1 	bl	8006764 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031e6:	1e5a      	subs	r2, r3, #1
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	639a      	str	r2, [r3, #56]	@ 0x38
 80031ec:	e044      	b.n	8003278 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d13c      	bne.n	8003278 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003210:	00da      	lsls	r2, r3, #3
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	4413      	add	r3, r2
 8003216:	2201      	movs	r2, #1
 8003218:	4619      	mov	r1, r3
 800321a:	f003 faa3 	bl	8006764 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003222:	1e5a      	subs	r2, r3, #1
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	639a      	str	r2, [r3, #56]	@ 0x38
 8003228:	e026      	b.n	8003278 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d006      	beq.n	8003248 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003244:	60da      	str	r2, [r3, #12]
 8003246:	e017      	b.n	8003278 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10f      	bne.n	8003278 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800325c:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003262:	0099      	lsls	r1, r3, #2
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68ba      	ldr	r2, [r7, #8]
 800326c:	440a      	add	r2, r1
 800326e:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	639a      	str	r2, [r3, #56]	@ 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003280:	429a      	cmp	r2, r3
 8003282:	d112      	bne.n	80032aa <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68da      	ldr	r2, [r3, #12]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0201 	orr.w	r2, r2, #1
 8003292:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d103      	bne.n	80032aa <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2201      	movs	r2, #1
 80032a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
  }
}
 80032aa:	bf00      	nop
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b084      	sub	sp, #16
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032be:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d009      	beq.n	80032de <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f7ff ff2c 	bl	800313c <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 80032e4:	bf00      	nop
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80032f4:	f7fe fc26 	bl	8001b44 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d101      	bne.n	8003304 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e37d      	b.n	8003a00 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a66      	ldr	r2, [pc, #408]	@ (80034a4 <HAL_DMA_Init+0x1b8>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d04a      	beq.n	80033a4 <HAL_DMA_Init+0xb8>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a65      	ldr	r2, [pc, #404]	@ (80034a8 <HAL_DMA_Init+0x1bc>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d045      	beq.n	80033a4 <HAL_DMA_Init+0xb8>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a63      	ldr	r2, [pc, #396]	@ (80034ac <HAL_DMA_Init+0x1c0>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d040      	beq.n	80033a4 <HAL_DMA_Init+0xb8>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a62      	ldr	r2, [pc, #392]	@ (80034b0 <HAL_DMA_Init+0x1c4>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d03b      	beq.n	80033a4 <HAL_DMA_Init+0xb8>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a60      	ldr	r2, [pc, #384]	@ (80034b4 <HAL_DMA_Init+0x1c8>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d036      	beq.n	80033a4 <HAL_DMA_Init+0xb8>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a5f      	ldr	r2, [pc, #380]	@ (80034b8 <HAL_DMA_Init+0x1cc>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d031      	beq.n	80033a4 <HAL_DMA_Init+0xb8>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a5d      	ldr	r2, [pc, #372]	@ (80034bc <HAL_DMA_Init+0x1d0>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d02c      	beq.n	80033a4 <HAL_DMA_Init+0xb8>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a5c      	ldr	r2, [pc, #368]	@ (80034c0 <HAL_DMA_Init+0x1d4>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d027      	beq.n	80033a4 <HAL_DMA_Init+0xb8>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a5a      	ldr	r2, [pc, #360]	@ (80034c4 <HAL_DMA_Init+0x1d8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d022      	beq.n	80033a4 <HAL_DMA_Init+0xb8>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a59      	ldr	r2, [pc, #356]	@ (80034c8 <HAL_DMA_Init+0x1dc>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d01d      	beq.n	80033a4 <HAL_DMA_Init+0xb8>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a57      	ldr	r2, [pc, #348]	@ (80034cc <HAL_DMA_Init+0x1e0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d018      	beq.n	80033a4 <HAL_DMA_Init+0xb8>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a56      	ldr	r2, [pc, #344]	@ (80034d0 <HAL_DMA_Init+0x1e4>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d013      	beq.n	80033a4 <HAL_DMA_Init+0xb8>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a54      	ldr	r2, [pc, #336]	@ (80034d4 <HAL_DMA_Init+0x1e8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d00e      	beq.n	80033a4 <HAL_DMA_Init+0xb8>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a53      	ldr	r2, [pc, #332]	@ (80034d8 <HAL_DMA_Init+0x1ec>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d009      	beq.n	80033a4 <HAL_DMA_Init+0xb8>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a51      	ldr	r2, [pc, #324]	@ (80034dc <HAL_DMA_Init+0x1f0>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d004      	beq.n	80033a4 <HAL_DMA_Init+0xb8>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a50      	ldr	r2, [pc, #320]	@ (80034e0 <HAL_DMA_Init+0x1f4>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d101      	bne.n	80033a8 <HAL_DMA_Init+0xbc>
 80033a4:	2301      	movs	r3, #1
 80033a6:	e000      	b.n	80033aa <HAL_DMA_Init+0xbe>
 80033a8:	2300      	movs	r3, #0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 813c 	beq.w	8003628 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2202      	movs	r2, #2
 80033b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a37      	ldr	r2, [pc, #220]	@ (80034a4 <HAL_DMA_Init+0x1b8>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d04a      	beq.n	8003460 <HAL_DMA_Init+0x174>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a36      	ldr	r2, [pc, #216]	@ (80034a8 <HAL_DMA_Init+0x1bc>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d045      	beq.n	8003460 <HAL_DMA_Init+0x174>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a34      	ldr	r2, [pc, #208]	@ (80034ac <HAL_DMA_Init+0x1c0>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d040      	beq.n	8003460 <HAL_DMA_Init+0x174>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a33      	ldr	r2, [pc, #204]	@ (80034b0 <HAL_DMA_Init+0x1c4>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d03b      	beq.n	8003460 <HAL_DMA_Init+0x174>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a31      	ldr	r2, [pc, #196]	@ (80034b4 <HAL_DMA_Init+0x1c8>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d036      	beq.n	8003460 <HAL_DMA_Init+0x174>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a30      	ldr	r2, [pc, #192]	@ (80034b8 <HAL_DMA_Init+0x1cc>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d031      	beq.n	8003460 <HAL_DMA_Init+0x174>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a2e      	ldr	r2, [pc, #184]	@ (80034bc <HAL_DMA_Init+0x1d0>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d02c      	beq.n	8003460 <HAL_DMA_Init+0x174>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a2d      	ldr	r2, [pc, #180]	@ (80034c0 <HAL_DMA_Init+0x1d4>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d027      	beq.n	8003460 <HAL_DMA_Init+0x174>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a2b      	ldr	r2, [pc, #172]	@ (80034c4 <HAL_DMA_Init+0x1d8>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d022      	beq.n	8003460 <HAL_DMA_Init+0x174>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a2a      	ldr	r2, [pc, #168]	@ (80034c8 <HAL_DMA_Init+0x1dc>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d01d      	beq.n	8003460 <HAL_DMA_Init+0x174>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a28      	ldr	r2, [pc, #160]	@ (80034cc <HAL_DMA_Init+0x1e0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d018      	beq.n	8003460 <HAL_DMA_Init+0x174>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a27      	ldr	r2, [pc, #156]	@ (80034d0 <HAL_DMA_Init+0x1e4>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d013      	beq.n	8003460 <HAL_DMA_Init+0x174>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a25      	ldr	r2, [pc, #148]	@ (80034d4 <HAL_DMA_Init+0x1e8>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d00e      	beq.n	8003460 <HAL_DMA_Init+0x174>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a24      	ldr	r2, [pc, #144]	@ (80034d8 <HAL_DMA_Init+0x1ec>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d009      	beq.n	8003460 <HAL_DMA_Init+0x174>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a22      	ldr	r2, [pc, #136]	@ (80034dc <HAL_DMA_Init+0x1f0>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d004      	beq.n	8003460 <HAL_DMA_Init+0x174>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a21      	ldr	r2, [pc, #132]	@ (80034e0 <HAL_DMA_Init+0x1f4>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d108      	bne.n	8003472 <HAL_DMA_Init+0x186>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0201 	bic.w	r2, r2, #1
 800346e:	601a      	str	r2, [r3, #0]
 8003470:	e007      	b.n	8003482 <HAL_DMA_Init+0x196>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0201 	bic.w	r2, r2, #1
 8003480:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003482:	e02f      	b.n	80034e4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003484:	f7fe fb5e 	bl	8001b44 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b05      	cmp	r3, #5
 8003490:	d928      	bls.n	80034e4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2220      	movs	r2, #32
 8003496:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2203      	movs	r2, #3
 800349c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e2ad      	b.n	8003a00 <HAL_DMA_Init+0x714>
 80034a4:	40020010 	.word	0x40020010
 80034a8:	40020028 	.word	0x40020028
 80034ac:	40020040 	.word	0x40020040
 80034b0:	40020058 	.word	0x40020058
 80034b4:	40020070 	.word	0x40020070
 80034b8:	40020088 	.word	0x40020088
 80034bc:	400200a0 	.word	0x400200a0
 80034c0:	400200b8 	.word	0x400200b8
 80034c4:	40020410 	.word	0x40020410
 80034c8:	40020428 	.word	0x40020428
 80034cc:	40020440 	.word	0x40020440
 80034d0:	40020458 	.word	0x40020458
 80034d4:	40020470 	.word	0x40020470
 80034d8:	40020488 	.word	0x40020488
 80034dc:	400204a0 	.word	0x400204a0
 80034e0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1c8      	bne.n	8003484 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	4b73      	ldr	r3, [pc, #460]	@ (80036cc <HAL_DMA_Init+0x3e0>)
 80034fe:	4013      	ands	r3, r2
 8003500:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800350a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003516:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003522:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	4313      	orrs	r3, r2
 800352e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003534:	2b04      	cmp	r3, #4
 8003536:	d107      	bne.n	8003548 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003540:	4313      	orrs	r3, r2
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	4313      	orrs	r3, r2
 8003546:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	2b28      	cmp	r3, #40	@ 0x28
 800354e:	d903      	bls.n	8003558 <HAL_DMA_Init+0x26c>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	2b2e      	cmp	r3, #46	@ 0x2e
 8003556:	d91f      	bls.n	8003598 <HAL_DMA_Init+0x2ac>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	2b3e      	cmp	r3, #62	@ 0x3e
 800355e:	d903      	bls.n	8003568 <HAL_DMA_Init+0x27c>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	2b42      	cmp	r3, #66	@ 0x42
 8003566:	d917      	bls.n	8003598 <HAL_DMA_Init+0x2ac>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	2b46      	cmp	r3, #70	@ 0x46
 800356e:	d903      	bls.n	8003578 <HAL_DMA_Init+0x28c>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2b48      	cmp	r3, #72	@ 0x48
 8003576:	d90f      	bls.n	8003598 <HAL_DMA_Init+0x2ac>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	2b4e      	cmp	r3, #78	@ 0x4e
 800357e:	d903      	bls.n	8003588 <HAL_DMA_Init+0x29c>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2b52      	cmp	r3, #82	@ 0x52
 8003586:	d907      	bls.n	8003598 <HAL_DMA_Init+0x2ac>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	2b73      	cmp	r3, #115	@ 0x73
 800358e:	d905      	bls.n	800359c <HAL_DMA_Init+0x2b0>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2b77      	cmp	r3, #119	@ 0x77
 8003596:	d801      	bhi.n	800359c <HAL_DMA_Init+0x2b0>
 8003598:	2301      	movs	r3, #1
 800359a:	e000      	b.n	800359e <HAL_DMA_Init+0x2b2>
 800359c:	2300      	movs	r3, #0
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035a8:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	697a      	ldr	r2, [r7, #20]
 80035b0:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f023 0307 	bic.w	r3, r3, #7
 80035c0:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d0:	2b04      	cmp	r3, #4
 80035d2:	d117      	bne.n	8003604 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	4313      	orrs	r3, r2
 80035dc:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d00e      	beq.n	8003604 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f002 fbd4 	bl	8005d94 <DMA_CheckFifoParam>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d008      	beq.n	8003604 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2240      	movs	r2, #64	@ 0x40
 80035f6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e1fd      	b.n	8003a00 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f002 fb0f 	bl	8005c30 <DMA_CalcBaseAndBitshift>
 8003612:	4603      	mov	r3, r0
 8003614:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800361a:	f003 031f 	and.w	r3, r3, #31
 800361e:	223f      	movs	r2, #63	@ 0x3f
 8003620:	409a      	lsls	r2, r3
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	609a      	str	r2, [r3, #8]
 8003626:	e0fd      	b.n	8003824 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a28      	ldr	r2, [pc, #160]	@ (80036d0 <HAL_DMA_Init+0x3e4>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d04a      	beq.n	80036c8 <HAL_DMA_Init+0x3dc>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a27      	ldr	r2, [pc, #156]	@ (80036d4 <HAL_DMA_Init+0x3e8>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d045      	beq.n	80036c8 <HAL_DMA_Init+0x3dc>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a25      	ldr	r2, [pc, #148]	@ (80036d8 <HAL_DMA_Init+0x3ec>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d040      	beq.n	80036c8 <HAL_DMA_Init+0x3dc>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a24      	ldr	r2, [pc, #144]	@ (80036dc <HAL_DMA_Init+0x3f0>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d03b      	beq.n	80036c8 <HAL_DMA_Init+0x3dc>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a22      	ldr	r2, [pc, #136]	@ (80036e0 <HAL_DMA_Init+0x3f4>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d036      	beq.n	80036c8 <HAL_DMA_Init+0x3dc>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a21      	ldr	r2, [pc, #132]	@ (80036e4 <HAL_DMA_Init+0x3f8>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d031      	beq.n	80036c8 <HAL_DMA_Init+0x3dc>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a1f      	ldr	r2, [pc, #124]	@ (80036e8 <HAL_DMA_Init+0x3fc>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d02c      	beq.n	80036c8 <HAL_DMA_Init+0x3dc>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a1e      	ldr	r2, [pc, #120]	@ (80036ec <HAL_DMA_Init+0x400>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d027      	beq.n	80036c8 <HAL_DMA_Init+0x3dc>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a1c      	ldr	r2, [pc, #112]	@ (80036f0 <HAL_DMA_Init+0x404>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d022      	beq.n	80036c8 <HAL_DMA_Init+0x3dc>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a1b      	ldr	r2, [pc, #108]	@ (80036f4 <HAL_DMA_Init+0x408>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d01d      	beq.n	80036c8 <HAL_DMA_Init+0x3dc>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a19      	ldr	r2, [pc, #100]	@ (80036f8 <HAL_DMA_Init+0x40c>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d018      	beq.n	80036c8 <HAL_DMA_Init+0x3dc>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a18      	ldr	r2, [pc, #96]	@ (80036fc <HAL_DMA_Init+0x410>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d013      	beq.n	80036c8 <HAL_DMA_Init+0x3dc>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a16      	ldr	r2, [pc, #88]	@ (8003700 <HAL_DMA_Init+0x414>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d00e      	beq.n	80036c8 <HAL_DMA_Init+0x3dc>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a15      	ldr	r2, [pc, #84]	@ (8003704 <HAL_DMA_Init+0x418>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d009      	beq.n	80036c8 <HAL_DMA_Init+0x3dc>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a13      	ldr	r2, [pc, #76]	@ (8003708 <HAL_DMA_Init+0x41c>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d004      	beq.n	80036c8 <HAL_DMA_Init+0x3dc>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a12      	ldr	r2, [pc, #72]	@ (800370c <HAL_DMA_Init+0x420>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d123      	bne.n	8003710 <HAL_DMA_Init+0x424>
 80036c8:	2301      	movs	r3, #1
 80036ca:	e022      	b.n	8003712 <HAL_DMA_Init+0x426>
 80036cc:	fe10803f 	.word	0xfe10803f
 80036d0:	48022c08 	.word	0x48022c08
 80036d4:	48022c1c 	.word	0x48022c1c
 80036d8:	48022c30 	.word	0x48022c30
 80036dc:	48022c44 	.word	0x48022c44
 80036e0:	48022c58 	.word	0x48022c58
 80036e4:	48022c6c 	.word	0x48022c6c
 80036e8:	48022c80 	.word	0x48022c80
 80036ec:	48022c94 	.word	0x48022c94
 80036f0:	58025408 	.word	0x58025408
 80036f4:	5802541c 	.word	0x5802541c
 80036f8:	58025430 	.word	0x58025430
 80036fc:	58025444 	.word	0x58025444
 8003700:	58025458 	.word	0x58025458
 8003704:	5802546c 	.word	0x5802546c
 8003708:	58025480 	.word	0x58025480
 800370c:	58025494 	.word	0x58025494
 8003710:	2300      	movs	r3, #0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d07d      	beq.n	8003812 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a7f      	ldr	r2, [pc, #508]	@ (8003918 <HAL_DMA_Init+0x62c>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d021      	beq.n	8003764 <HAL_DMA_Init+0x478>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a7d      	ldr	r2, [pc, #500]	@ (800391c <HAL_DMA_Init+0x630>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d01c      	beq.n	8003764 <HAL_DMA_Init+0x478>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a7c      	ldr	r2, [pc, #496]	@ (8003920 <HAL_DMA_Init+0x634>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d017      	beq.n	8003764 <HAL_DMA_Init+0x478>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a7a      	ldr	r2, [pc, #488]	@ (8003924 <HAL_DMA_Init+0x638>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d012      	beq.n	8003764 <HAL_DMA_Init+0x478>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a79      	ldr	r2, [pc, #484]	@ (8003928 <HAL_DMA_Init+0x63c>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d00d      	beq.n	8003764 <HAL_DMA_Init+0x478>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a77      	ldr	r2, [pc, #476]	@ (800392c <HAL_DMA_Init+0x640>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d008      	beq.n	8003764 <HAL_DMA_Init+0x478>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a76      	ldr	r2, [pc, #472]	@ (8003930 <HAL_DMA_Init+0x644>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d003      	beq.n	8003764 <HAL_DMA_Init+0x478>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a74      	ldr	r2, [pc, #464]	@ (8003934 <HAL_DMA_Init+0x648>)
 8003762:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2202      	movs	r2, #2
 8003768:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	4b6e      	ldr	r3, [pc, #440]	@ (8003938 <HAL_DMA_Init+0x64c>)
 8003780:	4013      	ands	r3, r2
 8003782:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	2b40      	cmp	r3, #64	@ 0x40
 800378a:	d008      	beq.n	800379e <HAL_DMA_Init+0x4b2>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	2b80      	cmp	r3, #128	@ 0x80
 8003792:	d102      	bne.n	800379a <HAL_DMA_Init+0x4ae>
 8003794:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003798:	e002      	b.n	80037a0 <HAL_DMA_Init+0x4b4>
 800379a:	2300      	movs	r3, #0
 800379c:	e000      	b.n	80037a0 <HAL_DMA_Init+0x4b4>
 800379e:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	68d2      	ldr	r2, [r2, #12]
 80037a4:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80037a6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80037ae:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80037b6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80037be:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	69db      	ldr	r3, [r3, #28]
 80037c4:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80037c6:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80037ce:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	461a      	mov	r2, r3
 80037e4:	4b55      	ldr	r3, [pc, #340]	@ (800393c <HAL_DMA_Init+0x650>)
 80037e6:	4413      	add	r3, r2
 80037e8:	4a55      	ldr	r2, [pc, #340]	@ (8003940 <HAL_DMA_Init+0x654>)
 80037ea:	fba2 2303 	umull	r2, r3, r2, r3
 80037ee:	091b      	lsrs	r3, r3, #4
 80037f0:	009a      	lsls	r2, r3, #2
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f002 fa1a 	bl	8005c30 <DMA_CalcBaseAndBitshift>
 80037fc:	4603      	mov	r3, r0
 80037fe:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003804:	f003 031f 	and.w	r3, r3, #31
 8003808:	2201      	movs	r2, #1
 800380a:	409a      	lsls	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	605a      	str	r2, [r3, #4]
 8003810:	e008      	b.n	8003824 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2240      	movs	r2, #64	@ 0x40
 8003816:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2203      	movs	r2, #3
 800381c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e0ed      	b.n	8003a00 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a46      	ldr	r2, [pc, #280]	@ (8003944 <HAL_DMA_Init+0x658>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d072      	beq.n	8003914 <HAL_DMA_Init+0x628>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a45      	ldr	r2, [pc, #276]	@ (8003948 <HAL_DMA_Init+0x65c>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d06d      	beq.n	8003914 <HAL_DMA_Init+0x628>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a43      	ldr	r2, [pc, #268]	@ (800394c <HAL_DMA_Init+0x660>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d068      	beq.n	8003914 <HAL_DMA_Init+0x628>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a42      	ldr	r2, [pc, #264]	@ (8003950 <HAL_DMA_Init+0x664>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d063      	beq.n	8003914 <HAL_DMA_Init+0x628>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a40      	ldr	r2, [pc, #256]	@ (8003954 <HAL_DMA_Init+0x668>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d05e      	beq.n	8003914 <HAL_DMA_Init+0x628>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a3f      	ldr	r2, [pc, #252]	@ (8003958 <HAL_DMA_Init+0x66c>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d059      	beq.n	8003914 <HAL_DMA_Init+0x628>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a3d      	ldr	r2, [pc, #244]	@ (800395c <HAL_DMA_Init+0x670>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d054      	beq.n	8003914 <HAL_DMA_Init+0x628>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a3c      	ldr	r2, [pc, #240]	@ (8003960 <HAL_DMA_Init+0x674>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d04f      	beq.n	8003914 <HAL_DMA_Init+0x628>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a3a      	ldr	r2, [pc, #232]	@ (8003964 <HAL_DMA_Init+0x678>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d04a      	beq.n	8003914 <HAL_DMA_Init+0x628>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a39      	ldr	r2, [pc, #228]	@ (8003968 <HAL_DMA_Init+0x67c>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d045      	beq.n	8003914 <HAL_DMA_Init+0x628>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a37      	ldr	r2, [pc, #220]	@ (800396c <HAL_DMA_Init+0x680>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d040      	beq.n	8003914 <HAL_DMA_Init+0x628>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a36      	ldr	r2, [pc, #216]	@ (8003970 <HAL_DMA_Init+0x684>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d03b      	beq.n	8003914 <HAL_DMA_Init+0x628>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a34      	ldr	r2, [pc, #208]	@ (8003974 <HAL_DMA_Init+0x688>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d036      	beq.n	8003914 <HAL_DMA_Init+0x628>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a33      	ldr	r2, [pc, #204]	@ (8003978 <HAL_DMA_Init+0x68c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d031      	beq.n	8003914 <HAL_DMA_Init+0x628>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a31      	ldr	r2, [pc, #196]	@ (800397c <HAL_DMA_Init+0x690>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d02c      	beq.n	8003914 <HAL_DMA_Init+0x628>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a30      	ldr	r2, [pc, #192]	@ (8003980 <HAL_DMA_Init+0x694>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d027      	beq.n	8003914 <HAL_DMA_Init+0x628>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a13      	ldr	r2, [pc, #76]	@ (8003918 <HAL_DMA_Init+0x62c>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d022      	beq.n	8003914 <HAL_DMA_Init+0x628>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a12      	ldr	r2, [pc, #72]	@ (800391c <HAL_DMA_Init+0x630>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d01d      	beq.n	8003914 <HAL_DMA_Init+0x628>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a10      	ldr	r2, [pc, #64]	@ (8003920 <HAL_DMA_Init+0x634>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d018      	beq.n	8003914 <HAL_DMA_Init+0x628>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a0f      	ldr	r2, [pc, #60]	@ (8003924 <HAL_DMA_Init+0x638>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d013      	beq.n	8003914 <HAL_DMA_Init+0x628>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003928 <HAL_DMA_Init+0x63c>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d00e      	beq.n	8003914 <HAL_DMA_Init+0x628>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a0c      	ldr	r2, [pc, #48]	@ (800392c <HAL_DMA_Init+0x640>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d009      	beq.n	8003914 <HAL_DMA_Init+0x628>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a0a      	ldr	r2, [pc, #40]	@ (8003930 <HAL_DMA_Init+0x644>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d004      	beq.n	8003914 <HAL_DMA_Init+0x628>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a09      	ldr	r2, [pc, #36]	@ (8003934 <HAL_DMA_Init+0x648>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d137      	bne.n	8003984 <HAL_DMA_Init+0x698>
 8003914:	2301      	movs	r3, #1
 8003916:	e036      	b.n	8003986 <HAL_DMA_Init+0x69a>
 8003918:	58025408 	.word	0x58025408
 800391c:	5802541c 	.word	0x5802541c
 8003920:	58025430 	.word	0x58025430
 8003924:	58025444 	.word	0x58025444
 8003928:	58025458 	.word	0x58025458
 800392c:	5802546c 	.word	0x5802546c
 8003930:	58025480 	.word	0x58025480
 8003934:	58025494 	.word	0x58025494
 8003938:	fffe000f 	.word	0xfffe000f
 800393c:	a7fdabf8 	.word	0xa7fdabf8
 8003940:	cccccccd 	.word	0xcccccccd
 8003944:	40020010 	.word	0x40020010
 8003948:	40020028 	.word	0x40020028
 800394c:	40020040 	.word	0x40020040
 8003950:	40020058 	.word	0x40020058
 8003954:	40020070 	.word	0x40020070
 8003958:	40020088 	.word	0x40020088
 800395c:	400200a0 	.word	0x400200a0
 8003960:	400200b8 	.word	0x400200b8
 8003964:	40020410 	.word	0x40020410
 8003968:	40020428 	.word	0x40020428
 800396c:	40020440 	.word	0x40020440
 8003970:	40020458 	.word	0x40020458
 8003974:	40020470 	.word	0x40020470
 8003978:	40020488 	.word	0x40020488
 800397c:	400204a0 	.word	0x400204a0
 8003980:	400204b8 	.word	0x400204b8
 8003984:	2300      	movs	r3, #0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d032      	beq.n	80039f0 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f002 fa7e 	bl	8005e8c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	2b80      	cmp	r3, #128	@ 0x80
 8003996:	d102      	bne.n	800399e <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685a      	ldr	r2, [r3, #4]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039a6:	b2d2      	uxtb	r2, r2
 80039a8:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80039b2:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d010      	beq.n	80039de <HAL_DMA_Init+0x6f2>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d80c      	bhi.n	80039de <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f002 fafb 	bl	8005fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039ce:	2200      	movs	r2, #0
 80039d0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80039da:	605a      	str	r2, [r3, #4]
 80039dc:	e008      	b.n	80039f0 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3718      	adds	r7, #24
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
 8003a14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a16:	2300      	movs	r3, #0
 8003a18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d101      	bne.n	8003a24 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e226      	b.n	8003e72 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d101      	bne.n	8003a32 <HAL_DMA_Start_IT+0x2a>
 8003a2e:	2302      	movs	r3, #2
 8003a30:	e21f      	b.n	8003e72 <HAL_DMA_Start_IT+0x46a>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a40:	b2db      	uxtb	r3, r3
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	f040 820a 	bne.w	8003e5c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2202      	movs	r2, #2
 8003a4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a68      	ldr	r2, [pc, #416]	@ (8003bfc <HAL_DMA_Start_IT+0x1f4>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d04a      	beq.n	8003af6 <HAL_DMA_Start_IT+0xee>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a66      	ldr	r2, [pc, #408]	@ (8003c00 <HAL_DMA_Start_IT+0x1f8>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d045      	beq.n	8003af6 <HAL_DMA_Start_IT+0xee>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a65      	ldr	r2, [pc, #404]	@ (8003c04 <HAL_DMA_Start_IT+0x1fc>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d040      	beq.n	8003af6 <HAL_DMA_Start_IT+0xee>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a63      	ldr	r2, [pc, #396]	@ (8003c08 <HAL_DMA_Start_IT+0x200>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d03b      	beq.n	8003af6 <HAL_DMA_Start_IT+0xee>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a62      	ldr	r2, [pc, #392]	@ (8003c0c <HAL_DMA_Start_IT+0x204>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d036      	beq.n	8003af6 <HAL_DMA_Start_IT+0xee>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a60      	ldr	r2, [pc, #384]	@ (8003c10 <HAL_DMA_Start_IT+0x208>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d031      	beq.n	8003af6 <HAL_DMA_Start_IT+0xee>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a5f      	ldr	r2, [pc, #380]	@ (8003c14 <HAL_DMA_Start_IT+0x20c>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d02c      	beq.n	8003af6 <HAL_DMA_Start_IT+0xee>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a5d      	ldr	r2, [pc, #372]	@ (8003c18 <HAL_DMA_Start_IT+0x210>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d027      	beq.n	8003af6 <HAL_DMA_Start_IT+0xee>
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a5c      	ldr	r2, [pc, #368]	@ (8003c1c <HAL_DMA_Start_IT+0x214>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d022      	beq.n	8003af6 <HAL_DMA_Start_IT+0xee>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a5a      	ldr	r2, [pc, #360]	@ (8003c20 <HAL_DMA_Start_IT+0x218>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d01d      	beq.n	8003af6 <HAL_DMA_Start_IT+0xee>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a59      	ldr	r2, [pc, #356]	@ (8003c24 <HAL_DMA_Start_IT+0x21c>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d018      	beq.n	8003af6 <HAL_DMA_Start_IT+0xee>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a57      	ldr	r2, [pc, #348]	@ (8003c28 <HAL_DMA_Start_IT+0x220>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d013      	beq.n	8003af6 <HAL_DMA_Start_IT+0xee>
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a56      	ldr	r2, [pc, #344]	@ (8003c2c <HAL_DMA_Start_IT+0x224>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d00e      	beq.n	8003af6 <HAL_DMA_Start_IT+0xee>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a54      	ldr	r2, [pc, #336]	@ (8003c30 <HAL_DMA_Start_IT+0x228>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d009      	beq.n	8003af6 <HAL_DMA_Start_IT+0xee>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a53      	ldr	r2, [pc, #332]	@ (8003c34 <HAL_DMA_Start_IT+0x22c>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d004      	beq.n	8003af6 <HAL_DMA_Start_IT+0xee>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a51      	ldr	r2, [pc, #324]	@ (8003c38 <HAL_DMA_Start_IT+0x230>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d108      	bne.n	8003b08 <HAL_DMA_Start_IT+0x100>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f022 0201 	bic.w	r2, r2, #1
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	e007      	b.n	8003b18 <HAL_DMA_Start_IT+0x110>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f022 0201 	bic.w	r2, r2, #1
 8003b16:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	68b9      	ldr	r1, [r7, #8]
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f001 fea2 	bl	8005868 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a34      	ldr	r2, [pc, #208]	@ (8003bfc <HAL_DMA_Start_IT+0x1f4>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d04a      	beq.n	8003bc4 <HAL_DMA_Start_IT+0x1bc>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a33      	ldr	r2, [pc, #204]	@ (8003c00 <HAL_DMA_Start_IT+0x1f8>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d045      	beq.n	8003bc4 <HAL_DMA_Start_IT+0x1bc>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a31      	ldr	r2, [pc, #196]	@ (8003c04 <HAL_DMA_Start_IT+0x1fc>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d040      	beq.n	8003bc4 <HAL_DMA_Start_IT+0x1bc>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a30      	ldr	r2, [pc, #192]	@ (8003c08 <HAL_DMA_Start_IT+0x200>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d03b      	beq.n	8003bc4 <HAL_DMA_Start_IT+0x1bc>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a2e      	ldr	r2, [pc, #184]	@ (8003c0c <HAL_DMA_Start_IT+0x204>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d036      	beq.n	8003bc4 <HAL_DMA_Start_IT+0x1bc>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a2d      	ldr	r2, [pc, #180]	@ (8003c10 <HAL_DMA_Start_IT+0x208>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d031      	beq.n	8003bc4 <HAL_DMA_Start_IT+0x1bc>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a2b      	ldr	r2, [pc, #172]	@ (8003c14 <HAL_DMA_Start_IT+0x20c>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d02c      	beq.n	8003bc4 <HAL_DMA_Start_IT+0x1bc>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a2a      	ldr	r2, [pc, #168]	@ (8003c18 <HAL_DMA_Start_IT+0x210>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d027      	beq.n	8003bc4 <HAL_DMA_Start_IT+0x1bc>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a28      	ldr	r2, [pc, #160]	@ (8003c1c <HAL_DMA_Start_IT+0x214>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d022      	beq.n	8003bc4 <HAL_DMA_Start_IT+0x1bc>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a27      	ldr	r2, [pc, #156]	@ (8003c20 <HAL_DMA_Start_IT+0x218>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d01d      	beq.n	8003bc4 <HAL_DMA_Start_IT+0x1bc>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a25      	ldr	r2, [pc, #148]	@ (8003c24 <HAL_DMA_Start_IT+0x21c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d018      	beq.n	8003bc4 <HAL_DMA_Start_IT+0x1bc>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a24      	ldr	r2, [pc, #144]	@ (8003c28 <HAL_DMA_Start_IT+0x220>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d013      	beq.n	8003bc4 <HAL_DMA_Start_IT+0x1bc>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a22      	ldr	r2, [pc, #136]	@ (8003c2c <HAL_DMA_Start_IT+0x224>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d00e      	beq.n	8003bc4 <HAL_DMA_Start_IT+0x1bc>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a21      	ldr	r2, [pc, #132]	@ (8003c30 <HAL_DMA_Start_IT+0x228>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d009      	beq.n	8003bc4 <HAL_DMA_Start_IT+0x1bc>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a1f      	ldr	r2, [pc, #124]	@ (8003c34 <HAL_DMA_Start_IT+0x22c>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d004      	beq.n	8003bc4 <HAL_DMA_Start_IT+0x1bc>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a1e      	ldr	r2, [pc, #120]	@ (8003c38 <HAL_DMA_Start_IT+0x230>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d101      	bne.n	8003bc8 <HAL_DMA_Start_IT+0x1c0>
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e000      	b.n	8003bca <HAL_DMA_Start_IT+0x1c2>
 8003bc8:	2300      	movs	r3, #0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d036      	beq.n	8003c3c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f023 021e 	bic.w	r2, r3, #30
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f042 0216 	orr.w	r2, r2, #22
 8003be0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d03e      	beq.n	8003c68 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f042 0208 	orr.w	r2, r2, #8
 8003bf8:	601a      	str	r2, [r3, #0]
 8003bfa:	e035      	b.n	8003c68 <HAL_DMA_Start_IT+0x260>
 8003bfc:	40020010 	.word	0x40020010
 8003c00:	40020028 	.word	0x40020028
 8003c04:	40020040 	.word	0x40020040
 8003c08:	40020058 	.word	0x40020058
 8003c0c:	40020070 	.word	0x40020070
 8003c10:	40020088 	.word	0x40020088
 8003c14:	400200a0 	.word	0x400200a0
 8003c18:	400200b8 	.word	0x400200b8
 8003c1c:	40020410 	.word	0x40020410
 8003c20:	40020428 	.word	0x40020428
 8003c24:	40020440 	.word	0x40020440
 8003c28:	40020458 	.word	0x40020458
 8003c2c:	40020470 	.word	0x40020470
 8003c30:	40020488 	.word	0x40020488
 8003c34:	400204a0 	.word	0x400204a0
 8003c38:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f023 020e 	bic.w	r2, r3, #14
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f042 020a 	orr.w	r2, r2, #10
 8003c4e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d007      	beq.n	8003c68 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0204 	orr.w	r2, r2, #4
 8003c66:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a83      	ldr	r2, [pc, #524]	@ (8003e7c <HAL_DMA_Start_IT+0x474>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d072      	beq.n	8003d58 <HAL_DMA_Start_IT+0x350>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a82      	ldr	r2, [pc, #520]	@ (8003e80 <HAL_DMA_Start_IT+0x478>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d06d      	beq.n	8003d58 <HAL_DMA_Start_IT+0x350>
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a80      	ldr	r2, [pc, #512]	@ (8003e84 <HAL_DMA_Start_IT+0x47c>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d068      	beq.n	8003d58 <HAL_DMA_Start_IT+0x350>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a7f      	ldr	r2, [pc, #508]	@ (8003e88 <HAL_DMA_Start_IT+0x480>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d063      	beq.n	8003d58 <HAL_DMA_Start_IT+0x350>
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a7d      	ldr	r2, [pc, #500]	@ (8003e8c <HAL_DMA_Start_IT+0x484>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d05e      	beq.n	8003d58 <HAL_DMA_Start_IT+0x350>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a7c      	ldr	r2, [pc, #496]	@ (8003e90 <HAL_DMA_Start_IT+0x488>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d059      	beq.n	8003d58 <HAL_DMA_Start_IT+0x350>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a7a      	ldr	r2, [pc, #488]	@ (8003e94 <HAL_DMA_Start_IT+0x48c>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d054      	beq.n	8003d58 <HAL_DMA_Start_IT+0x350>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a79      	ldr	r2, [pc, #484]	@ (8003e98 <HAL_DMA_Start_IT+0x490>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d04f      	beq.n	8003d58 <HAL_DMA_Start_IT+0x350>
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a77      	ldr	r2, [pc, #476]	@ (8003e9c <HAL_DMA_Start_IT+0x494>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d04a      	beq.n	8003d58 <HAL_DMA_Start_IT+0x350>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a76      	ldr	r2, [pc, #472]	@ (8003ea0 <HAL_DMA_Start_IT+0x498>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d045      	beq.n	8003d58 <HAL_DMA_Start_IT+0x350>
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a74      	ldr	r2, [pc, #464]	@ (8003ea4 <HAL_DMA_Start_IT+0x49c>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d040      	beq.n	8003d58 <HAL_DMA_Start_IT+0x350>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a73      	ldr	r2, [pc, #460]	@ (8003ea8 <HAL_DMA_Start_IT+0x4a0>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d03b      	beq.n	8003d58 <HAL_DMA_Start_IT+0x350>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a71      	ldr	r2, [pc, #452]	@ (8003eac <HAL_DMA_Start_IT+0x4a4>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d036      	beq.n	8003d58 <HAL_DMA_Start_IT+0x350>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a70      	ldr	r2, [pc, #448]	@ (8003eb0 <HAL_DMA_Start_IT+0x4a8>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d031      	beq.n	8003d58 <HAL_DMA_Start_IT+0x350>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a6e      	ldr	r2, [pc, #440]	@ (8003eb4 <HAL_DMA_Start_IT+0x4ac>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d02c      	beq.n	8003d58 <HAL_DMA_Start_IT+0x350>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a6d      	ldr	r2, [pc, #436]	@ (8003eb8 <HAL_DMA_Start_IT+0x4b0>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d027      	beq.n	8003d58 <HAL_DMA_Start_IT+0x350>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a6b      	ldr	r2, [pc, #428]	@ (8003ebc <HAL_DMA_Start_IT+0x4b4>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d022      	beq.n	8003d58 <HAL_DMA_Start_IT+0x350>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a6a      	ldr	r2, [pc, #424]	@ (8003ec0 <HAL_DMA_Start_IT+0x4b8>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d01d      	beq.n	8003d58 <HAL_DMA_Start_IT+0x350>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a68      	ldr	r2, [pc, #416]	@ (8003ec4 <HAL_DMA_Start_IT+0x4bc>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d018      	beq.n	8003d58 <HAL_DMA_Start_IT+0x350>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a67      	ldr	r2, [pc, #412]	@ (8003ec8 <HAL_DMA_Start_IT+0x4c0>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d013      	beq.n	8003d58 <HAL_DMA_Start_IT+0x350>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a65      	ldr	r2, [pc, #404]	@ (8003ecc <HAL_DMA_Start_IT+0x4c4>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d00e      	beq.n	8003d58 <HAL_DMA_Start_IT+0x350>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a64      	ldr	r2, [pc, #400]	@ (8003ed0 <HAL_DMA_Start_IT+0x4c8>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d009      	beq.n	8003d58 <HAL_DMA_Start_IT+0x350>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a62      	ldr	r2, [pc, #392]	@ (8003ed4 <HAL_DMA_Start_IT+0x4cc>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d004      	beq.n	8003d58 <HAL_DMA_Start_IT+0x350>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a61      	ldr	r2, [pc, #388]	@ (8003ed8 <HAL_DMA_Start_IT+0x4d0>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d101      	bne.n	8003d5c <HAL_DMA_Start_IT+0x354>
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e000      	b.n	8003d5e <HAL_DMA_Start_IT+0x356>
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d01a      	beq.n	8003d98 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d007      	beq.n	8003d80 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d7e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d007      	beq.n	8003d98 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d92:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d96:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a37      	ldr	r2, [pc, #220]	@ (8003e7c <HAL_DMA_Start_IT+0x474>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d04a      	beq.n	8003e38 <HAL_DMA_Start_IT+0x430>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a36      	ldr	r2, [pc, #216]	@ (8003e80 <HAL_DMA_Start_IT+0x478>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d045      	beq.n	8003e38 <HAL_DMA_Start_IT+0x430>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a34      	ldr	r2, [pc, #208]	@ (8003e84 <HAL_DMA_Start_IT+0x47c>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d040      	beq.n	8003e38 <HAL_DMA_Start_IT+0x430>
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a33      	ldr	r2, [pc, #204]	@ (8003e88 <HAL_DMA_Start_IT+0x480>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d03b      	beq.n	8003e38 <HAL_DMA_Start_IT+0x430>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a31      	ldr	r2, [pc, #196]	@ (8003e8c <HAL_DMA_Start_IT+0x484>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d036      	beq.n	8003e38 <HAL_DMA_Start_IT+0x430>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a30      	ldr	r2, [pc, #192]	@ (8003e90 <HAL_DMA_Start_IT+0x488>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d031      	beq.n	8003e38 <HAL_DMA_Start_IT+0x430>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a2e      	ldr	r2, [pc, #184]	@ (8003e94 <HAL_DMA_Start_IT+0x48c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d02c      	beq.n	8003e38 <HAL_DMA_Start_IT+0x430>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a2d      	ldr	r2, [pc, #180]	@ (8003e98 <HAL_DMA_Start_IT+0x490>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d027      	beq.n	8003e38 <HAL_DMA_Start_IT+0x430>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a2b      	ldr	r2, [pc, #172]	@ (8003e9c <HAL_DMA_Start_IT+0x494>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d022      	beq.n	8003e38 <HAL_DMA_Start_IT+0x430>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a2a      	ldr	r2, [pc, #168]	@ (8003ea0 <HAL_DMA_Start_IT+0x498>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d01d      	beq.n	8003e38 <HAL_DMA_Start_IT+0x430>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a28      	ldr	r2, [pc, #160]	@ (8003ea4 <HAL_DMA_Start_IT+0x49c>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d018      	beq.n	8003e38 <HAL_DMA_Start_IT+0x430>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a27      	ldr	r2, [pc, #156]	@ (8003ea8 <HAL_DMA_Start_IT+0x4a0>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d013      	beq.n	8003e38 <HAL_DMA_Start_IT+0x430>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a25      	ldr	r2, [pc, #148]	@ (8003eac <HAL_DMA_Start_IT+0x4a4>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d00e      	beq.n	8003e38 <HAL_DMA_Start_IT+0x430>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a24      	ldr	r2, [pc, #144]	@ (8003eb0 <HAL_DMA_Start_IT+0x4a8>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d009      	beq.n	8003e38 <HAL_DMA_Start_IT+0x430>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a22      	ldr	r2, [pc, #136]	@ (8003eb4 <HAL_DMA_Start_IT+0x4ac>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d004      	beq.n	8003e38 <HAL_DMA_Start_IT+0x430>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a21      	ldr	r2, [pc, #132]	@ (8003eb8 <HAL_DMA_Start_IT+0x4b0>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d108      	bne.n	8003e4a <HAL_DMA_Start_IT+0x442>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0201 	orr.w	r2, r2, #1
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	e012      	b.n	8003e70 <HAL_DMA_Start_IT+0x468>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f042 0201 	orr.w	r2, r2, #1
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	e009      	b.n	8003e70 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003e62:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003e70:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3718      	adds	r7, #24
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	40020010 	.word	0x40020010
 8003e80:	40020028 	.word	0x40020028
 8003e84:	40020040 	.word	0x40020040
 8003e88:	40020058 	.word	0x40020058
 8003e8c:	40020070 	.word	0x40020070
 8003e90:	40020088 	.word	0x40020088
 8003e94:	400200a0 	.word	0x400200a0
 8003e98:	400200b8 	.word	0x400200b8
 8003e9c:	40020410 	.word	0x40020410
 8003ea0:	40020428 	.word	0x40020428
 8003ea4:	40020440 	.word	0x40020440
 8003ea8:	40020458 	.word	0x40020458
 8003eac:	40020470 	.word	0x40020470
 8003eb0:	40020488 	.word	0x40020488
 8003eb4:	400204a0 	.word	0x400204a0
 8003eb8:	400204b8 	.word	0x400204b8
 8003ebc:	58025408 	.word	0x58025408
 8003ec0:	5802541c 	.word	0x5802541c
 8003ec4:	58025430 	.word	0x58025430
 8003ec8:	58025444 	.word	0x58025444
 8003ecc:	58025458 	.word	0x58025458
 8003ed0:	5802546c 	.word	0x5802546c
 8003ed4:	58025480 	.word	0x58025480
 8003ed8:	58025494 	.word	0x58025494

08003edc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003ee4:	f7fd fe2e 	bl	8001b44 <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d101      	bne.n	8003ef4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e2dc      	b.n	80044ae <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d008      	beq.n	8003f12 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2280      	movs	r2, #128	@ 0x80
 8003f04:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e2cd      	b.n	80044ae <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a76      	ldr	r2, [pc, #472]	@ (80040f0 <HAL_DMA_Abort+0x214>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d04a      	beq.n	8003fb2 <HAL_DMA_Abort+0xd6>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a74      	ldr	r2, [pc, #464]	@ (80040f4 <HAL_DMA_Abort+0x218>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d045      	beq.n	8003fb2 <HAL_DMA_Abort+0xd6>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a73      	ldr	r2, [pc, #460]	@ (80040f8 <HAL_DMA_Abort+0x21c>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d040      	beq.n	8003fb2 <HAL_DMA_Abort+0xd6>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a71      	ldr	r2, [pc, #452]	@ (80040fc <HAL_DMA_Abort+0x220>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d03b      	beq.n	8003fb2 <HAL_DMA_Abort+0xd6>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a70      	ldr	r2, [pc, #448]	@ (8004100 <HAL_DMA_Abort+0x224>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d036      	beq.n	8003fb2 <HAL_DMA_Abort+0xd6>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a6e      	ldr	r2, [pc, #440]	@ (8004104 <HAL_DMA_Abort+0x228>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d031      	beq.n	8003fb2 <HAL_DMA_Abort+0xd6>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a6d      	ldr	r2, [pc, #436]	@ (8004108 <HAL_DMA_Abort+0x22c>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d02c      	beq.n	8003fb2 <HAL_DMA_Abort+0xd6>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a6b      	ldr	r2, [pc, #428]	@ (800410c <HAL_DMA_Abort+0x230>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d027      	beq.n	8003fb2 <HAL_DMA_Abort+0xd6>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a6a      	ldr	r2, [pc, #424]	@ (8004110 <HAL_DMA_Abort+0x234>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d022      	beq.n	8003fb2 <HAL_DMA_Abort+0xd6>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a68      	ldr	r2, [pc, #416]	@ (8004114 <HAL_DMA_Abort+0x238>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d01d      	beq.n	8003fb2 <HAL_DMA_Abort+0xd6>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a67      	ldr	r2, [pc, #412]	@ (8004118 <HAL_DMA_Abort+0x23c>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d018      	beq.n	8003fb2 <HAL_DMA_Abort+0xd6>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a65      	ldr	r2, [pc, #404]	@ (800411c <HAL_DMA_Abort+0x240>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d013      	beq.n	8003fb2 <HAL_DMA_Abort+0xd6>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a64      	ldr	r2, [pc, #400]	@ (8004120 <HAL_DMA_Abort+0x244>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d00e      	beq.n	8003fb2 <HAL_DMA_Abort+0xd6>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a62      	ldr	r2, [pc, #392]	@ (8004124 <HAL_DMA_Abort+0x248>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d009      	beq.n	8003fb2 <HAL_DMA_Abort+0xd6>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a61      	ldr	r2, [pc, #388]	@ (8004128 <HAL_DMA_Abort+0x24c>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d004      	beq.n	8003fb2 <HAL_DMA_Abort+0xd6>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a5f      	ldr	r2, [pc, #380]	@ (800412c <HAL_DMA_Abort+0x250>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d101      	bne.n	8003fb6 <HAL_DMA_Abort+0xda>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e000      	b.n	8003fb8 <HAL_DMA_Abort+0xdc>
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d013      	beq.n	8003fe4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 021e 	bic.w	r2, r2, #30
 8003fca:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	695a      	ldr	r2, [r3, #20]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003fda:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	617b      	str	r3, [r7, #20]
 8003fe2:	e00a      	b.n	8003ffa <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 020e 	bic.w	r2, r2, #14
 8003ff2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a3c      	ldr	r2, [pc, #240]	@ (80040f0 <HAL_DMA_Abort+0x214>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d072      	beq.n	80040ea <HAL_DMA_Abort+0x20e>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a3a      	ldr	r2, [pc, #232]	@ (80040f4 <HAL_DMA_Abort+0x218>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d06d      	beq.n	80040ea <HAL_DMA_Abort+0x20e>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a39      	ldr	r2, [pc, #228]	@ (80040f8 <HAL_DMA_Abort+0x21c>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d068      	beq.n	80040ea <HAL_DMA_Abort+0x20e>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a37      	ldr	r2, [pc, #220]	@ (80040fc <HAL_DMA_Abort+0x220>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d063      	beq.n	80040ea <HAL_DMA_Abort+0x20e>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a36      	ldr	r2, [pc, #216]	@ (8004100 <HAL_DMA_Abort+0x224>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d05e      	beq.n	80040ea <HAL_DMA_Abort+0x20e>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a34      	ldr	r2, [pc, #208]	@ (8004104 <HAL_DMA_Abort+0x228>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d059      	beq.n	80040ea <HAL_DMA_Abort+0x20e>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a33      	ldr	r2, [pc, #204]	@ (8004108 <HAL_DMA_Abort+0x22c>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d054      	beq.n	80040ea <HAL_DMA_Abort+0x20e>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a31      	ldr	r2, [pc, #196]	@ (800410c <HAL_DMA_Abort+0x230>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d04f      	beq.n	80040ea <HAL_DMA_Abort+0x20e>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a30      	ldr	r2, [pc, #192]	@ (8004110 <HAL_DMA_Abort+0x234>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d04a      	beq.n	80040ea <HAL_DMA_Abort+0x20e>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a2e      	ldr	r2, [pc, #184]	@ (8004114 <HAL_DMA_Abort+0x238>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d045      	beq.n	80040ea <HAL_DMA_Abort+0x20e>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a2d      	ldr	r2, [pc, #180]	@ (8004118 <HAL_DMA_Abort+0x23c>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d040      	beq.n	80040ea <HAL_DMA_Abort+0x20e>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a2b      	ldr	r2, [pc, #172]	@ (800411c <HAL_DMA_Abort+0x240>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d03b      	beq.n	80040ea <HAL_DMA_Abort+0x20e>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a2a      	ldr	r2, [pc, #168]	@ (8004120 <HAL_DMA_Abort+0x244>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d036      	beq.n	80040ea <HAL_DMA_Abort+0x20e>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a28      	ldr	r2, [pc, #160]	@ (8004124 <HAL_DMA_Abort+0x248>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d031      	beq.n	80040ea <HAL_DMA_Abort+0x20e>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a27      	ldr	r2, [pc, #156]	@ (8004128 <HAL_DMA_Abort+0x24c>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d02c      	beq.n	80040ea <HAL_DMA_Abort+0x20e>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a25      	ldr	r2, [pc, #148]	@ (800412c <HAL_DMA_Abort+0x250>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d027      	beq.n	80040ea <HAL_DMA_Abort+0x20e>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a24      	ldr	r2, [pc, #144]	@ (8004130 <HAL_DMA_Abort+0x254>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d022      	beq.n	80040ea <HAL_DMA_Abort+0x20e>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a22      	ldr	r2, [pc, #136]	@ (8004134 <HAL_DMA_Abort+0x258>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d01d      	beq.n	80040ea <HAL_DMA_Abort+0x20e>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a21      	ldr	r2, [pc, #132]	@ (8004138 <HAL_DMA_Abort+0x25c>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d018      	beq.n	80040ea <HAL_DMA_Abort+0x20e>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a1f      	ldr	r2, [pc, #124]	@ (800413c <HAL_DMA_Abort+0x260>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d013      	beq.n	80040ea <HAL_DMA_Abort+0x20e>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a1e      	ldr	r2, [pc, #120]	@ (8004140 <HAL_DMA_Abort+0x264>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d00e      	beq.n	80040ea <HAL_DMA_Abort+0x20e>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4a1c      	ldr	r2, [pc, #112]	@ (8004144 <HAL_DMA_Abort+0x268>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d009      	beq.n	80040ea <HAL_DMA_Abort+0x20e>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4a1b      	ldr	r2, [pc, #108]	@ (8004148 <HAL_DMA_Abort+0x26c>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d004      	beq.n	80040ea <HAL_DMA_Abort+0x20e>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a19      	ldr	r2, [pc, #100]	@ (800414c <HAL_DMA_Abort+0x270>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d132      	bne.n	8004150 <HAL_DMA_Abort+0x274>
 80040ea:	2301      	movs	r3, #1
 80040ec:	e031      	b.n	8004152 <HAL_DMA_Abort+0x276>
 80040ee:	bf00      	nop
 80040f0:	40020010 	.word	0x40020010
 80040f4:	40020028 	.word	0x40020028
 80040f8:	40020040 	.word	0x40020040
 80040fc:	40020058 	.word	0x40020058
 8004100:	40020070 	.word	0x40020070
 8004104:	40020088 	.word	0x40020088
 8004108:	400200a0 	.word	0x400200a0
 800410c:	400200b8 	.word	0x400200b8
 8004110:	40020410 	.word	0x40020410
 8004114:	40020428 	.word	0x40020428
 8004118:	40020440 	.word	0x40020440
 800411c:	40020458 	.word	0x40020458
 8004120:	40020470 	.word	0x40020470
 8004124:	40020488 	.word	0x40020488
 8004128:	400204a0 	.word	0x400204a0
 800412c:	400204b8 	.word	0x400204b8
 8004130:	58025408 	.word	0x58025408
 8004134:	5802541c 	.word	0x5802541c
 8004138:	58025430 	.word	0x58025430
 800413c:	58025444 	.word	0x58025444
 8004140:	58025458 	.word	0x58025458
 8004144:	5802546c 	.word	0x5802546c
 8004148:	58025480 	.word	0x58025480
 800414c:	58025494 	.word	0x58025494
 8004150:	2300      	movs	r3, #0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d007      	beq.n	8004166 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004160:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004164:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a6d      	ldr	r2, [pc, #436]	@ (8004320 <HAL_DMA_Abort+0x444>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d04a      	beq.n	8004206 <HAL_DMA_Abort+0x32a>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a6b      	ldr	r2, [pc, #428]	@ (8004324 <HAL_DMA_Abort+0x448>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d045      	beq.n	8004206 <HAL_DMA_Abort+0x32a>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a6a      	ldr	r2, [pc, #424]	@ (8004328 <HAL_DMA_Abort+0x44c>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d040      	beq.n	8004206 <HAL_DMA_Abort+0x32a>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a68      	ldr	r2, [pc, #416]	@ (800432c <HAL_DMA_Abort+0x450>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d03b      	beq.n	8004206 <HAL_DMA_Abort+0x32a>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a67      	ldr	r2, [pc, #412]	@ (8004330 <HAL_DMA_Abort+0x454>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d036      	beq.n	8004206 <HAL_DMA_Abort+0x32a>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a65      	ldr	r2, [pc, #404]	@ (8004334 <HAL_DMA_Abort+0x458>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d031      	beq.n	8004206 <HAL_DMA_Abort+0x32a>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a64      	ldr	r2, [pc, #400]	@ (8004338 <HAL_DMA_Abort+0x45c>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d02c      	beq.n	8004206 <HAL_DMA_Abort+0x32a>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a62      	ldr	r2, [pc, #392]	@ (800433c <HAL_DMA_Abort+0x460>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d027      	beq.n	8004206 <HAL_DMA_Abort+0x32a>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a61      	ldr	r2, [pc, #388]	@ (8004340 <HAL_DMA_Abort+0x464>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d022      	beq.n	8004206 <HAL_DMA_Abort+0x32a>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a5f      	ldr	r2, [pc, #380]	@ (8004344 <HAL_DMA_Abort+0x468>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d01d      	beq.n	8004206 <HAL_DMA_Abort+0x32a>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a5e      	ldr	r2, [pc, #376]	@ (8004348 <HAL_DMA_Abort+0x46c>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d018      	beq.n	8004206 <HAL_DMA_Abort+0x32a>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a5c      	ldr	r2, [pc, #368]	@ (800434c <HAL_DMA_Abort+0x470>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d013      	beq.n	8004206 <HAL_DMA_Abort+0x32a>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a5b      	ldr	r2, [pc, #364]	@ (8004350 <HAL_DMA_Abort+0x474>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d00e      	beq.n	8004206 <HAL_DMA_Abort+0x32a>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a59      	ldr	r2, [pc, #356]	@ (8004354 <HAL_DMA_Abort+0x478>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d009      	beq.n	8004206 <HAL_DMA_Abort+0x32a>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a58      	ldr	r2, [pc, #352]	@ (8004358 <HAL_DMA_Abort+0x47c>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d004      	beq.n	8004206 <HAL_DMA_Abort+0x32a>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a56      	ldr	r2, [pc, #344]	@ (800435c <HAL_DMA_Abort+0x480>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d108      	bne.n	8004218 <HAL_DMA_Abort+0x33c>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0201 	bic.w	r2, r2, #1
 8004214:	601a      	str	r2, [r3, #0]
 8004216:	e007      	b.n	8004228 <HAL_DMA_Abort+0x34c>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0201 	bic.w	r2, r2, #1
 8004226:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004228:	e013      	b.n	8004252 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800422a:	f7fd fc8b 	bl	8001b44 <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b05      	cmp	r3, #5
 8004236:	d90c      	bls.n	8004252 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2220      	movs	r2, #32
 800423c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2203      	movs	r2, #3
 8004242:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e12d      	b.n	80044ae <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1e5      	bne.n	800422a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a2f      	ldr	r2, [pc, #188]	@ (8004320 <HAL_DMA_Abort+0x444>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d04a      	beq.n	80042fe <HAL_DMA_Abort+0x422>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a2d      	ldr	r2, [pc, #180]	@ (8004324 <HAL_DMA_Abort+0x448>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d045      	beq.n	80042fe <HAL_DMA_Abort+0x422>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a2c      	ldr	r2, [pc, #176]	@ (8004328 <HAL_DMA_Abort+0x44c>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d040      	beq.n	80042fe <HAL_DMA_Abort+0x422>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a2a      	ldr	r2, [pc, #168]	@ (800432c <HAL_DMA_Abort+0x450>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d03b      	beq.n	80042fe <HAL_DMA_Abort+0x422>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a29      	ldr	r2, [pc, #164]	@ (8004330 <HAL_DMA_Abort+0x454>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d036      	beq.n	80042fe <HAL_DMA_Abort+0x422>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a27      	ldr	r2, [pc, #156]	@ (8004334 <HAL_DMA_Abort+0x458>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d031      	beq.n	80042fe <HAL_DMA_Abort+0x422>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a26      	ldr	r2, [pc, #152]	@ (8004338 <HAL_DMA_Abort+0x45c>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d02c      	beq.n	80042fe <HAL_DMA_Abort+0x422>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a24      	ldr	r2, [pc, #144]	@ (800433c <HAL_DMA_Abort+0x460>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d027      	beq.n	80042fe <HAL_DMA_Abort+0x422>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a23      	ldr	r2, [pc, #140]	@ (8004340 <HAL_DMA_Abort+0x464>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d022      	beq.n	80042fe <HAL_DMA_Abort+0x422>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a21      	ldr	r2, [pc, #132]	@ (8004344 <HAL_DMA_Abort+0x468>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d01d      	beq.n	80042fe <HAL_DMA_Abort+0x422>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a20      	ldr	r2, [pc, #128]	@ (8004348 <HAL_DMA_Abort+0x46c>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d018      	beq.n	80042fe <HAL_DMA_Abort+0x422>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a1e      	ldr	r2, [pc, #120]	@ (800434c <HAL_DMA_Abort+0x470>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d013      	beq.n	80042fe <HAL_DMA_Abort+0x422>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a1d      	ldr	r2, [pc, #116]	@ (8004350 <HAL_DMA_Abort+0x474>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d00e      	beq.n	80042fe <HAL_DMA_Abort+0x422>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a1b      	ldr	r2, [pc, #108]	@ (8004354 <HAL_DMA_Abort+0x478>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d009      	beq.n	80042fe <HAL_DMA_Abort+0x422>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a1a      	ldr	r2, [pc, #104]	@ (8004358 <HAL_DMA_Abort+0x47c>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d004      	beq.n	80042fe <HAL_DMA_Abort+0x422>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a18      	ldr	r2, [pc, #96]	@ (800435c <HAL_DMA_Abort+0x480>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d101      	bne.n	8004302 <HAL_DMA_Abort+0x426>
 80042fe:	2301      	movs	r3, #1
 8004300:	e000      	b.n	8004304 <HAL_DMA_Abort+0x428>
 8004302:	2300      	movs	r3, #0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d02b      	beq.n	8004360 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800430c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004312:	f003 031f 	and.w	r3, r3, #31
 8004316:	223f      	movs	r2, #63	@ 0x3f
 8004318:	409a      	lsls	r2, r3
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	609a      	str	r2, [r3, #8]
 800431e:	e02a      	b.n	8004376 <HAL_DMA_Abort+0x49a>
 8004320:	40020010 	.word	0x40020010
 8004324:	40020028 	.word	0x40020028
 8004328:	40020040 	.word	0x40020040
 800432c:	40020058 	.word	0x40020058
 8004330:	40020070 	.word	0x40020070
 8004334:	40020088 	.word	0x40020088
 8004338:	400200a0 	.word	0x400200a0
 800433c:	400200b8 	.word	0x400200b8
 8004340:	40020410 	.word	0x40020410
 8004344:	40020428 	.word	0x40020428
 8004348:	40020440 	.word	0x40020440
 800434c:	40020458 	.word	0x40020458
 8004350:	40020470 	.word	0x40020470
 8004354:	40020488 	.word	0x40020488
 8004358:	400204a0 	.word	0x400204a0
 800435c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004364:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800436a:	f003 031f 	and.w	r3, r3, #31
 800436e:	2201      	movs	r2, #1
 8004370:	409a      	lsls	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a4f      	ldr	r2, [pc, #316]	@ (80044b8 <HAL_DMA_Abort+0x5dc>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d072      	beq.n	8004466 <HAL_DMA_Abort+0x58a>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a4d      	ldr	r2, [pc, #308]	@ (80044bc <HAL_DMA_Abort+0x5e0>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d06d      	beq.n	8004466 <HAL_DMA_Abort+0x58a>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a4c      	ldr	r2, [pc, #304]	@ (80044c0 <HAL_DMA_Abort+0x5e4>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d068      	beq.n	8004466 <HAL_DMA_Abort+0x58a>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a4a      	ldr	r2, [pc, #296]	@ (80044c4 <HAL_DMA_Abort+0x5e8>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d063      	beq.n	8004466 <HAL_DMA_Abort+0x58a>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a49      	ldr	r2, [pc, #292]	@ (80044c8 <HAL_DMA_Abort+0x5ec>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d05e      	beq.n	8004466 <HAL_DMA_Abort+0x58a>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a47      	ldr	r2, [pc, #284]	@ (80044cc <HAL_DMA_Abort+0x5f0>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d059      	beq.n	8004466 <HAL_DMA_Abort+0x58a>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4a46      	ldr	r2, [pc, #280]	@ (80044d0 <HAL_DMA_Abort+0x5f4>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d054      	beq.n	8004466 <HAL_DMA_Abort+0x58a>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a44      	ldr	r2, [pc, #272]	@ (80044d4 <HAL_DMA_Abort+0x5f8>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d04f      	beq.n	8004466 <HAL_DMA_Abort+0x58a>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a43      	ldr	r2, [pc, #268]	@ (80044d8 <HAL_DMA_Abort+0x5fc>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d04a      	beq.n	8004466 <HAL_DMA_Abort+0x58a>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a41      	ldr	r2, [pc, #260]	@ (80044dc <HAL_DMA_Abort+0x600>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d045      	beq.n	8004466 <HAL_DMA_Abort+0x58a>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a40      	ldr	r2, [pc, #256]	@ (80044e0 <HAL_DMA_Abort+0x604>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d040      	beq.n	8004466 <HAL_DMA_Abort+0x58a>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a3e      	ldr	r2, [pc, #248]	@ (80044e4 <HAL_DMA_Abort+0x608>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d03b      	beq.n	8004466 <HAL_DMA_Abort+0x58a>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a3d      	ldr	r2, [pc, #244]	@ (80044e8 <HAL_DMA_Abort+0x60c>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d036      	beq.n	8004466 <HAL_DMA_Abort+0x58a>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a3b      	ldr	r2, [pc, #236]	@ (80044ec <HAL_DMA_Abort+0x610>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d031      	beq.n	8004466 <HAL_DMA_Abort+0x58a>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a3a      	ldr	r2, [pc, #232]	@ (80044f0 <HAL_DMA_Abort+0x614>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d02c      	beq.n	8004466 <HAL_DMA_Abort+0x58a>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a38      	ldr	r2, [pc, #224]	@ (80044f4 <HAL_DMA_Abort+0x618>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d027      	beq.n	8004466 <HAL_DMA_Abort+0x58a>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a37      	ldr	r2, [pc, #220]	@ (80044f8 <HAL_DMA_Abort+0x61c>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d022      	beq.n	8004466 <HAL_DMA_Abort+0x58a>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a35      	ldr	r2, [pc, #212]	@ (80044fc <HAL_DMA_Abort+0x620>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d01d      	beq.n	8004466 <HAL_DMA_Abort+0x58a>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a34      	ldr	r2, [pc, #208]	@ (8004500 <HAL_DMA_Abort+0x624>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d018      	beq.n	8004466 <HAL_DMA_Abort+0x58a>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a32      	ldr	r2, [pc, #200]	@ (8004504 <HAL_DMA_Abort+0x628>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d013      	beq.n	8004466 <HAL_DMA_Abort+0x58a>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a31      	ldr	r2, [pc, #196]	@ (8004508 <HAL_DMA_Abort+0x62c>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d00e      	beq.n	8004466 <HAL_DMA_Abort+0x58a>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a2f      	ldr	r2, [pc, #188]	@ (800450c <HAL_DMA_Abort+0x630>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d009      	beq.n	8004466 <HAL_DMA_Abort+0x58a>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a2e      	ldr	r2, [pc, #184]	@ (8004510 <HAL_DMA_Abort+0x634>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d004      	beq.n	8004466 <HAL_DMA_Abort+0x58a>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a2c      	ldr	r2, [pc, #176]	@ (8004514 <HAL_DMA_Abort+0x638>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d101      	bne.n	800446a <HAL_DMA_Abort+0x58e>
 8004466:	2301      	movs	r3, #1
 8004468:	e000      	b.n	800446c <HAL_DMA_Abort+0x590>
 800446a:	2300      	movs	r3, #0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d015      	beq.n	800449c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004478:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00c      	beq.n	800449c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800448c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004490:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800449a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3718      	adds	r7, #24
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	40020010 	.word	0x40020010
 80044bc:	40020028 	.word	0x40020028
 80044c0:	40020040 	.word	0x40020040
 80044c4:	40020058 	.word	0x40020058
 80044c8:	40020070 	.word	0x40020070
 80044cc:	40020088 	.word	0x40020088
 80044d0:	400200a0 	.word	0x400200a0
 80044d4:	400200b8 	.word	0x400200b8
 80044d8:	40020410 	.word	0x40020410
 80044dc:	40020428 	.word	0x40020428
 80044e0:	40020440 	.word	0x40020440
 80044e4:	40020458 	.word	0x40020458
 80044e8:	40020470 	.word	0x40020470
 80044ec:	40020488 	.word	0x40020488
 80044f0:	400204a0 	.word	0x400204a0
 80044f4:	400204b8 	.word	0x400204b8
 80044f8:	58025408 	.word	0x58025408
 80044fc:	5802541c 	.word	0x5802541c
 8004500:	58025430 	.word	0x58025430
 8004504:	58025444 	.word	0x58025444
 8004508:	58025458 	.word	0x58025458
 800450c:	5802546c 	.word	0x5802546c
 8004510:	58025480 	.word	0x58025480
 8004514:	58025494 	.word	0x58025494

08004518 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e237      	b.n	800499a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d004      	beq.n	8004540 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2280      	movs	r2, #128	@ 0x80
 800453a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e22c      	b.n	800499a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a5c      	ldr	r2, [pc, #368]	@ (80046b8 <HAL_DMA_Abort_IT+0x1a0>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d04a      	beq.n	80045e0 <HAL_DMA_Abort_IT+0xc8>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a5b      	ldr	r2, [pc, #364]	@ (80046bc <HAL_DMA_Abort_IT+0x1a4>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d045      	beq.n	80045e0 <HAL_DMA_Abort_IT+0xc8>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a59      	ldr	r2, [pc, #356]	@ (80046c0 <HAL_DMA_Abort_IT+0x1a8>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d040      	beq.n	80045e0 <HAL_DMA_Abort_IT+0xc8>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a58      	ldr	r2, [pc, #352]	@ (80046c4 <HAL_DMA_Abort_IT+0x1ac>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d03b      	beq.n	80045e0 <HAL_DMA_Abort_IT+0xc8>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a56      	ldr	r2, [pc, #344]	@ (80046c8 <HAL_DMA_Abort_IT+0x1b0>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d036      	beq.n	80045e0 <HAL_DMA_Abort_IT+0xc8>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a55      	ldr	r2, [pc, #340]	@ (80046cc <HAL_DMA_Abort_IT+0x1b4>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d031      	beq.n	80045e0 <HAL_DMA_Abort_IT+0xc8>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a53      	ldr	r2, [pc, #332]	@ (80046d0 <HAL_DMA_Abort_IT+0x1b8>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d02c      	beq.n	80045e0 <HAL_DMA_Abort_IT+0xc8>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a52      	ldr	r2, [pc, #328]	@ (80046d4 <HAL_DMA_Abort_IT+0x1bc>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d027      	beq.n	80045e0 <HAL_DMA_Abort_IT+0xc8>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a50      	ldr	r2, [pc, #320]	@ (80046d8 <HAL_DMA_Abort_IT+0x1c0>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d022      	beq.n	80045e0 <HAL_DMA_Abort_IT+0xc8>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a4f      	ldr	r2, [pc, #316]	@ (80046dc <HAL_DMA_Abort_IT+0x1c4>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d01d      	beq.n	80045e0 <HAL_DMA_Abort_IT+0xc8>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a4d      	ldr	r2, [pc, #308]	@ (80046e0 <HAL_DMA_Abort_IT+0x1c8>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d018      	beq.n	80045e0 <HAL_DMA_Abort_IT+0xc8>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a4c      	ldr	r2, [pc, #304]	@ (80046e4 <HAL_DMA_Abort_IT+0x1cc>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d013      	beq.n	80045e0 <HAL_DMA_Abort_IT+0xc8>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a4a      	ldr	r2, [pc, #296]	@ (80046e8 <HAL_DMA_Abort_IT+0x1d0>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d00e      	beq.n	80045e0 <HAL_DMA_Abort_IT+0xc8>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a49      	ldr	r2, [pc, #292]	@ (80046ec <HAL_DMA_Abort_IT+0x1d4>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d009      	beq.n	80045e0 <HAL_DMA_Abort_IT+0xc8>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a47      	ldr	r2, [pc, #284]	@ (80046f0 <HAL_DMA_Abort_IT+0x1d8>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d004      	beq.n	80045e0 <HAL_DMA_Abort_IT+0xc8>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a46      	ldr	r2, [pc, #280]	@ (80046f4 <HAL_DMA_Abort_IT+0x1dc>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d101      	bne.n	80045e4 <HAL_DMA_Abort_IT+0xcc>
 80045e0:	2301      	movs	r3, #1
 80045e2:	e000      	b.n	80045e6 <HAL_DMA_Abort_IT+0xce>
 80045e4:	2300      	movs	r3, #0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	f000 8086 	beq.w	80046f8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2204      	movs	r2, #4
 80045f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a2f      	ldr	r2, [pc, #188]	@ (80046b8 <HAL_DMA_Abort_IT+0x1a0>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d04a      	beq.n	8004694 <HAL_DMA_Abort_IT+0x17c>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a2e      	ldr	r2, [pc, #184]	@ (80046bc <HAL_DMA_Abort_IT+0x1a4>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d045      	beq.n	8004694 <HAL_DMA_Abort_IT+0x17c>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a2c      	ldr	r2, [pc, #176]	@ (80046c0 <HAL_DMA_Abort_IT+0x1a8>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d040      	beq.n	8004694 <HAL_DMA_Abort_IT+0x17c>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a2b      	ldr	r2, [pc, #172]	@ (80046c4 <HAL_DMA_Abort_IT+0x1ac>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d03b      	beq.n	8004694 <HAL_DMA_Abort_IT+0x17c>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a29      	ldr	r2, [pc, #164]	@ (80046c8 <HAL_DMA_Abort_IT+0x1b0>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d036      	beq.n	8004694 <HAL_DMA_Abort_IT+0x17c>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a28      	ldr	r2, [pc, #160]	@ (80046cc <HAL_DMA_Abort_IT+0x1b4>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d031      	beq.n	8004694 <HAL_DMA_Abort_IT+0x17c>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a26      	ldr	r2, [pc, #152]	@ (80046d0 <HAL_DMA_Abort_IT+0x1b8>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d02c      	beq.n	8004694 <HAL_DMA_Abort_IT+0x17c>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a25      	ldr	r2, [pc, #148]	@ (80046d4 <HAL_DMA_Abort_IT+0x1bc>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d027      	beq.n	8004694 <HAL_DMA_Abort_IT+0x17c>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a23      	ldr	r2, [pc, #140]	@ (80046d8 <HAL_DMA_Abort_IT+0x1c0>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d022      	beq.n	8004694 <HAL_DMA_Abort_IT+0x17c>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a22      	ldr	r2, [pc, #136]	@ (80046dc <HAL_DMA_Abort_IT+0x1c4>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d01d      	beq.n	8004694 <HAL_DMA_Abort_IT+0x17c>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a20      	ldr	r2, [pc, #128]	@ (80046e0 <HAL_DMA_Abort_IT+0x1c8>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d018      	beq.n	8004694 <HAL_DMA_Abort_IT+0x17c>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a1f      	ldr	r2, [pc, #124]	@ (80046e4 <HAL_DMA_Abort_IT+0x1cc>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d013      	beq.n	8004694 <HAL_DMA_Abort_IT+0x17c>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a1d      	ldr	r2, [pc, #116]	@ (80046e8 <HAL_DMA_Abort_IT+0x1d0>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d00e      	beq.n	8004694 <HAL_DMA_Abort_IT+0x17c>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a1c      	ldr	r2, [pc, #112]	@ (80046ec <HAL_DMA_Abort_IT+0x1d4>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d009      	beq.n	8004694 <HAL_DMA_Abort_IT+0x17c>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a1a      	ldr	r2, [pc, #104]	@ (80046f0 <HAL_DMA_Abort_IT+0x1d8>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d004      	beq.n	8004694 <HAL_DMA_Abort_IT+0x17c>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a19      	ldr	r2, [pc, #100]	@ (80046f4 <HAL_DMA_Abort_IT+0x1dc>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d108      	bne.n	80046a6 <HAL_DMA_Abort_IT+0x18e>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f022 0201 	bic.w	r2, r2, #1
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	e178      	b.n	8004998 <HAL_DMA_Abort_IT+0x480>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 0201 	bic.w	r2, r2, #1
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	e16f      	b.n	8004998 <HAL_DMA_Abort_IT+0x480>
 80046b8:	40020010 	.word	0x40020010
 80046bc:	40020028 	.word	0x40020028
 80046c0:	40020040 	.word	0x40020040
 80046c4:	40020058 	.word	0x40020058
 80046c8:	40020070 	.word	0x40020070
 80046cc:	40020088 	.word	0x40020088
 80046d0:	400200a0 	.word	0x400200a0
 80046d4:	400200b8 	.word	0x400200b8
 80046d8:	40020410 	.word	0x40020410
 80046dc:	40020428 	.word	0x40020428
 80046e0:	40020440 	.word	0x40020440
 80046e4:	40020458 	.word	0x40020458
 80046e8:	40020470 	.word	0x40020470
 80046ec:	40020488 	.word	0x40020488
 80046f0:	400204a0 	.word	0x400204a0
 80046f4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 020e 	bic.w	r2, r2, #14
 8004706:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a6c      	ldr	r2, [pc, #432]	@ (80048c0 <HAL_DMA_Abort_IT+0x3a8>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d04a      	beq.n	80047a8 <HAL_DMA_Abort_IT+0x290>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a6b      	ldr	r2, [pc, #428]	@ (80048c4 <HAL_DMA_Abort_IT+0x3ac>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d045      	beq.n	80047a8 <HAL_DMA_Abort_IT+0x290>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a69      	ldr	r2, [pc, #420]	@ (80048c8 <HAL_DMA_Abort_IT+0x3b0>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d040      	beq.n	80047a8 <HAL_DMA_Abort_IT+0x290>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a68      	ldr	r2, [pc, #416]	@ (80048cc <HAL_DMA_Abort_IT+0x3b4>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d03b      	beq.n	80047a8 <HAL_DMA_Abort_IT+0x290>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a66      	ldr	r2, [pc, #408]	@ (80048d0 <HAL_DMA_Abort_IT+0x3b8>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d036      	beq.n	80047a8 <HAL_DMA_Abort_IT+0x290>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a65      	ldr	r2, [pc, #404]	@ (80048d4 <HAL_DMA_Abort_IT+0x3bc>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d031      	beq.n	80047a8 <HAL_DMA_Abort_IT+0x290>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a63      	ldr	r2, [pc, #396]	@ (80048d8 <HAL_DMA_Abort_IT+0x3c0>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d02c      	beq.n	80047a8 <HAL_DMA_Abort_IT+0x290>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a62      	ldr	r2, [pc, #392]	@ (80048dc <HAL_DMA_Abort_IT+0x3c4>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d027      	beq.n	80047a8 <HAL_DMA_Abort_IT+0x290>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a60      	ldr	r2, [pc, #384]	@ (80048e0 <HAL_DMA_Abort_IT+0x3c8>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d022      	beq.n	80047a8 <HAL_DMA_Abort_IT+0x290>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a5f      	ldr	r2, [pc, #380]	@ (80048e4 <HAL_DMA_Abort_IT+0x3cc>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d01d      	beq.n	80047a8 <HAL_DMA_Abort_IT+0x290>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a5d      	ldr	r2, [pc, #372]	@ (80048e8 <HAL_DMA_Abort_IT+0x3d0>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d018      	beq.n	80047a8 <HAL_DMA_Abort_IT+0x290>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a5c      	ldr	r2, [pc, #368]	@ (80048ec <HAL_DMA_Abort_IT+0x3d4>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d013      	beq.n	80047a8 <HAL_DMA_Abort_IT+0x290>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a5a      	ldr	r2, [pc, #360]	@ (80048f0 <HAL_DMA_Abort_IT+0x3d8>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d00e      	beq.n	80047a8 <HAL_DMA_Abort_IT+0x290>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a59      	ldr	r2, [pc, #356]	@ (80048f4 <HAL_DMA_Abort_IT+0x3dc>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d009      	beq.n	80047a8 <HAL_DMA_Abort_IT+0x290>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a57      	ldr	r2, [pc, #348]	@ (80048f8 <HAL_DMA_Abort_IT+0x3e0>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d004      	beq.n	80047a8 <HAL_DMA_Abort_IT+0x290>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a56      	ldr	r2, [pc, #344]	@ (80048fc <HAL_DMA_Abort_IT+0x3e4>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d108      	bne.n	80047ba <HAL_DMA_Abort_IT+0x2a2>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f022 0201 	bic.w	r2, r2, #1
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	e007      	b.n	80047ca <HAL_DMA_Abort_IT+0x2b2>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 0201 	bic.w	r2, r2, #1
 80047c8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a3c      	ldr	r2, [pc, #240]	@ (80048c0 <HAL_DMA_Abort_IT+0x3a8>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d072      	beq.n	80048ba <HAL_DMA_Abort_IT+0x3a2>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a3a      	ldr	r2, [pc, #232]	@ (80048c4 <HAL_DMA_Abort_IT+0x3ac>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d06d      	beq.n	80048ba <HAL_DMA_Abort_IT+0x3a2>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a39      	ldr	r2, [pc, #228]	@ (80048c8 <HAL_DMA_Abort_IT+0x3b0>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d068      	beq.n	80048ba <HAL_DMA_Abort_IT+0x3a2>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a37      	ldr	r2, [pc, #220]	@ (80048cc <HAL_DMA_Abort_IT+0x3b4>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d063      	beq.n	80048ba <HAL_DMA_Abort_IT+0x3a2>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a36      	ldr	r2, [pc, #216]	@ (80048d0 <HAL_DMA_Abort_IT+0x3b8>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d05e      	beq.n	80048ba <HAL_DMA_Abort_IT+0x3a2>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a34      	ldr	r2, [pc, #208]	@ (80048d4 <HAL_DMA_Abort_IT+0x3bc>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d059      	beq.n	80048ba <HAL_DMA_Abort_IT+0x3a2>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a33      	ldr	r2, [pc, #204]	@ (80048d8 <HAL_DMA_Abort_IT+0x3c0>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d054      	beq.n	80048ba <HAL_DMA_Abort_IT+0x3a2>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a31      	ldr	r2, [pc, #196]	@ (80048dc <HAL_DMA_Abort_IT+0x3c4>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d04f      	beq.n	80048ba <HAL_DMA_Abort_IT+0x3a2>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a30      	ldr	r2, [pc, #192]	@ (80048e0 <HAL_DMA_Abort_IT+0x3c8>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d04a      	beq.n	80048ba <HAL_DMA_Abort_IT+0x3a2>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a2e      	ldr	r2, [pc, #184]	@ (80048e4 <HAL_DMA_Abort_IT+0x3cc>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d045      	beq.n	80048ba <HAL_DMA_Abort_IT+0x3a2>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a2d      	ldr	r2, [pc, #180]	@ (80048e8 <HAL_DMA_Abort_IT+0x3d0>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d040      	beq.n	80048ba <HAL_DMA_Abort_IT+0x3a2>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a2b      	ldr	r2, [pc, #172]	@ (80048ec <HAL_DMA_Abort_IT+0x3d4>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d03b      	beq.n	80048ba <HAL_DMA_Abort_IT+0x3a2>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a2a      	ldr	r2, [pc, #168]	@ (80048f0 <HAL_DMA_Abort_IT+0x3d8>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d036      	beq.n	80048ba <HAL_DMA_Abort_IT+0x3a2>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a28      	ldr	r2, [pc, #160]	@ (80048f4 <HAL_DMA_Abort_IT+0x3dc>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d031      	beq.n	80048ba <HAL_DMA_Abort_IT+0x3a2>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a27      	ldr	r2, [pc, #156]	@ (80048f8 <HAL_DMA_Abort_IT+0x3e0>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d02c      	beq.n	80048ba <HAL_DMA_Abort_IT+0x3a2>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a25      	ldr	r2, [pc, #148]	@ (80048fc <HAL_DMA_Abort_IT+0x3e4>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d027      	beq.n	80048ba <HAL_DMA_Abort_IT+0x3a2>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a24      	ldr	r2, [pc, #144]	@ (8004900 <HAL_DMA_Abort_IT+0x3e8>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d022      	beq.n	80048ba <HAL_DMA_Abort_IT+0x3a2>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a22      	ldr	r2, [pc, #136]	@ (8004904 <HAL_DMA_Abort_IT+0x3ec>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d01d      	beq.n	80048ba <HAL_DMA_Abort_IT+0x3a2>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a21      	ldr	r2, [pc, #132]	@ (8004908 <HAL_DMA_Abort_IT+0x3f0>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d018      	beq.n	80048ba <HAL_DMA_Abort_IT+0x3a2>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a1f      	ldr	r2, [pc, #124]	@ (800490c <HAL_DMA_Abort_IT+0x3f4>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d013      	beq.n	80048ba <HAL_DMA_Abort_IT+0x3a2>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a1e      	ldr	r2, [pc, #120]	@ (8004910 <HAL_DMA_Abort_IT+0x3f8>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d00e      	beq.n	80048ba <HAL_DMA_Abort_IT+0x3a2>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a1c      	ldr	r2, [pc, #112]	@ (8004914 <HAL_DMA_Abort_IT+0x3fc>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d009      	beq.n	80048ba <HAL_DMA_Abort_IT+0x3a2>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a1b      	ldr	r2, [pc, #108]	@ (8004918 <HAL_DMA_Abort_IT+0x400>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d004      	beq.n	80048ba <HAL_DMA_Abort_IT+0x3a2>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a19      	ldr	r2, [pc, #100]	@ (800491c <HAL_DMA_Abort_IT+0x404>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d132      	bne.n	8004920 <HAL_DMA_Abort_IT+0x408>
 80048ba:	2301      	movs	r3, #1
 80048bc:	e031      	b.n	8004922 <HAL_DMA_Abort_IT+0x40a>
 80048be:	bf00      	nop
 80048c0:	40020010 	.word	0x40020010
 80048c4:	40020028 	.word	0x40020028
 80048c8:	40020040 	.word	0x40020040
 80048cc:	40020058 	.word	0x40020058
 80048d0:	40020070 	.word	0x40020070
 80048d4:	40020088 	.word	0x40020088
 80048d8:	400200a0 	.word	0x400200a0
 80048dc:	400200b8 	.word	0x400200b8
 80048e0:	40020410 	.word	0x40020410
 80048e4:	40020428 	.word	0x40020428
 80048e8:	40020440 	.word	0x40020440
 80048ec:	40020458 	.word	0x40020458
 80048f0:	40020470 	.word	0x40020470
 80048f4:	40020488 	.word	0x40020488
 80048f8:	400204a0 	.word	0x400204a0
 80048fc:	400204b8 	.word	0x400204b8
 8004900:	58025408 	.word	0x58025408
 8004904:	5802541c 	.word	0x5802541c
 8004908:	58025430 	.word	0x58025430
 800490c:	58025444 	.word	0x58025444
 8004910:	58025458 	.word	0x58025458
 8004914:	5802546c 	.word	0x5802546c
 8004918:	58025480 	.word	0x58025480
 800491c:	58025494 	.word	0x58025494
 8004920:	2300      	movs	r3, #0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d028      	beq.n	8004978 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004930:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004934:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800493a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004940:	f003 031f 	and.w	r3, r3, #31
 8004944:	2201      	movs	r2, #1
 8004946:	409a      	lsls	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004954:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00c      	beq.n	8004978 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004968:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800496c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004976:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800498c:	2b00      	cmp	r3, #0
 800498e:	d003      	beq.n	8004998 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop

080049a4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b08a      	sub	sp, #40	@ 0x28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80049b0:	4b67      	ldr	r3, [pc, #412]	@ (8004b50 <HAL_DMA_IRQHandler+0x1ac>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a67      	ldr	r2, [pc, #412]	@ (8004b54 <HAL_DMA_IRQHandler+0x1b0>)
 80049b6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ba:	0a9b      	lsrs	r3, r3, #10
 80049bc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049c2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049c8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80049ca:	6a3b      	ldr	r3, [r7, #32]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80049d0:	69fb      	ldr	r3, [r7, #28]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a5f      	ldr	r2, [pc, #380]	@ (8004b58 <HAL_DMA_IRQHandler+0x1b4>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d04a      	beq.n	8004a76 <HAL_DMA_IRQHandler+0xd2>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a5d      	ldr	r2, [pc, #372]	@ (8004b5c <HAL_DMA_IRQHandler+0x1b8>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d045      	beq.n	8004a76 <HAL_DMA_IRQHandler+0xd2>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a5c      	ldr	r2, [pc, #368]	@ (8004b60 <HAL_DMA_IRQHandler+0x1bc>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d040      	beq.n	8004a76 <HAL_DMA_IRQHandler+0xd2>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a5a      	ldr	r2, [pc, #360]	@ (8004b64 <HAL_DMA_IRQHandler+0x1c0>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d03b      	beq.n	8004a76 <HAL_DMA_IRQHandler+0xd2>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a59      	ldr	r2, [pc, #356]	@ (8004b68 <HAL_DMA_IRQHandler+0x1c4>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d036      	beq.n	8004a76 <HAL_DMA_IRQHandler+0xd2>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a57      	ldr	r2, [pc, #348]	@ (8004b6c <HAL_DMA_IRQHandler+0x1c8>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d031      	beq.n	8004a76 <HAL_DMA_IRQHandler+0xd2>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a56      	ldr	r2, [pc, #344]	@ (8004b70 <HAL_DMA_IRQHandler+0x1cc>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d02c      	beq.n	8004a76 <HAL_DMA_IRQHandler+0xd2>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a54      	ldr	r2, [pc, #336]	@ (8004b74 <HAL_DMA_IRQHandler+0x1d0>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d027      	beq.n	8004a76 <HAL_DMA_IRQHandler+0xd2>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a53      	ldr	r2, [pc, #332]	@ (8004b78 <HAL_DMA_IRQHandler+0x1d4>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d022      	beq.n	8004a76 <HAL_DMA_IRQHandler+0xd2>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a51      	ldr	r2, [pc, #324]	@ (8004b7c <HAL_DMA_IRQHandler+0x1d8>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d01d      	beq.n	8004a76 <HAL_DMA_IRQHandler+0xd2>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a50      	ldr	r2, [pc, #320]	@ (8004b80 <HAL_DMA_IRQHandler+0x1dc>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d018      	beq.n	8004a76 <HAL_DMA_IRQHandler+0xd2>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a4e      	ldr	r2, [pc, #312]	@ (8004b84 <HAL_DMA_IRQHandler+0x1e0>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d013      	beq.n	8004a76 <HAL_DMA_IRQHandler+0xd2>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a4d      	ldr	r2, [pc, #308]	@ (8004b88 <HAL_DMA_IRQHandler+0x1e4>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d00e      	beq.n	8004a76 <HAL_DMA_IRQHandler+0xd2>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a4b      	ldr	r2, [pc, #300]	@ (8004b8c <HAL_DMA_IRQHandler+0x1e8>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d009      	beq.n	8004a76 <HAL_DMA_IRQHandler+0xd2>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a4a      	ldr	r2, [pc, #296]	@ (8004b90 <HAL_DMA_IRQHandler+0x1ec>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d004      	beq.n	8004a76 <HAL_DMA_IRQHandler+0xd2>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a48      	ldr	r2, [pc, #288]	@ (8004b94 <HAL_DMA_IRQHandler+0x1f0>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d101      	bne.n	8004a7a <HAL_DMA_IRQHandler+0xd6>
 8004a76:	2301      	movs	r3, #1
 8004a78:	e000      	b.n	8004a7c <HAL_DMA_IRQHandler+0xd8>
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 842b 	beq.w	80052d8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a86:	f003 031f 	and.w	r3, r3, #31
 8004a8a:	2208      	movs	r2, #8
 8004a8c:	409a      	lsls	r2, r3
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	4013      	ands	r3, r2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	f000 80a2 	beq.w	8004bdc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a2e      	ldr	r2, [pc, #184]	@ (8004b58 <HAL_DMA_IRQHandler+0x1b4>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d04a      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x194>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a2d      	ldr	r2, [pc, #180]	@ (8004b5c <HAL_DMA_IRQHandler+0x1b8>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d045      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x194>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a2b      	ldr	r2, [pc, #172]	@ (8004b60 <HAL_DMA_IRQHandler+0x1bc>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d040      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x194>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a2a      	ldr	r2, [pc, #168]	@ (8004b64 <HAL_DMA_IRQHandler+0x1c0>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d03b      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x194>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a28      	ldr	r2, [pc, #160]	@ (8004b68 <HAL_DMA_IRQHandler+0x1c4>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d036      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x194>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a27      	ldr	r2, [pc, #156]	@ (8004b6c <HAL_DMA_IRQHandler+0x1c8>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d031      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x194>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a25      	ldr	r2, [pc, #148]	@ (8004b70 <HAL_DMA_IRQHandler+0x1cc>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d02c      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x194>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a24      	ldr	r2, [pc, #144]	@ (8004b74 <HAL_DMA_IRQHandler+0x1d0>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d027      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x194>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a22      	ldr	r2, [pc, #136]	@ (8004b78 <HAL_DMA_IRQHandler+0x1d4>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d022      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x194>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a21      	ldr	r2, [pc, #132]	@ (8004b7c <HAL_DMA_IRQHandler+0x1d8>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d01d      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x194>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a1f      	ldr	r2, [pc, #124]	@ (8004b80 <HAL_DMA_IRQHandler+0x1dc>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d018      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x194>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a1e      	ldr	r2, [pc, #120]	@ (8004b84 <HAL_DMA_IRQHandler+0x1e0>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d013      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x194>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a1c      	ldr	r2, [pc, #112]	@ (8004b88 <HAL_DMA_IRQHandler+0x1e4>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d00e      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x194>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a1b      	ldr	r2, [pc, #108]	@ (8004b8c <HAL_DMA_IRQHandler+0x1e8>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d009      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x194>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a19      	ldr	r2, [pc, #100]	@ (8004b90 <HAL_DMA_IRQHandler+0x1ec>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d004      	beq.n	8004b38 <HAL_DMA_IRQHandler+0x194>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a18      	ldr	r2, [pc, #96]	@ (8004b94 <HAL_DMA_IRQHandler+0x1f0>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d12f      	bne.n	8004b98 <HAL_DMA_IRQHandler+0x1f4>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0304 	and.w	r3, r3, #4
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	bf14      	ite	ne
 8004b46:	2301      	movne	r3, #1
 8004b48:	2300      	moveq	r3, #0
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	e02e      	b.n	8004bac <HAL_DMA_IRQHandler+0x208>
 8004b4e:	bf00      	nop
 8004b50:	24000004 	.word	0x24000004
 8004b54:	1b4e81b5 	.word	0x1b4e81b5
 8004b58:	40020010 	.word	0x40020010
 8004b5c:	40020028 	.word	0x40020028
 8004b60:	40020040 	.word	0x40020040
 8004b64:	40020058 	.word	0x40020058
 8004b68:	40020070 	.word	0x40020070
 8004b6c:	40020088 	.word	0x40020088
 8004b70:	400200a0 	.word	0x400200a0
 8004b74:	400200b8 	.word	0x400200b8
 8004b78:	40020410 	.word	0x40020410
 8004b7c:	40020428 	.word	0x40020428
 8004b80:	40020440 	.word	0x40020440
 8004b84:	40020458 	.word	0x40020458
 8004b88:	40020470 	.word	0x40020470
 8004b8c:	40020488 	.word	0x40020488
 8004b90:	400204a0 	.word	0x400204a0
 8004b94:	400204b8 	.word	0x400204b8
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0308 	and.w	r3, r3, #8
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	bf14      	ite	ne
 8004ba6:	2301      	movne	r3, #1
 8004ba8:	2300      	moveq	r3, #0
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d015      	beq.n	8004bdc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 0204 	bic.w	r2, r2, #4
 8004bbe:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bc4:	f003 031f 	and.w	r3, r3, #31
 8004bc8:	2208      	movs	r2, #8
 8004bca:	409a      	lsls	r2, r3
 8004bcc:	6a3b      	ldr	r3, [r7, #32]
 8004bce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bd4:	f043 0201 	orr.w	r2, r3, #1
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004be0:	f003 031f 	and.w	r3, r3, #31
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d06e      	beq.n	8004cd0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a69      	ldr	r2, [pc, #420]	@ (8004d9c <HAL_DMA_IRQHandler+0x3f8>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d04a      	beq.n	8004c92 <HAL_DMA_IRQHandler+0x2ee>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a67      	ldr	r2, [pc, #412]	@ (8004da0 <HAL_DMA_IRQHandler+0x3fc>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d045      	beq.n	8004c92 <HAL_DMA_IRQHandler+0x2ee>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a66      	ldr	r2, [pc, #408]	@ (8004da4 <HAL_DMA_IRQHandler+0x400>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d040      	beq.n	8004c92 <HAL_DMA_IRQHandler+0x2ee>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a64      	ldr	r2, [pc, #400]	@ (8004da8 <HAL_DMA_IRQHandler+0x404>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d03b      	beq.n	8004c92 <HAL_DMA_IRQHandler+0x2ee>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a63      	ldr	r2, [pc, #396]	@ (8004dac <HAL_DMA_IRQHandler+0x408>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d036      	beq.n	8004c92 <HAL_DMA_IRQHandler+0x2ee>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a61      	ldr	r2, [pc, #388]	@ (8004db0 <HAL_DMA_IRQHandler+0x40c>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d031      	beq.n	8004c92 <HAL_DMA_IRQHandler+0x2ee>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a60      	ldr	r2, [pc, #384]	@ (8004db4 <HAL_DMA_IRQHandler+0x410>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d02c      	beq.n	8004c92 <HAL_DMA_IRQHandler+0x2ee>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a5e      	ldr	r2, [pc, #376]	@ (8004db8 <HAL_DMA_IRQHandler+0x414>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d027      	beq.n	8004c92 <HAL_DMA_IRQHandler+0x2ee>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a5d      	ldr	r2, [pc, #372]	@ (8004dbc <HAL_DMA_IRQHandler+0x418>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d022      	beq.n	8004c92 <HAL_DMA_IRQHandler+0x2ee>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a5b      	ldr	r2, [pc, #364]	@ (8004dc0 <HAL_DMA_IRQHandler+0x41c>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d01d      	beq.n	8004c92 <HAL_DMA_IRQHandler+0x2ee>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a5a      	ldr	r2, [pc, #360]	@ (8004dc4 <HAL_DMA_IRQHandler+0x420>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d018      	beq.n	8004c92 <HAL_DMA_IRQHandler+0x2ee>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a58      	ldr	r2, [pc, #352]	@ (8004dc8 <HAL_DMA_IRQHandler+0x424>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d013      	beq.n	8004c92 <HAL_DMA_IRQHandler+0x2ee>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a57      	ldr	r2, [pc, #348]	@ (8004dcc <HAL_DMA_IRQHandler+0x428>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d00e      	beq.n	8004c92 <HAL_DMA_IRQHandler+0x2ee>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a55      	ldr	r2, [pc, #340]	@ (8004dd0 <HAL_DMA_IRQHandler+0x42c>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d009      	beq.n	8004c92 <HAL_DMA_IRQHandler+0x2ee>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a54      	ldr	r2, [pc, #336]	@ (8004dd4 <HAL_DMA_IRQHandler+0x430>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d004      	beq.n	8004c92 <HAL_DMA_IRQHandler+0x2ee>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a52      	ldr	r2, [pc, #328]	@ (8004dd8 <HAL_DMA_IRQHandler+0x434>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d10a      	bne.n	8004ca8 <HAL_DMA_IRQHandler+0x304>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	bf14      	ite	ne
 8004ca0:	2301      	movne	r3, #1
 8004ca2:	2300      	moveq	r3, #0
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	e003      	b.n	8004cb0 <HAL_DMA_IRQHandler+0x30c>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2300      	movs	r3, #0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d00d      	beq.n	8004cd0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cb8:	f003 031f 	and.w	r3, r3, #31
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	409a      	lsls	r2, r3
 8004cc0:	6a3b      	ldr	r3, [r7, #32]
 8004cc2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cc8:	f043 0202 	orr.w	r2, r3, #2
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004cd4:	f003 031f 	and.w	r3, r3, #31
 8004cd8:	2204      	movs	r2, #4
 8004cda:	409a      	lsls	r2, r3
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	4013      	ands	r3, r2
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	f000 808f 	beq.w	8004e04 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a2c      	ldr	r2, [pc, #176]	@ (8004d9c <HAL_DMA_IRQHandler+0x3f8>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d04a      	beq.n	8004d86 <HAL_DMA_IRQHandler+0x3e2>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a2a      	ldr	r2, [pc, #168]	@ (8004da0 <HAL_DMA_IRQHandler+0x3fc>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d045      	beq.n	8004d86 <HAL_DMA_IRQHandler+0x3e2>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a29      	ldr	r2, [pc, #164]	@ (8004da4 <HAL_DMA_IRQHandler+0x400>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d040      	beq.n	8004d86 <HAL_DMA_IRQHandler+0x3e2>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a27      	ldr	r2, [pc, #156]	@ (8004da8 <HAL_DMA_IRQHandler+0x404>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d03b      	beq.n	8004d86 <HAL_DMA_IRQHandler+0x3e2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a26      	ldr	r2, [pc, #152]	@ (8004dac <HAL_DMA_IRQHandler+0x408>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d036      	beq.n	8004d86 <HAL_DMA_IRQHandler+0x3e2>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a24      	ldr	r2, [pc, #144]	@ (8004db0 <HAL_DMA_IRQHandler+0x40c>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d031      	beq.n	8004d86 <HAL_DMA_IRQHandler+0x3e2>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a23      	ldr	r2, [pc, #140]	@ (8004db4 <HAL_DMA_IRQHandler+0x410>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d02c      	beq.n	8004d86 <HAL_DMA_IRQHandler+0x3e2>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a21      	ldr	r2, [pc, #132]	@ (8004db8 <HAL_DMA_IRQHandler+0x414>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d027      	beq.n	8004d86 <HAL_DMA_IRQHandler+0x3e2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a20      	ldr	r2, [pc, #128]	@ (8004dbc <HAL_DMA_IRQHandler+0x418>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d022      	beq.n	8004d86 <HAL_DMA_IRQHandler+0x3e2>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a1e      	ldr	r2, [pc, #120]	@ (8004dc0 <HAL_DMA_IRQHandler+0x41c>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d01d      	beq.n	8004d86 <HAL_DMA_IRQHandler+0x3e2>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a1d      	ldr	r2, [pc, #116]	@ (8004dc4 <HAL_DMA_IRQHandler+0x420>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d018      	beq.n	8004d86 <HAL_DMA_IRQHandler+0x3e2>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a1b      	ldr	r2, [pc, #108]	@ (8004dc8 <HAL_DMA_IRQHandler+0x424>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d013      	beq.n	8004d86 <HAL_DMA_IRQHandler+0x3e2>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a1a      	ldr	r2, [pc, #104]	@ (8004dcc <HAL_DMA_IRQHandler+0x428>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d00e      	beq.n	8004d86 <HAL_DMA_IRQHandler+0x3e2>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a18      	ldr	r2, [pc, #96]	@ (8004dd0 <HAL_DMA_IRQHandler+0x42c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d009      	beq.n	8004d86 <HAL_DMA_IRQHandler+0x3e2>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a17      	ldr	r2, [pc, #92]	@ (8004dd4 <HAL_DMA_IRQHandler+0x430>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d004      	beq.n	8004d86 <HAL_DMA_IRQHandler+0x3e2>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a15      	ldr	r2, [pc, #84]	@ (8004dd8 <HAL_DMA_IRQHandler+0x434>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d12a      	bne.n	8004ddc <HAL_DMA_IRQHandler+0x438>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0302 	and.w	r3, r3, #2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	bf14      	ite	ne
 8004d94:	2301      	movne	r3, #1
 8004d96:	2300      	moveq	r3, #0
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	e023      	b.n	8004de4 <HAL_DMA_IRQHandler+0x440>
 8004d9c:	40020010 	.word	0x40020010
 8004da0:	40020028 	.word	0x40020028
 8004da4:	40020040 	.word	0x40020040
 8004da8:	40020058 	.word	0x40020058
 8004dac:	40020070 	.word	0x40020070
 8004db0:	40020088 	.word	0x40020088
 8004db4:	400200a0 	.word	0x400200a0
 8004db8:	400200b8 	.word	0x400200b8
 8004dbc:	40020410 	.word	0x40020410
 8004dc0:	40020428 	.word	0x40020428
 8004dc4:	40020440 	.word	0x40020440
 8004dc8:	40020458 	.word	0x40020458
 8004dcc:	40020470 	.word	0x40020470
 8004dd0:	40020488 	.word	0x40020488
 8004dd4:	400204a0 	.word	0x400204a0
 8004dd8:	400204b8 	.word	0x400204b8
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2300      	movs	r3, #0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00d      	beq.n	8004e04 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dec:	f003 031f 	and.w	r3, r3, #31
 8004df0:	2204      	movs	r2, #4
 8004df2:	409a      	lsls	r2, r3
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dfc:	f043 0204 	orr.w	r2, r3, #4
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e08:	f003 031f 	and.w	r3, r3, #31
 8004e0c:	2210      	movs	r2, #16
 8004e0e:	409a      	lsls	r2, r3
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	4013      	ands	r3, r2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f000 80a6 	beq.w	8004f66 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a85      	ldr	r2, [pc, #532]	@ (8005034 <HAL_DMA_IRQHandler+0x690>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d04a      	beq.n	8004eba <HAL_DMA_IRQHandler+0x516>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a83      	ldr	r2, [pc, #524]	@ (8005038 <HAL_DMA_IRQHandler+0x694>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d045      	beq.n	8004eba <HAL_DMA_IRQHandler+0x516>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a82      	ldr	r2, [pc, #520]	@ (800503c <HAL_DMA_IRQHandler+0x698>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d040      	beq.n	8004eba <HAL_DMA_IRQHandler+0x516>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a80      	ldr	r2, [pc, #512]	@ (8005040 <HAL_DMA_IRQHandler+0x69c>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d03b      	beq.n	8004eba <HAL_DMA_IRQHandler+0x516>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a7f      	ldr	r2, [pc, #508]	@ (8005044 <HAL_DMA_IRQHandler+0x6a0>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d036      	beq.n	8004eba <HAL_DMA_IRQHandler+0x516>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a7d      	ldr	r2, [pc, #500]	@ (8005048 <HAL_DMA_IRQHandler+0x6a4>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d031      	beq.n	8004eba <HAL_DMA_IRQHandler+0x516>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a7c      	ldr	r2, [pc, #496]	@ (800504c <HAL_DMA_IRQHandler+0x6a8>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d02c      	beq.n	8004eba <HAL_DMA_IRQHandler+0x516>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a7a      	ldr	r2, [pc, #488]	@ (8005050 <HAL_DMA_IRQHandler+0x6ac>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d027      	beq.n	8004eba <HAL_DMA_IRQHandler+0x516>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a79      	ldr	r2, [pc, #484]	@ (8005054 <HAL_DMA_IRQHandler+0x6b0>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d022      	beq.n	8004eba <HAL_DMA_IRQHandler+0x516>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a77      	ldr	r2, [pc, #476]	@ (8005058 <HAL_DMA_IRQHandler+0x6b4>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d01d      	beq.n	8004eba <HAL_DMA_IRQHandler+0x516>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a76      	ldr	r2, [pc, #472]	@ (800505c <HAL_DMA_IRQHandler+0x6b8>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d018      	beq.n	8004eba <HAL_DMA_IRQHandler+0x516>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a74      	ldr	r2, [pc, #464]	@ (8005060 <HAL_DMA_IRQHandler+0x6bc>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d013      	beq.n	8004eba <HAL_DMA_IRQHandler+0x516>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a73      	ldr	r2, [pc, #460]	@ (8005064 <HAL_DMA_IRQHandler+0x6c0>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d00e      	beq.n	8004eba <HAL_DMA_IRQHandler+0x516>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a71      	ldr	r2, [pc, #452]	@ (8005068 <HAL_DMA_IRQHandler+0x6c4>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d009      	beq.n	8004eba <HAL_DMA_IRQHandler+0x516>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a70      	ldr	r2, [pc, #448]	@ (800506c <HAL_DMA_IRQHandler+0x6c8>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d004      	beq.n	8004eba <HAL_DMA_IRQHandler+0x516>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a6e      	ldr	r2, [pc, #440]	@ (8005070 <HAL_DMA_IRQHandler+0x6cc>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d10a      	bne.n	8004ed0 <HAL_DMA_IRQHandler+0x52c>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0308 	and.w	r3, r3, #8
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	bf14      	ite	ne
 8004ec8:	2301      	movne	r3, #1
 8004eca:	2300      	moveq	r3, #0
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	e009      	b.n	8004ee4 <HAL_DMA_IRQHandler+0x540>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0304 	and.w	r3, r3, #4
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	bf14      	ite	ne
 8004ede:	2301      	movne	r3, #1
 8004ee0:	2300      	moveq	r3, #0
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d03e      	beq.n	8004f66 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eec:	f003 031f 	and.w	r3, r3, #31
 8004ef0:	2210      	movs	r2, #16
 8004ef2:	409a      	lsls	r2, r3
 8004ef4:	6a3b      	ldr	r3, [r7, #32]
 8004ef6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d018      	beq.n	8004f38 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d108      	bne.n	8004f26 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d024      	beq.n	8004f66 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	4798      	blx	r3
 8004f24:	e01f      	b.n	8004f66 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d01b      	beq.n	8004f66 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	4798      	blx	r3
 8004f36:	e016      	b.n	8004f66 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d107      	bne.n	8004f56 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f022 0208 	bic.w	r2, r2, #8
 8004f54:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d003      	beq.n	8004f66 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f6a:	f003 031f 	and.w	r3, r3, #31
 8004f6e:	2220      	movs	r2, #32
 8004f70:	409a      	lsls	r2, r3
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	4013      	ands	r3, r2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f000 8110 	beq.w	800519c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a2c      	ldr	r2, [pc, #176]	@ (8005034 <HAL_DMA_IRQHandler+0x690>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d04a      	beq.n	800501c <HAL_DMA_IRQHandler+0x678>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a2b      	ldr	r2, [pc, #172]	@ (8005038 <HAL_DMA_IRQHandler+0x694>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d045      	beq.n	800501c <HAL_DMA_IRQHandler+0x678>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a29      	ldr	r2, [pc, #164]	@ (800503c <HAL_DMA_IRQHandler+0x698>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d040      	beq.n	800501c <HAL_DMA_IRQHandler+0x678>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a28      	ldr	r2, [pc, #160]	@ (8005040 <HAL_DMA_IRQHandler+0x69c>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d03b      	beq.n	800501c <HAL_DMA_IRQHandler+0x678>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a26      	ldr	r2, [pc, #152]	@ (8005044 <HAL_DMA_IRQHandler+0x6a0>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d036      	beq.n	800501c <HAL_DMA_IRQHandler+0x678>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a25      	ldr	r2, [pc, #148]	@ (8005048 <HAL_DMA_IRQHandler+0x6a4>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d031      	beq.n	800501c <HAL_DMA_IRQHandler+0x678>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a23      	ldr	r2, [pc, #140]	@ (800504c <HAL_DMA_IRQHandler+0x6a8>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d02c      	beq.n	800501c <HAL_DMA_IRQHandler+0x678>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a22      	ldr	r2, [pc, #136]	@ (8005050 <HAL_DMA_IRQHandler+0x6ac>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d027      	beq.n	800501c <HAL_DMA_IRQHandler+0x678>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a20      	ldr	r2, [pc, #128]	@ (8005054 <HAL_DMA_IRQHandler+0x6b0>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d022      	beq.n	800501c <HAL_DMA_IRQHandler+0x678>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a1f      	ldr	r2, [pc, #124]	@ (8005058 <HAL_DMA_IRQHandler+0x6b4>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d01d      	beq.n	800501c <HAL_DMA_IRQHandler+0x678>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a1d      	ldr	r2, [pc, #116]	@ (800505c <HAL_DMA_IRQHandler+0x6b8>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d018      	beq.n	800501c <HAL_DMA_IRQHandler+0x678>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a1c      	ldr	r2, [pc, #112]	@ (8005060 <HAL_DMA_IRQHandler+0x6bc>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d013      	beq.n	800501c <HAL_DMA_IRQHandler+0x678>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a1a      	ldr	r2, [pc, #104]	@ (8005064 <HAL_DMA_IRQHandler+0x6c0>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d00e      	beq.n	800501c <HAL_DMA_IRQHandler+0x678>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a19      	ldr	r2, [pc, #100]	@ (8005068 <HAL_DMA_IRQHandler+0x6c4>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d009      	beq.n	800501c <HAL_DMA_IRQHandler+0x678>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a17      	ldr	r2, [pc, #92]	@ (800506c <HAL_DMA_IRQHandler+0x6c8>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d004      	beq.n	800501c <HAL_DMA_IRQHandler+0x678>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a16      	ldr	r2, [pc, #88]	@ (8005070 <HAL_DMA_IRQHandler+0x6cc>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d12b      	bne.n	8005074 <HAL_DMA_IRQHandler+0x6d0>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0310 	and.w	r3, r3, #16
 8005026:	2b00      	cmp	r3, #0
 8005028:	bf14      	ite	ne
 800502a:	2301      	movne	r3, #1
 800502c:	2300      	moveq	r3, #0
 800502e:	b2db      	uxtb	r3, r3
 8005030:	e02a      	b.n	8005088 <HAL_DMA_IRQHandler+0x6e4>
 8005032:	bf00      	nop
 8005034:	40020010 	.word	0x40020010
 8005038:	40020028 	.word	0x40020028
 800503c:	40020040 	.word	0x40020040
 8005040:	40020058 	.word	0x40020058
 8005044:	40020070 	.word	0x40020070
 8005048:	40020088 	.word	0x40020088
 800504c:	400200a0 	.word	0x400200a0
 8005050:	400200b8 	.word	0x400200b8
 8005054:	40020410 	.word	0x40020410
 8005058:	40020428 	.word	0x40020428
 800505c:	40020440 	.word	0x40020440
 8005060:	40020458 	.word	0x40020458
 8005064:	40020470 	.word	0x40020470
 8005068:	40020488 	.word	0x40020488
 800506c:	400204a0 	.word	0x400204a0
 8005070:	400204b8 	.word	0x400204b8
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	2b00      	cmp	r3, #0
 8005080:	bf14      	ite	ne
 8005082:	2301      	movne	r3, #1
 8005084:	2300      	moveq	r3, #0
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b00      	cmp	r3, #0
 800508a:	f000 8087 	beq.w	800519c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005092:	f003 031f 	and.w	r3, r3, #31
 8005096:	2220      	movs	r2, #32
 8005098:	409a      	lsls	r2, r3
 800509a:	6a3b      	ldr	r3, [r7, #32]
 800509c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b04      	cmp	r3, #4
 80050a8:	d139      	bne.n	800511e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 0216 	bic.w	r2, r2, #22
 80050b8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	695a      	ldr	r2, [r3, #20]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80050c8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d103      	bne.n	80050da <HAL_DMA_IRQHandler+0x736>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d007      	beq.n	80050ea <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f022 0208 	bic.w	r2, r2, #8
 80050e8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050ee:	f003 031f 	and.w	r3, r3, #31
 80050f2:	223f      	movs	r2, #63	@ 0x3f
 80050f4:	409a      	lsls	r2, r3
 80050f6:	6a3b      	ldr	r3, [r7, #32]
 80050f8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800510e:	2b00      	cmp	r3, #0
 8005110:	f000 8382 	beq.w	8005818 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	4798      	blx	r3
          }
          return;
 800511c:	e37c      	b.n	8005818 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d018      	beq.n	800515e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d108      	bne.n	800514c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800513e:	2b00      	cmp	r3, #0
 8005140:	d02c      	beq.n	800519c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	4798      	blx	r3
 800514a:	e027      	b.n	800519c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005150:	2b00      	cmp	r3, #0
 8005152:	d023      	beq.n	800519c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	4798      	blx	r3
 800515c:	e01e      	b.n	800519c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10f      	bne.n	800518c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	681a      	ldr	r2, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 0210 	bic.w	r2, r2, #16
 800517a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005190:	2b00      	cmp	r3, #0
 8005192:	d003      	beq.n	800519c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f000 833e 	beq.w	8005822 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051aa:	f003 0301 	and.w	r3, r3, #1
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f000 8088 	beq.w	80052c4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2204      	movs	r2, #4
 80051b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a89      	ldr	r2, [pc, #548]	@ (80053e8 <HAL_DMA_IRQHandler+0xa44>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d04a      	beq.n	800525c <HAL_DMA_IRQHandler+0x8b8>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a88      	ldr	r2, [pc, #544]	@ (80053ec <HAL_DMA_IRQHandler+0xa48>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d045      	beq.n	800525c <HAL_DMA_IRQHandler+0x8b8>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a86      	ldr	r2, [pc, #536]	@ (80053f0 <HAL_DMA_IRQHandler+0xa4c>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d040      	beq.n	800525c <HAL_DMA_IRQHandler+0x8b8>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a85      	ldr	r2, [pc, #532]	@ (80053f4 <HAL_DMA_IRQHandler+0xa50>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d03b      	beq.n	800525c <HAL_DMA_IRQHandler+0x8b8>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a83      	ldr	r2, [pc, #524]	@ (80053f8 <HAL_DMA_IRQHandler+0xa54>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d036      	beq.n	800525c <HAL_DMA_IRQHandler+0x8b8>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a82      	ldr	r2, [pc, #520]	@ (80053fc <HAL_DMA_IRQHandler+0xa58>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d031      	beq.n	800525c <HAL_DMA_IRQHandler+0x8b8>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a80      	ldr	r2, [pc, #512]	@ (8005400 <HAL_DMA_IRQHandler+0xa5c>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d02c      	beq.n	800525c <HAL_DMA_IRQHandler+0x8b8>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a7f      	ldr	r2, [pc, #508]	@ (8005404 <HAL_DMA_IRQHandler+0xa60>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d027      	beq.n	800525c <HAL_DMA_IRQHandler+0x8b8>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a7d      	ldr	r2, [pc, #500]	@ (8005408 <HAL_DMA_IRQHandler+0xa64>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d022      	beq.n	800525c <HAL_DMA_IRQHandler+0x8b8>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a7c      	ldr	r2, [pc, #496]	@ (800540c <HAL_DMA_IRQHandler+0xa68>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d01d      	beq.n	800525c <HAL_DMA_IRQHandler+0x8b8>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a7a      	ldr	r2, [pc, #488]	@ (8005410 <HAL_DMA_IRQHandler+0xa6c>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d018      	beq.n	800525c <HAL_DMA_IRQHandler+0x8b8>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a79      	ldr	r2, [pc, #484]	@ (8005414 <HAL_DMA_IRQHandler+0xa70>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d013      	beq.n	800525c <HAL_DMA_IRQHandler+0x8b8>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a77      	ldr	r2, [pc, #476]	@ (8005418 <HAL_DMA_IRQHandler+0xa74>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d00e      	beq.n	800525c <HAL_DMA_IRQHandler+0x8b8>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a76      	ldr	r2, [pc, #472]	@ (800541c <HAL_DMA_IRQHandler+0xa78>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d009      	beq.n	800525c <HAL_DMA_IRQHandler+0x8b8>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a74      	ldr	r2, [pc, #464]	@ (8005420 <HAL_DMA_IRQHandler+0xa7c>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d004      	beq.n	800525c <HAL_DMA_IRQHandler+0x8b8>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a73      	ldr	r2, [pc, #460]	@ (8005424 <HAL_DMA_IRQHandler+0xa80>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d108      	bne.n	800526e <HAL_DMA_IRQHandler+0x8ca>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f022 0201 	bic.w	r2, r2, #1
 800526a:	601a      	str	r2, [r3, #0]
 800526c:	e007      	b.n	800527e <HAL_DMA_IRQHandler+0x8da>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 0201 	bic.w	r2, r2, #1
 800527c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	3301      	adds	r3, #1
 8005282:	60fb      	str	r3, [r7, #12]
 8005284:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005286:	429a      	cmp	r2, r3
 8005288:	d307      	bcc.n	800529a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0301 	and.w	r3, r3, #1
 8005294:	2b00      	cmp	r3, #0
 8005296:	d1f2      	bne.n	800527e <HAL_DMA_IRQHandler+0x8da>
 8005298:	e000      	b.n	800529c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800529a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d004      	beq.n	80052b4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2203      	movs	r2, #3
 80052ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80052b2:	e003      	b.n	80052bc <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f000 82aa 	beq.w	8005822 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	4798      	blx	r3
 80052d6:	e2a4      	b.n	8005822 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a52      	ldr	r2, [pc, #328]	@ (8005428 <HAL_DMA_IRQHandler+0xa84>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d04a      	beq.n	8005378 <HAL_DMA_IRQHandler+0x9d4>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a51      	ldr	r2, [pc, #324]	@ (800542c <HAL_DMA_IRQHandler+0xa88>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d045      	beq.n	8005378 <HAL_DMA_IRQHandler+0x9d4>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a4f      	ldr	r2, [pc, #316]	@ (8005430 <HAL_DMA_IRQHandler+0xa8c>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d040      	beq.n	8005378 <HAL_DMA_IRQHandler+0x9d4>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4a4e      	ldr	r2, [pc, #312]	@ (8005434 <HAL_DMA_IRQHandler+0xa90>)
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d03b      	beq.n	8005378 <HAL_DMA_IRQHandler+0x9d4>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a4c      	ldr	r2, [pc, #304]	@ (8005438 <HAL_DMA_IRQHandler+0xa94>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d036      	beq.n	8005378 <HAL_DMA_IRQHandler+0x9d4>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a4b      	ldr	r2, [pc, #300]	@ (800543c <HAL_DMA_IRQHandler+0xa98>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d031      	beq.n	8005378 <HAL_DMA_IRQHandler+0x9d4>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a49      	ldr	r2, [pc, #292]	@ (8005440 <HAL_DMA_IRQHandler+0xa9c>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d02c      	beq.n	8005378 <HAL_DMA_IRQHandler+0x9d4>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a48      	ldr	r2, [pc, #288]	@ (8005444 <HAL_DMA_IRQHandler+0xaa0>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d027      	beq.n	8005378 <HAL_DMA_IRQHandler+0x9d4>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a46      	ldr	r2, [pc, #280]	@ (8005448 <HAL_DMA_IRQHandler+0xaa4>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d022      	beq.n	8005378 <HAL_DMA_IRQHandler+0x9d4>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a45      	ldr	r2, [pc, #276]	@ (800544c <HAL_DMA_IRQHandler+0xaa8>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d01d      	beq.n	8005378 <HAL_DMA_IRQHandler+0x9d4>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a43      	ldr	r2, [pc, #268]	@ (8005450 <HAL_DMA_IRQHandler+0xaac>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d018      	beq.n	8005378 <HAL_DMA_IRQHandler+0x9d4>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a42      	ldr	r2, [pc, #264]	@ (8005454 <HAL_DMA_IRQHandler+0xab0>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d013      	beq.n	8005378 <HAL_DMA_IRQHandler+0x9d4>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a40      	ldr	r2, [pc, #256]	@ (8005458 <HAL_DMA_IRQHandler+0xab4>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d00e      	beq.n	8005378 <HAL_DMA_IRQHandler+0x9d4>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a3f      	ldr	r2, [pc, #252]	@ (800545c <HAL_DMA_IRQHandler+0xab8>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d009      	beq.n	8005378 <HAL_DMA_IRQHandler+0x9d4>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a3d      	ldr	r2, [pc, #244]	@ (8005460 <HAL_DMA_IRQHandler+0xabc>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d004      	beq.n	8005378 <HAL_DMA_IRQHandler+0x9d4>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a3c      	ldr	r2, [pc, #240]	@ (8005464 <HAL_DMA_IRQHandler+0xac0>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d101      	bne.n	800537c <HAL_DMA_IRQHandler+0x9d8>
 8005378:	2301      	movs	r3, #1
 800537a:	e000      	b.n	800537e <HAL_DMA_IRQHandler+0x9da>
 800537c:	2300      	movs	r3, #0
 800537e:	2b00      	cmp	r3, #0
 8005380:	f000 824f 	beq.w	8005822 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005390:	f003 031f 	and.w	r3, r3, #31
 8005394:	2204      	movs	r2, #4
 8005396:	409a      	lsls	r2, r3
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	4013      	ands	r3, r2
 800539c:	2b00      	cmp	r3, #0
 800539e:	f000 80dd 	beq.w	800555c <HAL_DMA_IRQHandler+0xbb8>
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	f003 0304 	and.w	r3, r3, #4
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 80d7 	beq.w	800555c <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053b2:	f003 031f 	and.w	r3, r3, #31
 80053b6:	2204      	movs	r2, #4
 80053b8:	409a      	lsls	r2, r3
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d059      	beq.n	800547c <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d14a      	bne.n	8005468 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	f000 8220 	beq.w	800581c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80053e4:	e21a      	b.n	800581c <HAL_DMA_IRQHandler+0xe78>
 80053e6:	bf00      	nop
 80053e8:	40020010 	.word	0x40020010
 80053ec:	40020028 	.word	0x40020028
 80053f0:	40020040 	.word	0x40020040
 80053f4:	40020058 	.word	0x40020058
 80053f8:	40020070 	.word	0x40020070
 80053fc:	40020088 	.word	0x40020088
 8005400:	400200a0 	.word	0x400200a0
 8005404:	400200b8 	.word	0x400200b8
 8005408:	40020410 	.word	0x40020410
 800540c:	40020428 	.word	0x40020428
 8005410:	40020440 	.word	0x40020440
 8005414:	40020458 	.word	0x40020458
 8005418:	40020470 	.word	0x40020470
 800541c:	40020488 	.word	0x40020488
 8005420:	400204a0 	.word	0x400204a0
 8005424:	400204b8 	.word	0x400204b8
 8005428:	48022c08 	.word	0x48022c08
 800542c:	48022c1c 	.word	0x48022c1c
 8005430:	48022c30 	.word	0x48022c30
 8005434:	48022c44 	.word	0x48022c44
 8005438:	48022c58 	.word	0x48022c58
 800543c:	48022c6c 	.word	0x48022c6c
 8005440:	48022c80 	.word	0x48022c80
 8005444:	48022c94 	.word	0x48022c94
 8005448:	58025408 	.word	0x58025408
 800544c:	5802541c 	.word	0x5802541c
 8005450:	58025430 	.word	0x58025430
 8005454:	58025444 	.word	0x58025444
 8005458:	58025458 	.word	0x58025458
 800545c:	5802546c 	.word	0x5802546c
 8005460:	58025480 	.word	0x58025480
 8005464:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800546c:	2b00      	cmp	r3, #0
 800546e:	f000 81d5 	beq.w	800581c <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800547a:	e1cf      	b.n	800581c <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	f003 0320 	and.w	r3, r3, #32
 8005482:	2b00      	cmp	r3, #0
 8005484:	d160      	bne.n	8005548 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a7f      	ldr	r2, [pc, #508]	@ (8005688 <HAL_DMA_IRQHandler+0xce4>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d04a      	beq.n	8005526 <HAL_DMA_IRQHandler+0xb82>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a7d      	ldr	r2, [pc, #500]	@ (800568c <HAL_DMA_IRQHandler+0xce8>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d045      	beq.n	8005526 <HAL_DMA_IRQHandler+0xb82>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a7c      	ldr	r2, [pc, #496]	@ (8005690 <HAL_DMA_IRQHandler+0xcec>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d040      	beq.n	8005526 <HAL_DMA_IRQHandler+0xb82>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a7a      	ldr	r2, [pc, #488]	@ (8005694 <HAL_DMA_IRQHandler+0xcf0>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d03b      	beq.n	8005526 <HAL_DMA_IRQHandler+0xb82>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4a79      	ldr	r2, [pc, #484]	@ (8005698 <HAL_DMA_IRQHandler+0xcf4>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d036      	beq.n	8005526 <HAL_DMA_IRQHandler+0xb82>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a77      	ldr	r2, [pc, #476]	@ (800569c <HAL_DMA_IRQHandler+0xcf8>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d031      	beq.n	8005526 <HAL_DMA_IRQHandler+0xb82>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a76      	ldr	r2, [pc, #472]	@ (80056a0 <HAL_DMA_IRQHandler+0xcfc>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d02c      	beq.n	8005526 <HAL_DMA_IRQHandler+0xb82>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a74      	ldr	r2, [pc, #464]	@ (80056a4 <HAL_DMA_IRQHandler+0xd00>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d027      	beq.n	8005526 <HAL_DMA_IRQHandler+0xb82>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a73      	ldr	r2, [pc, #460]	@ (80056a8 <HAL_DMA_IRQHandler+0xd04>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d022      	beq.n	8005526 <HAL_DMA_IRQHandler+0xb82>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a71      	ldr	r2, [pc, #452]	@ (80056ac <HAL_DMA_IRQHandler+0xd08>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d01d      	beq.n	8005526 <HAL_DMA_IRQHandler+0xb82>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a70      	ldr	r2, [pc, #448]	@ (80056b0 <HAL_DMA_IRQHandler+0xd0c>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d018      	beq.n	8005526 <HAL_DMA_IRQHandler+0xb82>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a6e      	ldr	r2, [pc, #440]	@ (80056b4 <HAL_DMA_IRQHandler+0xd10>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d013      	beq.n	8005526 <HAL_DMA_IRQHandler+0xb82>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a6d      	ldr	r2, [pc, #436]	@ (80056b8 <HAL_DMA_IRQHandler+0xd14>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d00e      	beq.n	8005526 <HAL_DMA_IRQHandler+0xb82>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a6b      	ldr	r2, [pc, #428]	@ (80056bc <HAL_DMA_IRQHandler+0xd18>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d009      	beq.n	8005526 <HAL_DMA_IRQHandler+0xb82>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a6a      	ldr	r2, [pc, #424]	@ (80056c0 <HAL_DMA_IRQHandler+0xd1c>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d004      	beq.n	8005526 <HAL_DMA_IRQHandler+0xb82>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a68      	ldr	r2, [pc, #416]	@ (80056c4 <HAL_DMA_IRQHandler+0xd20>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d108      	bne.n	8005538 <HAL_DMA_IRQHandler+0xb94>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f022 0208 	bic.w	r2, r2, #8
 8005534:	601a      	str	r2, [r3, #0]
 8005536:	e007      	b.n	8005548 <HAL_DMA_IRQHandler+0xba4>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f022 0204 	bic.w	r2, r2, #4
 8005546:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800554c:	2b00      	cmp	r3, #0
 800554e:	f000 8165 	beq.w	800581c <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800555a:	e15f      	b.n	800581c <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005560:	f003 031f 	and.w	r3, r3, #31
 8005564:	2202      	movs	r2, #2
 8005566:	409a      	lsls	r2, r3
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	4013      	ands	r3, r2
 800556c:	2b00      	cmp	r3, #0
 800556e:	f000 80c5 	beq.w	80056fc <HAL_DMA_IRQHandler+0xd58>
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	2b00      	cmp	r3, #0
 800557a:	f000 80bf 	beq.w	80056fc <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005582:	f003 031f 	and.w	r3, r3, #31
 8005586:	2202      	movs	r2, #2
 8005588:	409a      	lsls	r2, r3
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d018      	beq.n	80055ca <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d109      	bne.n	80055b6 <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f000 813a 	beq.w	8005820 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055b4:	e134      	b.n	8005820 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f000 8130 	beq.w	8005820 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055c8:	e12a      	b.n	8005820 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	f003 0320 	and.w	r3, r3, #32
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	f040 8089 	bne.w	80056e8 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a2b      	ldr	r2, [pc, #172]	@ (8005688 <HAL_DMA_IRQHandler+0xce4>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d04a      	beq.n	8005676 <HAL_DMA_IRQHandler+0xcd2>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a29      	ldr	r2, [pc, #164]	@ (800568c <HAL_DMA_IRQHandler+0xce8>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d045      	beq.n	8005676 <HAL_DMA_IRQHandler+0xcd2>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a28      	ldr	r2, [pc, #160]	@ (8005690 <HAL_DMA_IRQHandler+0xcec>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d040      	beq.n	8005676 <HAL_DMA_IRQHandler+0xcd2>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a26      	ldr	r2, [pc, #152]	@ (8005694 <HAL_DMA_IRQHandler+0xcf0>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d03b      	beq.n	8005676 <HAL_DMA_IRQHandler+0xcd2>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a25      	ldr	r2, [pc, #148]	@ (8005698 <HAL_DMA_IRQHandler+0xcf4>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d036      	beq.n	8005676 <HAL_DMA_IRQHandler+0xcd2>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a23      	ldr	r2, [pc, #140]	@ (800569c <HAL_DMA_IRQHandler+0xcf8>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d031      	beq.n	8005676 <HAL_DMA_IRQHandler+0xcd2>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a22      	ldr	r2, [pc, #136]	@ (80056a0 <HAL_DMA_IRQHandler+0xcfc>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d02c      	beq.n	8005676 <HAL_DMA_IRQHandler+0xcd2>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a20      	ldr	r2, [pc, #128]	@ (80056a4 <HAL_DMA_IRQHandler+0xd00>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d027      	beq.n	8005676 <HAL_DMA_IRQHandler+0xcd2>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a1f      	ldr	r2, [pc, #124]	@ (80056a8 <HAL_DMA_IRQHandler+0xd04>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d022      	beq.n	8005676 <HAL_DMA_IRQHandler+0xcd2>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	4a1d      	ldr	r2, [pc, #116]	@ (80056ac <HAL_DMA_IRQHandler+0xd08>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d01d      	beq.n	8005676 <HAL_DMA_IRQHandler+0xcd2>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a1c      	ldr	r2, [pc, #112]	@ (80056b0 <HAL_DMA_IRQHandler+0xd0c>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d018      	beq.n	8005676 <HAL_DMA_IRQHandler+0xcd2>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a1a      	ldr	r2, [pc, #104]	@ (80056b4 <HAL_DMA_IRQHandler+0xd10>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d013      	beq.n	8005676 <HAL_DMA_IRQHandler+0xcd2>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a19      	ldr	r2, [pc, #100]	@ (80056b8 <HAL_DMA_IRQHandler+0xd14>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d00e      	beq.n	8005676 <HAL_DMA_IRQHandler+0xcd2>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a17      	ldr	r2, [pc, #92]	@ (80056bc <HAL_DMA_IRQHandler+0xd18>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d009      	beq.n	8005676 <HAL_DMA_IRQHandler+0xcd2>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4a16      	ldr	r2, [pc, #88]	@ (80056c0 <HAL_DMA_IRQHandler+0xd1c>)
 8005668:	4293      	cmp	r3, r2
 800566a:	d004      	beq.n	8005676 <HAL_DMA_IRQHandler+0xcd2>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a14      	ldr	r2, [pc, #80]	@ (80056c4 <HAL_DMA_IRQHandler+0xd20>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d128      	bne.n	80056c8 <HAL_DMA_IRQHandler+0xd24>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f022 0214 	bic.w	r2, r2, #20
 8005684:	601a      	str	r2, [r3, #0]
 8005686:	e027      	b.n	80056d8 <HAL_DMA_IRQHandler+0xd34>
 8005688:	40020010 	.word	0x40020010
 800568c:	40020028 	.word	0x40020028
 8005690:	40020040 	.word	0x40020040
 8005694:	40020058 	.word	0x40020058
 8005698:	40020070 	.word	0x40020070
 800569c:	40020088 	.word	0x40020088
 80056a0:	400200a0 	.word	0x400200a0
 80056a4:	400200b8 	.word	0x400200b8
 80056a8:	40020410 	.word	0x40020410
 80056ac:	40020428 	.word	0x40020428
 80056b0:	40020440 	.word	0x40020440
 80056b4:	40020458 	.word	0x40020458
 80056b8:	40020470 	.word	0x40020470
 80056bc:	40020488 	.word	0x40020488
 80056c0:	400204a0 	.word	0x400204a0
 80056c4:	400204b8 	.word	0x400204b8
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 020a 	bic.w	r2, r2, #10
 80056d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 8097 	beq.w	8005820 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80056fa:	e091      	b.n	8005820 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005700:	f003 031f 	and.w	r3, r3, #31
 8005704:	2208      	movs	r2, #8
 8005706:	409a      	lsls	r2, r3
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	4013      	ands	r3, r2
 800570c:	2b00      	cmp	r3, #0
 800570e:	f000 8088 	beq.w	8005822 <HAL_DMA_IRQHandler+0xe7e>
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	f003 0308 	and.w	r3, r3, #8
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 8082 	beq.w	8005822 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a41      	ldr	r2, [pc, #260]	@ (8005828 <HAL_DMA_IRQHandler+0xe84>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d04a      	beq.n	80057be <HAL_DMA_IRQHandler+0xe1a>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a3f      	ldr	r2, [pc, #252]	@ (800582c <HAL_DMA_IRQHandler+0xe88>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d045      	beq.n	80057be <HAL_DMA_IRQHandler+0xe1a>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a3e      	ldr	r2, [pc, #248]	@ (8005830 <HAL_DMA_IRQHandler+0xe8c>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d040      	beq.n	80057be <HAL_DMA_IRQHandler+0xe1a>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a3c      	ldr	r2, [pc, #240]	@ (8005834 <HAL_DMA_IRQHandler+0xe90>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d03b      	beq.n	80057be <HAL_DMA_IRQHandler+0xe1a>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a3b      	ldr	r2, [pc, #236]	@ (8005838 <HAL_DMA_IRQHandler+0xe94>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d036      	beq.n	80057be <HAL_DMA_IRQHandler+0xe1a>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a39      	ldr	r2, [pc, #228]	@ (800583c <HAL_DMA_IRQHandler+0xe98>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d031      	beq.n	80057be <HAL_DMA_IRQHandler+0xe1a>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a38      	ldr	r2, [pc, #224]	@ (8005840 <HAL_DMA_IRQHandler+0xe9c>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d02c      	beq.n	80057be <HAL_DMA_IRQHandler+0xe1a>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a36      	ldr	r2, [pc, #216]	@ (8005844 <HAL_DMA_IRQHandler+0xea0>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d027      	beq.n	80057be <HAL_DMA_IRQHandler+0xe1a>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4a35      	ldr	r2, [pc, #212]	@ (8005848 <HAL_DMA_IRQHandler+0xea4>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d022      	beq.n	80057be <HAL_DMA_IRQHandler+0xe1a>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a33      	ldr	r2, [pc, #204]	@ (800584c <HAL_DMA_IRQHandler+0xea8>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d01d      	beq.n	80057be <HAL_DMA_IRQHandler+0xe1a>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a32      	ldr	r2, [pc, #200]	@ (8005850 <HAL_DMA_IRQHandler+0xeac>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d018      	beq.n	80057be <HAL_DMA_IRQHandler+0xe1a>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a30      	ldr	r2, [pc, #192]	@ (8005854 <HAL_DMA_IRQHandler+0xeb0>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d013      	beq.n	80057be <HAL_DMA_IRQHandler+0xe1a>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a2f      	ldr	r2, [pc, #188]	@ (8005858 <HAL_DMA_IRQHandler+0xeb4>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d00e      	beq.n	80057be <HAL_DMA_IRQHandler+0xe1a>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a2d      	ldr	r2, [pc, #180]	@ (800585c <HAL_DMA_IRQHandler+0xeb8>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d009      	beq.n	80057be <HAL_DMA_IRQHandler+0xe1a>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	4a2c      	ldr	r2, [pc, #176]	@ (8005860 <HAL_DMA_IRQHandler+0xebc>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d004      	beq.n	80057be <HAL_DMA_IRQHandler+0xe1a>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a2a      	ldr	r2, [pc, #168]	@ (8005864 <HAL_DMA_IRQHandler+0xec0>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d108      	bne.n	80057d0 <HAL_DMA_IRQHandler+0xe2c>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f022 021c 	bic.w	r2, r2, #28
 80057cc:	601a      	str	r2, [r3, #0]
 80057ce:	e007      	b.n	80057e0 <HAL_DMA_IRQHandler+0xe3c>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f022 020e 	bic.w	r2, r2, #14
 80057de:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057e4:	f003 031f 	and.w	r3, r3, #31
 80057e8:	2201      	movs	r2, #1
 80057ea:	409a      	lsls	r2, r3
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2201      	movs	r2, #1
 80057fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800580a:	2b00      	cmp	r3, #0
 800580c:	d009      	beq.n	8005822 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	4798      	blx	r3
 8005816:	e004      	b.n	8005822 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8005818:	bf00      	nop
 800581a:	e002      	b.n	8005822 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800581c:	bf00      	nop
 800581e:	e000      	b.n	8005822 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005820:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005822:	3728      	adds	r7, #40	@ 0x28
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	40020010 	.word	0x40020010
 800582c:	40020028 	.word	0x40020028
 8005830:	40020040 	.word	0x40020040
 8005834:	40020058 	.word	0x40020058
 8005838:	40020070 	.word	0x40020070
 800583c:	40020088 	.word	0x40020088
 8005840:	400200a0 	.word	0x400200a0
 8005844:	400200b8 	.word	0x400200b8
 8005848:	40020410 	.word	0x40020410
 800584c:	40020428 	.word	0x40020428
 8005850:	40020440 	.word	0x40020440
 8005854:	40020458 	.word	0x40020458
 8005858:	40020470 	.word	0x40020470
 800585c:	40020488 	.word	0x40020488
 8005860:	400204a0 	.word	0x400204a0
 8005864:	400204b8 	.word	0x400204b8

08005868 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005868:	b480      	push	{r7}
 800586a:	b087      	sub	sp, #28
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
 8005874:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800587a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005880:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a7f      	ldr	r2, [pc, #508]	@ (8005a84 <DMA_SetConfig+0x21c>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d072      	beq.n	8005972 <DMA_SetConfig+0x10a>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a7d      	ldr	r2, [pc, #500]	@ (8005a88 <DMA_SetConfig+0x220>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d06d      	beq.n	8005972 <DMA_SetConfig+0x10a>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a7c      	ldr	r2, [pc, #496]	@ (8005a8c <DMA_SetConfig+0x224>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d068      	beq.n	8005972 <DMA_SetConfig+0x10a>
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a7a      	ldr	r2, [pc, #488]	@ (8005a90 <DMA_SetConfig+0x228>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d063      	beq.n	8005972 <DMA_SetConfig+0x10a>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a79      	ldr	r2, [pc, #484]	@ (8005a94 <DMA_SetConfig+0x22c>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d05e      	beq.n	8005972 <DMA_SetConfig+0x10a>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a77      	ldr	r2, [pc, #476]	@ (8005a98 <DMA_SetConfig+0x230>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d059      	beq.n	8005972 <DMA_SetConfig+0x10a>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4a76      	ldr	r2, [pc, #472]	@ (8005a9c <DMA_SetConfig+0x234>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d054      	beq.n	8005972 <DMA_SetConfig+0x10a>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a74      	ldr	r2, [pc, #464]	@ (8005aa0 <DMA_SetConfig+0x238>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d04f      	beq.n	8005972 <DMA_SetConfig+0x10a>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a73      	ldr	r2, [pc, #460]	@ (8005aa4 <DMA_SetConfig+0x23c>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d04a      	beq.n	8005972 <DMA_SetConfig+0x10a>
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a71      	ldr	r2, [pc, #452]	@ (8005aa8 <DMA_SetConfig+0x240>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d045      	beq.n	8005972 <DMA_SetConfig+0x10a>
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a70      	ldr	r2, [pc, #448]	@ (8005aac <DMA_SetConfig+0x244>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d040      	beq.n	8005972 <DMA_SetConfig+0x10a>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a6e      	ldr	r2, [pc, #440]	@ (8005ab0 <DMA_SetConfig+0x248>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d03b      	beq.n	8005972 <DMA_SetConfig+0x10a>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a6d      	ldr	r2, [pc, #436]	@ (8005ab4 <DMA_SetConfig+0x24c>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d036      	beq.n	8005972 <DMA_SetConfig+0x10a>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a6b      	ldr	r2, [pc, #428]	@ (8005ab8 <DMA_SetConfig+0x250>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d031      	beq.n	8005972 <DMA_SetConfig+0x10a>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a6a      	ldr	r2, [pc, #424]	@ (8005abc <DMA_SetConfig+0x254>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d02c      	beq.n	8005972 <DMA_SetConfig+0x10a>
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a68      	ldr	r2, [pc, #416]	@ (8005ac0 <DMA_SetConfig+0x258>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d027      	beq.n	8005972 <DMA_SetConfig+0x10a>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a67      	ldr	r2, [pc, #412]	@ (8005ac4 <DMA_SetConfig+0x25c>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d022      	beq.n	8005972 <DMA_SetConfig+0x10a>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a65      	ldr	r2, [pc, #404]	@ (8005ac8 <DMA_SetConfig+0x260>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d01d      	beq.n	8005972 <DMA_SetConfig+0x10a>
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a64      	ldr	r2, [pc, #400]	@ (8005acc <DMA_SetConfig+0x264>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d018      	beq.n	8005972 <DMA_SetConfig+0x10a>
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a62      	ldr	r2, [pc, #392]	@ (8005ad0 <DMA_SetConfig+0x268>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d013      	beq.n	8005972 <DMA_SetConfig+0x10a>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a61      	ldr	r2, [pc, #388]	@ (8005ad4 <DMA_SetConfig+0x26c>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d00e      	beq.n	8005972 <DMA_SetConfig+0x10a>
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a5f      	ldr	r2, [pc, #380]	@ (8005ad8 <DMA_SetConfig+0x270>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d009      	beq.n	8005972 <DMA_SetConfig+0x10a>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a5e      	ldr	r2, [pc, #376]	@ (8005adc <DMA_SetConfig+0x274>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d004      	beq.n	8005972 <DMA_SetConfig+0x10a>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a5c      	ldr	r2, [pc, #368]	@ (8005ae0 <DMA_SetConfig+0x278>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d101      	bne.n	8005976 <DMA_SetConfig+0x10e>
 8005972:	2301      	movs	r3, #1
 8005974:	e000      	b.n	8005978 <DMA_SetConfig+0x110>
 8005976:	2300      	movs	r3, #0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00d      	beq.n	8005998 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005984:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800598a:	2b00      	cmp	r3, #0
 800598c:	d004      	beq.n	8005998 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005996:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a39      	ldr	r2, [pc, #228]	@ (8005a84 <DMA_SetConfig+0x21c>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d04a      	beq.n	8005a38 <DMA_SetConfig+0x1d0>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a38      	ldr	r2, [pc, #224]	@ (8005a88 <DMA_SetConfig+0x220>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d045      	beq.n	8005a38 <DMA_SetConfig+0x1d0>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a36      	ldr	r2, [pc, #216]	@ (8005a8c <DMA_SetConfig+0x224>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d040      	beq.n	8005a38 <DMA_SetConfig+0x1d0>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a35      	ldr	r2, [pc, #212]	@ (8005a90 <DMA_SetConfig+0x228>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d03b      	beq.n	8005a38 <DMA_SetConfig+0x1d0>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a33      	ldr	r2, [pc, #204]	@ (8005a94 <DMA_SetConfig+0x22c>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d036      	beq.n	8005a38 <DMA_SetConfig+0x1d0>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a32      	ldr	r2, [pc, #200]	@ (8005a98 <DMA_SetConfig+0x230>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d031      	beq.n	8005a38 <DMA_SetConfig+0x1d0>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a30      	ldr	r2, [pc, #192]	@ (8005a9c <DMA_SetConfig+0x234>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d02c      	beq.n	8005a38 <DMA_SetConfig+0x1d0>
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a2f      	ldr	r2, [pc, #188]	@ (8005aa0 <DMA_SetConfig+0x238>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d027      	beq.n	8005a38 <DMA_SetConfig+0x1d0>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a2d      	ldr	r2, [pc, #180]	@ (8005aa4 <DMA_SetConfig+0x23c>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d022      	beq.n	8005a38 <DMA_SetConfig+0x1d0>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a2c      	ldr	r2, [pc, #176]	@ (8005aa8 <DMA_SetConfig+0x240>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d01d      	beq.n	8005a38 <DMA_SetConfig+0x1d0>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a2a      	ldr	r2, [pc, #168]	@ (8005aac <DMA_SetConfig+0x244>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d018      	beq.n	8005a38 <DMA_SetConfig+0x1d0>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a29      	ldr	r2, [pc, #164]	@ (8005ab0 <DMA_SetConfig+0x248>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d013      	beq.n	8005a38 <DMA_SetConfig+0x1d0>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a27      	ldr	r2, [pc, #156]	@ (8005ab4 <DMA_SetConfig+0x24c>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d00e      	beq.n	8005a38 <DMA_SetConfig+0x1d0>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a26      	ldr	r2, [pc, #152]	@ (8005ab8 <DMA_SetConfig+0x250>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d009      	beq.n	8005a38 <DMA_SetConfig+0x1d0>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a24      	ldr	r2, [pc, #144]	@ (8005abc <DMA_SetConfig+0x254>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d004      	beq.n	8005a38 <DMA_SetConfig+0x1d0>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	4a23      	ldr	r2, [pc, #140]	@ (8005ac0 <DMA_SetConfig+0x258>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d101      	bne.n	8005a3c <DMA_SetConfig+0x1d4>
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e000      	b.n	8005a3e <DMA_SetConfig+0x1d6>
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d059      	beq.n	8005af6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a46:	f003 031f 	and.w	r3, r3, #31
 8005a4a:	223f      	movs	r2, #63	@ 0x3f
 8005a4c:	409a      	lsls	r2, r3
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005a60:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	683a      	ldr	r2, [r7, #0]
 8005a68:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	2b40      	cmp	r3, #64	@ 0x40
 8005a70:	d138      	bne.n	8005ae4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005a82:	e0ae      	b.n	8005be2 <DMA_SetConfig+0x37a>
 8005a84:	40020010 	.word	0x40020010
 8005a88:	40020028 	.word	0x40020028
 8005a8c:	40020040 	.word	0x40020040
 8005a90:	40020058 	.word	0x40020058
 8005a94:	40020070 	.word	0x40020070
 8005a98:	40020088 	.word	0x40020088
 8005a9c:	400200a0 	.word	0x400200a0
 8005aa0:	400200b8 	.word	0x400200b8
 8005aa4:	40020410 	.word	0x40020410
 8005aa8:	40020428 	.word	0x40020428
 8005aac:	40020440 	.word	0x40020440
 8005ab0:	40020458 	.word	0x40020458
 8005ab4:	40020470 	.word	0x40020470
 8005ab8:	40020488 	.word	0x40020488
 8005abc:	400204a0 	.word	0x400204a0
 8005ac0:	400204b8 	.word	0x400204b8
 8005ac4:	58025408 	.word	0x58025408
 8005ac8:	5802541c 	.word	0x5802541c
 8005acc:	58025430 	.word	0x58025430
 8005ad0:	58025444 	.word	0x58025444
 8005ad4:	58025458 	.word	0x58025458
 8005ad8:	5802546c 	.word	0x5802546c
 8005adc:	58025480 	.word	0x58025480
 8005ae0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	60da      	str	r2, [r3, #12]
}
 8005af4:	e075      	b.n	8005be2 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a3d      	ldr	r2, [pc, #244]	@ (8005bf0 <DMA_SetConfig+0x388>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d04a      	beq.n	8005b96 <DMA_SetConfig+0x32e>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a3b      	ldr	r2, [pc, #236]	@ (8005bf4 <DMA_SetConfig+0x38c>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d045      	beq.n	8005b96 <DMA_SetConfig+0x32e>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a3a      	ldr	r2, [pc, #232]	@ (8005bf8 <DMA_SetConfig+0x390>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d040      	beq.n	8005b96 <DMA_SetConfig+0x32e>
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a38      	ldr	r2, [pc, #224]	@ (8005bfc <DMA_SetConfig+0x394>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d03b      	beq.n	8005b96 <DMA_SetConfig+0x32e>
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a37      	ldr	r2, [pc, #220]	@ (8005c00 <DMA_SetConfig+0x398>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d036      	beq.n	8005b96 <DMA_SetConfig+0x32e>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a35      	ldr	r2, [pc, #212]	@ (8005c04 <DMA_SetConfig+0x39c>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d031      	beq.n	8005b96 <DMA_SetConfig+0x32e>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a34      	ldr	r2, [pc, #208]	@ (8005c08 <DMA_SetConfig+0x3a0>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d02c      	beq.n	8005b96 <DMA_SetConfig+0x32e>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a32      	ldr	r2, [pc, #200]	@ (8005c0c <DMA_SetConfig+0x3a4>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d027      	beq.n	8005b96 <DMA_SetConfig+0x32e>
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a31      	ldr	r2, [pc, #196]	@ (8005c10 <DMA_SetConfig+0x3a8>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d022      	beq.n	8005b96 <DMA_SetConfig+0x32e>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a2f      	ldr	r2, [pc, #188]	@ (8005c14 <DMA_SetConfig+0x3ac>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d01d      	beq.n	8005b96 <DMA_SetConfig+0x32e>
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a2e      	ldr	r2, [pc, #184]	@ (8005c18 <DMA_SetConfig+0x3b0>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d018      	beq.n	8005b96 <DMA_SetConfig+0x32e>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a2c      	ldr	r2, [pc, #176]	@ (8005c1c <DMA_SetConfig+0x3b4>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d013      	beq.n	8005b96 <DMA_SetConfig+0x32e>
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a2b      	ldr	r2, [pc, #172]	@ (8005c20 <DMA_SetConfig+0x3b8>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d00e      	beq.n	8005b96 <DMA_SetConfig+0x32e>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a29      	ldr	r2, [pc, #164]	@ (8005c24 <DMA_SetConfig+0x3bc>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d009      	beq.n	8005b96 <DMA_SetConfig+0x32e>
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a28      	ldr	r2, [pc, #160]	@ (8005c28 <DMA_SetConfig+0x3c0>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d004      	beq.n	8005b96 <DMA_SetConfig+0x32e>
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a26      	ldr	r2, [pc, #152]	@ (8005c2c <DMA_SetConfig+0x3c4>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d101      	bne.n	8005b9a <DMA_SetConfig+0x332>
 8005b96:	2301      	movs	r3, #1
 8005b98:	e000      	b.n	8005b9c <DMA_SetConfig+0x334>
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d020      	beq.n	8005be2 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ba4:	f003 031f 	and.w	r3, r3, #31
 8005ba8:	2201      	movs	r2, #1
 8005baa:	409a      	lsls	r2, r3
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	683a      	ldr	r2, [r7, #0]
 8005bb6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	2b40      	cmp	r3, #64	@ 0x40
 8005bbe:	d108      	bne.n	8005bd2 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	687a      	ldr	r2, [r7, #4]
 8005bc6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	60da      	str	r2, [r3, #12]
}
 8005bd0:	e007      	b.n	8005be2 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	60da      	str	r2, [r3, #12]
}
 8005be2:	bf00      	nop
 8005be4:	371c      	adds	r7, #28
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	48022c08 	.word	0x48022c08
 8005bf4:	48022c1c 	.word	0x48022c1c
 8005bf8:	48022c30 	.word	0x48022c30
 8005bfc:	48022c44 	.word	0x48022c44
 8005c00:	48022c58 	.word	0x48022c58
 8005c04:	48022c6c 	.word	0x48022c6c
 8005c08:	48022c80 	.word	0x48022c80
 8005c0c:	48022c94 	.word	0x48022c94
 8005c10:	58025408 	.word	0x58025408
 8005c14:	5802541c 	.word	0x5802541c
 8005c18:	58025430 	.word	0x58025430
 8005c1c:	58025444 	.word	0x58025444
 8005c20:	58025458 	.word	0x58025458
 8005c24:	5802546c 	.word	0x5802546c
 8005c28:	58025480 	.word	0x58025480
 8005c2c:	58025494 	.word	0x58025494

08005c30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a42      	ldr	r2, [pc, #264]	@ (8005d48 <DMA_CalcBaseAndBitshift+0x118>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d04a      	beq.n	8005cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a41      	ldr	r2, [pc, #260]	@ (8005d4c <DMA_CalcBaseAndBitshift+0x11c>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d045      	beq.n	8005cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a3f      	ldr	r2, [pc, #252]	@ (8005d50 <DMA_CalcBaseAndBitshift+0x120>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d040      	beq.n	8005cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a3e      	ldr	r2, [pc, #248]	@ (8005d54 <DMA_CalcBaseAndBitshift+0x124>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d03b      	beq.n	8005cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a3c      	ldr	r2, [pc, #240]	@ (8005d58 <DMA_CalcBaseAndBitshift+0x128>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d036      	beq.n	8005cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a3b      	ldr	r2, [pc, #236]	@ (8005d5c <DMA_CalcBaseAndBitshift+0x12c>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d031      	beq.n	8005cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a39      	ldr	r2, [pc, #228]	@ (8005d60 <DMA_CalcBaseAndBitshift+0x130>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d02c      	beq.n	8005cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a38      	ldr	r2, [pc, #224]	@ (8005d64 <DMA_CalcBaseAndBitshift+0x134>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d027      	beq.n	8005cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a36      	ldr	r2, [pc, #216]	@ (8005d68 <DMA_CalcBaseAndBitshift+0x138>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d022      	beq.n	8005cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a35      	ldr	r2, [pc, #212]	@ (8005d6c <DMA_CalcBaseAndBitshift+0x13c>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d01d      	beq.n	8005cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a33      	ldr	r2, [pc, #204]	@ (8005d70 <DMA_CalcBaseAndBitshift+0x140>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d018      	beq.n	8005cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a32      	ldr	r2, [pc, #200]	@ (8005d74 <DMA_CalcBaseAndBitshift+0x144>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d013      	beq.n	8005cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a30      	ldr	r2, [pc, #192]	@ (8005d78 <DMA_CalcBaseAndBitshift+0x148>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d00e      	beq.n	8005cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a2f      	ldr	r2, [pc, #188]	@ (8005d7c <DMA_CalcBaseAndBitshift+0x14c>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d009      	beq.n	8005cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a2d      	ldr	r2, [pc, #180]	@ (8005d80 <DMA_CalcBaseAndBitshift+0x150>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d004      	beq.n	8005cd8 <DMA_CalcBaseAndBitshift+0xa8>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a2c      	ldr	r2, [pc, #176]	@ (8005d84 <DMA_CalcBaseAndBitshift+0x154>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d101      	bne.n	8005cdc <DMA_CalcBaseAndBitshift+0xac>
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e000      	b.n	8005cde <DMA_CalcBaseAndBitshift+0xae>
 8005cdc:	2300      	movs	r3, #0
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d024      	beq.n	8005d2c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	3b10      	subs	r3, #16
 8005cea:	4a27      	ldr	r2, [pc, #156]	@ (8005d88 <DMA_CalcBaseAndBitshift+0x158>)
 8005cec:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf0:	091b      	lsrs	r3, r3, #4
 8005cf2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f003 0307 	and.w	r3, r3, #7
 8005cfa:	4a24      	ldr	r2, [pc, #144]	@ (8005d8c <DMA_CalcBaseAndBitshift+0x15c>)
 8005cfc:	5cd3      	ldrb	r3, [r2, r3]
 8005cfe:	461a      	mov	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2b03      	cmp	r3, #3
 8005d08:	d908      	bls.n	8005d1c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	4b1f      	ldr	r3, [pc, #124]	@ (8005d90 <DMA_CalcBaseAndBitshift+0x160>)
 8005d12:	4013      	ands	r3, r2
 8005d14:	1d1a      	adds	r2, r3, #4
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	659a      	str	r2, [r3, #88]	@ 0x58
 8005d1a:	e00d      	b.n	8005d38 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	461a      	mov	r2, r3
 8005d22:	4b1b      	ldr	r3, [pc, #108]	@ (8005d90 <DMA_CalcBaseAndBitshift+0x160>)
 8005d24:	4013      	ands	r3, r2
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d2a:	e005      	b.n	8005d38 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3714      	adds	r7, #20
 8005d40:	46bd      	mov	sp, r7
 8005d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d46:	4770      	bx	lr
 8005d48:	40020010 	.word	0x40020010
 8005d4c:	40020028 	.word	0x40020028
 8005d50:	40020040 	.word	0x40020040
 8005d54:	40020058 	.word	0x40020058
 8005d58:	40020070 	.word	0x40020070
 8005d5c:	40020088 	.word	0x40020088
 8005d60:	400200a0 	.word	0x400200a0
 8005d64:	400200b8 	.word	0x400200b8
 8005d68:	40020410 	.word	0x40020410
 8005d6c:	40020428 	.word	0x40020428
 8005d70:	40020440 	.word	0x40020440
 8005d74:	40020458 	.word	0x40020458
 8005d78:	40020470 	.word	0x40020470
 8005d7c:	40020488 	.word	0x40020488
 8005d80:	400204a0 	.word	0x400204a0
 8005d84:	400204b8 	.word	0x400204b8
 8005d88:	aaaaaaab 	.word	0xaaaaaaab
 8005d8c:	0801121c 	.word	0x0801121c
 8005d90:	fffffc00 	.word	0xfffffc00

08005d94 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	699b      	ldr	r3, [r3, #24]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d120      	bne.n	8005dea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dac:	2b03      	cmp	r3, #3
 8005dae:	d858      	bhi.n	8005e62 <DMA_CheckFifoParam+0xce>
 8005db0:	a201      	add	r2, pc, #4	@ (adr r2, 8005db8 <DMA_CheckFifoParam+0x24>)
 8005db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005db6:	bf00      	nop
 8005db8:	08005dc9 	.word	0x08005dc9
 8005dbc:	08005ddb 	.word	0x08005ddb
 8005dc0:	08005dc9 	.word	0x08005dc9
 8005dc4:	08005e63 	.word	0x08005e63
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dcc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d048      	beq.n	8005e66 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005dd8:	e045      	b.n	8005e66 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dde:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005de2:	d142      	bne.n	8005e6a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005de8:	e03f      	b.n	8005e6a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005df2:	d123      	bne.n	8005e3c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df8:	2b03      	cmp	r3, #3
 8005dfa:	d838      	bhi.n	8005e6e <DMA_CheckFifoParam+0xda>
 8005dfc:	a201      	add	r2, pc, #4	@ (adr r2, 8005e04 <DMA_CheckFifoParam+0x70>)
 8005dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e02:	bf00      	nop
 8005e04:	08005e15 	.word	0x08005e15
 8005e08:	08005e1b 	.word	0x08005e1b
 8005e0c:	08005e15 	.word	0x08005e15
 8005e10:	08005e2d 	.word	0x08005e2d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	73fb      	strb	r3, [r7, #15]
        break;
 8005e18:	e030      	b.n	8005e7c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e1e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d025      	beq.n	8005e72 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005e2a:	e022      	b.n	8005e72 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e30:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005e34:	d11f      	bne.n	8005e76 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005e3a:	e01c      	b.n	8005e76 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d902      	bls.n	8005e4a <DMA_CheckFifoParam+0xb6>
 8005e44:	2b03      	cmp	r3, #3
 8005e46:	d003      	beq.n	8005e50 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005e48:	e018      	b.n	8005e7c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	73fb      	strb	r3, [r7, #15]
        break;
 8005e4e:	e015      	b.n	8005e7c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d00e      	beq.n	8005e7a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	73fb      	strb	r3, [r7, #15]
    break;
 8005e60:	e00b      	b.n	8005e7a <DMA_CheckFifoParam+0xe6>
        break;
 8005e62:	bf00      	nop
 8005e64:	e00a      	b.n	8005e7c <DMA_CheckFifoParam+0xe8>
        break;
 8005e66:	bf00      	nop
 8005e68:	e008      	b.n	8005e7c <DMA_CheckFifoParam+0xe8>
        break;
 8005e6a:	bf00      	nop
 8005e6c:	e006      	b.n	8005e7c <DMA_CheckFifoParam+0xe8>
        break;
 8005e6e:	bf00      	nop
 8005e70:	e004      	b.n	8005e7c <DMA_CheckFifoParam+0xe8>
        break;
 8005e72:	bf00      	nop
 8005e74:	e002      	b.n	8005e7c <DMA_CheckFifoParam+0xe8>
        break;
 8005e76:	bf00      	nop
 8005e78:	e000      	b.n	8005e7c <DMA_CheckFifoParam+0xe8>
    break;
 8005e7a:	bf00      	nop
    }
  }

  return status;
 8005e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3714      	adds	r7, #20
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop

08005e8c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b085      	sub	sp, #20
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a38      	ldr	r2, [pc, #224]	@ (8005f80 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d022      	beq.n	8005eea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a36      	ldr	r2, [pc, #216]	@ (8005f84 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d01d      	beq.n	8005eea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a35      	ldr	r2, [pc, #212]	@ (8005f88 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d018      	beq.n	8005eea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a33      	ldr	r2, [pc, #204]	@ (8005f8c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d013      	beq.n	8005eea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a32      	ldr	r2, [pc, #200]	@ (8005f90 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d00e      	beq.n	8005eea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a30      	ldr	r2, [pc, #192]	@ (8005f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d009      	beq.n	8005eea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a2f      	ldr	r2, [pc, #188]	@ (8005f98 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d004      	beq.n	8005eea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a2d      	ldr	r2, [pc, #180]	@ (8005f9c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d101      	bne.n	8005eee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005eea:	2301      	movs	r3, #1
 8005eec:	e000      	b.n	8005ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005eee:	2300      	movs	r3, #0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d01a      	beq.n	8005f2a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	3b08      	subs	r3, #8
 8005efc:	4a28      	ldr	r2, [pc, #160]	@ (8005fa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005efe:	fba2 2303 	umull	r2, r3, r2, r3
 8005f02:	091b      	lsrs	r3, r3, #4
 8005f04:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005f06:	68fa      	ldr	r2, [r7, #12]
 8005f08:	4b26      	ldr	r3, [pc, #152]	@ (8005fa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005f0a:	4413      	add	r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	461a      	mov	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	4a24      	ldr	r2, [pc, #144]	@ (8005fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005f18:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f003 031f 	and.w	r3, r3, #31
 8005f20:	2201      	movs	r2, #1
 8005f22:	409a      	lsls	r2, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005f28:	e024      	b.n	8005f74 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	3b10      	subs	r3, #16
 8005f32:	4a1e      	ldr	r2, [pc, #120]	@ (8005fac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005f34:	fba2 2303 	umull	r2, r3, r2, r3
 8005f38:	091b      	lsrs	r3, r3, #4
 8005f3a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	4a1c      	ldr	r2, [pc, #112]	@ (8005fb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d806      	bhi.n	8005f52 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	4a1b      	ldr	r2, [pc, #108]	@ (8005fb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d902      	bls.n	8005f52 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	3308      	adds	r3, #8
 8005f50:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	4b18      	ldr	r3, [pc, #96]	@ (8005fb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005f56:	4413      	add	r3, r2
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a16      	ldr	r2, [pc, #88]	@ (8005fbc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005f64:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f003 031f 	and.w	r3, r3, #31
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	409a      	lsls	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005f74:	bf00      	nop
 8005f76:	3714      	adds	r7, #20
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr
 8005f80:	58025408 	.word	0x58025408
 8005f84:	5802541c 	.word	0x5802541c
 8005f88:	58025430 	.word	0x58025430
 8005f8c:	58025444 	.word	0x58025444
 8005f90:	58025458 	.word	0x58025458
 8005f94:	5802546c 	.word	0x5802546c
 8005f98:	58025480 	.word	0x58025480
 8005f9c:	58025494 	.word	0x58025494
 8005fa0:	cccccccd 	.word	0xcccccccd
 8005fa4:	16009600 	.word	0x16009600
 8005fa8:	58025880 	.word	0x58025880
 8005fac:	aaaaaaab 	.word	0xaaaaaaab
 8005fb0:	400204b8 	.word	0x400204b8
 8005fb4:	4002040f 	.word	0x4002040f
 8005fb8:	10008200 	.word	0x10008200
 8005fbc:	40020880 	.word	0x40020880

08005fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	b2db      	uxtb	r3, r3
 8005fce:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d04a      	beq.n	800606c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2b08      	cmp	r3, #8
 8005fda:	d847      	bhi.n	800606c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a25      	ldr	r2, [pc, #148]	@ (8006078 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d022      	beq.n	800602c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a24      	ldr	r2, [pc, #144]	@ (800607c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d01d      	beq.n	800602c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a22      	ldr	r2, [pc, #136]	@ (8006080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d018      	beq.n	800602c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a21      	ldr	r2, [pc, #132]	@ (8006084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d013      	beq.n	800602c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a1f      	ldr	r2, [pc, #124]	@ (8006088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d00e      	beq.n	800602c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a1e      	ldr	r2, [pc, #120]	@ (800608c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d009      	beq.n	800602c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a1c      	ldr	r2, [pc, #112]	@ (8006090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d004      	beq.n	800602c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a1b      	ldr	r2, [pc, #108]	@ (8006094 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d101      	bne.n	8006030 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800602c:	2301      	movs	r3, #1
 800602e:	e000      	b.n	8006032 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006030:	2300      	movs	r3, #0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00a      	beq.n	800604c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	4b17      	ldr	r3, [pc, #92]	@ (8006098 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800603a:	4413      	add	r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	461a      	mov	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	4a15      	ldr	r2, [pc, #84]	@ (800609c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006048:	671a      	str	r2, [r3, #112]	@ 0x70
 800604a:	e009      	b.n	8006060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800604c:	68fa      	ldr	r2, [r7, #12]
 800604e:	4b14      	ldr	r3, [pc, #80]	@ (80060a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006050:	4413      	add	r3, r2
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	461a      	mov	r2, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a11      	ldr	r2, [pc, #68]	@ (80060a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800605e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	3b01      	subs	r3, #1
 8006064:	2201      	movs	r2, #1
 8006066:	409a      	lsls	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800606c:	bf00      	nop
 800606e:	3714      	adds	r7, #20
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr
 8006078:	58025408 	.word	0x58025408
 800607c:	5802541c 	.word	0x5802541c
 8006080:	58025430 	.word	0x58025430
 8006084:	58025444 	.word	0x58025444
 8006088:	58025458 	.word	0x58025458
 800608c:	5802546c 	.word	0x5802546c
 8006090:	58025480 	.word	0x58025480
 8006094:	58025494 	.word	0x58025494
 8006098:	1600963f 	.word	0x1600963f
 800609c:	58025940 	.word	0x58025940
 80060a0:	1000823f 	.word	0x1000823f
 80060a4:	40020940 	.word	0x40020940

080060a8 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b086      	sub	sp, #24
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
 80060b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060b6:	2300      	movs	r3, #0
 80060b8:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	2b80      	cmp	r3, #128	@ 0x80
 80060c0:	d105      	bne.n	80060ce <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80060c8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e315      	b.n	80066fa <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d101      	bne.n	80060dc <HAL_DMAEx_MultiBufferStart_IT+0x34>
 80060d8:	2302      	movs	r3, #2
 80060da:	e30e      	b.n	80066fa <HAL_DMAEx_MultiBufferStart_IT+0x652>
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2201      	movs	r2, #1
 80060e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	f040 82fd 	bne.w	80066ec <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2202      	movs	r2, #2
 80060f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2200      	movs	r2, #0
 80060fe:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a82      	ldr	r2, [pc, #520]	@ (8006310 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d04a      	beq.n	80061a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a81      	ldr	r2, [pc, #516]	@ (8006314 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d045      	beq.n	80061a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a7f      	ldr	r2, [pc, #508]	@ (8006318 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d040      	beq.n	80061a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a7e      	ldr	r2, [pc, #504]	@ (800631c <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d03b      	beq.n	80061a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a7c      	ldr	r2, [pc, #496]	@ (8006320 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d036      	beq.n	80061a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a7b      	ldr	r2, [pc, #492]	@ (8006324 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d031      	beq.n	80061a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a79      	ldr	r2, [pc, #484]	@ (8006328 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d02c      	beq.n	80061a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a78      	ldr	r2, [pc, #480]	@ (800632c <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d027      	beq.n	80061a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a76      	ldr	r2, [pc, #472]	@ (8006330 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d022      	beq.n	80061a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4a75      	ldr	r2, [pc, #468]	@ (8006334 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8006160:	4293      	cmp	r3, r2
 8006162:	d01d      	beq.n	80061a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a73      	ldr	r2, [pc, #460]	@ (8006338 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d018      	beq.n	80061a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a72      	ldr	r2, [pc, #456]	@ (800633c <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d013      	beq.n	80061a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a70      	ldr	r2, [pc, #448]	@ (8006340 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d00e      	beq.n	80061a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a6f      	ldr	r2, [pc, #444]	@ (8006344 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d009      	beq.n	80061a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a6d      	ldr	r2, [pc, #436]	@ (8006348 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d004      	beq.n	80061a0 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a6c      	ldr	r2, [pc, #432]	@ (800634c <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d101      	bne.n	80061a4 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 80061a0:	2301      	movs	r3, #1
 80061a2:	e000      	b.n	80061a6 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 80061a4:	2300      	movs	r3, #0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d018      	beq.n	80061dc <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80061b8:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	683a      	ldr	r2, [r7, #0]
 80061c0:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061c6:	3308      	adds	r3, #8
 80061c8:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80061ce:	f003 031f 	and.w	r3, r3, #31
 80061d2:	223f      	movs	r2, #63	@ 0x3f
 80061d4:	409a      	lsls	r2, r3
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	601a      	str	r2, [r3, #0]
 80061da:	e018      	b.n	800620e <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	6819      	ldr	r1, [r3, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	f248 0320 	movw	r3, #32800	@ 0x8020
 80061ea:	430b      	orrs	r3, r1
 80061ec:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	683a      	ldr	r2, [r7, #0]
 80061f4:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061fa:	3304      	adds	r3, #4
 80061fc:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006202:	f003 031f 	and.w	r3, r3, #31
 8006206:	2201      	movs	r2, #1
 8006208:	409a      	lsls	r2, r3
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800620e:	6a3b      	ldr	r3, [r7, #32]
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	68b9      	ldr	r1, [r7, #8]
 8006214:	68f8      	ldr	r0, [r7, #12]
 8006216:	f000 fb41 	bl	800689c <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a3c      	ldr	r2, [pc, #240]	@ (8006310 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d072      	beq.n	800630a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a3a      	ldr	r2, [pc, #232]	@ (8006314 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d06d      	beq.n	800630a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a39      	ldr	r2, [pc, #228]	@ (8006318 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d068      	beq.n	800630a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a37      	ldr	r2, [pc, #220]	@ (800631c <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d063      	beq.n	800630a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a36      	ldr	r2, [pc, #216]	@ (8006320 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d05e      	beq.n	800630a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a34      	ldr	r2, [pc, #208]	@ (8006324 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d059      	beq.n	800630a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a33      	ldr	r2, [pc, #204]	@ (8006328 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d054      	beq.n	800630a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a31      	ldr	r2, [pc, #196]	@ (800632c <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d04f      	beq.n	800630a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a30      	ldr	r2, [pc, #192]	@ (8006330 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d04a      	beq.n	800630a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a2e      	ldr	r2, [pc, #184]	@ (8006334 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d045      	beq.n	800630a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a2d      	ldr	r2, [pc, #180]	@ (8006338 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d040      	beq.n	800630a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a2b      	ldr	r2, [pc, #172]	@ (800633c <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d03b      	beq.n	800630a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a2a      	ldr	r2, [pc, #168]	@ (8006340 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d036      	beq.n	800630a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a28      	ldr	r2, [pc, #160]	@ (8006344 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d031      	beq.n	800630a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a27      	ldr	r2, [pc, #156]	@ (8006348 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d02c      	beq.n	800630a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a25      	ldr	r2, [pc, #148]	@ (800634c <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d027      	beq.n	800630a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a24      	ldr	r2, [pc, #144]	@ (8006350 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d022      	beq.n	800630a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a22      	ldr	r2, [pc, #136]	@ (8006354 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d01d      	beq.n	800630a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a21      	ldr	r2, [pc, #132]	@ (8006358 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d018      	beq.n	800630a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a1f      	ldr	r2, [pc, #124]	@ (800635c <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d013      	beq.n	800630a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a1e      	ldr	r2, [pc, #120]	@ (8006360 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d00e      	beq.n	800630a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a1c      	ldr	r2, [pc, #112]	@ (8006364 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d009      	beq.n	800630a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a1b      	ldr	r2, [pc, #108]	@ (8006368 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d004      	beq.n	800630a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a19      	ldr	r2, [pc, #100]	@ (800636c <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d132      	bne.n	8006370 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 800630a:	2301      	movs	r3, #1
 800630c:	e031      	b.n	8006372 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 800630e:	bf00      	nop
 8006310:	40020010 	.word	0x40020010
 8006314:	40020028 	.word	0x40020028
 8006318:	40020040 	.word	0x40020040
 800631c:	40020058 	.word	0x40020058
 8006320:	40020070 	.word	0x40020070
 8006324:	40020088 	.word	0x40020088
 8006328:	400200a0 	.word	0x400200a0
 800632c:	400200b8 	.word	0x400200b8
 8006330:	40020410 	.word	0x40020410
 8006334:	40020428 	.word	0x40020428
 8006338:	40020440 	.word	0x40020440
 800633c:	40020458 	.word	0x40020458
 8006340:	40020470 	.word	0x40020470
 8006344:	40020488 	.word	0x40020488
 8006348:	400204a0 	.word	0x400204a0
 800634c:	400204b8 	.word	0x400204b8
 8006350:	58025408 	.word	0x58025408
 8006354:	5802541c 	.word	0x5802541c
 8006358:	58025430 	.word	0x58025430
 800635c:	58025444 	.word	0x58025444
 8006360:	58025458 	.word	0x58025458
 8006364:	5802546c 	.word	0x5802546c
 8006368:	58025480 	.word	0x58025480
 800636c:	58025494 	.word	0x58025494
 8006370:	2300      	movs	r3, #0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00d      	beq.n	8006392 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800637a:	68fa      	ldr	r2, [r7, #12]
 800637c:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800637e:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006384:	2b00      	cmp	r3, #0
 8006386:	d004      	beq.n	8006392 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006390:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a3b      	ldr	r2, [pc, #236]	@ (8006484 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d04a      	beq.n	8006432 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a39      	ldr	r2, [pc, #228]	@ (8006488 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d045      	beq.n	8006432 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a38      	ldr	r2, [pc, #224]	@ (800648c <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d040      	beq.n	8006432 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a36      	ldr	r2, [pc, #216]	@ (8006490 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d03b      	beq.n	8006432 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a35      	ldr	r2, [pc, #212]	@ (8006494 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d036      	beq.n	8006432 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a33      	ldr	r2, [pc, #204]	@ (8006498 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d031      	beq.n	8006432 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a32      	ldr	r2, [pc, #200]	@ (800649c <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d02c      	beq.n	8006432 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a30      	ldr	r2, [pc, #192]	@ (80064a0 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d027      	beq.n	8006432 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4a2f      	ldr	r2, [pc, #188]	@ (80064a4 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d022      	beq.n	8006432 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a2d      	ldr	r2, [pc, #180]	@ (80064a8 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d01d      	beq.n	8006432 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a2c      	ldr	r2, [pc, #176]	@ (80064ac <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d018      	beq.n	8006432 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a2a      	ldr	r2, [pc, #168]	@ (80064b0 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d013      	beq.n	8006432 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a29      	ldr	r2, [pc, #164]	@ (80064b4 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d00e      	beq.n	8006432 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a27      	ldr	r2, [pc, #156]	@ (80064b8 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d009      	beq.n	8006432 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4a26      	ldr	r2, [pc, #152]	@ (80064bc <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8006424:	4293      	cmp	r3, r2
 8006426:	d004      	beq.n	8006432 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a24      	ldr	r2, [pc, #144]	@ (80064c0 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d101      	bne.n	8006436 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8006432:	2301      	movs	r3, #1
 8006434:	e000      	b.n	8006438 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8006436:	2300      	movs	r3, #0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d043      	beq.n	80064c4 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f023 021e 	bic.w	r2, r3, #30
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f042 0216 	orr.w	r2, r2, #22
 800644e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	695a      	ldr	r2, [r3, #20]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800645e:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006464:	2b00      	cmp	r3, #0
 8006466:	d103      	bne.n	8006470 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800646c:	2b00      	cmp	r3, #0
 800646e:	d043      	beq.n	80064f8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f042 0208 	orr.w	r2, r2, #8
 800647e:	601a      	str	r2, [r3, #0]
 8006480:	e03a      	b.n	80064f8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8006482:	bf00      	nop
 8006484:	40020010 	.word	0x40020010
 8006488:	40020028 	.word	0x40020028
 800648c:	40020040 	.word	0x40020040
 8006490:	40020058 	.word	0x40020058
 8006494:	40020070 	.word	0x40020070
 8006498:	40020088 	.word	0x40020088
 800649c:	400200a0 	.word	0x400200a0
 80064a0:	400200b8 	.word	0x400200b8
 80064a4:	40020410 	.word	0x40020410
 80064a8:	40020428 	.word	0x40020428
 80064ac:	40020440 	.word	0x40020440
 80064b0:	40020458 	.word	0x40020458
 80064b4:	40020470 	.word	0x40020470
 80064b8:	40020488 	.word	0x40020488
 80064bc:	400204a0 	.word	0x400204a0
 80064c0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f023 020e 	bic.w	r2, r3, #14
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f042 020a 	orr.w	r2, r2, #10
 80064d6:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d103      	bne.n	80064e8 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d007      	beq.n	80064f8 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f042 0204 	orr.w	r2, r2, #4
 80064f6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a81      	ldr	r2, [pc, #516]	@ (8006704 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d072      	beq.n	80065e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a80      	ldr	r2, [pc, #512]	@ (8006708 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d06d      	beq.n	80065e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a7e      	ldr	r2, [pc, #504]	@ (800670c <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d068      	beq.n	80065e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a7d      	ldr	r2, [pc, #500]	@ (8006710 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d063      	beq.n	80065e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a7b      	ldr	r2, [pc, #492]	@ (8006714 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d05e      	beq.n	80065e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a7a      	ldr	r2, [pc, #488]	@ (8006718 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d059      	beq.n	80065e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a78      	ldr	r2, [pc, #480]	@ (800671c <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d054      	beq.n	80065e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a77      	ldr	r2, [pc, #476]	@ (8006720 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d04f      	beq.n	80065e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a75      	ldr	r2, [pc, #468]	@ (8006724 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d04a      	beq.n	80065e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a74      	ldr	r2, [pc, #464]	@ (8006728 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d045      	beq.n	80065e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a72      	ldr	r2, [pc, #456]	@ (800672c <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d040      	beq.n	80065e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a71      	ldr	r2, [pc, #452]	@ (8006730 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d03b      	beq.n	80065e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a6f      	ldr	r2, [pc, #444]	@ (8006734 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d036      	beq.n	80065e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a6e      	ldr	r2, [pc, #440]	@ (8006738 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d031      	beq.n	80065e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a6c      	ldr	r2, [pc, #432]	@ (800673c <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d02c      	beq.n	80065e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a6b      	ldr	r2, [pc, #428]	@ (8006740 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d027      	beq.n	80065e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a69      	ldr	r2, [pc, #420]	@ (8006744 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d022      	beq.n	80065e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a68      	ldr	r2, [pc, #416]	@ (8006748 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d01d      	beq.n	80065e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a66      	ldr	r2, [pc, #408]	@ (800674c <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d018      	beq.n	80065e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a65      	ldr	r2, [pc, #404]	@ (8006750 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d013      	beq.n	80065e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a63      	ldr	r2, [pc, #396]	@ (8006754 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d00e      	beq.n	80065e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a62      	ldr	r2, [pc, #392]	@ (8006758 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d009      	beq.n	80065e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a60      	ldr	r2, [pc, #384]	@ (800675c <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d004      	beq.n	80065e8 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a5f      	ldr	r2, [pc, #380]	@ (8006760 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d101      	bne.n	80065ec <HAL_DMAEx_MultiBufferStart_IT+0x544>
 80065e8:	2301      	movs	r3, #1
 80065ea:	e000      	b.n	80065ee <HAL_DMAEx_MultiBufferStart_IT+0x546>
 80065ec:	2300      	movs	r3, #0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d01a      	beq.n	8006628 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d007      	beq.n	8006610 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800660a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800660e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006614:	2b00      	cmp	r3, #0
 8006616:	d007      	beq.n	8006628 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006622:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006626:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a35      	ldr	r2, [pc, #212]	@ (8006704 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d04a      	beq.n	80066c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a34      	ldr	r2, [pc, #208]	@ (8006708 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d045      	beq.n	80066c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a32      	ldr	r2, [pc, #200]	@ (800670c <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d040      	beq.n	80066c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a31      	ldr	r2, [pc, #196]	@ (8006710 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d03b      	beq.n	80066c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a2f      	ldr	r2, [pc, #188]	@ (8006714 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d036      	beq.n	80066c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a2e      	ldr	r2, [pc, #184]	@ (8006718 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d031      	beq.n	80066c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a2c      	ldr	r2, [pc, #176]	@ (800671c <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d02c      	beq.n	80066c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a2b      	ldr	r2, [pc, #172]	@ (8006720 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d027      	beq.n	80066c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a29      	ldr	r2, [pc, #164]	@ (8006724 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d022      	beq.n	80066c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a28      	ldr	r2, [pc, #160]	@ (8006728 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d01d      	beq.n	80066c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a26      	ldr	r2, [pc, #152]	@ (800672c <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d018      	beq.n	80066c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a25      	ldr	r2, [pc, #148]	@ (8006730 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d013      	beq.n	80066c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a23      	ldr	r2, [pc, #140]	@ (8006734 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d00e      	beq.n	80066c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a22      	ldr	r2, [pc, #136]	@ (8006738 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d009      	beq.n	80066c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a20      	ldr	r2, [pc, #128]	@ (800673c <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d004      	beq.n	80066c8 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a1f      	ldr	r2, [pc, #124]	@ (8006740 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d108      	bne.n	80066da <HAL_DMAEx_MultiBufferStart_IT+0x632>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f042 0201 	orr.w	r2, r2, #1
 80066d6:	601a      	str	r2, [r3, #0]
 80066d8:	e00e      	b.n	80066f8 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f042 0201 	orr.w	r2, r2, #1
 80066e8:	601a      	str	r2, [r3, #0]
 80066ea:	e005      	b.n	80066f8 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80066f2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80066f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3718      	adds	r7, #24
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	40020010 	.word	0x40020010
 8006708:	40020028 	.word	0x40020028
 800670c:	40020040 	.word	0x40020040
 8006710:	40020058 	.word	0x40020058
 8006714:	40020070 	.word	0x40020070
 8006718:	40020088 	.word	0x40020088
 800671c:	400200a0 	.word	0x400200a0
 8006720:	400200b8 	.word	0x400200b8
 8006724:	40020410 	.word	0x40020410
 8006728:	40020428 	.word	0x40020428
 800672c:	40020440 	.word	0x40020440
 8006730:	40020458 	.word	0x40020458
 8006734:	40020470 	.word	0x40020470
 8006738:	40020488 	.word	0x40020488
 800673c:	400204a0 	.word	0x400204a0
 8006740:	400204b8 	.word	0x400204b8
 8006744:	58025408 	.word	0x58025408
 8006748:	5802541c 	.word	0x5802541c
 800674c:	58025430 	.word	0x58025430
 8006750:	58025444 	.word	0x58025444
 8006754:	58025458 	.word	0x58025458
 8006758:	5802546c 	.word	0x5802546c
 800675c:	58025480 	.word	0x58025480
 8006760:	58025494 	.word	0x58025494

08006764 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
 800676a:	60f8      	str	r0, [r7, #12]
 800676c:	60b9      	str	r1, [r7, #8]
 800676e:	4613      	mov	r3, r2
 8006770:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a39      	ldr	r2, [pc, #228]	@ (800685c <HAL_DMAEx_ChangeMemory+0xf8>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d04a      	beq.n	8006812 <HAL_DMAEx_ChangeMemory+0xae>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a37      	ldr	r2, [pc, #220]	@ (8006860 <HAL_DMAEx_ChangeMemory+0xfc>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d045      	beq.n	8006812 <HAL_DMAEx_ChangeMemory+0xae>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	4a36      	ldr	r2, [pc, #216]	@ (8006864 <HAL_DMAEx_ChangeMemory+0x100>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d040      	beq.n	8006812 <HAL_DMAEx_ChangeMemory+0xae>
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4a34      	ldr	r2, [pc, #208]	@ (8006868 <HAL_DMAEx_ChangeMemory+0x104>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d03b      	beq.n	8006812 <HAL_DMAEx_ChangeMemory+0xae>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a33      	ldr	r2, [pc, #204]	@ (800686c <HAL_DMAEx_ChangeMemory+0x108>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d036      	beq.n	8006812 <HAL_DMAEx_ChangeMemory+0xae>
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a31      	ldr	r2, [pc, #196]	@ (8006870 <HAL_DMAEx_ChangeMemory+0x10c>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d031      	beq.n	8006812 <HAL_DMAEx_ChangeMemory+0xae>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a30      	ldr	r2, [pc, #192]	@ (8006874 <HAL_DMAEx_ChangeMemory+0x110>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d02c      	beq.n	8006812 <HAL_DMAEx_ChangeMemory+0xae>
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a2e      	ldr	r2, [pc, #184]	@ (8006878 <HAL_DMAEx_ChangeMemory+0x114>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d027      	beq.n	8006812 <HAL_DMAEx_ChangeMemory+0xae>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a2d      	ldr	r2, [pc, #180]	@ (800687c <HAL_DMAEx_ChangeMemory+0x118>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d022      	beq.n	8006812 <HAL_DMAEx_ChangeMemory+0xae>
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a2b      	ldr	r2, [pc, #172]	@ (8006880 <HAL_DMAEx_ChangeMemory+0x11c>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d01d      	beq.n	8006812 <HAL_DMAEx_ChangeMemory+0xae>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a2a      	ldr	r2, [pc, #168]	@ (8006884 <HAL_DMAEx_ChangeMemory+0x120>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d018      	beq.n	8006812 <HAL_DMAEx_ChangeMemory+0xae>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a28      	ldr	r2, [pc, #160]	@ (8006888 <HAL_DMAEx_ChangeMemory+0x124>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d013      	beq.n	8006812 <HAL_DMAEx_ChangeMemory+0xae>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a27      	ldr	r2, [pc, #156]	@ (800688c <HAL_DMAEx_ChangeMemory+0x128>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d00e      	beq.n	8006812 <HAL_DMAEx_ChangeMemory+0xae>
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a25      	ldr	r2, [pc, #148]	@ (8006890 <HAL_DMAEx_ChangeMemory+0x12c>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d009      	beq.n	8006812 <HAL_DMAEx_ChangeMemory+0xae>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a24      	ldr	r2, [pc, #144]	@ (8006894 <HAL_DMAEx_ChangeMemory+0x130>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d004      	beq.n	8006812 <HAL_DMAEx_ChangeMemory+0xae>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a22      	ldr	r2, [pc, #136]	@ (8006898 <HAL_DMAEx_ChangeMemory+0x134>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d101      	bne.n	8006816 <HAL_DMAEx_ChangeMemory+0xb2>
 8006812:	2301      	movs	r3, #1
 8006814:	e000      	b.n	8006818 <HAL_DMAEx_ChangeMemory+0xb4>
 8006816:	2300      	movs	r3, #0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00c      	beq.n	8006836 <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 800681c:	79fb      	ldrb	r3, [r7, #7]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d104      	bne.n	800682c <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	60da      	str	r2, [r3, #12]
 800682a:	e010      	b.n	800684e <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68ba      	ldr	r2, [r7, #8]
 8006832:	611a      	str	r2, [r3, #16]
 8006834:	e00b      	b.n	800684e <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 8006836:	79fb      	ldrb	r3, [r7, #7]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d104      	bne.n	8006846 <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	60da      	str	r2, [r3, #12]
 8006844:	e003      	b.n	800684e <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68ba      	ldr	r2, [r7, #8]
 800684c:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3714      	adds	r7, #20
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr
 800685c:	40020010 	.word	0x40020010
 8006860:	40020028 	.word	0x40020028
 8006864:	40020040 	.word	0x40020040
 8006868:	40020058 	.word	0x40020058
 800686c:	40020070 	.word	0x40020070
 8006870:	40020088 	.word	0x40020088
 8006874:	400200a0 	.word	0x400200a0
 8006878:	400200b8 	.word	0x400200b8
 800687c:	40020410 	.word	0x40020410
 8006880:	40020428 	.word	0x40020428
 8006884:	40020440 	.word	0x40020440
 8006888:	40020458 	.word	0x40020458
 800688c:	40020470 	.word	0x40020470
 8006890:	40020488 	.word	0x40020488
 8006894:	400204a0 	.word	0x400204a0
 8006898:	400204b8 	.word	0x400204b8

0800689c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800689c:	b480      	push	{r7}
 800689e:	b085      	sub	sp, #20
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	607a      	str	r2, [r7, #4]
 80068a8:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a46      	ldr	r2, [pc, #280]	@ (80069c8 <DMA_MultiBufferSetConfig+0x12c>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d04a      	beq.n	800694a <DMA_MultiBufferSetConfig+0xae>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a44      	ldr	r2, [pc, #272]	@ (80069cc <DMA_MultiBufferSetConfig+0x130>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d045      	beq.n	800694a <DMA_MultiBufferSetConfig+0xae>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a43      	ldr	r2, [pc, #268]	@ (80069d0 <DMA_MultiBufferSetConfig+0x134>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d040      	beq.n	800694a <DMA_MultiBufferSetConfig+0xae>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a41      	ldr	r2, [pc, #260]	@ (80069d4 <DMA_MultiBufferSetConfig+0x138>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d03b      	beq.n	800694a <DMA_MultiBufferSetConfig+0xae>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a40      	ldr	r2, [pc, #256]	@ (80069d8 <DMA_MultiBufferSetConfig+0x13c>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d036      	beq.n	800694a <DMA_MultiBufferSetConfig+0xae>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a3e      	ldr	r2, [pc, #248]	@ (80069dc <DMA_MultiBufferSetConfig+0x140>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d031      	beq.n	800694a <DMA_MultiBufferSetConfig+0xae>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a3d      	ldr	r2, [pc, #244]	@ (80069e0 <DMA_MultiBufferSetConfig+0x144>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d02c      	beq.n	800694a <DMA_MultiBufferSetConfig+0xae>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a3b      	ldr	r2, [pc, #236]	@ (80069e4 <DMA_MultiBufferSetConfig+0x148>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d027      	beq.n	800694a <DMA_MultiBufferSetConfig+0xae>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a3a      	ldr	r2, [pc, #232]	@ (80069e8 <DMA_MultiBufferSetConfig+0x14c>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d022      	beq.n	800694a <DMA_MultiBufferSetConfig+0xae>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a38      	ldr	r2, [pc, #224]	@ (80069ec <DMA_MultiBufferSetConfig+0x150>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d01d      	beq.n	800694a <DMA_MultiBufferSetConfig+0xae>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a37      	ldr	r2, [pc, #220]	@ (80069f0 <DMA_MultiBufferSetConfig+0x154>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d018      	beq.n	800694a <DMA_MultiBufferSetConfig+0xae>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a35      	ldr	r2, [pc, #212]	@ (80069f4 <DMA_MultiBufferSetConfig+0x158>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d013      	beq.n	800694a <DMA_MultiBufferSetConfig+0xae>
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a34      	ldr	r2, [pc, #208]	@ (80069f8 <DMA_MultiBufferSetConfig+0x15c>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d00e      	beq.n	800694a <DMA_MultiBufferSetConfig+0xae>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a32      	ldr	r2, [pc, #200]	@ (80069fc <DMA_MultiBufferSetConfig+0x160>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d009      	beq.n	800694a <DMA_MultiBufferSetConfig+0xae>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a31      	ldr	r2, [pc, #196]	@ (8006a00 <DMA_MultiBufferSetConfig+0x164>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d004      	beq.n	800694a <DMA_MultiBufferSetConfig+0xae>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a2f      	ldr	r2, [pc, #188]	@ (8006a04 <DMA_MultiBufferSetConfig+0x168>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d101      	bne.n	800694e <DMA_MultiBufferSetConfig+0xb2>
 800694a:	2301      	movs	r3, #1
 800694c:	e000      	b.n	8006950 <DMA_MultiBufferSetConfig+0xb4>
 800694e:	2300      	movs	r3, #0
 8006950:	2b00      	cmp	r3, #0
 8006952:	d019      	beq.n	8006988 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	683a      	ldr	r2, [r7, #0]
 800695a:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	2b40      	cmp	r3, #64	@ 0x40
 8006962:	d108      	bne.n	8006976 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	68ba      	ldr	r2, [r7, #8]
 8006972:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8006974:	e021      	b.n	80069ba <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68ba      	ldr	r2, [r7, #8]
 800697c:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	60da      	str	r2, [r3, #12]
}
 8006986:	e018      	b.n	80069ba <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	683a      	ldr	r2, [r7, #0]
 800698e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	2b40      	cmp	r3, #64	@ 0x40
 8006996:	d108      	bne.n	80069aa <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68ba      	ldr	r2, [r7, #8]
 80069a6:	60da      	str	r2, [r3, #12]
}
 80069a8:	e007      	b.n	80069ba <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68ba      	ldr	r2, [r7, #8]
 80069b0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	60da      	str	r2, [r3, #12]
}
 80069ba:	bf00      	nop
 80069bc:	3714      	adds	r7, #20
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr
 80069c6:	bf00      	nop
 80069c8:	40020010 	.word	0x40020010
 80069cc:	40020028 	.word	0x40020028
 80069d0:	40020040 	.word	0x40020040
 80069d4:	40020058 	.word	0x40020058
 80069d8:	40020070 	.word	0x40020070
 80069dc:	40020088 	.word	0x40020088
 80069e0:	400200a0 	.word	0x400200a0
 80069e4:	400200b8 	.word	0x400200b8
 80069e8:	40020410 	.word	0x40020410
 80069ec:	40020428 	.word	0x40020428
 80069f0:	40020440 	.word	0x40020440
 80069f4:	40020458 	.word	0x40020458
 80069f8:	40020470 	.word	0x40020470
 80069fc:	40020488 	.word	0x40020488
 8006a00:	400204a0 	.word	0x400204a0
 8006a04:	400204b8 	.word	0x400204b8

08006a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b089      	sub	sp, #36	@ 0x24
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006a12:	2300      	movs	r3, #0
 8006a14:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006a16:	4b89      	ldr	r3, [pc, #548]	@ (8006c3c <HAL_GPIO_Init+0x234>)
 8006a18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006a1a:	e194      	b.n	8006d46 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	2101      	movs	r1, #1
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	fa01 f303 	lsl.w	r3, r1, r3
 8006a28:	4013      	ands	r3, r2
 8006a2a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	f000 8186 	beq.w	8006d40 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	f003 0303 	and.w	r3, r3, #3
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d005      	beq.n	8006a4c <HAL_GPIO_Init+0x44>
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	f003 0303 	and.w	r3, r3, #3
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d130      	bne.n	8006aae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	005b      	lsls	r3, r3, #1
 8006a56:	2203      	movs	r2, #3
 8006a58:	fa02 f303 	lsl.w	r3, r2, r3
 8006a5c:	43db      	mvns	r3, r3
 8006a5e:	69ba      	ldr	r2, [r7, #24]
 8006a60:	4013      	ands	r3, r2
 8006a62:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	68da      	ldr	r2, [r3, #12]
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	005b      	lsls	r3, r3, #1
 8006a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a70:	69ba      	ldr	r2, [r7, #24]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	69ba      	ldr	r2, [r7, #24]
 8006a7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006a82:	2201      	movs	r2, #1
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	fa02 f303 	lsl.w	r3, r2, r3
 8006a8a:	43db      	mvns	r3, r3
 8006a8c:	69ba      	ldr	r2, [r7, #24]
 8006a8e:	4013      	ands	r3, r2
 8006a90:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	091b      	lsrs	r3, r3, #4
 8006a98:	f003 0201 	and.w	r2, r3, #1
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa2:	69ba      	ldr	r2, [r7, #24]
 8006aa4:	4313      	orrs	r3, r2
 8006aa6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	69ba      	ldr	r2, [r7, #24]
 8006aac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	f003 0303 	and.w	r3, r3, #3
 8006ab6:	2b03      	cmp	r3, #3
 8006ab8:	d017      	beq.n	8006aea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	005b      	lsls	r3, r3, #1
 8006ac4:	2203      	movs	r2, #3
 8006ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aca:	43db      	mvns	r3, r3
 8006acc:	69ba      	ldr	r2, [r7, #24]
 8006ace:	4013      	ands	r3, r2
 8006ad0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	689a      	ldr	r2, [r3, #8]
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	005b      	lsls	r3, r3, #1
 8006ada:	fa02 f303 	lsl.w	r3, r2, r3
 8006ade:	69ba      	ldr	r2, [r7, #24]
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	69ba      	ldr	r2, [r7, #24]
 8006ae8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	f003 0303 	and.w	r3, r3, #3
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d123      	bne.n	8006b3e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	08da      	lsrs	r2, r3, #3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	3208      	adds	r2, #8
 8006afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	f003 0307 	and.w	r3, r3, #7
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	220f      	movs	r2, #15
 8006b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b12:	43db      	mvns	r3, r3
 8006b14:	69ba      	ldr	r2, [r7, #24]
 8006b16:	4013      	ands	r3, r2
 8006b18:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	691a      	ldr	r2, [r3, #16]
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	f003 0307 	and.w	r3, r3, #7
 8006b24:	009b      	lsls	r3, r3, #2
 8006b26:	fa02 f303 	lsl.w	r3, r2, r3
 8006b2a:	69ba      	ldr	r2, [r7, #24]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	08da      	lsrs	r2, r3, #3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	3208      	adds	r2, #8
 8006b38:	69b9      	ldr	r1, [r7, #24]
 8006b3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006b44:	69fb      	ldr	r3, [r7, #28]
 8006b46:	005b      	lsls	r3, r3, #1
 8006b48:	2203      	movs	r2, #3
 8006b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b4e:	43db      	mvns	r3, r3
 8006b50:	69ba      	ldr	r2, [r7, #24]
 8006b52:	4013      	ands	r3, r2
 8006b54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	685b      	ldr	r3, [r3, #4]
 8006b5a:	f003 0203 	and.w	r2, r3, #3
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	005b      	lsls	r3, r3, #1
 8006b62:	fa02 f303 	lsl.w	r3, r2, r3
 8006b66:	69ba      	ldr	r2, [r7, #24]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	69ba      	ldr	r2, [r7, #24]
 8006b70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	f000 80e0 	beq.w	8006d40 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b80:	4b2f      	ldr	r3, [pc, #188]	@ (8006c40 <HAL_GPIO_Init+0x238>)
 8006b82:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8006b86:	4a2e      	ldr	r2, [pc, #184]	@ (8006c40 <HAL_GPIO_Init+0x238>)
 8006b88:	f043 0302 	orr.w	r3, r3, #2
 8006b8c:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8006b90:	4b2b      	ldr	r3, [pc, #172]	@ (8006c40 <HAL_GPIO_Init+0x238>)
 8006b92:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8006b96:	f003 0302 	and.w	r3, r3, #2
 8006b9a:	60fb      	str	r3, [r7, #12]
 8006b9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b9e:	4a29      	ldr	r2, [pc, #164]	@ (8006c44 <HAL_GPIO_Init+0x23c>)
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	089b      	lsrs	r3, r3, #2
 8006ba4:	3302      	adds	r3, #2
 8006ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	f003 0303 	and.w	r3, r3, #3
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	220f      	movs	r2, #15
 8006bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8006bba:	43db      	mvns	r3, r3
 8006bbc:	69ba      	ldr	r2, [r7, #24]
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a20      	ldr	r2, [pc, #128]	@ (8006c48 <HAL_GPIO_Init+0x240>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d052      	beq.n	8006c70 <HAL_GPIO_Init+0x268>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a1f      	ldr	r2, [pc, #124]	@ (8006c4c <HAL_GPIO_Init+0x244>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d031      	beq.n	8006c36 <HAL_GPIO_Init+0x22e>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a1e      	ldr	r2, [pc, #120]	@ (8006c50 <HAL_GPIO_Init+0x248>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d02b      	beq.n	8006c32 <HAL_GPIO_Init+0x22a>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a1d      	ldr	r2, [pc, #116]	@ (8006c54 <HAL_GPIO_Init+0x24c>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d025      	beq.n	8006c2e <HAL_GPIO_Init+0x226>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a1c      	ldr	r2, [pc, #112]	@ (8006c58 <HAL_GPIO_Init+0x250>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d01f      	beq.n	8006c2a <HAL_GPIO_Init+0x222>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a1b      	ldr	r2, [pc, #108]	@ (8006c5c <HAL_GPIO_Init+0x254>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d019      	beq.n	8006c26 <HAL_GPIO_Init+0x21e>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a1a      	ldr	r2, [pc, #104]	@ (8006c60 <HAL_GPIO_Init+0x258>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d013      	beq.n	8006c22 <HAL_GPIO_Init+0x21a>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a19      	ldr	r2, [pc, #100]	@ (8006c64 <HAL_GPIO_Init+0x25c>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d00d      	beq.n	8006c1e <HAL_GPIO_Init+0x216>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a18      	ldr	r2, [pc, #96]	@ (8006c68 <HAL_GPIO_Init+0x260>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d007      	beq.n	8006c1a <HAL_GPIO_Init+0x212>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a17      	ldr	r2, [pc, #92]	@ (8006c6c <HAL_GPIO_Init+0x264>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d101      	bne.n	8006c16 <HAL_GPIO_Init+0x20e>
 8006c12:	2309      	movs	r3, #9
 8006c14:	e02d      	b.n	8006c72 <HAL_GPIO_Init+0x26a>
 8006c16:	230a      	movs	r3, #10
 8006c18:	e02b      	b.n	8006c72 <HAL_GPIO_Init+0x26a>
 8006c1a:	2308      	movs	r3, #8
 8006c1c:	e029      	b.n	8006c72 <HAL_GPIO_Init+0x26a>
 8006c1e:	2307      	movs	r3, #7
 8006c20:	e027      	b.n	8006c72 <HAL_GPIO_Init+0x26a>
 8006c22:	2306      	movs	r3, #6
 8006c24:	e025      	b.n	8006c72 <HAL_GPIO_Init+0x26a>
 8006c26:	2305      	movs	r3, #5
 8006c28:	e023      	b.n	8006c72 <HAL_GPIO_Init+0x26a>
 8006c2a:	2304      	movs	r3, #4
 8006c2c:	e021      	b.n	8006c72 <HAL_GPIO_Init+0x26a>
 8006c2e:	2303      	movs	r3, #3
 8006c30:	e01f      	b.n	8006c72 <HAL_GPIO_Init+0x26a>
 8006c32:	2302      	movs	r3, #2
 8006c34:	e01d      	b.n	8006c72 <HAL_GPIO_Init+0x26a>
 8006c36:	2301      	movs	r3, #1
 8006c38:	e01b      	b.n	8006c72 <HAL_GPIO_Init+0x26a>
 8006c3a:	bf00      	nop
 8006c3c:	58000080 	.word	0x58000080
 8006c40:	58024400 	.word	0x58024400
 8006c44:	58000400 	.word	0x58000400
 8006c48:	58020000 	.word	0x58020000
 8006c4c:	58020400 	.word	0x58020400
 8006c50:	58020800 	.word	0x58020800
 8006c54:	58020c00 	.word	0x58020c00
 8006c58:	58021000 	.word	0x58021000
 8006c5c:	58021400 	.word	0x58021400
 8006c60:	58021800 	.word	0x58021800
 8006c64:	58021c00 	.word	0x58021c00
 8006c68:	58022000 	.word	0x58022000
 8006c6c:	58022400 	.word	0x58022400
 8006c70:	2300      	movs	r3, #0
 8006c72:	69fa      	ldr	r2, [r7, #28]
 8006c74:	f002 0203 	and.w	r2, r2, #3
 8006c78:	0092      	lsls	r2, r2, #2
 8006c7a:	4093      	lsls	r3, r2
 8006c7c:	69ba      	ldr	r2, [r7, #24]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006c82:	4938      	ldr	r1, [pc, #224]	@ (8006d64 <HAL_GPIO_Init+0x35c>)
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	089b      	lsrs	r3, r3, #2
 8006c88:	3302      	adds	r3, #2
 8006c8a:	69ba      	ldr	r2, [r7, #24]
 8006c8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006c90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	43db      	mvns	r3, r3
 8006c9c:	69ba      	ldr	r2, [r7, #24]
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d003      	beq.n	8006cb6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006cae:	69ba      	ldr	r2, [r7, #24]
 8006cb0:	693b      	ldr	r3, [r7, #16]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006cb6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006cbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	43db      	mvns	r3, r3
 8006cca:	69ba      	ldr	r2, [r7, #24]
 8006ccc:	4013      	ands	r3, r2
 8006cce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d003      	beq.n	8006ce4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006cdc:	69ba      	ldr	r2, [r7, #24]
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006ce4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	43db      	mvns	r3, r3
 8006cf6:	69ba      	ldr	r2, [r7, #24]
 8006cf8:	4013      	ands	r3, r2
 8006cfa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d003      	beq.n	8006d10 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006d08:	69ba      	ldr	r2, [r7, #24]
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	69ba      	ldr	r2, [r7, #24]
 8006d14:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	43db      	mvns	r3, r3
 8006d20:	69ba      	ldr	r2, [r7, #24]
 8006d22:	4013      	ands	r3, r2
 8006d24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d003      	beq.n	8006d3a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006d32:	69ba      	ldr	r2, [r7, #24]
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	4313      	orrs	r3, r2
 8006d38:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	69ba      	ldr	r2, [r7, #24]
 8006d3e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	3301      	adds	r3, #1
 8006d44:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f47f ae63 	bne.w	8006a1c <HAL_GPIO_Init+0x14>
  }
}
 8006d56:	bf00      	nop
 8006d58:	bf00      	nop
 8006d5a:	3724      	adds	r7, #36	@ 0x24
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr
 8006d64:	58000400 	.word	0x58000400

08006d68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b083      	sub	sp, #12
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	460b      	mov	r3, r1
 8006d72:	807b      	strh	r3, [r7, #2]
 8006d74:	4613      	mov	r3, r2
 8006d76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006d78:	787b      	ldrb	r3, [r7, #1]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d003      	beq.n	8006d86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006d7e:	887a      	ldrh	r2, [r7, #2]
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006d84:	e003      	b.n	8006d8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006d86:	887b      	ldrh	r3, [r7, #2]
 8006d88:	041a      	lsls	r2, r3, #16
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	619a      	str	r2, [r3, #24]
}
 8006d8e:	bf00      	nop
 8006d90:	370c      	adds	r7, #12
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
	...

08006d9c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d101      	bne.n	8006dae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e08b      	b.n	8006ec6 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d106      	bne.n	8006dc8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006dc2:	6878      	ldr	r0, [r7, #4]
 8006dc4:	f7fa fb80 	bl	80014c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2224      	movs	r2, #36	@ 0x24
 8006dcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f022 0201 	bic.w	r2, r2, #1
 8006dde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685a      	ldr	r2, [r3, #4]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006dec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	689a      	ldr	r2, [r3, #8]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006dfc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	68db      	ldr	r3, [r3, #12]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d107      	bne.n	8006e16 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	689a      	ldr	r2, [r3, #8]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006e12:	609a      	str	r2, [r3, #8]
 8006e14:	e006      	b.n	8006e24 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	689a      	ldr	r2, [r3, #8]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8006e22:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d108      	bne.n	8006e3e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	685a      	ldr	r2, [r3, #4]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e3a:	605a      	str	r2, [r3, #4]
 8006e3c:	e007      	b.n	8006e4e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	685a      	ldr	r2, [r3, #4]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	6859      	ldr	r1, [r3, #4]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	4b1d      	ldr	r3, [pc, #116]	@ (8006ed0 <HAL_I2C_Init+0x134>)
 8006e5a:	430b      	orrs	r3, r1
 8006e5c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68da      	ldr	r2, [r3, #12]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006e6c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	691a      	ldr	r2, [r3, #16]
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	695b      	ldr	r3, [r3, #20]
 8006e76:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	430a      	orrs	r2, r1
 8006e86:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	69d9      	ldr	r1, [r3, #28]
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a1a      	ldr	r2, [r3, #32]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	430a      	orrs	r2, r1
 8006e96:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f042 0201 	orr.w	r2, r2, #1
 8006ea6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2220      	movs	r2, #32
 8006eb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8006ec4:	2300      	movs	r3, #0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3708      	adds	r7, #8
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	02008000 	.word	0x02008000

08006ed4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b088      	sub	sp, #32
 8006ed8:	af02      	add	r7, sp, #8
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	4608      	mov	r0, r1
 8006ede:	4611      	mov	r1, r2
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	817b      	strh	r3, [r7, #10]
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	813b      	strh	r3, [r7, #8]
 8006eea:	4613      	mov	r3, r2
 8006eec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	2b20      	cmp	r3, #32
 8006ef8:	f040 80f9 	bne.w	80070ee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006efc:	6a3b      	ldr	r3, [r7, #32]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d002      	beq.n	8006f08 <HAL_I2C_Mem_Write+0x34>
 8006f02:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d105      	bne.n	8006f14 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006f0e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e0ed      	b.n	80070f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d101      	bne.n	8006f22 <HAL_I2C_Mem_Write+0x4e>
 8006f1e:	2302      	movs	r3, #2
 8006f20:	e0e6      	b.n	80070f0 <HAL_I2C_Mem_Write+0x21c>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2201      	movs	r2, #1
 8006f26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006f2a:	f7fa fe0b 	bl	8001b44 <HAL_GetTick>
 8006f2e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	9300      	str	r3, [sp, #0]
 8006f34:	2319      	movs	r3, #25
 8006f36:	2201      	movs	r2, #1
 8006f38:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f000 f955 	bl	80071ec <I2C_WaitOnFlagUntilTimeout>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d001      	beq.n	8006f4c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e0d1      	b.n	80070f0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2221      	movs	r2, #33	@ 0x21
 8006f50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2240      	movs	r2, #64	@ 0x40
 8006f58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6a3a      	ldr	r2, [r7, #32]
 8006f66:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006f6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006f74:	88f8      	ldrh	r0, [r7, #6]
 8006f76:	893a      	ldrh	r2, [r7, #8]
 8006f78:	8979      	ldrh	r1, [r7, #10]
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	9301      	str	r3, [sp, #4]
 8006f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f80:	9300      	str	r3, [sp, #0]
 8006f82:	4603      	mov	r3, r0
 8006f84:	68f8      	ldr	r0, [r7, #12]
 8006f86:	f000 f8b9 	bl	80070fc <I2C_RequestMemoryWrite>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d005      	beq.n	8006f9c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2200      	movs	r2, #0
 8006f94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e0a9      	b.n	80070f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fa0:	b29b      	uxth	r3, r3
 8006fa2:	2bff      	cmp	r3, #255	@ 0xff
 8006fa4:	d90e      	bls.n	8006fc4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	22ff      	movs	r2, #255	@ 0xff
 8006faa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fb0:	b2da      	uxtb	r2, r3
 8006fb2:	8979      	ldrh	r1, [r7, #10]
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	9300      	str	r3, [sp, #0]
 8006fb8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006fbc:	68f8      	ldr	r0, [r7, #12]
 8006fbe:	f000 fad9 	bl	8007574 <I2C_TransferConfig>
 8006fc2:	e00f      	b.n	8006fe4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006fd2:	b2da      	uxtb	r2, r3
 8006fd4:	8979      	ldrh	r1, [r7, #10]
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	9300      	str	r3, [sp, #0]
 8006fda:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f000 fac8 	bl	8007574 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006fe4:	697a      	ldr	r2, [r7, #20]
 8006fe6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006fe8:	68f8      	ldr	r0, [r7, #12]
 8006fea:	f000 f958 	bl	800729e <I2C_WaitOnTXISFlagUntilTimeout>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d001      	beq.n	8006ff8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e07b      	b.n	80070f0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ffc:	781a      	ldrb	r2, [r3, #0]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007008:	1c5a      	adds	r2, r3, #1
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007012:	b29b      	uxth	r3, r3
 8007014:	3b01      	subs	r3, #1
 8007016:	b29a      	uxth	r2, r3
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007020:	3b01      	subs	r3, #1
 8007022:	b29a      	uxth	r2, r3
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800702c:	b29b      	uxth	r3, r3
 800702e:	2b00      	cmp	r3, #0
 8007030:	d034      	beq.n	800709c <HAL_I2C_Mem_Write+0x1c8>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007036:	2b00      	cmp	r3, #0
 8007038:	d130      	bne.n	800709c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	9300      	str	r3, [sp, #0]
 800703e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007040:	2200      	movs	r2, #0
 8007042:	2180      	movs	r1, #128	@ 0x80
 8007044:	68f8      	ldr	r0, [r7, #12]
 8007046:	f000 f8d1 	bl	80071ec <I2C_WaitOnFlagUntilTimeout>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d001      	beq.n	8007054 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007050:	2301      	movs	r3, #1
 8007052:	e04d      	b.n	80070f0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007058:	b29b      	uxth	r3, r3
 800705a:	2bff      	cmp	r3, #255	@ 0xff
 800705c:	d90e      	bls.n	800707c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	22ff      	movs	r2, #255	@ 0xff
 8007062:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007068:	b2da      	uxtb	r2, r3
 800706a:	8979      	ldrh	r1, [r7, #10]
 800706c:	2300      	movs	r3, #0
 800706e:	9300      	str	r3, [sp, #0]
 8007070:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007074:	68f8      	ldr	r0, [r7, #12]
 8007076:	f000 fa7d 	bl	8007574 <I2C_TransferConfig>
 800707a:	e00f      	b.n	800709c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007080:	b29a      	uxth	r2, r3
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800708a:	b2da      	uxtb	r2, r3
 800708c:	8979      	ldrh	r1, [r7, #10]
 800708e:	2300      	movs	r3, #0
 8007090:	9300      	str	r3, [sp, #0]
 8007092:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	f000 fa6c 	bl	8007574 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d19e      	bne.n	8006fe4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070a6:	697a      	ldr	r2, [r7, #20]
 80070a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070aa:	68f8      	ldr	r0, [r7, #12]
 80070ac:	f000 f93e 	bl	800732c <I2C_WaitOnSTOPFlagUntilTimeout>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d001      	beq.n	80070ba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e01a      	b.n	80070f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2220      	movs	r2, #32
 80070c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	6859      	ldr	r1, [r3, #4]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	4b0a      	ldr	r3, [pc, #40]	@ (80070f8 <HAL_I2C_Mem_Write+0x224>)
 80070ce:	400b      	ands	r3, r1
 80070d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2220      	movs	r2, #32
 80070d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80070ea:	2300      	movs	r3, #0
 80070ec:	e000      	b.n	80070f0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80070ee:	2302      	movs	r3, #2
  }
}
 80070f0:	4618      	mov	r0, r3
 80070f2:	3718      	adds	r7, #24
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	fe00e800 	.word	0xfe00e800

080070fc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b086      	sub	sp, #24
 8007100:	af02      	add	r7, sp, #8
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	4608      	mov	r0, r1
 8007106:	4611      	mov	r1, r2
 8007108:	461a      	mov	r2, r3
 800710a:	4603      	mov	r3, r0
 800710c:	817b      	strh	r3, [r7, #10]
 800710e:	460b      	mov	r3, r1
 8007110:	813b      	strh	r3, [r7, #8]
 8007112:	4613      	mov	r3, r2
 8007114:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007116:	88fb      	ldrh	r3, [r7, #6]
 8007118:	b2da      	uxtb	r2, r3
 800711a:	8979      	ldrh	r1, [r7, #10]
 800711c:	4b20      	ldr	r3, [pc, #128]	@ (80071a0 <I2C_RequestMemoryWrite+0xa4>)
 800711e:	9300      	str	r3, [sp, #0]
 8007120:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f000 fa25 	bl	8007574 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800712a:	69fa      	ldr	r2, [r7, #28]
 800712c:	69b9      	ldr	r1, [r7, #24]
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f000 f8b5 	bl	800729e <I2C_WaitOnTXISFlagUntilTimeout>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d001      	beq.n	800713e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e02c      	b.n	8007198 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800713e:	88fb      	ldrh	r3, [r7, #6]
 8007140:	2b01      	cmp	r3, #1
 8007142:	d105      	bne.n	8007150 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007144:	893b      	ldrh	r3, [r7, #8]
 8007146:	b2da      	uxtb	r2, r3
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	629a      	str	r2, [r3, #40]	@ 0x28
 800714e:	e015      	b.n	800717c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007150:	893b      	ldrh	r3, [r7, #8]
 8007152:	0a1b      	lsrs	r3, r3, #8
 8007154:	b29b      	uxth	r3, r3
 8007156:	b2da      	uxtb	r2, r3
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800715e:	69fa      	ldr	r2, [r7, #28]
 8007160:	69b9      	ldr	r1, [r7, #24]
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	f000 f89b 	bl	800729e <I2C_WaitOnTXISFlagUntilTimeout>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d001      	beq.n	8007172 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800716e:	2301      	movs	r3, #1
 8007170:	e012      	b.n	8007198 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007172:	893b      	ldrh	r3, [r7, #8]
 8007174:	b2da      	uxtb	r2, r3
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800717c:	69fb      	ldr	r3, [r7, #28]
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	2200      	movs	r2, #0
 8007184:	2180      	movs	r1, #128	@ 0x80
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f000 f830 	bl	80071ec <I2C_WaitOnFlagUntilTimeout>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d001      	beq.n	8007196 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	e000      	b.n	8007198 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007196:	2300      	movs	r3, #0
}
 8007198:	4618      	mov	r0, r3
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	80002000 	.word	0x80002000

080071a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	699b      	ldr	r3, [r3, #24]
 80071b2:	f003 0302 	and.w	r3, r3, #2
 80071b6:	2b02      	cmp	r3, #2
 80071b8:	d103      	bne.n	80071c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2200      	movs	r2, #0
 80071c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	699b      	ldr	r3, [r3, #24]
 80071c8:	f003 0301 	and.w	r3, r3, #1
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d007      	beq.n	80071e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	699a      	ldr	r2, [r3, #24]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f042 0201 	orr.w	r2, r2, #1
 80071de:	619a      	str	r2, [r3, #24]
  }
}
 80071e0:	bf00      	nop
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b084      	sub	sp, #16
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	603b      	str	r3, [r7, #0]
 80071f8:	4613      	mov	r3, r2
 80071fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80071fc:	e03b      	b.n	8007276 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80071fe:	69ba      	ldr	r2, [r7, #24]
 8007200:	6839      	ldr	r1, [r7, #0]
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f000 f8d6 	bl	80073b4 <I2C_IsErrorOccurred>
 8007208:	4603      	mov	r3, r0
 800720a:	2b00      	cmp	r3, #0
 800720c:	d001      	beq.n	8007212 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	e041      	b.n	8007296 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007218:	d02d      	beq.n	8007276 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800721a:	f7fa fc93 	bl	8001b44 <HAL_GetTick>
 800721e:	4602      	mov	r2, r0
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	1ad3      	subs	r3, r2, r3
 8007224:	683a      	ldr	r2, [r7, #0]
 8007226:	429a      	cmp	r2, r3
 8007228:	d302      	bcc.n	8007230 <I2C_WaitOnFlagUntilTimeout+0x44>
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d122      	bne.n	8007276 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	699a      	ldr	r2, [r3, #24]
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	4013      	ands	r3, r2
 800723a:	68ba      	ldr	r2, [r7, #8]
 800723c:	429a      	cmp	r2, r3
 800723e:	bf0c      	ite	eq
 8007240:	2301      	moveq	r3, #1
 8007242:	2300      	movne	r3, #0
 8007244:	b2db      	uxtb	r3, r3
 8007246:	461a      	mov	r2, r3
 8007248:	79fb      	ldrb	r3, [r7, #7]
 800724a:	429a      	cmp	r2, r3
 800724c:	d113      	bne.n	8007276 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007252:	f043 0220 	orr.w	r2, r3, #32
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2220      	movs	r2, #32
 800725e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2200      	movs	r2, #0
 8007266:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2200      	movs	r2, #0
 800726e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	e00f      	b.n	8007296 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	699a      	ldr	r2, [r3, #24]
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	4013      	ands	r3, r2
 8007280:	68ba      	ldr	r2, [r7, #8]
 8007282:	429a      	cmp	r2, r3
 8007284:	bf0c      	ite	eq
 8007286:	2301      	moveq	r3, #1
 8007288:	2300      	movne	r3, #0
 800728a:	b2db      	uxtb	r3, r3
 800728c:	461a      	mov	r2, r3
 800728e:	79fb      	ldrb	r3, [r7, #7]
 8007290:	429a      	cmp	r2, r3
 8007292:	d0b4      	beq.n	80071fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}

0800729e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800729e:	b580      	push	{r7, lr}
 80072a0:	b084      	sub	sp, #16
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	60f8      	str	r0, [r7, #12]
 80072a6:	60b9      	str	r1, [r7, #8]
 80072a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80072aa:	e033      	b.n	8007314 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	68b9      	ldr	r1, [r7, #8]
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	f000 f87f 	bl	80073b4 <I2C_IsErrorOccurred>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d001      	beq.n	80072c0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	e031      	b.n	8007324 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c6:	d025      	beq.n	8007314 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072c8:	f7fa fc3c 	bl	8001b44 <HAL_GetTick>
 80072cc:	4602      	mov	r2, r0
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	1ad3      	subs	r3, r2, r3
 80072d2:	68ba      	ldr	r2, [r7, #8]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d302      	bcc.n	80072de <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d11a      	bne.n	8007314 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	699b      	ldr	r3, [r3, #24]
 80072e4:	f003 0302 	and.w	r3, r3, #2
 80072e8:	2b02      	cmp	r3, #2
 80072ea:	d013      	beq.n	8007314 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072f0:	f043 0220 	orr.w	r2, r3, #32
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2220      	movs	r2, #32
 80072fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	2200      	movs	r2, #0
 8007304:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	e007      	b.n	8007324 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	f003 0302 	and.w	r3, r3, #2
 800731e:	2b02      	cmp	r3, #2
 8007320:	d1c4      	bne.n	80072ac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007322:	2300      	movs	r3, #0
}
 8007324:	4618      	mov	r0, r3
 8007326:	3710      	adds	r7, #16
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007338:	e02f      	b.n	800739a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	68b9      	ldr	r1, [r7, #8]
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f000 f838 	bl	80073b4 <I2C_IsErrorOccurred>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d001      	beq.n	800734e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e02d      	b.n	80073aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800734e:	f7fa fbf9 	bl	8001b44 <HAL_GetTick>
 8007352:	4602      	mov	r2, r0
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	1ad3      	subs	r3, r2, r3
 8007358:	68ba      	ldr	r2, [r7, #8]
 800735a:	429a      	cmp	r2, r3
 800735c:	d302      	bcc.n	8007364 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d11a      	bne.n	800739a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	699b      	ldr	r3, [r3, #24]
 800736a:	f003 0320 	and.w	r3, r3, #32
 800736e:	2b20      	cmp	r3, #32
 8007370:	d013      	beq.n	800739a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007376:	f043 0220 	orr.w	r2, r3, #32
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2220      	movs	r2, #32
 8007382:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2200      	movs	r2, #0
 800738a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2200      	movs	r2, #0
 8007392:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	e007      	b.n	80073aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	699b      	ldr	r3, [r3, #24]
 80073a0:	f003 0320 	and.w	r3, r3, #32
 80073a4:	2b20      	cmp	r3, #32
 80073a6:	d1c8      	bne.n	800733a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3710      	adds	r7, #16
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
	...

080073b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b08a      	sub	sp, #40	@ 0x28
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073c0:	2300      	movs	r3, #0
 80073c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	699b      	ldr	r3, [r3, #24]
 80073cc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80073ce:	2300      	movs	r3, #0
 80073d0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	f003 0310 	and.w	r3, r3, #16
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d068      	beq.n	80074b2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	2210      	movs	r2, #16
 80073e6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80073e8:	e049      	b.n	800747e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073f0:	d045      	beq.n	800747e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80073f2:	f7fa fba7 	bl	8001b44 <HAL_GetTick>
 80073f6:	4602      	mov	r2, r0
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	1ad3      	subs	r3, r2, r3
 80073fc:	68ba      	ldr	r2, [r7, #8]
 80073fe:	429a      	cmp	r2, r3
 8007400:	d302      	bcc.n	8007408 <I2C_IsErrorOccurred+0x54>
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d13a      	bne.n	800747e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007412:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800741a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	699b      	ldr	r3, [r3, #24]
 8007422:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007426:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800742a:	d121      	bne.n	8007470 <I2C_IsErrorOccurred+0xbc>
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007432:	d01d      	beq.n	8007470 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007434:	7cfb      	ldrb	r3, [r7, #19]
 8007436:	2b20      	cmp	r3, #32
 8007438:	d01a      	beq.n	8007470 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	685a      	ldr	r2, [r3, #4]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007448:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800744a:	f7fa fb7b 	bl	8001b44 <HAL_GetTick>
 800744e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007450:	e00e      	b.n	8007470 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007452:	f7fa fb77 	bl	8001b44 <HAL_GetTick>
 8007456:	4602      	mov	r2, r0
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	1ad3      	subs	r3, r2, r3
 800745c:	2b19      	cmp	r3, #25
 800745e:	d907      	bls.n	8007470 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007460:	6a3b      	ldr	r3, [r7, #32]
 8007462:	f043 0320 	orr.w	r3, r3, #32
 8007466:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007468:	2301      	movs	r3, #1
 800746a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800746e:	e006      	b.n	800747e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	699b      	ldr	r3, [r3, #24]
 8007476:	f003 0320 	and.w	r3, r3, #32
 800747a:	2b20      	cmp	r3, #32
 800747c:	d1e9      	bne.n	8007452 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	699b      	ldr	r3, [r3, #24]
 8007484:	f003 0320 	and.w	r3, r3, #32
 8007488:	2b20      	cmp	r3, #32
 800748a:	d003      	beq.n	8007494 <I2C_IsErrorOccurred+0xe0>
 800748c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007490:	2b00      	cmp	r3, #0
 8007492:	d0aa      	beq.n	80073ea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007494:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007498:	2b00      	cmp	r3, #0
 800749a:	d103      	bne.n	80074a4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2220      	movs	r2, #32
 80074a2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80074a4:	6a3b      	ldr	r3, [r7, #32]
 80074a6:	f043 0304 	orr.w	r3, r3, #4
 80074aa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	699b      	ldr	r3, [r3, #24]
 80074b8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d00b      	beq.n	80074dc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80074c4:	6a3b      	ldr	r3, [r7, #32]
 80074c6:	f043 0301 	orr.w	r3, r3, #1
 80074ca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80074d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00b      	beq.n	80074fe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80074e6:	6a3b      	ldr	r3, [r7, #32]
 80074e8:	f043 0308 	orr.w	r3, r3, #8
 80074ec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80074f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007504:	2b00      	cmp	r3, #0
 8007506:	d00b      	beq.n	8007520 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007508:	6a3b      	ldr	r3, [r7, #32]
 800750a:	f043 0302 	orr.w	r3, r3, #2
 800750e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007518:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8007520:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007524:	2b00      	cmp	r3, #0
 8007526:	d01c      	beq.n	8007562 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007528:	68f8      	ldr	r0, [r7, #12]
 800752a:	f7ff fe3b 	bl	80071a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	6859      	ldr	r1, [r3, #4]
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	4b0d      	ldr	r3, [pc, #52]	@ (8007570 <I2C_IsErrorOccurred+0x1bc>)
 800753a:	400b      	ands	r3, r1
 800753c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007542:	6a3b      	ldr	r3, [r7, #32]
 8007544:	431a      	orrs	r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2220      	movs	r2, #32
 800754e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2200      	movs	r2, #0
 8007556:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8007562:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8007566:	4618      	mov	r0, r3
 8007568:	3728      	adds	r7, #40	@ 0x28
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
 800756e:	bf00      	nop
 8007570:	fe00e800 	.word	0xfe00e800

08007574 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007574:	b480      	push	{r7}
 8007576:	b087      	sub	sp, #28
 8007578:	af00      	add	r7, sp, #0
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	607b      	str	r3, [r7, #4]
 800757e:	460b      	mov	r3, r1
 8007580:	817b      	strh	r3, [r7, #10]
 8007582:	4613      	mov	r3, r2
 8007584:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007586:	897b      	ldrh	r3, [r7, #10]
 8007588:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800758c:	7a7b      	ldrb	r3, [r7, #9]
 800758e:	041b      	lsls	r3, r3, #16
 8007590:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007594:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800759a:	6a3b      	ldr	r3, [r7, #32]
 800759c:	4313      	orrs	r3, r2
 800759e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80075a2:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	685a      	ldr	r2, [r3, #4]
 80075aa:	6a3b      	ldr	r3, [r7, #32]
 80075ac:	0d5b      	lsrs	r3, r3, #21
 80075ae:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80075b2:	4b08      	ldr	r3, [pc, #32]	@ (80075d4 <I2C_TransferConfig+0x60>)
 80075b4:	430b      	orrs	r3, r1
 80075b6:	43db      	mvns	r3, r3
 80075b8:	ea02 0103 	and.w	r1, r2, r3
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	697a      	ldr	r2, [r7, #20]
 80075c2:	430a      	orrs	r2, r1
 80075c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80075c6:	bf00      	nop
 80075c8:	371c      	adds	r7, #28
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	03ff63ff 	.word	0x03ff63ff

080075d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	2b20      	cmp	r3, #32
 80075ec:	d138      	bne.n	8007660 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d101      	bne.n	80075fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80075f8:	2302      	movs	r3, #2
 80075fa:	e032      	b.n	8007662 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2224      	movs	r2, #36	@ 0x24
 8007608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f022 0201 	bic.w	r2, r2, #1
 800761a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800762a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	6819      	ldr	r1, [r3, #0]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	683a      	ldr	r2, [r7, #0]
 8007638:	430a      	orrs	r2, r1
 800763a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f042 0201 	orr.w	r2, r2, #1
 800764a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2220      	movs	r2, #32
 8007650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800765c:	2300      	movs	r3, #0
 800765e:	e000      	b.n	8007662 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007660:	2302      	movs	r3, #2
  }
}
 8007662:	4618      	mov	r0, r3
 8007664:	370c      	adds	r7, #12
 8007666:	46bd      	mov	sp, r7
 8007668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766c:	4770      	bx	lr

0800766e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800766e:	b480      	push	{r7}
 8007670:	b085      	sub	sp, #20
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
 8007676:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800767e:	b2db      	uxtb	r3, r3
 8007680:	2b20      	cmp	r3, #32
 8007682:	d139      	bne.n	80076f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800768a:	2b01      	cmp	r3, #1
 800768c:	d101      	bne.n	8007692 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800768e:	2302      	movs	r3, #2
 8007690:	e033      	b.n	80076fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2201      	movs	r2, #1
 8007696:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2224      	movs	r2, #36	@ 0x24
 800769e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f022 0201 	bic.w	r2, r2, #1
 80076b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80076c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	021b      	lsls	r3, r3, #8
 80076c6:	68fa      	ldr	r2, [r7, #12]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f042 0201 	orr.w	r2, r2, #1
 80076e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2220      	movs	r2, #32
 80076e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80076f4:	2300      	movs	r3, #0
 80076f6:	e000      	b.n	80076fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80076f8:	2302      	movs	r3, #2
  }
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	3714      	adds	r7, #20
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr

08007706 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b086      	sub	sp, #24
 800770a:	af02      	add	r7, sp, #8
 800770c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d101      	bne.n	8007718 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007714:	2301      	movs	r3, #1
 8007716:	e0fe      	b.n	8007916 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800771e:	b2db      	uxtb	r3, r3
 8007720:	2b00      	cmp	r3, #0
 8007722:	d106      	bne.n	8007732 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f009 f841 	bl	80107b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2203      	movs	r2, #3
 8007736:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4618      	mov	r0, r3
 8007740:	f005 fbf3 	bl	800cf2a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6818      	ldr	r0, [r3, #0]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	7c1a      	ldrb	r2, [r3, #16]
 800774c:	f88d 2000 	strb.w	r2, [sp]
 8007750:	3304      	adds	r3, #4
 8007752:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007754:	f005 fac4 	bl	800cce0 <USB_CoreInit>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d005      	beq.n	800776a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2202      	movs	r2, #2
 8007762:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e0d5      	b.n	8007916 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2100      	movs	r1, #0
 8007770:	4618      	mov	r0, r3
 8007772:	f005 fbeb 	bl	800cf4c <USB_SetCurrentMode>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d005      	beq.n	8007788 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2202      	movs	r2, #2
 8007780:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	e0c6      	b.n	8007916 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007788:	2300      	movs	r3, #0
 800778a:	73fb      	strb	r3, [r7, #15]
 800778c:	e04a      	b.n	8007824 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800778e:	7bfa      	ldrb	r2, [r7, #15]
 8007790:	6879      	ldr	r1, [r7, #4]
 8007792:	4613      	mov	r3, r2
 8007794:	00db      	lsls	r3, r3, #3
 8007796:	4413      	add	r3, r2
 8007798:	009b      	lsls	r3, r3, #2
 800779a:	440b      	add	r3, r1
 800779c:	3315      	adds	r3, #21
 800779e:	2201      	movs	r2, #1
 80077a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80077a2:	7bfa      	ldrb	r2, [r7, #15]
 80077a4:	6879      	ldr	r1, [r7, #4]
 80077a6:	4613      	mov	r3, r2
 80077a8:	00db      	lsls	r3, r3, #3
 80077aa:	4413      	add	r3, r2
 80077ac:	009b      	lsls	r3, r3, #2
 80077ae:	440b      	add	r3, r1
 80077b0:	3314      	adds	r3, #20
 80077b2:	7bfa      	ldrb	r2, [r7, #15]
 80077b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80077b6:	7bfa      	ldrb	r2, [r7, #15]
 80077b8:	7bfb      	ldrb	r3, [r7, #15]
 80077ba:	b298      	uxth	r0, r3
 80077bc:	6879      	ldr	r1, [r7, #4]
 80077be:	4613      	mov	r3, r2
 80077c0:	00db      	lsls	r3, r3, #3
 80077c2:	4413      	add	r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	440b      	add	r3, r1
 80077c8:	332e      	adds	r3, #46	@ 0x2e
 80077ca:	4602      	mov	r2, r0
 80077cc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80077ce:	7bfa      	ldrb	r2, [r7, #15]
 80077d0:	6879      	ldr	r1, [r7, #4]
 80077d2:	4613      	mov	r3, r2
 80077d4:	00db      	lsls	r3, r3, #3
 80077d6:	4413      	add	r3, r2
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	440b      	add	r3, r1
 80077dc:	3318      	adds	r3, #24
 80077de:	2200      	movs	r2, #0
 80077e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80077e2:	7bfa      	ldrb	r2, [r7, #15]
 80077e4:	6879      	ldr	r1, [r7, #4]
 80077e6:	4613      	mov	r3, r2
 80077e8:	00db      	lsls	r3, r3, #3
 80077ea:	4413      	add	r3, r2
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	440b      	add	r3, r1
 80077f0:	331c      	adds	r3, #28
 80077f2:	2200      	movs	r2, #0
 80077f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80077f6:	7bfa      	ldrb	r2, [r7, #15]
 80077f8:	6879      	ldr	r1, [r7, #4]
 80077fa:	4613      	mov	r3, r2
 80077fc:	00db      	lsls	r3, r3, #3
 80077fe:	4413      	add	r3, r2
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	440b      	add	r3, r1
 8007804:	3320      	adds	r3, #32
 8007806:	2200      	movs	r2, #0
 8007808:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800780a:	7bfa      	ldrb	r2, [r7, #15]
 800780c:	6879      	ldr	r1, [r7, #4]
 800780e:	4613      	mov	r3, r2
 8007810:	00db      	lsls	r3, r3, #3
 8007812:	4413      	add	r3, r2
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	440b      	add	r3, r1
 8007818:	3324      	adds	r3, #36	@ 0x24
 800781a:	2200      	movs	r2, #0
 800781c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800781e:	7bfb      	ldrb	r3, [r7, #15]
 8007820:	3301      	adds	r3, #1
 8007822:	73fb      	strb	r3, [r7, #15]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	791b      	ldrb	r3, [r3, #4]
 8007828:	7bfa      	ldrb	r2, [r7, #15]
 800782a:	429a      	cmp	r2, r3
 800782c:	d3af      	bcc.n	800778e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800782e:	2300      	movs	r3, #0
 8007830:	73fb      	strb	r3, [r7, #15]
 8007832:	e044      	b.n	80078be <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007834:	7bfa      	ldrb	r2, [r7, #15]
 8007836:	6879      	ldr	r1, [r7, #4]
 8007838:	4613      	mov	r3, r2
 800783a:	00db      	lsls	r3, r3, #3
 800783c:	4413      	add	r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	440b      	add	r3, r1
 8007842:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8007846:	2200      	movs	r2, #0
 8007848:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800784a:	7bfa      	ldrb	r2, [r7, #15]
 800784c:	6879      	ldr	r1, [r7, #4]
 800784e:	4613      	mov	r3, r2
 8007850:	00db      	lsls	r3, r3, #3
 8007852:	4413      	add	r3, r2
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	440b      	add	r3, r1
 8007858:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800785c:	7bfa      	ldrb	r2, [r7, #15]
 800785e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007860:	7bfa      	ldrb	r2, [r7, #15]
 8007862:	6879      	ldr	r1, [r7, #4]
 8007864:	4613      	mov	r3, r2
 8007866:	00db      	lsls	r3, r3, #3
 8007868:	4413      	add	r3, r2
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	440b      	add	r3, r1
 800786e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007872:	2200      	movs	r2, #0
 8007874:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007876:	7bfa      	ldrb	r2, [r7, #15]
 8007878:	6879      	ldr	r1, [r7, #4]
 800787a:	4613      	mov	r3, r2
 800787c:	00db      	lsls	r3, r3, #3
 800787e:	4413      	add	r3, r2
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	440b      	add	r3, r1
 8007884:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8007888:	2200      	movs	r2, #0
 800788a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800788c:	7bfa      	ldrb	r2, [r7, #15]
 800788e:	6879      	ldr	r1, [r7, #4]
 8007890:	4613      	mov	r3, r2
 8007892:	00db      	lsls	r3, r3, #3
 8007894:	4413      	add	r3, r2
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	440b      	add	r3, r1
 800789a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800789e:	2200      	movs	r2, #0
 80078a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80078a2:	7bfa      	ldrb	r2, [r7, #15]
 80078a4:	6879      	ldr	r1, [r7, #4]
 80078a6:	4613      	mov	r3, r2
 80078a8:	00db      	lsls	r3, r3, #3
 80078aa:	4413      	add	r3, r2
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	440b      	add	r3, r1
 80078b0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80078b4:	2200      	movs	r2, #0
 80078b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80078b8:	7bfb      	ldrb	r3, [r7, #15]
 80078ba:	3301      	adds	r3, #1
 80078bc:	73fb      	strb	r3, [r7, #15]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	791b      	ldrb	r3, [r3, #4]
 80078c2:	7bfa      	ldrb	r2, [r7, #15]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d3b5      	bcc.n	8007834 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6818      	ldr	r0, [r3, #0]
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	7c1a      	ldrb	r2, [r3, #16]
 80078d0:	f88d 2000 	strb.w	r2, [sp]
 80078d4:	3304      	adds	r3, #4
 80078d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80078d8:	f005 fb84 	bl	800cfe4 <USB_DevInit>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d005      	beq.n	80078ee <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2202      	movs	r2, #2
 80078e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80078ea:	2301      	movs	r3, #1
 80078ec:	e013      	b.n	8007916 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	7b1b      	ldrb	r3, [r3, #12]
 8007900:	2b01      	cmp	r3, #1
 8007902:	d102      	bne.n	800790a <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f001 f96f 	bl	8008be8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4618      	mov	r0, r3
 8007910:	f006 fbc7 	bl	800e0a2 <USB_DevDisconnect>

  return HAL_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3710      	adds	r7, #16
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b084      	sub	sp, #16
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007932:	2b01      	cmp	r3, #1
 8007934:	d101      	bne.n	800793a <HAL_PCD_Start+0x1c>
 8007936:	2302      	movs	r3, #2
 8007938:	e022      	b.n	8007980 <HAL_PCD_Start+0x62>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2201      	movs	r2, #1
 800793e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800794a:	2b00      	cmp	r3, #0
 800794c:	d009      	beq.n	8007962 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007952:	2b01      	cmp	r3, #1
 8007954:	d105      	bne.n	8007962 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800795a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4618      	mov	r0, r3
 8007968:	f005 face 	bl	800cf08 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4618      	mov	r0, r3
 8007972:	f006 fb75 	bl	800e060 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3710      	adds	r7, #16
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007988:	b590      	push	{r4, r7, lr}
 800798a:	b08d      	sub	sp, #52	@ 0x34
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007996:	6a3b      	ldr	r3, [r7, #32]
 8007998:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4618      	mov	r0, r3
 80079a0:	f006 fc33 	bl	800e20a <USB_GetMode>
 80079a4:	4603      	mov	r3, r0
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f040 84b9 	bne.w	800831e <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4618      	mov	r0, r3
 80079b2:	f006 fb97 	bl	800e0e4 <USB_ReadInterrupts>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f000 84af 	beq.w	800831c <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	0a1b      	lsrs	r3, r3, #8
 80079c8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4618      	mov	r0, r3
 80079d8:	f006 fb84 	bl	800e0e4 <USB_ReadInterrupts>
 80079dc:	4603      	mov	r3, r0
 80079de:	f003 0302 	and.w	r3, r3, #2
 80079e2:	2b02      	cmp	r3, #2
 80079e4:	d107      	bne.n	80079f6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	695a      	ldr	r2, [r3, #20]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f002 0202 	and.w	r2, r2, #2
 80079f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4618      	mov	r0, r3
 80079fc:	f006 fb72 	bl	800e0e4 <USB_ReadInterrupts>
 8007a00:	4603      	mov	r3, r0
 8007a02:	f003 0310 	and.w	r3, r3, #16
 8007a06:	2b10      	cmp	r3, #16
 8007a08:	d161      	bne.n	8007ace <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	699a      	ldr	r2, [r3, #24]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f022 0210 	bic.w	r2, r2, #16
 8007a18:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007a1a:	6a3b      	ldr	r3, [r7, #32]
 8007a1c:	6a1b      	ldr	r3, [r3, #32]
 8007a1e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	f003 020f 	and.w	r2, r3, #15
 8007a26:	4613      	mov	r3, r2
 8007a28:	00db      	lsls	r3, r3, #3
 8007a2a:	4413      	add	r3, r2
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007a32:	687a      	ldr	r2, [r7, #4]
 8007a34:	4413      	add	r3, r2
 8007a36:	3304      	adds	r3, #4
 8007a38:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8007a40:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007a44:	d124      	bne.n	8007a90 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007a46:	69ba      	ldr	r2, [r7, #24]
 8007a48:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8007a4c:	4013      	ands	r3, r2
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d035      	beq.n	8007abe <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	091b      	lsrs	r3, r3, #4
 8007a5a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007a5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	461a      	mov	r2, r3
 8007a64:	6a38      	ldr	r0, [r7, #32]
 8007a66:	f006 f9a9 	bl	800ddbc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	68da      	ldr	r2, [r3, #12]
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	091b      	lsrs	r3, r3, #4
 8007a72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a76:	441a      	add	r2, r3
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	695a      	ldr	r2, [r3, #20]
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	091b      	lsrs	r3, r3, #4
 8007a84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a88:	441a      	add	r2, r3
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	615a      	str	r2, [r3, #20]
 8007a8e:	e016      	b.n	8007abe <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8007a96:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007a9a:	d110      	bne.n	8007abe <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007aa2:	2208      	movs	r2, #8
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	6a38      	ldr	r0, [r7, #32]
 8007aa8:	f006 f988 	bl	800ddbc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	695a      	ldr	r2, [r3, #20]
 8007ab0:	69bb      	ldr	r3, [r7, #24]
 8007ab2:	091b      	lsrs	r3, r3, #4
 8007ab4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007ab8:	441a      	add	r2, r3
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	699a      	ldr	r2, [r3, #24]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f042 0210 	orr.w	r2, r2, #16
 8007acc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f006 fb06 	bl	800e0e4 <USB_ReadInterrupts>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8007ade:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8007ae2:	f040 80a7 	bne.w	8007c34 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4618      	mov	r0, r3
 8007af0:	f006 fb0b 	bl	800e10a <USB_ReadDevAllOutEpInterrupt>
 8007af4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8007af6:	e099      	b.n	8007c2c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007afa:	f003 0301 	and.w	r3, r3, #1
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	f000 808e 	beq.w	8007c20 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b0a:	b2d2      	uxtb	r2, r2
 8007b0c:	4611      	mov	r1, r2
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f006 fb2f 	bl	800e172 <USB_ReadDevOutEPInterrupt>
 8007b14:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	f003 0301 	and.w	r3, r3, #1
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d00c      	beq.n	8007b3a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b22:	015a      	lsls	r2, r3, #5
 8007b24:	69fb      	ldr	r3, [r7, #28]
 8007b26:	4413      	add	r3, r2
 8007b28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b2c:	461a      	mov	r2, r3
 8007b2e:	2301      	movs	r3, #1
 8007b30:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007b32:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 fed1 	bl	80088dc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	f003 0308 	and.w	r3, r3, #8
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00c      	beq.n	8007b5e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b46:	015a      	lsls	r2, r3, #5
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b50:	461a      	mov	r2, r3
 8007b52:	2308      	movs	r3, #8
 8007b54:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007b56:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 ffa7 	bl	8008aac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	f003 0310 	and.w	r3, r3, #16
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d008      	beq.n	8007b7a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6a:	015a      	lsls	r2, r3, #5
 8007b6c:	69fb      	ldr	r3, [r7, #28]
 8007b6e:	4413      	add	r3, r2
 8007b70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b74:	461a      	mov	r2, r3
 8007b76:	2310      	movs	r3, #16
 8007b78:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	f003 0302 	and.w	r3, r3, #2
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d030      	beq.n	8007be6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007b84:	6a3b      	ldr	r3, [r7, #32]
 8007b86:	695b      	ldr	r3, [r3, #20]
 8007b88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b8c:	2b80      	cmp	r3, #128	@ 0x80
 8007b8e:	d109      	bne.n	8007ba4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	69fa      	ldr	r2, [r7, #28]
 8007b9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007b9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007ba2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007ba4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	00db      	lsls	r3, r3, #3
 8007baa:	4413      	add	r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	3304      	adds	r3, #4
 8007bb8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	78db      	ldrb	r3, [r3, #3]
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d108      	bne.n	8007bd4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	4619      	mov	r1, r3
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f008 ff44 	bl	8010a5c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd6:	015a      	lsls	r2, r3, #5
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	4413      	add	r3, r2
 8007bdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007be0:	461a      	mov	r2, r3
 8007be2:	2302      	movs	r3, #2
 8007be4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	f003 0320 	and.w	r3, r3, #32
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d008      	beq.n	8007c02 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf2:	015a      	lsls	r2, r3, #5
 8007bf4:	69fb      	ldr	r3, [r7, #28]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bfc:	461a      	mov	r2, r3
 8007bfe:	2320      	movs	r3, #32
 8007c00:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d009      	beq.n	8007c20 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c0e:	015a      	lsls	r2, r3, #5
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	4413      	add	r3, r2
 8007c14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c18:	461a      	mov	r2, r3
 8007c1a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007c1e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c22:	3301      	adds	r3, #1
 8007c24:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c28:	085b      	lsrs	r3, r3, #1
 8007c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f47f af62 	bne.w	8007af8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f006 fa53 	bl	800e0e4 <USB_ReadInterrupts>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007c44:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007c48:	f040 80db 	bne.w	8007e02 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4618      	mov	r0, r3
 8007c52:	f006 fa74 	bl	800e13e <USB_ReadDevAllInEpInterrupt>
 8007c56:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8007c5c:	e0cd      	b.n	8007dfa <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c60:	f003 0301 	and.w	r3, r3, #1
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	f000 80c2 	beq.w	8007dee <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c70:	b2d2      	uxtb	r2, r2
 8007c72:	4611      	mov	r1, r2
 8007c74:	4618      	mov	r0, r3
 8007c76:	f006 fa9a 	bl	800e1ae <USB_ReadDevInEPInterrupt>
 8007c7a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	f003 0301 	and.w	r3, r3, #1
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d057      	beq.n	8007d36 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c88:	f003 030f 	and.w	r3, r3, #15
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c92:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007c94:	69fb      	ldr	r3, [r7, #28]
 8007c96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007c9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	43db      	mvns	r3, r3
 8007ca0:	69f9      	ldr	r1, [r7, #28]
 8007ca2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007ca6:	4013      	ands	r3, r2
 8007ca8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cac:	015a      	lsls	r2, r3, #5
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	2301      	movs	r3, #1
 8007cba:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	799b      	ldrb	r3, [r3, #6]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d132      	bne.n	8007d2a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007cc4:	6879      	ldr	r1, [r7, #4]
 8007cc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cc8:	4613      	mov	r3, r2
 8007cca:	00db      	lsls	r3, r3, #3
 8007ccc:	4413      	add	r3, r2
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	440b      	add	r3, r1
 8007cd2:	3320      	adds	r3, #32
 8007cd4:	6819      	ldr	r1, [r3, #0]
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cda:	4613      	mov	r3, r2
 8007cdc:	00db      	lsls	r3, r3, #3
 8007cde:	4413      	add	r3, r2
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	4403      	add	r3, r0
 8007ce4:	331c      	adds	r3, #28
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4419      	add	r1, r3
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cee:	4613      	mov	r3, r2
 8007cf0:	00db      	lsls	r3, r3, #3
 8007cf2:	4413      	add	r3, r2
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	4403      	add	r3, r0
 8007cf8:	3320      	adds	r3, #32
 8007cfa:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d113      	bne.n	8007d2a <HAL_PCD_IRQHandler+0x3a2>
 8007d02:	6879      	ldr	r1, [r7, #4]
 8007d04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d06:	4613      	mov	r3, r2
 8007d08:	00db      	lsls	r3, r3, #3
 8007d0a:	4413      	add	r3, r2
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	440b      	add	r3, r1
 8007d10:	3324      	adds	r3, #36	@ 0x24
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d108      	bne.n	8007d2a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6818      	ldr	r0, [r3, #0]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007d22:	461a      	mov	r2, r3
 8007d24:	2101      	movs	r1, #1
 8007d26:	f006 faa3 	bl	800e270 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	4619      	mov	r1, r3
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f008 fe0e 	bl	8010952 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	f003 0308 	and.w	r3, r3, #8
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d008      	beq.n	8007d52 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d42:	015a      	lsls	r2, r3, #5
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	4413      	add	r3, r2
 8007d48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	2308      	movs	r3, #8
 8007d50:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	f003 0310 	and.w	r3, r3, #16
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d008      	beq.n	8007d6e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d5e:	015a      	lsls	r2, r3, #5
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	4413      	add	r3, r2
 8007d64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d68:	461a      	mov	r2, r3
 8007d6a:	2310      	movs	r3, #16
 8007d6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d008      	beq.n	8007d8a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d7a:	015a      	lsls	r2, r3, #5
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	4413      	add	r3, r2
 8007d80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d84:	461a      	mov	r2, r3
 8007d86:	2340      	movs	r3, #64	@ 0x40
 8007d88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	f003 0302 	and.w	r3, r3, #2
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d023      	beq.n	8007ddc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007d94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007d96:	6a38      	ldr	r0, [r7, #32]
 8007d98:	f005 fa82 	bl	800d2a0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007d9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d9e:	4613      	mov	r3, r2
 8007da0:	00db      	lsls	r3, r3, #3
 8007da2:	4413      	add	r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	3310      	adds	r3, #16
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	4413      	add	r3, r2
 8007dac:	3304      	adds	r3, #4
 8007dae:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	78db      	ldrb	r3, [r3, #3]
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d108      	bne.n	8007dca <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f008 fe5b 	bl	8010a80 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dcc:	015a      	lsls	r2, r3, #5
 8007dce:	69fb      	ldr	r3, [r7, #28]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	2302      	movs	r3, #2
 8007dda:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d003      	beq.n	8007dee <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007de6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f000 fcea 	bl	80087c2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007df0:	3301      	adds	r3, #1
 8007df2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007df6:	085b      	lsrs	r3, r3, #1
 8007df8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f47f af2e 	bne.w	8007c5e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4618      	mov	r0, r3
 8007e08:	f006 f96c 	bl	800e0e4 <USB_ReadInterrupts>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e12:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e16:	d122      	bne.n	8007e5e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	69fa      	ldr	r2, [r7, #28]
 8007e22:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007e26:	f023 0301 	bic.w	r3, r3, #1
 8007e2a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d108      	bne.n	8007e48 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007e3e:	2100      	movs	r1, #0
 8007e40:	6878      	ldr	r0, [r7, #4]
 8007e42:	f000 fef5 	bl	8008c30 <HAL_PCDEx_LPM_Callback>
 8007e46:	e002      	b.n	8007e4e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f008 fdf9 	bl	8010a40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	695a      	ldr	r2, [r3, #20]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8007e5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	4618      	mov	r0, r3
 8007e64:	f006 f93e 	bl	800e0e4 <USB_ReadInterrupts>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e6e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007e72:	d112      	bne.n	8007e9a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	f003 0301 	and.w	r3, r3, #1
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d102      	bne.n	8007e8a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f008 fdb5 	bl	80109f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	695a      	ldr	r2, [r3, #20]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8007e98:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f006 f920 	bl	800e0e4 <USB_ReadInterrupts>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007eaa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007eae:	d121      	bne.n	8007ef4 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	695a      	ldr	r2, [r3, #20]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8007ebe:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d111      	bne.n	8007eee <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2201      	movs	r2, #1
 8007ece:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ed8:	089b      	lsrs	r3, r3, #2
 8007eda:	f003 020f 	and.w	r2, r3, #15
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007ee4:	2101      	movs	r1, #1
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 fea2 	bl	8008c30 <HAL_PCDEx_LPM_Callback>
 8007eec:	e002      	b.n	8007ef4 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f008 fd80 	bl	80109f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f006 f8f3 	bl	800e0e4 <USB_ReadInterrupts>
 8007efe:	4603      	mov	r3, r0
 8007f00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007f04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f08:	f040 80b7 	bne.w	800807a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007f0c:	69fb      	ldr	r3, [r7, #28]
 8007f0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	69fa      	ldr	r2, [r7, #28]
 8007f16:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007f1a:	f023 0301 	bic.w	r3, r3, #1
 8007f1e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2110      	movs	r1, #16
 8007f26:	4618      	mov	r0, r3
 8007f28:	f005 f9ba 	bl	800d2a0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f30:	e046      	b.n	8007fc0 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f34:	015a      	lsls	r2, r3, #5
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	4413      	add	r3, r2
 8007f3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f3e:	461a      	mov	r2, r3
 8007f40:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007f44:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f48:	015a      	lsls	r2, r3, #5
 8007f4a:	69fb      	ldr	r3, [r7, #28]
 8007f4c:	4413      	add	r3, r2
 8007f4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f56:	0151      	lsls	r1, r2, #5
 8007f58:	69fa      	ldr	r2, [r7, #28]
 8007f5a:	440a      	add	r2, r1
 8007f5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007f60:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007f64:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f68:	015a      	lsls	r2, r3, #5
 8007f6a:	69fb      	ldr	r3, [r7, #28]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f72:	461a      	mov	r2, r3
 8007f74:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007f78:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f7c:	015a      	lsls	r2, r3, #5
 8007f7e:	69fb      	ldr	r3, [r7, #28]
 8007f80:	4413      	add	r3, r2
 8007f82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f8a:	0151      	lsls	r1, r2, #5
 8007f8c:	69fa      	ldr	r2, [r7, #28]
 8007f8e:	440a      	add	r2, r1
 8007f90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f94:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007f98:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f9c:	015a      	lsls	r2, r3, #5
 8007f9e:	69fb      	ldr	r3, [r7, #28]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007faa:	0151      	lsls	r1, r2, #5
 8007fac:	69fa      	ldr	r2, [r7, #28]
 8007fae:	440a      	add	r2, r1
 8007fb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007fb4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007fb8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	791b      	ldrb	r3, [r3, #4]
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d3b2      	bcc.n	8007f32 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fd2:	69db      	ldr	r3, [r3, #28]
 8007fd4:	69fa      	ldr	r2, [r7, #28]
 8007fd6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007fda:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8007fde:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	7bdb      	ldrb	r3, [r3, #15]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d016      	beq.n	8008016 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007fee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ff2:	69fa      	ldr	r2, [r7, #28]
 8007ff4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007ff8:	f043 030b 	orr.w	r3, r3, #11
 8007ffc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008008:	69fa      	ldr	r2, [r7, #28]
 800800a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800800e:	f043 030b 	orr.w	r3, r3, #11
 8008012:	6453      	str	r3, [r2, #68]	@ 0x44
 8008014:	e015      	b.n	8008042 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800801c:	695a      	ldr	r2, [r3, #20]
 800801e:	69fb      	ldr	r3, [r7, #28]
 8008020:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008024:	4619      	mov	r1, r3
 8008026:	f242 032b 	movw	r3, #8235	@ 0x202b
 800802a:	4313      	orrs	r3, r2
 800802c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800802e:	69fb      	ldr	r3, [r7, #28]
 8008030:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008034:	691b      	ldr	r3, [r3, #16]
 8008036:	69fa      	ldr	r2, [r7, #28]
 8008038:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800803c:	f043 030b 	orr.w	r3, r3, #11
 8008040:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	69fa      	ldr	r2, [r7, #28]
 800804c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008050:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008054:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6818      	ldr	r0, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008064:	461a      	mov	r2, r3
 8008066:	f006 f903 	bl	800e270 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	695a      	ldr	r2, [r3, #20]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8008078:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4618      	mov	r0, r3
 8008080:	f006 f830 	bl	800e0e4 <USB_ReadInterrupts>
 8008084:	4603      	mov	r3, r0
 8008086:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800808a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800808e:	d123      	bne.n	80080d8 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4618      	mov	r0, r3
 8008096:	f006 f8c7 	bl	800e228 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4618      	mov	r0, r3
 80080a0:	f005 f977 	bl	800d392 <USB_GetDevSpeed>
 80080a4:	4603      	mov	r3, r0
 80080a6:	461a      	mov	r2, r3
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681c      	ldr	r4, [r3, #0]
 80080b0:	f001 fde0 	bl	8009c74 <HAL_RCC_GetHCLKFreq>
 80080b4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80080ba:	461a      	mov	r2, r3
 80080bc:	4620      	mov	r0, r4
 80080be:	f004 fe81 	bl	800cdc4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f008 fc6d 	bl	80109a2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	695a      	ldr	r2, [r3, #20]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80080d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4618      	mov	r0, r3
 80080de:	f006 f801 	bl	800e0e4 <USB_ReadInterrupts>
 80080e2:	4603      	mov	r3, r0
 80080e4:	f003 0308 	and.w	r3, r3, #8
 80080e8:	2b08      	cmp	r3, #8
 80080ea:	d10a      	bne.n	8008102 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f008 fc4a 	bl	8010986 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	695a      	ldr	r2, [r3, #20]
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f002 0208 	and.w	r2, r2, #8
 8008100:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	4618      	mov	r0, r3
 8008108:	f005 ffec 	bl	800e0e4 <USB_ReadInterrupts>
 800810c:	4603      	mov	r3, r0
 800810e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008112:	2b80      	cmp	r3, #128	@ 0x80
 8008114:	d123      	bne.n	800815e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008116:	6a3b      	ldr	r3, [r7, #32]
 8008118:	699b      	ldr	r3, [r3, #24]
 800811a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800811e:	6a3b      	ldr	r3, [r7, #32]
 8008120:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008122:	2301      	movs	r3, #1
 8008124:	627b      	str	r3, [r7, #36]	@ 0x24
 8008126:	e014      	b.n	8008152 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8008128:	6879      	ldr	r1, [r7, #4]
 800812a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800812c:	4613      	mov	r3, r2
 800812e:	00db      	lsls	r3, r3, #3
 8008130:	4413      	add	r3, r2
 8008132:	009b      	lsls	r3, r3, #2
 8008134:	440b      	add	r3, r1
 8008136:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	2b01      	cmp	r3, #1
 800813e:	d105      	bne.n	800814c <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008142:	b2db      	uxtb	r3, r3
 8008144:	4619      	mov	r1, r3
 8008146:	6878      	ldr	r0, [r7, #4]
 8008148:	f000 fb0a 	bl	8008760 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800814c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800814e:	3301      	adds	r3, #1
 8008150:	627b      	str	r3, [r7, #36]	@ 0x24
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	791b      	ldrb	r3, [r3, #4]
 8008156:	461a      	mov	r2, r3
 8008158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800815a:	4293      	cmp	r3, r2
 800815c:	d3e4      	bcc.n	8008128 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	4618      	mov	r0, r3
 8008164:	f005 ffbe 	bl	800e0e4 <USB_ReadInterrupts>
 8008168:	4603      	mov	r3, r0
 800816a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800816e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008172:	d13c      	bne.n	80081ee <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008174:	2301      	movs	r3, #1
 8008176:	627b      	str	r3, [r7, #36]	@ 0x24
 8008178:	e02b      	b.n	80081d2 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800817a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800817c:	015a      	lsls	r2, r3, #5
 800817e:	69fb      	ldr	r3, [r7, #28]
 8008180:	4413      	add	r3, r2
 8008182:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800818a:	6879      	ldr	r1, [r7, #4]
 800818c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800818e:	4613      	mov	r3, r2
 8008190:	00db      	lsls	r3, r3, #3
 8008192:	4413      	add	r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	440b      	add	r3, r1
 8008198:	3318      	adds	r3, #24
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	2b01      	cmp	r3, #1
 800819e:	d115      	bne.n	80081cc <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80081a0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	da12      	bge.n	80081cc <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80081a6:	6879      	ldr	r1, [r7, #4]
 80081a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081aa:	4613      	mov	r3, r2
 80081ac:	00db      	lsls	r3, r3, #3
 80081ae:	4413      	add	r3, r2
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	440b      	add	r3, r1
 80081b4:	3317      	adds	r3, #23
 80081b6:	2201      	movs	r2, #1
 80081b8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80081ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	4619      	mov	r1, r3
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 faca 	bl	8008760 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80081cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ce:	3301      	adds	r3, #1
 80081d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	791b      	ldrb	r3, [r3, #4]
 80081d6:	461a      	mov	r2, r3
 80081d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081da:	4293      	cmp	r3, r2
 80081dc:	d3cd      	bcc.n	800817a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	695a      	ldr	r2, [r3, #20]
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80081ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4618      	mov	r0, r3
 80081f4:	f005 ff76 	bl	800e0e4 <USB_ReadInterrupts>
 80081f8:	4603      	mov	r3, r0
 80081fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80081fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008202:	d156      	bne.n	80082b2 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008204:	2301      	movs	r3, #1
 8008206:	627b      	str	r3, [r7, #36]	@ 0x24
 8008208:	e045      	b.n	8008296 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800820a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800820c:	015a      	lsls	r2, r3, #5
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	4413      	add	r3, r2
 8008212:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800821a:	6879      	ldr	r1, [r7, #4]
 800821c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800821e:	4613      	mov	r3, r2
 8008220:	00db      	lsls	r3, r3, #3
 8008222:	4413      	add	r3, r2
 8008224:	009b      	lsls	r3, r3, #2
 8008226:	440b      	add	r3, r1
 8008228:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	2b01      	cmp	r3, #1
 8008230:	d12e      	bne.n	8008290 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008232:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008234:	2b00      	cmp	r3, #0
 8008236:	da2b      	bge.n	8008290 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8008238:	69bb      	ldr	r3, [r7, #24]
 800823a:	0c1a      	lsrs	r2, r3, #16
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8008242:	4053      	eors	r3, r2
 8008244:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008248:	2b00      	cmp	r3, #0
 800824a:	d121      	bne.n	8008290 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800824c:	6879      	ldr	r1, [r7, #4]
 800824e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008250:	4613      	mov	r3, r2
 8008252:	00db      	lsls	r3, r3, #3
 8008254:	4413      	add	r3, r2
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	440b      	add	r3, r1
 800825a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800825e:	2201      	movs	r2, #1
 8008260:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008262:	6a3b      	ldr	r3, [r7, #32]
 8008264:	699b      	ldr	r3, [r3, #24]
 8008266:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800826a:	6a3b      	ldr	r3, [r7, #32]
 800826c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800826e:	6a3b      	ldr	r3, [r7, #32]
 8008270:	695b      	ldr	r3, [r3, #20]
 8008272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008276:	2b00      	cmp	r3, #0
 8008278:	d10a      	bne.n	8008290 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	69fa      	ldr	r2, [r7, #28]
 8008284:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008288:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800828c:	6053      	str	r3, [r2, #4]
            break;
 800828e:	e008      	b.n	80082a2 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008292:	3301      	adds	r3, #1
 8008294:	627b      	str	r3, [r7, #36]	@ 0x24
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	791b      	ldrb	r3, [r3, #4]
 800829a:	461a      	mov	r2, r3
 800829c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800829e:	4293      	cmp	r3, r2
 80082a0:	d3b3      	bcc.n	800820a <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	695a      	ldr	r2, [r3, #20]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80082b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4618      	mov	r0, r3
 80082b8:	f005 ff14 	bl	800e0e4 <USB_ReadInterrupts>
 80082bc:	4603      	mov	r3, r0
 80082be:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80082c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80082c6:	d10a      	bne.n	80082de <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f008 fbeb 	bl	8010aa4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	695a      	ldr	r2, [r3, #20]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80082dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4618      	mov	r0, r3
 80082e4:	f005 fefe 	bl	800e0e4 <USB_ReadInterrupts>
 80082e8:	4603      	mov	r3, r0
 80082ea:	f003 0304 	and.w	r3, r3, #4
 80082ee:	2b04      	cmp	r3, #4
 80082f0:	d115      	bne.n	800831e <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	f003 0304 	and.w	r3, r3, #4
 8008300:	2b00      	cmp	r3, #0
 8008302:	d002      	beq.n	800830a <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f008 fbdb 	bl	8010ac0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	6859      	ldr	r1, [r3, #4]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	69ba      	ldr	r2, [r7, #24]
 8008316:	430a      	orrs	r2, r1
 8008318:	605a      	str	r2, [r3, #4]
 800831a:	e000      	b.n	800831e <HAL_PCD_IRQHandler+0x996>
      return;
 800831c:	bf00      	nop
    }
  }
}
 800831e:	3734      	adds	r7, #52	@ 0x34
 8008320:	46bd      	mov	sp, r7
 8008322:	bd90      	pop	{r4, r7, pc}

08008324 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	b082      	sub	sp, #8
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
 800832c:	460b      	mov	r3, r1
 800832e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008336:	2b01      	cmp	r3, #1
 8008338:	d101      	bne.n	800833e <HAL_PCD_SetAddress+0x1a>
 800833a:	2302      	movs	r3, #2
 800833c:	e012      	b.n	8008364 <HAL_PCD_SetAddress+0x40>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2201      	movs	r2, #1
 8008342:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	78fa      	ldrb	r2, [r7, #3]
 800834a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	78fa      	ldrb	r2, [r7, #3]
 8008352:	4611      	mov	r1, r2
 8008354:	4618      	mov	r0, r3
 8008356:	f005 fe5d 	bl	800e014 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2200      	movs	r2, #0
 800835e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008362:	2300      	movs	r3, #0
}
 8008364:	4618      	mov	r0, r3
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	4608      	mov	r0, r1
 8008376:	4611      	mov	r1, r2
 8008378:	461a      	mov	r2, r3
 800837a:	4603      	mov	r3, r0
 800837c:	70fb      	strb	r3, [r7, #3]
 800837e:	460b      	mov	r3, r1
 8008380:	803b      	strh	r3, [r7, #0]
 8008382:	4613      	mov	r3, r2
 8008384:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8008386:	2300      	movs	r3, #0
 8008388:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800838a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800838e:	2b00      	cmp	r3, #0
 8008390:	da0f      	bge.n	80083b2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008392:	78fb      	ldrb	r3, [r7, #3]
 8008394:	f003 020f 	and.w	r2, r3, #15
 8008398:	4613      	mov	r3, r2
 800839a:	00db      	lsls	r3, r3, #3
 800839c:	4413      	add	r3, r2
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	3310      	adds	r3, #16
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	4413      	add	r3, r2
 80083a6:	3304      	adds	r3, #4
 80083a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	2201      	movs	r2, #1
 80083ae:	705a      	strb	r2, [r3, #1]
 80083b0:	e00f      	b.n	80083d2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80083b2:	78fb      	ldrb	r3, [r7, #3]
 80083b4:	f003 020f 	and.w	r2, r3, #15
 80083b8:	4613      	mov	r3, r2
 80083ba:	00db      	lsls	r3, r3, #3
 80083bc:	4413      	add	r3, r2
 80083be:	009b      	lsls	r3, r3, #2
 80083c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80083c4:	687a      	ldr	r2, [r7, #4]
 80083c6:	4413      	add	r3, r2
 80083c8:	3304      	adds	r3, #4
 80083ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2200      	movs	r2, #0
 80083d0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80083d2:	78fb      	ldrb	r3, [r7, #3]
 80083d4:	f003 030f 	and.w	r3, r3, #15
 80083d8:	b2da      	uxtb	r2, r3
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80083de:	883b      	ldrh	r3, [r7, #0]
 80083e0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	78ba      	ldrb	r2, [r7, #2]
 80083ec:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	785b      	ldrb	r3, [r3, #1]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d004      	beq.n	8008400 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	461a      	mov	r2, r3
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008400:	78bb      	ldrb	r3, [r7, #2]
 8008402:	2b02      	cmp	r3, #2
 8008404:	d102      	bne.n	800840c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2200      	movs	r2, #0
 800840a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008412:	2b01      	cmp	r3, #1
 8008414:	d101      	bne.n	800841a <HAL_PCD_EP_Open+0xae>
 8008416:	2302      	movs	r3, #2
 8008418:	e00e      	b.n	8008438 <HAL_PCD_EP_Open+0xcc>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2201      	movs	r2, #1
 800841e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	68f9      	ldr	r1, [r7, #12]
 8008428:	4618      	mov	r0, r3
 800842a:	f004 ffd7 	bl	800d3dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2200      	movs	r2, #0
 8008432:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8008436:	7afb      	ldrb	r3, [r7, #11]
}
 8008438:	4618      	mov	r0, r3
 800843a:	3710      	adds	r7, #16
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b084      	sub	sp, #16
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	460b      	mov	r3, r1
 800844a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800844c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008450:	2b00      	cmp	r3, #0
 8008452:	da0f      	bge.n	8008474 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008454:	78fb      	ldrb	r3, [r7, #3]
 8008456:	f003 020f 	and.w	r2, r3, #15
 800845a:	4613      	mov	r3, r2
 800845c:	00db      	lsls	r3, r3, #3
 800845e:	4413      	add	r3, r2
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	3310      	adds	r3, #16
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	4413      	add	r3, r2
 8008468:	3304      	adds	r3, #4
 800846a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	2201      	movs	r2, #1
 8008470:	705a      	strb	r2, [r3, #1]
 8008472:	e00f      	b.n	8008494 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008474:	78fb      	ldrb	r3, [r7, #3]
 8008476:	f003 020f 	and.w	r2, r3, #15
 800847a:	4613      	mov	r3, r2
 800847c:	00db      	lsls	r3, r3, #3
 800847e:	4413      	add	r3, r2
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008486:	687a      	ldr	r2, [r7, #4]
 8008488:	4413      	add	r3, r2
 800848a:	3304      	adds	r3, #4
 800848c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2200      	movs	r2, #0
 8008492:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008494:	78fb      	ldrb	r3, [r7, #3]
 8008496:	f003 030f 	and.w	r3, r3, #15
 800849a:	b2da      	uxtb	r2, r3
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d101      	bne.n	80084ae <HAL_PCD_EP_Close+0x6e>
 80084aa:	2302      	movs	r3, #2
 80084ac:	e00e      	b.n	80084cc <HAL_PCD_EP_Close+0x8c>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2201      	movs	r2, #1
 80084b2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	68f9      	ldr	r1, [r7, #12]
 80084bc:	4618      	mov	r0, r3
 80084be:	f005 f815 	bl	800d4ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2200      	movs	r2, #0
 80084c6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3710      	adds	r7, #16
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b086      	sub	sp, #24
 80084d8:	af00      	add	r7, sp, #0
 80084da:	60f8      	str	r0, [r7, #12]
 80084dc:	607a      	str	r2, [r7, #4]
 80084de:	603b      	str	r3, [r7, #0]
 80084e0:	460b      	mov	r3, r1
 80084e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80084e4:	7afb      	ldrb	r3, [r7, #11]
 80084e6:	f003 020f 	and.w	r2, r3, #15
 80084ea:	4613      	mov	r3, r2
 80084ec:	00db      	lsls	r3, r3, #3
 80084ee:	4413      	add	r3, r2
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	4413      	add	r3, r2
 80084fa:	3304      	adds	r3, #4
 80084fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	683a      	ldr	r2, [r7, #0]
 8008508:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	2200      	movs	r2, #0
 800850e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	2200      	movs	r2, #0
 8008514:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008516:	7afb      	ldrb	r3, [r7, #11]
 8008518:	f003 030f 	and.w	r3, r3, #15
 800851c:	b2da      	uxtb	r2, r3
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	799b      	ldrb	r3, [r3, #6]
 8008526:	2b01      	cmp	r3, #1
 8008528:	d102      	bne.n	8008530 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	6818      	ldr	r0, [r3, #0]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	799b      	ldrb	r3, [r3, #6]
 8008538:	461a      	mov	r2, r3
 800853a:	6979      	ldr	r1, [r7, #20]
 800853c:	f005 f8b2 	bl	800d6a4 <USB_EPStartXfer>

  return HAL_OK;
 8008540:	2300      	movs	r3, #0
}
 8008542:	4618      	mov	r0, r3
 8008544:	3718      	adds	r7, #24
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}

0800854a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800854a:	b480      	push	{r7}
 800854c:	b083      	sub	sp, #12
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
 8008552:	460b      	mov	r3, r1
 8008554:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008556:	78fb      	ldrb	r3, [r7, #3]
 8008558:	f003 020f 	and.w	r2, r3, #15
 800855c:	6879      	ldr	r1, [r7, #4]
 800855e:	4613      	mov	r3, r2
 8008560:	00db      	lsls	r3, r3, #3
 8008562:	4413      	add	r3, r2
 8008564:	009b      	lsls	r3, r3, #2
 8008566:	440b      	add	r3, r1
 8008568:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800856c:	681b      	ldr	r3, [r3, #0]
}
 800856e:	4618      	mov	r0, r3
 8008570:	370c      	adds	r7, #12
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr

0800857a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800857a:	b580      	push	{r7, lr}
 800857c:	b086      	sub	sp, #24
 800857e:	af00      	add	r7, sp, #0
 8008580:	60f8      	str	r0, [r7, #12]
 8008582:	607a      	str	r2, [r7, #4]
 8008584:	603b      	str	r3, [r7, #0]
 8008586:	460b      	mov	r3, r1
 8008588:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800858a:	7afb      	ldrb	r3, [r7, #11]
 800858c:	f003 020f 	and.w	r2, r3, #15
 8008590:	4613      	mov	r3, r2
 8008592:	00db      	lsls	r3, r3, #3
 8008594:	4413      	add	r3, r2
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	3310      	adds	r3, #16
 800859a:	68fa      	ldr	r2, [r7, #12]
 800859c:	4413      	add	r3, r2
 800859e:	3304      	adds	r3, #4
 80085a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	687a      	ldr	r2, [r7, #4]
 80085a6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	683a      	ldr	r2, [r7, #0]
 80085ac:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	2200      	movs	r2, #0
 80085b2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	2201      	movs	r2, #1
 80085b8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80085ba:	7afb      	ldrb	r3, [r7, #11]
 80085bc:	f003 030f 	and.w	r3, r3, #15
 80085c0:	b2da      	uxtb	r2, r3
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	799b      	ldrb	r3, [r3, #6]
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d102      	bne.n	80085d4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6818      	ldr	r0, [r3, #0]
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	799b      	ldrb	r3, [r3, #6]
 80085dc:	461a      	mov	r2, r3
 80085de:	6979      	ldr	r1, [r7, #20]
 80085e0:	f005 f860 	bl	800d6a4 <USB_EPStartXfer>

  return HAL_OK;
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3718      	adds	r7, #24
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80085ee:	b580      	push	{r7, lr}
 80085f0:	b084      	sub	sp, #16
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	6078      	str	r0, [r7, #4]
 80085f6:	460b      	mov	r3, r1
 80085f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80085fa:	78fb      	ldrb	r3, [r7, #3]
 80085fc:	f003 030f 	and.w	r3, r3, #15
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	7912      	ldrb	r2, [r2, #4]
 8008604:	4293      	cmp	r3, r2
 8008606:	d901      	bls.n	800860c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008608:	2301      	movs	r3, #1
 800860a:	e04f      	b.n	80086ac <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800860c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008610:	2b00      	cmp	r3, #0
 8008612:	da0f      	bge.n	8008634 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008614:	78fb      	ldrb	r3, [r7, #3]
 8008616:	f003 020f 	and.w	r2, r3, #15
 800861a:	4613      	mov	r3, r2
 800861c:	00db      	lsls	r3, r3, #3
 800861e:	4413      	add	r3, r2
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	3310      	adds	r3, #16
 8008624:	687a      	ldr	r2, [r7, #4]
 8008626:	4413      	add	r3, r2
 8008628:	3304      	adds	r3, #4
 800862a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2201      	movs	r2, #1
 8008630:	705a      	strb	r2, [r3, #1]
 8008632:	e00d      	b.n	8008650 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008634:	78fa      	ldrb	r2, [r7, #3]
 8008636:	4613      	mov	r3, r2
 8008638:	00db      	lsls	r3, r3, #3
 800863a:	4413      	add	r3, r2
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	4413      	add	r3, r2
 8008646:	3304      	adds	r3, #4
 8008648:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	2200      	movs	r2, #0
 800864e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2201      	movs	r2, #1
 8008654:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008656:	78fb      	ldrb	r3, [r7, #3]
 8008658:	f003 030f 	and.w	r3, r3, #15
 800865c:	b2da      	uxtb	r2, r3
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008668:	2b01      	cmp	r3, #1
 800866a:	d101      	bne.n	8008670 <HAL_PCD_EP_SetStall+0x82>
 800866c:	2302      	movs	r3, #2
 800866e:	e01d      	b.n	80086ac <HAL_PCD_EP_SetStall+0xbe>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	68f9      	ldr	r1, [r7, #12]
 800867e:	4618      	mov	r0, r3
 8008680:	f005 fbf4 	bl	800de6c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008684:	78fb      	ldrb	r3, [r7, #3]
 8008686:	f003 030f 	and.w	r3, r3, #15
 800868a:	2b00      	cmp	r3, #0
 800868c:	d109      	bne.n	80086a2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6818      	ldr	r0, [r3, #0]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	7999      	ldrb	r1, [r3, #6]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800869c:	461a      	mov	r2, r3
 800869e:	f005 fde7 	bl	800e270 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80086aa:	2300      	movs	r3, #0
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3710      	adds	r7, #16
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	b084      	sub	sp, #16
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
 80086bc:	460b      	mov	r3, r1
 80086be:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80086c0:	78fb      	ldrb	r3, [r7, #3]
 80086c2:	f003 030f 	and.w	r3, r3, #15
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	7912      	ldrb	r2, [r2, #4]
 80086ca:	4293      	cmp	r3, r2
 80086cc:	d901      	bls.n	80086d2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80086ce:	2301      	movs	r3, #1
 80086d0:	e042      	b.n	8008758 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80086d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	da0f      	bge.n	80086fa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80086da:	78fb      	ldrb	r3, [r7, #3]
 80086dc:	f003 020f 	and.w	r2, r3, #15
 80086e0:	4613      	mov	r3, r2
 80086e2:	00db      	lsls	r3, r3, #3
 80086e4:	4413      	add	r3, r2
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	3310      	adds	r3, #16
 80086ea:	687a      	ldr	r2, [r7, #4]
 80086ec:	4413      	add	r3, r2
 80086ee:	3304      	adds	r3, #4
 80086f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2201      	movs	r2, #1
 80086f6:	705a      	strb	r2, [r3, #1]
 80086f8:	e00f      	b.n	800871a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80086fa:	78fb      	ldrb	r3, [r7, #3]
 80086fc:	f003 020f 	and.w	r2, r3, #15
 8008700:	4613      	mov	r3, r2
 8008702:	00db      	lsls	r3, r3, #3
 8008704:	4413      	add	r3, r2
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	4413      	add	r3, r2
 8008710:	3304      	adds	r3, #4
 8008712:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2200      	movs	r2, #0
 8008718:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2200      	movs	r2, #0
 800871e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008720:	78fb      	ldrb	r3, [r7, #3]
 8008722:	f003 030f 	and.w	r3, r3, #15
 8008726:	b2da      	uxtb	r2, r3
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008732:	2b01      	cmp	r3, #1
 8008734:	d101      	bne.n	800873a <HAL_PCD_EP_ClrStall+0x86>
 8008736:	2302      	movs	r3, #2
 8008738:	e00e      	b.n	8008758 <HAL_PCD_EP_ClrStall+0xa4>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2201      	movs	r2, #1
 800873e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	68f9      	ldr	r1, [r7, #12]
 8008748:	4618      	mov	r0, r3
 800874a:	f005 fbfd 	bl	800df48 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2200      	movs	r2, #0
 8008752:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	3710      	adds	r7, #16
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	460b      	mov	r3, r1
 800876a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800876c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008770:	2b00      	cmp	r3, #0
 8008772:	da0c      	bge.n	800878e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008774:	78fb      	ldrb	r3, [r7, #3]
 8008776:	f003 020f 	and.w	r2, r3, #15
 800877a:	4613      	mov	r3, r2
 800877c:	00db      	lsls	r3, r3, #3
 800877e:	4413      	add	r3, r2
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	3310      	adds	r3, #16
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	4413      	add	r3, r2
 8008788:	3304      	adds	r3, #4
 800878a:	60fb      	str	r3, [r7, #12]
 800878c:	e00c      	b.n	80087a8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800878e:	78fb      	ldrb	r3, [r7, #3]
 8008790:	f003 020f 	and.w	r2, r3, #15
 8008794:	4613      	mov	r3, r2
 8008796:	00db      	lsls	r3, r3, #3
 8008798:	4413      	add	r3, r2
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	4413      	add	r3, r2
 80087a4:	3304      	adds	r3, #4
 80087a6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	68f9      	ldr	r1, [r7, #12]
 80087ae:	4618      	mov	r0, r3
 80087b0:	f005 fa1c 	bl	800dbec <USB_EPStopXfer>
 80087b4:	4603      	mov	r3, r0
 80087b6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80087b8:	7afb      	ldrb	r3, [r7, #11]
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3710      	adds	r7, #16
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b08a      	sub	sp, #40	@ 0x28
 80087c6:	af02      	add	r7, sp, #8
 80087c8:	6078      	str	r0, [r7, #4]
 80087ca:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80087d6:	683a      	ldr	r2, [r7, #0]
 80087d8:	4613      	mov	r3, r2
 80087da:	00db      	lsls	r3, r3, #3
 80087dc:	4413      	add	r3, r2
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	3310      	adds	r3, #16
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	4413      	add	r3, r2
 80087e6:	3304      	adds	r3, #4
 80087e8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	695a      	ldr	r2, [r3, #20]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d901      	bls.n	80087fa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	e06b      	b.n	80088d2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	691a      	ldr	r2, [r3, #16]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	695b      	ldr	r3, [r3, #20]
 8008802:	1ad3      	subs	r3, r2, r3
 8008804:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	689b      	ldr	r3, [r3, #8]
 800880a:	69fa      	ldr	r2, [r7, #28]
 800880c:	429a      	cmp	r2, r3
 800880e:	d902      	bls.n	8008816 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	3303      	adds	r3, #3
 800881a:	089b      	lsrs	r3, r3, #2
 800881c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800881e:	e02a      	b.n	8008876 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	691a      	ldr	r2, [r3, #16]
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	695b      	ldr	r3, [r3, #20]
 8008828:	1ad3      	subs	r3, r2, r3
 800882a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	689b      	ldr	r3, [r3, #8]
 8008830:	69fa      	ldr	r2, [r7, #28]
 8008832:	429a      	cmp	r2, r3
 8008834:	d902      	bls.n	800883c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	3303      	adds	r3, #3
 8008840:	089b      	lsrs	r3, r3, #2
 8008842:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	68d9      	ldr	r1, [r3, #12]
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	b2da      	uxtb	r2, r3
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008854:	9300      	str	r3, [sp, #0]
 8008856:	4603      	mov	r3, r0
 8008858:	6978      	ldr	r0, [r7, #20]
 800885a:	f005 fa71 	bl	800dd40 <USB_WritePacket>

    ep->xfer_buff  += len;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	68da      	ldr	r2, [r3, #12]
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	441a      	add	r2, r3
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	695a      	ldr	r2, [r3, #20]
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	441a      	add	r2, r3
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	015a      	lsls	r2, r3, #5
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	4413      	add	r3, r2
 800887e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008882:	699b      	ldr	r3, [r3, #24]
 8008884:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008886:	69ba      	ldr	r2, [r7, #24]
 8008888:	429a      	cmp	r2, r3
 800888a:	d809      	bhi.n	80088a0 <PCD_WriteEmptyTxFifo+0xde>
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	695a      	ldr	r2, [r3, #20]
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008894:	429a      	cmp	r2, r3
 8008896:	d203      	bcs.n	80088a0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	691b      	ldr	r3, [r3, #16]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d1bf      	bne.n	8008820 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	691a      	ldr	r2, [r3, #16]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	695b      	ldr	r3, [r3, #20]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d811      	bhi.n	80088d0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	f003 030f 	and.w	r3, r3, #15
 80088b2:	2201      	movs	r2, #1
 80088b4:	fa02 f303 	lsl.w	r3, r2, r3
 80088b8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	43db      	mvns	r3, r3
 80088c6:	6939      	ldr	r1, [r7, #16]
 80088c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80088cc:	4013      	ands	r3, r2
 80088ce:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80088d0:	2300      	movs	r3, #0
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3720      	adds	r7, #32
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
	...

080088dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b088      	sub	sp, #32
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088ec:	69fb      	ldr	r3, [r7, #28]
 80088ee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80088f0:	69fb      	ldr	r3, [r7, #28]
 80088f2:	333c      	adds	r3, #60	@ 0x3c
 80088f4:	3304      	adds	r3, #4
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	015a      	lsls	r2, r3, #5
 80088fe:	69bb      	ldr	r3, [r7, #24]
 8008900:	4413      	add	r3, r2
 8008902:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008906:	689b      	ldr	r3, [r3, #8]
 8008908:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	799b      	ldrb	r3, [r3, #6]
 800890e:	2b01      	cmp	r3, #1
 8008910:	d17b      	bne.n	8008a0a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	f003 0308 	and.w	r3, r3, #8
 8008918:	2b00      	cmp	r3, #0
 800891a:	d015      	beq.n	8008948 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	4a61      	ldr	r2, [pc, #388]	@ (8008aa4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008920:	4293      	cmp	r3, r2
 8008922:	f240 80b9 	bls.w	8008a98 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800892c:	2b00      	cmp	r3, #0
 800892e:	f000 80b3 	beq.w	8008a98 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	015a      	lsls	r2, r3, #5
 8008936:	69bb      	ldr	r3, [r7, #24]
 8008938:	4413      	add	r3, r2
 800893a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800893e:	461a      	mov	r2, r3
 8008940:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008944:	6093      	str	r3, [r2, #8]
 8008946:	e0a7      	b.n	8008a98 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	f003 0320 	and.w	r3, r3, #32
 800894e:	2b00      	cmp	r3, #0
 8008950:	d009      	beq.n	8008966 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	015a      	lsls	r2, r3, #5
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	4413      	add	r3, r2
 800895a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800895e:	461a      	mov	r2, r3
 8008960:	2320      	movs	r3, #32
 8008962:	6093      	str	r3, [r2, #8]
 8008964:	e098      	b.n	8008a98 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800896c:	2b00      	cmp	r3, #0
 800896e:	f040 8093 	bne.w	8008a98 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	4a4b      	ldr	r2, [pc, #300]	@ (8008aa4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d90f      	bls.n	800899a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008980:	2b00      	cmp	r3, #0
 8008982:	d00a      	beq.n	800899a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	015a      	lsls	r2, r3, #5
 8008988:	69bb      	ldr	r3, [r7, #24]
 800898a:	4413      	add	r3, r2
 800898c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008990:	461a      	mov	r2, r3
 8008992:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008996:	6093      	str	r3, [r2, #8]
 8008998:	e07e      	b.n	8008a98 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800899a:	683a      	ldr	r2, [r7, #0]
 800899c:	4613      	mov	r3, r2
 800899e:	00db      	lsls	r3, r3, #3
 80089a0:	4413      	add	r3, r2
 80089a2:	009b      	lsls	r3, r3, #2
 80089a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	4413      	add	r3, r2
 80089ac:	3304      	adds	r3, #4
 80089ae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	6a1a      	ldr	r2, [r3, #32]
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	0159      	lsls	r1, r3, #5
 80089b8:	69bb      	ldr	r3, [r7, #24]
 80089ba:	440b      	add	r3, r1
 80089bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80089c0:	691b      	ldr	r3, [r3, #16]
 80089c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089c6:	1ad2      	subs	r2, r2, r3
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d114      	bne.n	80089fc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	691b      	ldr	r3, [r3, #16]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d109      	bne.n	80089ee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6818      	ldr	r0, [r3, #0]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80089e4:	461a      	mov	r2, r3
 80089e6:	2101      	movs	r1, #1
 80089e8:	f005 fc42 	bl	800e270 <USB_EP0_OutStart>
 80089ec:	e006      	b.n	80089fc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	68da      	ldr	r2, [r3, #12]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	695b      	ldr	r3, [r3, #20]
 80089f6:	441a      	add	r2, r3
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	4619      	mov	r1, r3
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f007 ff8a 	bl	801091c <HAL_PCD_DataOutStageCallback>
 8008a08:	e046      	b.n	8008a98 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	4a26      	ldr	r2, [pc, #152]	@ (8008aa8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d124      	bne.n	8008a5c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d00a      	beq.n	8008a32 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	015a      	lsls	r2, r3, #5
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	4413      	add	r3, r2
 8008a24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a28:	461a      	mov	r2, r3
 8008a2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a2e:	6093      	str	r3, [r2, #8]
 8008a30:	e032      	b.n	8008a98 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	f003 0320 	and.w	r3, r3, #32
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d008      	beq.n	8008a4e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	015a      	lsls	r2, r3, #5
 8008a40:	69bb      	ldr	r3, [r7, #24]
 8008a42:	4413      	add	r3, r2
 8008a44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a48:	461a      	mov	r2, r3
 8008a4a:	2320      	movs	r3, #32
 8008a4c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	4619      	mov	r1, r3
 8008a54:	6878      	ldr	r0, [r7, #4]
 8008a56:	f007 ff61 	bl	801091c <HAL_PCD_DataOutStageCallback>
 8008a5a:	e01d      	b.n	8008a98 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d114      	bne.n	8008a8c <PCD_EP_OutXfrComplete_int+0x1b0>
 8008a62:	6879      	ldr	r1, [r7, #4]
 8008a64:	683a      	ldr	r2, [r7, #0]
 8008a66:	4613      	mov	r3, r2
 8008a68:	00db      	lsls	r3, r3, #3
 8008a6a:	4413      	add	r3, r2
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	440b      	add	r3, r1
 8008a70:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d108      	bne.n	8008a8c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6818      	ldr	r0, [r3, #0]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008a84:	461a      	mov	r2, r3
 8008a86:	2100      	movs	r1, #0
 8008a88:	f005 fbf2 	bl	800e270 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	4619      	mov	r1, r3
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f007 ff42 	bl	801091c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3720      	adds	r7, #32
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	4f54300a 	.word	0x4f54300a
 8008aa8:	4f54310a 	.word	0x4f54310a

08008aac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b086      	sub	sp, #24
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	333c      	adds	r3, #60	@ 0x3c
 8008ac4:	3304      	adds	r3, #4
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	015a      	lsls	r2, r3, #5
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	4a15      	ldr	r2, [pc, #84]	@ (8008b34 <PCD_EP_OutSetupPacket_int+0x88>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d90e      	bls.n	8008b00 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d009      	beq.n	8008b00 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	015a      	lsls	r2, r3, #5
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	4413      	add	r3, r2
 8008af4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008af8:	461a      	mov	r2, r3
 8008afa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008afe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f007 fef9 	bl	80108f8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	4a0a      	ldr	r2, [pc, #40]	@ (8008b34 <PCD_EP_OutSetupPacket_int+0x88>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d90c      	bls.n	8008b28 <PCD_EP_OutSetupPacket_int+0x7c>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	799b      	ldrb	r3, [r3, #6]
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d108      	bne.n	8008b28 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6818      	ldr	r0, [r3, #0]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008b20:	461a      	mov	r2, r3
 8008b22:	2101      	movs	r1, #1
 8008b24:	f005 fba4 	bl	800e270 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3718      	adds	r7, #24
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	4f54300a 	.word	0x4f54300a

08008b38 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b085      	sub	sp, #20
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	460b      	mov	r3, r1
 8008b42:	70fb      	strb	r3, [r7, #3]
 8008b44:	4613      	mov	r3, r2
 8008b46:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b4e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008b50:	78fb      	ldrb	r3, [r7, #3]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d107      	bne.n	8008b66 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008b56:	883b      	ldrh	r3, [r7, #0]
 8008b58:	0419      	lsls	r1, r3, #16
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	68ba      	ldr	r2, [r7, #8]
 8008b60:	430a      	orrs	r2, r1
 8008b62:	629a      	str	r2, [r3, #40]	@ 0x28
 8008b64:	e028      	b.n	8008bb8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b6c:	0c1b      	lsrs	r3, r3, #16
 8008b6e:	68ba      	ldr	r2, [r7, #8]
 8008b70:	4413      	add	r3, r2
 8008b72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008b74:	2300      	movs	r3, #0
 8008b76:	73fb      	strb	r3, [r7, #15]
 8008b78:	e00d      	b.n	8008b96 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681a      	ldr	r2, [r3, #0]
 8008b7e:	7bfb      	ldrb	r3, [r7, #15]
 8008b80:	3340      	adds	r3, #64	@ 0x40
 8008b82:	009b      	lsls	r3, r3, #2
 8008b84:	4413      	add	r3, r2
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	0c1b      	lsrs	r3, r3, #16
 8008b8a:	68ba      	ldr	r2, [r7, #8]
 8008b8c:	4413      	add	r3, r2
 8008b8e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008b90:	7bfb      	ldrb	r3, [r7, #15]
 8008b92:	3301      	adds	r3, #1
 8008b94:	73fb      	strb	r3, [r7, #15]
 8008b96:	7bfa      	ldrb	r2, [r7, #15]
 8008b98:	78fb      	ldrb	r3, [r7, #3]
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d3ec      	bcc.n	8008b7a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008ba0:	883b      	ldrh	r3, [r7, #0]
 8008ba2:	0418      	lsls	r0, r3, #16
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6819      	ldr	r1, [r3, #0]
 8008ba8:	78fb      	ldrb	r3, [r7, #3]
 8008baa:	3b01      	subs	r3, #1
 8008bac:	68ba      	ldr	r2, [r7, #8]
 8008bae:	4302      	orrs	r2, r0
 8008bb0:	3340      	adds	r3, #64	@ 0x40
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	440b      	add	r3, r1
 8008bb6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3714      	adds	r7, #20
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr

08008bc6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008bc6:	b480      	push	{r7}
 8008bc8:	b083      	sub	sp, #12
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
 8008bce:	460b      	mov	r3, r1
 8008bd0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	887a      	ldrh	r2, [r7, #2]
 8008bd8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008bda:	2300      	movs	r3, #0
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	370c      	adds	r7, #12
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b085      	sub	sp, #20
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	699b      	ldr	r3, [r3, #24]
 8008c0a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008c16:	4b05      	ldr	r3, [pc, #20]	@ (8008c2c <HAL_PCDEx_ActivateLPM+0x44>)
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	68fa      	ldr	r2, [r7, #12]
 8008c1c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8008c1e:	2300      	movs	r3, #0
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3714      	adds	r7, #20
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr
 8008c2c:	10000003 	.word	0x10000003

08008c30 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b083      	sub	sp, #12
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	460b      	mov	r3, r1
 8008c3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008c3c:	bf00      	nop
 8008c3e:	370c      	adds	r7, #12
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008c50:	4b19      	ldr	r3, [pc, #100]	@ (8008cb8 <HAL_PWREx_ConfigSupply+0x70>)
 8008c52:	68db      	ldr	r3, [r3, #12]
 8008c54:	f003 0304 	and.w	r3, r3, #4
 8008c58:	2b04      	cmp	r3, #4
 8008c5a:	d00a      	beq.n	8008c72 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008c5c:	4b16      	ldr	r3, [pc, #88]	@ (8008cb8 <HAL_PWREx_ConfigSupply+0x70>)
 8008c5e:	68db      	ldr	r3, [r3, #12]
 8008c60:	f003 0307 	and.w	r3, r3, #7
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d001      	beq.n	8008c6e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	e01f      	b.n	8008cae <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	e01d      	b.n	8008cae <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008c72:	4b11      	ldr	r3, [pc, #68]	@ (8008cb8 <HAL_PWREx_ConfigSupply+0x70>)
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	f023 0207 	bic.w	r2, r3, #7
 8008c7a:	490f      	ldr	r1, [pc, #60]	@ (8008cb8 <HAL_PWREx_ConfigSupply+0x70>)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8008c82:	f7f8 ff5f 	bl	8001b44 <HAL_GetTick>
 8008c86:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008c88:	e009      	b.n	8008c9e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008c8a:	f7f8 ff5b 	bl	8001b44 <HAL_GetTick>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	1ad3      	subs	r3, r2, r3
 8008c94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008c98:	d901      	bls.n	8008c9e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e007      	b.n	8008cae <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008c9e:	4b06      	ldr	r3, [pc, #24]	@ (8008cb8 <HAL_PWREx_ConfigSupply+0x70>)
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008ca6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008caa:	d1ee      	bne.n	8008c8a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3710      	adds	r7, #16
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	58024800 	.word	0x58024800

08008cbc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8008cc0:	4b05      	ldr	r3, [pc, #20]	@ (8008cd8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	4a04      	ldr	r2, [pc, #16]	@ (8008cd8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8008cc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008cca:	60d3      	str	r3, [r2, #12]
}
 8008ccc:	bf00      	nop
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr
 8008cd6:	bf00      	nop
 8008cd8:	58024800 	.word	0x58024800

08008cdc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b08c      	sub	sp, #48	@ 0x30
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d102      	bne.n	8008cf0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008cea:	2301      	movs	r3, #1
 8008cec:	f000 bc1f 	b.w	800952e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f003 0301 	and.w	r3, r3, #1
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	f000 80b3 	beq.w	8008e64 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008cfe:	4b95      	ldr	r3, [pc, #596]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008d00:	691b      	ldr	r3, [r3, #16]
 8008d02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008d06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008d08:	4b92      	ldr	r3, [pc, #584]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008d0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d10:	2b10      	cmp	r3, #16
 8008d12:	d007      	beq.n	8008d24 <HAL_RCC_OscConfig+0x48>
 8008d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d16:	2b18      	cmp	r3, #24
 8008d18:	d112      	bne.n	8008d40 <HAL_RCC_OscConfig+0x64>
 8008d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d1c:	f003 0303 	and.w	r3, r3, #3
 8008d20:	2b02      	cmp	r3, #2
 8008d22:	d10d      	bne.n	8008d40 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d24:	4b8b      	ldr	r3, [pc, #556]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	f000 8098 	beq.w	8008e62 <HAL_RCC_OscConfig+0x186>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	f040 8093 	bne.w	8008e62 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008d3c:	2301      	movs	r3, #1
 8008d3e:	e3f6      	b.n	800952e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d48:	d106      	bne.n	8008d58 <HAL_RCC_OscConfig+0x7c>
 8008d4a:	4b82      	ldr	r3, [pc, #520]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a81      	ldr	r2, [pc, #516]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008d50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d54:	6013      	str	r3, [r2, #0]
 8008d56:	e058      	b.n	8008e0a <HAL_RCC_OscConfig+0x12e>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d112      	bne.n	8008d86 <HAL_RCC_OscConfig+0xaa>
 8008d60:	4b7c      	ldr	r3, [pc, #496]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a7b      	ldr	r2, [pc, #492]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008d66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d6a:	6013      	str	r3, [r2, #0]
 8008d6c:	4b79      	ldr	r3, [pc, #484]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a78      	ldr	r2, [pc, #480]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008d72:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008d76:	6013      	str	r3, [r2, #0]
 8008d78:	4b76      	ldr	r3, [pc, #472]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a75      	ldr	r2, [pc, #468]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008d7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008d82:	6013      	str	r3, [r2, #0]
 8008d84:	e041      	b.n	8008e0a <HAL_RCC_OscConfig+0x12e>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008d8e:	d112      	bne.n	8008db6 <HAL_RCC_OscConfig+0xda>
 8008d90:	4b70      	ldr	r3, [pc, #448]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a6f      	ldr	r2, [pc, #444]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008d96:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008d9a:	6013      	str	r3, [r2, #0]
 8008d9c:	4b6d      	ldr	r3, [pc, #436]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a6c      	ldr	r2, [pc, #432]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008da2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008da6:	6013      	str	r3, [r2, #0]
 8008da8:	4b6a      	ldr	r3, [pc, #424]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a69      	ldr	r2, [pc, #420]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008dae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008db2:	6013      	str	r3, [r2, #0]
 8008db4:	e029      	b.n	8008e0a <HAL_RCC_OscConfig+0x12e>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 8008dbe:	d112      	bne.n	8008de6 <HAL_RCC_OscConfig+0x10a>
 8008dc0:	4b64      	ldr	r3, [pc, #400]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a63      	ldr	r2, [pc, #396]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008dc6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008dca:	6013      	str	r3, [r2, #0]
 8008dcc:	4b61      	ldr	r3, [pc, #388]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a60      	ldr	r2, [pc, #384]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008dd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008dd6:	6013      	str	r3, [r2, #0]
 8008dd8:	4b5e      	ldr	r3, [pc, #376]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a5d      	ldr	r2, [pc, #372]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008dde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008de2:	6013      	str	r3, [r2, #0]
 8008de4:	e011      	b.n	8008e0a <HAL_RCC_OscConfig+0x12e>
 8008de6:	4b5b      	ldr	r3, [pc, #364]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a5a      	ldr	r2, [pc, #360]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008dec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008df0:	6013      	str	r3, [r2, #0]
 8008df2:	4b58      	ldr	r3, [pc, #352]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	4a57      	ldr	r2, [pc, #348]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008df8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008dfc:	6013      	str	r3, [r2, #0]
 8008dfe:	4b55      	ldr	r3, [pc, #340]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	4a54      	ldr	r2, [pc, #336]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008e04:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008e08:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d013      	beq.n	8008e3a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e12:	f7f8 fe97 	bl	8001b44 <HAL_GetTick>
 8008e16:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008e18:	e008      	b.n	8008e2c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e1a:	f7f8 fe93 	bl	8001b44 <HAL_GetTick>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e22:	1ad3      	subs	r3, r2, r3
 8008e24:	2b64      	cmp	r3, #100	@ 0x64
 8008e26:	d901      	bls.n	8008e2c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 8008e28:	2303      	movs	r3, #3
 8008e2a:	e380      	b.n	800952e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008e2c:	4b49      	ldr	r3, [pc, #292]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d0f0      	beq.n	8008e1a <HAL_RCC_OscConfig+0x13e>
 8008e38:	e014      	b.n	8008e64 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e3a:	f7f8 fe83 	bl	8001b44 <HAL_GetTick>
 8008e3e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008e40:	e008      	b.n	8008e54 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e42:	f7f8 fe7f 	bl	8001b44 <HAL_GetTick>
 8008e46:	4602      	mov	r2, r0
 8008e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e4a:	1ad3      	subs	r3, r2, r3
 8008e4c:	2b64      	cmp	r3, #100	@ 0x64
 8008e4e:	d901      	bls.n	8008e54 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 8008e50:	2303      	movs	r3, #3
 8008e52:	e36c      	b.n	800952e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008e54:	4b3f      	ldr	r3, [pc, #252]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d1f0      	bne.n	8008e42 <HAL_RCC_OscConfig+0x166>
 8008e60:	e000      	b.n	8008e64 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e62:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f003 0302 	and.w	r3, r3, #2
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	f000 808c 	beq.w	8008f8a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008e72:	4b38      	ldr	r3, [pc, #224]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008e74:	691b      	ldr	r3, [r3, #16]
 8008e76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008e7a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008e7c:	4b35      	ldr	r3, [pc, #212]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e80:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008e82:	6a3b      	ldr	r3, [r7, #32]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d007      	beq.n	8008e98 <HAL_RCC_OscConfig+0x1bc>
 8008e88:	6a3b      	ldr	r3, [r7, #32]
 8008e8a:	2b18      	cmp	r3, #24
 8008e8c:	d137      	bne.n	8008efe <HAL_RCC_OscConfig+0x222>
 8008e8e:	69fb      	ldr	r3, [r7, #28]
 8008e90:	f003 0303 	and.w	r3, r3, #3
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d132      	bne.n	8008efe <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e98:	4b2e      	ldr	r3, [pc, #184]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	f003 0304 	and.w	r3, r3, #4
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d005      	beq.n	8008eb0 <HAL_RCC_OscConfig+0x1d4>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	68db      	ldr	r3, [r3, #12]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d101      	bne.n	8008eb0 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 8008eac:	2301      	movs	r3, #1
 8008eae:	e33e      	b.n	800952e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008eb0:	4b28      	ldr	r3, [pc, #160]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f023 0219 	bic.w	r2, r3, #25
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	4925      	ldr	r1, [pc, #148]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ec2:	f7f8 fe3f 	bl	8001b44 <HAL_GetTick>
 8008ec6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008ec8:	e008      	b.n	8008edc <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008eca:	f7f8 fe3b 	bl	8001b44 <HAL_GetTick>
 8008ece:	4602      	mov	r2, r0
 8008ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ed2:	1ad3      	subs	r3, r2, r3
 8008ed4:	2b02      	cmp	r3, #2
 8008ed6:	d901      	bls.n	8008edc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8008ed8:	2303      	movs	r3, #3
 8008eda:	e328      	b.n	800952e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008edc:	4b1d      	ldr	r3, [pc, #116]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f003 0304 	and.w	r3, r3, #4
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d0f0      	beq.n	8008eca <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ee8:	4b1a      	ldr	r3, [pc, #104]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	691b      	ldr	r3, [r3, #16]
 8008ef4:	061b      	lsls	r3, r3, #24
 8008ef6:	4917      	ldr	r1, [pc, #92]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008efc:	e045      	b.n	8008f8a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	68db      	ldr	r3, [r3, #12]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d028      	beq.n	8008f58 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008f06:	4b13      	ldr	r3, [pc, #76]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f023 0219 	bic.w	r2, r3, #25
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	4910      	ldr	r1, [pc, #64]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008f14:	4313      	orrs	r3, r2
 8008f16:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f18:	f7f8 fe14 	bl	8001b44 <HAL_GetTick>
 8008f1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f1e:	e008      	b.n	8008f32 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f20:	f7f8 fe10 	bl	8001b44 <HAL_GetTick>
 8008f24:	4602      	mov	r2, r0
 8008f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f28:	1ad3      	subs	r3, r2, r3
 8008f2a:	2b02      	cmp	r3, #2
 8008f2c:	d901      	bls.n	8008f32 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8008f2e:	2303      	movs	r3, #3
 8008f30:	e2fd      	b.n	800952e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008f32:	4b08      	ldr	r3, [pc, #32]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f003 0304 	and.w	r3, r3, #4
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d0f0      	beq.n	8008f20 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008f3e:	4b05      	ldr	r3, [pc, #20]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008f40:	685b      	ldr	r3, [r3, #4]
 8008f42:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	691b      	ldr	r3, [r3, #16]
 8008f4a:	061b      	lsls	r3, r3, #24
 8008f4c:	4901      	ldr	r1, [pc, #4]	@ (8008f54 <HAL_RCC_OscConfig+0x278>)
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	604b      	str	r3, [r1, #4]
 8008f52:	e01a      	b.n	8008f8a <HAL_RCC_OscConfig+0x2ae>
 8008f54:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008f58:	4b97      	ldr	r3, [pc, #604]	@ (80091b8 <HAL_RCC_OscConfig+0x4dc>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a96      	ldr	r2, [pc, #600]	@ (80091b8 <HAL_RCC_OscConfig+0x4dc>)
 8008f5e:	f023 0301 	bic.w	r3, r3, #1
 8008f62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f64:	f7f8 fdee 	bl	8001b44 <HAL_GetTick>
 8008f68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008f6a:	e008      	b.n	8008f7e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f6c:	f7f8 fdea 	bl	8001b44 <HAL_GetTick>
 8008f70:	4602      	mov	r2, r0
 8008f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f74:	1ad3      	subs	r3, r2, r3
 8008f76:	2b02      	cmp	r3, #2
 8008f78:	d901      	bls.n	8008f7e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 8008f7a:	2303      	movs	r3, #3
 8008f7c:	e2d7      	b.n	800952e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008f7e:	4b8e      	ldr	r3, [pc, #568]	@ (80091b8 <HAL_RCC_OscConfig+0x4dc>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f003 0304 	and.w	r3, r3, #4
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d1f0      	bne.n	8008f6c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f003 0310 	and.w	r3, r3, #16
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d06a      	beq.n	800906c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008f96:	4b88      	ldr	r3, [pc, #544]	@ (80091b8 <HAL_RCC_OscConfig+0x4dc>)
 8008f98:	691b      	ldr	r3, [r3, #16]
 8008f9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008f9e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008fa0:	4b85      	ldr	r3, [pc, #532]	@ (80091b8 <HAL_RCC_OscConfig+0x4dc>)
 8008fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fa4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008fa6:	69bb      	ldr	r3, [r7, #24]
 8008fa8:	2b08      	cmp	r3, #8
 8008faa:	d007      	beq.n	8008fbc <HAL_RCC_OscConfig+0x2e0>
 8008fac:	69bb      	ldr	r3, [r7, #24]
 8008fae:	2b18      	cmp	r3, #24
 8008fb0:	d11b      	bne.n	8008fea <HAL_RCC_OscConfig+0x30e>
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	f003 0303 	and.w	r3, r3, #3
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d116      	bne.n	8008fea <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008fbc:	4b7e      	ldr	r3, [pc, #504]	@ (80091b8 <HAL_RCC_OscConfig+0x4dc>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d005      	beq.n	8008fd4 <HAL_RCC_OscConfig+0x2f8>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	69db      	ldr	r3, [r3, #28]
 8008fcc:	2b80      	cmp	r3, #128	@ 0x80
 8008fce:	d001      	beq.n	8008fd4 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	e2ac      	b.n	800952e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008fd4:	4b78      	ldr	r3, [pc, #480]	@ (80091b8 <HAL_RCC_OscConfig+0x4dc>)
 8008fd6:	68db      	ldr	r3, [r3, #12]
 8008fd8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6a1b      	ldr	r3, [r3, #32]
 8008fe0:	061b      	lsls	r3, r3, #24
 8008fe2:	4975      	ldr	r1, [pc, #468]	@ (80091b8 <HAL_RCC_OscConfig+0x4dc>)
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008fe8:	e040      	b.n	800906c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	69db      	ldr	r3, [r3, #28]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d023      	beq.n	800903a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008ff2:	4b71      	ldr	r3, [pc, #452]	@ (80091b8 <HAL_RCC_OscConfig+0x4dc>)
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a70      	ldr	r2, [pc, #448]	@ (80091b8 <HAL_RCC_OscConfig+0x4dc>)
 8008ff8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ffc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ffe:	f7f8 fda1 	bl	8001b44 <HAL_GetTick>
 8009002:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009004:	e008      	b.n	8009018 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009006:	f7f8 fd9d 	bl	8001b44 <HAL_GetTick>
 800900a:	4602      	mov	r2, r0
 800900c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800900e:	1ad3      	subs	r3, r2, r3
 8009010:	2b02      	cmp	r3, #2
 8009012:	d901      	bls.n	8009018 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 8009014:	2303      	movs	r3, #3
 8009016:	e28a      	b.n	800952e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009018:	4b67      	ldr	r3, [pc, #412]	@ (80091b8 <HAL_RCC_OscConfig+0x4dc>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009020:	2b00      	cmp	r3, #0
 8009022:	d0f0      	beq.n	8009006 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009024:	4b64      	ldr	r3, [pc, #400]	@ (80091b8 <HAL_RCC_OscConfig+0x4dc>)
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6a1b      	ldr	r3, [r3, #32]
 8009030:	061b      	lsls	r3, r3, #24
 8009032:	4961      	ldr	r1, [pc, #388]	@ (80091b8 <HAL_RCC_OscConfig+0x4dc>)
 8009034:	4313      	orrs	r3, r2
 8009036:	60cb      	str	r3, [r1, #12]
 8009038:	e018      	b.n	800906c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800903a:	4b5f      	ldr	r3, [pc, #380]	@ (80091b8 <HAL_RCC_OscConfig+0x4dc>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a5e      	ldr	r2, [pc, #376]	@ (80091b8 <HAL_RCC_OscConfig+0x4dc>)
 8009040:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009044:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009046:	f7f8 fd7d 	bl	8001b44 <HAL_GetTick>
 800904a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800904c:	e008      	b.n	8009060 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800904e:	f7f8 fd79 	bl	8001b44 <HAL_GetTick>
 8009052:	4602      	mov	r2, r0
 8009054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009056:	1ad3      	subs	r3, r2, r3
 8009058:	2b02      	cmp	r3, #2
 800905a:	d901      	bls.n	8009060 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800905c:	2303      	movs	r3, #3
 800905e:	e266      	b.n	800952e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009060:	4b55      	ldr	r3, [pc, #340]	@ (80091b8 <HAL_RCC_OscConfig+0x4dc>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009068:	2b00      	cmp	r3, #0
 800906a:	d1f0      	bne.n	800904e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f003 0308 	and.w	r3, r3, #8
 8009074:	2b00      	cmp	r3, #0
 8009076:	d036      	beq.n	80090e6 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	695b      	ldr	r3, [r3, #20]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d019      	beq.n	80090b4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009080:	4b4d      	ldr	r3, [pc, #308]	@ (80091b8 <HAL_RCC_OscConfig+0x4dc>)
 8009082:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009084:	4a4c      	ldr	r2, [pc, #304]	@ (80091b8 <HAL_RCC_OscConfig+0x4dc>)
 8009086:	f043 0301 	orr.w	r3, r3, #1
 800908a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800908c:	f7f8 fd5a 	bl	8001b44 <HAL_GetTick>
 8009090:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009092:	e008      	b.n	80090a6 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009094:	f7f8 fd56 	bl	8001b44 <HAL_GetTick>
 8009098:	4602      	mov	r2, r0
 800909a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800909c:	1ad3      	subs	r3, r2, r3
 800909e:	2b02      	cmp	r3, #2
 80090a0:	d901      	bls.n	80090a6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80090a2:	2303      	movs	r3, #3
 80090a4:	e243      	b.n	800952e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80090a6:	4b44      	ldr	r3, [pc, #272]	@ (80091b8 <HAL_RCC_OscConfig+0x4dc>)
 80090a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090aa:	f003 0302 	and.w	r3, r3, #2
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d0f0      	beq.n	8009094 <HAL_RCC_OscConfig+0x3b8>
 80090b2:	e018      	b.n	80090e6 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80090b4:	4b40      	ldr	r3, [pc, #256]	@ (80091b8 <HAL_RCC_OscConfig+0x4dc>)
 80090b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090b8:	4a3f      	ldr	r2, [pc, #252]	@ (80091b8 <HAL_RCC_OscConfig+0x4dc>)
 80090ba:	f023 0301 	bic.w	r3, r3, #1
 80090be:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090c0:	f7f8 fd40 	bl	8001b44 <HAL_GetTick>
 80090c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80090c6:	e008      	b.n	80090da <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80090c8:	f7f8 fd3c 	bl	8001b44 <HAL_GetTick>
 80090cc:	4602      	mov	r2, r0
 80090ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d0:	1ad3      	subs	r3, r2, r3
 80090d2:	2b02      	cmp	r3, #2
 80090d4:	d901      	bls.n	80090da <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80090d6:	2303      	movs	r3, #3
 80090d8:	e229      	b.n	800952e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80090da:	4b37      	ldr	r3, [pc, #220]	@ (80091b8 <HAL_RCC_OscConfig+0x4dc>)
 80090dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80090de:	f003 0302 	and.w	r3, r3, #2
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d1f0      	bne.n	80090c8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f003 0320 	and.w	r3, r3, #32
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d036      	beq.n	8009160 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	699b      	ldr	r3, [r3, #24]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d019      	beq.n	800912e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80090fa:	4b2f      	ldr	r3, [pc, #188]	@ (80091b8 <HAL_RCC_OscConfig+0x4dc>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a2e      	ldr	r2, [pc, #184]	@ (80091b8 <HAL_RCC_OscConfig+0x4dc>)
 8009100:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009104:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009106:	f7f8 fd1d 	bl	8001b44 <HAL_GetTick>
 800910a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800910c:	e008      	b.n	8009120 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800910e:	f7f8 fd19 	bl	8001b44 <HAL_GetTick>
 8009112:	4602      	mov	r2, r0
 8009114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009116:	1ad3      	subs	r3, r2, r3
 8009118:	2b02      	cmp	r3, #2
 800911a:	d901      	bls.n	8009120 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800911c:	2303      	movs	r3, #3
 800911e:	e206      	b.n	800952e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009120:	4b25      	ldr	r3, [pc, #148]	@ (80091b8 <HAL_RCC_OscConfig+0x4dc>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009128:	2b00      	cmp	r3, #0
 800912a:	d0f0      	beq.n	800910e <HAL_RCC_OscConfig+0x432>
 800912c:	e018      	b.n	8009160 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800912e:	4b22      	ldr	r3, [pc, #136]	@ (80091b8 <HAL_RCC_OscConfig+0x4dc>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a21      	ldr	r2, [pc, #132]	@ (80091b8 <HAL_RCC_OscConfig+0x4dc>)
 8009134:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009138:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800913a:	f7f8 fd03 	bl	8001b44 <HAL_GetTick>
 800913e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009140:	e008      	b.n	8009154 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009142:	f7f8 fcff 	bl	8001b44 <HAL_GetTick>
 8009146:	4602      	mov	r2, r0
 8009148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800914a:	1ad3      	subs	r3, r2, r3
 800914c:	2b02      	cmp	r3, #2
 800914e:	d901      	bls.n	8009154 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8009150:	2303      	movs	r3, #3
 8009152:	e1ec      	b.n	800952e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009154:	4b18      	ldr	r3, [pc, #96]	@ (80091b8 <HAL_RCC_OscConfig+0x4dc>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800915c:	2b00      	cmp	r3, #0
 800915e:	d1f0      	bne.n	8009142 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f003 0304 	and.w	r3, r3, #4
 8009168:	2b00      	cmp	r3, #0
 800916a:	f000 80af 	beq.w	80092cc <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800916e:	4b13      	ldr	r3, [pc, #76]	@ (80091bc <HAL_RCC_OscConfig+0x4e0>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a12      	ldr	r2, [pc, #72]	@ (80091bc <HAL_RCC_OscConfig+0x4e0>)
 8009174:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009178:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800917a:	f7f8 fce3 	bl	8001b44 <HAL_GetTick>
 800917e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009180:	e008      	b.n	8009194 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009182:	f7f8 fcdf 	bl	8001b44 <HAL_GetTick>
 8009186:	4602      	mov	r2, r0
 8009188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800918a:	1ad3      	subs	r3, r2, r3
 800918c:	2b64      	cmp	r3, #100	@ 0x64
 800918e:	d901      	bls.n	8009194 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8009190:	2303      	movs	r3, #3
 8009192:	e1cc      	b.n	800952e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009194:	4b09      	ldr	r3, [pc, #36]	@ (80091bc <HAL_RCC_OscConfig+0x4e0>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800919c:	2b00      	cmp	r3, #0
 800919e:	d0f0      	beq.n	8009182 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d10b      	bne.n	80091c0 <HAL_RCC_OscConfig+0x4e4>
 80091a8:	4b03      	ldr	r3, [pc, #12]	@ (80091b8 <HAL_RCC_OscConfig+0x4dc>)
 80091aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091ac:	4a02      	ldr	r2, [pc, #8]	@ (80091b8 <HAL_RCC_OscConfig+0x4dc>)
 80091ae:	f043 0301 	orr.w	r3, r3, #1
 80091b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80091b4:	e05b      	b.n	800926e <HAL_RCC_OscConfig+0x592>
 80091b6:	bf00      	nop
 80091b8:	58024400 	.word	0x58024400
 80091bc:	58024800 	.word	0x58024800
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	689b      	ldr	r3, [r3, #8]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d112      	bne.n	80091ee <HAL_RCC_OscConfig+0x512>
 80091c8:	4b9d      	ldr	r3, [pc, #628]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 80091ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091cc:	4a9c      	ldr	r2, [pc, #624]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 80091ce:	f023 0301 	bic.w	r3, r3, #1
 80091d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80091d4:	4b9a      	ldr	r3, [pc, #616]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 80091d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091d8:	4a99      	ldr	r2, [pc, #612]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 80091da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80091de:	6713      	str	r3, [r2, #112]	@ 0x70
 80091e0:	4b97      	ldr	r3, [pc, #604]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 80091e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091e4:	4a96      	ldr	r2, [pc, #600]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 80091e6:	f023 0304 	bic.w	r3, r3, #4
 80091ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80091ec:	e03f      	b.n	800926e <HAL_RCC_OscConfig+0x592>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	2b05      	cmp	r3, #5
 80091f4:	d112      	bne.n	800921c <HAL_RCC_OscConfig+0x540>
 80091f6:	4b92      	ldr	r3, [pc, #584]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 80091f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091fa:	4a91      	ldr	r2, [pc, #580]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 80091fc:	f043 0304 	orr.w	r3, r3, #4
 8009200:	6713      	str	r3, [r2, #112]	@ 0x70
 8009202:	4b8f      	ldr	r3, [pc, #572]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 8009204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009206:	4a8e      	ldr	r2, [pc, #568]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 8009208:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800920c:	6713      	str	r3, [r2, #112]	@ 0x70
 800920e:	4b8c      	ldr	r3, [pc, #560]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 8009210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009212:	4a8b      	ldr	r2, [pc, #556]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 8009214:	f043 0301 	orr.w	r3, r3, #1
 8009218:	6713      	str	r3, [r2, #112]	@ 0x70
 800921a:	e028      	b.n	800926e <HAL_RCC_OscConfig+0x592>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	2b85      	cmp	r3, #133	@ 0x85
 8009222:	d112      	bne.n	800924a <HAL_RCC_OscConfig+0x56e>
 8009224:	4b86      	ldr	r3, [pc, #536]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 8009226:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009228:	4a85      	ldr	r2, [pc, #532]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 800922a:	f043 0304 	orr.w	r3, r3, #4
 800922e:	6713      	str	r3, [r2, #112]	@ 0x70
 8009230:	4b83      	ldr	r3, [pc, #524]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 8009232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009234:	4a82      	ldr	r2, [pc, #520]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 8009236:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800923a:	6713      	str	r3, [r2, #112]	@ 0x70
 800923c:	4b80      	ldr	r3, [pc, #512]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 800923e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009240:	4a7f      	ldr	r2, [pc, #508]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 8009242:	f043 0301 	orr.w	r3, r3, #1
 8009246:	6713      	str	r3, [r2, #112]	@ 0x70
 8009248:	e011      	b.n	800926e <HAL_RCC_OscConfig+0x592>
 800924a:	4b7d      	ldr	r3, [pc, #500]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 800924c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800924e:	4a7c      	ldr	r2, [pc, #496]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 8009250:	f023 0301 	bic.w	r3, r3, #1
 8009254:	6713      	str	r3, [r2, #112]	@ 0x70
 8009256:	4b7a      	ldr	r3, [pc, #488]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 8009258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800925a:	4a79      	ldr	r2, [pc, #484]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 800925c:	f023 0304 	bic.w	r3, r3, #4
 8009260:	6713      	str	r3, [r2, #112]	@ 0x70
 8009262:	4b77      	ldr	r3, [pc, #476]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 8009264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009266:	4a76      	ldr	r2, [pc, #472]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 8009268:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800926c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	689b      	ldr	r3, [r3, #8]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d015      	beq.n	80092a2 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009276:	f7f8 fc65 	bl	8001b44 <HAL_GetTick>
 800927a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800927c:	e00a      	b.n	8009294 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800927e:	f7f8 fc61 	bl	8001b44 <HAL_GetTick>
 8009282:	4602      	mov	r2, r0
 8009284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009286:	1ad3      	subs	r3, r2, r3
 8009288:	f241 3288 	movw	r2, #5000	@ 0x1388
 800928c:	4293      	cmp	r3, r2
 800928e:	d901      	bls.n	8009294 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 8009290:	2303      	movs	r3, #3
 8009292:	e14c      	b.n	800952e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009294:	4b6a      	ldr	r3, [pc, #424]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 8009296:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009298:	f003 0302 	and.w	r3, r3, #2
 800929c:	2b00      	cmp	r3, #0
 800929e:	d0ee      	beq.n	800927e <HAL_RCC_OscConfig+0x5a2>
 80092a0:	e014      	b.n	80092cc <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092a2:	f7f8 fc4f 	bl	8001b44 <HAL_GetTick>
 80092a6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80092a8:	e00a      	b.n	80092c0 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092aa:	f7f8 fc4b 	bl	8001b44 <HAL_GetTick>
 80092ae:	4602      	mov	r2, r0
 80092b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092b2:	1ad3      	subs	r3, r2, r3
 80092b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d901      	bls.n	80092c0 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 80092bc:	2303      	movs	r3, #3
 80092be:	e136      	b.n	800952e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80092c0:	4b5f      	ldr	r3, [pc, #380]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 80092c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092c4:	f003 0302 	and.w	r3, r3, #2
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d1ee      	bne.n	80092aa <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	f000 812b 	beq.w	800952c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80092d6:	4b5a      	ldr	r3, [pc, #360]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 80092d8:	691b      	ldr	r3, [r3, #16]
 80092da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80092de:	2b18      	cmp	r3, #24
 80092e0:	f000 80bb 	beq.w	800945a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092e8:	2b02      	cmp	r3, #2
 80092ea:	f040 8095 	bne.w	8009418 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092ee:	4b54      	ldr	r3, [pc, #336]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a53      	ldr	r2, [pc, #332]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 80092f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80092f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092fa:	f7f8 fc23 	bl	8001b44 <HAL_GetTick>
 80092fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009300:	e008      	b.n	8009314 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009302:	f7f8 fc1f 	bl	8001b44 <HAL_GetTick>
 8009306:	4602      	mov	r2, r0
 8009308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800930a:	1ad3      	subs	r3, r2, r3
 800930c:	2b02      	cmp	r3, #2
 800930e:	d901      	bls.n	8009314 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 8009310:	2303      	movs	r3, #3
 8009312:	e10c      	b.n	800952e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009314:	4b4a      	ldr	r3, [pc, #296]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800931c:	2b00      	cmp	r3, #0
 800931e:	d1f0      	bne.n	8009302 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009320:	4b47      	ldr	r3, [pc, #284]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 8009322:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009324:	4b47      	ldr	r3, [pc, #284]	@ (8009444 <HAL_RCC_OscConfig+0x768>)
 8009326:	4013      	ands	r3, r2
 8009328:	687a      	ldr	r2, [r7, #4]
 800932a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800932c:	687a      	ldr	r2, [r7, #4]
 800932e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8009330:	0112      	lsls	r2, r2, #4
 8009332:	430a      	orrs	r2, r1
 8009334:	4942      	ldr	r1, [pc, #264]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 8009336:	4313      	orrs	r3, r2
 8009338:	628b      	str	r3, [r1, #40]	@ 0x28
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800933e:	3b01      	subs	r3, #1
 8009340:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009348:	3b01      	subs	r3, #1
 800934a:	025b      	lsls	r3, r3, #9
 800934c:	b29b      	uxth	r3, r3
 800934e:	431a      	orrs	r2, r3
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009354:	3b01      	subs	r3, #1
 8009356:	041b      	lsls	r3, r3, #16
 8009358:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800935c:	431a      	orrs	r2, r3
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009362:	3b01      	subs	r3, #1
 8009364:	061b      	lsls	r3, r3, #24
 8009366:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800936a:	4935      	ldr	r1, [pc, #212]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 800936c:	4313      	orrs	r3, r2
 800936e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8009370:	4b33      	ldr	r3, [pc, #204]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 8009372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009374:	4a32      	ldr	r2, [pc, #200]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 8009376:	f023 0301 	bic.w	r3, r3, #1
 800937a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800937c:	4b30      	ldr	r3, [pc, #192]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 800937e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009380:	4b31      	ldr	r3, [pc, #196]	@ (8009448 <HAL_RCC_OscConfig+0x76c>)
 8009382:	4013      	ands	r3, r2
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009388:	00d2      	lsls	r2, r2, #3
 800938a:	492d      	ldr	r1, [pc, #180]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 800938c:	4313      	orrs	r3, r2
 800938e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009390:	4b2b      	ldr	r3, [pc, #172]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 8009392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009394:	f023 020c 	bic.w	r2, r3, #12
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800939c:	4928      	ldr	r1, [pc, #160]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 800939e:	4313      	orrs	r3, r2
 80093a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80093a2:	4b27      	ldr	r3, [pc, #156]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 80093a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093a6:	f023 0202 	bic.w	r2, r3, #2
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093ae:	4924      	ldr	r1, [pc, #144]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 80093b0:	4313      	orrs	r3, r2
 80093b2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80093b4:	4b22      	ldr	r3, [pc, #136]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 80093b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093b8:	4a21      	ldr	r2, [pc, #132]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 80093ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80093be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093c0:	4b1f      	ldr	r3, [pc, #124]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 80093c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093c4:	4a1e      	ldr	r2, [pc, #120]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 80093c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80093ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80093cc:	4b1c      	ldr	r3, [pc, #112]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 80093ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093d0:	4a1b      	ldr	r2, [pc, #108]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 80093d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80093d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80093d8:	4b19      	ldr	r3, [pc, #100]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 80093da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093dc:	4a18      	ldr	r2, [pc, #96]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 80093de:	f043 0301 	orr.w	r3, r3, #1
 80093e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80093e4:	4b16      	ldr	r3, [pc, #88]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a15      	ldr	r2, [pc, #84]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 80093ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80093ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093f0:	f7f8 fba8 	bl	8001b44 <HAL_GetTick>
 80093f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80093f6:	e008      	b.n	800940a <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093f8:	f7f8 fba4 	bl	8001b44 <HAL_GetTick>
 80093fc:	4602      	mov	r2, r0
 80093fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009400:	1ad3      	subs	r3, r2, r3
 8009402:	2b02      	cmp	r3, #2
 8009404:	d901      	bls.n	800940a <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 8009406:	2303      	movs	r3, #3
 8009408:	e091      	b.n	800952e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800940a:	4b0d      	ldr	r3, [pc, #52]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009412:	2b00      	cmp	r3, #0
 8009414:	d0f0      	beq.n	80093f8 <HAL_RCC_OscConfig+0x71c>
 8009416:	e089      	b.n	800952c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009418:	4b09      	ldr	r3, [pc, #36]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4a08      	ldr	r2, [pc, #32]	@ (8009440 <HAL_RCC_OscConfig+0x764>)
 800941e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009422:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009424:	f7f8 fb8e 	bl	8001b44 <HAL_GetTick>
 8009428:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800942a:	e00f      	b.n	800944c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800942c:	f7f8 fb8a 	bl	8001b44 <HAL_GetTick>
 8009430:	4602      	mov	r2, r0
 8009432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009434:	1ad3      	subs	r3, r2, r3
 8009436:	2b02      	cmp	r3, #2
 8009438:	d908      	bls.n	800944c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800943a:	2303      	movs	r3, #3
 800943c:	e077      	b.n	800952e <HAL_RCC_OscConfig+0x852>
 800943e:	bf00      	nop
 8009440:	58024400 	.word	0x58024400
 8009444:	fffffc0c 	.word	0xfffffc0c
 8009448:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800944c:	4b3a      	ldr	r3, [pc, #232]	@ (8009538 <HAL_RCC_OscConfig+0x85c>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009454:	2b00      	cmp	r3, #0
 8009456:	d1e9      	bne.n	800942c <HAL_RCC_OscConfig+0x750>
 8009458:	e068      	b.n	800952c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800945a:	4b37      	ldr	r3, [pc, #220]	@ (8009538 <HAL_RCC_OscConfig+0x85c>)
 800945c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800945e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009460:	4b35      	ldr	r3, [pc, #212]	@ (8009538 <HAL_RCC_OscConfig+0x85c>)
 8009462:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009464:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800946a:	2b01      	cmp	r3, #1
 800946c:	d031      	beq.n	80094d2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	f003 0203 	and.w	r2, r3, #3
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009478:	429a      	cmp	r2, r3
 800947a:	d12a      	bne.n	80094d2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	091b      	lsrs	r3, r3, #4
 8009480:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009488:	429a      	cmp	r2, r3
 800948a:	d122      	bne.n	80094d2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009496:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009498:	429a      	cmp	r2, r3
 800949a:	d11a      	bne.n	80094d2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	0a5b      	lsrs	r3, r3, #9
 80094a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094a8:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d111      	bne.n	80094d2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	0c1b      	lsrs	r3, r3, #16
 80094b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094ba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80094bc:	429a      	cmp	r2, r3
 80094be:	d108      	bne.n	80094d2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	0e1b      	lsrs	r3, r3, #24
 80094c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80094cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d001      	beq.n	80094d6 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 80094d2:	2301      	movs	r3, #1
 80094d4:	e02b      	b.n	800952e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80094d6:	4b18      	ldr	r3, [pc, #96]	@ (8009538 <HAL_RCC_OscConfig+0x85c>)
 80094d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094da:	08db      	lsrs	r3, r3, #3
 80094dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80094e0:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094e6:	693a      	ldr	r2, [r7, #16]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d01f      	beq.n	800952c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80094ec:	4b12      	ldr	r3, [pc, #72]	@ (8009538 <HAL_RCC_OscConfig+0x85c>)
 80094ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094f0:	4a11      	ldr	r2, [pc, #68]	@ (8009538 <HAL_RCC_OscConfig+0x85c>)
 80094f2:	f023 0301 	bic.w	r3, r3, #1
 80094f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80094f8:	f7f8 fb24 	bl	8001b44 <HAL_GetTick>
 80094fc:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80094fe:	bf00      	nop
 8009500:	f7f8 fb20 	bl	8001b44 <HAL_GetTick>
 8009504:	4602      	mov	r2, r0
 8009506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009508:	4293      	cmp	r3, r2
 800950a:	d0f9      	beq.n	8009500 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800950c:	4b0a      	ldr	r3, [pc, #40]	@ (8009538 <HAL_RCC_OscConfig+0x85c>)
 800950e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009510:	4b0a      	ldr	r3, [pc, #40]	@ (800953c <HAL_RCC_OscConfig+0x860>)
 8009512:	4013      	ands	r3, r2
 8009514:	687a      	ldr	r2, [r7, #4]
 8009516:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009518:	00d2      	lsls	r2, r2, #3
 800951a:	4907      	ldr	r1, [pc, #28]	@ (8009538 <HAL_RCC_OscConfig+0x85c>)
 800951c:	4313      	orrs	r3, r2
 800951e:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009520:	4b05      	ldr	r3, [pc, #20]	@ (8009538 <HAL_RCC_OscConfig+0x85c>)
 8009522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009524:	4a04      	ldr	r2, [pc, #16]	@ (8009538 <HAL_RCC_OscConfig+0x85c>)
 8009526:	f043 0301 	orr.w	r3, r3, #1
 800952a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800952c:	2300      	movs	r3, #0
}
 800952e:	4618      	mov	r0, r3
 8009530:	3730      	adds	r7, #48	@ 0x30
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	58024400 	.word	0x58024400
 800953c:	ffff0007 	.word	0xffff0007

08009540 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b086      	sub	sp, #24
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d101      	bne.n	8009554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009550:	2301      	movs	r3, #1
 8009552:	e19c      	b.n	800988e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009554:	4b8a      	ldr	r3, [pc, #552]	@ (8009780 <HAL_RCC_ClockConfig+0x240>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f003 030f 	and.w	r3, r3, #15
 800955c:	683a      	ldr	r2, [r7, #0]
 800955e:	429a      	cmp	r2, r3
 8009560:	d910      	bls.n	8009584 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009562:	4b87      	ldr	r3, [pc, #540]	@ (8009780 <HAL_RCC_ClockConfig+0x240>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f023 020f 	bic.w	r2, r3, #15
 800956a:	4985      	ldr	r1, [pc, #532]	@ (8009780 <HAL_RCC_ClockConfig+0x240>)
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	4313      	orrs	r3, r2
 8009570:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009572:	4b83      	ldr	r3, [pc, #524]	@ (8009780 <HAL_RCC_ClockConfig+0x240>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f003 030f 	and.w	r3, r3, #15
 800957a:	683a      	ldr	r2, [r7, #0]
 800957c:	429a      	cmp	r2, r3
 800957e:	d001      	beq.n	8009584 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	e184      	b.n	800988e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f003 0304 	and.w	r3, r3, #4
 800958c:	2b00      	cmp	r3, #0
 800958e:	d010      	beq.n	80095b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	691a      	ldr	r2, [r3, #16]
 8009594:	4b7b      	ldr	r3, [pc, #492]	@ (8009784 <HAL_RCC_ClockConfig+0x244>)
 8009596:	699b      	ldr	r3, [r3, #24]
 8009598:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800959c:	429a      	cmp	r2, r3
 800959e:	d908      	bls.n	80095b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80095a0:	4b78      	ldr	r3, [pc, #480]	@ (8009784 <HAL_RCC_ClockConfig+0x244>)
 80095a2:	699b      	ldr	r3, [r3, #24]
 80095a4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	691b      	ldr	r3, [r3, #16]
 80095ac:	4975      	ldr	r1, [pc, #468]	@ (8009784 <HAL_RCC_ClockConfig+0x244>)
 80095ae:	4313      	orrs	r3, r2
 80095b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f003 0308 	and.w	r3, r3, #8
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d010      	beq.n	80095e0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	695a      	ldr	r2, [r3, #20]
 80095c2:	4b70      	ldr	r3, [pc, #448]	@ (8009784 <HAL_RCC_ClockConfig+0x244>)
 80095c4:	69db      	ldr	r3, [r3, #28]
 80095c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d908      	bls.n	80095e0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80095ce:	4b6d      	ldr	r3, [pc, #436]	@ (8009784 <HAL_RCC_ClockConfig+0x244>)
 80095d0:	69db      	ldr	r3, [r3, #28]
 80095d2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	695b      	ldr	r3, [r3, #20]
 80095da:	496a      	ldr	r1, [pc, #424]	@ (8009784 <HAL_RCC_ClockConfig+0x244>)
 80095dc:	4313      	orrs	r3, r2
 80095de:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f003 0310 	and.w	r3, r3, #16
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d010      	beq.n	800960e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	699a      	ldr	r2, [r3, #24]
 80095f0:	4b64      	ldr	r3, [pc, #400]	@ (8009784 <HAL_RCC_ClockConfig+0x244>)
 80095f2:	69db      	ldr	r3, [r3, #28]
 80095f4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d908      	bls.n	800960e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80095fc:	4b61      	ldr	r3, [pc, #388]	@ (8009784 <HAL_RCC_ClockConfig+0x244>)
 80095fe:	69db      	ldr	r3, [r3, #28]
 8009600:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	699b      	ldr	r3, [r3, #24]
 8009608:	495e      	ldr	r1, [pc, #376]	@ (8009784 <HAL_RCC_ClockConfig+0x244>)
 800960a:	4313      	orrs	r3, r2
 800960c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f003 0320 	and.w	r3, r3, #32
 8009616:	2b00      	cmp	r3, #0
 8009618:	d010      	beq.n	800963c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	69da      	ldr	r2, [r3, #28]
 800961e:	4b59      	ldr	r3, [pc, #356]	@ (8009784 <HAL_RCC_ClockConfig+0x244>)
 8009620:	6a1b      	ldr	r3, [r3, #32]
 8009622:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009626:	429a      	cmp	r2, r3
 8009628:	d908      	bls.n	800963c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800962a:	4b56      	ldr	r3, [pc, #344]	@ (8009784 <HAL_RCC_ClockConfig+0x244>)
 800962c:	6a1b      	ldr	r3, [r3, #32]
 800962e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	69db      	ldr	r3, [r3, #28]
 8009636:	4953      	ldr	r1, [pc, #332]	@ (8009784 <HAL_RCC_ClockConfig+0x244>)
 8009638:	4313      	orrs	r3, r2
 800963a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f003 0302 	and.w	r3, r3, #2
 8009644:	2b00      	cmp	r3, #0
 8009646:	d010      	beq.n	800966a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	68da      	ldr	r2, [r3, #12]
 800964c:	4b4d      	ldr	r3, [pc, #308]	@ (8009784 <HAL_RCC_ClockConfig+0x244>)
 800964e:	699b      	ldr	r3, [r3, #24]
 8009650:	f003 030f 	and.w	r3, r3, #15
 8009654:	429a      	cmp	r2, r3
 8009656:	d908      	bls.n	800966a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009658:	4b4a      	ldr	r3, [pc, #296]	@ (8009784 <HAL_RCC_ClockConfig+0x244>)
 800965a:	699b      	ldr	r3, [r3, #24]
 800965c:	f023 020f 	bic.w	r2, r3, #15
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	68db      	ldr	r3, [r3, #12]
 8009664:	4947      	ldr	r1, [pc, #284]	@ (8009784 <HAL_RCC_ClockConfig+0x244>)
 8009666:	4313      	orrs	r3, r2
 8009668:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f003 0301 	and.w	r3, r3, #1
 8009672:	2b00      	cmp	r3, #0
 8009674:	d055      	beq.n	8009722 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009676:	4b43      	ldr	r3, [pc, #268]	@ (8009784 <HAL_RCC_ClockConfig+0x244>)
 8009678:	699b      	ldr	r3, [r3, #24]
 800967a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	4940      	ldr	r1, [pc, #256]	@ (8009784 <HAL_RCC_ClockConfig+0x244>)
 8009684:	4313      	orrs	r3, r2
 8009686:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	2b02      	cmp	r3, #2
 800968e:	d107      	bne.n	80096a0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009690:	4b3c      	ldr	r3, [pc, #240]	@ (8009784 <HAL_RCC_ClockConfig+0x244>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009698:	2b00      	cmp	r3, #0
 800969a:	d121      	bne.n	80096e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800969c:	2301      	movs	r3, #1
 800969e:	e0f6      	b.n	800988e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	685b      	ldr	r3, [r3, #4]
 80096a4:	2b03      	cmp	r3, #3
 80096a6:	d107      	bne.n	80096b8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80096a8:	4b36      	ldr	r3, [pc, #216]	@ (8009784 <HAL_RCC_ClockConfig+0x244>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d115      	bne.n	80096e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80096b4:	2301      	movs	r3, #1
 80096b6:	e0ea      	b.n	800988e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d107      	bne.n	80096d0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80096c0:	4b30      	ldr	r3, [pc, #192]	@ (8009784 <HAL_RCC_ClockConfig+0x244>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d109      	bne.n	80096e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80096cc:	2301      	movs	r3, #1
 80096ce:	e0de      	b.n	800988e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80096d0:	4b2c      	ldr	r3, [pc, #176]	@ (8009784 <HAL_RCC_ClockConfig+0x244>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f003 0304 	and.w	r3, r3, #4
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d101      	bne.n	80096e0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80096dc:	2301      	movs	r3, #1
 80096de:	e0d6      	b.n	800988e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80096e0:	4b28      	ldr	r3, [pc, #160]	@ (8009784 <HAL_RCC_ClockConfig+0x244>)
 80096e2:	691b      	ldr	r3, [r3, #16]
 80096e4:	f023 0207 	bic.w	r2, r3, #7
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	685b      	ldr	r3, [r3, #4]
 80096ec:	4925      	ldr	r1, [pc, #148]	@ (8009784 <HAL_RCC_ClockConfig+0x244>)
 80096ee:	4313      	orrs	r3, r2
 80096f0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096f2:	f7f8 fa27 	bl	8001b44 <HAL_GetTick>
 80096f6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096f8:	e00a      	b.n	8009710 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096fa:	f7f8 fa23 	bl	8001b44 <HAL_GetTick>
 80096fe:	4602      	mov	r2, r0
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	1ad3      	subs	r3, r2, r3
 8009704:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009708:	4293      	cmp	r3, r2
 800970a:	d901      	bls.n	8009710 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800970c:	2303      	movs	r3, #3
 800970e:	e0be      	b.n	800988e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009710:	4b1c      	ldr	r3, [pc, #112]	@ (8009784 <HAL_RCC_ClockConfig+0x244>)
 8009712:	691b      	ldr	r3, [r3, #16]
 8009714:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	685b      	ldr	r3, [r3, #4]
 800971c:	00db      	lsls	r3, r3, #3
 800971e:	429a      	cmp	r2, r3
 8009720:	d1eb      	bne.n	80096fa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f003 0302 	and.w	r3, r3, #2
 800972a:	2b00      	cmp	r3, #0
 800972c:	d010      	beq.n	8009750 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	68da      	ldr	r2, [r3, #12]
 8009732:	4b14      	ldr	r3, [pc, #80]	@ (8009784 <HAL_RCC_ClockConfig+0x244>)
 8009734:	699b      	ldr	r3, [r3, #24]
 8009736:	f003 030f 	and.w	r3, r3, #15
 800973a:	429a      	cmp	r2, r3
 800973c:	d208      	bcs.n	8009750 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800973e:	4b11      	ldr	r3, [pc, #68]	@ (8009784 <HAL_RCC_ClockConfig+0x244>)
 8009740:	699b      	ldr	r3, [r3, #24]
 8009742:	f023 020f 	bic.w	r2, r3, #15
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	68db      	ldr	r3, [r3, #12]
 800974a:	490e      	ldr	r1, [pc, #56]	@ (8009784 <HAL_RCC_ClockConfig+0x244>)
 800974c:	4313      	orrs	r3, r2
 800974e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009750:	4b0b      	ldr	r3, [pc, #44]	@ (8009780 <HAL_RCC_ClockConfig+0x240>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f003 030f 	and.w	r3, r3, #15
 8009758:	683a      	ldr	r2, [r7, #0]
 800975a:	429a      	cmp	r2, r3
 800975c:	d214      	bcs.n	8009788 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800975e:	4b08      	ldr	r3, [pc, #32]	@ (8009780 <HAL_RCC_ClockConfig+0x240>)
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f023 020f 	bic.w	r2, r3, #15
 8009766:	4906      	ldr	r1, [pc, #24]	@ (8009780 <HAL_RCC_ClockConfig+0x240>)
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	4313      	orrs	r3, r2
 800976c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800976e:	4b04      	ldr	r3, [pc, #16]	@ (8009780 <HAL_RCC_ClockConfig+0x240>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f003 030f 	and.w	r3, r3, #15
 8009776:	683a      	ldr	r2, [r7, #0]
 8009778:	429a      	cmp	r2, r3
 800977a:	d005      	beq.n	8009788 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800977c:	2301      	movs	r3, #1
 800977e:	e086      	b.n	800988e <HAL_RCC_ClockConfig+0x34e>
 8009780:	52002000 	.word	0x52002000
 8009784:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f003 0304 	and.w	r3, r3, #4
 8009790:	2b00      	cmp	r3, #0
 8009792:	d010      	beq.n	80097b6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	691a      	ldr	r2, [r3, #16]
 8009798:	4b3f      	ldr	r3, [pc, #252]	@ (8009898 <HAL_RCC_ClockConfig+0x358>)
 800979a:	699b      	ldr	r3, [r3, #24]
 800979c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80097a0:	429a      	cmp	r2, r3
 80097a2:	d208      	bcs.n	80097b6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80097a4:	4b3c      	ldr	r3, [pc, #240]	@ (8009898 <HAL_RCC_ClockConfig+0x358>)
 80097a6:	699b      	ldr	r3, [r3, #24]
 80097a8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	691b      	ldr	r3, [r3, #16]
 80097b0:	4939      	ldr	r1, [pc, #228]	@ (8009898 <HAL_RCC_ClockConfig+0x358>)
 80097b2:	4313      	orrs	r3, r2
 80097b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f003 0308 	and.w	r3, r3, #8
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d010      	beq.n	80097e4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	695a      	ldr	r2, [r3, #20]
 80097c6:	4b34      	ldr	r3, [pc, #208]	@ (8009898 <HAL_RCC_ClockConfig+0x358>)
 80097c8:	69db      	ldr	r3, [r3, #28]
 80097ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d208      	bcs.n	80097e4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80097d2:	4b31      	ldr	r3, [pc, #196]	@ (8009898 <HAL_RCC_ClockConfig+0x358>)
 80097d4:	69db      	ldr	r3, [r3, #28]
 80097d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	695b      	ldr	r3, [r3, #20]
 80097de:	492e      	ldr	r1, [pc, #184]	@ (8009898 <HAL_RCC_ClockConfig+0x358>)
 80097e0:	4313      	orrs	r3, r2
 80097e2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f003 0310 	and.w	r3, r3, #16
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d010      	beq.n	8009812 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	699a      	ldr	r2, [r3, #24]
 80097f4:	4b28      	ldr	r3, [pc, #160]	@ (8009898 <HAL_RCC_ClockConfig+0x358>)
 80097f6:	69db      	ldr	r3, [r3, #28]
 80097f8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80097fc:	429a      	cmp	r2, r3
 80097fe:	d208      	bcs.n	8009812 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009800:	4b25      	ldr	r3, [pc, #148]	@ (8009898 <HAL_RCC_ClockConfig+0x358>)
 8009802:	69db      	ldr	r3, [r3, #28]
 8009804:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	699b      	ldr	r3, [r3, #24]
 800980c:	4922      	ldr	r1, [pc, #136]	@ (8009898 <HAL_RCC_ClockConfig+0x358>)
 800980e:	4313      	orrs	r3, r2
 8009810:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f003 0320 	and.w	r3, r3, #32
 800981a:	2b00      	cmp	r3, #0
 800981c:	d010      	beq.n	8009840 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	69da      	ldr	r2, [r3, #28]
 8009822:	4b1d      	ldr	r3, [pc, #116]	@ (8009898 <HAL_RCC_ClockConfig+0x358>)
 8009824:	6a1b      	ldr	r3, [r3, #32]
 8009826:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800982a:	429a      	cmp	r2, r3
 800982c:	d208      	bcs.n	8009840 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800982e:	4b1a      	ldr	r3, [pc, #104]	@ (8009898 <HAL_RCC_ClockConfig+0x358>)
 8009830:	6a1b      	ldr	r3, [r3, #32]
 8009832:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	69db      	ldr	r3, [r3, #28]
 800983a:	4917      	ldr	r1, [pc, #92]	@ (8009898 <HAL_RCC_ClockConfig+0x358>)
 800983c:	4313      	orrs	r3, r2
 800983e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8009840:	f000 f89e 	bl	8009980 <HAL_RCC_GetSysClockFreq>
 8009844:	4602      	mov	r2, r0
 8009846:	4b14      	ldr	r3, [pc, #80]	@ (8009898 <HAL_RCC_ClockConfig+0x358>)
 8009848:	699b      	ldr	r3, [r3, #24]
 800984a:	0a1b      	lsrs	r3, r3, #8
 800984c:	f003 030f 	and.w	r3, r3, #15
 8009850:	4912      	ldr	r1, [pc, #72]	@ (800989c <HAL_RCC_ClockConfig+0x35c>)
 8009852:	5ccb      	ldrb	r3, [r1, r3]
 8009854:	f003 031f 	and.w	r3, r3, #31
 8009858:	fa22 f303 	lsr.w	r3, r2, r3
 800985c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800985e:	4b0e      	ldr	r3, [pc, #56]	@ (8009898 <HAL_RCC_ClockConfig+0x358>)
 8009860:	699b      	ldr	r3, [r3, #24]
 8009862:	f003 030f 	and.w	r3, r3, #15
 8009866:	4a0d      	ldr	r2, [pc, #52]	@ (800989c <HAL_RCC_ClockConfig+0x35c>)
 8009868:	5cd3      	ldrb	r3, [r2, r3]
 800986a:	f003 031f 	and.w	r3, r3, #31
 800986e:	693a      	ldr	r2, [r7, #16]
 8009870:	fa22 f303 	lsr.w	r3, r2, r3
 8009874:	4a0a      	ldr	r2, [pc, #40]	@ (80098a0 <HAL_RCC_ClockConfig+0x360>)
 8009876:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009878:	4a0a      	ldr	r2, [pc, #40]	@ (80098a4 <HAL_RCC_ClockConfig+0x364>)
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800987e:	4b0a      	ldr	r3, [pc, #40]	@ (80098a8 <HAL_RCC_ClockConfig+0x368>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4618      	mov	r0, r3
 8009884:	f7f8 f914 	bl	8001ab0 <HAL_InitTick>
 8009888:	4603      	mov	r3, r0
 800988a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800988c:	7bfb      	ldrb	r3, [r7, #15]
}
 800988e:	4618      	mov	r0, r3
 8009890:	3718      	adds	r7, #24
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	58024400 	.word	0x58024400
 800989c:	0801120c 	.word	0x0801120c
 80098a0:	24000008 	.word	0x24000008
 80098a4:	24000004 	.word	0x24000004
 80098a8:	2400000c 	.word	0x2400000c

080098ac <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b08c      	sub	sp, #48	@ 0x30
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	60b9      	str	r1, [r7, #8]
 80098b6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d12a      	bne.n	8009914 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80098be:	4b2d      	ldr	r3, [pc, #180]	@ (8009974 <HAL_RCC_MCOConfig+0xc8>)
 80098c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80098c4:	4a2b      	ldr	r2, [pc, #172]	@ (8009974 <HAL_RCC_MCOConfig+0xc8>)
 80098c6:	f043 0301 	orr.w	r3, r3, #1
 80098ca:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80098ce:	4b29      	ldr	r3, [pc, #164]	@ (8009974 <HAL_RCC_MCOConfig+0xc8>)
 80098d0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80098d4:	f003 0301 	and.w	r3, r3, #1
 80098d8:	61bb      	str	r3, [r7, #24]
 80098da:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80098dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80098e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098e2:	2302      	movs	r3, #2
 80098e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80098e6:	2303      	movs	r3, #3
 80098e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098ea:	2300      	movs	r3, #0
 80098ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80098ee:	2300      	movs	r3, #0
 80098f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80098f2:	f107 031c 	add.w	r3, r7, #28
 80098f6:	4619      	mov	r1, r3
 80098f8:	481f      	ldr	r0, [pc, #124]	@ (8009978 <HAL_RCC_MCOConfig+0xcc>)
 80098fa:	f7fd f885 	bl	8006a08 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80098fe:	4b1d      	ldr	r3, [pc, #116]	@ (8009974 <HAL_RCC_MCOConfig+0xc8>)
 8009900:	691b      	ldr	r3, [r3, #16]
 8009902:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8009906:	68b9      	ldr	r1, [r7, #8]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	430b      	orrs	r3, r1
 800990c:	4919      	ldr	r1, [pc, #100]	@ (8009974 <HAL_RCC_MCOConfig+0xc8>)
 800990e:	4313      	orrs	r3, r2
 8009910:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8009912:	e02a      	b.n	800996a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8009914:	4b17      	ldr	r3, [pc, #92]	@ (8009974 <HAL_RCC_MCOConfig+0xc8>)
 8009916:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800991a:	4a16      	ldr	r2, [pc, #88]	@ (8009974 <HAL_RCC_MCOConfig+0xc8>)
 800991c:	f043 0304 	orr.w	r3, r3, #4
 8009920:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8009924:	4b13      	ldr	r3, [pc, #76]	@ (8009974 <HAL_RCC_MCOConfig+0xc8>)
 8009926:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800992a:	f003 0304 	and.w	r3, r3, #4
 800992e:	617b      	str	r3, [r7, #20]
 8009930:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8009932:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009938:	2302      	movs	r3, #2
 800993a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800993c:	2303      	movs	r3, #3
 800993e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009940:	2300      	movs	r3, #0
 8009942:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8009944:	2300      	movs	r3, #0
 8009946:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8009948:	f107 031c 	add.w	r3, r7, #28
 800994c:	4619      	mov	r1, r3
 800994e:	480b      	ldr	r0, [pc, #44]	@ (800997c <HAL_RCC_MCOConfig+0xd0>)
 8009950:	f7fd f85a 	bl	8006a08 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8009954:	4b07      	ldr	r3, [pc, #28]	@ (8009974 <HAL_RCC_MCOConfig+0xc8>)
 8009956:	691b      	ldr	r3, [r3, #16]
 8009958:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	01d9      	lsls	r1, r3, #7
 8009960:	68bb      	ldr	r3, [r7, #8]
 8009962:	430b      	orrs	r3, r1
 8009964:	4903      	ldr	r1, [pc, #12]	@ (8009974 <HAL_RCC_MCOConfig+0xc8>)
 8009966:	4313      	orrs	r3, r2
 8009968:	610b      	str	r3, [r1, #16]
}
 800996a:	bf00      	nop
 800996c:	3730      	adds	r7, #48	@ 0x30
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop
 8009974:	58024400 	.word	0x58024400
 8009978:	58020000 	.word	0x58020000
 800997c:	58020800 	.word	0x58020800

08009980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009980:	b480      	push	{r7}
 8009982:	b089      	sub	sp, #36	@ 0x24
 8009984:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009986:	4bb3      	ldr	r3, [pc, #716]	@ (8009c54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009988:	691b      	ldr	r3, [r3, #16]
 800998a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800998e:	2b18      	cmp	r3, #24
 8009990:	f200 8155 	bhi.w	8009c3e <HAL_RCC_GetSysClockFreq+0x2be>
 8009994:	a201      	add	r2, pc, #4	@ (adr r2, 800999c <HAL_RCC_GetSysClockFreq+0x1c>)
 8009996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800999a:	bf00      	nop
 800999c:	08009a01 	.word	0x08009a01
 80099a0:	08009c3f 	.word	0x08009c3f
 80099a4:	08009c3f 	.word	0x08009c3f
 80099a8:	08009c3f 	.word	0x08009c3f
 80099ac:	08009c3f 	.word	0x08009c3f
 80099b0:	08009c3f 	.word	0x08009c3f
 80099b4:	08009c3f 	.word	0x08009c3f
 80099b8:	08009c3f 	.word	0x08009c3f
 80099bc:	08009a27 	.word	0x08009a27
 80099c0:	08009c3f 	.word	0x08009c3f
 80099c4:	08009c3f 	.word	0x08009c3f
 80099c8:	08009c3f 	.word	0x08009c3f
 80099cc:	08009c3f 	.word	0x08009c3f
 80099d0:	08009c3f 	.word	0x08009c3f
 80099d4:	08009c3f 	.word	0x08009c3f
 80099d8:	08009c3f 	.word	0x08009c3f
 80099dc:	08009a2d 	.word	0x08009a2d
 80099e0:	08009c3f 	.word	0x08009c3f
 80099e4:	08009c3f 	.word	0x08009c3f
 80099e8:	08009c3f 	.word	0x08009c3f
 80099ec:	08009c3f 	.word	0x08009c3f
 80099f0:	08009c3f 	.word	0x08009c3f
 80099f4:	08009c3f 	.word	0x08009c3f
 80099f8:	08009c3f 	.word	0x08009c3f
 80099fc:	08009a33 	.word	0x08009a33
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a00:	4b94      	ldr	r3, [pc, #592]	@ (8009c54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f003 0320 	and.w	r3, r3, #32
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d009      	beq.n	8009a20 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009a0c:	4b91      	ldr	r3, [pc, #580]	@ (8009c54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	08db      	lsrs	r3, r3, #3
 8009a12:	f003 0303 	and.w	r3, r3, #3
 8009a16:	4a90      	ldr	r2, [pc, #576]	@ (8009c58 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009a18:	fa22 f303 	lsr.w	r3, r2, r3
 8009a1c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8009a1e:	e111      	b.n	8009c44 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8009a20:	4b8d      	ldr	r3, [pc, #564]	@ (8009c58 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009a22:	61bb      	str	r3, [r7, #24]
      break;
 8009a24:	e10e      	b.n	8009c44 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8009a26:	4b8d      	ldr	r3, [pc, #564]	@ (8009c5c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009a28:	61bb      	str	r3, [r7, #24]
      break;
 8009a2a:	e10b      	b.n	8009c44 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8009a2c:	4b8c      	ldr	r3, [pc, #560]	@ (8009c60 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8009a2e:	61bb      	str	r3, [r7, #24]
      break;
 8009a30:	e108      	b.n	8009c44 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009a32:	4b88      	ldr	r3, [pc, #544]	@ (8009c54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a36:	f003 0303 	and.w	r3, r3, #3
 8009a3a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8009a3c:	4b85      	ldr	r3, [pc, #532]	@ (8009c54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a40:	091b      	lsrs	r3, r3, #4
 8009a42:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009a46:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009a48:	4b82      	ldr	r3, [pc, #520]	@ (8009c54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a4c:	f003 0301 	and.w	r3, r3, #1
 8009a50:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009a52:	4b80      	ldr	r3, [pc, #512]	@ (8009c54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009a56:	08db      	lsrs	r3, r3, #3
 8009a58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009a5c:	68fa      	ldr	r2, [r7, #12]
 8009a5e:	fb02 f303 	mul.w	r3, r2, r3
 8009a62:	ee07 3a90 	vmov	s15, r3
 8009a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a6a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8009a6e:	693b      	ldr	r3, [r7, #16]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	f000 80e1 	beq.w	8009c38 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	2b02      	cmp	r3, #2
 8009a7a:	f000 8083 	beq.w	8009b84 <HAL_RCC_GetSysClockFreq+0x204>
 8009a7e:	697b      	ldr	r3, [r7, #20]
 8009a80:	2b02      	cmp	r3, #2
 8009a82:	f200 80a1 	bhi.w	8009bc8 <HAL_RCC_GetSysClockFreq+0x248>
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d003      	beq.n	8009a94 <HAL_RCC_GetSysClockFreq+0x114>
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d056      	beq.n	8009b40 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009a92:	e099      	b.n	8009bc8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009a94:	4b6f      	ldr	r3, [pc, #444]	@ (8009c54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f003 0320 	and.w	r3, r3, #32
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d02d      	beq.n	8009afc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009aa0:	4b6c      	ldr	r3, [pc, #432]	@ (8009c54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	08db      	lsrs	r3, r3, #3
 8009aa6:	f003 0303 	and.w	r3, r3, #3
 8009aaa:	4a6b      	ldr	r2, [pc, #428]	@ (8009c58 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8009aac:	fa22 f303 	lsr.w	r3, r2, r3
 8009ab0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	ee07 3a90 	vmov	s15, r3
 8009ab8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	ee07 3a90 	vmov	s15, r3
 8009ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009aca:	4b62      	ldr	r3, [pc, #392]	@ (8009c54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ad2:	ee07 3a90 	vmov	s15, r3
 8009ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ada:	ed97 6a02 	vldr	s12, [r7, #8]
 8009ade:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8009c64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009aea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009af6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8009afa:	e087      	b.n	8009c0c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	ee07 3a90 	vmov	s15, r3
 8009b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b06:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8009c68 <HAL_RCC_GetSysClockFreq+0x2e8>
 8009b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b0e:	4b51      	ldr	r3, [pc, #324]	@ (8009c54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b16:	ee07 3a90 	vmov	s15, r3
 8009b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b22:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8009c64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009b3e:	e065      	b.n	8009c0c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	ee07 3a90 	vmov	s15, r3
 8009b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b4a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8009c6c <HAL_RCC_GetSysClockFreq+0x2ec>
 8009b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b52:	4b40      	ldr	r3, [pc, #256]	@ (8009c54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b5a:	ee07 3a90 	vmov	s15, r3
 8009b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009b62:	ed97 6a02 	vldr	s12, [r7, #8]
 8009b66:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8009c64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009b72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009b82:	e043      	b.n	8009c0c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	ee07 3a90 	vmov	s15, r3
 8009b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b8e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8009c70 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009b96:	4b2f      	ldr	r3, [pc, #188]	@ (8009c54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b9e:	ee07 3a90 	vmov	s15, r3
 8009ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ba6:	ed97 6a02 	vldr	s12, [r7, #8]
 8009baa:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8009c64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009bc2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009bc6:	e021      	b.n	8009c0c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009bc8:	693b      	ldr	r3, [r7, #16]
 8009bca:	ee07 3a90 	vmov	s15, r3
 8009bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bd2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8009c6c <HAL_RCC_GetSysClockFreq+0x2ec>
 8009bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009bda:	4b1e      	ldr	r3, [pc, #120]	@ (8009c54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009be2:	ee07 3a90 	vmov	s15, r3
 8009be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009bea:	ed97 6a02 	vldr	s12, [r7, #8]
 8009bee:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8009c64 <HAL_RCC_GetSysClockFreq+0x2e4>
 8009bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009bfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c06:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009c0a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8009c0c:	4b11      	ldr	r3, [pc, #68]	@ (8009c54 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009c0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c10:	0a5b      	lsrs	r3, r3, #9
 8009c12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c16:	3301      	adds	r3, #1
 8009c18:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	ee07 3a90 	vmov	s15, r3
 8009c20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009c24:	edd7 6a07 	vldr	s13, [r7, #28]
 8009c28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009c2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c30:	ee17 3a90 	vmov	r3, s15
 8009c34:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8009c36:	e005      	b.n	8009c44 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	61bb      	str	r3, [r7, #24]
      break;
 8009c3c:	e002      	b.n	8009c44 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8009c3e:	4b07      	ldr	r3, [pc, #28]	@ (8009c5c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009c40:	61bb      	str	r3, [r7, #24]
      break;
 8009c42:	bf00      	nop
  }

  return sysclockfreq;
 8009c44:	69bb      	ldr	r3, [r7, #24]
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3724      	adds	r7, #36	@ 0x24
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr
 8009c52:	bf00      	nop
 8009c54:	58024400 	.word	0x58024400
 8009c58:	03d09000 	.word	0x03d09000
 8009c5c:	003d0900 	.word	0x003d0900
 8009c60:	007a1200 	.word	0x007a1200
 8009c64:	46000000 	.word	0x46000000
 8009c68:	4c742400 	.word	0x4c742400
 8009c6c:	4a742400 	.word	0x4a742400
 8009c70:	4af42400 	.word	0x4af42400

08009c74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 8009c7a:	f7ff fe81 	bl	8009980 <HAL_RCC_GetSysClockFreq>
 8009c7e:	4602      	mov	r2, r0
 8009c80:	4b10      	ldr	r3, [pc, #64]	@ (8009cc4 <HAL_RCC_GetHCLKFreq+0x50>)
 8009c82:	699b      	ldr	r3, [r3, #24]
 8009c84:	0a1b      	lsrs	r3, r3, #8
 8009c86:	f003 030f 	and.w	r3, r3, #15
 8009c8a:	490f      	ldr	r1, [pc, #60]	@ (8009cc8 <HAL_RCC_GetHCLKFreq+0x54>)
 8009c8c:	5ccb      	ldrb	r3, [r1, r3]
 8009c8e:	f003 031f 	and.w	r3, r3, #31
 8009c92:	fa22 f303 	lsr.w	r3, r2, r3
 8009c96:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8009c98:	4b0a      	ldr	r3, [pc, #40]	@ (8009cc4 <HAL_RCC_GetHCLKFreq+0x50>)
 8009c9a:	699b      	ldr	r3, [r3, #24]
 8009c9c:	f003 030f 	and.w	r3, r3, #15
 8009ca0:	4a09      	ldr	r2, [pc, #36]	@ (8009cc8 <HAL_RCC_GetHCLKFreq+0x54>)
 8009ca2:	5cd3      	ldrb	r3, [r2, r3]
 8009ca4:	f003 031f 	and.w	r3, r3, #31
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	fa22 f303 	lsr.w	r3, r2, r3
 8009cae:	4a07      	ldr	r2, [pc, #28]	@ (8009ccc <HAL_RCC_GetHCLKFreq+0x58>)
 8009cb0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009cb2:	4a07      	ldr	r2, [pc, #28]	@ (8009cd0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009cb8:	4b04      	ldr	r3, [pc, #16]	@ (8009ccc <HAL_RCC_GetHCLKFreq+0x58>)
 8009cba:	681b      	ldr	r3, [r3, #0]
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3708      	adds	r7, #8
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bd80      	pop	{r7, pc}
 8009cc4:	58024400 	.word	0x58024400
 8009cc8:	0801120c 	.word	0x0801120c
 8009ccc:	24000008 	.word	0x24000008
 8009cd0:	24000004 	.word	0x24000004

08009cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 8009cd8:	f7ff ffcc 	bl	8009c74 <HAL_RCC_GetHCLKFreq>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	4b06      	ldr	r3, [pc, #24]	@ (8009cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009ce0:	69db      	ldr	r3, [r3, #28]
 8009ce2:	091b      	lsrs	r3, r3, #4
 8009ce4:	f003 0307 	and.w	r3, r3, #7
 8009ce8:	4904      	ldr	r1, [pc, #16]	@ (8009cfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8009cea:	5ccb      	ldrb	r3, [r1, r3]
 8009cec:	f003 031f 	and.w	r3, r3, #31
 8009cf0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	bd80      	pop	{r7, pc}
 8009cf8:	58024400 	.word	0x58024400
 8009cfc:	0801120c 	.word	0x0801120c

08009d00 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009d00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d04:	b0c8      	sub	sp, #288	@ 0x120
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009d12:	2300      	movs	r3, #0
 8009d14:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009d18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d20:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8009d24:	2500      	movs	r5, #0
 8009d26:	ea54 0305 	orrs.w	r3, r4, r5
 8009d2a:	d049      	beq.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009d2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d32:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009d36:	d02f      	beq.n	8009d98 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8009d38:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009d3c:	d828      	bhi.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009d3e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009d42:	d01a      	beq.n	8009d7a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009d44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009d48:	d822      	bhi.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d003      	beq.n	8009d56 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009d4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d52:	d007      	beq.n	8009d64 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009d54:	e01c      	b.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009d56:	4ba7      	ldr	r3, [pc, #668]	@ (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d5a:	4aa6      	ldr	r2, [pc, #664]	@ (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009d5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009d60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009d62:	e01a      	b.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009d64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d68:	3308      	adds	r3, #8
 8009d6a:	2102      	movs	r1, #2
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f002 fa6d 	bl	800c24c <RCCEx_PLL2_Config>
 8009d72:	4603      	mov	r3, r0
 8009d74:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009d78:	e00f      	b.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009d7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009d7e:	3328      	adds	r3, #40	@ 0x28
 8009d80:	2102      	movs	r1, #2
 8009d82:	4618      	mov	r0, r3
 8009d84:	f002 fb14 	bl	800c3b0 <RCCEx_PLL3_Config>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009d8e:	e004      	b.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009d90:	2301      	movs	r3, #1
 8009d92:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009d96:	e000      	b.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8009d98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d9a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d10a      	bne.n	8009db8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009da2:	4b94      	ldr	r3, [pc, #592]	@ (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009da4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009da6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009daa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009db0:	4a90      	ldr	r2, [pc, #576]	@ (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009db2:	430b      	orrs	r3, r1
 8009db4:	6513      	str	r3, [r2, #80]	@ 0x50
 8009db6:	e003      	b.n	8009dc0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009db8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009dbc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009dc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8009dcc:	f04f 0900 	mov.w	r9, #0
 8009dd0:	ea58 0309 	orrs.w	r3, r8, r9
 8009dd4:	d047      	beq.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8009dd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ddc:	2b04      	cmp	r3, #4
 8009dde:	d82a      	bhi.n	8009e36 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009de0:	a201      	add	r2, pc, #4	@ (adr r2, 8009de8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009de6:	bf00      	nop
 8009de8:	08009dfd 	.word	0x08009dfd
 8009dec:	08009e0b 	.word	0x08009e0b
 8009df0:	08009e21 	.word	0x08009e21
 8009df4:	08009e3f 	.word	0x08009e3f
 8009df8:	08009e3f 	.word	0x08009e3f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dfc:	4b7d      	ldr	r3, [pc, #500]	@ (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e00:	4a7c      	ldr	r2, [pc, #496]	@ (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009e02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e08:	e01a      	b.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e0e:	3308      	adds	r3, #8
 8009e10:	2100      	movs	r1, #0
 8009e12:	4618      	mov	r0, r3
 8009e14:	f002 fa1a 	bl	800c24c <RCCEx_PLL2_Config>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e1e:	e00f      	b.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009e20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e24:	3328      	adds	r3, #40	@ 0x28
 8009e26:	2100      	movs	r1, #0
 8009e28:	4618      	mov	r0, r3
 8009e2a:	f002 fac1 	bl	800c3b0 <RCCEx_PLL3_Config>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009e34:	e004      	b.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e36:	2301      	movs	r3, #1
 8009e38:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009e3c:	e000      	b.n	8009e40 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009e3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e40:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d10a      	bne.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009e48:	4b6a      	ldr	r3, [pc, #424]	@ (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009e4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e4c:	f023 0107 	bic.w	r1, r3, #7
 8009e50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e56:	4a67      	ldr	r2, [pc, #412]	@ (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009e58:	430b      	orrs	r3, r1
 8009e5a:	6513      	str	r3, [r2, #80]	@ 0x50
 8009e5c:	e003      	b.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e5e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009e62:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 8009e66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e6e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8009e72:	f04f 0b00 	mov.w	fp, #0
 8009e76:	ea5a 030b 	orrs.w	r3, sl, fp
 8009e7a:	d054      	beq.n	8009f26 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 8009e7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009e82:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8009e86:	d036      	beq.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 8009e88:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8009e8c:	d82f      	bhi.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009e8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e92:	d032      	beq.n	8009efa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8009e94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e98:	d829      	bhi.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009e9a:	2bc0      	cmp	r3, #192	@ 0xc0
 8009e9c:	d02f      	beq.n	8009efe <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8009e9e:	2bc0      	cmp	r3, #192	@ 0xc0
 8009ea0:	d825      	bhi.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009ea2:	2b80      	cmp	r3, #128	@ 0x80
 8009ea4:	d018      	beq.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8009ea6:	2b80      	cmp	r3, #128	@ 0x80
 8009ea8:	d821      	bhi.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d002      	beq.n	8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8009eae:	2b40      	cmp	r3, #64	@ 0x40
 8009eb0:	d007      	beq.n	8009ec2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 8009eb2:	e01c      	b.n	8009eee <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009eb4:	4b4f      	ldr	r3, [pc, #316]	@ (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eb8:	4a4e      	ldr	r2, [pc, #312]	@ (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009eba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009ebe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8009ec0:	e01e      	b.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009ec2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ec6:	3308      	adds	r3, #8
 8009ec8:	2100      	movs	r1, #0
 8009eca:	4618      	mov	r0, r3
 8009ecc:	f002 f9be 	bl	800c24c <RCCEx_PLL2_Config>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8009ed6:	e013      	b.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ed8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009edc:	3328      	adds	r3, #40	@ 0x28
 8009ede:	2100      	movs	r1, #0
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f002 fa65 	bl	800c3b0 <RCCEx_PLL3_Config>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 8009eec:	e008      	b.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009eee:	2301      	movs	r3, #1
 8009ef0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009ef4:	e004      	b.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8009ef6:	bf00      	nop
 8009ef8:	e002      	b.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8009efa:	bf00      	nop
 8009efc:	e000      	b.n	8009f00 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 8009efe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f00:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d10a      	bne.n	8009f1e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 8009f08:	4b3a      	ldr	r3, [pc, #232]	@ (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009f0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f0c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8009f10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f16:	4a37      	ldr	r2, [pc, #220]	@ (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009f18:	430b      	orrs	r3, r1
 8009f1a:	6513      	str	r3, [r2, #80]	@ 0x50
 8009f1c:	e003      	b.n	8009f26 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f1e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009f22:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 8009f26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f2e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8009f32:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009f36:	2300      	movs	r3, #0
 8009f38:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8009f3c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8009f40:	460b      	mov	r3, r1
 8009f42:	4313      	orrs	r3, r2
 8009f44:	d05c      	beq.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 8009f46:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009f4c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8009f50:	d03b      	beq.n	8009fca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8009f52:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8009f56:	d834      	bhi.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8009f58:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f5c:	d037      	beq.n	8009fce <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 8009f5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009f62:	d82e      	bhi.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8009f64:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009f68:	d033      	beq.n	8009fd2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8009f6a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8009f6e:	d828      	bhi.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8009f70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f74:	d01a      	beq.n	8009fac <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 8009f76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009f7a:	d822      	bhi.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d003      	beq.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0x288>
 8009f80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009f84:	d007      	beq.n	8009f96 <HAL_RCCEx_PeriphCLKConfig+0x296>
 8009f86:	e01c      	b.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f88:	4b1a      	ldr	r3, [pc, #104]	@ (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f8c:	4a19      	ldr	r2, [pc, #100]	@ (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009f8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8009f94:	e01e      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f9a:	3308      	adds	r3, #8
 8009f9c:	2100      	movs	r1, #0
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f002 f954 	bl	800c24c <RCCEx_PLL2_Config>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8009faa:	e013      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009fac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fb0:	3328      	adds	r3, #40	@ 0x28
 8009fb2:	2100      	movs	r1, #0
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f002 f9fb 	bl	800c3b0 <RCCEx_PLL3_Config>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 8009fc0:	e008      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 8009fc8:	e004      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8009fca:	bf00      	nop
 8009fcc:	e002      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8009fce:	bf00      	nop
 8009fd0:	e000      	b.n	8009fd4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 8009fd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fd4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d10d      	bne.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 8009fdc:	4b05      	ldr	r3, [pc, #20]	@ (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009fde:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009fe0:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 8009fe4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fe8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009fea:	4a02      	ldr	r2, [pc, #8]	@ (8009ff4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009fec:	430b      	orrs	r3, r1
 8009fee:	6513      	str	r3, [r2, #80]	@ 0x50
 8009ff0:	e006      	b.n	800a000 <HAL_RCCEx_PeriphCLKConfig+0x300>
 8009ff2:	bf00      	nop
 8009ff4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ff8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 8009ffc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800a000:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a008:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800a00c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a010:	2300      	movs	r3, #0
 800a012:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a016:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800a01a:	460b      	mov	r3, r1
 800a01c:	4313      	orrs	r3, r2
 800a01e:	d03a      	beq.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800a020:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a024:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a026:	2b30      	cmp	r3, #48	@ 0x30
 800a028:	d01f      	beq.n	800a06a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800a02a:	2b30      	cmp	r3, #48	@ 0x30
 800a02c:	d819      	bhi.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800a02e:	2b20      	cmp	r3, #32
 800a030:	d00c      	beq.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800a032:	2b20      	cmp	r3, #32
 800a034:	d815      	bhi.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800a036:	2b00      	cmp	r3, #0
 800a038:	d019      	beq.n	800a06e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800a03a:	2b10      	cmp	r3, #16
 800a03c:	d111      	bne.n	800a062 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a03e:	4bae      	ldr	r3, [pc, #696]	@ (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a042:	4aad      	ldr	r2, [pc, #692]	@ (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a044:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a048:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a04a:	e011      	b.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a04c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a050:	3308      	adds	r3, #8
 800a052:	2102      	movs	r1, #2
 800a054:	4618      	mov	r0, r3
 800a056:	f002 f8f9 	bl	800c24c <RCCEx_PLL2_Config>
 800a05a:	4603      	mov	r3, r0
 800a05c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800a060:	e006      	b.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a062:	2301      	movs	r3, #1
 800a064:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a068:	e002      	b.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800a06a:	bf00      	nop
 800a06c:	e000      	b.n	800a070 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800a06e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a070:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a074:	2b00      	cmp	r3, #0
 800a076:	d10a      	bne.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800a078:	4b9f      	ldr	r3, [pc, #636]	@ (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a07a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a07c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800a080:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a086:	4a9c      	ldr	r2, [pc, #624]	@ (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a088:	430b      	orrs	r3, r1
 800a08a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a08c:	e003      	b.n	800a096 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a08e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a092:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a096:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800a0a2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800a0ac:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a0b0:	460b      	mov	r3, r1
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	d051      	beq.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800a0b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a0bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a0c0:	d035      	beq.n	800a12e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800a0c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a0c6:	d82e      	bhi.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800a0c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a0cc:	d031      	beq.n	800a132 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800a0ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a0d2:	d828      	bhi.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800a0d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a0d8:	d01a      	beq.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800a0da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a0de:	d822      	bhi.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d003      	beq.n	800a0ec <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800a0e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a0e8:	d007      	beq.n	800a0fa <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800a0ea:	e01c      	b.n	800a126 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0ec:	4b82      	ldr	r3, [pc, #520]	@ (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a0ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0f0:	4a81      	ldr	r2, [pc, #516]	@ (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a0f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a0f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a0f8:	e01c      	b.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a0fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0fe:	3308      	adds	r3, #8
 800a100:	2100      	movs	r1, #0
 800a102:	4618      	mov	r0, r3
 800a104:	f002 f8a2 	bl	800c24c <RCCEx_PLL2_Config>
 800a108:	4603      	mov	r3, r0
 800a10a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a10e:	e011      	b.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a110:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a114:	3328      	adds	r3, #40	@ 0x28
 800a116:	2100      	movs	r1, #0
 800a118:	4618      	mov	r0, r3
 800a11a:	f002 f949 	bl	800c3b0 <RCCEx_PLL3_Config>
 800a11e:	4603      	mov	r3, r0
 800a120:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800a124:	e006      	b.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a126:	2301      	movs	r3, #1
 800a128:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a12c:	e002      	b.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800a12e:	bf00      	nop
 800a130:	e000      	b.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800a132:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a134:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d10a      	bne.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a13c:	4b6e      	ldr	r3, [pc, #440]	@ (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a13e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a140:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800a144:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a148:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a14a:	4a6b      	ldr	r2, [pc, #428]	@ (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a14c:	430b      	orrs	r3, r1
 800a14e:	6513      	str	r3, [r2, #80]	@ 0x50
 800a150:	e003      	b.n	800a15a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a152:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a156:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a15a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a162:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800a166:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a16a:	2300      	movs	r3, #0
 800a16c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800a170:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800a174:	460b      	mov	r3, r1
 800a176:	4313      	orrs	r3, r2
 800a178:	d053      	beq.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800a17a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a17e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a180:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a184:	d033      	beq.n	800a1ee <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800a186:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a18a:	d82c      	bhi.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800a18c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a190:	d02f      	beq.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800a192:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a196:	d826      	bhi.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800a198:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a19c:	d02b      	beq.n	800a1f6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800a19e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a1a2:	d820      	bhi.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800a1a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1a8:	d012      	beq.n	800a1d0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800a1aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a1ae:	d81a      	bhi.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d022      	beq.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800a1b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a1b8:	d115      	bne.n	800a1e6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a1ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1be:	3308      	adds	r3, #8
 800a1c0:	2101      	movs	r1, #1
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f002 f842 	bl	800c24c <RCCEx_PLL2_Config>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a1ce:	e015      	b.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a1d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1d4:	3328      	adds	r3, #40	@ 0x28
 800a1d6:	2101      	movs	r1, #1
 800a1d8:	4618      	mov	r0, r3
 800a1da:	f002 f8e9 	bl	800c3b0 <RCCEx_PLL3_Config>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800a1e4:	e00a      	b.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a1ec:	e006      	b.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800a1ee:	bf00      	nop
 800a1f0:	e004      	b.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800a1f2:	bf00      	nop
 800a1f4:	e002      	b.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800a1f6:	bf00      	nop
 800a1f8:	e000      	b.n	800a1fc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800a1fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a1fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a200:	2b00      	cmp	r3, #0
 800a202:	d10a      	bne.n	800a21a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a204:	4b3c      	ldr	r3, [pc, #240]	@ (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a206:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a208:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800a20c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a210:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800a212:	4a39      	ldr	r2, [pc, #228]	@ (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a214:	430b      	orrs	r3, r1
 800a216:	6513      	str	r3, [r2, #80]	@ 0x50
 800a218:	e003      	b.n	800a222 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a21a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a21e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a222:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800a22e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a232:	2300      	movs	r3, #0
 800a234:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a238:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800a23c:	460b      	mov	r3, r1
 800a23e:	4313      	orrs	r3, r2
 800a240:	d060      	beq.n	800a304 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800a242:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a246:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a24a:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800a24e:	d039      	beq.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800a250:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800a254:	d832      	bhi.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800a256:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a25a:	d035      	beq.n	800a2c8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800a25c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a260:	d82c      	bhi.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800a262:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a266:	d031      	beq.n	800a2cc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800a268:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a26c:	d826      	bhi.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800a26e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a272:	d02d      	beq.n	800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800a274:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a278:	d820      	bhi.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800a27a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a27e:	d012      	beq.n	800a2a6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800a280:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a284:	d81a      	bhi.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800a286:	2b00      	cmp	r3, #0
 800a288:	d024      	beq.n	800a2d4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800a28a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a28e:	d115      	bne.n	800a2bc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a290:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a294:	3308      	adds	r3, #8
 800a296:	2101      	movs	r1, #1
 800a298:	4618      	mov	r0, r3
 800a29a:	f001 ffd7 	bl	800c24c <RCCEx_PLL2_Config>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a2a4:	e017      	b.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a2a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2aa:	3328      	adds	r3, #40	@ 0x28
 800a2ac:	2101      	movs	r1, #1
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f002 f87e 	bl	800c3b0 <RCCEx_PLL3_Config>
 800a2b4:	4603      	mov	r3, r0
 800a2b6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800a2ba:	e00c      	b.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800a2bc:	2301      	movs	r3, #1
 800a2be:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a2c2:	e008      	b.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a2c4:	bf00      	nop
 800a2c6:	e006      	b.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a2c8:	bf00      	nop
 800a2ca:	e004      	b.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a2cc:	bf00      	nop
 800a2ce:	e002      	b.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a2d0:	bf00      	nop
 800a2d2:	e000      	b.n	800a2d6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800a2d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2d6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d10e      	bne.n	800a2fc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a2de:	4b06      	ldr	r3, [pc, #24]	@ (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a2e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2e2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a2e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800a2ee:	4a02      	ldr	r2, [pc, #8]	@ (800a2f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800a2f0:	430b      	orrs	r3, r1
 800a2f2:	6593      	str	r3, [r2, #88]	@ 0x58
 800a2f4:	e006      	b.n	800a304 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800a2f6:	bf00      	nop
 800a2f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2fc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a300:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a304:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800a310:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a314:	2300      	movs	r3, #0
 800a316:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800a31a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a31e:	460b      	mov	r3, r1
 800a320:	4313      	orrs	r3, r2
 800a322:	d037      	beq.n	800a394 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800a324:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a328:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a32a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a32e:	d00e      	beq.n	800a34e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800a330:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a334:	d816      	bhi.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800a336:	2b00      	cmp	r3, #0
 800a338:	d018      	beq.n	800a36c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800a33a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a33e:	d111      	bne.n	800a364 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a340:	4bc4      	ldr	r3, [pc, #784]	@ (800a654 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a344:	4ac3      	ldr	r2, [pc, #780]	@ (800a654 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a346:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a34a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a34c:	e00f      	b.n	800a36e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a34e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a352:	3308      	adds	r3, #8
 800a354:	2101      	movs	r1, #1
 800a356:	4618      	mov	r0, r3
 800a358:	f001 ff78 	bl	800c24c <RCCEx_PLL2_Config>
 800a35c:	4603      	mov	r3, r0
 800a35e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800a362:	e004      	b.n	800a36e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a364:	2301      	movs	r3, #1
 800a366:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a36a:	e000      	b.n	800a36e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800a36c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a36e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a372:	2b00      	cmp	r3, #0
 800a374:	d10a      	bne.n	800a38c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a376:	4bb7      	ldr	r3, [pc, #732]	@ (800a654 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a378:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a37a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a37e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a382:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a384:	4ab3      	ldr	r2, [pc, #716]	@ (800a654 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a386:	430b      	orrs	r3, r1
 800a388:	6513      	str	r3, [r2, #80]	@ 0x50
 800a38a:	e003      	b.n	800a394 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a38c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a390:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a394:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800a3a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800a3aa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800a3ae:	460b      	mov	r3, r1
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	d039      	beq.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800a3b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a3ba:	2b03      	cmp	r3, #3
 800a3bc:	d81c      	bhi.n	800a3f8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800a3be:	a201      	add	r2, pc, #4	@ (adr r2, 800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800a3c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3c4:	0800a401 	.word	0x0800a401
 800a3c8:	0800a3d5 	.word	0x0800a3d5
 800a3cc:	0800a3e3 	.word	0x0800a3e3
 800a3d0:	0800a401 	.word	0x0800a401
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a3d4:	4b9f      	ldr	r3, [pc, #636]	@ (800a654 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a3d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3d8:	4a9e      	ldr	r2, [pc, #632]	@ (800a654 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a3da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a3de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a3e0:	e00f      	b.n	800a402 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a3e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3e6:	3308      	adds	r3, #8
 800a3e8:	2102      	movs	r1, #2
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f001 ff2e 	bl	800c24c <RCCEx_PLL2_Config>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800a3f6:	e004      	b.n	800a402 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800a3f8:	2301      	movs	r3, #1
 800a3fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a3fe:	e000      	b.n	800a402 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800a400:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a402:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a406:	2b00      	cmp	r3, #0
 800a408:	d10a      	bne.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a40a:	4b92      	ldr	r3, [pc, #584]	@ (800a654 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a40c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a40e:	f023 0103 	bic.w	r1, r3, #3
 800a412:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a416:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a418:	4a8e      	ldr	r2, [pc, #568]	@ (800a654 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a41a:	430b      	orrs	r3, r1
 800a41c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a41e:	e003      	b.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a420:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a424:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a428:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a430:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800a434:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a438:	2300      	movs	r3, #0
 800a43a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a43e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800a442:	460b      	mov	r3, r1
 800a444:	4313      	orrs	r3, r2
 800a446:	f000 8099 	beq.w	800a57c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a44a:	4b83      	ldr	r3, [pc, #524]	@ (800a658 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	4a82      	ldr	r2, [pc, #520]	@ (800a658 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a450:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a454:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a456:	f7f7 fb75 	bl	8001b44 <HAL_GetTick>
 800a45a:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a45e:	e00b      	b.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a460:	f7f7 fb70 	bl	8001b44 <HAL_GetTick>
 800a464:	4602      	mov	r2, r0
 800a466:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800a46a:	1ad3      	subs	r3, r2, r3
 800a46c:	2b64      	cmp	r3, #100	@ 0x64
 800a46e:	d903      	bls.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800a470:	2303      	movs	r3, #3
 800a472:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a476:	e005      	b.n	800a484 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a478:	4b77      	ldr	r3, [pc, #476]	@ (800a658 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a480:	2b00      	cmp	r3, #0
 800a482:	d0ed      	beq.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800a484:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d173      	bne.n	800a574 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a48c:	4b71      	ldr	r3, [pc, #452]	@ (800a654 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a48e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a490:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a494:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a498:	4053      	eors	r3, r2
 800a49a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d015      	beq.n	800a4ce <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a4a2:	4b6c      	ldr	r3, [pc, #432]	@ (800a654 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a4a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a4aa:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a4ae:	4b69      	ldr	r3, [pc, #420]	@ (800a654 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a4b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4b2:	4a68      	ldr	r2, [pc, #416]	@ (800a654 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a4b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a4b8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a4ba:	4b66      	ldr	r3, [pc, #408]	@ (800a654 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a4bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a4be:	4a65      	ldr	r2, [pc, #404]	@ (800a654 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a4c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a4c4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a4c6:	4a63      	ldr	r2, [pc, #396]	@ (800a654 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a4c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a4cc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a4ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a4d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a4da:	d118      	bne.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4dc:	f7f7 fb32 	bl	8001b44 <HAL_GetTick>
 800a4e0:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a4e4:	e00d      	b.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4e6:	f7f7 fb2d 	bl	8001b44 <HAL_GetTick>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800a4f0:	1ad2      	subs	r2, r2, r3
 800a4f2:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d903      	bls.n	800a502 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800a4fa:	2303      	movs	r3, #3
 800a4fc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 800a500:	e005      	b.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a502:	4b54      	ldr	r3, [pc, #336]	@ (800a654 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a506:	f003 0302 	and.w	r3, r3, #2
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d0eb      	beq.n	800a4e6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800a50e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a512:	2b00      	cmp	r3, #0
 800a514:	d129      	bne.n	800a56a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a516:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a51a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a51e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800a522:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a526:	d10e      	bne.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800a528:	4b4a      	ldr	r3, [pc, #296]	@ (800a654 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a52a:	691b      	ldr	r3, [r3, #16]
 800a52c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800a530:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a534:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a538:	091a      	lsrs	r2, r3, #4
 800a53a:	4b48      	ldr	r3, [pc, #288]	@ (800a65c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800a53c:	4013      	ands	r3, r2
 800a53e:	4a45      	ldr	r2, [pc, #276]	@ (800a654 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a540:	430b      	orrs	r3, r1
 800a542:	6113      	str	r3, [r2, #16]
 800a544:	e005      	b.n	800a552 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800a546:	4b43      	ldr	r3, [pc, #268]	@ (800a654 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a548:	691b      	ldr	r3, [r3, #16]
 800a54a:	4a42      	ldr	r2, [pc, #264]	@ (800a654 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a54c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a550:	6113      	str	r3, [r2, #16]
 800a552:	4b40      	ldr	r3, [pc, #256]	@ (800a654 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a554:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a556:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a55a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800a55e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a562:	4a3c      	ldr	r2, [pc, #240]	@ (800a654 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800a564:	430b      	orrs	r3, r1
 800a566:	6713      	str	r3, [r2, #112]	@ 0x70
 800a568:	e008      	b.n	800a57c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a56a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a56e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800a572:	e003      	b.n	800a57c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a574:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a578:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a57c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a580:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a584:	f002 0301 	and.w	r3, r2, #1
 800a588:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a58c:	2300      	movs	r3, #0
 800a58e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a592:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a596:	460b      	mov	r3, r1
 800a598:	4313      	orrs	r3, r2
 800a59a:	f000 8090 	beq.w	800a6be <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a59e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a5a6:	2b28      	cmp	r3, #40	@ 0x28
 800a5a8:	d870      	bhi.n	800a68c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800a5aa:	a201      	add	r2, pc, #4	@ (adr r2, 800a5b0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800a5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b0:	0800a695 	.word	0x0800a695
 800a5b4:	0800a68d 	.word	0x0800a68d
 800a5b8:	0800a68d 	.word	0x0800a68d
 800a5bc:	0800a68d 	.word	0x0800a68d
 800a5c0:	0800a68d 	.word	0x0800a68d
 800a5c4:	0800a68d 	.word	0x0800a68d
 800a5c8:	0800a68d 	.word	0x0800a68d
 800a5cc:	0800a68d 	.word	0x0800a68d
 800a5d0:	0800a661 	.word	0x0800a661
 800a5d4:	0800a68d 	.word	0x0800a68d
 800a5d8:	0800a68d 	.word	0x0800a68d
 800a5dc:	0800a68d 	.word	0x0800a68d
 800a5e0:	0800a68d 	.word	0x0800a68d
 800a5e4:	0800a68d 	.word	0x0800a68d
 800a5e8:	0800a68d 	.word	0x0800a68d
 800a5ec:	0800a68d 	.word	0x0800a68d
 800a5f0:	0800a677 	.word	0x0800a677
 800a5f4:	0800a68d 	.word	0x0800a68d
 800a5f8:	0800a68d 	.word	0x0800a68d
 800a5fc:	0800a68d 	.word	0x0800a68d
 800a600:	0800a68d 	.word	0x0800a68d
 800a604:	0800a68d 	.word	0x0800a68d
 800a608:	0800a68d 	.word	0x0800a68d
 800a60c:	0800a68d 	.word	0x0800a68d
 800a610:	0800a695 	.word	0x0800a695
 800a614:	0800a68d 	.word	0x0800a68d
 800a618:	0800a68d 	.word	0x0800a68d
 800a61c:	0800a68d 	.word	0x0800a68d
 800a620:	0800a68d 	.word	0x0800a68d
 800a624:	0800a68d 	.word	0x0800a68d
 800a628:	0800a68d 	.word	0x0800a68d
 800a62c:	0800a68d 	.word	0x0800a68d
 800a630:	0800a695 	.word	0x0800a695
 800a634:	0800a68d 	.word	0x0800a68d
 800a638:	0800a68d 	.word	0x0800a68d
 800a63c:	0800a68d 	.word	0x0800a68d
 800a640:	0800a68d 	.word	0x0800a68d
 800a644:	0800a68d 	.word	0x0800a68d
 800a648:	0800a68d 	.word	0x0800a68d
 800a64c:	0800a68d 	.word	0x0800a68d
 800a650:	0800a695 	.word	0x0800a695
 800a654:	58024400 	.word	0x58024400
 800a658:	58024800 	.word	0x58024800
 800a65c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a660:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a664:	3308      	adds	r3, #8
 800a666:	2101      	movs	r1, #1
 800a668:	4618      	mov	r0, r3
 800a66a:	f001 fdef 	bl	800c24c <RCCEx_PLL2_Config>
 800a66e:	4603      	mov	r3, r0
 800a670:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a674:	e00f      	b.n	800a696 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a676:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a67a:	3328      	adds	r3, #40	@ 0x28
 800a67c:	2101      	movs	r1, #1
 800a67e:	4618      	mov	r0, r3
 800a680:	f001 fe96 	bl	800c3b0 <RCCEx_PLL3_Config>
 800a684:	4603      	mov	r3, r0
 800a686:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a68a:	e004      	b.n	800a696 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a68c:	2301      	movs	r3, #1
 800a68e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a692:	e000      	b.n	800a696 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800a694:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a696:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d10b      	bne.n	800a6b6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a69e:	4bc0      	ldr	r3, [pc, #768]	@ (800a9a0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a6a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6a2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800a6a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800a6ae:	4abc      	ldr	r2, [pc, #752]	@ (800a9a0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a6b0:	430b      	orrs	r3, r1
 800a6b2:	6553      	str	r3, [r2, #84]	@ 0x54
 800a6b4:	e003      	b.n	800a6be <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a6b6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a6ba:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a6be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c6:	f002 0302 	and.w	r3, r2, #2
 800a6ca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800a6d4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800a6d8:	460b      	mov	r3, r1
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	d043      	beq.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a6de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a6e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a6e6:	2b05      	cmp	r3, #5
 800a6e8:	d824      	bhi.n	800a734 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800a6ea:	a201      	add	r2, pc, #4	@ (adr r2, 800a6f0 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800a6ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6f0:	0800a73d 	.word	0x0800a73d
 800a6f4:	0800a709 	.word	0x0800a709
 800a6f8:	0800a71f 	.word	0x0800a71f
 800a6fc:	0800a73d 	.word	0x0800a73d
 800a700:	0800a73d 	.word	0x0800a73d
 800a704:	0800a73d 	.word	0x0800a73d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a708:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a70c:	3308      	adds	r3, #8
 800a70e:	2101      	movs	r1, #1
 800a710:	4618      	mov	r0, r3
 800a712:	f001 fd9b 	bl	800c24c <RCCEx_PLL2_Config>
 800a716:	4603      	mov	r3, r0
 800a718:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a71c:	e00f      	b.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a71e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a722:	3328      	adds	r3, #40	@ 0x28
 800a724:	2101      	movs	r1, #1
 800a726:	4618      	mov	r0, r3
 800a728:	f001 fe42 	bl	800c3b0 <RCCEx_PLL3_Config>
 800a72c:	4603      	mov	r3, r0
 800a72e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a732:	e004      	b.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a734:	2301      	movs	r3, #1
 800a736:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a73a:	e000      	b.n	800a73e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800a73c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a73e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a742:	2b00      	cmp	r3, #0
 800a744:	d10b      	bne.n	800a75e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a746:	4b96      	ldr	r3, [pc, #600]	@ (800a9a0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a74a:	f023 0107 	bic.w	r1, r3, #7
 800a74e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a752:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a756:	4a92      	ldr	r2, [pc, #584]	@ (800a9a0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a758:	430b      	orrs	r3, r1
 800a75a:	6553      	str	r3, [r2, #84]	@ 0x54
 800a75c:	e003      	b.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a75e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a762:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a766:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a76e:	f002 0304 	and.w	r3, r2, #4
 800a772:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a776:	2300      	movs	r3, #0
 800a778:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a77c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800a780:	460b      	mov	r3, r1
 800a782:	4313      	orrs	r3, r2
 800a784:	d043      	beq.n	800a80e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a786:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a78a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a78e:	2b05      	cmp	r3, #5
 800a790:	d824      	bhi.n	800a7dc <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800a792:	a201      	add	r2, pc, #4	@ (adr r2, 800a798 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800a794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a798:	0800a7e5 	.word	0x0800a7e5
 800a79c:	0800a7b1 	.word	0x0800a7b1
 800a7a0:	0800a7c7 	.word	0x0800a7c7
 800a7a4:	0800a7e5 	.word	0x0800a7e5
 800a7a8:	0800a7e5 	.word	0x0800a7e5
 800a7ac:	0800a7e5 	.word	0x0800a7e5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a7b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7b4:	3308      	adds	r3, #8
 800a7b6:	2101      	movs	r1, #1
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f001 fd47 	bl	800c24c <RCCEx_PLL2_Config>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a7c4:	e00f      	b.n	800a7e6 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a7c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7ca:	3328      	adds	r3, #40	@ 0x28
 800a7cc:	2101      	movs	r1, #1
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f001 fdee 	bl	800c3b0 <RCCEx_PLL3_Config>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a7da:	e004      	b.n	800a7e6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7dc:	2301      	movs	r3, #1
 800a7de:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a7e2:	e000      	b.n	800a7e6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800a7e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7e6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d10b      	bne.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a7ee:	4b6c      	ldr	r3, [pc, #432]	@ (800a9a0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a7f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7f2:	f023 0107 	bic.w	r1, r3, #7
 800a7f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a7fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800a7fe:	4a68      	ldr	r2, [pc, #416]	@ (800a9a0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a800:	430b      	orrs	r3, r1
 800a802:	6593      	str	r3, [r2, #88]	@ 0x58
 800a804:	e003      	b.n	800a80e <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a806:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a80a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a80e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a816:	f002 0320 	and.w	r3, r2, #32
 800a81a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a81e:	2300      	movs	r3, #0
 800a820:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a824:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a828:	460b      	mov	r3, r1
 800a82a:	4313      	orrs	r3, r2
 800a82c:	d055      	beq.n	800a8da <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a82e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a832:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a836:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a83a:	d033      	beq.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800a83c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a840:	d82c      	bhi.n	800a89c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800a842:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a846:	d02f      	beq.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800a848:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a84c:	d826      	bhi.n	800a89c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800a84e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a852:	d02b      	beq.n	800a8ac <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800a854:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a858:	d820      	bhi.n	800a89c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800a85a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a85e:	d012      	beq.n	800a886 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800a860:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a864:	d81a      	bhi.n	800a89c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800a866:	2b00      	cmp	r3, #0
 800a868:	d022      	beq.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800a86a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a86e:	d115      	bne.n	800a89c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a870:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a874:	3308      	adds	r3, #8
 800a876:	2100      	movs	r1, #0
 800a878:	4618      	mov	r0, r3
 800a87a:	f001 fce7 	bl	800c24c <RCCEx_PLL2_Config>
 800a87e:	4603      	mov	r3, r0
 800a880:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a884:	e015      	b.n	800a8b2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a886:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a88a:	3328      	adds	r3, #40	@ 0x28
 800a88c:	2102      	movs	r1, #2
 800a88e:	4618      	mov	r0, r3
 800a890:	f001 fd8e 	bl	800c3b0 <RCCEx_PLL3_Config>
 800a894:	4603      	mov	r3, r0
 800a896:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a89a:	e00a      	b.n	800a8b2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a89c:	2301      	movs	r3, #1
 800a89e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a8a2:	e006      	b.n	800a8b2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800a8a4:	bf00      	nop
 800a8a6:	e004      	b.n	800a8b2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800a8a8:	bf00      	nop
 800a8aa:	e002      	b.n	800a8b2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800a8ac:	bf00      	nop
 800a8ae:	e000      	b.n	800a8b2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800a8b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a8b2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d10b      	bne.n	800a8d2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a8ba:	4b39      	ldr	r3, [pc, #228]	@ (800a9a0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a8bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8be:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800a8c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800a8ca:	4a35      	ldr	r2, [pc, #212]	@ (800a9a0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a8cc:	430b      	orrs	r3, r1
 800a8ce:	6553      	str	r3, [r2, #84]	@ 0x54
 800a8d0:	e003      	b.n	800a8da <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8d2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a8d6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a8da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800a8e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800a8f0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	4313      	orrs	r3, r2
 800a8f8:	d058      	beq.n	800a9ac <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a8fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a8fe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a902:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a906:	d033      	beq.n	800a970 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800a908:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800a90c:	d82c      	bhi.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800a90e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a912:	d02f      	beq.n	800a974 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800a914:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a918:	d826      	bhi.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800a91a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a91e:	d02b      	beq.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800a920:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a924:	d820      	bhi.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800a926:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a92a:	d012      	beq.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800a92c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a930:	d81a      	bhi.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800a932:	2b00      	cmp	r3, #0
 800a934:	d022      	beq.n	800a97c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800a936:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a93a:	d115      	bne.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a93c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a940:	3308      	adds	r3, #8
 800a942:	2100      	movs	r1, #0
 800a944:	4618      	mov	r0, r3
 800a946:	f001 fc81 	bl	800c24c <RCCEx_PLL2_Config>
 800a94a:	4603      	mov	r3, r0
 800a94c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a950:	e015      	b.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a952:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a956:	3328      	adds	r3, #40	@ 0x28
 800a958:	2102      	movs	r1, #2
 800a95a:	4618      	mov	r0, r3
 800a95c:	f001 fd28 	bl	800c3b0 <RCCEx_PLL3_Config>
 800a960:	4603      	mov	r3, r0
 800a962:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a966:	e00a      	b.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a968:	2301      	movs	r3, #1
 800a96a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800a96e:	e006      	b.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800a970:	bf00      	nop
 800a972:	e004      	b.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800a974:	bf00      	nop
 800a976:	e002      	b.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800a978:	bf00      	nop
 800a97a:	e000      	b.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800a97c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a97e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a982:	2b00      	cmp	r3, #0
 800a984:	d10e      	bne.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a986:	4b06      	ldr	r3, [pc, #24]	@ (800a9a0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a98a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800a98e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a992:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800a996:	4a02      	ldr	r2, [pc, #8]	@ (800a9a0 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800a998:	430b      	orrs	r3, r1
 800a99a:	6593      	str	r3, [r2, #88]	@ 0x58
 800a99c:	e006      	b.n	800a9ac <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800a99e:	bf00      	nop
 800a9a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9a4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800a9a8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a9ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800a9b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a9bc:	2300      	movs	r3, #0
 800a9be:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a9c2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800a9c6:	460b      	mov	r3, r1
 800a9c8:	4313      	orrs	r3, r2
 800a9ca:	d055      	beq.n	800aa78 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a9cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a9d0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800a9d4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a9d8:	d033      	beq.n	800aa42 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800a9da:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800a9de:	d82c      	bhi.n	800aa3a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800a9e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a9e4:	d02f      	beq.n	800aa46 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800a9e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a9ea:	d826      	bhi.n	800aa3a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800a9ec:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a9f0:	d02b      	beq.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800a9f2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a9f6:	d820      	bhi.n	800aa3a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800a9f8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a9fc:	d012      	beq.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800a9fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800aa02:	d81a      	bhi.n	800aa3a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d022      	beq.n	800aa4e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800aa08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800aa0c:	d115      	bne.n	800aa3a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa12:	3308      	adds	r3, #8
 800aa14:	2100      	movs	r1, #0
 800aa16:	4618      	mov	r0, r3
 800aa18:	f001 fc18 	bl	800c24c <RCCEx_PLL2_Config>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800aa22:	e015      	b.n	800aa50 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa28:	3328      	adds	r3, #40	@ 0x28
 800aa2a:	2102      	movs	r1, #2
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f001 fcbf 	bl	800c3b0 <RCCEx_PLL3_Config>
 800aa32:	4603      	mov	r3, r0
 800aa34:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800aa38:	e00a      	b.n	800aa50 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800aa40:	e006      	b.n	800aa50 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800aa42:	bf00      	nop
 800aa44:	e004      	b.n	800aa50 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800aa46:	bf00      	nop
 800aa48:	e002      	b.n	800aa50 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800aa4a:	bf00      	nop
 800aa4c:	e000      	b.n	800aa50 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800aa4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa50:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d10b      	bne.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800aa58:	4ba1      	ldr	r3, [pc, #644]	@ (800ace0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800aa5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa5c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800aa60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa64:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800aa68:	4a9d      	ldr	r2, [pc, #628]	@ (800ace0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800aa6a:	430b      	orrs	r3, r1
 800aa6c:	6593      	str	r3, [r2, #88]	@ 0x58
 800aa6e:	e003      	b.n	800aa78 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa70:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800aa74:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800aa78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa80:	f002 0308 	and.w	r3, r2, #8
 800aa84:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800aa88:	2300      	movs	r3, #0
 800aa8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800aa8e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800aa92:	460b      	mov	r3, r1
 800aa94:	4313      	orrs	r3, r2
 800aa96:	d01e      	beq.n	800aad6 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800aa98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aa9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aaa0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800aaa4:	d10c      	bne.n	800aac0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800aaa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aaaa:	3328      	adds	r3, #40	@ 0x28
 800aaac:	2102      	movs	r1, #2
 800aaae:	4618      	mov	r0, r3
 800aab0:	f001 fc7e 	bl	800c3b0 <RCCEx_PLL3_Config>
 800aab4:	4603      	mov	r3, r0
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d002      	beq.n	800aac0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800aaba:	2301      	movs	r3, #1
 800aabc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800aac0:	4b87      	ldr	r3, [pc, #540]	@ (800ace0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800aac2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aac4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800aac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aacc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800aad0:	4a83      	ldr	r2, [pc, #524]	@ (800ace0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800aad2:	430b      	orrs	r3, r1
 800aad4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800aad6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aade:	f002 0310 	and.w	r3, r2, #16
 800aae2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800aae6:	2300      	movs	r3, #0
 800aae8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800aaec:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800aaf0:	460b      	mov	r3, r1
 800aaf2:	4313      	orrs	r3, r2
 800aaf4:	d01e      	beq.n	800ab34 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800aaf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aafa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800aafe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab02:	d10c      	bne.n	800ab1e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ab04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab08:	3328      	adds	r3, #40	@ 0x28
 800ab0a:	2102      	movs	r1, #2
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	f001 fc4f 	bl	800c3b0 <RCCEx_PLL3_Config>
 800ab12:	4603      	mov	r3, r0
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d002      	beq.n	800ab1e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ab1e:	4b70      	ldr	r3, [pc, #448]	@ (800ace0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ab20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ab22:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ab26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ab2e:	4a6c      	ldr	r2, [pc, #432]	@ (800ace0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ab30:	430b      	orrs	r3, r1
 800ab32:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ab34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab3c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800ab40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800ab44:	2300      	movs	r3, #0
 800ab46:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800ab4a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800ab4e:	460b      	mov	r3, r1
 800ab50:	4313      	orrs	r3, r2
 800ab52:	d03e      	beq.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800ab54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab58:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ab5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab60:	d022      	beq.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800ab62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ab66:	d81b      	bhi.n	800aba0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d003      	beq.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800ab6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab70:	d00b      	beq.n	800ab8a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800ab72:	e015      	b.n	800aba0 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab74:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab78:	3308      	adds	r3, #8
 800ab7a:	2100      	movs	r1, #0
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f001 fb65 	bl	800c24c <RCCEx_PLL2_Config>
 800ab82:	4603      	mov	r3, r0
 800ab84:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ab88:	e00f      	b.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ab8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ab8e:	3328      	adds	r3, #40	@ 0x28
 800ab90:	2102      	movs	r1, #2
 800ab92:	4618      	mov	r0, r3
 800ab94:	f001 fc0c 	bl	800c3b0 <RCCEx_PLL3_Config>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ab9e:	e004      	b.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aba0:	2301      	movs	r3, #1
 800aba2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800aba6:	e000      	b.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800aba8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abaa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d10b      	bne.n	800abca <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800abb2:	4b4b      	ldr	r3, [pc, #300]	@ (800ace0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800abb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800abb6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800abba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abbe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800abc2:	4a47      	ldr	r2, [pc, #284]	@ (800ace0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800abc4:	430b      	orrs	r3, r1
 800abc6:	6593      	str	r3, [r2, #88]	@ 0x58
 800abc8:	e003      	b.n	800abd2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abca:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800abce:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800abd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abda:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800abde:	67bb      	str	r3, [r7, #120]	@ 0x78
 800abe0:	2300      	movs	r3, #0
 800abe2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800abe4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800abe8:	460b      	mov	r3, r1
 800abea:	4313      	orrs	r3, r2
 800abec:	d03b      	beq.n	800ac66 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800abee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800abf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800abf6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800abfa:	d01f      	beq.n	800ac3c <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800abfc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ac00:	d818      	bhi.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800ac02:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ac06:	d003      	beq.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800ac08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ac0c:	d007      	beq.n	800ac1e <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800ac0e:	e011      	b.n	800ac34 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac10:	4b33      	ldr	r3, [pc, #204]	@ (800ace0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ac12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac14:	4a32      	ldr	r2, [pc, #200]	@ (800ace0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ac16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ac1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ac1c:	e00f      	b.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ac1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac22:	3328      	adds	r3, #40	@ 0x28
 800ac24:	2101      	movs	r1, #1
 800ac26:	4618      	mov	r0, r3
 800ac28:	f001 fbc2 	bl	800c3b0 <RCCEx_PLL3_Config>
 800ac2c:	4603      	mov	r3, r0
 800ac2e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800ac32:	e004      	b.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac34:	2301      	movs	r3, #1
 800ac36:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ac3a:	e000      	b.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800ac3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac3e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d10b      	bne.n	800ac5e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ac46:	4b26      	ldr	r3, [pc, #152]	@ (800ace0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ac48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac4a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ac4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ac56:	4a22      	ldr	r2, [pc, #136]	@ (800ace0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ac58:	430b      	orrs	r3, r1
 800ac5a:	6553      	str	r3, [r2, #84]	@ 0x54
 800ac5c:	e003      	b.n	800ac66 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac5e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ac62:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800ac66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac6e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800ac72:	673b      	str	r3, [r7, #112]	@ 0x70
 800ac74:	2300      	movs	r3, #0
 800ac76:	677b      	str	r3, [r7, #116]	@ 0x74
 800ac78:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800ac7c:	460b      	mov	r3, r1
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	d034      	beq.n	800acec <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800ac82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ac86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d003      	beq.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800ac8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ac90:	d007      	beq.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800ac92:	e011      	b.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac94:	4b12      	ldr	r3, [pc, #72]	@ (800ace0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ac96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac98:	4a11      	ldr	r2, [pc, #68]	@ (800ace0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800ac9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ac9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800aca0:	e00e      	b.n	800acc0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aca2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aca6:	3308      	adds	r3, #8
 800aca8:	2102      	movs	r1, #2
 800acaa:	4618      	mov	r0, r3
 800acac:	f001 face 	bl	800c24c <RCCEx_PLL2_Config>
 800acb0:	4603      	mov	r3, r0
 800acb2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800acb6:	e003      	b.n	800acc0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800acb8:	2301      	movs	r3, #1
 800acba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800acbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800acc0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d10d      	bne.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800acc8:	4b05      	ldr	r3, [pc, #20]	@ (800ace0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800acca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800accc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800acd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800acd6:	4a02      	ldr	r2, [pc, #8]	@ (800ace0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800acd8:	430b      	orrs	r3, r1
 800acda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800acdc:	e006      	b.n	800acec <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800acde:	bf00      	nop
 800ace0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ace4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ace8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800acec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800acf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acf4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800acf8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800acfa:	2300      	movs	r3, #0
 800acfc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800acfe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800ad02:	460b      	mov	r3, r1
 800ad04:	4313      	orrs	r3, r2
 800ad06:	d00c      	beq.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ad08:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad0c:	3328      	adds	r3, #40	@ 0x28
 800ad0e:	2102      	movs	r1, #2
 800ad10:	4618      	mov	r0, r3
 800ad12:	f001 fb4d 	bl	800c3b0 <RCCEx_PLL3_Config>
 800ad16:	4603      	mov	r3, r0
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d002      	beq.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ad22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad2a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800ad2e:	663b      	str	r3, [r7, #96]	@ 0x60
 800ad30:	2300      	movs	r3, #0
 800ad32:	667b      	str	r3, [r7, #100]	@ 0x64
 800ad34:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800ad38:	460b      	mov	r3, r1
 800ad3a:	4313      	orrs	r3, r2
 800ad3c:	d038      	beq.n	800adb0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ad3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ad46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad4a:	d018      	beq.n	800ad7e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800ad4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad50:	d811      	bhi.n	800ad76 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800ad52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad56:	d014      	beq.n	800ad82 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800ad58:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad5c:	d80b      	bhi.n	800ad76 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d011      	beq.n	800ad86 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800ad62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad66:	d106      	bne.n	800ad76 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad68:	4bc3      	ldr	r3, [pc, #780]	@ (800b078 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ad6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad6c:	4ac2      	ldr	r2, [pc, #776]	@ (800b078 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ad6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ad72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800ad74:	e008      	b.n	800ad88 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad76:	2301      	movs	r3, #1
 800ad78:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ad7c:	e004      	b.n	800ad88 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800ad7e:	bf00      	nop
 800ad80:	e002      	b.n	800ad88 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800ad82:	bf00      	nop
 800ad84:	e000      	b.n	800ad88 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800ad86:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad88:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d10b      	bne.n	800ada8 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ad90:	4bb9      	ldr	r3, [pc, #740]	@ (800b078 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ad92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad94:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ad98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ad9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ada0:	4ab5      	ldr	r2, [pc, #724]	@ (800b078 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ada2:	430b      	orrs	r3, r1
 800ada4:	6553      	str	r3, [r2, #84]	@ 0x54
 800ada6:	e003      	b.n	800adb0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ada8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800adac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800adb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800adb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800adbc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800adbe:	2300      	movs	r3, #0
 800adc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800adc2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800adc6:	460b      	mov	r3, r1
 800adc8:	4313      	orrs	r3, r2
 800adca:	d009      	beq.n	800ade0 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800adcc:	4baa      	ldr	r3, [pc, #680]	@ (800b078 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800adce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800add0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800add4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800add8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800adda:	4aa7      	ldr	r2, [pc, #668]	@ (800b078 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800addc:	430b      	orrs	r3, r1
 800adde:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ade0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ade4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800adec:	653b      	str	r3, [r7, #80]	@ 0x50
 800adee:	2300      	movs	r3, #0
 800adf0:	657b      	str	r3, [r7, #84]	@ 0x54
 800adf2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800adf6:	460b      	mov	r3, r1
 800adf8:	4313      	orrs	r3, r2
 800adfa:	d009      	beq.n	800ae10 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800adfc:	4b9e      	ldr	r3, [pc, #632]	@ (800b078 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800adfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ae00:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800ae04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae0a:	4a9b      	ldr	r2, [pc, #620]	@ (800b078 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ae0c:	430b      	orrs	r3, r1
 800ae0e:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800ae10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae18:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800ae1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae1e:	2300      	movs	r3, #0
 800ae20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae22:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800ae26:	460b      	mov	r3, r1
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	d009      	beq.n	800ae40 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800ae2c:	4b92      	ldr	r3, [pc, #584]	@ (800b078 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ae2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae30:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800ae34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae3a:	4a8f      	ldr	r2, [pc, #572]	@ (800b078 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ae3c:	430b      	orrs	r3, r1
 800ae3e:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ae40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae48:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800ae4c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ae4e:	2300      	movs	r3, #0
 800ae50:	647b      	str	r3, [r7, #68]	@ 0x44
 800ae52:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800ae56:	460b      	mov	r3, r1
 800ae58:	4313      	orrs	r3, r2
 800ae5a:	d00e      	beq.n	800ae7a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ae5c:	4b86      	ldr	r3, [pc, #536]	@ (800b078 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ae5e:	691b      	ldr	r3, [r3, #16]
 800ae60:	4a85      	ldr	r2, [pc, #532]	@ (800b078 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ae62:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ae66:	6113      	str	r3, [r2, #16]
 800ae68:	4b83      	ldr	r3, [pc, #524]	@ (800b078 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ae6a:	6919      	ldr	r1, [r3, #16]
 800ae6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae70:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800ae74:	4a80      	ldr	r2, [pc, #512]	@ (800b078 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ae76:	430b      	orrs	r3, r1
 800ae78:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ae7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ae7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae82:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800ae86:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ae88:	2300      	movs	r3, #0
 800ae8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ae8c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800ae90:	460b      	mov	r3, r1
 800ae92:	4313      	orrs	r3, r2
 800ae94:	d009      	beq.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ae96:	4b78      	ldr	r3, [pc, #480]	@ (800b078 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ae98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ae9a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800ae9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aea4:	4a74      	ldr	r2, [pc, #464]	@ (800b078 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800aea6:	430b      	orrs	r3, r1
 800aea8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800aeaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aeae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800aeb6:	633b      	str	r3, [r7, #48]	@ 0x30
 800aeb8:	2300      	movs	r3, #0
 800aeba:	637b      	str	r3, [r7, #52]	@ 0x34
 800aebc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800aec0:	460b      	mov	r3, r1
 800aec2:	4313      	orrs	r3, r2
 800aec4:	d00a      	beq.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800aec6:	4b6c      	ldr	r3, [pc, #432]	@ (800b078 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800aec8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aeca:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800aece:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800aed6:	4a68      	ldr	r2, [pc, #416]	@ (800b078 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800aed8:	430b      	orrs	r3, r1
 800aeda:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800aedc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee4:	2100      	movs	r1, #0
 800aee6:	62b9      	str	r1, [r7, #40]	@ 0x28
 800aee8:	f003 0301 	and.w	r3, r3, #1
 800aeec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aeee:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800aef2:	460b      	mov	r3, r1
 800aef4:	4313      	orrs	r3, r2
 800aef6:	d011      	beq.n	800af1c <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aef8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800aefc:	3308      	adds	r3, #8
 800aefe:	2100      	movs	r1, #0
 800af00:	4618      	mov	r0, r3
 800af02:	f001 f9a3 	bl	800c24c <RCCEx_PLL2_Config>
 800af06:	4603      	mov	r3, r0
 800af08:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800af0c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800af10:	2b00      	cmp	r3, #0
 800af12:	d003      	beq.n	800af1c <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af14:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800af18:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800af1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af24:	2100      	movs	r1, #0
 800af26:	6239      	str	r1, [r7, #32]
 800af28:	f003 0302 	and.w	r3, r3, #2
 800af2c:	627b      	str	r3, [r7, #36]	@ 0x24
 800af2e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800af32:	460b      	mov	r3, r1
 800af34:	4313      	orrs	r3, r2
 800af36:	d011      	beq.n	800af5c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800af38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af3c:	3308      	adds	r3, #8
 800af3e:	2101      	movs	r1, #1
 800af40:	4618      	mov	r0, r3
 800af42:	f001 f983 	bl	800c24c <RCCEx_PLL2_Config>
 800af46:	4603      	mov	r3, r0
 800af48:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800af4c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800af50:	2b00      	cmp	r3, #0
 800af52:	d003      	beq.n	800af5c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af54:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800af58:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800af5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af64:	2100      	movs	r1, #0
 800af66:	61b9      	str	r1, [r7, #24]
 800af68:	f003 0304 	and.w	r3, r3, #4
 800af6c:	61fb      	str	r3, [r7, #28]
 800af6e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800af72:	460b      	mov	r3, r1
 800af74:	4313      	orrs	r3, r2
 800af76:	d011      	beq.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800af78:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800af7c:	3308      	adds	r3, #8
 800af7e:	2102      	movs	r1, #2
 800af80:	4618      	mov	r0, r3
 800af82:	f001 f963 	bl	800c24c <RCCEx_PLL2_Config>
 800af86:	4603      	mov	r3, r0
 800af88:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800af8c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800af90:	2b00      	cmp	r3, #0
 800af92:	d003      	beq.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af94:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800af98:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800af9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa4:	2100      	movs	r1, #0
 800afa6:	6139      	str	r1, [r7, #16]
 800afa8:	f003 0308 	and.w	r3, r3, #8
 800afac:	617b      	str	r3, [r7, #20]
 800afae:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800afb2:	460b      	mov	r3, r1
 800afb4:	4313      	orrs	r3, r2
 800afb6:	d011      	beq.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800afb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afbc:	3328      	adds	r3, #40	@ 0x28
 800afbe:	2100      	movs	r1, #0
 800afc0:	4618      	mov	r0, r3
 800afc2:	f001 f9f5 	bl	800c3b0 <RCCEx_PLL3_Config>
 800afc6:	4603      	mov	r3, r0
 800afc8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800afcc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d003      	beq.n	800afdc <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afd4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800afd8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800afdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800afe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe4:	2100      	movs	r1, #0
 800afe6:	60b9      	str	r1, [r7, #8]
 800afe8:	f003 0310 	and.w	r3, r3, #16
 800afec:	60fb      	str	r3, [r7, #12]
 800afee:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800aff2:	460b      	mov	r3, r1
 800aff4:	4313      	orrs	r3, r2
 800aff6:	d011      	beq.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aff8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800affc:	3328      	adds	r3, #40	@ 0x28
 800affe:	2101      	movs	r1, #1
 800b000:	4618      	mov	r0, r3
 800b002:	f001 f9d5 	bl	800c3b0 <RCCEx_PLL3_Config>
 800b006:	4603      	mov	r3, r0
 800b008:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800b00c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b010:	2b00      	cmp	r3, #0
 800b012:	d003      	beq.n	800b01c <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b014:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b018:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b01c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b024:	2100      	movs	r1, #0
 800b026:	6039      	str	r1, [r7, #0]
 800b028:	f003 0320 	and.w	r3, r3, #32
 800b02c:	607b      	str	r3, [r7, #4]
 800b02e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b032:	460b      	mov	r3, r1
 800b034:	4313      	orrs	r3, r2
 800b036:	d011      	beq.n	800b05c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b038:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b03c:	3328      	adds	r3, #40	@ 0x28
 800b03e:	2102      	movs	r1, #2
 800b040:	4618      	mov	r0, r3
 800b042:	f001 f9b5 	bl	800c3b0 <RCCEx_PLL3_Config>
 800b046:	4603      	mov	r3, r0
 800b048:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800b04c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b050:	2b00      	cmp	r3, #0
 800b052:	d003      	beq.n	800b05c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b054:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b058:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800b05c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800b060:	2b00      	cmp	r3, #0
 800b062:	d101      	bne.n	800b068 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800b064:	2300      	movs	r3, #0
 800b066:	e000      	b.n	800b06a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800b068:	2301      	movs	r3, #1
}
 800b06a:	4618      	mov	r0, r3
 800b06c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800b070:	46bd      	mov	sp, r7
 800b072:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b076:	bf00      	nop
 800b078:	58024400 	.word	0x58024400

0800b07c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b090      	sub	sp, #64	@ 0x40
 800b080:	af00      	add	r7, sp, #0
 800b082:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b086:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b08a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800b08e:	430b      	orrs	r3, r1
 800b090:	f040 8094 	bne.w	800b1bc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800b094:	4b97      	ldr	r3, [pc, #604]	@ (800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b096:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b098:	f003 0307 	and.w	r3, r3, #7
 800b09c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b09e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0a0:	2b04      	cmp	r3, #4
 800b0a2:	f200 8087 	bhi.w	800b1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800b0a6:	a201      	add	r2, pc, #4	@ (adr r2, 800b0ac <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800b0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0ac:	0800b0c1 	.word	0x0800b0c1
 800b0b0:	0800b0e9 	.word	0x0800b0e9
 800b0b4:	0800b111 	.word	0x0800b111
 800b0b8:	0800b1ad 	.word	0x0800b1ad
 800b0bc:	0800b139 	.word	0x0800b139
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b0c0:	4b8c      	ldr	r3, [pc, #560]	@ (800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b0c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b0cc:	d108      	bne.n	800b0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b0ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f000 ff68 	bl	800bfa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b0d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0dc:	f000 bc97 	b.w	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b0e4:	f000 bc93 	b.w	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b0e8:	4b82      	ldr	r3, [pc, #520]	@ (800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b0f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b0f4:	d108      	bne.n	800b108 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0f6:	f107 0318 	add.w	r3, r7, #24
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f000 fcac 	bl	800ba58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b100:	69bb      	ldr	r3, [r7, #24]
 800b102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b104:	f000 bc83 	b.w	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b108:	2300      	movs	r3, #0
 800b10a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b10c:	f000 bc7f 	b.w	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b110:	4b78      	ldr	r3, [pc, #480]	@ (800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b118:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b11c:	d108      	bne.n	800b130 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b11e:	f107 030c 	add.w	r3, r7, #12
 800b122:	4618      	mov	r0, r3
 800b124:	f000 fdec 	bl	800bd00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b12c:	f000 bc6f 	b.w	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b130:	2300      	movs	r3, #0
 800b132:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b134:	f000 bc6b 	b.w	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b138:	4b6e      	ldr	r3, [pc, #440]	@ (800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b13a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b13c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b140:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b142:	4b6c      	ldr	r3, [pc, #432]	@ (800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f003 0304 	and.w	r3, r3, #4
 800b14a:	2b04      	cmp	r3, #4
 800b14c:	d10c      	bne.n	800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800b14e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b150:	2b00      	cmp	r3, #0
 800b152:	d109      	bne.n	800b168 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b154:	4b67      	ldr	r3, [pc, #412]	@ (800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	08db      	lsrs	r3, r3, #3
 800b15a:	f003 0303 	and.w	r3, r3, #3
 800b15e:	4a66      	ldr	r2, [pc, #408]	@ (800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800b160:	fa22 f303 	lsr.w	r3, r2, r3
 800b164:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b166:	e01f      	b.n	800b1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b168:	4b62      	ldr	r3, [pc, #392]	@ (800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b170:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b174:	d106      	bne.n	800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800b176:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b178:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b17c:	d102      	bne.n	800b184 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b17e:	4b5f      	ldr	r3, [pc, #380]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800b180:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b182:	e011      	b.n	800b1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b184:	4b5b      	ldr	r3, [pc, #364]	@ (800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b18c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b190:	d106      	bne.n	800b1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800b192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b194:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b198:	d102      	bne.n	800b1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b19a:	4b59      	ldr	r3, [pc, #356]	@ (800b300 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800b19c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b19e:	e003      	b.n	800b1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b1a4:	f000 bc33 	b.w	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800b1a8:	f000 bc31 	b.w	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b1ac:	4b55      	ldr	r3, [pc, #340]	@ (800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b1ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1b0:	f000 bc2d 	b.w	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b1b8:	f000 bc29 	b.w	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 800b1bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1c0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800b1c4:	430b      	orrs	r3, r1
 800b1c6:	f040 809f 	bne.w	800b308 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 800b1ca:	4b4a      	ldr	r3, [pc, #296]	@ (800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b1cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b1ce:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800b1d2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b1d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b1da:	d04d      	beq.n	800b278 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800b1dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b1e2:	f200 8084 	bhi.w	800b2ee <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800b1e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1e8:	2bc0      	cmp	r3, #192	@ 0xc0
 800b1ea:	d07d      	beq.n	800b2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 800b1ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1ee:	2bc0      	cmp	r3, #192	@ 0xc0
 800b1f0:	d87d      	bhi.n	800b2ee <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800b1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1f4:	2b80      	cmp	r3, #128	@ 0x80
 800b1f6:	d02d      	beq.n	800b254 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 800b1f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1fa:	2b80      	cmp	r3, #128	@ 0x80
 800b1fc:	d877      	bhi.n	800b2ee <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800b1fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b200:	2b00      	cmp	r3, #0
 800b202:	d003      	beq.n	800b20c <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 800b204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b206:	2b40      	cmp	r3, #64	@ 0x40
 800b208:	d012      	beq.n	800b230 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800b20a:	e070      	b.n	800b2ee <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b20c:	4b39      	ldr	r3, [pc, #228]	@ (800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b214:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b218:	d107      	bne.n	800b22a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b21a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b21e:	4618      	mov	r0, r3
 800b220:	f000 fec2 	bl	800bfa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b228:	e3f1      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b22a:	2300      	movs	r3, #0
 800b22c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b22e:	e3ee      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b230:	4b30      	ldr	r3, [pc, #192]	@ (800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b238:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b23c:	d107      	bne.n	800b24e <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b23e:	f107 0318 	add.w	r3, r7, #24
 800b242:	4618      	mov	r0, r3
 800b244:	f000 fc08 	bl	800ba58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b248:	69bb      	ldr	r3, [r7, #24]
 800b24a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b24c:	e3df      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b24e:	2300      	movs	r3, #0
 800b250:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b252:	e3dc      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b254:	4b27      	ldr	r3, [pc, #156]	@ (800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b25c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b260:	d107      	bne.n	800b272 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b262:	f107 030c 	add.w	r3, r7, #12
 800b266:	4618      	mov	r0, r3
 800b268:	f000 fd4a 	bl	800bd00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b270:	e3cd      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b272:	2300      	movs	r3, #0
 800b274:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b276:	e3ca      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b278:	4b1e      	ldr	r3, [pc, #120]	@ (800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b27a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b27c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b280:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b282:	4b1c      	ldr	r3, [pc, #112]	@ (800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	f003 0304 	and.w	r3, r3, #4
 800b28a:	2b04      	cmp	r3, #4
 800b28c:	d10c      	bne.n	800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800b28e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b290:	2b00      	cmp	r3, #0
 800b292:	d109      	bne.n	800b2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b294:	4b17      	ldr	r3, [pc, #92]	@ (800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	08db      	lsrs	r3, r3, #3
 800b29a:	f003 0303 	and.w	r3, r3, #3
 800b29e:	4a16      	ldr	r2, [pc, #88]	@ (800b2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800b2a0:	fa22 f303 	lsr.w	r3, r2, r3
 800b2a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b2a6:	e01e      	b.n	800b2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b2a8:	4b12      	ldr	r3, [pc, #72]	@ (800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b2b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b2b4:	d106      	bne.n	800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 800b2b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b2bc:	d102      	bne.n	800b2c4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b2be:	4b0f      	ldr	r3, [pc, #60]	@ (800b2fc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800b2c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b2c2:	e010      	b.n	800b2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b2c4:	4b0b      	ldr	r3, [pc, #44]	@ (800b2f4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b2cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b2d0:	d106      	bne.n	800b2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800b2d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b2d8:	d102      	bne.n	800b2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b2da:	4b09      	ldr	r3, [pc, #36]	@ (800b300 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800b2dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b2de:	e002      	b.n	800b2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b2e4:	e393      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800b2e6:	e392      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b2e8:	4b06      	ldr	r3, [pc, #24]	@ (800b304 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800b2ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2ec:	e38f      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b2f2:	e38c      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800b2f4:	58024400 	.word	0x58024400
 800b2f8:	03d09000 	.word	0x03d09000
 800b2fc:	003d0900 	.word	0x003d0900
 800b300:	007a1200 	.word	0x007a1200
 800b304:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 800b308:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b30c:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800b310:	430b      	orrs	r3, r1
 800b312:	f040 809c 	bne.w	800b44e <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 800b316:	4b9e      	ldr	r3, [pc, #632]	@ (800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800b318:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b31a:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800b31e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800b320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b322:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b326:	d054      	beq.n	800b3d2 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 800b328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b32a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b32e:	f200 808b 	bhi.w	800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800b332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b334:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800b338:	f000 8083 	beq.w	800b442 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 800b33c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b33e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800b342:	f200 8081 	bhi.w	800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800b346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b348:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b34c:	d02f      	beq.n	800b3ae <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800b34e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b350:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b354:	d878      	bhi.n	800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800b356:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d004      	beq.n	800b366 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 800b35c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b35e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b362:	d012      	beq.n	800b38a <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 800b364:	e070      	b.n	800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b366:	4b8a      	ldr	r3, [pc, #552]	@ (800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b36e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b372:	d107      	bne.n	800b384 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b374:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b378:	4618      	mov	r0, r3
 800b37a:	f000 fe15 	bl	800bfa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b37e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b380:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b382:	e344      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b384:	2300      	movs	r3, #0
 800b386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b388:	e341      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b38a:	4b81      	ldr	r3, [pc, #516]	@ (800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b392:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b396:	d107      	bne.n	800b3a8 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b398:	f107 0318 	add.w	r3, r7, #24
 800b39c:	4618      	mov	r0, r3
 800b39e:	f000 fb5b 	bl	800ba58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b3a2:	69bb      	ldr	r3, [r7, #24]
 800b3a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3a6:	e332      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3ac:	e32f      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b3ae:	4b78      	ldr	r3, [pc, #480]	@ (800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b3b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b3ba:	d107      	bne.n	800b3cc <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b3bc:	f107 030c 	add.w	r3, r7, #12
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f000 fc9d 	bl	800bd00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3ca:	e320      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b3d0:	e31d      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b3d2:	4b6f      	ldr	r3, [pc, #444]	@ (800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800b3d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b3d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b3da:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b3dc:	4b6c      	ldr	r3, [pc, #432]	@ (800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f003 0304 	and.w	r3, r3, #4
 800b3e4:	2b04      	cmp	r3, #4
 800b3e6:	d10c      	bne.n	800b402 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 800b3e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d109      	bne.n	800b402 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b3ee:	4b68      	ldr	r3, [pc, #416]	@ (800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	08db      	lsrs	r3, r3, #3
 800b3f4:	f003 0303 	and.w	r3, r3, #3
 800b3f8:	4a66      	ldr	r2, [pc, #408]	@ (800b594 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800b3fa:	fa22 f303 	lsr.w	r3, r2, r3
 800b3fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b400:	e01e      	b.n	800b440 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b402:	4b63      	ldr	r3, [pc, #396]	@ (800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b40a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b40e:	d106      	bne.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800b410:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b412:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b416:	d102      	bne.n	800b41e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b418:	4b5f      	ldr	r3, [pc, #380]	@ (800b598 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800b41a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b41c:	e010      	b.n	800b440 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b41e:	4b5c      	ldr	r3, [pc, #368]	@ (800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b426:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b42a:	d106      	bne.n	800b43a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800b42c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b42e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b432:	d102      	bne.n	800b43a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b434:	4b59      	ldr	r3, [pc, #356]	@ (800b59c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800b436:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b438:	e002      	b.n	800b440 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b43a:	2300      	movs	r3, #0
 800b43c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 800b43e:	e2e6      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800b440:	e2e5      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b442:	4b57      	ldr	r3, [pc, #348]	@ (800b5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b444:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b446:	e2e2      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800b448:	2300      	movs	r3, #0
 800b44a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b44c:	e2df      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b44e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b452:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800b456:	430b      	orrs	r3, r1
 800b458:	f040 80a7 	bne.w	800b5aa <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b45c:	4b4c      	ldr	r3, [pc, #304]	@ (800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800b45e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b460:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800b464:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b468:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b46c:	d055      	beq.n	800b51a <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800b46e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b470:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b474:	f200 8096 	bhi.w	800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800b478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b47a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b47e:	f000 8084 	beq.w	800b58a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 800b482:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b484:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800b488:	f200 808c 	bhi.w	800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800b48c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b48e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b492:	d030      	beq.n	800b4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 800b494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b496:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b49a:	f200 8083 	bhi.w	800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800b49e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d004      	beq.n	800b4ae <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800b4a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b4aa:	d012      	beq.n	800b4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 800b4ac:	e07a      	b.n	800b5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b4ae:	4b38      	ldr	r3, [pc, #224]	@ (800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b4b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b4ba:	d107      	bne.n	800b4cc <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b4bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	f000 fd71 	bl	800bfa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b4c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4ca:	e2a0      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4d0:	e29d      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b4d2:	4b2f      	ldr	r3, [pc, #188]	@ (800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b4da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b4de:	d107      	bne.n	800b4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b4e0:	f107 0318 	add.w	r3, r7, #24
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f000 fab7 	bl	800ba58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b4ea:	69bb      	ldr	r3, [r7, #24]
 800b4ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b4ee:	e28e      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b4f4:	e28b      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b4f6:	4b26      	ldr	r3, [pc, #152]	@ (800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b4fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b502:	d107      	bne.n	800b514 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b504:	f107 030c 	add.w	r3, r7, #12
 800b508:	4618      	mov	r0, r3
 800b50a:	f000 fbf9 	bl	800bd00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b512:	e27c      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b514:	2300      	movs	r3, #0
 800b516:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b518:	e279      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b51a:	4b1d      	ldr	r3, [pc, #116]	@ (800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800b51c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b51e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b522:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b524:	4b1a      	ldr	r3, [pc, #104]	@ (800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f003 0304 	and.w	r3, r3, #4
 800b52c:	2b04      	cmp	r3, #4
 800b52e:	d10c      	bne.n	800b54a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 800b530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b532:	2b00      	cmp	r3, #0
 800b534:	d109      	bne.n	800b54a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b536:	4b16      	ldr	r3, [pc, #88]	@ (800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	08db      	lsrs	r3, r3, #3
 800b53c:	f003 0303 	and.w	r3, r3, #3
 800b540:	4a14      	ldr	r2, [pc, #80]	@ (800b594 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800b542:	fa22 f303 	lsr.w	r3, r2, r3
 800b546:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b548:	e01e      	b.n	800b588 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b54a:	4b11      	ldr	r3, [pc, #68]	@ (800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b552:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b556:	d106      	bne.n	800b566 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800b558:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b55a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b55e:	d102      	bne.n	800b566 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b560:	4b0d      	ldr	r3, [pc, #52]	@ (800b598 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800b562:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b564:	e010      	b.n	800b588 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b566:	4b0a      	ldr	r3, [pc, #40]	@ (800b590 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b56e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b572:	d106      	bne.n	800b582 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800b574:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b576:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b57a:	d102      	bne.n	800b582 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b57c:	4b07      	ldr	r3, [pc, #28]	@ (800b59c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800b57e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b580:	e002      	b.n	800b588 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b582:	2300      	movs	r3, #0
 800b584:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b586:	e242      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800b588:	e241      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b58a:	4b05      	ldr	r3, [pc, #20]	@ (800b5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800b58c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b58e:	e23e      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800b590:	58024400 	.word	0x58024400
 800b594:	03d09000 	.word	0x03d09000
 800b598:	003d0900 	.word	0x003d0900
 800b59c:	007a1200 	.word	0x007a1200
 800b5a0:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5a8:	e231      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b5aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b5ae:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800b5b2:	430b      	orrs	r3, r1
 800b5b4:	f040 8085 	bne.w	800b6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b5b8:	4b9c      	ldr	r3, [pc, #624]	@ (800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b5ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b5bc:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800b5c0:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800b5c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b5c8:	d06b      	beq.n	800b6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800b5ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b5d0:	d874      	bhi.n	800b6bc <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800b5d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b5d8:	d056      	beq.n	800b688 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800b5da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5dc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b5e0:	d86c      	bhi.n	800b6bc <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800b5e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b5e8:	d03b      	beq.n	800b662 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800b5ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800b5f0:	d864      	bhi.n	800b6bc <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800b5f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b5f8:	d021      	beq.n	800b63e <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 800b5fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b600:	d85c      	bhi.n	800b6bc <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800b602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b604:	2b00      	cmp	r3, #0
 800b606:	d004      	beq.n	800b612 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 800b608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b60a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b60e:	d004      	beq.n	800b61a <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 800b610:	e054      	b.n	800b6bc <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b612:	f7fe fb5f 	bl	8009cd4 <HAL_RCC_GetPCLK1Freq>
 800b616:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b618:	e1f9      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b61a:	4b84      	ldr	r3, [pc, #528]	@ (800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b622:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b626:	d107      	bne.n	800b638 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b628:	f107 0318 	add.w	r3, r7, #24
 800b62c:	4618      	mov	r0, r3
 800b62e:	f000 fa13 	bl	800ba58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b632:	69fb      	ldr	r3, [r7, #28]
 800b634:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b636:	e1ea      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b638:	2300      	movs	r3, #0
 800b63a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b63c:	e1e7      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b63e:	4b7b      	ldr	r3, [pc, #492]	@ (800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b646:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b64a:	d107      	bne.n	800b65c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b64c:	f107 030c 	add.w	r3, r7, #12
 800b650:	4618      	mov	r0, r3
 800b652:	f000 fb55 	bl	800bd00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b65a:	e1d8      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b65c:	2300      	movs	r3, #0
 800b65e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b660:	e1d5      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b662:	4b72      	ldr	r3, [pc, #456]	@ (800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f003 0304 	and.w	r3, r3, #4
 800b66a:	2b04      	cmp	r3, #4
 800b66c:	d109      	bne.n	800b682 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b66e:	4b6f      	ldr	r3, [pc, #444]	@ (800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	08db      	lsrs	r3, r3, #3
 800b674:	f003 0303 	and.w	r3, r3, #3
 800b678:	4a6d      	ldr	r2, [pc, #436]	@ (800b830 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b67a:	fa22 f303 	lsr.w	r3, r2, r3
 800b67e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b680:	e1c5      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b682:	2300      	movs	r3, #0
 800b684:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b686:	e1c2      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b688:	4b68      	ldr	r3, [pc, #416]	@ (800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b690:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b694:	d102      	bne.n	800b69c <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 800b696:	4b67      	ldr	r3, [pc, #412]	@ (800b834 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b698:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b69a:	e1b8      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b69c:	2300      	movs	r3, #0
 800b69e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6a0:	e1b5      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b6a2:	4b62      	ldr	r3, [pc, #392]	@ (800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b6aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b6ae:	d102      	bne.n	800b6b6 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 800b6b0:	4b61      	ldr	r3, [pc, #388]	@ (800b838 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800b6b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6b4:	e1ab      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6ba:	e1a8      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b6c0:	e1a5      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b6c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b6c6:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800b6ca:	430b      	orrs	r3, r1
 800b6cc:	d173      	bne.n	800b7b6 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b6ce:	4b57      	ldr	r3, [pc, #348]	@ (800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b6d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b6d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b6d6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b6d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b6de:	d02f      	beq.n	800b740 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 800b6e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b6e6:	d863      	bhi.n	800b7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800b6e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d004      	beq.n	800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b6ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b6f4:	d012      	beq.n	800b71c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 800b6f6:	e05b      	b.n	800b7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b6f8:	4b4c      	ldr	r3, [pc, #304]	@ (800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b700:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b704:	d107      	bne.n	800b716 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b706:	f107 0318 	add.w	r3, r7, #24
 800b70a:	4618      	mov	r0, r3
 800b70c:	f000 f9a4 	bl	800ba58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b710:	69bb      	ldr	r3, [r7, #24]
 800b712:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b714:	e17b      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b716:	2300      	movs	r3, #0
 800b718:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b71a:	e178      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b71c:	4b43      	ldr	r3, [pc, #268]	@ (800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b724:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b728:	d107      	bne.n	800b73a <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b72a:	f107 030c 	add.w	r3, r7, #12
 800b72e:	4618      	mov	r0, r3
 800b730:	f000 fae6 	bl	800bd00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b734:	697b      	ldr	r3, [r7, #20]
 800b736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b738:	e169      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b73a:	2300      	movs	r3, #0
 800b73c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b73e:	e166      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b740:	4b3a      	ldr	r3, [pc, #232]	@ (800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b742:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b744:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b748:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b74a:	4b38      	ldr	r3, [pc, #224]	@ (800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f003 0304 	and.w	r3, r3, #4
 800b752:	2b04      	cmp	r3, #4
 800b754:	d10c      	bne.n	800b770 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800b756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d109      	bne.n	800b770 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b75c:	4b33      	ldr	r3, [pc, #204]	@ (800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	08db      	lsrs	r3, r3, #3
 800b762:	f003 0303 	and.w	r3, r3, #3
 800b766:	4a32      	ldr	r2, [pc, #200]	@ (800b830 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b768:	fa22 f303 	lsr.w	r3, r2, r3
 800b76c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b76e:	e01e      	b.n	800b7ae <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b770:	4b2e      	ldr	r3, [pc, #184]	@ (800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b778:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b77c:	d106      	bne.n	800b78c <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 800b77e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b780:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b784:	d102      	bne.n	800b78c <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b786:	4b2b      	ldr	r3, [pc, #172]	@ (800b834 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b788:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b78a:	e010      	b.n	800b7ae <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b78c:	4b27      	ldr	r3, [pc, #156]	@ (800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b794:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b798:	d106      	bne.n	800b7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800b79a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b79c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b7a0:	d102      	bne.n	800b7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b7a2:	4b25      	ldr	r3, [pc, #148]	@ (800b838 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800b7a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b7a6:	e002      	b.n	800b7ae <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800b7ac:	e12f      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800b7ae:	e12e      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7b4:	e12b      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b7b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7ba:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800b7be:	430b      	orrs	r3, r1
 800b7c0:	d13c      	bne.n	800b83c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b7c2:	4b1a      	ldr	r3, [pc, #104]	@ (800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b7c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b7c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b7ca:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b7cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d004      	beq.n	800b7dc <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800b7d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b7d8:	d012      	beq.n	800b800 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800b7da:	e023      	b.n	800b824 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b7dc:	4b13      	ldr	r3, [pc, #76]	@ (800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b7e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b7e8:	d107      	bne.n	800b7fa <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b7ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f000 fbda 	bl	800bfa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b7f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b7f8:	e109      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b7fe:	e106      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b800:	4b0a      	ldr	r3, [pc, #40]	@ (800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b808:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b80c:	d107      	bne.n	800b81e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b80e:	f107 0318 	add.w	r3, r7, #24
 800b812:	4618      	mov	r0, r3
 800b814:	f000 f920 	bl	800ba58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b818:	6a3b      	ldr	r3, [r7, #32]
 800b81a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b81c:	e0f7      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b81e:	2300      	movs	r3, #0
 800b820:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b822:	e0f4      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800b824:	2300      	movs	r3, #0
 800b826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b828:	e0f1      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800b82a:	bf00      	nop
 800b82c:	58024400 	.word	0x58024400
 800b830:	03d09000 	.word	0x03d09000
 800b834:	003d0900 	.word	0x003d0900
 800b838:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b83c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b840:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800b844:	430b      	orrs	r3, r1
 800b846:	f040 8091 	bne.w	800b96c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b84a:	4b73      	ldr	r3, [pc, #460]	@ (800ba18 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b84c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b84e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800b852:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b856:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800b85a:	f000 8081 	beq.w	800b960 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800b85e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b860:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800b864:	d87f      	bhi.n	800b966 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800b866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b868:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b86c:	d06b      	beq.n	800b946 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800b86e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b870:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b874:	d877      	bhi.n	800b966 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800b876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b878:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b87c:	d056      	beq.n	800b92c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800b87e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b880:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b884:	d86f      	bhi.n	800b966 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800b886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b888:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b88c:	d03b      	beq.n	800b906 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800b88e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b890:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b894:	d867      	bhi.n	800b966 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800b896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b898:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b89c:	d021      	beq.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800b89e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b8a4:	d85f      	bhi.n	800b966 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800b8a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d004      	beq.n	800b8b6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b8ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b8b2:	d004      	beq.n	800b8be <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800b8b4:	e057      	b.n	800b966 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b8b6:	f000 f8b9 	bl	800ba2c <HAL_RCCEx_GetD3PCLK1Freq>
 800b8ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b8bc:	e0a7      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b8be:	4b56      	ldr	r3, [pc, #344]	@ (800ba18 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b8c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b8ca:	d107      	bne.n	800b8dc <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8cc:	f107 0318 	add.w	r3, r7, #24
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f000 f8c1 	bl	800ba58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b8d6:	69fb      	ldr	r3, [r7, #28]
 800b8d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8da:	e098      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b8dc:	2300      	movs	r3, #0
 800b8de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b8e0:	e095      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b8e2:	4b4d      	ldr	r3, [pc, #308]	@ (800ba18 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b8ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b8ee:	d107      	bne.n	800b900 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8f0:	f107 030c 	add.w	r3, r7, #12
 800b8f4:	4618      	mov	r0, r3
 800b8f6:	f000 fa03 	bl	800bd00 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b8fe:	e086      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b900:	2300      	movs	r3, #0
 800b902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b904:	e083      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b906:	4b44      	ldr	r3, [pc, #272]	@ (800ba18 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f003 0304 	and.w	r3, r3, #4
 800b90e:	2b04      	cmp	r3, #4
 800b910:	d109      	bne.n	800b926 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b912:	4b41      	ldr	r3, [pc, #260]	@ (800ba18 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	08db      	lsrs	r3, r3, #3
 800b918:	f003 0303 	and.w	r3, r3, #3
 800b91c:	4a3f      	ldr	r2, [pc, #252]	@ (800ba1c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800b91e:	fa22 f303 	lsr.w	r3, r2, r3
 800b922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b924:	e073      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b926:	2300      	movs	r3, #0
 800b928:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b92a:	e070      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b92c:	4b3a      	ldr	r3, [pc, #232]	@ (800ba18 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b934:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b938:	d102      	bne.n	800b940 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 800b93a:	4b39      	ldr	r3, [pc, #228]	@ (800ba20 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 800b93c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b93e:	e066      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b940:	2300      	movs	r3, #0
 800b942:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b944:	e063      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b946:	4b34      	ldr	r3, [pc, #208]	@ (800ba18 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b94e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b952:	d102      	bne.n	800b95a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 800b954:	4b33      	ldr	r3, [pc, #204]	@ (800ba24 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800b956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b958:	e059      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b95a:	2300      	movs	r3, #0
 800b95c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b95e:	e056      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b960:	4b31      	ldr	r3, [pc, #196]	@ (800ba28 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 800b962:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b964:	e053      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b966:	2300      	movs	r3, #0
 800b968:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b96a:	e050      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b96c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b970:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800b974:	430b      	orrs	r3, r1
 800b976:	d148      	bne.n	800ba0a <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b978:	4b27      	ldr	r3, [pc, #156]	@ (800ba18 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b97a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b97c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800b980:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800b982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b984:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b988:	d02a      	beq.n	800b9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800b98a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b98c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b990:	d838      	bhi.n	800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800b992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b994:	2b00      	cmp	r3, #0
 800b996:	d004      	beq.n	800b9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 800b998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b99a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b99e:	d00d      	beq.n	800b9bc <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 800b9a0:	e030      	b.n	800ba04 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b9a2:	4b1d      	ldr	r3, [pc, #116]	@ (800ba18 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b9aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800b9ae:	d102      	bne.n	800b9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 800b9b0:	4b1c      	ldr	r3, [pc, #112]	@ (800ba24 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800b9b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9b4:	e02b      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9ba:	e028      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b9bc:	4b16      	ldr	r3, [pc, #88]	@ (800ba18 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b9c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800b9c8:	d107      	bne.n	800b9da <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b9ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f000 faea 	bl	800bfa8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b9d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9d8:	e019      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b9da:	2300      	movs	r3, #0
 800b9dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b9de:	e016      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b9e0:	4b0d      	ldr	r3, [pc, #52]	@ (800ba18 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b9e8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800b9ec:	d107      	bne.n	800b9fe <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b9ee:	f107 0318 	add.w	r3, r7, #24
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	f000 f830 	bl	800ba58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b9f8:	69fb      	ldr	r3, [r7, #28]
 800b9fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b9fc:	e007      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba02:	e004      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800ba04:	2300      	movs	r3, #0
 800ba06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ba08:	e001      	b.n	800ba0e <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800ba0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3740      	adds	r7, #64	@ 0x40
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}
 800ba18:	58024400 	.word	0x58024400
 800ba1c:	03d09000 	.word	0x03d09000
 800ba20:	003d0900 	.word	0x003d0900
 800ba24:	007a1200 	.word	0x007a1200
 800ba28:	00bb8000 	.word	0x00bb8000

0800ba2c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800ba30:	f7fe f920 	bl	8009c74 <HAL_RCC_GetHCLKFreq>
 800ba34:	4602      	mov	r2, r0
 800ba36:	4b06      	ldr	r3, [pc, #24]	@ (800ba50 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ba38:	6a1b      	ldr	r3, [r3, #32]
 800ba3a:	091b      	lsrs	r3, r3, #4
 800ba3c:	f003 0307 	and.w	r3, r3, #7
 800ba40:	4904      	ldr	r1, [pc, #16]	@ (800ba54 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ba42:	5ccb      	ldrb	r3, [r1, r3]
 800ba44:	f003 031f 	and.w	r3, r3, #31
 800ba48:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	bd80      	pop	{r7, pc}
 800ba50:	58024400 	.word	0x58024400
 800ba54:	0801120c 	.word	0x0801120c

0800ba58 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b089      	sub	sp, #36	@ 0x24
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ba60:	4ba1      	ldr	r3, [pc, #644]	@ (800bce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba64:	f003 0303 	and.w	r3, r3, #3
 800ba68:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ba6a:	4b9f      	ldr	r3, [pc, #636]	@ (800bce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba6e:	0b1b      	lsrs	r3, r3, #12
 800ba70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ba74:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ba76:	4b9c      	ldr	r3, [pc, #624]	@ (800bce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba7a:	091b      	lsrs	r3, r3, #4
 800ba7c:	f003 0301 	and.w	r3, r3, #1
 800ba80:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ba82:	4b99      	ldr	r3, [pc, #612]	@ (800bce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ba84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba86:	08db      	lsrs	r3, r3, #3
 800ba88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ba8c:	693a      	ldr	r2, [r7, #16]
 800ba8e:	fb02 f303 	mul.w	r3, r2, r3
 800ba92:	ee07 3a90 	vmov	s15, r3
 800ba96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	f000 8111 	beq.w	800bcc8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800baa6:	69bb      	ldr	r3, [r7, #24]
 800baa8:	2b02      	cmp	r3, #2
 800baaa:	f000 8083 	beq.w	800bbb4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800baae:	69bb      	ldr	r3, [r7, #24]
 800bab0:	2b02      	cmp	r3, #2
 800bab2:	f200 80a1 	bhi.w	800bbf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800bab6:	69bb      	ldr	r3, [r7, #24]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d003      	beq.n	800bac4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800babc:	69bb      	ldr	r3, [r7, #24]
 800babe:	2b01      	cmp	r3, #1
 800bac0:	d056      	beq.n	800bb70 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800bac2:	e099      	b.n	800bbf8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bac4:	4b88      	ldr	r3, [pc, #544]	@ (800bce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	f003 0320 	and.w	r3, r3, #32
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d02d      	beq.n	800bb2c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bad0:	4b85      	ldr	r3, [pc, #532]	@ (800bce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	08db      	lsrs	r3, r3, #3
 800bad6:	f003 0303 	and.w	r3, r3, #3
 800bada:	4a84      	ldr	r2, [pc, #528]	@ (800bcec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800badc:	fa22 f303 	lsr.w	r3, r2, r3
 800bae0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	ee07 3a90 	vmov	s15, r3
 800bae8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	ee07 3a90 	vmov	s15, r3
 800baf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bafa:	4b7b      	ldr	r3, [pc, #492]	@ (800bce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bafc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bafe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb02:	ee07 3a90 	vmov	s15, r3
 800bb06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb0e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bcf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bb12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb26:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bb2a:	e087      	b.n	800bc3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb2c:	697b      	ldr	r3, [r7, #20]
 800bb2e:	ee07 3a90 	vmov	s15, r3
 800bb32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb36:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bcf4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800bb3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb3e:	4b6a      	ldr	r3, [pc, #424]	@ (800bce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb46:	ee07 3a90 	vmov	s15, r3
 800bb4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb52:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bcf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bb56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bb62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb6e:	e065      	b.n	800bc3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	ee07 3a90 	vmov	s15, r3
 800bb76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb7a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bcf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bb7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb82:	4b59      	ldr	r3, [pc, #356]	@ (800bce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bb84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb8a:	ee07 3a90 	vmov	s15, r3
 800bb8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb92:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb96:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bcf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bb9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bba2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbb2:	e043      	b.n	800bc3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	ee07 3a90 	vmov	s15, r3
 800bbba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbbe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bcfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800bbc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbc6:	4b48      	ldr	r3, [pc, #288]	@ (800bce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bbc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbce:	ee07 3a90 	vmov	s15, r3
 800bbd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbd6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbda:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bcf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bbde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbe2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbe6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bbea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbf6:	e021      	b.n	800bc3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	ee07 3a90 	vmov	s15, r3
 800bbfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc02:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bcf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800bc06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc0a:	4b37      	ldr	r3, [pc, #220]	@ (800bce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc12:	ee07 3a90 	vmov	s15, r3
 800bc16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bc1e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bcf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800bc22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bc2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc3a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800bc3c:	4b2a      	ldr	r3, [pc, #168]	@ (800bce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc40:	0a5b      	lsrs	r3, r3, #9
 800bc42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc46:	ee07 3a90 	vmov	s15, r3
 800bc4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bc52:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc56:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc62:	ee17 2a90 	vmov	r2, s15
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800bc6a:	4b1f      	ldr	r3, [pc, #124]	@ (800bce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc6e:	0c1b      	lsrs	r3, r3, #16
 800bc70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bc74:	ee07 3a90 	vmov	s15, r3
 800bc78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc7c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bc80:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc84:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc90:	ee17 2a90 	vmov	r2, s15
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800bc98:	4b13      	ldr	r3, [pc, #76]	@ (800bce8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800bc9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc9c:	0e1b      	lsrs	r3, r3, #24
 800bc9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bca2:	ee07 3a90 	vmov	s15, r3
 800bca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bcae:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bcb2:	edd7 6a07 	vldr	s13, [r7, #28]
 800bcb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bcba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bcbe:	ee17 2a90 	vmov	r2, s15
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bcc6:	e008      	b.n	800bcda <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2200      	movs	r2, #0
 800bccc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	609a      	str	r2, [r3, #8]
}
 800bcda:	bf00      	nop
 800bcdc:	3724      	adds	r7, #36	@ 0x24
 800bcde:	46bd      	mov	sp, r7
 800bce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce4:	4770      	bx	lr
 800bce6:	bf00      	nop
 800bce8:	58024400 	.word	0x58024400
 800bcec:	03d09000 	.word	0x03d09000
 800bcf0:	46000000 	.word	0x46000000
 800bcf4:	4c742400 	.word	0x4c742400
 800bcf8:	4a742400 	.word	0x4a742400
 800bcfc:	4af42400 	.word	0x4af42400

0800bd00 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800bd00:	b480      	push	{r7}
 800bd02:	b089      	sub	sp, #36	@ 0x24
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bd08:	4ba1      	ldr	r3, [pc, #644]	@ (800bf90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd0c:	f003 0303 	and.w	r3, r3, #3
 800bd10:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800bd12:	4b9f      	ldr	r3, [pc, #636]	@ (800bf90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bd16:	0d1b      	lsrs	r3, r3, #20
 800bd18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bd1c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bd1e:	4b9c      	ldr	r3, [pc, #624]	@ (800bf90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd22:	0a1b      	lsrs	r3, r3, #8
 800bd24:	f003 0301 	and.w	r3, r3, #1
 800bd28:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800bd2a:	4b99      	ldr	r3, [pc, #612]	@ (800bf90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd2e:	08db      	lsrs	r3, r3, #3
 800bd30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bd34:	693a      	ldr	r2, [r7, #16]
 800bd36:	fb02 f303 	mul.w	r3, r2, r3
 800bd3a:	ee07 3a90 	vmov	s15, r3
 800bd3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	f000 8111 	beq.w	800bf70 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800bd4e:	69bb      	ldr	r3, [r7, #24]
 800bd50:	2b02      	cmp	r3, #2
 800bd52:	f000 8083 	beq.w	800be5c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800bd56:	69bb      	ldr	r3, [r7, #24]
 800bd58:	2b02      	cmp	r3, #2
 800bd5a:	f200 80a1 	bhi.w	800bea0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800bd5e:	69bb      	ldr	r3, [r7, #24]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d003      	beq.n	800bd6c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800bd64:	69bb      	ldr	r3, [r7, #24]
 800bd66:	2b01      	cmp	r3, #1
 800bd68:	d056      	beq.n	800be18 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800bd6a:	e099      	b.n	800bea0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bd6c:	4b88      	ldr	r3, [pc, #544]	@ (800bf90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f003 0320 	and.w	r3, r3, #32
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d02d      	beq.n	800bdd4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bd78:	4b85      	ldr	r3, [pc, #532]	@ (800bf90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	08db      	lsrs	r3, r3, #3
 800bd7e:	f003 0303 	and.w	r3, r3, #3
 800bd82:	4a84      	ldr	r2, [pc, #528]	@ (800bf94 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800bd84:	fa22 f303 	lsr.w	r3, r2, r3
 800bd88:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	ee07 3a90 	vmov	s15, r3
 800bd90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	ee07 3a90 	vmov	s15, r3
 800bd9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bda2:	4b7b      	ldr	r3, [pc, #492]	@ (800bf90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bda4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bda6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdaa:	ee07 3a90 	vmov	s15, r3
 800bdae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdb6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800bf98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bdba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bdc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bdd2:	e087      	b.n	800bee4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bdd4:	697b      	ldr	r3, [r7, #20]
 800bdd6:	ee07 3a90 	vmov	s15, r3
 800bdda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdde:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800bf9c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800bde2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bde6:	4b6a      	ldr	r3, [pc, #424]	@ (800bf90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bde8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bdea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdee:	ee07 3a90 	vmov	s15, r3
 800bdf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdf6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdfa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800bf98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bdfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be16:	e065      	b.n	800bee4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800be18:	697b      	ldr	r3, [r7, #20]
 800be1a:	ee07 3a90 	vmov	s15, r3
 800be1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be22:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800bfa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800be26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be2a:	4b59      	ldr	r3, [pc, #356]	@ (800bf90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be32:	ee07 3a90 	vmov	s15, r3
 800be36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800be3e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800bf98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800be42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be5a:	e043      	b.n	800bee4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800be5c:	697b      	ldr	r3, [r7, #20]
 800be5e:	ee07 3a90 	vmov	s15, r3
 800be62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be66:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800bfa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800be6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be6e:	4b48      	ldr	r3, [pc, #288]	@ (800bf90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800be70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be76:	ee07 3a90 	vmov	s15, r3
 800be7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800be82:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800bf98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800be86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800be92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be9e:	e021      	b.n	800bee4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	ee07 3a90 	vmov	s15, r3
 800bea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800beaa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800bfa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800beae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800beb2:	4b37      	ldr	r3, [pc, #220]	@ (800bf90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800beb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800beb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800beba:	ee07 3a90 	vmov	s15, r3
 800bebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bec2:	ed97 6a03 	vldr	s12, [r7, #12]
 800bec6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800bf98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800beca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bed2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800bed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800beda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bede:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bee2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800bee4:	4b2a      	ldr	r3, [pc, #168]	@ (800bf90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bee8:	0a5b      	lsrs	r3, r3, #9
 800beea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800beee:	ee07 3a90 	vmov	s15, r3
 800bef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bef6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800befa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800befe:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf0a:	ee17 2a90 	vmov	r2, s15
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800bf12:	4b1f      	ldr	r3, [pc, #124]	@ (800bf90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf16:	0c1b      	lsrs	r3, r3, #16
 800bf18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf1c:	ee07 3a90 	vmov	s15, r3
 800bf20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bf28:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf2c:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf38:	ee17 2a90 	vmov	r2, s15
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800bf40:	4b13      	ldr	r3, [pc, #76]	@ (800bf90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bf42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf44:	0e1b      	lsrs	r3, r3, #24
 800bf46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf4a:	ee07 3a90 	vmov	s15, r3
 800bf4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bf56:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf5a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf66:	ee17 2a90 	vmov	r2, s15
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bf6e:	e008      	b.n	800bf82 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2200      	movs	r2, #0
 800bf74:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2200      	movs	r2, #0
 800bf7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	609a      	str	r2, [r3, #8]
}
 800bf82:	bf00      	nop
 800bf84:	3724      	adds	r7, #36	@ 0x24
 800bf86:	46bd      	mov	sp, r7
 800bf88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8c:	4770      	bx	lr
 800bf8e:	bf00      	nop
 800bf90:	58024400 	.word	0x58024400
 800bf94:	03d09000 	.word	0x03d09000
 800bf98:	46000000 	.word	0x46000000
 800bf9c:	4c742400 	.word	0x4c742400
 800bfa0:	4a742400 	.word	0x4a742400
 800bfa4:	4af42400 	.word	0x4af42400

0800bfa8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b089      	sub	sp, #36	@ 0x24
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bfb0:	4ba0      	ldr	r3, [pc, #640]	@ (800c234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bfb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfb4:	f003 0303 	and.w	r3, r3, #3
 800bfb8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800bfba:	4b9e      	ldr	r3, [pc, #632]	@ (800c234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bfbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfbe:	091b      	lsrs	r3, r3, #4
 800bfc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bfc4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bfc6:	4b9b      	ldr	r3, [pc, #620]	@ (800c234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bfc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfca:	f003 0301 	and.w	r3, r3, #1
 800bfce:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bfd0:	4b98      	ldr	r3, [pc, #608]	@ (800c234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bfd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bfd4:	08db      	lsrs	r3, r3, #3
 800bfd6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bfda:	693a      	ldr	r2, [r7, #16]
 800bfdc:	fb02 f303 	mul.w	r3, r2, r3
 800bfe0:	ee07 3a90 	vmov	s15, r3
 800bfe4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfe8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	f000 8111 	beq.w	800c216 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800bff4:	69bb      	ldr	r3, [r7, #24]
 800bff6:	2b02      	cmp	r3, #2
 800bff8:	f000 8083 	beq.w	800c102 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800bffc:	69bb      	ldr	r3, [r7, #24]
 800bffe:	2b02      	cmp	r3, #2
 800c000:	f200 80a1 	bhi.w	800c146 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800c004:	69bb      	ldr	r3, [r7, #24]
 800c006:	2b00      	cmp	r3, #0
 800c008:	d003      	beq.n	800c012 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800c00a:	69bb      	ldr	r3, [r7, #24]
 800c00c:	2b01      	cmp	r3, #1
 800c00e:	d056      	beq.n	800c0be <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800c010:	e099      	b.n	800c146 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c012:	4b88      	ldr	r3, [pc, #544]	@ (800c234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f003 0320 	and.w	r3, r3, #32
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d02d      	beq.n	800c07a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c01e:	4b85      	ldr	r3, [pc, #532]	@ (800c234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	08db      	lsrs	r3, r3, #3
 800c024:	f003 0303 	and.w	r3, r3, #3
 800c028:	4a83      	ldr	r2, [pc, #524]	@ (800c238 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800c02a:	fa22 f303 	lsr.w	r3, r2, r3
 800c02e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	ee07 3a90 	vmov	s15, r3
 800c036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	ee07 3a90 	vmov	s15, r3
 800c040:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c044:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c048:	4b7a      	ldr	r3, [pc, #488]	@ (800c234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c04a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c04c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c050:	ee07 3a90 	vmov	s15, r3
 800c054:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c058:	ed97 6a03 	vldr	s12, [r7, #12]
 800c05c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800c23c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c060:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c064:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c068:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c06c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c070:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c074:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c078:	e087      	b.n	800c18a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c07a:	697b      	ldr	r3, [r7, #20]
 800c07c:	ee07 3a90 	vmov	s15, r3
 800c080:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c084:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800c240 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c088:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c08c:	4b69      	ldr	r3, [pc, #420]	@ (800c234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c08e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c094:	ee07 3a90 	vmov	s15, r3
 800c098:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c09c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0a0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800c23c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c0a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0ac:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c0bc:	e065      	b.n	800c18a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c0be:	697b      	ldr	r3, [r7, #20]
 800c0c0:	ee07 3a90 	vmov	s15, r3
 800c0c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0c8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800c244 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800c0cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c0d0:	4b58      	ldr	r3, [pc, #352]	@ (800c234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c0d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c0d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0d8:	ee07 3a90 	vmov	s15, r3
 800c0dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c0e0:	ed97 6a03 	vldr	s12, [r7, #12]
 800c0e4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800c23c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c0e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c0ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c0f0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c0f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0fc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c100:	e043      	b.n	800c18a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	ee07 3a90 	vmov	s15, r3
 800c108:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c10c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800c248 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800c110:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c114:	4b47      	ldr	r3, [pc, #284]	@ (800c234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c116:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c118:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c11c:	ee07 3a90 	vmov	s15, r3
 800c120:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c124:	ed97 6a03 	vldr	s12, [r7, #12]
 800c128:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800c23c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c12c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c130:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c134:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c138:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c13c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c140:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c144:	e021      	b.n	800c18a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	ee07 3a90 	vmov	s15, r3
 800c14c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c150:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800c240 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800c154:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c158:	4b36      	ldr	r3, [pc, #216]	@ (800c234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c15a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c15c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c160:	ee07 3a90 	vmov	s15, r3
 800c164:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c168:	ed97 6a03 	vldr	s12, [r7, #12]
 800c16c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800c23c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c170:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c174:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c178:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c17c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c180:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c184:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c188:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800c18a:	4b2a      	ldr	r3, [pc, #168]	@ (800c234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c18c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c18e:	0a5b      	lsrs	r3, r3, #9
 800c190:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c194:	ee07 3a90 	vmov	s15, r3
 800c198:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c19c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c1a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c1a4:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1b0:	ee17 2a90 	vmov	r2, s15
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800c1b8:	4b1e      	ldr	r3, [pc, #120]	@ (800c234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1bc:	0c1b      	lsrs	r3, r3, #16
 800c1be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1c2:	ee07 3a90 	vmov	s15, r3
 800c1c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c1ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c1d2:	edd7 6a07 	vldr	s13, [r7, #28]
 800c1d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c1da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1de:	ee17 2a90 	vmov	r2, s15
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800c1e6:	4b13      	ldr	r3, [pc, #76]	@ (800c234 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800c1e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c1ea:	0e1b      	lsrs	r3, r3, #24
 800c1ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1f0:	ee07 3a90 	vmov	s15, r3
 800c1f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c1f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800c1fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c200:	edd7 6a07 	vldr	s13, [r7, #28]
 800c204:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c208:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c20c:	ee17 2a90 	vmov	r2, s15
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c214:	e008      	b.n	800c228 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2200      	movs	r2, #0
 800c21a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2200      	movs	r2, #0
 800c220:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2200      	movs	r2, #0
 800c226:	609a      	str	r2, [r3, #8]
}
 800c228:	bf00      	nop
 800c22a:	3724      	adds	r7, #36	@ 0x24
 800c22c:	46bd      	mov	sp, r7
 800c22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c232:	4770      	bx	lr
 800c234:	58024400 	.word	0x58024400
 800c238:	03d09000 	.word	0x03d09000
 800c23c:	46000000 	.word	0x46000000
 800c240:	4c742400 	.word	0x4c742400
 800c244:	4a742400 	.word	0x4a742400
 800c248:	4af42400 	.word	0x4af42400

0800c24c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b084      	sub	sp, #16
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c256:	2300      	movs	r3, #0
 800c258:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c25a:	4b53      	ldr	r3, [pc, #332]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c25c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c25e:	f003 0303 	and.w	r3, r3, #3
 800c262:	2b03      	cmp	r3, #3
 800c264:	d101      	bne.n	800c26a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c266:	2301      	movs	r3, #1
 800c268:	e099      	b.n	800c39e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c26a:	4b4f      	ldr	r3, [pc, #316]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	4a4e      	ldr	r2, [pc, #312]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c270:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c274:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c276:	f7f5 fc65 	bl	8001b44 <HAL_GetTick>
 800c27a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c27c:	e008      	b.n	800c290 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c27e:	f7f5 fc61 	bl	8001b44 <HAL_GetTick>
 800c282:	4602      	mov	r2, r0
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	1ad3      	subs	r3, r2, r3
 800c288:	2b02      	cmp	r3, #2
 800c28a:	d901      	bls.n	800c290 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c28c:	2303      	movs	r3, #3
 800c28e:	e086      	b.n	800c39e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c290:	4b45      	ldr	r3, [pc, #276]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d1f0      	bne.n	800c27e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c29c:	4b42      	ldr	r3, [pc, #264]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c29e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2a0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	031b      	lsls	r3, r3, #12
 800c2aa:	493f      	ldr	r1, [pc, #252]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c2ac:	4313      	orrs	r3, r2
 800c2ae:	628b      	str	r3, [r1, #40]	@ 0x28
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	685b      	ldr	r3, [r3, #4]
 800c2b4:	3b01      	subs	r3, #1
 800c2b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	689b      	ldr	r3, [r3, #8]
 800c2be:	3b01      	subs	r3, #1
 800c2c0:	025b      	lsls	r3, r3, #9
 800c2c2:	b29b      	uxth	r3, r3
 800c2c4:	431a      	orrs	r2, r3
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	68db      	ldr	r3, [r3, #12]
 800c2ca:	3b01      	subs	r3, #1
 800c2cc:	041b      	lsls	r3, r3, #16
 800c2ce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c2d2:	431a      	orrs	r2, r3
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	691b      	ldr	r3, [r3, #16]
 800c2d8:	3b01      	subs	r3, #1
 800c2da:	061b      	lsls	r3, r3, #24
 800c2dc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c2e0:	4931      	ldr	r1, [pc, #196]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c2e2:	4313      	orrs	r3, r2
 800c2e4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c2e6:	4b30      	ldr	r3, [pc, #192]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c2e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2ea:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	695b      	ldr	r3, [r3, #20]
 800c2f2:	492d      	ldr	r1, [pc, #180]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c2f4:	4313      	orrs	r3, r2
 800c2f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c2f8:	4b2b      	ldr	r3, [pc, #172]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c2fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2fc:	f023 0220 	bic.w	r2, r3, #32
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	699b      	ldr	r3, [r3, #24]
 800c304:	4928      	ldr	r1, [pc, #160]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c306:	4313      	orrs	r3, r2
 800c308:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c30a:	4b27      	ldr	r3, [pc, #156]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c30c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c30e:	4a26      	ldr	r2, [pc, #152]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c310:	f023 0310 	bic.w	r3, r3, #16
 800c314:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c316:	4b24      	ldr	r3, [pc, #144]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c318:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c31a:	4b24      	ldr	r3, [pc, #144]	@ (800c3ac <RCCEx_PLL2_Config+0x160>)
 800c31c:	4013      	ands	r3, r2
 800c31e:	687a      	ldr	r2, [r7, #4]
 800c320:	69d2      	ldr	r2, [r2, #28]
 800c322:	00d2      	lsls	r2, r2, #3
 800c324:	4920      	ldr	r1, [pc, #128]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c326:	4313      	orrs	r3, r2
 800c328:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c32a:	4b1f      	ldr	r3, [pc, #124]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c32c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c32e:	4a1e      	ldr	r2, [pc, #120]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c330:	f043 0310 	orr.w	r3, r3, #16
 800c334:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c336:	683b      	ldr	r3, [r7, #0]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d106      	bne.n	800c34a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c33c:	4b1a      	ldr	r3, [pc, #104]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c33e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c340:	4a19      	ldr	r2, [pc, #100]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c342:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c346:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c348:	e00f      	b.n	800c36a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	2b01      	cmp	r3, #1
 800c34e:	d106      	bne.n	800c35e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c350:	4b15      	ldr	r3, [pc, #84]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c354:	4a14      	ldr	r2, [pc, #80]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c356:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c35a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c35c:	e005      	b.n	800c36a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c35e:	4b12      	ldr	r3, [pc, #72]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c362:	4a11      	ldr	r2, [pc, #68]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c364:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c368:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c36a:	4b0f      	ldr	r3, [pc, #60]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	4a0e      	ldr	r2, [pc, #56]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c370:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c374:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c376:	f7f5 fbe5 	bl	8001b44 <HAL_GetTick>
 800c37a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c37c:	e008      	b.n	800c390 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c37e:	f7f5 fbe1 	bl	8001b44 <HAL_GetTick>
 800c382:	4602      	mov	r2, r0
 800c384:	68bb      	ldr	r3, [r7, #8]
 800c386:	1ad3      	subs	r3, r2, r3
 800c388:	2b02      	cmp	r3, #2
 800c38a:	d901      	bls.n	800c390 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c38c:	2303      	movs	r3, #3
 800c38e:	e006      	b.n	800c39e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c390:	4b05      	ldr	r3, [pc, #20]	@ (800c3a8 <RCCEx_PLL2_Config+0x15c>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d0f0      	beq.n	800c37e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c39c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3710      	adds	r7, #16
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}
 800c3a6:	bf00      	nop
 800c3a8:	58024400 	.word	0x58024400
 800c3ac:	ffff0007 	.word	0xffff0007

0800c3b0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b084      	sub	sp, #16
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
 800c3b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c3be:	4b53      	ldr	r3, [pc, #332]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c3c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3c2:	f003 0303 	and.w	r3, r3, #3
 800c3c6:	2b03      	cmp	r3, #3
 800c3c8:	d101      	bne.n	800c3ce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	e099      	b.n	800c502 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c3ce:	4b4f      	ldr	r3, [pc, #316]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	4a4e      	ldr	r2, [pc, #312]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c3d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c3d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c3da:	f7f5 fbb3 	bl	8001b44 <HAL_GetTick>
 800c3de:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c3e0:	e008      	b.n	800c3f4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c3e2:	f7f5 fbaf 	bl	8001b44 <HAL_GetTick>
 800c3e6:	4602      	mov	r2, r0
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	1ad3      	subs	r3, r2, r3
 800c3ec:	2b02      	cmp	r3, #2
 800c3ee:	d901      	bls.n	800c3f4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c3f0:	2303      	movs	r3, #3
 800c3f2:	e086      	b.n	800c502 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c3f4:	4b45      	ldr	r3, [pc, #276]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d1f0      	bne.n	800c3e2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c400:	4b42      	ldr	r3, [pc, #264]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c404:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	051b      	lsls	r3, r3, #20
 800c40e:	493f      	ldr	r1, [pc, #252]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c410:	4313      	orrs	r3, r2
 800c412:	628b      	str	r3, [r1, #40]	@ 0x28
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	685b      	ldr	r3, [r3, #4]
 800c418:	3b01      	subs	r3, #1
 800c41a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	689b      	ldr	r3, [r3, #8]
 800c422:	3b01      	subs	r3, #1
 800c424:	025b      	lsls	r3, r3, #9
 800c426:	b29b      	uxth	r3, r3
 800c428:	431a      	orrs	r2, r3
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	68db      	ldr	r3, [r3, #12]
 800c42e:	3b01      	subs	r3, #1
 800c430:	041b      	lsls	r3, r3, #16
 800c432:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c436:	431a      	orrs	r2, r3
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	691b      	ldr	r3, [r3, #16]
 800c43c:	3b01      	subs	r3, #1
 800c43e:	061b      	lsls	r3, r3, #24
 800c440:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c444:	4931      	ldr	r1, [pc, #196]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c446:	4313      	orrs	r3, r2
 800c448:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c44a:	4b30      	ldr	r3, [pc, #192]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c44c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c44e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	695b      	ldr	r3, [r3, #20]
 800c456:	492d      	ldr	r1, [pc, #180]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c458:	4313      	orrs	r3, r2
 800c45a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c45c:	4b2b      	ldr	r3, [pc, #172]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c45e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c460:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	699b      	ldr	r3, [r3, #24]
 800c468:	4928      	ldr	r1, [pc, #160]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c46a:	4313      	orrs	r3, r2
 800c46c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c46e:	4b27      	ldr	r3, [pc, #156]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c472:	4a26      	ldr	r2, [pc, #152]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c474:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c478:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c47a:	4b24      	ldr	r3, [pc, #144]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c47c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c47e:	4b24      	ldr	r3, [pc, #144]	@ (800c510 <RCCEx_PLL3_Config+0x160>)
 800c480:	4013      	ands	r3, r2
 800c482:	687a      	ldr	r2, [r7, #4]
 800c484:	69d2      	ldr	r2, [r2, #28]
 800c486:	00d2      	lsls	r2, r2, #3
 800c488:	4920      	ldr	r1, [pc, #128]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c48a:	4313      	orrs	r3, r2
 800c48c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c48e:	4b1f      	ldr	r3, [pc, #124]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c492:	4a1e      	ldr	r2, [pc, #120]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c494:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c498:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d106      	bne.n	800c4ae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c4a0:	4b1a      	ldr	r3, [pc, #104]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c4a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4a4:	4a19      	ldr	r2, [pc, #100]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c4a6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800c4aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c4ac:	e00f      	b.n	800c4ce <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	2b01      	cmp	r3, #1
 800c4b2:	d106      	bne.n	800c4c2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c4b4:	4b15      	ldr	r3, [pc, #84]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c4b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4b8:	4a14      	ldr	r2, [pc, #80]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c4ba:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800c4be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800c4c0:	e005      	b.n	800c4ce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c4c2:	4b12      	ldr	r3, [pc, #72]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c4c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4c6:	4a11      	ldr	r2, [pc, #68]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c4c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c4cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c4ce:	4b0f      	ldr	r3, [pc, #60]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	4a0e      	ldr	r2, [pc, #56]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c4d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c4d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c4da:	f7f5 fb33 	bl	8001b44 <HAL_GetTick>
 800c4de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c4e0:	e008      	b.n	800c4f4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c4e2:	f7f5 fb2f 	bl	8001b44 <HAL_GetTick>
 800c4e6:	4602      	mov	r2, r0
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	1ad3      	subs	r3, r2, r3
 800c4ec:	2b02      	cmp	r3, #2
 800c4ee:	d901      	bls.n	800c4f4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c4f0:	2303      	movs	r3, #3
 800c4f2:	e006      	b.n	800c502 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c4f4:	4b05      	ldr	r3, [pc, #20]	@ (800c50c <RCCEx_PLL3_Config+0x15c>)
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d0f0      	beq.n	800c4e2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c500:	7bfb      	ldrb	r3, [r7, #15]
}
 800c502:	4618      	mov	r0, r3
 800c504:	3710      	adds	r7, #16
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}
 800c50a:	bf00      	nop
 800c50c:	58024400 	.word	0x58024400
 800c510:	ffff0007 	.word	0xffff0007

0800c514 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c514:	b580      	push	{r7, lr}
 800c516:	b084      	sub	sp, #16
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d101      	bne.n	800c526 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c522:	2301      	movs	r3, #1
 800c524:	e10f      	b.n	800c746 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	2200      	movs	r2, #0
 800c52a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	4a87      	ldr	r2, [pc, #540]	@ (800c750 <HAL_SPI_Init+0x23c>)
 800c532:	4293      	cmp	r3, r2
 800c534:	d00f      	beq.n	800c556 <HAL_SPI_Init+0x42>
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	4a86      	ldr	r2, [pc, #536]	@ (800c754 <HAL_SPI_Init+0x240>)
 800c53c:	4293      	cmp	r3, r2
 800c53e:	d00a      	beq.n	800c556 <HAL_SPI_Init+0x42>
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	4a84      	ldr	r2, [pc, #528]	@ (800c758 <HAL_SPI_Init+0x244>)
 800c546:	4293      	cmp	r3, r2
 800c548:	d005      	beq.n	800c556 <HAL_SPI_Init+0x42>
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	68db      	ldr	r3, [r3, #12]
 800c54e:	2b0f      	cmp	r3, #15
 800c550:	d901      	bls.n	800c556 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800c552:	2301      	movs	r3, #1
 800c554:	e0f7      	b.n	800c746 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f000 fba6 	bl	800cca8 <SPI_GetPacketSize>
 800c55c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	4a7b      	ldr	r2, [pc, #492]	@ (800c750 <HAL_SPI_Init+0x23c>)
 800c564:	4293      	cmp	r3, r2
 800c566:	d00c      	beq.n	800c582 <HAL_SPI_Init+0x6e>
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	4a79      	ldr	r2, [pc, #484]	@ (800c754 <HAL_SPI_Init+0x240>)
 800c56e:	4293      	cmp	r3, r2
 800c570:	d007      	beq.n	800c582 <HAL_SPI_Init+0x6e>
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	4a78      	ldr	r2, [pc, #480]	@ (800c758 <HAL_SPI_Init+0x244>)
 800c578:	4293      	cmp	r3, r2
 800c57a:	d002      	beq.n	800c582 <HAL_SPI_Init+0x6e>
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	2b08      	cmp	r3, #8
 800c580:	d811      	bhi.n	800c5a6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800c586:	4a72      	ldr	r2, [pc, #456]	@ (800c750 <HAL_SPI_Init+0x23c>)
 800c588:	4293      	cmp	r3, r2
 800c58a:	d009      	beq.n	800c5a0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	4a70      	ldr	r2, [pc, #448]	@ (800c754 <HAL_SPI_Init+0x240>)
 800c592:	4293      	cmp	r3, r2
 800c594:	d004      	beq.n	800c5a0 <HAL_SPI_Init+0x8c>
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	4a6f      	ldr	r2, [pc, #444]	@ (800c758 <HAL_SPI_Init+0x244>)
 800c59c:	4293      	cmp	r3, r2
 800c59e:	d104      	bne.n	800c5aa <HAL_SPI_Init+0x96>
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	2b10      	cmp	r3, #16
 800c5a4:	d901      	bls.n	800c5aa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800c5a6:	2301      	movs	r3, #1
 800c5a8:	e0cd      	b.n	800c746 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c5b0:	b2db      	uxtb	r3, r3
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d106      	bne.n	800c5c4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c5be:	6878      	ldr	r0, [r7, #4]
 800c5c0:	f7f4 ffec 	bl	800159c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	2202      	movs	r2, #2
 800c5c8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	681a      	ldr	r2, [r3, #0]
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f022 0201 	bic.w	r2, r2, #1
 800c5da:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	689b      	ldr	r3, [r3, #8]
 800c5e2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800c5e6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	699b      	ldr	r3, [r3, #24]
 800c5ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c5f0:	d119      	bne.n	800c626 <HAL_SPI_Init+0x112>
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	685b      	ldr	r3, [r3, #4]
 800c5f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c5fa:	d103      	bne.n	800c604 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800c600:	2b00      	cmp	r3, #0
 800c602:	d008      	beq.n	800c616 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d10c      	bne.n	800c626 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800c610:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c614:	d107      	bne.n	800c626 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	681a      	ldr	r2, [r3, #0]
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800c624:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	685b      	ldr	r3, [r3, #4]
 800c62a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d00f      	beq.n	800c652 <HAL_SPI_Init+0x13e>
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	68db      	ldr	r3, [r3, #12]
 800c636:	2b06      	cmp	r3, #6
 800c638:	d90b      	bls.n	800c652 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	430a      	orrs	r2, r1
 800c64e:	601a      	str	r2, [r3, #0]
 800c650:	e007      	b.n	800c662 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	681a      	ldr	r2, [r3, #0]
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c660:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	69da      	ldr	r2, [r3, #28]
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c66a:	431a      	orrs	r2, r3
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	431a      	orrs	r2, r3
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c674:	ea42 0103 	orr.w	r1, r2, r3
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	68da      	ldr	r2, [r3, #12]
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	430a      	orrs	r2, r1
 800c682:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c68c:	431a      	orrs	r2, r3
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c692:	431a      	orrs	r2, r3
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	699b      	ldr	r3, [r3, #24]
 800c698:	431a      	orrs	r2, r3
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	691b      	ldr	r3, [r3, #16]
 800c69e:	431a      	orrs	r2, r3
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	695b      	ldr	r3, [r3, #20]
 800c6a4:	431a      	orrs	r2, r3
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6a1b      	ldr	r3, [r3, #32]
 800c6aa:	431a      	orrs	r2, r3
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	685b      	ldr	r3, [r3, #4]
 800c6b0:	431a      	orrs	r2, r3
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c6b6:	431a      	orrs	r2, r3
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	689b      	ldr	r3, [r3, #8]
 800c6bc:	431a      	orrs	r2, r3
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c6c2:	ea42 0103 	orr.w	r1, r2, r3
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	430a      	orrs	r2, r1
 800c6d0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	685b      	ldr	r3, [r3, #4]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d113      	bne.n	800c702 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	689b      	ldr	r3, [r3, #8]
 800c6e0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c6ec:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	689b      	ldr	r3, [r3, #8]
 800c6f4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800c700:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f022 0201 	bic.w	r2, r2, #1
 800c710:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	685b      	ldr	r3, [r3, #4]
 800c716:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d00a      	beq.n	800c734 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	68db      	ldr	r3, [r3, #12]
 800c724:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	430a      	orrs	r2, r1
 800c732:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2200      	movs	r2, #0
 800c738:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	2201      	movs	r2, #1
 800c740:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800c744:	2300      	movs	r3, #0
}
 800c746:	4618      	mov	r0, r3
 800c748:	3710      	adds	r7, #16
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}
 800c74e:	bf00      	nop
 800c750:	40013000 	.word	0x40013000
 800c754:	40003800 	.word	0x40003800
 800c758:	40003c00 	.word	0x40003c00

0800c75c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b08a      	sub	sp, #40	@ 0x28
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	691b      	ldr	r3, [r3, #16]
 800c76a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	695b      	ldr	r3, [r3, #20]
 800c772:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800c774:	6a3a      	ldr	r2, [r7, #32]
 800c776:	69fb      	ldr	r3, [r7, #28]
 800c778:	4013      	ands	r3, r2
 800c77a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	689b      	ldr	r3, [r3, #8]
 800c782:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800c784:	2300      	movs	r3, #0
 800c786:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800c78e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	3330      	adds	r3, #48	@ 0x30
 800c796:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800c798:	69fb      	ldr	r3, [r7, #28]
 800c79a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d010      	beq.n	800c7c4 <HAL_SPI_IRQHandler+0x68>
 800c7a2:	6a3b      	ldr	r3, [r7, #32]
 800c7a4:	f003 0308 	and.w	r3, r3, #8
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d00b      	beq.n	800c7c4 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	699a      	ldr	r2, [r3, #24]
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c7ba:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f000 f9af 	bl	800cb20 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800c7c2:	e192      	b.n	800caea <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800c7c4:	69bb      	ldr	r3, [r7, #24]
 800c7c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d113      	bne.n	800c7f6 <HAL_SPI_IRQHandler+0x9a>
 800c7ce:	69bb      	ldr	r3, [r7, #24]
 800c7d0:	f003 0320 	and.w	r3, r3, #32
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d10e      	bne.n	800c7f6 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800c7d8:	69bb      	ldr	r3, [r7, #24]
 800c7da:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d009      	beq.n	800c7f6 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	4798      	blx	r3
    hspi->RxISR(hspi);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	4798      	blx	r3
    handled = 1UL;
 800c7f2:	2301      	movs	r3, #1
 800c7f4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800c7f6:	69bb      	ldr	r3, [r7, #24]
 800c7f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d10f      	bne.n	800c820 <HAL_SPI_IRQHandler+0xc4>
 800c800:	69bb      	ldr	r3, [r7, #24]
 800c802:	f003 0301 	and.w	r3, r3, #1
 800c806:	2b00      	cmp	r3, #0
 800c808:	d00a      	beq.n	800c820 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800c80a:	69bb      	ldr	r3, [r7, #24]
 800c80c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800c810:	2b00      	cmp	r3, #0
 800c812:	d105      	bne.n	800c820 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	4798      	blx	r3
    handled = 1UL;
 800c81c:	2301      	movs	r3, #1
 800c81e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800c820:	69bb      	ldr	r3, [r7, #24]
 800c822:	f003 0320 	and.w	r3, r3, #32
 800c826:	2b00      	cmp	r3, #0
 800c828:	d10f      	bne.n	800c84a <HAL_SPI_IRQHandler+0xee>
 800c82a:	69bb      	ldr	r3, [r7, #24]
 800c82c:	f003 0302 	and.w	r3, r3, #2
 800c830:	2b00      	cmp	r3, #0
 800c832:	d00a      	beq.n	800c84a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800c834:	69bb      	ldr	r3, [r7, #24]
 800c836:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d105      	bne.n	800c84a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	4798      	blx	r3
    handled = 1UL;
 800c846:	2301      	movs	r3, #1
 800c848:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800c84a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	f040 8147 	bne.w	800cae0 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800c852:	69bb      	ldr	r3, [r7, #24]
 800c854:	f003 0308 	and.w	r3, r3, #8
 800c858:	2b00      	cmp	r3, #0
 800c85a:	f000 808b 	beq.w	800c974 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	699a      	ldr	r2, [r3, #24]
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f042 0208 	orr.w	r2, r2, #8
 800c86c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	699a      	ldr	r2, [r3, #24]
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f042 0210 	orr.w	r2, r2, #16
 800c87c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	699a      	ldr	r2, [r3, #24]
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c88c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	691a      	ldr	r2, [r3, #16]
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	f022 0208 	bic.w	r2, r2, #8
 800c89c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	689b      	ldr	r3, [r3, #8]
 800c8a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d13d      	bne.n	800c928 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800c8ac:	e036      	b.n	800c91c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	68db      	ldr	r3, [r3, #12]
 800c8b2:	2b0f      	cmp	r3, #15
 800c8b4:	d90b      	bls.n	800c8ce <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681a      	ldr	r2, [r3, #0]
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8be:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800c8c0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8c6:	1d1a      	adds	r2, r3, #4
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	665a      	str	r2, [r3, #100]	@ 0x64
 800c8cc:	e01d      	b.n	800c90a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	68db      	ldr	r3, [r3, #12]
 800c8d2:	2b07      	cmp	r3, #7
 800c8d4:	d90b      	bls.n	800c8ee <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8da:	68fa      	ldr	r2, [r7, #12]
 800c8dc:	8812      	ldrh	r2, [r2, #0]
 800c8de:	b292      	uxth	r2, r2
 800c8e0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8e6:	1c9a      	adds	r2, r3, #2
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	665a      	str	r2, [r3, #100]	@ 0x64
 800c8ec:	e00d      	b.n	800c90a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c8fa:	7812      	ldrb	r2, [r2, #0]
 800c8fc:	b2d2      	uxtb	r2, r2
 800c8fe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c904:	1c5a      	adds	r2, r3, #1
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c910:	b29b      	uxth	r3, r3
 800c912:	3b01      	subs	r3, #1
 800c914:	b29a      	uxth	r2, r3
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800c922:	b29b      	uxth	r3, r3
 800c924:	2b00      	cmp	r3, #0
 800c926:	d1c2      	bne.n	800c8ae <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800c928:	6878      	ldr	r0, [r7, #4]
 800c92a:	f000 f91d 	bl	800cb68 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	2201      	movs	r2, #1
 800c932:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d003      	beq.n	800c948 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f000 f8e3 	bl	800cb0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800c946:	e0d0      	b.n	800caea <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800c948:	7cfb      	ldrb	r3, [r7, #19]
 800c94a:	2b05      	cmp	r3, #5
 800c94c:	d103      	bne.n	800c956 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f7f3 fcfe 	bl	8000350 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800c954:	e0c6      	b.n	800cae4 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800c956:	7cfb      	ldrb	r3, [r7, #19]
 800c958:	2b04      	cmp	r3, #4
 800c95a:	d103      	bne.n	800c964 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f000 f8cb 	bl	800caf8 <HAL_SPI_RxCpltCallback>
    return;
 800c962:	e0bf      	b.n	800cae4 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800c964:	7cfb      	ldrb	r3, [r7, #19]
 800c966:	2b03      	cmp	r3, #3
 800c968:	f040 80bc 	bne.w	800cae4 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f7f3 fcdf 	bl	8000330 <HAL_SPI_TxCpltCallback>
    return;
 800c972:	e0b7      	b.n	800cae4 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800c974:	69bb      	ldr	r3, [r7, #24]
 800c976:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	f000 80b5 	beq.w	800caea <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800c980:	69bb      	ldr	r3, [r7, #24]
 800c982:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c986:	2b00      	cmp	r3, #0
 800c988:	d00f      	beq.n	800c9aa <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c990:	f043 0204 	orr.w	r2, r3, #4
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	699a      	ldr	r2, [r3, #24]
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c9a8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800c9aa:	69bb      	ldr	r3, [r7, #24]
 800c9ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d00f      	beq.n	800c9d4 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c9ba:	f043 0201 	orr.w	r2, r3, #1
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	699a      	ldr	r2, [r3, #24]
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c9d2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800c9d4:	69bb      	ldr	r3, [r7, #24]
 800c9d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d00f      	beq.n	800c9fe <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c9e4:	f043 0208 	orr.w	r2, r3, #8
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	699a      	ldr	r2, [r3, #24]
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c9fc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800c9fe:	69bb      	ldr	r3, [r7, #24]
 800ca00:	f003 0320 	and.w	r3, r3, #32
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d00f      	beq.n	800ca28 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ca0e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	699a      	ldr	r2, [r3, #24]
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	f042 0220 	orr.w	r2, r2, #32
 800ca26:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d05a      	beq.n	800cae8 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	681a      	ldr	r2, [r3, #0]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f022 0201 	bic.w	r2, r2, #1
 800ca40:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	6919      	ldr	r1, [r3, #16]
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681a      	ldr	r2, [r3, #0]
 800ca4c:	4b28      	ldr	r3, [pc, #160]	@ (800caf0 <HAL_SPI_IRQHandler+0x394>)
 800ca4e:	400b      	ands	r3, r1
 800ca50:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800ca52:	697b      	ldr	r3, [r7, #20]
 800ca54:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ca58:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ca5c:	d138      	bne.n	800cad0 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	689a      	ldr	r2, [r3, #8]
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800ca6c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d013      	beq.n	800ca9e <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ca7a:	4a1e      	ldr	r2, [pc, #120]	@ (800caf4 <HAL_SPI_IRQHandler+0x398>)
 800ca7c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ca82:	4618      	mov	r0, r3
 800ca84:	f7f7 fd48 	bl	8004518 <HAL_DMA_Abort_IT>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d007      	beq.n	800ca9e <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ca94:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d020      	beq.n	800cae8 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800caaa:	4a12      	ldr	r2, [pc, #72]	@ (800caf4 <HAL_SPI_IRQHandler+0x398>)
 800caac:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cab2:	4618      	mov	r0, r3
 800cab4:	f7f7 fd30 	bl	8004518 <HAL_DMA_Abort_IT>
 800cab8:	4603      	mov	r3, r0
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d014      	beq.n	800cae8 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cac4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800cace:	e00b      	b.n	800cae8 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2201      	movs	r2, #1
 800cad4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f000 f817 	bl	800cb0c <HAL_SPI_ErrorCallback>
    return;
 800cade:	e003      	b.n	800cae8 <HAL_SPI_IRQHandler+0x38c>
    return;
 800cae0:	bf00      	nop
 800cae2:	e002      	b.n	800caea <HAL_SPI_IRQHandler+0x38e>
    return;
 800cae4:	bf00      	nop
 800cae6:	e000      	b.n	800caea <HAL_SPI_IRQHandler+0x38e>
    return;
 800cae8:	bf00      	nop
  }
}
 800caea:	3728      	adds	r7, #40	@ 0x28
 800caec:	46bd      	mov	sp, r7
 800caee:	bd80      	pop	{r7, pc}
 800caf0:	fffffc94 	.word	0xfffffc94
 800caf4:	0800cb35 	.word	0x0800cb35

0800caf8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800caf8:	b480      	push	{r7}
 800cafa:	b083      	sub	sp, #12
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800cb00:	bf00      	nop
 800cb02:	370c      	adds	r7, #12
 800cb04:	46bd      	mov	sp, r7
 800cb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0a:	4770      	bx	lr

0800cb0c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	b083      	sub	sp, #12
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800cb14:	bf00      	nop
 800cb16:	370c      	adds	r7, #12
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1e:	4770      	bx	lr

0800cb20 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800cb20:	b480      	push	{r7}
 800cb22:	b083      	sub	sp, #12
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800cb28:	bf00      	nop
 800cb2a:	370c      	adds	r7, #12
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb32:	4770      	bx	lr

0800cb34 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b084      	sub	sp, #16
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb40:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	2200      	movs	r2, #0
 800cb46:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	2201      	movs	r2, #1
 800cb56:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800cb5a:	68f8      	ldr	r0, [r7, #12]
 800cb5c:	f7ff ffd6 	bl	800cb0c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cb60:	bf00      	nop
 800cb62:	3710      	adds	r7, #16
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}

0800cb68 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b085      	sub	sp, #20
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	695b      	ldr	r3, [r3, #20]
 800cb76:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	699a      	ldr	r2, [r3, #24]
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	f042 0208 	orr.w	r2, r2, #8
 800cb86:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	699a      	ldr	r2, [r3, #24]
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	f042 0210 	orr.w	r2, r2, #16
 800cb96:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	681a      	ldr	r2, [r3, #0]
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	f022 0201 	bic.w	r2, r2, #1
 800cba6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	6919      	ldr	r1, [r3, #16]
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	681a      	ldr	r2, [r3, #0]
 800cbb2:	4b3c      	ldr	r3, [pc, #240]	@ (800cca4 <SPI_CloseTransfer+0x13c>)
 800cbb4:	400b      	ands	r3, r1
 800cbb6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	689a      	ldr	r2, [r3, #8]
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800cbc6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800cbce:	b2db      	uxtb	r3, r3
 800cbd0:	2b04      	cmp	r3, #4
 800cbd2:	d014      	beq.n	800cbfe <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	f003 0320 	and.w	r3, r3, #32
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d00f      	beq.n	800cbfe <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cbe4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	699a      	ldr	r2, [r3, #24]
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	f042 0220 	orr.w	r2, r2, #32
 800cbfc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800cc04:	b2db      	uxtb	r3, r3
 800cc06:	2b03      	cmp	r3, #3
 800cc08:	d014      	beq.n	800cc34 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d00f      	beq.n	800cc34 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cc1a:	f043 0204 	orr.w	r2, r3, #4
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	699a      	ldr	r2, [r3, #24]
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cc32:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d00f      	beq.n	800cc5e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cc44:	f043 0201 	orr.w	r2, r3, #1
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	699a      	ldr	r2, [r3, #24]
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800cc5c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d00f      	beq.n	800cc88 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cc6e:	f043 0208 	orr.w	r2, r3, #8
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	699a      	ldr	r2, [r3, #24]
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800cc86:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2200      	movs	r2, #0
 800cc94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800cc98:	bf00      	nop
 800cc9a:	3714      	adds	r7, #20
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca2:	4770      	bx	lr
 800cca4:	fffffc90 	.word	0xfffffc90

0800cca8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b085      	sub	sp, #20
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ccb4:	095b      	lsrs	r3, r3, #5
 800ccb6:	3301      	adds	r3, #1
 800ccb8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	68db      	ldr	r3, [r3, #12]
 800ccbe:	3301      	adds	r3, #1
 800ccc0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	3307      	adds	r3, #7
 800ccc6:	08db      	lsrs	r3, r3, #3
 800ccc8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ccca:	68bb      	ldr	r3, [r7, #8]
 800cccc:	68fa      	ldr	r2, [r7, #12]
 800ccce:	fb02 f303 	mul.w	r3, r2, r3
}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	3714      	adds	r7, #20
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccdc:	4770      	bx	lr
	...

0800cce0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cce0:	b084      	sub	sp, #16
 800cce2:	b580      	push	{r7, lr}
 800cce4:	b084      	sub	sp, #16
 800cce6:	af00      	add	r7, sp, #0
 800cce8:	6078      	str	r0, [r7, #4]
 800ccea:	f107 001c 	add.w	r0, r7, #28
 800ccee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ccf2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800ccf6:	2b01      	cmp	r3, #1
 800ccf8:	d121      	bne.n	800cd3e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccfe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	68da      	ldr	r2, [r3, #12]
 800cd0a:	4b2c      	ldr	r3, [pc, #176]	@ (800cdbc <USB_CoreInit+0xdc>)
 800cd0c:	4013      	ands	r3, r2
 800cd0e:	687a      	ldr	r2, [r7, #4]
 800cd10:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	68db      	ldr	r3, [r3, #12]
 800cd16:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800cd1e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800cd22:	2b01      	cmp	r3, #1
 800cd24:	d105      	bne.n	800cd32 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	68db      	ldr	r3, [r3, #12]
 800cd2a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cd32:	6878      	ldr	r0, [r7, #4]
 800cd34:	f001 fafa 	bl	800e32c <USB_CoreReset>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	73fb      	strb	r3, [r7, #15]
 800cd3c:	e01b      	b.n	800cd76 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	68db      	ldr	r3, [r3, #12]
 800cd42:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800cd4a:	6878      	ldr	r0, [r7, #4]
 800cd4c:	f001 faee 	bl	800e32c <USB_CoreReset>
 800cd50:	4603      	mov	r3, r0
 800cd52:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800cd54:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d106      	bne.n	800cd6a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd60:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	639a      	str	r2, [r3, #56]	@ 0x38
 800cd68:	e005      	b.n	800cd76 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd6e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800cd76:	7fbb      	ldrb	r3, [r7, #30]
 800cd78:	2b01      	cmp	r3, #1
 800cd7a:	d116      	bne.n	800cdaa <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd80:	b29a      	uxth	r2, r3
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800cd8a:	4b0d      	ldr	r3, [pc, #52]	@ (800cdc0 <USB_CoreInit+0xe0>)
 800cd8c:	4313      	orrs	r3, r2
 800cd8e:	687a      	ldr	r2, [r7, #4]
 800cd90:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	689b      	ldr	r3, [r3, #8]
 800cd96:	f043 0206 	orr.w	r2, r3, #6
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	689b      	ldr	r3, [r3, #8]
 800cda2:	f043 0220 	orr.w	r2, r3, #32
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800cdaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdac:	4618      	mov	r0, r3
 800cdae:	3710      	adds	r7, #16
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cdb6:	b004      	add	sp, #16
 800cdb8:	4770      	bx	lr
 800cdba:	bf00      	nop
 800cdbc:	ffbdffbf 	.word	0xffbdffbf
 800cdc0:	03ee0000 	.word	0x03ee0000

0800cdc4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	b087      	sub	sp, #28
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	60f8      	str	r0, [r7, #12]
 800cdcc:	60b9      	str	r1, [r7, #8]
 800cdce:	4613      	mov	r3, r2
 800cdd0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800cdd2:	79fb      	ldrb	r3, [r7, #7]
 800cdd4:	2b02      	cmp	r3, #2
 800cdd6:	d165      	bne.n	800cea4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800cdd8:	68bb      	ldr	r3, [r7, #8]
 800cdda:	4a41      	ldr	r2, [pc, #260]	@ (800cee0 <USB_SetTurnaroundTime+0x11c>)
 800cddc:	4293      	cmp	r3, r2
 800cdde:	d906      	bls.n	800cdee <USB_SetTurnaroundTime+0x2a>
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	4a40      	ldr	r2, [pc, #256]	@ (800cee4 <USB_SetTurnaroundTime+0x120>)
 800cde4:	4293      	cmp	r3, r2
 800cde6:	d202      	bcs.n	800cdee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800cde8:	230f      	movs	r3, #15
 800cdea:	617b      	str	r3, [r7, #20]
 800cdec:	e062      	b.n	800ceb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	4a3c      	ldr	r2, [pc, #240]	@ (800cee4 <USB_SetTurnaroundTime+0x120>)
 800cdf2:	4293      	cmp	r3, r2
 800cdf4:	d306      	bcc.n	800ce04 <USB_SetTurnaroundTime+0x40>
 800cdf6:	68bb      	ldr	r3, [r7, #8]
 800cdf8:	4a3b      	ldr	r2, [pc, #236]	@ (800cee8 <USB_SetTurnaroundTime+0x124>)
 800cdfa:	4293      	cmp	r3, r2
 800cdfc:	d202      	bcs.n	800ce04 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800cdfe:	230e      	movs	r3, #14
 800ce00:	617b      	str	r3, [r7, #20]
 800ce02:	e057      	b.n	800ceb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ce04:	68bb      	ldr	r3, [r7, #8]
 800ce06:	4a38      	ldr	r2, [pc, #224]	@ (800cee8 <USB_SetTurnaroundTime+0x124>)
 800ce08:	4293      	cmp	r3, r2
 800ce0a:	d306      	bcc.n	800ce1a <USB_SetTurnaroundTime+0x56>
 800ce0c:	68bb      	ldr	r3, [r7, #8]
 800ce0e:	4a37      	ldr	r2, [pc, #220]	@ (800ceec <USB_SetTurnaroundTime+0x128>)
 800ce10:	4293      	cmp	r3, r2
 800ce12:	d202      	bcs.n	800ce1a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ce14:	230d      	movs	r3, #13
 800ce16:	617b      	str	r3, [r7, #20]
 800ce18:	e04c      	b.n	800ceb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ce1a:	68bb      	ldr	r3, [r7, #8]
 800ce1c:	4a33      	ldr	r2, [pc, #204]	@ (800ceec <USB_SetTurnaroundTime+0x128>)
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	d306      	bcc.n	800ce30 <USB_SetTurnaroundTime+0x6c>
 800ce22:	68bb      	ldr	r3, [r7, #8]
 800ce24:	4a32      	ldr	r2, [pc, #200]	@ (800cef0 <USB_SetTurnaroundTime+0x12c>)
 800ce26:	4293      	cmp	r3, r2
 800ce28:	d802      	bhi.n	800ce30 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ce2a:	230c      	movs	r3, #12
 800ce2c:	617b      	str	r3, [r7, #20]
 800ce2e:	e041      	b.n	800ceb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	4a2f      	ldr	r2, [pc, #188]	@ (800cef0 <USB_SetTurnaroundTime+0x12c>)
 800ce34:	4293      	cmp	r3, r2
 800ce36:	d906      	bls.n	800ce46 <USB_SetTurnaroundTime+0x82>
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	4a2e      	ldr	r2, [pc, #184]	@ (800cef4 <USB_SetTurnaroundTime+0x130>)
 800ce3c:	4293      	cmp	r3, r2
 800ce3e:	d802      	bhi.n	800ce46 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ce40:	230b      	movs	r3, #11
 800ce42:	617b      	str	r3, [r7, #20]
 800ce44:	e036      	b.n	800ceb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	4a2a      	ldr	r2, [pc, #168]	@ (800cef4 <USB_SetTurnaroundTime+0x130>)
 800ce4a:	4293      	cmp	r3, r2
 800ce4c:	d906      	bls.n	800ce5c <USB_SetTurnaroundTime+0x98>
 800ce4e:	68bb      	ldr	r3, [r7, #8]
 800ce50:	4a29      	ldr	r2, [pc, #164]	@ (800cef8 <USB_SetTurnaroundTime+0x134>)
 800ce52:	4293      	cmp	r3, r2
 800ce54:	d802      	bhi.n	800ce5c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ce56:	230a      	movs	r3, #10
 800ce58:	617b      	str	r3, [r7, #20]
 800ce5a:	e02b      	b.n	800ceb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ce5c:	68bb      	ldr	r3, [r7, #8]
 800ce5e:	4a26      	ldr	r2, [pc, #152]	@ (800cef8 <USB_SetTurnaroundTime+0x134>)
 800ce60:	4293      	cmp	r3, r2
 800ce62:	d906      	bls.n	800ce72 <USB_SetTurnaroundTime+0xae>
 800ce64:	68bb      	ldr	r3, [r7, #8]
 800ce66:	4a25      	ldr	r2, [pc, #148]	@ (800cefc <USB_SetTurnaroundTime+0x138>)
 800ce68:	4293      	cmp	r3, r2
 800ce6a:	d202      	bcs.n	800ce72 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ce6c:	2309      	movs	r3, #9
 800ce6e:	617b      	str	r3, [r7, #20]
 800ce70:	e020      	b.n	800ceb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	4a21      	ldr	r2, [pc, #132]	@ (800cefc <USB_SetTurnaroundTime+0x138>)
 800ce76:	4293      	cmp	r3, r2
 800ce78:	d306      	bcc.n	800ce88 <USB_SetTurnaroundTime+0xc4>
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	4a20      	ldr	r2, [pc, #128]	@ (800cf00 <USB_SetTurnaroundTime+0x13c>)
 800ce7e:	4293      	cmp	r3, r2
 800ce80:	d802      	bhi.n	800ce88 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ce82:	2308      	movs	r3, #8
 800ce84:	617b      	str	r3, [r7, #20]
 800ce86:	e015      	b.n	800ceb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	4a1d      	ldr	r2, [pc, #116]	@ (800cf00 <USB_SetTurnaroundTime+0x13c>)
 800ce8c:	4293      	cmp	r3, r2
 800ce8e:	d906      	bls.n	800ce9e <USB_SetTurnaroundTime+0xda>
 800ce90:	68bb      	ldr	r3, [r7, #8]
 800ce92:	4a1c      	ldr	r2, [pc, #112]	@ (800cf04 <USB_SetTurnaroundTime+0x140>)
 800ce94:	4293      	cmp	r3, r2
 800ce96:	d202      	bcs.n	800ce9e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ce98:	2307      	movs	r3, #7
 800ce9a:	617b      	str	r3, [r7, #20]
 800ce9c:	e00a      	b.n	800ceb4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ce9e:	2306      	movs	r3, #6
 800cea0:	617b      	str	r3, [r7, #20]
 800cea2:	e007      	b.n	800ceb4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800cea4:	79fb      	ldrb	r3, [r7, #7]
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d102      	bne.n	800ceb0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ceaa:	2309      	movs	r3, #9
 800ceac:	617b      	str	r3, [r7, #20]
 800ceae:	e001      	b.n	800ceb4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ceb0:	2309      	movs	r3, #9
 800ceb2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	68db      	ldr	r3, [r3, #12]
 800ceb8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	68da      	ldr	r2, [r3, #12]
 800cec4:	697b      	ldr	r3, [r7, #20]
 800cec6:	029b      	lsls	r3, r3, #10
 800cec8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800cecc:	431a      	orrs	r2, r3
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ced2:	2300      	movs	r3, #0
}
 800ced4:	4618      	mov	r0, r3
 800ced6:	371c      	adds	r7, #28
 800ced8:	46bd      	mov	sp, r7
 800ceda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cede:	4770      	bx	lr
 800cee0:	00d8acbf 	.word	0x00d8acbf
 800cee4:	00e4e1c0 	.word	0x00e4e1c0
 800cee8:	00f42400 	.word	0x00f42400
 800ceec:	01067380 	.word	0x01067380
 800cef0:	011a499f 	.word	0x011a499f
 800cef4:	01312cff 	.word	0x01312cff
 800cef8:	014ca43f 	.word	0x014ca43f
 800cefc:	016e3600 	.word	0x016e3600
 800cf00:	01a6ab1f 	.word	0x01a6ab1f
 800cf04:	01e84800 	.word	0x01e84800

0800cf08 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b083      	sub	sp, #12
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	689b      	ldr	r3, [r3, #8]
 800cf14:	f043 0201 	orr.w	r2, r3, #1
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cf1c:	2300      	movs	r3, #0
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	370c      	adds	r7, #12
 800cf22:	46bd      	mov	sp, r7
 800cf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf28:	4770      	bx	lr

0800cf2a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800cf2a:	b480      	push	{r7}
 800cf2c:	b083      	sub	sp, #12
 800cf2e:	af00      	add	r7, sp, #0
 800cf30:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	689b      	ldr	r3, [r3, #8]
 800cf36:	f023 0201 	bic.w	r2, r3, #1
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800cf3e:	2300      	movs	r3, #0
}
 800cf40:	4618      	mov	r0, r3
 800cf42:	370c      	adds	r7, #12
 800cf44:	46bd      	mov	sp, r7
 800cf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4a:	4770      	bx	lr

0800cf4c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b084      	sub	sp, #16
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
 800cf54:	460b      	mov	r3, r1
 800cf56:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800cf58:	2300      	movs	r3, #0
 800cf5a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	68db      	ldr	r3, [r3, #12]
 800cf60:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800cf68:	78fb      	ldrb	r3, [r7, #3]
 800cf6a:	2b01      	cmp	r3, #1
 800cf6c:	d115      	bne.n	800cf9a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	68db      	ldr	r3, [r3, #12]
 800cf72:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800cf7a:	200a      	movs	r0, #10
 800cf7c:	f7f4 fdee 	bl	8001b5c <HAL_Delay>
      ms += 10U;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	330a      	adds	r3, #10
 800cf84:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f001 f93f 	bl	800e20a <USB_GetMode>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	2b01      	cmp	r3, #1
 800cf90:	d01e      	beq.n	800cfd0 <USB_SetCurrentMode+0x84>
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	2bc7      	cmp	r3, #199	@ 0xc7
 800cf96:	d9f0      	bls.n	800cf7a <USB_SetCurrentMode+0x2e>
 800cf98:	e01a      	b.n	800cfd0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800cf9a:	78fb      	ldrb	r3, [r7, #3]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d115      	bne.n	800cfcc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	68db      	ldr	r3, [r3, #12]
 800cfa4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800cfac:	200a      	movs	r0, #10
 800cfae:	f7f4 fdd5 	bl	8001b5c <HAL_Delay>
      ms += 10U;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	330a      	adds	r3, #10
 800cfb6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800cfb8:	6878      	ldr	r0, [r7, #4]
 800cfba:	f001 f926 	bl	800e20a <USB_GetMode>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d005      	beq.n	800cfd0 <USB_SetCurrentMode+0x84>
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	2bc7      	cmp	r3, #199	@ 0xc7
 800cfc8:	d9f0      	bls.n	800cfac <USB_SetCurrentMode+0x60>
 800cfca:	e001      	b.n	800cfd0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800cfcc:	2301      	movs	r3, #1
 800cfce:	e005      	b.n	800cfdc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	2bc8      	cmp	r3, #200	@ 0xc8
 800cfd4:	d101      	bne.n	800cfda <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	e000      	b.n	800cfdc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800cfda:	2300      	movs	r3, #0
}
 800cfdc:	4618      	mov	r0, r3
 800cfde:	3710      	adds	r7, #16
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}

0800cfe4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cfe4:	b084      	sub	sp, #16
 800cfe6:	b580      	push	{r7, lr}
 800cfe8:	b086      	sub	sp, #24
 800cfea:	af00      	add	r7, sp, #0
 800cfec:	6078      	str	r0, [r7, #4]
 800cfee:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800cff2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cff6:	2300      	movs	r3, #0
 800cff8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800cffe:	2300      	movs	r3, #0
 800d000:	613b      	str	r3, [r7, #16]
 800d002:	e009      	b.n	800d018 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800d004:	687a      	ldr	r2, [r7, #4]
 800d006:	693b      	ldr	r3, [r7, #16]
 800d008:	3340      	adds	r3, #64	@ 0x40
 800d00a:	009b      	lsls	r3, r3, #2
 800d00c:	4413      	add	r3, r2
 800d00e:	2200      	movs	r2, #0
 800d010:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800d012:	693b      	ldr	r3, [r7, #16]
 800d014:	3301      	adds	r3, #1
 800d016:	613b      	str	r3, [r7, #16]
 800d018:	693b      	ldr	r3, [r7, #16]
 800d01a:	2b0e      	cmp	r3, #14
 800d01c:	d9f2      	bls.n	800d004 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800d01e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d022:	2b00      	cmp	r3, #0
 800d024:	d11c      	bne.n	800d060 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d02c:	685b      	ldr	r3, [r3, #4]
 800d02e:	68fa      	ldr	r2, [r7, #12]
 800d030:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d034:	f043 0302 	orr.w	r3, r3, #2
 800d038:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d03e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	601a      	str	r2, [r3, #0]
 800d05e:	e005      	b.n	800d06c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d064:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d072:	461a      	mov	r2, r3
 800d074:	2300      	movs	r3, #0
 800d076:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d078:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800d07c:	2b01      	cmp	r3, #1
 800d07e:	d10d      	bne.n	800d09c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800d080:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d084:	2b00      	cmp	r3, #0
 800d086:	d104      	bne.n	800d092 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800d088:	2100      	movs	r1, #0
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	f000 f968 	bl	800d360 <USB_SetDevSpeed>
 800d090:	e008      	b.n	800d0a4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800d092:	2101      	movs	r1, #1
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f000 f963 	bl	800d360 <USB_SetDevSpeed>
 800d09a:	e003      	b.n	800d0a4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800d09c:	2103      	movs	r1, #3
 800d09e:	6878      	ldr	r0, [r7, #4]
 800d0a0:	f000 f95e 	bl	800d360 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d0a4:	2110      	movs	r1, #16
 800d0a6:	6878      	ldr	r0, [r7, #4]
 800d0a8:	f000 f8fa 	bl	800d2a0 <USB_FlushTxFifo>
 800d0ac:	4603      	mov	r3, r0
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d001      	beq.n	800d0b6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	f000 f924 	bl	800d304 <USB_FlushRxFifo>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d001      	beq.n	800d0c6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800d0c2:	2301      	movs	r3, #1
 800d0c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d0cc:	461a      	mov	r2, r3
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d0d8:	461a      	mov	r2, r3
 800d0da:	2300      	movs	r3, #0
 800d0dc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d0e4:	461a      	mov	r2, r3
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	613b      	str	r3, [r7, #16]
 800d0ee:	e043      	b.n	800d178 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d0f0:	693b      	ldr	r3, [r7, #16]
 800d0f2:	015a      	lsls	r2, r3, #5
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	4413      	add	r3, r2
 800d0f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d102:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d106:	d118      	bne.n	800d13a <USB_DevInit+0x156>
    {
      if (i == 0U)
 800d108:	693b      	ldr	r3, [r7, #16]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d10a      	bne.n	800d124 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800d10e:	693b      	ldr	r3, [r7, #16]
 800d110:	015a      	lsls	r2, r3, #5
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	4413      	add	r3, r2
 800d116:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d11a:	461a      	mov	r2, r3
 800d11c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d120:	6013      	str	r3, [r2, #0]
 800d122:	e013      	b.n	800d14c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800d124:	693b      	ldr	r3, [r7, #16]
 800d126:	015a      	lsls	r2, r3, #5
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	4413      	add	r3, r2
 800d12c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d130:	461a      	mov	r2, r3
 800d132:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d136:	6013      	str	r3, [r2, #0]
 800d138:	e008      	b.n	800d14c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800d13a:	693b      	ldr	r3, [r7, #16]
 800d13c:	015a      	lsls	r2, r3, #5
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	4413      	add	r3, r2
 800d142:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d146:	461a      	mov	r2, r3
 800d148:	2300      	movs	r3, #0
 800d14a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800d14c:	693b      	ldr	r3, [r7, #16]
 800d14e:	015a      	lsls	r2, r3, #5
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	4413      	add	r3, r2
 800d154:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d158:	461a      	mov	r2, r3
 800d15a:	2300      	movs	r3, #0
 800d15c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800d15e:	693b      	ldr	r3, [r7, #16]
 800d160:	015a      	lsls	r2, r3, #5
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	4413      	add	r3, r2
 800d166:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d16a:	461a      	mov	r2, r3
 800d16c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d170:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d172:	693b      	ldr	r3, [r7, #16]
 800d174:	3301      	adds	r3, #1
 800d176:	613b      	str	r3, [r7, #16]
 800d178:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d17c:	461a      	mov	r2, r3
 800d17e:	693b      	ldr	r3, [r7, #16]
 800d180:	4293      	cmp	r3, r2
 800d182:	d3b5      	bcc.n	800d0f0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d184:	2300      	movs	r3, #0
 800d186:	613b      	str	r3, [r7, #16]
 800d188:	e043      	b.n	800d212 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d18a:	693b      	ldr	r3, [r7, #16]
 800d18c:	015a      	lsls	r2, r3, #5
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	4413      	add	r3, r2
 800d192:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d19c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d1a0:	d118      	bne.n	800d1d4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800d1a2:	693b      	ldr	r3, [r7, #16]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d10a      	bne.n	800d1be <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	015a      	lsls	r2, r3, #5
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	4413      	add	r3, r2
 800d1b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d1b4:	461a      	mov	r2, r3
 800d1b6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800d1ba:	6013      	str	r3, [r2, #0]
 800d1bc:	e013      	b.n	800d1e6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800d1be:	693b      	ldr	r3, [r7, #16]
 800d1c0:	015a      	lsls	r2, r3, #5
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	4413      	add	r3, r2
 800d1c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800d1d0:	6013      	str	r3, [r2, #0]
 800d1d2:	e008      	b.n	800d1e6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800d1d4:	693b      	ldr	r3, [r7, #16]
 800d1d6:	015a      	lsls	r2, r3, #5
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	4413      	add	r3, r2
 800d1dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d1e0:	461a      	mov	r2, r3
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800d1e6:	693b      	ldr	r3, [r7, #16]
 800d1e8:	015a      	lsls	r2, r3, #5
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	4413      	add	r3, r2
 800d1ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d1f2:	461a      	mov	r2, r3
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800d1f8:	693b      	ldr	r3, [r7, #16]
 800d1fa:	015a      	lsls	r2, r3, #5
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	4413      	add	r3, r2
 800d200:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d204:	461a      	mov	r2, r3
 800d206:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800d20a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800d20c:	693b      	ldr	r3, [r7, #16]
 800d20e:	3301      	adds	r3, #1
 800d210:	613b      	str	r3, [r7, #16]
 800d212:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d216:	461a      	mov	r2, r3
 800d218:	693b      	ldr	r3, [r7, #16]
 800d21a:	4293      	cmp	r3, r2
 800d21c:	d3b5      	bcc.n	800d18a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d224:	691b      	ldr	r3, [r3, #16]
 800d226:	68fa      	ldr	r2, [r7, #12]
 800d228:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800d22c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d230:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2200      	movs	r2, #0
 800d236:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800d23e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d240:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d244:	2b00      	cmp	r3, #0
 800d246:	d105      	bne.n	800d254 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	699b      	ldr	r3, [r3, #24]
 800d24c:	f043 0210 	orr.w	r2, r3, #16
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	699a      	ldr	r2, [r3, #24]
 800d258:	4b0f      	ldr	r3, [pc, #60]	@ (800d298 <USB_DevInit+0x2b4>)
 800d25a:	4313      	orrs	r3, r2
 800d25c:	687a      	ldr	r2, [r7, #4]
 800d25e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800d260:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800d264:	2b00      	cmp	r3, #0
 800d266:	d005      	beq.n	800d274 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	699b      	ldr	r3, [r3, #24]
 800d26c:	f043 0208 	orr.w	r2, r3, #8
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800d274:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800d278:	2b01      	cmp	r3, #1
 800d27a:	d105      	bne.n	800d288 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	699a      	ldr	r2, [r3, #24]
 800d280:	4b06      	ldr	r3, [pc, #24]	@ (800d29c <USB_DevInit+0x2b8>)
 800d282:	4313      	orrs	r3, r2
 800d284:	687a      	ldr	r2, [r7, #4]
 800d286:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800d288:	7dfb      	ldrb	r3, [r7, #23]
}
 800d28a:	4618      	mov	r0, r3
 800d28c:	3718      	adds	r7, #24
 800d28e:	46bd      	mov	sp, r7
 800d290:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d294:	b004      	add	sp, #16
 800d296:	4770      	bx	lr
 800d298:	803c3800 	.word	0x803c3800
 800d29c:	40000004 	.word	0x40000004

0800d2a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d2a0:	b480      	push	{r7}
 800d2a2:	b085      	sub	sp, #20
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
 800d2a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d2aa:	2300      	movs	r3, #0
 800d2ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	3301      	adds	r3, #1
 800d2b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d2ba:	d901      	bls.n	800d2c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d2bc:	2303      	movs	r3, #3
 800d2be:	e01b      	b.n	800d2f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	691b      	ldr	r3, [r3, #16]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	daf2      	bge.n	800d2ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d2cc:	683b      	ldr	r3, [r7, #0]
 800d2ce:	019b      	lsls	r3, r3, #6
 800d2d0:	f043 0220 	orr.w	r2, r3, #32
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	3301      	adds	r3, #1
 800d2dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d2e4:	d901      	bls.n	800d2ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d2e6:	2303      	movs	r3, #3
 800d2e8:	e006      	b.n	800d2f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	691b      	ldr	r3, [r3, #16]
 800d2ee:	f003 0320 	and.w	r3, r3, #32
 800d2f2:	2b20      	cmp	r3, #32
 800d2f4:	d0f0      	beq.n	800d2d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d2f6:	2300      	movs	r3, #0
}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	3714      	adds	r7, #20
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d302:	4770      	bx	lr

0800d304 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d304:	b480      	push	{r7}
 800d306:	b085      	sub	sp, #20
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d30c:	2300      	movs	r3, #0
 800d30e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	3301      	adds	r3, #1
 800d314:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d31c:	d901      	bls.n	800d322 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d31e:	2303      	movs	r3, #3
 800d320:	e018      	b.n	800d354 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	691b      	ldr	r3, [r3, #16]
 800d326:	2b00      	cmp	r3, #0
 800d328:	daf2      	bge.n	800d310 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d32a:	2300      	movs	r3, #0
 800d32c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	2210      	movs	r2, #16
 800d332:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d334:	68fb      	ldr	r3, [r7, #12]
 800d336:	3301      	adds	r3, #1
 800d338:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d340:	d901      	bls.n	800d346 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d342:	2303      	movs	r3, #3
 800d344:	e006      	b.n	800d354 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	691b      	ldr	r3, [r3, #16]
 800d34a:	f003 0310 	and.w	r3, r3, #16
 800d34e:	2b10      	cmp	r3, #16
 800d350:	d0f0      	beq.n	800d334 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d352:	2300      	movs	r3, #0
}
 800d354:	4618      	mov	r0, r3
 800d356:	3714      	adds	r7, #20
 800d358:	46bd      	mov	sp, r7
 800d35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35e:	4770      	bx	lr

0800d360 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800d360:	b480      	push	{r7}
 800d362:	b085      	sub	sp, #20
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
 800d368:	460b      	mov	r3, r1
 800d36a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d376:	681a      	ldr	r2, [r3, #0]
 800d378:	78fb      	ldrb	r3, [r7, #3]
 800d37a:	68f9      	ldr	r1, [r7, #12]
 800d37c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d380:	4313      	orrs	r3, r2
 800d382:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800d384:	2300      	movs	r3, #0
}
 800d386:	4618      	mov	r0, r3
 800d388:	3714      	adds	r7, #20
 800d38a:	46bd      	mov	sp, r7
 800d38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d390:	4770      	bx	lr

0800d392 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800d392:	b480      	push	{r7}
 800d394:	b087      	sub	sp, #28
 800d396:	af00      	add	r7, sp, #0
 800d398:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800d39e:	693b      	ldr	r3, [r7, #16]
 800d3a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d3a4:	689b      	ldr	r3, [r3, #8]
 800d3a6:	f003 0306 	and.w	r3, r3, #6
 800d3aa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d102      	bne.n	800d3b8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	75fb      	strb	r3, [r7, #23]
 800d3b6:	e00a      	b.n	800d3ce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	2b02      	cmp	r3, #2
 800d3bc:	d002      	beq.n	800d3c4 <USB_GetDevSpeed+0x32>
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	2b06      	cmp	r3, #6
 800d3c2:	d102      	bne.n	800d3ca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800d3c4:	2302      	movs	r3, #2
 800d3c6:	75fb      	strb	r3, [r7, #23]
 800d3c8:	e001      	b.n	800d3ce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800d3ca:	230f      	movs	r3, #15
 800d3cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800d3ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	371c      	adds	r7, #28
 800d3d4:	46bd      	mov	sp, r7
 800d3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3da:	4770      	bx	lr

0800d3dc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800d3dc:	b480      	push	{r7}
 800d3de:	b085      	sub	sp, #20
 800d3e0:	af00      	add	r7, sp, #0
 800d3e2:	6078      	str	r0, [r7, #4]
 800d3e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	781b      	ldrb	r3, [r3, #0]
 800d3ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	785b      	ldrb	r3, [r3, #1]
 800d3f4:	2b01      	cmp	r3, #1
 800d3f6:	d139      	bne.n	800d46c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d3fe:	69da      	ldr	r2, [r3, #28]
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	781b      	ldrb	r3, [r3, #0]
 800d404:	f003 030f 	and.w	r3, r3, #15
 800d408:	2101      	movs	r1, #1
 800d40a:	fa01 f303 	lsl.w	r3, r1, r3
 800d40e:	b29b      	uxth	r3, r3
 800d410:	68f9      	ldr	r1, [r7, #12]
 800d412:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d416:	4313      	orrs	r3, r2
 800d418:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	015a      	lsls	r2, r3, #5
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	4413      	add	r3, r2
 800d422:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d153      	bne.n	800d4d8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d430:	68bb      	ldr	r3, [r7, #8]
 800d432:	015a      	lsls	r2, r3, #5
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	4413      	add	r3, r2
 800d438:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d43c:	681a      	ldr	r2, [r3, #0]
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	689b      	ldr	r3, [r3, #8]
 800d442:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	791b      	ldrb	r3, [r3, #4]
 800d44a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d44c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	059b      	lsls	r3, r3, #22
 800d452:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800d454:	431a      	orrs	r2, r3
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	0159      	lsls	r1, r3, #5
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	440b      	add	r3, r1
 800d45e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d462:	4619      	mov	r1, r3
 800d464:	4b20      	ldr	r3, [pc, #128]	@ (800d4e8 <USB_ActivateEndpoint+0x10c>)
 800d466:	4313      	orrs	r3, r2
 800d468:	600b      	str	r3, [r1, #0]
 800d46a:	e035      	b.n	800d4d8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d472:	69da      	ldr	r2, [r3, #28]
 800d474:	683b      	ldr	r3, [r7, #0]
 800d476:	781b      	ldrb	r3, [r3, #0]
 800d478:	f003 030f 	and.w	r3, r3, #15
 800d47c:	2101      	movs	r1, #1
 800d47e:	fa01 f303 	lsl.w	r3, r1, r3
 800d482:	041b      	lsls	r3, r3, #16
 800d484:	68f9      	ldr	r1, [r7, #12]
 800d486:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d48a:	4313      	orrs	r3, r2
 800d48c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800d48e:	68bb      	ldr	r3, [r7, #8]
 800d490:	015a      	lsls	r2, r3, #5
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	4413      	add	r3, r2
 800d496:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d119      	bne.n	800d4d8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	015a      	lsls	r2, r3, #5
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	4413      	add	r3, r2
 800d4ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d4b0:	681a      	ldr	r2, [r3, #0]
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	689b      	ldr	r3, [r3, #8]
 800d4b6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	791b      	ldrb	r3, [r3, #4]
 800d4be:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800d4c0:	430b      	orrs	r3, r1
 800d4c2:	431a      	orrs	r2, r3
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	0159      	lsls	r1, r3, #5
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	440b      	add	r3, r1
 800d4cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d4d0:	4619      	mov	r1, r3
 800d4d2:	4b05      	ldr	r3, [pc, #20]	@ (800d4e8 <USB_ActivateEndpoint+0x10c>)
 800d4d4:	4313      	orrs	r3, r2
 800d4d6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800d4d8:	2300      	movs	r3, #0
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	3714      	adds	r7, #20
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e4:	4770      	bx	lr
 800d4e6:	bf00      	nop
 800d4e8:	10008000 	.word	0x10008000

0800d4ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800d4ec:	b480      	push	{r7}
 800d4ee:	b085      	sub	sp, #20
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
 800d4f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d4fa:	683b      	ldr	r3, [r7, #0]
 800d4fc:	781b      	ldrb	r3, [r3, #0]
 800d4fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	785b      	ldrb	r3, [r3, #1]
 800d504:	2b01      	cmp	r3, #1
 800d506:	d161      	bne.n	800d5cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800d508:	68bb      	ldr	r3, [r7, #8]
 800d50a:	015a      	lsls	r2, r3, #5
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	4413      	add	r3, r2
 800d510:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d51a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d51e:	d11f      	bne.n	800d560 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	015a      	lsls	r2, r3, #5
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	4413      	add	r3, r2
 800d528:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	68ba      	ldr	r2, [r7, #8]
 800d530:	0151      	lsls	r1, r2, #5
 800d532:	68fa      	ldr	r2, [r7, #12]
 800d534:	440a      	add	r2, r1
 800d536:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d53a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d53e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	015a      	lsls	r2, r3, #5
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	4413      	add	r3, r2
 800d548:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	68ba      	ldr	r2, [r7, #8]
 800d550:	0151      	lsls	r1, r2, #5
 800d552:	68fa      	ldr	r2, [r7, #12]
 800d554:	440a      	add	r2, r1
 800d556:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d55a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d55e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d566:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	781b      	ldrb	r3, [r3, #0]
 800d56c:	f003 030f 	and.w	r3, r3, #15
 800d570:	2101      	movs	r1, #1
 800d572:	fa01 f303 	lsl.w	r3, r1, r3
 800d576:	b29b      	uxth	r3, r3
 800d578:	43db      	mvns	r3, r3
 800d57a:	68f9      	ldr	r1, [r7, #12]
 800d57c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d580:	4013      	ands	r3, r2
 800d582:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d58a:	69da      	ldr	r2, [r3, #28]
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	781b      	ldrb	r3, [r3, #0]
 800d590:	f003 030f 	and.w	r3, r3, #15
 800d594:	2101      	movs	r1, #1
 800d596:	fa01 f303 	lsl.w	r3, r1, r3
 800d59a:	b29b      	uxth	r3, r3
 800d59c:	43db      	mvns	r3, r3
 800d59e:	68f9      	ldr	r1, [r7, #12]
 800d5a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d5a4:	4013      	ands	r3, r2
 800d5a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	015a      	lsls	r2, r3, #5
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	4413      	add	r3, r2
 800d5b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d5b4:	681a      	ldr	r2, [r3, #0]
 800d5b6:	68bb      	ldr	r3, [r7, #8]
 800d5b8:	0159      	lsls	r1, r3, #5
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	440b      	add	r3, r1
 800d5be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d5c2:	4619      	mov	r1, r3
 800d5c4:	4b35      	ldr	r3, [pc, #212]	@ (800d69c <USB_DeactivateEndpoint+0x1b0>)
 800d5c6:	4013      	ands	r3, r2
 800d5c8:	600b      	str	r3, [r1, #0]
 800d5ca:	e060      	b.n	800d68e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d5cc:	68bb      	ldr	r3, [r7, #8]
 800d5ce:	015a      	lsls	r2, r3, #5
 800d5d0:	68fb      	ldr	r3, [r7, #12]
 800d5d2:	4413      	add	r3, r2
 800d5d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800d5de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800d5e2:	d11f      	bne.n	800d624 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800d5e4:	68bb      	ldr	r3, [r7, #8]
 800d5e6:	015a      	lsls	r2, r3, #5
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	4413      	add	r3, r2
 800d5ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	68ba      	ldr	r2, [r7, #8]
 800d5f4:	0151      	lsls	r1, r2, #5
 800d5f6:	68fa      	ldr	r2, [r7, #12]
 800d5f8:	440a      	add	r2, r1
 800d5fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d5fe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800d602:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800d604:	68bb      	ldr	r3, [r7, #8]
 800d606:	015a      	lsls	r2, r3, #5
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	4413      	add	r3, r2
 800d60c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	68ba      	ldr	r2, [r7, #8]
 800d614:	0151      	lsls	r1, r2, #5
 800d616:	68fa      	ldr	r2, [r7, #12]
 800d618:	440a      	add	r2, r1
 800d61a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800d61e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800d622:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d62a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	781b      	ldrb	r3, [r3, #0]
 800d630:	f003 030f 	and.w	r3, r3, #15
 800d634:	2101      	movs	r1, #1
 800d636:	fa01 f303 	lsl.w	r3, r1, r3
 800d63a:	041b      	lsls	r3, r3, #16
 800d63c:	43db      	mvns	r3, r3
 800d63e:	68f9      	ldr	r1, [r7, #12]
 800d640:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d644:	4013      	ands	r3, r2
 800d646:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d64e:	69da      	ldr	r2, [r3, #28]
 800d650:	683b      	ldr	r3, [r7, #0]
 800d652:	781b      	ldrb	r3, [r3, #0]
 800d654:	f003 030f 	and.w	r3, r3, #15
 800d658:	2101      	movs	r1, #1
 800d65a:	fa01 f303 	lsl.w	r3, r1, r3
 800d65e:	041b      	lsls	r3, r3, #16
 800d660:	43db      	mvns	r3, r3
 800d662:	68f9      	ldr	r1, [r7, #12]
 800d664:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d668:	4013      	ands	r3, r2
 800d66a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	015a      	lsls	r2, r3, #5
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	4413      	add	r3, r2
 800d674:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d678:	681a      	ldr	r2, [r3, #0]
 800d67a:	68bb      	ldr	r3, [r7, #8]
 800d67c:	0159      	lsls	r1, r3, #5
 800d67e:	68fb      	ldr	r3, [r7, #12]
 800d680:	440b      	add	r3, r1
 800d682:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d686:	4619      	mov	r1, r3
 800d688:	4b05      	ldr	r3, [pc, #20]	@ (800d6a0 <USB_DeactivateEndpoint+0x1b4>)
 800d68a:	4013      	ands	r3, r2
 800d68c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800d68e:	2300      	movs	r3, #0
}
 800d690:	4618      	mov	r0, r3
 800d692:	3714      	adds	r7, #20
 800d694:	46bd      	mov	sp, r7
 800d696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d69a:	4770      	bx	lr
 800d69c:	ec337800 	.word	0xec337800
 800d6a0:	eff37800 	.word	0xeff37800

0800d6a4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b08a      	sub	sp, #40	@ 0x28
 800d6a8:	af02      	add	r7, sp, #8
 800d6aa:	60f8      	str	r0, [r7, #12]
 800d6ac:	60b9      	str	r1, [r7, #8]
 800d6ae:	4613      	mov	r3, r2
 800d6b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	781b      	ldrb	r3, [r3, #0]
 800d6ba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d6bc:	68bb      	ldr	r3, [r7, #8]
 800d6be:	785b      	ldrb	r3, [r3, #1]
 800d6c0:	2b01      	cmp	r3, #1
 800d6c2:	f040 8185 	bne.w	800d9d0 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	691b      	ldr	r3, [r3, #16]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d132      	bne.n	800d734 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d6ce:	69bb      	ldr	r3, [r7, #24]
 800d6d0:	015a      	lsls	r2, r3, #5
 800d6d2:	69fb      	ldr	r3, [r7, #28]
 800d6d4:	4413      	add	r3, r2
 800d6d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d6da:	691a      	ldr	r2, [r3, #16]
 800d6dc:	69bb      	ldr	r3, [r7, #24]
 800d6de:	0159      	lsls	r1, r3, #5
 800d6e0:	69fb      	ldr	r3, [r7, #28]
 800d6e2:	440b      	add	r3, r1
 800d6e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d6e8:	4619      	mov	r1, r3
 800d6ea:	4ba7      	ldr	r3, [pc, #668]	@ (800d988 <USB_EPStartXfer+0x2e4>)
 800d6ec:	4013      	ands	r3, r2
 800d6ee:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d6f0:	69bb      	ldr	r3, [r7, #24]
 800d6f2:	015a      	lsls	r2, r3, #5
 800d6f4:	69fb      	ldr	r3, [r7, #28]
 800d6f6:	4413      	add	r3, r2
 800d6f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d6fc:	691b      	ldr	r3, [r3, #16]
 800d6fe:	69ba      	ldr	r2, [r7, #24]
 800d700:	0151      	lsls	r1, r2, #5
 800d702:	69fa      	ldr	r2, [r7, #28]
 800d704:	440a      	add	r2, r1
 800d706:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d70a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d70e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d710:	69bb      	ldr	r3, [r7, #24]
 800d712:	015a      	lsls	r2, r3, #5
 800d714:	69fb      	ldr	r3, [r7, #28]
 800d716:	4413      	add	r3, r2
 800d718:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d71c:	691a      	ldr	r2, [r3, #16]
 800d71e:	69bb      	ldr	r3, [r7, #24]
 800d720:	0159      	lsls	r1, r3, #5
 800d722:	69fb      	ldr	r3, [r7, #28]
 800d724:	440b      	add	r3, r1
 800d726:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d72a:	4619      	mov	r1, r3
 800d72c:	4b97      	ldr	r3, [pc, #604]	@ (800d98c <USB_EPStartXfer+0x2e8>)
 800d72e:	4013      	ands	r3, r2
 800d730:	610b      	str	r3, [r1, #16]
 800d732:	e097      	b.n	800d864 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d734:	69bb      	ldr	r3, [r7, #24]
 800d736:	015a      	lsls	r2, r3, #5
 800d738:	69fb      	ldr	r3, [r7, #28]
 800d73a:	4413      	add	r3, r2
 800d73c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d740:	691a      	ldr	r2, [r3, #16]
 800d742:	69bb      	ldr	r3, [r7, #24]
 800d744:	0159      	lsls	r1, r3, #5
 800d746:	69fb      	ldr	r3, [r7, #28]
 800d748:	440b      	add	r3, r1
 800d74a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d74e:	4619      	mov	r1, r3
 800d750:	4b8e      	ldr	r3, [pc, #568]	@ (800d98c <USB_EPStartXfer+0x2e8>)
 800d752:	4013      	ands	r3, r2
 800d754:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d756:	69bb      	ldr	r3, [r7, #24]
 800d758:	015a      	lsls	r2, r3, #5
 800d75a:	69fb      	ldr	r3, [r7, #28]
 800d75c:	4413      	add	r3, r2
 800d75e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d762:	691a      	ldr	r2, [r3, #16]
 800d764:	69bb      	ldr	r3, [r7, #24]
 800d766:	0159      	lsls	r1, r3, #5
 800d768:	69fb      	ldr	r3, [r7, #28]
 800d76a:	440b      	add	r3, r1
 800d76c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d770:	4619      	mov	r1, r3
 800d772:	4b85      	ldr	r3, [pc, #532]	@ (800d988 <USB_EPStartXfer+0x2e4>)
 800d774:	4013      	ands	r3, r2
 800d776:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800d778:	69bb      	ldr	r3, [r7, #24]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d11a      	bne.n	800d7b4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800d77e:	68bb      	ldr	r3, [r7, #8]
 800d780:	691a      	ldr	r2, [r3, #16]
 800d782:	68bb      	ldr	r3, [r7, #8]
 800d784:	689b      	ldr	r3, [r3, #8]
 800d786:	429a      	cmp	r2, r3
 800d788:	d903      	bls.n	800d792 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	689a      	ldr	r2, [r3, #8]
 800d78e:	68bb      	ldr	r3, [r7, #8]
 800d790:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d792:	69bb      	ldr	r3, [r7, #24]
 800d794:	015a      	lsls	r2, r3, #5
 800d796:	69fb      	ldr	r3, [r7, #28]
 800d798:	4413      	add	r3, r2
 800d79a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d79e:	691b      	ldr	r3, [r3, #16]
 800d7a0:	69ba      	ldr	r2, [r7, #24]
 800d7a2:	0151      	lsls	r1, r2, #5
 800d7a4:	69fa      	ldr	r2, [r7, #28]
 800d7a6:	440a      	add	r2, r1
 800d7a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d7ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800d7b0:	6113      	str	r3, [r2, #16]
 800d7b2:	e044      	b.n	800d83e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d7b4:	68bb      	ldr	r3, [r7, #8]
 800d7b6:	691a      	ldr	r2, [r3, #16]
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	689b      	ldr	r3, [r3, #8]
 800d7bc:	4413      	add	r3, r2
 800d7be:	1e5a      	subs	r2, r3, #1
 800d7c0:	68bb      	ldr	r3, [r7, #8]
 800d7c2:	689b      	ldr	r3, [r3, #8]
 800d7c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7c8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800d7ca:	69bb      	ldr	r3, [r7, #24]
 800d7cc:	015a      	lsls	r2, r3, #5
 800d7ce:	69fb      	ldr	r3, [r7, #28]
 800d7d0:	4413      	add	r3, r2
 800d7d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d7d6:	691a      	ldr	r2, [r3, #16]
 800d7d8:	8afb      	ldrh	r3, [r7, #22]
 800d7da:	04d9      	lsls	r1, r3, #19
 800d7dc:	4b6c      	ldr	r3, [pc, #432]	@ (800d990 <USB_EPStartXfer+0x2ec>)
 800d7de:	400b      	ands	r3, r1
 800d7e0:	69b9      	ldr	r1, [r7, #24]
 800d7e2:	0148      	lsls	r0, r1, #5
 800d7e4:	69f9      	ldr	r1, [r7, #28]
 800d7e6:	4401      	add	r1, r0
 800d7e8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800d7ec:	4313      	orrs	r3, r2
 800d7ee:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800d7f0:	68bb      	ldr	r3, [r7, #8]
 800d7f2:	791b      	ldrb	r3, [r3, #4]
 800d7f4:	2b01      	cmp	r3, #1
 800d7f6:	d122      	bne.n	800d83e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d7f8:	69bb      	ldr	r3, [r7, #24]
 800d7fa:	015a      	lsls	r2, r3, #5
 800d7fc:	69fb      	ldr	r3, [r7, #28]
 800d7fe:	4413      	add	r3, r2
 800d800:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d804:	691b      	ldr	r3, [r3, #16]
 800d806:	69ba      	ldr	r2, [r7, #24]
 800d808:	0151      	lsls	r1, r2, #5
 800d80a:	69fa      	ldr	r2, [r7, #28]
 800d80c:	440a      	add	r2, r1
 800d80e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d812:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800d816:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800d818:	69bb      	ldr	r3, [r7, #24]
 800d81a:	015a      	lsls	r2, r3, #5
 800d81c:	69fb      	ldr	r3, [r7, #28]
 800d81e:	4413      	add	r3, r2
 800d820:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d824:	691a      	ldr	r2, [r3, #16]
 800d826:	8afb      	ldrh	r3, [r7, #22]
 800d828:	075b      	lsls	r3, r3, #29
 800d82a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800d82e:	69b9      	ldr	r1, [r7, #24]
 800d830:	0148      	lsls	r0, r1, #5
 800d832:	69f9      	ldr	r1, [r7, #28]
 800d834:	4401      	add	r1, r0
 800d836:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800d83a:	4313      	orrs	r3, r2
 800d83c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d83e:	69bb      	ldr	r3, [r7, #24]
 800d840:	015a      	lsls	r2, r3, #5
 800d842:	69fb      	ldr	r3, [r7, #28]
 800d844:	4413      	add	r3, r2
 800d846:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d84a:	691a      	ldr	r2, [r3, #16]
 800d84c:	68bb      	ldr	r3, [r7, #8]
 800d84e:	691b      	ldr	r3, [r3, #16]
 800d850:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d854:	69b9      	ldr	r1, [r7, #24]
 800d856:	0148      	lsls	r0, r1, #5
 800d858:	69f9      	ldr	r1, [r7, #28]
 800d85a:	4401      	add	r1, r0
 800d85c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800d860:	4313      	orrs	r3, r2
 800d862:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d864:	79fb      	ldrb	r3, [r7, #7]
 800d866:	2b01      	cmp	r3, #1
 800d868:	d14b      	bne.n	800d902 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d86a:	68bb      	ldr	r3, [r7, #8]
 800d86c:	69db      	ldr	r3, [r3, #28]
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d009      	beq.n	800d886 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d872:	69bb      	ldr	r3, [r7, #24]
 800d874:	015a      	lsls	r2, r3, #5
 800d876:	69fb      	ldr	r3, [r7, #28]
 800d878:	4413      	add	r3, r2
 800d87a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d87e:	461a      	mov	r2, r3
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	69db      	ldr	r3, [r3, #28]
 800d884:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	791b      	ldrb	r3, [r3, #4]
 800d88a:	2b01      	cmp	r3, #1
 800d88c:	d128      	bne.n	800d8e0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d88e:	69fb      	ldr	r3, [r7, #28]
 800d890:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d894:	689b      	ldr	r3, [r3, #8]
 800d896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d110      	bne.n	800d8c0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d89e:	69bb      	ldr	r3, [r7, #24]
 800d8a0:	015a      	lsls	r2, r3, #5
 800d8a2:	69fb      	ldr	r3, [r7, #28]
 800d8a4:	4413      	add	r3, r2
 800d8a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	69ba      	ldr	r2, [r7, #24]
 800d8ae:	0151      	lsls	r1, r2, #5
 800d8b0:	69fa      	ldr	r2, [r7, #28]
 800d8b2:	440a      	add	r2, r1
 800d8b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d8b8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d8bc:	6013      	str	r3, [r2, #0]
 800d8be:	e00f      	b.n	800d8e0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d8c0:	69bb      	ldr	r3, [r7, #24]
 800d8c2:	015a      	lsls	r2, r3, #5
 800d8c4:	69fb      	ldr	r3, [r7, #28]
 800d8c6:	4413      	add	r3, r2
 800d8c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	69ba      	ldr	r2, [r7, #24]
 800d8d0:	0151      	lsls	r1, r2, #5
 800d8d2:	69fa      	ldr	r2, [r7, #28]
 800d8d4:	440a      	add	r2, r1
 800d8d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d8da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d8de:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d8e0:	69bb      	ldr	r3, [r7, #24]
 800d8e2:	015a      	lsls	r2, r3, #5
 800d8e4:	69fb      	ldr	r3, [r7, #28]
 800d8e6:	4413      	add	r3, r2
 800d8e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	69ba      	ldr	r2, [r7, #24]
 800d8f0:	0151      	lsls	r1, r2, #5
 800d8f2:	69fa      	ldr	r2, [r7, #28]
 800d8f4:	440a      	add	r2, r1
 800d8f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d8fa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800d8fe:	6013      	str	r3, [r2, #0]
 800d900:	e169      	b.n	800dbd6 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d902:	69bb      	ldr	r3, [r7, #24]
 800d904:	015a      	lsls	r2, r3, #5
 800d906:	69fb      	ldr	r3, [r7, #28]
 800d908:	4413      	add	r3, r2
 800d90a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	69ba      	ldr	r2, [r7, #24]
 800d912:	0151      	lsls	r1, r2, #5
 800d914:	69fa      	ldr	r2, [r7, #28]
 800d916:	440a      	add	r2, r1
 800d918:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d91c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800d920:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	791b      	ldrb	r3, [r3, #4]
 800d926:	2b01      	cmp	r3, #1
 800d928:	d015      	beq.n	800d956 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d92a:	68bb      	ldr	r3, [r7, #8]
 800d92c:	691b      	ldr	r3, [r3, #16]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	f000 8151 	beq.w	800dbd6 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d934:	69fb      	ldr	r3, [r7, #28]
 800d936:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d93a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d93c:	68bb      	ldr	r3, [r7, #8]
 800d93e:	781b      	ldrb	r3, [r3, #0]
 800d940:	f003 030f 	and.w	r3, r3, #15
 800d944:	2101      	movs	r1, #1
 800d946:	fa01 f303 	lsl.w	r3, r1, r3
 800d94a:	69f9      	ldr	r1, [r7, #28]
 800d94c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d950:	4313      	orrs	r3, r2
 800d952:	634b      	str	r3, [r1, #52]	@ 0x34
 800d954:	e13f      	b.n	800dbd6 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d956:	69fb      	ldr	r3, [r7, #28]
 800d958:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d95c:	689b      	ldr	r3, [r3, #8]
 800d95e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d962:	2b00      	cmp	r3, #0
 800d964:	d116      	bne.n	800d994 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d966:	69bb      	ldr	r3, [r7, #24]
 800d968:	015a      	lsls	r2, r3, #5
 800d96a:	69fb      	ldr	r3, [r7, #28]
 800d96c:	4413      	add	r3, r2
 800d96e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	69ba      	ldr	r2, [r7, #24]
 800d976:	0151      	lsls	r1, r2, #5
 800d978:	69fa      	ldr	r2, [r7, #28]
 800d97a:	440a      	add	r2, r1
 800d97c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d980:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d984:	6013      	str	r3, [r2, #0]
 800d986:	e015      	b.n	800d9b4 <USB_EPStartXfer+0x310>
 800d988:	e007ffff 	.word	0xe007ffff
 800d98c:	fff80000 	.word	0xfff80000
 800d990:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d994:	69bb      	ldr	r3, [r7, #24]
 800d996:	015a      	lsls	r2, r3, #5
 800d998:	69fb      	ldr	r3, [r7, #28]
 800d99a:	4413      	add	r3, r2
 800d99c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	69ba      	ldr	r2, [r7, #24]
 800d9a4:	0151      	lsls	r1, r2, #5
 800d9a6:	69fa      	ldr	r2, [r7, #28]
 800d9a8:	440a      	add	r2, r1
 800d9aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800d9ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d9b2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d9b4:	68bb      	ldr	r3, [r7, #8]
 800d9b6:	68d9      	ldr	r1, [r3, #12]
 800d9b8:	68bb      	ldr	r3, [r7, #8]
 800d9ba:	781a      	ldrb	r2, [r3, #0]
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	691b      	ldr	r3, [r3, #16]
 800d9c0:	b298      	uxth	r0, r3
 800d9c2:	79fb      	ldrb	r3, [r7, #7]
 800d9c4:	9300      	str	r3, [sp, #0]
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	68f8      	ldr	r0, [r7, #12]
 800d9ca:	f000 f9b9 	bl	800dd40 <USB_WritePacket>
 800d9ce:	e102      	b.n	800dbd6 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d9d0:	69bb      	ldr	r3, [r7, #24]
 800d9d2:	015a      	lsls	r2, r3, #5
 800d9d4:	69fb      	ldr	r3, [r7, #28]
 800d9d6:	4413      	add	r3, r2
 800d9d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d9dc:	691a      	ldr	r2, [r3, #16]
 800d9de:	69bb      	ldr	r3, [r7, #24]
 800d9e0:	0159      	lsls	r1, r3, #5
 800d9e2:	69fb      	ldr	r3, [r7, #28]
 800d9e4:	440b      	add	r3, r1
 800d9e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d9ea:	4619      	mov	r1, r3
 800d9ec:	4b7c      	ldr	r3, [pc, #496]	@ (800dbe0 <USB_EPStartXfer+0x53c>)
 800d9ee:	4013      	ands	r3, r2
 800d9f0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d9f2:	69bb      	ldr	r3, [r7, #24]
 800d9f4:	015a      	lsls	r2, r3, #5
 800d9f6:	69fb      	ldr	r3, [r7, #28]
 800d9f8:	4413      	add	r3, r2
 800d9fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d9fe:	691a      	ldr	r2, [r3, #16]
 800da00:	69bb      	ldr	r3, [r7, #24]
 800da02:	0159      	lsls	r1, r3, #5
 800da04:	69fb      	ldr	r3, [r7, #28]
 800da06:	440b      	add	r3, r1
 800da08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da0c:	4619      	mov	r1, r3
 800da0e:	4b75      	ldr	r3, [pc, #468]	@ (800dbe4 <USB_EPStartXfer+0x540>)
 800da10:	4013      	ands	r3, r2
 800da12:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800da14:	69bb      	ldr	r3, [r7, #24]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d12f      	bne.n	800da7a <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	691b      	ldr	r3, [r3, #16]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d003      	beq.n	800da2a <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800da22:	68bb      	ldr	r3, [r7, #8]
 800da24:	689a      	ldr	r2, [r3, #8]
 800da26:	68bb      	ldr	r3, [r7, #8]
 800da28:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800da2a:	68bb      	ldr	r3, [r7, #8]
 800da2c:	689a      	ldr	r2, [r3, #8]
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800da32:	69bb      	ldr	r3, [r7, #24]
 800da34:	015a      	lsls	r2, r3, #5
 800da36:	69fb      	ldr	r3, [r7, #28]
 800da38:	4413      	add	r3, r2
 800da3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da3e:	691a      	ldr	r2, [r3, #16]
 800da40:	68bb      	ldr	r3, [r7, #8]
 800da42:	6a1b      	ldr	r3, [r3, #32]
 800da44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800da48:	69b9      	ldr	r1, [r7, #24]
 800da4a:	0148      	lsls	r0, r1, #5
 800da4c:	69f9      	ldr	r1, [r7, #28]
 800da4e:	4401      	add	r1, r0
 800da50:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800da54:	4313      	orrs	r3, r2
 800da56:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800da58:	69bb      	ldr	r3, [r7, #24]
 800da5a:	015a      	lsls	r2, r3, #5
 800da5c:	69fb      	ldr	r3, [r7, #28]
 800da5e:	4413      	add	r3, r2
 800da60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da64:	691b      	ldr	r3, [r3, #16]
 800da66:	69ba      	ldr	r2, [r7, #24]
 800da68:	0151      	lsls	r1, r2, #5
 800da6a:	69fa      	ldr	r2, [r7, #28]
 800da6c:	440a      	add	r2, r1
 800da6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800da72:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800da76:	6113      	str	r3, [r2, #16]
 800da78:	e05f      	b.n	800db3a <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800da7a:	68bb      	ldr	r3, [r7, #8]
 800da7c:	691b      	ldr	r3, [r3, #16]
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d123      	bne.n	800daca <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800da82:	69bb      	ldr	r3, [r7, #24]
 800da84:	015a      	lsls	r2, r3, #5
 800da86:	69fb      	ldr	r3, [r7, #28]
 800da88:	4413      	add	r3, r2
 800da8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800da8e:	691a      	ldr	r2, [r3, #16]
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	689b      	ldr	r3, [r3, #8]
 800da94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800da98:	69b9      	ldr	r1, [r7, #24]
 800da9a:	0148      	lsls	r0, r1, #5
 800da9c:	69f9      	ldr	r1, [r7, #28]
 800da9e:	4401      	add	r1, r0
 800daa0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800daa4:	4313      	orrs	r3, r2
 800daa6:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800daa8:	69bb      	ldr	r3, [r7, #24]
 800daaa:	015a      	lsls	r2, r3, #5
 800daac:	69fb      	ldr	r3, [r7, #28]
 800daae:	4413      	add	r3, r2
 800dab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dab4:	691b      	ldr	r3, [r3, #16]
 800dab6:	69ba      	ldr	r2, [r7, #24]
 800dab8:	0151      	lsls	r1, r2, #5
 800daba:	69fa      	ldr	r2, [r7, #28]
 800dabc:	440a      	add	r2, r1
 800dabe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dac2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800dac6:	6113      	str	r3, [r2, #16]
 800dac8:	e037      	b.n	800db3a <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800daca:	68bb      	ldr	r3, [r7, #8]
 800dacc:	691a      	ldr	r2, [r3, #16]
 800dace:	68bb      	ldr	r3, [r7, #8]
 800dad0:	689b      	ldr	r3, [r3, #8]
 800dad2:	4413      	add	r3, r2
 800dad4:	1e5a      	subs	r2, r3, #1
 800dad6:	68bb      	ldr	r3, [r7, #8]
 800dad8:	689b      	ldr	r3, [r3, #8]
 800dada:	fbb2 f3f3 	udiv	r3, r2, r3
 800dade:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800dae0:	68bb      	ldr	r3, [r7, #8]
 800dae2:	689b      	ldr	r3, [r3, #8]
 800dae4:	8afa      	ldrh	r2, [r7, #22]
 800dae6:	fb03 f202 	mul.w	r2, r3, r2
 800daea:	68bb      	ldr	r3, [r7, #8]
 800daec:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800daee:	69bb      	ldr	r3, [r7, #24]
 800daf0:	015a      	lsls	r2, r3, #5
 800daf2:	69fb      	ldr	r3, [r7, #28]
 800daf4:	4413      	add	r3, r2
 800daf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dafa:	691a      	ldr	r2, [r3, #16]
 800dafc:	8afb      	ldrh	r3, [r7, #22]
 800dafe:	04d9      	lsls	r1, r3, #19
 800db00:	4b39      	ldr	r3, [pc, #228]	@ (800dbe8 <USB_EPStartXfer+0x544>)
 800db02:	400b      	ands	r3, r1
 800db04:	69b9      	ldr	r1, [r7, #24]
 800db06:	0148      	lsls	r0, r1, #5
 800db08:	69f9      	ldr	r1, [r7, #28]
 800db0a:	4401      	add	r1, r0
 800db0c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800db10:	4313      	orrs	r3, r2
 800db12:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800db14:	69bb      	ldr	r3, [r7, #24]
 800db16:	015a      	lsls	r2, r3, #5
 800db18:	69fb      	ldr	r3, [r7, #28]
 800db1a:	4413      	add	r3, r2
 800db1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800db20:	691a      	ldr	r2, [r3, #16]
 800db22:	68bb      	ldr	r3, [r7, #8]
 800db24:	6a1b      	ldr	r3, [r3, #32]
 800db26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800db2a:	69b9      	ldr	r1, [r7, #24]
 800db2c:	0148      	lsls	r0, r1, #5
 800db2e:	69f9      	ldr	r1, [r7, #28]
 800db30:	4401      	add	r1, r0
 800db32:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800db36:	4313      	orrs	r3, r2
 800db38:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800db3a:	79fb      	ldrb	r3, [r7, #7]
 800db3c:	2b01      	cmp	r3, #1
 800db3e:	d10d      	bne.n	800db5c <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	68db      	ldr	r3, [r3, #12]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d009      	beq.n	800db5c <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800db48:	68bb      	ldr	r3, [r7, #8]
 800db4a:	68d9      	ldr	r1, [r3, #12]
 800db4c:	69bb      	ldr	r3, [r7, #24]
 800db4e:	015a      	lsls	r2, r3, #5
 800db50:	69fb      	ldr	r3, [r7, #28]
 800db52:	4413      	add	r3, r2
 800db54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800db58:	460a      	mov	r2, r1
 800db5a:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	791b      	ldrb	r3, [r3, #4]
 800db60:	2b01      	cmp	r3, #1
 800db62:	d128      	bne.n	800dbb6 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800db64:	69fb      	ldr	r3, [r7, #28]
 800db66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800db6a:	689b      	ldr	r3, [r3, #8]
 800db6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800db70:	2b00      	cmp	r3, #0
 800db72:	d110      	bne.n	800db96 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800db74:	69bb      	ldr	r3, [r7, #24]
 800db76:	015a      	lsls	r2, r3, #5
 800db78:	69fb      	ldr	r3, [r7, #28]
 800db7a:	4413      	add	r3, r2
 800db7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	69ba      	ldr	r2, [r7, #24]
 800db84:	0151      	lsls	r1, r2, #5
 800db86:	69fa      	ldr	r2, [r7, #28]
 800db88:	440a      	add	r2, r1
 800db8a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800db8e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800db92:	6013      	str	r3, [r2, #0]
 800db94:	e00f      	b.n	800dbb6 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800db96:	69bb      	ldr	r3, [r7, #24]
 800db98:	015a      	lsls	r2, r3, #5
 800db9a:	69fb      	ldr	r3, [r7, #28]
 800db9c:	4413      	add	r3, r2
 800db9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	69ba      	ldr	r2, [r7, #24]
 800dba6:	0151      	lsls	r1, r2, #5
 800dba8:	69fa      	ldr	r2, [r7, #28]
 800dbaa:	440a      	add	r2, r1
 800dbac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dbb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dbb4:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800dbb6:	69bb      	ldr	r3, [r7, #24]
 800dbb8:	015a      	lsls	r2, r3, #5
 800dbba:	69fb      	ldr	r3, [r7, #28]
 800dbbc:	4413      	add	r3, r2
 800dbbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	69ba      	ldr	r2, [r7, #24]
 800dbc6:	0151      	lsls	r1, r2, #5
 800dbc8:	69fa      	ldr	r2, [r7, #28]
 800dbca:	440a      	add	r2, r1
 800dbcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dbd0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800dbd4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dbd6:	2300      	movs	r3, #0
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3720      	adds	r7, #32
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}
 800dbe0:	fff80000 	.word	0xfff80000
 800dbe4:	e007ffff 	.word	0xe007ffff
 800dbe8:	1ff80000 	.word	0x1ff80000

0800dbec <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800dbec:	b480      	push	{r7}
 800dbee:	b087      	sub	sp, #28
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	6078      	str	r0, [r7, #4]
 800dbf4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800dc02:	683b      	ldr	r3, [r7, #0]
 800dc04:	785b      	ldrb	r3, [r3, #1]
 800dc06:	2b01      	cmp	r3, #1
 800dc08:	d14a      	bne.n	800dca0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dc0a:	683b      	ldr	r3, [r7, #0]
 800dc0c:	781b      	ldrb	r3, [r3, #0]
 800dc0e:	015a      	lsls	r2, r3, #5
 800dc10:	693b      	ldr	r3, [r7, #16]
 800dc12:	4413      	add	r3, r2
 800dc14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dc1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dc22:	f040 8086 	bne.w	800dd32 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800dc26:	683b      	ldr	r3, [r7, #0]
 800dc28:	781b      	ldrb	r3, [r3, #0]
 800dc2a:	015a      	lsls	r2, r3, #5
 800dc2c:	693b      	ldr	r3, [r7, #16]
 800dc2e:	4413      	add	r3, r2
 800dc30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	683a      	ldr	r2, [r7, #0]
 800dc38:	7812      	ldrb	r2, [r2, #0]
 800dc3a:	0151      	lsls	r1, r2, #5
 800dc3c:	693a      	ldr	r2, [r7, #16]
 800dc3e:	440a      	add	r2, r1
 800dc40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dc44:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800dc48:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	781b      	ldrb	r3, [r3, #0]
 800dc4e:	015a      	lsls	r2, r3, #5
 800dc50:	693b      	ldr	r3, [r7, #16]
 800dc52:	4413      	add	r3, r2
 800dc54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	683a      	ldr	r2, [r7, #0]
 800dc5c:	7812      	ldrb	r2, [r2, #0]
 800dc5e:	0151      	lsls	r1, r2, #5
 800dc60:	693a      	ldr	r2, [r7, #16]
 800dc62:	440a      	add	r2, r1
 800dc64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dc68:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800dc6c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	3301      	adds	r3, #1
 800dc72:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	f242 7210 	movw	r2, #10000	@ 0x2710
 800dc7a:	4293      	cmp	r3, r2
 800dc7c:	d902      	bls.n	800dc84 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800dc7e:	2301      	movs	r3, #1
 800dc80:	75fb      	strb	r3, [r7, #23]
          break;
 800dc82:	e056      	b.n	800dd32 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	781b      	ldrb	r3, [r3, #0]
 800dc88:	015a      	lsls	r2, r3, #5
 800dc8a:	693b      	ldr	r3, [r7, #16]
 800dc8c:	4413      	add	r3, r2
 800dc8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dc98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dc9c:	d0e7      	beq.n	800dc6e <USB_EPStopXfer+0x82>
 800dc9e:	e048      	b.n	800dd32 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	781b      	ldrb	r3, [r3, #0]
 800dca4:	015a      	lsls	r2, r3, #5
 800dca6:	693b      	ldr	r3, [r7, #16]
 800dca8:	4413      	add	r3, r2
 800dcaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dcb4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dcb8:	d13b      	bne.n	800dd32 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	781b      	ldrb	r3, [r3, #0]
 800dcbe:	015a      	lsls	r2, r3, #5
 800dcc0:	693b      	ldr	r3, [r7, #16]
 800dcc2:	4413      	add	r3, r2
 800dcc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	683a      	ldr	r2, [r7, #0]
 800dccc:	7812      	ldrb	r2, [r2, #0]
 800dcce:	0151      	lsls	r1, r2, #5
 800dcd0:	693a      	ldr	r2, [r7, #16]
 800dcd2:	440a      	add	r2, r1
 800dcd4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dcd8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800dcdc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800dcde:	683b      	ldr	r3, [r7, #0]
 800dce0:	781b      	ldrb	r3, [r3, #0]
 800dce2:	015a      	lsls	r2, r3, #5
 800dce4:	693b      	ldr	r3, [r7, #16]
 800dce6:	4413      	add	r3, r2
 800dce8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	683a      	ldr	r2, [r7, #0]
 800dcf0:	7812      	ldrb	r2, [r2, #0]
 800dcf2:	0151      	lsls	r1, r2, #5
 800dcf4:	693a      	ldr	r2, [r7, #16]
 800dcf6:	440a      	add	r2, r1
 800dcf8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dcfc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800dd00:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	3301      	adds	r3, #1
 800dd06:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800dd0e:	4293      	cmp	r3, r2
 800dd10:	d902      	bls.n	800dd18 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800dd12:	2301      	movs	r3, #1
 800dd14:	75fb      	strb	r3, [r7, #23]
          break;
 800dd16:	e00c      	b.n	800dd32 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	781b      	ldrb	r3, [r3, #0]
 800dd1c:	015a      	lsls	r2, r3, #5
 800dd1e:	693b      	ldr	r3, [r7, #16]
 800dd20:	4413      	add	r3, r2
 800dd22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800dd2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800dd30:	d0e7      	beq.n	800dd02 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800dd32:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd34:	4618      	mov	r0, r3
 800dd36:	371c      	adds	r7, #28
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3e:	4770      	bx	lr

0800dd40 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800dd40:	b480      	push	{r7}
 800dd42:	b089      	sub	sp, #36	@ 0x24
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	60f8      	str	r0, [r7, #12]
 800dd48:	60b9      	str	r1, [r7, #8]
 800dd4a:	4611      	mov	r1, r2
 800dd4c:	461a      	mov	r2, r3
 800dd4e:	460b      	mov	r3, r1
 800dd50:	71fb      	strb	r3, [r7, #7]
 800dd52:	4613      	mov	r3, r2
 800dd54:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800dd5e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d123      	bne.n	800ddae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800dd66:	88bb      	ldrh	r3, [r7, #4]
 800dd68:	3303      	adds	r3, #3
 800dd6a:	089b      	lsrs	r3, r3, #2
 800dd6c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800dd6e:	2300      	movs	r3, #0
 800dd70:	61bb      	str	r3, [r7, #24]
 800dd72:	e018      	b.n	800dda6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800dd74:	79fb      	ldrb	r3, [r7, #7]
 800dd76:	031a      	lsls	r2, r3, #12
 800dd78:	697b      	ldr	r3, [r7, #20]
 800dd7a:	4413      	add	r3, r2
 800dd7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dd80:	461a      	mov	r2, r3
 800dd82:	69fb      	ldr	r3, [r7, #28]
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	6013      	str	r3, [r2, #0]
      pSrc++;
 800dd88:	69fb      	ldr	r3, [r7, #28]
 800dd8a:	3301      	adds	r3, #1
 800dd8c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800dd8e:	69fb      	ldr	r3, [r7, #28]
 800dd90:	3301      	adds	r3, #1
 800dd92:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800dd94:	69fb      	ldr	r3, [r7, #28]
 800dd96:	3301      	adds	r3, #1
 800dd98:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800dd9a:	69fb      	ldr	r3, [r7, #28]
 800dd9c:	3301      	adds	r3, #1
 800dd9e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800dda0:	69bb      	ldr	r3, [r7, #24]
 800dda2:	3301      	adds	r3, #1
 800dda4:	61bb      	str	r3, [r7, #24]
 800dda6:	69ba      	ldr	r2, [r7, #24]
 800dda8:	693b      	ldr	r3, [r7, #16]
 800ddaa:	429a      	cmp	r2, r3
 800ddac:	d3e2      	bcc.n	800dd74 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ddae:	2300      	movs	r3, #0
}
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	3724      	adds	r7, #36	@ 0x24
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddba:	4770      	bx	lr

0800ddbc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ddbc:	b480      	push	{r7}
 800ddbe:	b08b      	sub	sp, #44	@ 0x2c
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	60f8      	str	r0, [r7, #12]
 800ddc4:	60b9      	str	r1, [r7, #8]
 800ddc6:	4613      	mov	r3, r2
 800ddc8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ddd2:	88fb      	ldrh	r3, [r7, #6]
 800ddd4:	089b      	lsrs	r3, r3, #2
 800ddd6:	b29b      	uxth	r3, r3
 800ddd8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ddda:	88fb      	ldrh	r3, [r7, #6]
 800dddc:	f003 0303 	and.w	r3, r3, #3
 800dde0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800dde2:	2300      	movs	r3, #0
 800dde4:	623b      	str	r3, [r7, #32]
 800dde6:	e014      	b.n	800de12 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800dde8:	69bb      	ldr	r3, [r7, #24]
 800ddea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ddee:	681a      	ldr	r2, [r3, #0]
 800ddf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddf2:	601a      	str	r2, [r3, #0]
    pDest++;
 800ddf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddf6:	3301      	adds	r3, #1
 800ddf8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ddfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddfc:	3301      	adds	r3, #1
 800ddfe:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800de00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de02:	3301      	adds	r3, #1
 800de04:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800de06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de08:	3301      	adds	r3, #1
 800de0a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800de0c:	6a3b      	ldr	r3, [r7, #32]
 800de0e:	3301      	adds	r3, #1
 800de10:	623b      	str	r3, [r7, #32]
 800de12:	6a3a      	ldr	r2, [r7, #32]
 800de14:	697b      	ldr	r3, [r7, #20]
 800de16:	429a      	cmp	r2, r3
 800de18:	d3e6      	bcc.n	800dde8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800de1a:	8bfb      	ldrh	r3, [r7, #30]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d01e      	beq.n	800de5e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800de20:	2300      	movs	r3, #0
 800de22:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800de24:	69bb      	ldr	r3, [r7, #24]
 800de26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800de2a:	461a      	mov	r2, r3
 800de2c:	f107 0310 	add.w	r3, r7, #16
 800de30:	6812      	ldr	r2, [r2, #0]
 800de32:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800de34:	693a      	ldr	r2, [r7, #16]
 800de36:	6a3b      	ldr	r3, [r7, #32]
 800de38:	b2db      	uxtb	r3, r3
 800de3a:	00db      	lsls	r3, r3, #3
 800de3c:	fa22 f303 	lsr.w	r3, r2, r3
 800de40:	b2da      	uxtb	r2, r3
 800de42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de44:	701a      	strb	r2, [r3, #0]
      i++;
 800de46:	6a3b      	ldr	r3, [r7, #32]
 800de48:	3301      	adds	r3, #1
 800de4a:	623b      	str	r3, [r7, #32]
      pDest++;
 800de4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de4e:	3301      	adds	r3, #1
 800de50:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800de52:	8bfb      	ldrh	r3, [r7, #30]
 800de54:	3b01      	subs	r3, #1
 800de56:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800de58:	8bfb      	ldrh	r3, [r7, #30]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d1ea      	bne.n	800de34 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800de5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800de60:	4618      	mov	r0, r3
 800de62:	372c      	adds	r7, #44	@ 0x2c
 800de64:	46bd      	mov	sp, r7
 800de66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6a:	4770      	bx	lr

0800de6c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800de6c:	b480      	push	{r7}
 800de6e:	b085      	sub	sp, #20
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
 800de74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800de7a:	683b      	ldr	r3, [r7, #0]
 800de7c:	781b      	ldrb	r3, [r3, #0]
 800de7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	785b      	ldrb	r3, [r3, #1]
 800de84:	2b01      	cmp	r3, #1
 800de86:	d12c      	bne.n	800dee2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800de88:	68bb      	ldr	r3, [r7, #8]
 800de8a:	015a      	lsls	r2, r3, #5
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	4413      	add	r3, r2
 800de90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	2b00      	cmp	r3, #0
 800de98:	db12      	blt.n	800dec0 <USB_EPSetStall+0x54>
 800de9a:	68bb      	ldr	r3, [r7, #8]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d00f      	beq.n	800dec0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	015a      	lsls	r2, r3, #5
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	4413      	add	r3, r2
 800dea8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	68ba      	ldr	r2, [r7, #8]
 800deb0:	0151      	lsls	r1, r2, #5
 800deb2:	68fa      	ldr	r2, [r7, #12]
 800deb4:	440a      	add	r2, r1
 800deb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800deba:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800debe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	015a      	lsls	r2, r3, #5
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	4413      	add	r3, r2
 800dec8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	68ba      	ldr	r2, [r7, #8]
 800ded0:	0151      	lsls	r1, r2, #5
 800ded2:	68fa      	ldr	r2, [r7, #12]
 800ded4:	440a      	add	r2, r1
 800ded6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800deda:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800dede:	6013      	str	r3, [r2, #0]
 800dee0:	e02b      	b.n	800df3a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	015a      	lsls	r2, r3, #5
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	4413      	add	r3, r2
 800deea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	2b00      	cmp	r3, #0
 800def2:	db12      	blt.n	800df1a <USB_EPSetStall+0xae>
 800def4:	68bb      	ldr	r3, [r7, #8]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d00f      	beq.n	800df1a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	015a      	lsls	r2, r3, #5
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	4413      	add	r3, r2
 800df02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	68ba      	ldr	r2, [r7, #8]
 800df0a:	0151      	lsls	r1, r2, #5
 800df0c:	68fa      	ldr	r2, [r7, #12]
 800df0e:	440a      	add	r2, r1
 800df10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800df14:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800df18:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	015a      	lsls	r2, r3, #5
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	4413      	add	r3, r2
 800df22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	68ba      	ldr	r2, [r7, #8]
 800df2a:	0151      	lsls	r1, r2, #5
 800df2c:	68fa      	ldr	r2, [r7, #12]
 800df2e:	440a      	add	r2, r1
 800df30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800df34:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800df38:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800df3a:	2300      	movs	r3, #0
}
 800df3c:	4618      	mov	r0, r3
 800df3e:	3714      	adds	r7, #20
 800df40:	46bd      	mov	sp, r7
 800df42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df46:	4770      	bx	lr

0800df48 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800df48:	b480      	push	{r7}
 800df4a:	b085      	sub	sp, #20
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	6078      	str	r0, [r7, #4]
 800df50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800df56:	683b      	ldr	r3, [r7, #0]
 800df58:	781b      	ldrb	r3, [r3, #0]
 800df5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800df5c:	683b      	ldr	r3, [r7, #0]
 800df5e:	785b      	ldrb	r3, [r3, #1]
 800df60:	2b01      	cmp	r3, #1
 800df62:	d128      	bne.n	800dfb6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800df64:	68bb      	ldr	r3, [r7, #8]
 800df66:	015a      	lsls	r2, r3, #5
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	4413      	add	r3, r2
 800df6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	68ba      	ldr	r2, [r7, #8]
 800df74:	0151      	lsls	r1, r2, #5
 800df76:	68fa      	ldr	r2, [r7, #12]
 800df78:	440a      	add	r2, r1
 800df7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800df7e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800df82:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	791b      	ldrb	r3, [r3, #4]
 800df88:	2b03      	cmp	r3, #3
 800df8a:	d003      	beq.n	800df94 <USB_EPClearStall+0x4c>
 800df8c:	683b      	ldr	r3, [r7, #0]
 800df8e:	791b      	ldrb	r3, [r3, #4]
 800df90:	2b02      	cmp	r3, #2
 800df92:	d138      	bne.n	800e006 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800df94:	68bb      	ldr	r3, [r7, #8]
 800df96:	015a      	lsls	r2, r3, #5
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	4413      	add	r3, r2
 800df9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	68ba      	ldr	r2, [r7, #8]
 800dfa4:	0151      	lsls	r1, r2, #5
 800dfa6:	68fa      	ldr	r2, [r7, #12]
 800dfa8:	440a      	add	r2, r1
 800dfaa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800dfae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800dfb2:	6013      	str	r3, [r2, #0]
 800dfb4:	e027      	b.n	800e006 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800dfb6:	68bb      	ldr	r3, [r7, #8]
 800dfb8:	015a      	lsls	r2, r3, #5
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	4413      	add	r3, r2
 800dfbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	68ba      	ldr	r2, [r7, #8]
 800dfc6:	0151      	lsls	r1, r2, #5
 800dfc8:	68fa      	ldr	r2, [r7, #12]
 800dfca:	440a      	add	r2, r1
 800dfcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800dfd0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800dfd4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	791b      	ldrb	r3, [r3, #4]
 800dfda:	2b03      	cmp	r3, #3
 800dfdc:	d003      	beq.n	800dfe6 <USB_EPClearStall+0x9e>
 800dfde:	683b      	ldr	r3, [r7, #0]
 800dfe0:	791b      	ldrb	r3, [r3, #4]
 800dfe2:	2b02      	cmp	r3, #2
 800dfe4:	d10f      	bne.n	800e006 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800dfe6:	68bb      	ldr	r3, [r7, #8]
 800dfe8:	015a      	lsls	r2, r3, #5
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	4413      	add	r3, r2
 800dfee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	68ba      	ldr	r2, [r7, #8]
 800dff6:	0151      	lsls	r1, r2, #5
 800dff8:	68fa      	ldr	r2, [r7, #12]
 800dffa:	440a      	add	r2, r1
 800dffc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e000:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e004:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800e006:	2300      	movs	r3, #0
}
 800e008:	4618      	mov	r0, r3
 800e00a:	3714      	adds	r7, #20
 800e00c:	46bd      	mov	sp, r7
 800e00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e012:	4770      	bx	lr

0800e014 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800e014:	b480      	push	{r7}
 800e016:	b085      	sub	sp, #20
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
 800e01c:	460b      	mov	r3, r1
 800e01e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	68fa      	ldr	r2, [r7, #12]
 800e02e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e032:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800e036:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e03e:	681a      	ldr	r2, [r3, #0]
 800e040:	78fb      	ldrb	r3, [r7, #3]
 800e042:	011b      	lsls	r3, r3, #4
 800e044:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800e048:	68f9      	ldr	r1, [r7, #12]
 800e04a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e04e:	4313      	orrs	r3, r2
 800e050:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800e052:	2300      	movs	r3, #0
}
 800e054:	4618      	mov	r0, r3
 800e056:	3714      	adds	r7, #20
 800e058:	46bd      	mov	sp, r7
 800e05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05e:	4770      	bx	lr

0800e060 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800e060:	b480      	push	{r7}
 800e062:	b085      	sub	sp, #20
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	68fa      	ldr	r2, [r7, #12]
 800e076:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e07a:	f023 0303 	bic.w	r3, r3, #3
 800e07e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e086:	685b      	ldr	r3, [r3, #4]
 800e088:	68fa      	ldr	r2, [r7, #12]
 800e08a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e08e:	f023 0302 	bic.w	r3, r3, #2
 800e092:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e094:	2300      	movs	r3, #0
}
 800e096:	4618      	mov	r0, r3
 800e098:	3714      	adds	r7, #20
 800e09a:	46bd      	mov	sp, r7
 800e09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a0:	4770      	bx	lr

0800e0a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800e0a2:	b480      	push	{r7}
 800e0a4:	b085      	sub	sp, #20
 800e0a6:	af00      	add	r7, sp, #0
 800e0a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	68fa      	ldr	r2, [r7, #12]
 800e0b8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e0bc:	f023 0303 	bic.w	r3, r3, #3
 800e0c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e0c8:	685b      	ldr	r3, [r3, #4]
 800e0ca:	68fa      	ldr	r2, [r7, #12]
 800e0cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e0d0:	f043 0302 	orr.w	r3, r3, #2
 800e0d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e0d6:	2300      	movs	r3, #0
}
 800e0d8:	4618      	mov	r0, r3
 800e0da:	3714      	adds	r7, #20
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e2:	4770      	bx	lr

0800e0e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800e0e4:	b480      	push	{r7}
 800e0e6:	b085      	sub	sp, #20
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	695b      	ldr	r3, [r3, #20]
 800e0f0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	699b      	ldr	r3, [r3, #24]
 800e0f6:	68fa      	ldr	r2, [r7, #12]
 800e0f8:	4013      	ands	r3, r2
 800e0fa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800e0fc:	68fb      	ldr	r3, [r7, #12]
}
 800e0fe:	4618      	mov	r0, r3
 800e100:	3714      	adds	r7, #20
 800e102:	46bd      	mov	sp, r7
 800e104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e108:	4770      	bx	lr

0800e10a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800e10a:	b480      	push	{r7}
 800e10c:	b085      	sub	sp, #20
 800e10e:	af00      	add	r7, sp, #0
 800e110:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e11c:	699b      	ldr	r3, [r3, #24]
 800e11e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e126:	69db      	ldr	r3, [r3, #28]
 800e128:	68ba      	ldr	r2, [r7, #8]
 800e12a:	4013      	ands	r3, r2
 800e12c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800e12e:	68bb      	ldr	r3, [r7, #8]
 800e130:	0c1b      	lsrs	r3, r3, #16
}
 800e132:	4618      	mov	r0, r3
 800e134:	3714      	adds	r7, #20
 800e136:	46bd      	mov	sp, r7
 800e138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13c:	4770      	bx	lr

0800e13e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800e13e:	b480      	push	{r7}
 800e140:	b085      	sub	sp, #20
 800e142:	af00      	add	r7, sp, #0
 800e144:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e150:	699b      	ldr	r3, [r3, #24]
 800e152:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e15a:	69db      	ldr	r3, [r3, #28]
 800e15c:	68ba      	ldr	r2, [r7, #8]
 800e15e:	4013      	ands	r3, r2
 800e160:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800e162:	68bb      	ldr	r3, [r7, #8]
 800e164:	b29b      	uxth	r3, r3
}
 800e166:	4618      	mov	r0, r3
 800e168:	3714      	adds	r7, #20
 800e16a:	46bd      	mov	sp, r7
 800e16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e170:	4770      	bx	lr

0800e172 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e172:	b480      	push	{r7}
 800e174:	b085      	sub	sp, #20
 800e176:	af00      	add	r7, sp, #0
 800e178:	6078      	str	r0, [r7, #4]
 800e17a:	460b      	mov	r3, r1
 800e17c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800e182:	78fb      	ldrb	r3, [r7, #3]
 800e184:	015a      	lsls	r2, r3, #5
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	4413      	add	r3, r2
 800e18a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e18e:	689b      	ldr	r3, [r3, #8]
 800e190:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e198:	695b      	ldr	r3, [r3, #20]
 800e19a:	68ba      	ldr	r2, [r7, #8]
 800e19c:	4013      	ands	r3, r2
 800e19e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e1a0:	68bb      	ldr	r3, [r7, #8]
}
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	3714      	adds	r7, #20
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ac:	4770      	bx	lr

0800e1ae <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800e1ae:	b480      	push	{r7}
 800e1b0:	b087      	sub	sp, #28
 800e1b2:	af00      	add	r7, sp, #0
 800e1b4:	6078      	str	r0, [r7, #4]
 800e1b6:	460b      	mov	r3, r1
 800e1b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800e1be:	697b      	ldr	r3, [r7, #20]
 800e1c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e1c4:	691b      	ldr	r3, [r3, #16]
 800e1c6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e1ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e1d0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800e1d2:	78fb      	ldrb	r3, [r7, #3]
 800e1d4:	f003 030f 	and.w	r3, r3, #15
 800e1d8:	68fa      	ldr	r2, [r7, #12]
 800e1da:	fa22 f303 	lsr.w	r3, r2, r3
 800e1de:	01db      	lsls	r3, r3, #7
 800e1e0:	b2db      	uxtb	r3, r3
 800e1e2:	693a      	ldr	r2, [r7, #16]
 800e1e4:	4313      	orrs	r3, r2
 800e1e6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800e1e8:	78fb      	ldrb	r3, [r7, #3]
 800e1ea:	015a      	lsls	r2, r3, #5
 800e1ec:	697b      	ldr	r3, [r7, #20]
 800e1ee:	4413      	add	r3, r2
 800e1f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e1f4:	689b      	ldr	r3, [r3, #8]
 800e1f6:	693a      	ldr	r2, [r7, #16]
 800e1f8:	4013      	ands	r3, r2
 800e1fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800e1fc:	68bb      	ldr	r3, [r7, #8]
}
 800e1fe:	4618      	mov	r0, r3
 800e200:	371c      	adds	r7, #28
 800e202:	46bd      	mov	sp, r7
 800e204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e208:	4770      	bx	lr

0800e20a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800e20a:	b480      	push	{r7}
 800e20c:	b083      	sub	sp, #12
 800e20e:	af00      	add	r7, sp, #0
 800e210:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	695b      	ldr	r3, [r3, #20]
 800e216:	f003 0301 	and.w	r3, r3, #1
}
 800e21a:	4618      	mov	r0, r3
 800e21c:	370c      	adds	r7, #12
 800e21e:	46bd      	mov	sp, r7
 800e220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e224:	4770      	bx	lr
	...

0800e228 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800e228:	b480      	push	{r7}
 800e22a:	b085      	sub	sp, #20
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e23a:	681a      	ldr	r2, [r3, #0]
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e242:	4619      	mov	r1, r3
 800e244:	4b09      	ldr	r3, [pc, #36]	@ (800e26c <USB_ActivateSetup+0x44>)
 800e246:	4013      	ands	r3, r2
 800e248:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e250:	685b      	ldr	r3, [r3, #4]
 800e252:	68fa      	ldr	r2, [r7, #12]
 800e254:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e258:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e25c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800e25e:	2300      	movs	r3, #0
}
 800e260:	4618      	mov	r0, r3
 800e262:	3714      	adds	r7, #20
 800e264:	46bd      	mov	sp, r7
 800e266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26a:	4770      	bx	lr
 800e26c:	fffff800 	.word	0xfffff800

0800e270 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800e270:	b480      	push	{r7}
 800e272:	b087      	sub	sp, #28
 800e274:	af00      	add	r7, sp, #0
 800e276:	60f8      	str	r0, [r7, #12]
 800e278:	460b      	mov	r3, r1
 800e27a:	607a      	str	r2, [r7, #4]
 800e27c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	333c      	adds	r3, #60	@ 0x3c
 800e286:	3304      	adds	r3, #4
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800e28c:	693b      	ldr	r3, [r7, #16]
 800e28e:	4a26      	ldr	r2, [pc, #152]	@ (800e328 <USB_EP0_OutStart+0xb8>)
 800e290:	4293      	cmp	r3, r2
 800e292:	d90a      	bls.n	800e2aa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e294:	697b      	ldr	r3, [r7, #20]
 800e296:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e2a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e2a4:	d101      	bne.n	800e2aa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	e037      	b.n	800e31a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800e2aa:	697b      	ldr	r3, [r7, #20]
 800e2ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e2b0:	461a      	mov	r2, r3
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e2b6:	697b      	ldr	r3, [r7, #20]
 800e2b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e2bc:	691b      	ldr	r3, [r3, #16]
 800e2be:	697a      	ldr	r2, [r7, #20]
 800e2c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e2c4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e2c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800e2ca:	697b      	ldr	r3, [r7, #20]
 800e2cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e2d0:	691b      	ldr	r3, [r3, #16]
 800e2d2:	697a      	ldr	r2, [r7, #20]
 800e2d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e2d8:	f043 0318 	orr.w	r3, r3, #24
 800e2dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800e2de:	697b      	ldr	r3, [r7, #20]
 800e2e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e2e4:	691b      	ldr	r3, [r3, #16]
 800e2e6:	697a      	ldr	r2, [r7, #20]
 800e2e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e2ec:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800e2f0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800e2f2:	7afb      	ldrb	r3, [r7, #11]
 800e2f4:	2b01      	cmp	r3, #1
 800e2f6:	d10f      	bne.n	800e318 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800e2f8:	697b      	ldr	r3, [r7, #20]
 800e2fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e2fe:	461a      	mov	r2, r3
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800e304:	697b      	ldr	r3, [r7, #20]
 800e306:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	697a      	ldr	r2, [r7, #20]
 800e30e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e312:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800e316:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800e318:	2300      	movs	r3, #0
}
 800e31a:	4618      	mov	r0, r3
 800e31c:	371c      	adds	r7, #28
 800e31e:	46bd      	mov	sp, r7
 800e320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e324:	4770      	bx	lr
 800e326:	bf00      	nop
 800e328:	4f54300a 	.word	0x4f54300a

0800e32c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e32c:	b480      	push	{r7}
 800e32e:	b085      	sub	sp, #20
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e334:	2300      	movs	r3, #0
 800e336:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	3301      	adds	r3, #1
 800e33c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e344:	d901      	bls.n	800e34a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e346:	2303      	movs	r3, #3
 800e348:	e01b      	b.n	800e382 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	691b      	ldr	r3, [r3, #16]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	daf2      	bge.n	800e338 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e352:	2300      	movs	r3, #0
 800e354:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	691b      	ldr	r3, [r3, #16]
 800e35a:	f043 0201 	orr.w	r2, r3, #1
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	3301      	adds	r3, #1
 800e366:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e36e:	d901      	bls.n	800e374 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e370:	2303      	movs	r3, #3
 800e372:	e006      	b.n	800e382 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	691b      	ldr	r3, [r3, #16]
 800e378:	f003 0301 	and.w	r3, r3, #1
 800e37c:	2b01      	cmp	r3, #1
 800e37e:	d0f0      	beq.n	800e362 <USB_CoreReset+0x36>

  return HAL_OK;
 800e380:	2300      	movs	r3, #0
}
 800e382:	4618      	mov	r0, r3
 800e384:	3714      	adds	r7, #20
 800e386:	46bd      	mov	sp, r7
 800e388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38c:	4770      	bx	lr
	...

0800e390 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e390:	b580      	push	{r7, lr}
 800e392:	b084      	sub	sp, #16
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
 800e398:	460b      	mov	r3, r1
 800e39a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e39c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800e3a0:	f002 fd2c 	bl	8010dfc <USBD_static_malloc>
 800e3a4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d109      	bne.n	800e3c0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	32b0      	adds	r2, #176	@ 0xb0
 800e3b6:	2100      	movs	r1, #0
 800e3b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800e3bc:	2302      	movs	r3, #2
 800e3be:	e0d4      	b.n	800e56a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800e3c0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800e3c4:	2100      	movs	r1, #0
 800e3c6:	68f8      	ldr	r0, [r7, #12]
 800e3c8:	f002 fd5c 	bl	8010e84 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	32b0      	adds	r2, #176	@ 0xb0
 800e3d6:	68f9      	ldr	r1, [r7, #12]
 800e3d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	32b0      	adds	r2, #176	@ 0xb0
 800e3e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	7c1b      	ldrb	r3, [r3, #16]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d138      	bne.n	800e46a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e3f8:	4b5e      	ldr	r3, [pc, #376]	@ (800e574 <USBD_CDC_Init+0x1e4>)
 800e3fa:	7819      	ldrb	r1, [r3, #0]
 800e3fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e400:	2202      	movs	r2, #2
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f002 fbd7 	bl	8010bb6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e408:	4b5a      	ldr	r3, [pc, #360]	@ (800e574 <USBD_CDC_Init+0x1e4>)
 800e40a:	781b      	ldrb	r3, [r3, #0]
 800e40c:	f003 020f 	and.w	r2, r3, #15
 800e410:	6879      	ldr	r1, [r7, #4]
 800e412:	4613      	mov	r3, r2
 800e414:	009b      	lsls	r3, r3, #2
 800e416:	4413      	add	r3, r2
 800e418:	009b      	lsls	r3, r3, #2
 800e41a:	440b      	add	r3, r1
 800e41c:	3324      	adds	r3, #36	@ 0x24
 800e41e:	2201      	movs	r2, #1
 800e420:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e422:	4b55      	ldr	r3, [pc, #340]	@ (800e578 <USBD_CDC_Init+0x1e8>)
 800e424:	7819      	ldrb	r1, [r3, #0]
 800e426:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e42a:	2202      	movs	r2, #2
 800e42c:	6878      	ldr	r0, [r7, #4]
 800e42e:	f002 fbc2 	bl	8010bb6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e432:	4b51      	ldr	r3, [pc, #324]	@ (800e578 <USBD_CDC_Init+0x1e8>)
 800e434:	781b      	ldrb	r3, [r3, #0]
 800e436:	f003 020f 	and.w	r2, r3, #15
 800e43a:	6879      	ldr	r1, [r7, #4]
 800e43c:	4613      	mov	r3, r2
 800e43e:	009b      	lsls	r3, r3, #2
 800e440:	4413      	add	r3, r2
 800e442:	009b      	lsls	r3, r3, #2
 800e444:	440b      	add	r3, r1
 800e446:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e44a:	2201      	movs	r2, #1
 800e44c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e44e:	4b4b      	ldr	r3, [pc, #300]	@ (800e57c <USBD_CDC_Init+0x1ec>)
 800e450:	781b      	ldrb	r3, [r3, #0]
 800e452:	f003 020f 	and.w	r2, r3, #15
 800e456:	6879      	ldr	r1, [r7, #4]
 800e458:	4613      	mov	r3, r2
 800e45a:	009b      	lsls	r3, r3, #2
 800e45c:	4413      	add	r3, r2
 800e45e:	009b      	lsls	r3, r3, #2
 800e460:	440b      	add	r3, r1
 800e462:	3326      	adds	r3, #38	@ 0x26
 800e464:	2210      	movs	r2, #16
 800e466:	801a      	strh	r2, [r3, #0]
 800e468:	e035      	b.n	800e4d6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800e46a:	4b42      	ldr	r3, [pc, #264]	@ (800e574 <USBD_CDC_Init+0x1e4>)
 800e46c:	7819      	ldrb	r1, [r3, #0]
 800e46e:	2340      	movs	r3, #64	@ 0x40
 800e470:	2202      	movs	r2, #2
 800e472:	6878      	ldr	r0, [r7, #4]
 800e474:	f002 fb9f 	bl	8010bb6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800e478:	4b3e      	ldr	r3, [pc, #248]	@ (800e574 <USBD_CDC_Init+0x1e4>)
 800e47a:	781b      	ldrb	r3, [r3, #0]
 800e47c:	f003 020f 	and.w	r2, r3, #15
 800e480:	6879      	ldr	r1, [r7, #4]
 800e482:	4613      	mov	r3, r2
 800e484:	009b      	lsls	r3, r3, #2
 800e486:	4413      	add	r3, r2
 800e488:	009b      	lsls	r3, r3, #2
 800e48a:	440b      	add	r3, r1
 800e48c:	3324      	adds	r3, #36	@ 0x24
 800e48e:	2201      	movs	r2, #1
 800e490:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800e492:	4b39      	ldr	r3, [pc, #228]	@ (800e578 <USBD_CDC_Init+0x1e8>)
 800e494:	7819      	ldrb	r1, [r3, #0]
 800e496:	2340      	movs	r3, #64	@ 0x40
 800e498:	2202      	movs	r2, #2
 800e49a:	6878      	ldr	r0, [r7, #4]
 800e49c:	f002 fb8b 	bl	8010bb6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800e4a0:	4b35      	ldr	r3, [pc, #212]	@ (800e578 <USBD_CDC_Init+0x1e8>)
 800e4a2:	781b      	ldrb	r3, [r3, #0]
 800e4a4:	f003 020f 	and.w	r2, r3, #15
 800e4a8:	6879      	ldr	r1, [r7, #4]
 800e4aa:	4613      	mov	r3, r2
 800e4ac:	009b      	lsls	r3, r3, #2
 800e4ae:	4413      	add	r3, r2
 800e4b0:	009b      	lsls	r3, r3, #2
 800e4b2:	440b      	add	r3, r1
 800e4b4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e4b8:	2201      	movs	r2, #1
 800e4ba:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e4bc:	4b2f      	ldr	r3, [pc, #188]	@ (800e57c <USBD_CDC_Init+0x1ec>)
 800e4be:	781b      	ldrb	r3, [r3, #0]
 800e4c0:	f003 020f 	and.w	r2, r3, #15
 800e4c4:	6879      	ldr	r1, [r7, #4]
 800e4c6:	4613      	mov	r3, r2
 800e4c8:	009b      	lsls	r3, r3, #2
 800e4ca:	4413      	add	r3, r2
 800e4cc:	009b      	lsls	r3, r3, #2
 800e4ce:	440b      	add	r3, r1
 800e4d0:	3326      	adds	r3, #38	@ 0x26
 800e4d2:	2210      	movs	r2, #16
 800e4d4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e4d6:	4b29      	ldr	r3, [pc, #164]	@ (800e57c <USBD_CDC_Init+0x1ec>)
 800e4d8:	7819      	ldrb	r1, [r3, #0]
 800e4da:	2308      	movs	r3, #8
 800e4dc:	2203      	movs	r2, #3
 800e4de:	6878      	ldr	r0, [r7, #4]
 800e4e0:	f002 fb69 	bl	8010bb6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800e4e4:	4b25      	ldr	r3, [pc, #148]	@ (800e57c <USBD_CDC_Init+0x1ec>)
 800e4e6:	781b      	ldrb	r3, [r3, #0]
 800e4e8:	f003 020f 	and.w	r2, r3, #15
 800e4ec:	6879      	ldr	r1, [r7, #4]
 800e4ee:	4613      	mov	r3, r2
 800e4f0:	009b      	lsls	r3, r3, #2
 800e4f2:	4413      	add	r3, r2
 800e4f4:	009b      	lsls	r3, r3, #2
 800e4f6:	440b      	add	r3, r1
 800e4f8:	3324      	adds	r3, #36	@ 0x24
 800e4fa:	2201      	movs	r2, #1
 800e4fc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	2200      	movs	r2, #0
 800e502:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e50c:	687a      	ldr	r2, [r7, #4]
 800e50e:	33b0      	adds	r3, #176	@ 0xb0
 800e510:	009b      	lsls	r3, r3, #2
 800e512:	4413      	add	r3, r2
 800e514:	685b      	ldr	r3, [r3, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	2200      	movs	r2, #0
 800e51e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	2200      	movs	r2, #0
 800e526:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800e530:	2b00      	cmp	r3, #0
 800e532:	d101      	bne.n	800e538 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800e534:	2302      	movs	r3, #2
 800e536:	e018      	b.n	800e56a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	7c1b      	ldrb	r3, [r3, #16]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d10a      	bne.n	800e556 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e540:	4b0d      	ldr	r3, [pc, #52]	@ (800e578 <USBD_CDC_Init+0x1e8>)
 800e542:	7819      	ldrb	r1, [r3, #0]
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e54a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800e54e:	6878      	ldr	r0, [r7, #4]
 800e550:	f002 fc20 	bl	8010d94 <USBD_LL_PrepareReceive>
 800e554:	e008      	b.n	800e568 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e556:	4b08      	ldr	r3, [pc, #32]	@ (800e578 <USBD_CDC_Init+0x1e8>)
 800e558:	7819      	ldrb	r1, [r3, #0]
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800e560:	2340      	movs	r3, #64	@ 0x40
 800e562:	6878      	ldr	r0, [r7, #4]
 800e564:	f002 fc16 	bl	8010d94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e568:	2300      	movs	r3, #0
}
 800e56a:	4618      	mov	r0, r3
 800e56c:	3710      	adds	r7, #16
 800e56e:	46bd      	mov	sp, r7
 800e570:	bd80      	pop	{r7, pc}
 800e572:	bf00      	nop
 800e574:	2400009b 	.word	0x2400009b
 800e578:	2400009c 	.word	0x2400009c
 800e57c:	2400009d 	.word	0x2400009d

0800e580 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b082      	sub	sp, #8
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
 800e588:	460b      	mov	r3, r1
 800e58a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800e58c:	4b3a      	ldr	r3, [pc, #232]	@ (800e678 <USBD_CDC_DeInit+0xf8>)
 800e58e:	781b      	ldrb	r3, [r3, #0]
 800e590:	4619      	mov	r1, r3
 800e592:	6878      	ldr	r0, [r7, #4]
 800e594:	f002 fb35 	bl	8010c02 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800e598:	4b37      	ldr	r3, [pc, #220]	@ (800e678 <USBD_CDC_DeInit+0xf8>)
 800e59a:	781b      	ldrb	r3, [r3, #0]
 800e59c:	f003 020f 	and.w	r2, r3, #15
 800e5a0:	6879      	ldr	r1, [r7, #4]
 800e5a2:	4613      	mov	r3, r2
 800e5a4:	009b      	lsls	r3, r3, #2
 800e5a6:	4413      	add	r3, r2
 800e5a8:	009b      	lsls	r3, r3, #2
 800e5aa:	440b      	add	r3, r1
 800e5ac:	3324      	adds	r3, #36	@ 0x24
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800e5b2:	4b32      	ldr	r3, [pc, #200]	@ (800e67c <USBD_CDC_DeInit+0xfc>)
 800e5b4:	781b      	ldrb	r3, [r3, #0]
 800e5b6:	4619      	mov	r1, r3
 800e5b8:	6878      	ldr	r0, [r7, #4]
 800e5ba:	f002 fb22 	bl	8010c02 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800e5be:	4b2f      	ldr	r3, [pc, #188]	@ (800e67c <USBD_CDC_DeInit+0xfc>)
 800e5c0:	781b      	ldrb	r3, [r3, #0]
 800e5c2:	f003 020f 	and.w	r2, r3, #15
 800e5c6:	6879      	ldr	r1, [r7, #4]
 800e5c8:	4613      	mov	r3, r2
 800e5ca:	009b      	lsls	r3, r3, #2
 800e5cc:	4413      	add	r3, r2
 800e5ce:	009b      	lsls	r3, r3, #2
 800e5d0:	440b      	add	r3, r1
 800e5d2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800e5da:	4b29      	ldr	r3, [pc, #164]	@ (800e680 <USBD_CDC_DeInit+0x100>)
 800e5dc:	781b      	ldrb	r3, [r3, #0]
 800e5de:	4619      	mov	r1, r3
 800e5e0:	6878      	ldr	r0, [r7, #4]
 800e5e2:	f002 fb0e 	bl	8010c02 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800e5e6:	4b26      	ldr	r3, [pc, #152]	@ (800e680 <USBD_CDC_DeInit+0x100>)
 800e5e8:	781b      	ldrb	r3, [r3, #0]
 800e5ea:	f003 020f 	and.w	r2, r3, #15
 800e5ee:	6879      	ldr	r1, [r7, #4]
 800e5f0:	4613      	mov	r3, r2
 800e5f2:	009b      	lsls	r3, r3, #2
 800e5f4:	4413      	add	r3, r2
 800e5f6:	009b      	lsls	r3, r3, #2
 800e5f8:	440b      	add	r3, r1
 800e5fa:	3324      	adds	r3, #36	@ 0x24
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800e600:	4b1f      	ldr	r3, [pc, #124]	@ (800e680 <USBD_CDC_DeInit+0x100>)
 800e602:	781b      	ldrb	r3, [r3, #0]
 800e604:	f003 020f 	and.w	r2, r3, #15
 800e608:	6879      	ldr	r1, [r7, #4]
 800e60a:	4613      	mov	r3, r2
 800e60c:	009b      	lsls	r3, r3, #2
 800e60e:	4413      	add	r3, r2
 800e610:	009b      	lsls	r3, r3, #2
 800e612:	440b      	add	r3, r1
 800e614:	3326      	adds	r3, #38	@ 0x26
 800e616:	2200      	movs	r2, #0
 800e618:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	32b0      	adds	r2, #176	@ 0xb0
 800e624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d01f      	beq.n	800e66c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e632:	687a      	ldr	r2, [r7, #4]
 800e634:	33b0      	adds	r3, #176	@ 0xb0
 800e636:	009b      	lsls	r3, r3, #2
 800e638:	4413      	add	r3, r2
 800e63a:	685b      	ldr	r3, [r3, #4]
 800e63c:	685b      	ldr	r3, [r3, #4]
 800e63e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	32b0      	adds	r2, #176	@ 0xb0
 800e64a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e64e:	4618      	mov	r0, r3
 800e650:	f002 fbe2 	bl	8010e18 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	32b0      	adds	r2, #176	@ 0xb0
 800e65e:	2100      	movs	r1, #0
 800e660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	2200      	movs	r2, #0
 800e668:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e66c:	2300      	movs	r3, #0
}
 800e66e:	4618      	mov	r0, r3
 800e670:	3708      	adds	r7, #8
 800e672:	46bd      	mov	sp, r7
 800e674:	bd80      	pop	{r7, pc}
 800e676:	bf00      	nop
 800e678:	2400009b 	.word	0x2400009b
 800e67c:	2400009c 	.word	0x2400009c
 800e680:	2400009d 	.word	0x2400009d

0800e684 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b086      	sub	sp, #24
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
 800e68c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	32b0      	adds	r2, #176	@ 0xb0
 800e698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e69c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e69e:	2300      	movs	r3, #0
 800e6a0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e6aa:	693b      	ldr	r3, [r7, #16]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d101      	bne.n	800e6b4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800e6b0:	2303      	movs	r3, #3
 800e6b2:	e0bf      	b.n	800e834 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e6b4:	683b      	ldr	r3, [r7, #0]
 800e6b6:	781b      	ldrb	r3, [r3, #0]
 800e6b8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d050      	beq.n	800e762 <USBD_CDC_Setup+0xde>
 800e6c0:	2b20      	cmp	r3, #32
 800e6c2:	f040 80af 	bne.w	800e824 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	88db      	ldrh	r3, [r3, #6]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d03a      	beq.n	800e744 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e6ce:	683b      	ldr	r3, [r7, #0]
 800e6d0:	781b      	ldrb	r3, [r3, #0]
 800e6d2:	b25b      	sxtb	r3, r3
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	da1b      	bge.n	800e710 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e6de:	687a      	ldr	r2, [r7, #4]
 800e6e0:	33b0      	adds	r3, #176	@ 0xb0
 800e6e2:	009b      	lsls	r3, r3, #2
 800e6e4:	4413      	add	r3, r2
 800e6e6:	685b      	ldr	r3, [r3, #4]
 800e6e8:	689b      	ldr	r3, [r3, #8]
 800e6ea:	683a      	ldr	r2, [r7, #0]
 800e6ec:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800e6ee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e6f0:	683a      	ldr	r2, [r7, #0]
 800e6f2:	88d2      	ldrh	r2, [r2, #6]
 800e6f4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	88db      	ldrh	r3, [r3, #6]
 800e6fa:	2b07      	cmp	r3, #7
 800e6fc:	bf28      	it	cs
 800e6fe:	2307      	movcs	r3, #7
 800e700:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e702:	693b      	ldr	r3, [r7, #16]
 800e704:	89fa      	ldrh	r2, [r7, #14]
 800e706:	4619      	mov	r1, r3
 800e708:	6878      	ldr	r0, [r7, #4]
 800e70a:	f001 fdbd 	bl	8010288 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800e70e:	e090      	b.n	800e832 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800e710:	683b      	ldr	r3, [r7, #0]
 800e712:	785a      	ldrb	r2, [r3, #1]
 800e714:	693b      	ldr	r3, [r7, #16]
 800e716:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	88db      	ldrh	r3, [r3, #6]
 800e71e:	2b3f      	cmp	r3, #63	@ 0x3f
 800e720:	d803      	bhi.n	800e72a <USBD_CDC_Setup+0xa6>
 800e722:	683b      	ldr	r3, [r7, #0]
 800e724:	88db      	ldrh	r3, [r3, #6]
 800e726:	b2da      	uxtb	r2, r3
 800e728:	e000      	b.n	800e72c <USBD_CDC_Setup+0xa8>
 800e72a:	2240      	movs	r2, #64	@ 0x40
 800e72c:	693b      	ldr	r3, [r7, #16]
 800e72e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e732:	6939      	ldr	r1, [r7, #16]
 800e734:	693b      	ldr	r3, [r7, #16]
 800e736:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800e73a:	461a      	mov	r2, r3
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f001 fdcf 	bl	80102e0 <USBD_CtlPrepareRx>
      break;
 800e742:	e076      	b.n	800e832 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e74a:	687a      	ldr	r2, [r7, #4]
 800e74c:	33b0      	adds	r3, #176	@ 0xb0
 800e74e:	009b      	lsls	r3, r3, #2
 800e750:	4413      	add	r3, r2
 800e752:	685b      	ldr	r3, [r3, #4]
 800e754:	689b      	ldr	r3, [r3, #8]
 800e756:	683a      	ldr	r2, [r7, #0]
 800e758:	7850      	ldrb	r0, [r2, #1]
 800e75a:	2200      	movs	r2, #0
 800e75c:	6839      	ldr	r1, [r7, #0]
 800e75e:	4798      	blx	r3
      break;
 800e760:	e067      	b.n	800e832 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e762:	683b      	ldr	r3, [r7, #0]
 800e764:	785b      	ldrb	r3, [r3, #1]
 800e766:	2b0b      	cmp	r3, #11
 800e768:	d851      	bhi.n	800e80e <USBD_CDC_Setup+0x18a>
 800e76a:	a201      	add	r2, pc, #4	@ (adr r2, 800e770 <USBD_CDC_Setup+0xec>)
 800e76c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e770:	0800e7a1 	.word	0x0800e7a1
 800e774:	0800e81d 	.word	0x0800e81d
 800e778:	0800e80f 	.word	0x0800e80f
 800e77c:	0800e80f 	.word	0x0800e80f
 800e780:	0800e80f 	.word	0x0800e80f
 800e784:	0800e80f 	.word	0x0800e80f
 800e788:	0800e80f 	.word	0x0800e80f
 800e78c:	0800e80f 	.word	0x0800e80f
 800e790:	0800e80f 	.word	0x0800e80f
 800e794:	0800e80f 	.word	0x0800e80f
 800e798:	0800e7cb 	.word	0x0800e7cb
 800e79c:	0800e7f5 	.word	0x0800e7f5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e7a6:	b2db      	uxtb	r3, r3
 800e7a8:	2b03      	cmp	r3, #3
 800e7aa:	d107      	bne.n	800e7bc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e7ac:	f107 030a 	add.w	r3, r7, #10
 800e7b0:	2202      	movs	r2, #2
 800e7b2:	4619      	mov	r1, r3
 800e7b4:	6878      	ldr	r0, [r7, #4]
 800e7b6:	f001 fd67 	bl	8010288 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e7ba:	e032      	b.n	800e822 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e7bc:	6839      	ldr	r1, [r7, #0]
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	f001 fce5 	bl	801018e <USBD_CtlError>
            ret = USBD_FAIL;
 800e7c4:	2303      	movs	r3, #3
 800e7c6:	75fb      	strb	r3, [r7, #23]
          break;
 800e7c8:	e02b      	b.n	800e822 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e7d0:	b2db      	uxtb	r3, r3
 800e7d2:	2b03      	cmp	r3, #3
 800e7d4:	d107      	bne.n	800e7e6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e7d6:	f107 030d 	add.w	r3, r7, #13
 800e7da:	2201      	movs	r2, #1
 800e7dc:	4619      	mov	r1, r3
 800e7de:	6878      	ldr	r0, [r7, #4]
 800e7e0:	f001 fd52 	bl	8010288 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e7e4:	e01d      	b.n	800e822 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e7e6:	6839      	ldr	r1, [r7, #0]
 800e7e8:	6878      	ldr	r0, [r7, #4]
 800e7ea:	f001 fcd0 	bl	801018e <USBD_CtlError>
            ret = USBD_FAIL;
 800e7ee:	2303      	movs	r3, #3
 800e7f0:	75fb      	strb	r3, [r7, #23]
          break;
 800e7f2:	e016      	b.n	800e822 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e7fa:	b2db      	uxtb	r3, r3
 800e7fc:	2b03      	cmp	r3, #3
 800e7fe:	d00f      	beq.n	800e820 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800e800:	6839      	ldr	r1, [r7, #0]
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f001 fcc3 	bl	801018e <USBD_CtlError>
            ret = USBD_FAIL;
 800e808:	2303      	movs	r3, #3
 800e80a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e80c:	e008      	b.n	800e820 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e80e:	6839      	ldr	r1, [r7, #0]
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	f001 fcbc 	bl	801018e <USBD_CtlError>
          ret = USBD_FAIL;
 800e816:	2303      	movs	r3, #3
 800e818:	75fb      	strb	r3, [r7, #23]
          break;
 800e81a:	e002      	b.n	800e822 <USBD_CDC_Setup+0x19e>
          break;
 800e81c:	bf00      	nop
 800e81e:	e008      	b.n	800e832 <USBD_CDC_Setup+0x1ae>
          break;
 800e820:	bf00      	nop
      }
      break;
 800e822:	e006      	b.n	800e832 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800e824:	6839      	ldr	r1, [r7, #0]
 800e826:	6878      	ldr	r0, [r7, #4]
 800e828:	f001 fcb1 	bl	801018e <USBD_CtlError>
      ret = USBD_FAIL;
 800e82c:	2303      	movs	r3, #3
 800e82e:	75fb      	strb	r3, [r7, #23]
      break;
 800e830:	bf00      	nop
  }

  return (uint8_t)ret;
 800e832:	7dfb      	ldrb	r3, [r7, #23]
}
 800e834:	4618      	mov	r0, r3
 800e836:	3718      	adds	r7, #24
 800e838:	46bd      	mov	sp, r7
 800e83a:	bd80      	pop	{r7, pc}

0800e83c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b084      	sub	sp, #16
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
 800e844:	460b      	mov	r3, r1
 800e846:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e84e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	32b0      	adds	r2, #176	@ 0xb0
 800e85a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d101      	bne.n	800e866 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800e862:	2303      	movs	r3, #3
 800e864:	e065      	b.n	800e932 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	32b0      	adds	r2, #176	@ 0xb0
 800e870:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e874:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e876:	78fb      	ldrb	r3, [r7, #3]
 800e878:	f003 020f 	and.w	r2, r3, #15
 800e87c:	6879      	ldr	r1, [r7, #4]
 800e87e:	4613      	mov	r3, r2
 800e880:	009b      	lsls	r3, r3, #2
 800e882:	4413      	add	r3, r2
 800e884:	009b      	lsls	r3, r3, #2
 800e886:	440b      	add	r3, r1
 800e888:	3318      	adds	r3, #24
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d02f      	beq.n	800e8f0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800e890:	78fb      	ldrb	r3, [r7, #3]
 800e892:	f003 020f 	and.w	r2, r3, #15
 800e896:	6879      	ldr	r1, [r7, #4]
 800e898:	4613      	mov	r3, r2
 800e89a:	009b      	lsls	r3, r3, #2
 800e89c:	4413      	add	r3, r2
 800e89e:	009b      	lsls	r3, r3, #2
 800e8a0:	440b      	add	r3, r1
 800e8a2:	3318      	adds	r3, #24
 800e8a4:	681a      	ldr	r2, [r3, #0]
 800e8a6:	78fb      	ldrb	r3, [r7, #3]
 800e8a8:	f003 010f 	and.w	r1, r3, #15
 800e8ac:	68f8      	ldr	r0, [r7, #12]
 800e8ae:	460b      	mov	r3, r1
 800e8b0:	00db      	lsls	r3, r3, #3
 800e8b2:	440b      	add	r3, r1
 800e8b4:	009b      	lsls	r3, r3, #2
 800e8b6:	4403      	add	r3, r0
 800e8b8:	331c      	adds	r3, #28
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	fbb2 f1f3 	udiv	r1, r2, r3
 800e8c0:	fb01 f303 	mul.w	r3, r1, r3
 800e8c4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d112      	bne.n	800e8f0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e8ca:	78fb      	ldrb	r3, [r7, #3]
 800e8cc:	f003 020f 	and.w	r2, r3, #15
 800e8d0:	6879      	ldr	r1, [r7, #4]
 800e8d2:	4613      	mov	r3, r2
 800e8d4:	009b      	lsls	r3, r3, #2
 800e8d6:	4413      	add	r3, r2
 800e8d8:	009b      	lsls	r3, r3, #2
 800e8da:	440b      	add	r3, r1
 800e8dc:	3318      	adds	r3, #24
 800e8de:	2200      	movs	r2, #0
 800e8e0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e8e2:	78f9      	ldrb	r1, [r7, #3]
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	6878      	ldr	r0, [r7, #4]
 800e8ea:	f002 fa32 	bl	8010d52 <USBD_LL_Transmit>
 800e8ee:	e01f      	b.n	800e930 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e8f0:	68bb      	ldr	r3, [r7, #8]
 800e8f2:	2200      	movs	r2, #0
 800e8f4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e8fe:	687a      	ldr	r2, [r7, #4]
 800e900:	33b0      	adds	r3, #176	@ 0xb0
 800e902:	009b      	lsls	r3, r3, #2
 800e904:	4413      	add	r3, r2
 800e906:	685b      	ldr	r3, [r3, #4]
 800e908:	691b      	ldr	r3, [r3, #16]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d010      	beq.n	800e930 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e914:	687a      	ldr	r2, [r7, #4]
 800e916:	33b0      	adds	r3, #176	@ 0xb0
 800e918:	009b      	lsls	r3, r3, #2
 800e91a:	4413      	add	r3, r2
 800e91c:	685b      	ldr	r3, [r3, #4]
 800e91e:	691b      	ldr	r3, [r3, #16]
 800e920:	68ba      	ldr	r2, [r7, #8]
 800e922:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800e926:	68ba      	ldr	r2, [r7, #8]
 800e928:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800e92c:	78fa      	ldrb	r2, [r7, #3]
 800e92e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e930:	2300      	movs	r3, #0
}
 800e932:	4618      	mov	r0, r3
 800e934:	3710      	adds	r7, #16
 800e936:	46bd      	mov	sp, r7
 800e938:	bd80      	pop	{r7, pc}

0800e93a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e93a:	b580      	push	{r7, lr}
 800e93c:	b084      	sub	sp, #16
 800e93e:	af00      	add	r7, sp, #0
 800e940:	6078      	str	r0, [r7, #4]
 800e942:	460b      	mov	r3, r1
 800e944:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	32b0      	adds	r2, #176	@ 0xb0
 800e950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e954:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	32b0      	adds	r2, #176	@ 0xb0
 800e960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d101      	bne.n	800e96c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e968:	2303      	movs	r3, #3
 800e96a:	e01a      	b.n	800e9a2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e96c:	78fb      	ldrb	r3, [r7, #3]
 800e96e:	4619      	mov	r1, r3
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f002 fa30 	bl	8010dd6 <USBD_LL_GetRxDataSize>
 800e976:	4602      	mov	r2, r0
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e984:	687a      	ldr	r2, [r7, #4]
 800e986:	33b0      	adds	r3, #176	@ 0xb0
 800e988:	009b      	lsls	r3, r3, #2
 800e98a:	4413      	add	r3, r2
 800e98c:	685b      	ldr	r3, [r3, #4]
 800e98e:	68db      	ldr	r3, [r3, #12]
 800e990:	68fa      	ldr	r2, [r7, #12]
 800e992:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800e996:	68fa      	ldr	r2, [r7, #12]
 800e998:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800e99c:	4611      	mov	r1, r2
 800e99e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e9a0:	2300      	movs	r3, #0
}
 800e9a2:	4618      	mov	r0, r3
 800e9a4:	3710      	adds	r7, #16
 800e9a6:	46bd      	mov	sp, r7
 800e9a8:	bd80      	pop	{r7, pc}

0800e9aa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e9aa:	b580      	push	{r7, lr}
 800e9ac:	b084      	sub	sp, #16
 800e9ae:	af00      	add	r7, sp, #0
 800e9b0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	32b0      	adds	r2, #176	@ 0xb0
 800e9bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9c0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d101      	bne.n	800e9cc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e9c8:	2303      	movs	r3, #3
 800e9ca:	e024      	b.n	800ea16 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e9d2:	687a      	ldr	r2, [r7, #4]
 800e9d4:	33b0      	adds	r3, #176	@ 0xb0
 800e9d6:	009b      	lsls	r3, r3, #2
 800e9d8:	4413      	add	r3, r2
 800e9da:	685b      	ldr	r3, [r3, #4]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d019      	beq.n	800ea14 <USBD_CDC_EP0_RxReady+0x6a>
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800e9e6:	2bff      	cmp	r3, #255	@ 0xff
 800e9e8:	d014      	beq.n	800ea14 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800e9f0:	687a      	ldr	r2, [r7, #4]
 800e9f2:	33b0      	adds	r3, #176	@ 0xb0
 800e9f4:	009b      	lsls	r3, r3, #2
 800e9f6:	4413      	add	r3, r2
 800e9f8:	685b      	ldr	r3, [r3, #4]
 800e9fa:	689b      	ldr	r3, [r3, #8]
 800e9fc:	68fa      	ldr	r2, [r7, #12]
 800e9fe:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800ea02:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ea04:	68fa      	ldr	r2, [r7, #12]
 800ea06:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ea0a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	22ff      	movs	r2, #255	@ 0xff
 800ea10:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800ea14:	2300      	movs	r3, #0
}
 800ea16:	4618      	mov	r0, r3
 800ea18:	3710      	adds	r7, #16
 800ea1a:	46bd      	mov	sp, r7
 800ea1c:	bd80      	pop	{r7, pc}
	...

0800ea20 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b086      	sub	sp, #24
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ea28:	2182      	movs	r1, #130	@ 0x82
 800ea2a:	4818      	ldr	r0, [pc, #96]	@ (800ea8c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ea2c:	f000 fd4f 	bl	800f4ce <USBD_GetEpDesc>
 800ea30:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ea32:	2101      	movs	r1, #1
 800ea34:	4815      	ldr	r0, [pc, #84]	@ (800ea8c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ea36:	f000 fd4a 	bl	800f4ce <USBD_GetEpDesc>
 800ea3a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ea3c:	2181      	movs	r1, #129	@ 0x81
 800ea3e:	4813      	ldr	r0, [pc, #76]	@ (800ea8c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ea40:	f000 fd45 	bl	800f4ce <USBD_GetEpDesc>
 800ea44:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ea46:	697b      	ldr	r3, [r7, #20]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d002      	beq.n	800ea52 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ea4c:	697b      	ldr	r3, [r7, #20]
 800ea4e:	2210      	movs	r2, #16
 800ea50:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ea52:	693b      	ldr	r3, [r7, #16]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d006      	beq.n	800ea66 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ea58:	693b      	ldr	r3, [r7, #16]
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ea60:	711a      	strb	r2, [r3, #4]
 800ea62:	2200      	movs	r2, #0
 800ea64:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d006      	beq.n	800ea7a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	2200      	movs	r2, #0
 800ea70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ea74:	711a      	strb	r2, [r3, #4]
 800ea76:	2200      	movs	r2, #0
 800ea78:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	2243      	movs	r2, #67	@ 0x43
 800ea7e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ea80:	4b02      	ldr	r3, [pc, #8]	@ (800ea8c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ea82:	4618      	mov	r0, r3
 800ea84:	3718      	adds	r7, #24
 800ea86:	46bd      	mov	sp, r7
 800ea88:	bd80      	pop	{r7, pc}
 800ea8a:	bf00      	nop
 800ea8c:	24000058 	.word	0x24000058

0800ea90 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b086      	sub	sp, #24
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ea98:	2182      	movs	r1, #130	@ 0x82
 800ea9a:	4818      	ldr	r0, [pc, #96]	@ (800eafc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ea9c:	f000 fd17 	bl	800f4ce <USBD_GetEpDesc>
 800eaa0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800eaa2:	2101      	movs	r1, #1
 800eaa4:	4815      	ldr	r0, [pc, #84]	@ (800eafc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800eaa6:	f000 fd12 	bl	800f4ce <USBD_GetEpDesc>
 800eaaa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800eaac:	2181      	movs	r1, #129	@ 0x81
 800eaae:	4813      	ldr	r0, [pc, #76]	@ (800eafc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800eab0:	f000 fd0d 	bl	800f4ce <USBD_GetEpDesc>
 800eab4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800eab6:	697b      	ldr	r3, [r7, #20]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d002      	beq.n	800eac2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800eabc:	697b      	ldr	r3, [r7, #20]
 800eabe:	2210      	movs	r2, #16
 800eac0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800eac2:	693b      	ldr	r3, [r7, #16]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d006      	beq.n	800ead6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800eac8:	693b      	ldr	r3, [r7, #16]
 800eaca:	2200      	movs	r2, #0
 800eacc:	711a      	strb	r2, [r3, #4]
 800eace:	2200      	movs	r2, #0
 800ead0:	f042 0202 	orr.w	r2, r2, #2
 800ead4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d006      	beq.n	800eaea <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	2200      	movs	r2, #0
 800eae0:	711a      	strb	r2, [r3, #4]
 800eae2:	2200      	movs	r2, #0
 800eae4:	f042 0202 	orr.w	r2, r2, #2
 800eae8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	2243      	movs	r2, #67	@ 0x43
 800eaee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800eaf0:	4b02      	ldr	r3, [pc, #8]	@ (800eafc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	3718      	adds	r7, #24
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	bd80      	pop	{r7, pc}
 800eafa:	bf00      	nop
 800eafc:	24000058 	.word	0x24000058

0800eb00 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800eb00:	b580      	push	{r7, lr}
 800eb02:	b086      	sub	sp, #24
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800eb08:	2182      	movs	r1, #130	@ 0x82
 800eb0a:	4818      	ldr	r0, [pc, #96]	@ (800eb6c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800eb0c:	f000 fcdf 	bl	800f4ce <USBD_GetEpDesc>
 800eb10:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800eb12:	2101      	movs	r1, #1
 800eb14:	4815      	ldr	r0, [pc, #84]	@ (800eb6c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800eb16:	f000 fcda 	bl	800f4ce <USBD_GetEpDesc>
 800eb1a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800eb1c:	2181      	movs	r1, #129	@ 0x81
 800eb1e:	4813      	ldr	r0, [pc, #76]	@ (800eb6c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800eb20:	f000 fcd5 	bl	800f4ce <USBD_GetEpDesc>
 800eb24:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800eb26:	697b      	ldr	r3, [r7, #20]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d002      	beq.n	800eb32 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800eb2c:	697b      	ldr	r3, [r7, #20]
 800eb2e:	2210      	movs	r2, #16
 800eb30:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800eb32:	693b      	ldr	r3, [r7, #16]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d006      	beq.n	800eb46 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800eb38:	693b      	ldr	r3, [r7, #16]
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800eb40:	711a      	strb	r2, [r3, #4]
 800eb42:	2200      	movs	r2, #0
 800eb44:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d006      	beq.n	800eb5a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	2200      	movs	r2, #0
 800eb50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800eb54:	711a      	strb	r2, [r3, #4]
 800eb56:	2200      	movs	r2, #0
 800eb58:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	2243      	movs	r2, #67	@ 0x43
 800eb5e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800eb60:	4b02      	ldr	r3, [pc, #8]	@ (800eb6c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800eb62:	4618      	mov	r0, r3
 800eb64:	3718      	adds	r7, #24
 800eb66:	46bd      	mov	sp, r7
 800eb68:	bd80      	pop	{r7, pc}
 800eb6a:	bf00      	nop
 800eb6c:	24000058 	.word	0x24000058

0800eb70 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800eb70:	b480      	push	{r7}
 800eb72:	b083      	sub	sp, #12
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	220a      	movs	r2, #10
 800eb7c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800eb7e:	4b03      	ldr	r3, [pc, #12]	@ (800eb8c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800eb80:	4618      	mov	r0, r3
 800eb82:	370c      	adds	r7, #12
 800eb84:	46bd      	mov	sp, r7
 800eb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8a:	4770      	bx	lr
 800eb8c:	24000014 	.word	0x24000014

0800eb90 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800eb90:	b480      	push	{r7}
 800eb92:	b083      	sub	sp, #12
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
 800eb98:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800eb9a:	683b      	ldr	r3, [r7, #0]
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d101      	bne.n	800eba4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800eba0:	2303      	movs	r3, #3
 800eba2:	e009      	b.n	800ebb8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ebaa:	687a      	ldr	r2, [r7, #4]
 800ebac:	33b0      	adds	r3, #176	@ 0xb0
 800ebae:	009b      	lsls	r3, r3, #2
 800ebb0:	4413      	add	r3, r2
 800ebb2:	683a      	ldr	r2, [r7, #0]
 800ebb4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ebb6:	2300      	movs	r3, #0
}
 800ebb8:	4618      	mov	r0, r3
 800ebba:	370c      	adds	r7, #12
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc2:	4770      	bx	lr

0800ebc4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ebc4:	b480      	push	{r7}
 800ebc6:	b087      	sub	sp, #28
 800ebc8:	af00      	add	r7, sp, #0
 800ebca:	60f8      	str	r0, [r7, #12]
 800ebcc:	60b9      	str	r1, [r7, #8]
 800ebce:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	32b0      	adds	r2, #176	@ 0xb0
 800ebda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebde:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ebe0:	697b      	ldr	r3, [r7, #20]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d101      	bne.n	800ebea <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ebe6:	2303      	movs	r3, #3
 800ebe8:	e008      	b.n	800ebfc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ebea:	697b      	ldr	r3, [r7, #20]
 800ebec:	68ba      	ldr	r2, [r7, #8]
 800ebee:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800ebf2:	697b      	ldr	r3, [r7, #20]
 800ebf4:	687a      	ldr	r2, [r7, #4]
 800ebf6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800ebfa:	2300      	movs	r3, #0
}
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	371c      	adds	r7, #28
 800ec00:	46bd      	mov	sp, r7
 800ec02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec06:	4770      	bx	lr

0800ec08 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ec08:	b480      	push	{r7}
 800ec0a:	b085      	sub	sp, #20
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
 800ec10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	32b0      	adds	r2, #176	@ 0xb0
 800ec1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec20:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d101      	bne.n	800ec2c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ec28:	2303      	movs	r3, #3
 800ec2a:	e004      	b.n	800ec36 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	683a      	ldr	r2, [r7, #0]
 800ec30:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800ec34:	2300      	movs	r3, #0
}
 800ec36:	4618      	mov	r0, r3
 800ec38:	3714      	adds	r7, #20
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec40:	4770      	bx	lr
	...

0800ec44 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b084      	sub	sp, #16
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	32b0      	adds	r2, #176	@ 0xb0
 800ec56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ec5a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800ec5c:	2301      	movs	r3, #1
 800ec5e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d101      	bne.n	800ec6a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ec66:	2303      	movs	r3, #3
 800ec68:	e025      	b.n	800ecb6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800ec6a:	68bb      	ldr	r3, [r7, #8]
 800ec6c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d11f      	bne.n	800ecb4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ec74:	68bb      	ldr	r3, [r7, #8]
 800ec76:	2201      	movs	r2, #1
 800ec78:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800ec7c:	4b10      	ldr	r3, [pc, #64]	@ (800ecc0 <USBD_CDC_TransmitPacket+0x7c>)
 800ec7e:	781b      	ldrb	r3, [r3, #0]
 800ec80:	f003 020f 	and.w	r2, r3, #15
 800ec84:	68bb      	ldr	r3, [r7, #8]
 800ec86:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800ec8a:	6878      	ldr	r0, [r7, #4]
 800ec8c:	4613      	mov	r3, r2
 800ec8e:	009b      	lsls	r3, r3, #2
 800ec90:	4413      	add	r3, r2
 800ec92:	009b      	lsls	r3, r3, #2
 800ec94:	4403      	add	r3, r0
 800ec96:	3318      	adds	r3, #24
 800ec98:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800ec9a:	4b09      	ldr	r3, [pc, #36]	@ (800ecc0 <USBD_CDC_TransmitPacket+0x7c>)
 800ec9c:	7819      	ldrb	r1, [r3, #0]
 800ec9e:	68bb      	ldr	r3, [r7, #8]
 800eca0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800eca4:	68bb      	ldr	r3, [r7, #8]
 800eca6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ecaa:	6878      	ldr	r0, [r7, #4]
 800ecac:	f002 f851 	bl	8010d52 <USBD_LL_Transmit>

    ret = USBD_OK;
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ecb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	3710      	adds	r7, #16
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd80      	pop	{r7, pc}
 800ecbe:	bf00      	nop
 800ecc0:	2400009b 	.word	0x2400009b

0800ecc4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b084      	sub	sp, #16
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	32b0      	adds	r2, #176	@ 0xb0
 800ecd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecda:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	32b0      	adds	r2, #176	@ 0xb0
 800ece6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d101      	bne.n	800ecf2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ecee:	2303      	movs	r3, #3
 800ecf0:	e018      	b.n	800ed24 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	7c1b      	ldrb	r3, [r3, #16]
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d10a      	bne.n	800ed10 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ecfa:	4b0c      	ldr	r3, [pc, #48]	@ (800ed2c <USBD_CDC_ReceivePacket+0x68>)
 800ecfc:	7819      	ldrb	r1, [r3, #0]
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ed04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ed08:	6878      	ldr	r0, [r7, #4]
 800ed0a:	f002 f843 	bl	8010d94 <USBD_LL_PrepareReceive>
 800ed0e:	e008      	b.n	800ed22 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ed10:	4b06      	ldr	r3, [pc, #24]	@ (800ed2c <USBD_CDC_ReceivePacket+0x68>)
 800ed12:	7819      	ldrb	r1, [r3, #0]
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ed1a:	2340      	movs	r3, #64	@ 0x40
 800ed1c:	6878      	ldr	r0, [r7, #4]
 800ed1e:	f002 f839 	bl	8010d94 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ed22:	2300      	movs	r3, #0
}
 800ed24:	4618      	mov	r0, r3
 800ed26:	3710      	adds	r7, #16
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	bd80      	pop	{r7, pc}
 800ed2c:	2400009c 	.word	0x2400009c

0800ed30 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b086      	sub	sp, #24
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	60f8      	str	r0, [r7, #12]
 800ed38:	60b9      	str	r1, [r7, #8]
 800ed3a:	4613      	mov	r3, r2
 800ed3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d101      	bne.n	800ed48 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ed44:	2303      	movs	r3, #3
 800ed46:	e01f      	b.n	800ed88 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	2200      	movs	r2, #0
 800ed54:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ed60:	68bb      	ldr	r3, [r7, #8]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d003      	beq.n	800ed6e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	68ba      	ldr	r2, [r7, #8]
 800ed6a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	2201      	movs	r2, #1
 800ed72:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	79fa      	ldrb	r2, [r7, #7]
 800ed7a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ed7c:	68f8      	ldr	r0, [r7, #12]
 800ed7e:	f001 fead 	bl	8010adc <USBD_LL_Init>
 800ed82:	4603      	mov	r3, r0
 800ed84:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ed86:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed88:	4618      	mov	r0, r3
 800ed8a:	3718      	adds	r7, #24
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bd80      	pop	{r7, pc}

0800ed90 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b084      	sub	sp, #16
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
 800ed98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ed9e:	683b      	ldr	r3, [r7, #0]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d101      	bne.n	800eda8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800eda4:	2303      	movs	r3, #3
 800eda6:	e025      	b.n	800edf4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	683a      	ldr	r2, [r7, #0]
 800edac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	32ae      	adds	r2, #174	@ 0xae
 800edba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d00f      	beq.n	800ede4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	32ae      	adds	r2, #174	@ 0xae
 800edce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edd4:	f107 020e 	add.w	r2, r7, #14
 800edd8:	4610      	mov	r0, r2
 800edda:	4798      	blx	r3
 800eddc:	4602      	mov	r2, r0
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800edea:	1c5a      	adds	r2, r3, #1
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800edf2:	2300      	movs	r3, #0
}
 800edf4:	4618      	mov	r0, r3
 800edf6:	3710      	adds	r7, #16
 800edf8:	46bd      	mov	sp, r7
 800edfa:	bd80      	pop	{r7, pc}

0800edfc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b082      	sub	sp, #8
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ee04:	6878      	ldr	r0, [r7, #4]
 800ee06:	f001 febb 	bl	8010b80 <USBD_LL_Start>
 800ee0a:	4603      	mov	r3, r0
}
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	3708      	adds	r7, #8
 800ee10:	46bd      	mov	sp, r7
 800ee12:	bd80      	pop	{r7, pc}

0800ee14 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ee14:	b480      	push	{r7}
 800ee16:	b083      	sub	sp, #12
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ee1c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ee1e:	4618      	mov	r0, r3
 800ee20:	370c      	adds	r7, #12
 800ee22:	46bd      	mov	sp, r7
 800ee24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee28:	4770      	bx	lr

0800ee2a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ee2a:	b580      	push	{r7, lr}
 800ee2c:	b084      	sub	sp, #16
 800ee2e:	af00      	add	r7, sp, #0
 800ee30:	6078      	str	r0, [r7, #4]
 800ee32:	460b      	mov	r3, r1
 800ee34:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ee36:	2300      	movs	r3, #0
 800ee38:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d009      	beq.n	800ee58 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	78fa      	ldrb	r2, [r7, #3]
 800ee4e:	4611      	mov	r1, r2
 800ee50:	6878      	ldr	r0, [r7, #4]
 800ee52:	4798      	blx	r3
 800ee54:	4603      	mov	r3, r0
 800ee56:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ee58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	3710      	adds	r7, #16
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	bd80      	pop	{r7, pc}

0800ee62 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ee62:	b580      	push	{r7, lr}
 800ee64:	b084      	sub	sp, #16
 800ee66:	af00      	add	r7, sp, #0
 800ee68:	6078      	str	r0, [r7, #4]
 800ee6a:	460b      	mov	r3, r1
 800ee6c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ee6e:	2300      	movs	r3, #0
 800ee70:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ee78:	685b      	ldr	r3, [r3, #4]
 800ee7a:	78fa      	ldrb	r2, [r7, #3]
 800ee7c:	4611      	mov	r1, r2
 800ee7e:	6878      	ldr	r0, [r7, #4]
 800ee80:	4798      	blx	r3
 800ee82:	4603      	mov	r3, r0
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d001      	beq.n	800ee8c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ee88:	2303      	movs	r3, #3
 800ee8a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ee8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee8e:	4618      	mov	r0, r3
 800ee90:	3710      	adds	r7, #16
 800ee92:	46bd      	mov	sp, r7
 800ee94:	bd80      	pop	{r7, pc}

0800ee96 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ee96:	b580      	push	{r7, lr}
 800ee98:	b084      	sub	sp, #16
 800ee9a:	af00      	add	r7, sp, #0
 800ee9c:	6078      	str	r0, [r7, #4]
 800ee9e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800eea6:	6839      	ldr	r1, [r7, #0]
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f001 f936 	bl	801011a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	2201      	movs	r2, #1
 800eeb2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800eebc:	461a      	mov	r2, r3
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800eeca:	f003 031f 	and.w	r3, r3, #31
 800eece:	2b02      	cmp	r3, #2
 800eed0:	d01a      	beq.n	800ef08 <USBD_LL_SetupStage+0x72>
 800eed2:	2b02      	cmp	r3, #2
 800eed4:	d822      	bhi.n	800ef1c <USBD_LL_SetupStage+0x86>
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d002      	beq.n	800eee0 <USBD_LL_SetupStage+0x4a>
 800eeda:	2b01      	cmp	r3, #1
 800eedc:	d00a      	beq.n	800eef4 <USBD_LL_SetupStage+0x5e>
 800eede:	e01d      	b.n	800ef1c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800eee6:	4619      	mov	r1, r3
 800eee8:	6878      	ldr	r0, [r7, #4]
 800eeea:	f000 fb63 	bl	800f5b4 <USBD_StdDevReq>
 800eeee:	4603      	mov	r3, r0
 800eef0:	73fb      	strb	r3, [r7, #15]
      break;
 800eef2:	e020      	b.n	800ef36 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800eefa:	4619      	mov	r1, r3
 800eefc:	6878      	ldr	r0, [r7, #4]
 800eefe:	f000 fbcb 	bl	800f698 <USBD_StdItfReq>
 800ef02:	4603      	mov	r3, r0
 800ef04:	73fb      	strb	r3, [r7, #15]
      break;
 800ef06:	e016      	b.n	800ef36 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ef0e:	4619      	mov	r1, r3
 800ef10:	6878      	ldr	r0, [r7, #4]
 800ef12:	f000 fc2d 	bl	800f770 <USBD_StdEPReq>
 800ef16:	4603      	mov	r3, r0
 800ef18:	73fb      	strb	r3, [r7, #15]
      break;
 800ef1a:	e00c      	b.n	800ef36 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ef22:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ef26:	b2db      	uxtb	r3, r3
 800ef28:	4619      	mov	r1, r3
 800ef2a:	6878      	ldr	r0, [r7, #4]
 800ef2c:	f001 fe88 	bl	8010c40 <USBD_LL_StallEP>
 800ef30:	4603      	mov	r3, r0
 800ef32:	73fb      	strb	r3, [r7, #15]
      break;
 800ef34:	bf00      	nop
  }

  return ret;
 800ef36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef38:	4618      	mov	r0, r3
 800ef3a:	3710      	adds	r7, #16
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}

0800ef40 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b086      	sub	sp, #24
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	60f8      	str	r0, [r7, #12]
 800ef48:	460b      	mov	r3, r1
 800ef4a:	607a      	str	r2, [r7, #4]
 800ef4c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ef4e:	2300      	movs	r3, #0
 800ef50:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ef52:	7afb      	ldrb	r3, [r7, #11]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d16e      	bne.n	800f036 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ef5e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ef66:	2b03      	cmp	r3, #3
 800ef68:	f040 8098 	bne.w	800f09c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ef6c:	693b      	ldr	r3, [r7, #16]
 800ef6e:	689a      	ldr	r2, [r3, #8]
 800ef70:	693b      	ldr	r3, [r7, #16]
 800ef72:	68db      	ldr	r3, [r3, #12]
 800ef74:	429a      	cmp	r2, r3
 800ef76:	d913      	bls.n	800efa0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ef78:	693b      	ldr	r3, [r7, #16]
 800ef7a:	689a      	ldr	r2, [r3, #8]
 800ef7c:	693b      	ldr	r3, [r7, #16]
 800ef7e:	68db      	ldr	r3, [r3, #12]
 800ef80:	1ad2      	subs	r2, r2, r3
 800ef82:	693b      	ldr	r3, [r7, #16]
 800ef84:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ef86:	693b      	ldr	r3, [r7, #16]
 800ef88:	68da      	ldr	r2, [r3, #12]
 800ef8a:	693b      	ldr	r3, [r7, #16]
 800ef8c:	689b      	ldr	r3, [r3, #8]
 800ef8e:	4293      	cmp	r3, r2
 800ef90:	bf28      	it	cs
 800ef92:	4613      	movcs	r3, r2
 800ef94:	461a      	mov	r2, r3
 800ef96:	6879      	ldr	r1, [r7, #4]
 800ef98:	68f8      	ldr	r0, [r7, #12]
 800ef9a:	f001 f9be 	bl	801031a <USBD_CtlContinueRx>
 800ef9e:	e07d      	b.n	800f09c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800efa0:	68fb      	ldr	r3, [r7, #12]
 800efa2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800efa6:	f003 031f 	and.w	r3, r3, #31
 800efaa:	2b02      	cmp	r3, #2
 800efac:	d014      	beq.n	800efd8 <USBD_LL_DataOutStage+0x98>
 800efae:	2b02      	cmp	r3, #2
 800efb0:	d81d      	bhi.n	800efee <USBD_LL_DataOutStage+0xae>
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d002      	beq.n	800efbc <USBD_LL_DataOutStage+0x7c>
 800efb6:	2b01      	cmp	r3, #1
 800efb8:	d003      	beq.n	800efc2 <USBD_LL_DataOutStage+0x82>
 800efba:	e018      	b.n	800efee <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800efbc:	2300      	movs	r3, #0
 800efbe:	75bb      	strb	r3, [r7, #22]
            break;
 800efc0:	e018      	b.n	800eff4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800efc8:	b2db      	uxtb	r3, r3
 800efca:	4619      	mov	r1, r3
 800efcc:	68f8      	ldr	r0, [r7, #12]
 800efce:	f000 fa64 	bl	800f49a <USBD_CoreFindIF>
 800efd2:	4603      	mov	r3, r0
 800efd4:	75bb      	strb	r3, [r7, #22]
            break;
 800efd6:	e00d      	b.n	800eff4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800efde:	b2db      	uxtb	r3, r3
 800efe0:	4619      	mov	r1, r3
 800efe2:	68f8      	ldr	r0, [r7, #12]
 800efe4:	f000 fa66 	bl	800f4b4 <USBD_CoreFindEP>
 800efe8:	4603      	mov	r3, r0
 800efea:	75bb      	strb	r3, [r7, #22]
            break;
 800efec:	e002      	b.n	800eff4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800efee:	2300      	movs	r3, #0
 800eff0:	75bb      	strb	r3, [r7, #22]
            break;
 800eff2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800eff4:	7dbb      	ldrb	r3, [r7, #22]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d119      	bne.n	800f02e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800effa:	68fb      	ldr	r3, [r7, #12]
 800effc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f000:	b2db      	uxtb	r3, r3
 800f002:	2b03      	cmp	r3, #3
 800f004:	d113      	bne.n	800f02e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800f006:	7dba      	ldrb	r2, [r7, #22]
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	32ae      	adds	r2, #174	@ 0xae
 800f00c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f010:	691b      	ldr	r3, [r3, #16]
 800f012:	2b00      	cmp	r3, #0
 800f014:	d00b      	beq.n	800f02e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800f016:	7dba      	ldrb	r2, [r7, #22]
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800f01e:	7dba      	ldrb	r2, [r7, #22]
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	32ae      	adds	r2, #174	@ 0xae
 800f024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f028:	691b      	ldr	r3, [r3, #16]
 800f02a:	68f8      	ldr	r0, [r7, #12]
 800f02c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800f02e:	68f8      	ldr	r0, [r7, #12]
 800f030:	f001 f984 	bl	801033c <USBD_CtlSendStatus>
 800f034:	e032      	b.n	800f09c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800f036:	7afb      	ldrb	r3, [r7, #11]
 800f038:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f03c:	b2db      	uxtb	r3, r3
 800f03e:	4619      	mov	r1, r3
 800f040:	68f8      	ldr	r0, [r7, #12]
 800f042:	f000 fa37 	bl	800f4b4 <USBD_CoreFindEP>
 800f046:	4603      	mov	r3, r0
 800f048:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f04a:	7dbb      	ldrb	r3, [r7, #22]
 800f04c:	2bff      	cmp	r3, #255	@ 0xff
 800f04e:	d025      	beq.n	800f09c <USBD_LL_DataOutStage+0x15c>
 800f050:	7dbb      	ldrb	r3, [r7, #22]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d122      	bne.n	800f09c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f05c:	b2db      	uxtb	r3, r3
 800f05e:	2b03      	cmp	r3, #3
 800f060:	d117      	bne.n	800f092 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800f062:	7dba      	ldrb	r2, [r7, #22]
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	32ae      	adds	r2, #174	@ 0xae
 800f068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f06c:	699b      	ldr	r3, [r3, #24]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d00f      	beq.n	800f092 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800f072:	7dba      	ldrb	r2, [r7, #22]
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800f07a:	7dba      	ldrb	r2, [r7, #22]
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	32ae      	adds	r2, #174	@ 0xae
 800f080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f084:	699b      	ldr	r3, [r3, #24]
 800f086:	7afa      	ldrb	r2, [r7, #11]
 800f088:	4611      	mov	r1, r2
 800f08a:	68f8      	ldr	r0, [r7, #12]
 800f08c:	4798      	blx	r3
 800f08e:	4603      	mov	r3, r0
 800f090:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800f092:	7dfb      	ldrb	r3, [r7, #23]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d001      	beq.n	800f09c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800f098:	7dfb      	ldrb	r3, [r7, #23]
 800f09a:	e000      	b.n	800f09e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800f09c:	2300      	movs	r3, #0
}
 800f09e:	4618      	mov	r0, r3
 800f0a0:	3718      	adds	r7, #24
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bd80      	pop	{r7, pc}

0800f0a6 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f0a6:	b580      	push	{r7, lr}
 800f0a8:	b086      	sub	sp, #24
 800f0aa:	af00      	add	r7, sp, #0
 800f0ac:	60f8      	str	r0, [r7, #12]
 800f0ae:	460b      	mov	r3, r1
 800f0b0:	607a      	str	r2, [r7, #4]
 800f0b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800f0b4:	7afb      	ldrb	r3, [r7, #11]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d16f      	bne.n	800f19a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	3314      	adds	r3, #20
 800f0be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800f0c6:	2b02      	cmp	r3, #2
 800f0c8:	d15a      	bne.n	800f180 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800f0ca:	693b      	ldr	r3, [r7, #16]
 800f0cc:	689a      	ldr	r2, [r3, #8]
 800f0ce:	693b      	ldr	r3, [r7, #16]
 800f0d0:	68db      	ldr	r3, [r3, #12]
 800f0d2:	429a      	cmp	r2, r3
 800f0d4:	d914      	bls.n	800f100 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f0d6:	693b      	ldr	r3, [r7, #16]
 800f0d8:	689a      	ldr	r2, [r3, #8]
 800f0da:	693b      	ldr	r3, [r7, #16]
 800f0dc:	68db      	ldr	r3, [r3, #12]
 800f0de:	1ad2      	subs	r2, r2, r3
 800f0e0:	693b      	ldr	r3, [r7, #16]
 800f0e2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f0e4:	693b      	ldr	r3, [r7, #16]
 800f0e6:	689b      	ldr	r3, [r3, #8]
 800f0e8:	461a      	mov	r2, r3
 800f0ea:	6879      	ldr	r1, [r7, #4]
 800f0ec:	68f8      	ldr	r0, [r7, #12]
 800f0ee:	f001 f8e6 	bl	80102be <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	2100      	movs	r1, #0
 800f0f8:	68f8      	ldr	r0, [r7, #12]
 800f0fa:	f001 fe4b 	bl	8010d94 <USBD_LL_PrepareReceive>
 800f0fe:	e03f      	b.n	800f180 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f100:	693b      	ldr	r3, [r7, #16]
 800f102:	68da      	ldr	r2, [r3, #12]
 800f104:	693b      	ldr	r3, [r7, #16]
 800f106:	689b      	ldr	r3, [r3, #8]
 800f108:	429a      	cmp	r2, r3
 800f10a:	d11c      	bne.n	800f146 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f10c:	693b      	ldr	r3, [r7, #16]
 800f10e:	685a      	ldr	r2, [r3, #4]
 800f110:	693b      	ldr	r3, [r7, #16]
 800f112:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f114:	429a      	cmp	r2, r3
 800f116:	d316      	bcc.n	800f146 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f118:	693b      	ldr	r3, [r7, #16]
 800f11a:	685a      	ldr	r2, [r3, #4]
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f122:	429a      	cmp	r2, r3
 800f124:	d20f      	bcs.n	800f146 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f126:	2200      	movs	r2, #0
 800f128:	2100      	movs	r1, #0
 800f12a:	68f8      	ldr	r0, [r7, #12]
 800f12c:	f001 f8c7 	bl	80102be <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	2200      	movs	r2, #0
 800f134:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f138:	2300      	movs	r3, #0
 800f13a:	2200      	movs	r2, #0
 800f13c:	2100      	movs	r1, #0
 800f13e:	68f8      	ldr	r0, [r7, #12]
 800f140:	f001 fe28 	bl	8010d94 <USBD_LL_PrepareReceive>
 800f144:	e01c      	b.n	800f180 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f14c:	b2db      	uxtb	r3, r3
 800f14e:	2b03      	cmp	r3, #3
 800f150:	d10f      	bne.n	800f172 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f158:	68db      	ldr	r3, [r3, #12]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d009      	beq.n	800f172 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	2200      	movs	r2, #0
 800f162:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f16c:	68db      	ldr	r3, [r3, #12]
 800f16e:	68f8      	ldr	r0, [r7, #12]
 800f170:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f172:	2180      	movs	r1, #128	@ 0x80
 800f174:	68f8      	ldr	r0, [r7, #12]
 800f176:	f001 fd63 	bl	8010c40 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f17a:	68f8      	ldr	r0, [r7, #12]
 800f17c:	f001 f8f1 	bl	8010362 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800f186:	2b00      	cmp	r3, #0
 800f188:	d03a      	beq.n	800f200 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800f18a:	68f8      	ldr	r0, [r7, #12]
 800f18c:	f7ff fe42 	bl	800ee14 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	2200      	movs	r2, #0
 800f194:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800f198:	e032      	b.n	800f200 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800f19a:	7afb      	ldrb	r3, [r7, #11]
 800f19c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800f1a0:	b2db      	uxtb	r3, r3
 800f1a2:	4619      	mov	r1, r3
 800f1a4:	68f8      	ldr	r0, [r7, #12]
 800f1a6:	f000 f985 	bl	800f4b4 <USBD_CoreFindEP>
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f1ae:	7dfb      	ldrb	r3, [r7, #23]
 800f1b0:	2bff      	cmp	r3, #255	@ 0xff
 800f1b2:	d025      	beq.n	800f200 <USBD_LL_DataInStage+0x15a>
 800f1b4:	7dfb      	ldrb	r3, [r7, #23]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d122      	bne.n	800f200 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f1c0:	b2db      	uxtb	r3, r3
 800f1c2:	2b03      	cmp	r3, #3
 800f1c4:	d11c      	bne.n	800f200 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800f1c6:	7dfa      	ldrb	r2, [r7, #23]
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	32ae      	adds	r2, #174	@ 0xae
 800f1cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1d0:	695b      	ldr	r3, [r3, #20]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d014      	beq.n	800f200 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800f1d6:	7dfa      	ldrb	r2, [r7, #23]
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800f1de:	7dfa      	ldrb	r2, [r7, #23]
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	32ae      	adds	r2, #174	@ 0xae
 800f1e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1e8:	695b      	ldr	r3, [r3, #20]
 800f1ea:	7afa      	ldrb	r2, [r7, #11]
 800f1ec:	4611      	mov	r1, r2
 800f1ee:	68f8      	ldr	r0, [r7, #12]
 800f1f0:	4798      	blx	r3
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800f1f6:	7dbb      	ldrb	r3, [r7, #22]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d001      	beq.n	800f200 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800f1fc:	7dbb      	ldrb	r3, [r7, #22]
 800f1fe:	e000      	b.n	800f202 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800f200:	2300      	movs	r3, #0
}
 800f202:	4618      	mov	r0, r3
 800f204:	3718      	adds	r7, #24
 800f206:	46bd      	mov	sp, r7
 800f208:	bd80      	pop	{r7, pc}

0800f20a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f20a:	b580      	push	{r7, lr}
 800f20c:	b084      	sub	sp, #16
 800f20e:	af00      	add	r7, sp, #0
 800f210:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800f212:	2300      	movs	r3, #0
 800f214:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	2201      	movs	r2, #1
 800f21a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	2200      	movs	r2, #0
 800f222:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	2200      	movs	r2, #0
 800f22a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	2200      	movs	r2, #0
 800f230:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	2200      	movs	r2, #0
 800f238:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f242:	2b00      	cmp	r3, #0
 800f244:	d014      	beq.n	800f270 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f24c:	685b      	ldr	r3, [r3, #4]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d00e      	beq.n	800f270 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f258:	685b      	ldr	r3, [r3, #4]
 800f25a:	687a      	ldr	r2, [r7, #4]
 800f25c:	6852      	ldr	r2, [r2, #4]
 800f25e:	b2d2      	uxtb	r2, r2
 800f260:	4611      	mov	r1, r2
 800f262:	6878      	ldr	r0, [r7, #4]
 800f264:	4798      	blx	r3
 800f266:	4603      	mov	r3, r0
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d001      	beq.n	800f270 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800f26c:	2303      	movs	r3, #3
 800f26e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f270:	2340      	movs	r3, #64	@ 0x40
 800f272:	2200      	movs	r2, #0
 800f274:	2100      	movs	r1, #0
 800f276:	6878      	ldr	r0, [r7, #4]
 800f278:	f001 fc9d 	bl	8010bb6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	2201      	movs	r2, #1
 800f280:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	2240      	movs	r2, #64	@ 0x40
 800f288:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f28c:	2340      	movs	r3, #64	@ 0x40
 800f28e:	2200      	movs	r2, #0
 800f290:	2180      	movs	r1, #128	@ 0x80
 800f292:	6878      	ldr	r0, [r7, #4]
 800f294:	f001 fc8f 	bl	8010bb6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	2201      	movs	r2, #1
 800f29c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	2240      	movs	r2, #64	@ 0x40
 800f2a2:	621a      	str	r2, [r3, #32]

  return ret;
 800f2a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	3710      	adds	r7, #16
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	bd80      	pop	{r7, pc}

0800f2ae <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f2ae:	b480      	push	{r7}
 800f2b0:	b083      	sub	sp, #12
 800f2b2:	af00      	add	r7, sp, #0
 800f2b4:	6078      	str	r0, [r7, #4]
 800f2b6:	460b      	mov	r3, r1
 800f2b8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	78fa      	ldrb	r2, [r7, #3]
 800f2be:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f2c0:	2300      	movs	r3, #0
}
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	370c      	adds	r7, #12
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2cc:	4770      	bx	lr

0800f2ce <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f2ce:	b480      	push	{r7}
 800f2d0:	b083      	sub	sp, #12
 800f2d2:	af00      	add	r7, sp, #0
 800f2d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f2dc:	b2db      	uxtb	r3, r3
 800f2de:	2b04      	cmp	r3, #4
 800f2e0:	d006      	beq.n	800f2f0 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f2e8:	b2da      	uxtb	r2, r3
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	2204      	movs	r2, #4
 800f2f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800f2f8:	2300      	movs	r3, #0
}
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	370c      	adds	r7, #12
 800f2fe:	46bd      	mov	sp, r7
 800f300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f304:	4770      	bx	lr

0800f306 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f306:	b480      	push	{r7}
 800f308:	b083      	sub	sp, #12
 800f30a:	af00      	add	r7, sp, #0
 800f30c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f314:	b2db      	uxtb	r3, r3
 800f316:	2b04      	cmp	r3, #4
 800f318:	d106      	bne.n	800f328 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800f320:	b2da      	uxtb	r2, r3
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800f328:	2300      	movs	r3, #0
}
 800f32a:	4618      	mov	r0, r3
 800f32c:	370c      	adds	r7, #12
 800f32e:	46bd      	mov	sp, r7
 800f330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f334:	4770      	bx	lr

0800f336 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f336:	b580      	push	{r7, lr}
 800f338:	b082      	sub	sp, #8
 800f33a:	af00      	add	r7, sp, #0
 800f33c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f344:	b2db      	uxtb	r3, r3
 800f346:	2b03      	cmp	r3, #3
 800f348:	d110      	bne.n	800f36c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f350:	2b00      	cmp	r3, #0
 800f352:	d00b      	beq.n	800f36c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f35a:	69db      	ldr	r3, [r3, #28]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d005      	beq.n	800f36c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f366:	69db      	ldr	r3, [r3, #28]
 800f368:	6878      	ldr	r0, [r7, #4]
 800f36a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800f36c:	2300      	movs	r3, #0
}
 800f36e:	4618      	mov	r0, r3
 800f370:	3708      	adds	r7, #8
 800f372:	46bd      	mov	sp, r7
 800f374:	bd80      	pop	{r7, pc}

0800f376 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f376:	b580      	push	{r7, lr}
 800f378:	b082      	sub	sp, #8
 800f37a:	af00      	add	r7, sp, #0
 800f37c:	6078      	str	r0, [r7, #4]
 800f37e:	460b      	mov	r3, r1
 800f380:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	32ae      	adds	r2, #174	@ 0xae
 800f38c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f390:	2b00      	cmp	r3, #0
 800f392:	d101      	bne.n	800f398 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800f394:	2303      	movs	r3, #3
 800f396:	e01c      	b.n	800f3d2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f39e:	b2db      	uxtb	r3, r3
 800f3a0:	2b03      	cmp	r3, #3
 800f3a2:	d115      	bne.n	800f3d0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	32ae      	adds	r2, #174	@ 0xae
 800f3ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3b2:	6a1b      	ldr	r3, [r3, #32]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d00b      	beq.n	800f3d0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	32ae      	adds	r2, #174	@ 0xae
 800f3c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3c6:	6a1b      	ldr	r3, [r3, #32]
 800f3c8:	78fa      	ldrb	r2, [r7, #3]
 800f3ca:	4611      	mov	r1, r2
 800f3cc:	6878      	ldr	r0, [r7, #4]
 800f3ce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f3d0:	2300      	movs	r3, #0
}
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	3708      	adds	r7, #8
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	bd80      	pop	{r7, pc}

0800f3da <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f3da:	b580      	push	{r7, lr}
 800f3dc:	b082      	sub	sp, #8
 800f3de:	af00      	add	r7, sp, #0
 800f3e0:	6078      	str	r0, [r7, #4]
 800f3e2:	460b      	mov	r3, r1
 800f3e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	32ae      	adds	r2, #174	@ 0xae
 800f3f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d101      	bne.n	800f3fc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800f3f8:	2303      	movs	r3, #3
 800f3fa:	e01c      	b.n	800f436 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f402:	b2db      	uxtb	r3, r3
 800f404:	2b03      	cmp	r3, #3
 800f406:	d115      	bne.n	800f434 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	32ae      	adds	r2, #174	@ 0xae
 800f412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f418:	2b00      	cmp	r3, #0
 800f41a:	d00b      	beq.n	800f434 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	32ae      	adds	r2, #174	@ 0xae
 800f426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f42a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f42c:	78fa      	ldrb	r2, [r7, #3]
 800f42e:	4611      	mov	r1, r2
 800f430:	6878      	ldr	r0, [r7, #4]
 800f432:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f434:	2300      	movs	r3, #0
}
 800f436:	4618      	mov	r0, r3
 800f438:	3708      	adds	r7, #8
 800f43a:	46bd      	mov	sp, r7
 800f43c:	bd80      	pop	{r7, pc}

0800f43e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800f43e:	b480      	push	{r7}
 800f440:	b083      	sub	sp, #12
 800f442:	af00      	add	r7, sp, #0
 800f444:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f446:	2300      	movs	r3, #0
}
 800f448:	4618      	mov	r0, r3
 800f44a:	370c      	adds	r7, #12
 800f44c:	46bd      	mov	sp, r7
 800f44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f452:	4770      	bx	lr

0800f454 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b084      	sub	sp, #16
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800f45c:	2300      	movs	r3, #0
 800f45e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	2201      	movs	r2, #1
 800f464:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d00e      	beq.n	800f490 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800f478:	685b      	ldr	r3, [r3, #4]
 800f47a:	687a      	ldr	r2, [r7, #4]
 800f47c:	6852      	ldr	r2, [r2, #4]
 800f47e:	b2d2      	uxtb	r2, r2
 800f480:	4611      	mov	r1, r2
 800f482:	6878      	ldr	r0, [r7, #4]
 800f484:	4798      	blx	r3
 800f486:	4603      	mov	r3, r0
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d001      	beq.n	800f490 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800f48c:	2303      	movs	r3, #3
 800f48e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800f490:	7bfb      	ldrb	r3, [r7, #15]
}
 800f492:	4618      	mov	r0, r3
 800f494:	3710      	adds	r7, #16
 800f496:	46bd      	mov	sp, r7
 800f498:	bd80      	pop	{r7, pc}

0800f49a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f49a:	b480      	push	{r7}
 800f49c:	b083      	sub	sp, #12
 800f49e:	af00      	add	r7, sp, #0
 800f4a0:	6078      	str	r0, [r7, #4]
 800f4a2:	460b      	mov	r3, r1
 800f4a4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f4a6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	370c      	adds	r7, #12
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b2:	4770      	bx	lr

0800f4b4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800f4b4:	b480      	push	{r7}
 800f4b6:	b083      	sub	sp, #12
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
 800f4bc:	460b      	mov	r3, r1
 800f4be:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800f4c0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	370c      	adds	r7, #12
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4cc:	4770      	bx	lr

0800f4ce <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800f4ce:	b580      	push	{r7, lr}
 800f4d0:	b086      	sub	sp, #24
 800f4d2:	af00      	add	r7, sp, #0
 800f4d4:	6078      	str	r0, [r7, #4]
 800f4d6:	460b      	mov	r3, r1
 800f4d8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	885b      	ldrh	r3, [r3, #2]
 800f4ea:	b29b      	uxth	r3, r3
 800f4ec:	68fa      	ldr	r2, [r7, #12]
 800f4ee:	7812      	ldrb	r2, [r2, #0]
 800f4f0:	4293      	cmp	r3, r2
 800f4f2:	d91f      	bls.n	800f534 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	781b      	ldrb	r3, [r3, #0]
 800f4f8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800f4fa:	e013      	b.n	800f524 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800f4fc:	f107 030a 	add.w	r3, r7, #10
 800f500:	4619      	mov	r1, r3
 800f502:	6978      	ldr	r0, [r7, #20]
 800f504:	f000 f81b 	bl	800f53e <USBD_GetNextDesc>
 800f508:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800f50a:	697b      	ldr	r3, [r7, #20]
 800f50c:	785b      	ldrb	r3, [r3, #1]
 800f50e:	2b05      	cmp	r3, #5
 800f510:	d108      	bne.n	800f524 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800f512:	697b      	ldr	r3, [r7, #20]
 800f514:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800f516:	693b      	ldr	r3, [r7, #16]
 800f518:	789b      	ldrb	r3, [r3, #2]
 800f51a:	78fa      	ldrb	r2, [r7, #3]
 800f51c:	429a      	cmp	r2, r3
 800f51e:	d008      	beq.n	800f532 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800f520:	2300      	movs	r3, #0
 800f522:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	885b      	ldrh	r3, [r3, #2]
 800f528:	b29a      	uxth	r2, r3
 800f52a:	897b      	ldrh	r3, [r7, #10]
 800f52c:	429a      	cmp	r2, r3
 800f52e:	d8e5      	bhi.n	800f4fc <USBD_GetEpDesc+0x2e>
 800f530:	e000      	b.n	800f534 <USBD_GetEpDesc+0x66>
          break;
 800f532:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800f534:	693b      	ldr	r3, [r7, #16]
}
 800f536:	4618      	mov	r0, r3
 800f538:	3718      	adds	r7, #24
 800f53a:	46bd      	mov	sp, r7
 800f53c:	bd80      	pop	{r7, pc}

0800f53e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800f53e:	b480      	push	{r7}
 800f540:	b085      	sub	sp, #20
 800f542:	af00      	add	r7, sp, #0
 800f544:	6078      	str	r0, [r7, #4]
 800f546:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800f54c:	683b      	ldr	r3, [r7, #0]
 800f54e:	881b      	ldrh	r3, [r3, #0]
 800f550:	68fa      	ldr	r2, [r7, #12]
 800f552:	7812      	ldrb	r2, [r2, #0]
 800f554:	4413      	add	r3, r2
 800f556:	b29a      	uxth	r2, r3
 800f558:	683b      	ldr	r3, [r7, #0]
 800f55a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	781b      	ldrb	r3, [r3, #0]
 800f560:	461a      	mov	r2, r3
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	4413      	add	r3, r2
 800f566:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800f568:	68fb      	ldr	r3, [r7, #12]
}
 800f56a:	4618      	mov	r0, r3
 800f56c:	3714      	adds	r7, #20
 800f56e:	46bd      	mov	sp, r7
 800f570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f574:	4770      	bx	lr

0800f576 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800f576:	b480      	push	{r7}
 800f578:	b087      	sub	sp, #28
 800f57a:	af00      	add	r7, sp, #0
 800f57c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800f582:	697b      	ldr	r3, [r7, #20]
 800f584:	781b      	ldrb	r3, [r3, #0]
 800f586:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800f588:	697b      	ldr	r3, [r7, #20]
 800f58a:	3301      	adds	r3, #1
 800f58c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800f58e:	697b      	ldr	r3, [r7, #20]
 800f590:	781b      	ldrb	r3, [r3, #0]
 800f592:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800f594:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800f598:	021b      	lsls	r3, r3, #8
 800f59a:	b21a      	sxth	r2, r3
 800f59c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f5a0:	4313      	orrs	r3, r2
 800f5a2:	b21b      	sxth	r3, r3
 800f5a4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800f5a6:	89fb      	ldrh	r3, [r7, #14]
}
 800f5a8:	4618      	mov	r0, r3
 800f5aa:	371c      	adds	r7, #28
 800f5ac:	46bd      	mov	sp, r7
 800f5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b2:	4770      	bx	lr

0800f5b4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5b4:	b580      	push	{r7, lr}
 800f5b6:	b084      	sub	sp, #16
 800f5b8:	af00      	add	r7, sp, #0
 800f5ba:	6078      	str	r0, [r7, #4]
 800f5bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f5be:	2300      	movs	r3, #0
 800f5c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f5c2:	683b      	ldr	r3, [r7, #0]
 800f5c4:	781b      	ldrb	r3, [r3, #0]
 800f5c6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f5ca:	2b40      	cmp	r3, #64	@ 0x40
 800f5cc:	d005      	beq.n	800f5da <USBD_StdDevReq+0x26>
 800f5ce:	2b40      	cmp	r3, #64	@ 0x40
 800f5d0:	d857      	bhi.n	800f682 <USBD_StdDevReq+0xce>
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d00f      	beq.n	800f5f6 <USBD_StdDevReq+0x42>
 800f5d6:	2b20      	cmp	r3, #32
 800f5d8:	d153      	bne.n	800f682 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	32ae      	adds	r2, #174	@ 0xae
 800f5e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5e8:	689b      	ldr	r3, [r3, #8]
 800f5ea:	6839      	ldr	r1, [r7, #0]
 800f5ec:	6878      	ldr	r0, [r7, #4]
 800f5ee:	4798      	blx	r3
 800f5f0:	4603      	mov	r3, r0
 800f5f2:	73fb      	strb	r3, [r7, #15]
      break;
 800f5f4:	e04a      	b.n	800f68c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	785b      	ldrb	r3, [r3, #1]
 800f5fa:	2b09      	cmp	r3, #9
 800f5fc:	d83b      	bhi.n	800f676 <USBD_StdDevReq+0xc2>
 800f5fe:	a201      	add	r2, pc, #4	@ (adr r2, 800f604 <USBD_StdDevReq+0x50>)
 800f600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f604:	0800f659 	.word	0x0800f659
 800f608:	0800f66d 	.word	0x0800f66d
 800f60c:	0800f677 	.word	0x0800f677
 800f610:	0800f663 	.word	0x0800f663
 800f614:	0800f677 	.word	0x0800f677
 800f618:	0800f637 	.word	0x0800f637
 800f61c:	0800f62d 	.word	0x0800f62d
 800f620:	0800f677 	.word	0x0800f677
 800f624:	0800f64f 	.word	0x0800f64f
 800f628:	0800f641 	.word	0x0800f641
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f62c:	6839      	ldr	r1, [r7, #0]
 800f62e:	6878      	ldr	r0, [r7, #4]
 800f630:	f000 fa3c 	bl	800faac <USBD_GetDescriptor>
          break;
 800f634:	e024      	b.n	800f680 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f636:	6839      	ldr	r1, [r7, #0]
 800f638:	6878      	ldr	r0, [r7, #4]
 800f63a:	f000 fbcb 	bl	800fdd4 <USBD_SetAddress>
          break;
 800f63e:	e01f      	b.n	800f680 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f640:	6839      	ldr	r1, [r7, #0]
 800f642:	6878      	ldr	r0, [r7, #4]
 800f644:	f000 fc0a 	bl	800fe5c <USBD_SetConfig>
 800f648:	4603      	mov	r3, r0
 800f64a:	73fb      	strb	r3, [r7, #15]
          break;
 800f64c:	e018      	b.n	800f680 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f64e:	6839      	ldr	r1, [r7, #0]
 800f650:	6878      	ldr	r0, [r7, #4]
 800f652:	f000 fcad 	bl	800ffb0 <USBD_GetConfig>
          break;
 800f656:	e013      	b.n	800f680 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f658:	6839      	ldr	r1, [r7, #0]
 800f65a:	6878      	ldr	r0, [r7, #4]
 800f65c:	f000 fcde 	bl	801001c <USBD_GetStatus>
          break;
 800f660:	e00e      	b.n	800f680 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f662:	6839      	ldr	r1, [r7, #0]
 800f664:	6878      	ldr	r0, [r7, #4]
 800f666:	f000 fd0d 	bl	8010084 <USBD_SetFeature>
          break;
 800f66a:	e009      	b.n	800f680 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f66c:	6839      	ldr	r1, [r7, #0]
 800f66e:	6878      	ldr	r0, [r7, #4]
 800f670:	f000 fd31 	bl	80100d6 <USBD_ClrFeature>
          break;
 800f674:	e004      	b.n	800f680 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f676:	6839      	ldr	r1, [r7, #0]
 800f678:	6878      	ldr	r0, [r7, #4]
 800f67a:	f000 fd88 	bl	801018e <USBD_CtlError>
          break;
 800f67e:	bf00      	nop
      }
      break;
 800f680:	e004      	b.n	800f68c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f682:	6839      	ldr	r1, [r7, #0]
 800f684:	6878      	ldr	r0, [r7, #4]
 800f686:	f000 fd82 	bl	801018e <USBD_CtlError>
      break;
 800f68a:	bf00      	nop
  }

  return ret;
 800f68c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f68e:	4618      	mov	r0, r3
 800f690:	3710      	adds	r7, #16
 800f692:	46bd      	mov	sp, r7
 800f694:	bd80      	pop	{r7, pc}
 800f696:	bf00      	nop

0800f698 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b084      	sub	sp, #16
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
 800f6a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f6a6:	683b      	ldr	r3, [r7, #0]
 800f6a8:	781b      	ldrb	r3, [r3, #0]
 800f6aa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f6ae:	2b40      	cmp	r3, #64	@ 0x40
 800f6b0:	d005      	beq.n	800f6be <USBD_StdItfReq+0x26>
 800f6b2:	2b40      	cmp	r3, #64	@ 0x40
 800f6b4:	d852      	bhi.n	800f75c <USBD_StdItfReq+0xc4>
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d001      	beq.n	800f6be <USBD_StdItfReq+0x26>
 800f6ba:	2b20      	cmp	r3, #32
 800f6bc:	d14e      	bne.n	800f75c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f6c4:	b2db      	uxtb	r3, r3
 800f6c6:	3b01      	subs	r3, #1
 800f6c8:	2b02      	cmp	r3, #2
 800f6ca:	d840      	bhi.n	800f74e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f6cc:	683b      	ldr	r3, [r7, #0]
 800f6ce:	889b      	ldrh	r3, [r3, #4]
 800f6d0:	b2db      	uxtb	r3, r3
 800f6d2:	2b01      	cmp	r3, #1
 800f6d4:	d836      	bhi.n	800f744 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f6d6:	683b      	ldr	r3, [r7, #0]
 800f6d8:	889b      	ldrh	r3, [r3, #4]
 800f6da:	b2db      	uxtb	r3, r3
 800f6dc:	4619      	mov	r1, r3
 800f6de:	6878      	ldr	r0, [r7, #4]
 800f6e0:	f7ff fedb 	bl	800f49a <USBD_CoreFindIF>
 800f6e4:	4603      	mov	r3, r0
 800f6e6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f6e8:	7bbb      	ldrb	r3, [r7, #14]
 800f6ea:	2bff      	cmp	r3, #255	@ 0xff
 800f6ec:	d01d      	beq.n	800f72a <USBD_StdItfReq+0x92>
 800f6ee:	7bbb      	ldrb	r3, [r7, #14]
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	d11a      	bne.n	800f72a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f6f4:	7bba      	ldrb	r2, [r7, #14]
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	32ae      	adds	r2, #174	@ 0xae
 800f6fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6fe:	689b      	ldr	r3, [r3, #8]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d00f      	beq.n	800f724 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f704:	7bba      	ldrb	r2, [r7, #14]
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f70c:	7bba      	ldrb	r2, [r7, #14]
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	32ae      	adds	r2, #174	@ 0xae
 800f712:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f716:	689b      	ldr	r3, [r3, #8]
 800f718:	6839      	ldr	r1, [r7, #0]
 800f71a:	6878      	ldr	r0, [r7, #4]
 800f71c:	4798      	blx	r3
 800f71e:	4603      	mov	r3, r0
 800f720:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f722:	e004      	b.n	800f72e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f724:	2303      	movs	r3, #3
 800f726:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f728:	e001      	b.n	800f72e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f72a:	2303      	movs	r3, #3
 800f72c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f72e:	683b      	ldr	r3, [r7, #0]
 800f730:	88db      	ldrh	r3, [r3, #6]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d110      	bne.n	800f758 <USBD_StdItfReq+0xc0>
 800f736:	7bfb      	ldrb	r3, [r7, #15]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d10d      	bne.n	800f758 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f73c:	6878      	ldr	r0, [r7, #4]
 800f73e:	f000 fdfd 	bl	801033c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f742:	e009      	b.n	800f758 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f744:	6839      	ldr	r1, [r7, #0]
 800f746:	6878      	ldr	r0, [r7, #4]
 800f748:	f000 fd21 	bl	801018e <USBD_CtlError>
          break;
 800f74c:	e004      	b.n	800f758 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f74e:	6839      	ldr	r1, [r7, #0]
 800f750:	6878      	ldr	r0, [r7, #4]
 800f752:	f000 fd1c 	bl	801018e <USBD_CtlError>
          break;
 800f756:	e000      	b.n	800f75a <USBD_StdItfReq+0xc2>
          break;
 800f758:	bf00      	nop
      }
      break;
 800f75a:	e004      	b.n	800f766 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f75c:	6839      	ldr	r1, [r7, #0]
 800f75e:	6878      	ldr	r0, [r7, #4]
 800f760:	f000 fd15 	bl	801018e <USBD_CtlError>
      break;
 800f764:	bf00      	nop
  }

  return ret;
 800f766:	7bfb      	ldrb	r3, [r7, #15]
}
 800f768:	4618      	mov	r0, r3
 800f76a:	3710      	adds	r7, #16
 800f76c:	46bd      	mov	sp, r7
 800f76e:	bd80      	pop	{r7, pc}

0800f770 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	b084      	sub	sp, #16
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
 800f778:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f77a:	2300      	movs	r3, #0
 800f77c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f77e:	683b      	ldr	r3, [r7, #0]
 800f780:	889b      	ldrh	r3, [r3, #4]
 800f782:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f784:	683b      	ldr	r3, [r7, #0]
 800f786:	781b      	ldrb	r3, [r3, #0]
 800f788:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f78c:	2b40      	cmp	r3, #64	@ 0x40
 800f78e:	d007      	beq.n	800f7a0 <USBD_StdEPReq+0x30>
 800f790:	2b40      	cmp	r3, #64	@ 0x40
 800f792:	f200 817f 	bhi.w	800fa94 <USBD_StdEPReq+0x324>
 800f796:	2b00      	cmp	r3, #0
 800f798:	d02a      	beq.n	800f7f0 <USBD_StdEPReq+0x80>
 800f79a:	2b20      	cmp	r3, #32
 800f79c:	f040 817a 	bne.w	800fa94 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f7a0:	7bbb      	ldrb	r3, [r7, #14]
 800f7a2:	4619      	mov	r1, r3
 800f7a4:	6878      	ldr	r0, [r7, #4]
 800f7a6:	f7ff fe85 	bl	800f4b4 <USBD_CoreFindEP>
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f7ae:	7b7b      	ldrb	r3, [r7, #13]
 800f7b0:	2bff      	cmp	r3, #255	@ 0xff
 800f7b2:	f000 8174 	beq.w	800fa9e <USBD_StdEPReq+0x32e>
 800f7b6:	7b7b      	ldrb	r3, [r7, #13]
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	f040 8170 	bne.w	800fa9e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f7be:	7b7a      	ldrb	r2, [r7, #13]
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f7c6:	7b7a      	ldrb	r2, [r7, #13]
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	32ae      	adds	r2, #174	@ 0xae
 800f7cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7d0:	689b      	ldr	r3, [r3, #8]
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	f000 8163 	beq.w	800fa9e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f7d8:	7b7a      	ldrb	r2, [r7, #13]
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	32ae      	adds	r2, #174	@ 0xae
 800f7de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7e2:	689b      	ldr	r3, [r3, #8]
 800f7e4:	6839      	ldr	r1, [r7, #0]
 800f7e6:	6878      	ldr	r0, [r7, #4]
 800f7e8:	4798      	blx	r3
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f7ee:	e156      	b.n	800fa9e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f7f0:	683b      	ldr	r3, [r7, #0]
 800f7f2:	785b      	ldrb	r3, [r3, #1]
 800f7f4:	2b03      	cmp	r3, #3
 800f7f6:	d008      	beq.n	800f80a <USBD_StdEPReq+0x9a>
 800f7f8:	2b03      	cmp	r3, #3
 800f7fa:	f300 8145 	bgt.w	800fa88 <USBD_StdEPReq+0x318>
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	f000 809b 	beq.w	800f93a <USBD_StdEPReq+0x1ca>
 800f804:	2b01      	cmp	r3, #1
 800f806:	d03c      	beq.n	800f882 <USBD_StdEPReq+0x112>
 800f808:	e13e      	b.n	800fa88 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f810:	b2db      	uxtb	r3, r3
 800f812:	2b02      	cmp	r3, #2
 800f814:	d002      	beq.n	800f81c <USBD_StdEPReq+0xac>
 800f816:	2b03      	cmp	r3, #3
 800f818:	d016      	beq.n	800f848 <USBD_StdEPReq+0xd8>
 800f81a:	e02c      	b.n	800f876 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f81c:	7bbb      	ldrb	r3, [r7, #14]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d00d      	beq.n	800f83e <USBD_StdEPReq+0xce>
 800f822:	7bbb      	ldrb	r3, [r7, #14]
 800f824:	2b80      	cmp	r3, #128	@ 0x80
 800f826:	d00a      	beq.n	800f83e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f828:	7bbb      	ldrb	r3, [r7, #14]
 800f82a:	4619      	mov	r1, r3
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	f001 fa07 	bl	8010c40 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f832:	2180      	movs	r1, #128	@ 0x80
 800f834:	6878      	ldr	r0, [r7, #4]
 800f836:	f001 fa03 	bl	8010c40 <USBD_LL_StallEP>
 800f83a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f83c:	e020      	b.n	800f880 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f83e:	6839      	ldr	r1, [r7, #0]
 800f840:	6878      	ldr	r0, [r7, #4]
 800f842:	f000 fca4 	bl	801018e <USBD_CtlError>
              break;
 800f846:	e01b      	b.n	800f880 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f848:	683b      	ldr	r3, [r7, #0]
 800f84a:	885b      	ldrh	r3, [r3, #2]
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d10e      	bne.n	800f86e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f850:	7bbb      	ldrb	r3, [r7, #14]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d00b      	beq.n	800f86e <USBD_StdEPReq+0xfe>
 800f856:	7bbb      	ldrb	r3, [r7, #14]
 800f858:	2b80      	cmp	r3, #128	@ 0x80
 800f85a:	d008      	beq.n	800f86e <USBD_StdEPReq+0xfe>
 800f85c:	683b      	ldr	r3, [r7, #0]
 800f85e:	88db      	ldrh	r3, [r3, #6]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d104      	bne.n	800f86e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f864:	7bbb      	ldrb	r3, [r7, #14]
 800f866:	4619      	mov	r1, r3
 800f868:	6878      	ldr	r0, [r7, #4]
 800f86a:	f001 f9e9 	bl	8010c40 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f86e:	6878      	ldr	r0, [r7, #4]
 800f870:	f000 fd64 	bl	801033c <USBD_CtlSendStatus>

              break;
 800f874:	e004      	b.n	800f880 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f876:	6839      	ldr	r1, [r7, #0]
 800f878:	6878      	ldr	r0, [r7, #4]
 800f87a:	f000 fc88 	bl	801018e <USBD_CtlError>
              break;
 800f87e:	bf00      	nop
          }
          break;
 800f880:	e107      	b.n	800fa92 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f888:	b2db      	uxtb	r3, r3
 800f88a:	2b02      	cmp	r3, #2
 800f88c:	d002      	beq.n	800f894 <USBD_StdEPReq+0x124>
 800f88e:	2b03      	cmp	r3, #3
 800f890:	d016      	beq.n	800f8c0 <USBD_StdEPReq+0x150>
 800f892:	e04b      	b.n	800f92c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f894:	7bbb      	ldrb	r3, [r7, #14]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d00d      	beq.n	800f8b6 <USBD_StdEPReq+0x146>
 800f89a:	7bbb      	ldrb	r3, [r7, #14]
 800f89c:	2b80      	cmp	r3, #128	@ 0x80
 800f89e:	d00a      	beq.n	800f8b6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f8a0:	7bbb      	ldrb	r3, [r7, #14]
 800f8a2:	4619      	mov	r1, r3
 800f8a4:	6878      	ldr	r0, [r7, #4]
 800f8a6:	f001 f9cb 	bl	8010c40 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f8aa:	2180      	movs	r1, #128	@ 0x80
 800f8ac:	6878      	ldr	r0, [r7, #4]
 800f8ae:	f001 f9c7 	bl	8010c40 <USBD_LL_StallEP>
 800f8b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f8b4:	e040      	b.n	800f938 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f8b6:	6839      	ldr	r1, [r7, #0]
 800f8b8:	6878      	ldr	r0, [r7, #4]
 800f8ba:	f000 fc68 	bl	801018e <USBD_CtlError>
              break;
 800f8be:	e03b      	b.n	800f938 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f8c0:	683b      	ldr	r3, [r7, #0]
 800f8c2:	885b      	ldrh	r3, [r3, #2]
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d136      	bne.n	800f936 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f8c8:	7bbb      	ldrb	r3, [r7, #14]
 800f8ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d004      	beq.n	800f8dc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f8d2:	7bbb      	ldrb	r3, [r7, #14]
 800f8d4:	4619      	mov	r1, r3
 800f8d6:	6878      	ldr	r0, [r7, #4]
 800f8d8:	f001 f9d1 	bl	8010c7e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f8dc:	6878      	ldr	r0, [r7, #4]
 800f8de:	f000 fd2d 	bl	801033c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f8e2:	7bbb      	ldrb	r3, [r7, #14]
 800f8e4:	4619      	mov	r1, r3
 800f8e6:	6878      	ldr	r0, [r7, #4]
 800f8e8:	f7ff fde4 	bl	800f4b4 <USBD_CoreFindEP>
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f8f0:	7b7b      	ldrb	r3, [r7, #13]
 800f8f2:	2bff      	cmp	r3, #255	@ 0xff
 800f8f4:	d01f      	beq.n	800f936 <USBD_StdEPReq+0x1c6>
 800f8f6:	7b7b      	ldrb	r3, [r7, #13]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d11c      	bne.n	800f936 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f8fc:	7b7a      	ldrb	r2, [r7, #13]
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f904:	7b7a      	ldrb	r2, [r7, #13]
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	32ae      	adds	r2, #174	@ 0xae
 800f90a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f90e:	689b      	ldr	r3, [r3, #8]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d010      	beq.n	800f936 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f914:	7b7a      	ldrb	r2, [r7, #13]
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	32ae      	adds	r2, #174	@ 0xae
 800f91a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f91e:	689b      	ldr	r3, [r3, #8]
 800f920:	6839      	ldr	r1, [r7, #0]
 800f922:	6878      	ldr	r0, [r7, #4]
 800f924:	4798      	blx	r3
 800f926:	4603      	mov	r3, r0
 800f928:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f92a:	e004      	b.n	800f936 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f92c:	6839      	ldr	r1, [r7, #0]
 800f92e:	6878      	ldr	r0, [r7, #4]
 800f930:	f000 fc2d 	bl	801018e <USBD_CtlError>
              break;
 800f934:	e000      	b.n	800f938 <USBD_StdEPReq+0x1c8>
              break;
 800f936:	bf00      	nop
          }
          break;
 800f938:	e0ab      	b.n	800fa92 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f940:	b2db      	uxtb	r3, r3
 800f942:	2b02      	cmp	r3, #2
 800f944:	d002      	beq.n	800f94c <USBD_StdEPReq+0x1dc>
 800f946:	2b03      	cmp	r3, #3
 800f948:	d032      	beq.n	800f9b0 <USBD_StdEPReq+0x240>
 800f94a:	e097      	b.n	800fa7c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f94c:	7bbb      	ldrb	r3, [r7, #14]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d007      	beq.n	800f962 <USBD_StdEPReq+0x1f2>
 800f952:	7bbb      	ldrb	r3, [r7, #14]
 800f954:	2b80      	cmp	r3, #128	@ 0x80
 800f956:	d004      	beq.n	800f962 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f958:	6839      	ldr	r1, [r7, #0]
 800f95a:	6878      	ldr	r0, [r7, #4]
 800f95c:	f000 fc17 	bl	801018e <USBD_CtlError>
                break;
 800f960:	e091      	b.n	800fa86 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f962:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f966:	2b00      	cmp	r3, #0
 800f968:	da0b      	bge.n	800f982 <USBD_StdEPReq+0x212>
 800f96a:	7bbb      	ldrb	r3, [r7, #14]
 800f96c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f970:	4613      	mov	r3, r2
 800f972:	009b      	lsls	r3, r3, #2
 800f974:	4413      	add	r3, r2
 800f976:	009b      	lsls	r3, r3, #2
 800f978:	3310      	adds	r3, #16
 800f97a:	687a      	ldr	r2, [r7, #4]
 800f97c:	4413      	add	r3, r2
 800f97e:	3304      	adds	r3, #4
 800f980:	e00b      	b.n	800f99a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f982:	7bbb      	ldrb	r3, [r7, #14]
 800f984:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f988:	4613      	mov	r3, r2
 800f98a:	009b      	lsls	r3, r3, #2
 800f98c:	4413      	add	r3, r2
 800f98e:	009b      	lsls	r3, r3, #2
 800f990:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800f994:	687a      	ldr	r2, [r7, #4]
 800f996:	4413      	add	r3, r2
 800f998:	3304      	adds	r3, #4
 800f99a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f99c:	68bb      	ldr	r3, [r7, #8]
 800f99e:	2200      	movs	r2, #0
 800f9a0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f9a2:	68bb      	ldr	r3, [r7, #8]
 800f9a4:	2202      	movs	r2, #2
 800f9a6:	4619      	mov	r1, r3
 800f9a8:	6878      	ldr	r0, [r7, #4]
 800f9aa:	f000 fc6d 	bl	8010288 <USBD_CtlSendData>
              break;
 800f9ae:	e06a      	b.n	800fa86 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f9b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	da11      	bge.n	800f9dc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f9b8:	7bbb      	ldrb	r3, [r7, #14]
 800f9ba:	f003 020f 	and.w	r2, r3, #15
 800f9be:	6879      	ldr	r1, [r7, #4]
 800f9c0:	4613      	mov	r3, r2
 800f9c2:	009b      	lsls	r3, r3, #2
 800f9c4:	4413      	add	r3, r2
 800f9c6:	009b      	lsls	r3, r3, #2
 800f9c8:	440b      	add	r3, r1
 800f9ca:	3324      	adds	r3, #36	@ 0x24
 800f9cc:	881b      	ldrh	r3, [r3, #0]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d117      	bne.n	800fa02 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f9d2:	6839      	ldr	r1, [r7, #0]
 800f9d4:	6878      	ldr	r0, [r7, #4]
 800f9d6:	f000 fbda 	bl	801018e <USBD_CtlError>
                  break;
 800f9da:	e054      	b.n	800fa86 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f9dc:	7bbb      	ldrb	r3, [r7, #14]
 800f9de:	f003 020f 	and.w	r2, r3, #15
 800f9e2:	6879      	ldr	r1, [r7, #4]
 800f9e4:	4613      	mov	r3, r2
 800f9e6:	009b      	lsls	r3, r3, #2
 800f9e8:	4413      	add	r3, r2
 800f9ea:	009b      	lsls	r3, r3, #2
 800f9ec:	440b      	add	r3, r1
 800f9ee:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f9f2:	881b      	ldrh	r3, [r3, #0]
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d104      	bne.n	800fa02 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f9f8:	6839      	ldr	r1, [r7, #0]
 800f9fa:	6878      	ldr	r0, [r7, #4]
 800f9fc:	f000 fbc7 	bl	801018e <USBD_CtlError>
                  break;
 800fa00:	e041      	b.n	800fa86 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fa02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	da0b      	bge.n	800fa22 <USBD_StdEPReq+0x2b2>
 800fa0a:	7bbb      	ldrb	r3, [r7, #14]
 800fa0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fa10:	4613      	mov	r3, r2
 800fa12:	009b      	lsls	r3, r3, #2
 800fa14:	4413      	add	r3, r2
 800fa16:	009b      	lsls	r3, r3, #2
 800fa18:	3310      	adds	r3, #16
 800fa1a:	687a      	ldr	r2, [r7, #4]
 800fa1c:	4413      	add	r3, r2
 800fa1e:	3304      	adds	r3, #4
 800fa20:	e00b      	b.n	800fa3a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800fa22:	7bbb      	ldrb	r3, [r7, #14]
 800fa24:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fa28:	4613      	mov	r3, r2
 800fa2a:	009b      	lsls	r3, r3, #2
 800fa2c:	4413      	add	r3, r2
 800fa2e:	009b      	lsls	r3, r3, #2
 800fa30:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800fa34:	687a      	ldr	r2, [r7, #4]
 800fa36:	4413      	add	r3, r2
 800fa38:	3304      	adds	r3, #4
 800fa3a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fa3c:	7bbb      	ldrb	r3, [r7, #14]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d002      	beq.n	800fa48 <USBD_StdEPReq+0x2d8>
 800fa42:	7bbb      	ldrb	r3, [r7, #14]
 800fa44:	2b80      	cmp	r3, #128	@ 0x80
 800fa46:	d103      	bne.n	800fa50 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	601a      	str	r2, [r3, #0]
 800fa4e:	e00e      	b.n	800fa6e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800fa50:	7bbb      	ldrb	r3, [r7, #14]
 800fa52:	4619      	mov	r1, r3
 800fa54:	6878      	ldr	r0, [r7, #4]
 800fa56:	f001 f931 	bl	8010cbc <USBD_LL_IsStallEP>
 800fa5a:	4603      	mov	r3, r0
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d003      	beq.n	800fa68 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800fa60:	68bb      	ldr	r3, [r7, #8]
 800fa62:	2201      	movs	r2, #1
 800fa64:	601a      	str	r2, [r3, #0]
 800fa66:	e002      	b.n	800fa6e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fa6e:	68bb      	ldr	r3, [r7, #8]
 800fa70:	2202      	movs	r2, #2
 800fa72:	4619      	mov	r1, r3
 800fa74:	6878      	ldr	r0, [r7, #4]
 800fa76:	f000 fc07 	bl	8010288 <USBD_CtlSendData>
              break;
 800fa7a:	e004      	b.n	800fa86 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800fa7c:	6839      	ldr	r1, [r7, #0]
 800fa7e:	6878      	ldr	r0, [r7, #4]
 800fa80:	f000 fb85 	bl	801018e <USBD_CtlError>
              break;
 800fa84:	bf00      	nop
          }
          break;
 800fa86:	e004      	b.n	800fa92 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800fa88:	6839      	ldr	r1, [r7, #0]
 800fa8a:	6878      	ldr	r0, [r7, #4]
 800fa8c:	f000 fb7f 	bl	801018e <USBD_CtlError>
          break;
 800fa90:	bf00      	nop
      }
      break;
 800fa92:	e005      	b.n	800faa0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800fa94:	6839      	ldr	r1, [r7, #0]
 800fa96:	6878      	ldr	r0, [r7, #4]
 800fa98:	f000 fb79 	bl	801018e <USBD_CtlError>
      break;
 800fa9c:	e000      	b.n	800faa0 <USBD_StdEPReq+0x330>
      break;
 800fa9e:	bf00      	nop
  }

  return ret;
 800faa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800faa2:	4618      	mov	r0, r3
 800faa4:	3710      	adds	r7, #16
 800faa6:	46bd      	mov	sp, r7
 800faa8:	bd80      	pop	{r7, pc}
	...

0800faac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800faac:	b580      	push	{r7, lr}
 800faae:	b084      	sub	sp, #16
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
 800fab4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fab6:	2300      	movs	r3, #0
 800fab8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800faba:	2300      	movs	r3, #0
 800fabc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800fabe:	2300      	movs	r3, #0
 800fac0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800fac2:	683b      	ldr	r3, [r7, #0]
 800fac4:	885b      	ldrh	r3, [r3, #2]
 800fac6:	0a1b      	lsrs	r3, r3, #8
 800fac8:	b29b      	uxth	r3, r3
 800faca:	3b01      	subs	r3, #1
 800facc:	2b0e      	cmp	r3, #14
 800face:	f200 8152 	bhi.w	800fd76 <USBD_GetDescriptor+0x2ca>
 800fad2:	a201      	add	r2, pc, #4	@ (adr r2, 800fad8 <USBD_GetDescriptor+0x2c>)
 800fad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fad8:	0800fb49 	.word	0x0800fb49
 800fadc:	0800fb61 	.word	0x0800fb61
 800fae0:	0800fba1 	.word	0x0800fba1
 800fae4:	0800fd77 	.word	0x0800fd77
 800fae8:	0800fd77 	.word	0x0800fd77
 800faec:	0800fd17 	.word	0x0800fd17
 800faf0:	0800fd43 	.word	0x0800fd43
 800faf4:	0800fd77 	.word	0x0800fd77
 800faf8:	0800fd77 	.word	0x0800fd77
 800fafc:	0800fd77 	.word	0x0800fd77
 800fb00:	0800fd77 	.word	0x0800fd77
 800fb04:	0800fd77 	.word	0x0800fd77
 800fb08:	0800fd77 	.word	0x0800fd77
 800fb0c:	0800fd77 	.word	0x0800fd77
 800fb10:	0800fb15 	.word	0x0800fb15
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb1a:	69db      	ldr	r3, [r3, #28]
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d00b      	beq.n	800fb38 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb26:	69db      	ldr	r3, [r3, #28]
 800fb28:	687a      	ldr	r2, [r7, #4]
 800fb2a:	7c12      	ldrb	r2, [r2, #16]
 800fb2c:	f107 0108 	add.w	r1, r7, #8
 800fb30:	4610      	mov	r0, r2
 800fb32:	4798      	blx	r3
 800fb34:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fb36:	e126      	b.n	800fd86 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fb38:	6839      	ldr	r1, [r7, #0]
 800fb3a:	6878      	ldr	r0, [r7, #4]
 800fb3c:	f000 fb27 	bl	801018e <USBD_CtlError>
        err++;
 800fb40:	7afb      	ldrb	r3, [r7, #11]
 800fb42:	3301      	adds	r3, #1
 800fb44:	72fb      	strb	r3, [r7, #11]
      break;
 800fb46:	e11e      	b.n	800fd86 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	687a      	ldr	r2, [r7, #4]
 800fb52:	7c12      	ldrb	r2, [r2, #16]
 800fb54:	f107 0108 	add.w	r1, r7, #8
 800fb58:	4610      	mov	r0, r2
 800fb5a:	4798      	blx	r3
 800fb5c:	60f8      	str	r0, [r7, #12]
      break;
 800fb5e:	e112      	b.n	800fd86 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	7c1b      	ldrb	r3, [r3, #16]
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d10d      	bne.n	800fb84 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fb6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fb70:	f107 0208 	add.w	r2, r7, #8
 800fb74:	4610      	mov	r0, r2
 800fb76:	4798      	blx	r3
 800fb78:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	3301      	adds	r3, #1
 800fb7e:	2202      	movs	r2, #2
 800fb80:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800fb82:	e100      	b.n	800fd86 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fb8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb8c:	f107 0208 	add.w	r2, r7, #8
 800fb90:	4610      	mov	r0, r2
 800fb92:	4798      	blx	r3
 800fb94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	3301      	adds	r3, #1
 800fb9a:	2202      	movs	r2, #2
 800fb9c:	701a      	strb	r2, [r3, #0]
      break;
 800fb9e:	e0f2      	b.n	800fd86 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800fba0:	683b      	ldr	r3, [r7, #0]
 800fba2:	885b      	ldrh	r3, [r3, #2]
 800fba4:	b2db      	uxtb	r3, r3
 800fba6:	2b05      	cmp	r3, #5
 800fba8:	f200 80ac 	bhi.w	800fd04 <USBD_GetDescriptor+0x258>
 800fbac:	a201      	add	r2, pc, #4	@ (adr r2, 800fbb4 <USBD_GetDescriptor+0x108>)
 800fbae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbb2:	bf00      	nop
 800fbb4:	0800fbcd 	.word	0x0800fbcd
 800fbb8:	0800fc01 	.word	0x0800fc01
 800fbbc:	0800fc35 	.word	0x0800fc35
 800fbc0:	0800fc69 	.word	0x0800fc69
 800fbc4:	0800fc9d 	.word	0x0800fc9d
 800fbc8:	0800fcd1 	.word	0x0800fcd1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fbd2:	685b      	ldr	r3, [r3, #4]
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	d00b      	beq.n	800fbf0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fbde:	685b      	ldr	r3, [r3, #4]
 800fbe0:	687a      	ldr	r2, [r7, #4]
 800fbe2:	7c12      	ldrb	r2, [r2, #16]
 800fbe4:	f107 0108 	add.w	r1, r7, #8
 800fbe8:	4610      	mov	r0, r2
 800fbea:	4798      	blx	r3
 800fbec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fbee:	e091      	b.n	800fd14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fbf0:	6839      	ldr	r1, [r7, #0]
 800fbf2:	6878      	ldr	r0, [r7, #4]
 800fbf4:	f000 facb 	bl	801018e <USBD_CtlError>
            err++;
 800fbf8:	7afb      	ldrb	r3, [r7, #11]
 800fbfa:	3301      	adds	r3, #1
 800fbfc:	72fb      	strb	r3, [r7, #11]
          break;
 800fbfe:	e089      	b.n	800fd14 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc06:	689b      	ldr	r3, [r3, #8]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d00b      	beq.n	800fc24 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc12:	689b      	ldr	r3, [r3, #8]
 800fc14:	687a      	ldr	r2, [r7, #4]
 800fc16:	7c12      	ldrb	r2, [r2, #16]
 800fc18:	f107 0108 	add.w	r1, r7, #8
 800fc1c:	4610      	mov	r0, r2
 800fc1e:	4798      	blx	r3
 800fc20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fc22:	e077      	b.n	800fd14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fc24:	6839      	ldr	r1, [r7, #0]
 800fc26:	6878      	ldr	r0, [r7, #4]
 800fc28:	f000 fab1 	bl	801018e <USBD_CtlError>
            err++;
 800fc2c:	7afb      	ldrb	r3, [r7, #11]
 800fc2e:	3301      	adds	r3, #1
 800fc30:	72fb      	strb	r3, [r7, #11]
          break;
 800fc32:	e06f      	b.n	800fd14 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc3a:	68db      	ldr	r3, [r3, #12]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d00b      	beq.n	800fc58 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc46:	68db      	ldr	r3, [r3, #12]
 800fc48:	687a      	ldr	r2, [r7, #4]
 800fc4a:	7c12      	ldrb	r2, [r2, #16]
 800fc4c:	f107 0108 	add.w	r1, r7, #8
 800fc50:	4610      	mov	r0, r2
 800fc52:	4798      	blx	r3
 800fc54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fc56:	e05d      	b.n	800fd14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fc58:	6839      	ldr	r1, [r7, #0]
 800fc5a:	6878      	ldr	r0, [r7, #4]
 800fc5c:	f000 fa97 	bl	801018e <USBD_CtlError>
            err++;
 800fc60:	7afb      	ldrb	r3, [r7, #11]
 800fc62:	3301      	adds	r3, #1
 800fc64:	72fb      	strb	r3, [r7, #11]
          break;
 800fc66:	e055      	b.n	800fd14 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc6e:	691b      	ldr	r3, [r3, #16]
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d00b      	beq.n	800fc8c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fc7a:	691b      	ldr	r3, [r3, #16]
 800fc7c:	687a      	ldr	r2, [r7, #4]
 800fc7e:	7c12      	ldrb	r2, [r2, #16]
 800fc80:	f107 0108 	add.w	r1, r7, #8
 800fc84:	4610      	mov	r0, r2
 800fc86:	4798      	blx	r3
 800fc88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fc8a:	e043      	b.n	800fd14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fc8c:	6839      	ldr	r1, [r7, #0]
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	f000 fa7d 	bl	801018e <USBD_CtlError>
            err++;
 800fc94:	7afb      	ldrb	r3, [r7, #11]
 800fc96:	3301      	adds	r3, #1
 800fc98:	72fb      	strb	r3, [r7, #11]
          break;
 800fc9a:	e03b      	b.n	800fd14 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fca2:	695b      	ldr	r3, [r3, #20]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d00b      	beq.n	800fcc0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fcae:	695b      	ldr	r3, [r3, #20]
 800fcb0:	687a      	ldr	r2, [r7, #4]
 800fcb2:	7c12      	ldrb	r2, [r2, #16]
 800fcb4:	f107 0108 	add.w	r1, r7, #8
 800fcb8:	4610      	mov	r0, r2
 800fcba:	4798      	blx	r3
 800fcbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fcbe:	e029      	b.n	800fd14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fcc0:	6839      	ldr	r1, [r7, #0]
 800fcc2:	6878      	ldr	r0, [r7, #4]
 800fcc4:	f000 fa63 	bl	801018e <USBD_CtlError>
            err++;
 800fcc8:	7afb      	ldrb	r3, [r7, #11]
 800fcca:	3301      	adds	r3, #1
 800fccc:	72fb      	strb	r3, [r7, #11]
          break;
 800fcce:	e021      	b.n	800fd14 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fcd6:	699b      	ldr	r3, [r3, #24]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d00b      	beq.n	800fcf4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800fce2:	699b      	ldr	r3, [r3, #24]
 800fce4:	687a      	ldr	r2, [r7, #4]
 800fce6:	7c12      	ldrb	r2, [r2, #16]
 800fce8:	f107 0108 	add.w	r1, r7, #8
 800fcec:	4610      	mov	r0, r2
 800fcee:	4798      	blx	r3
 800fcf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800fcf2:	e00f      	b.n	800fd14 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800fcf4:	6839      	ldr	r1, [r7, #0]
 800fcf6:	6878      	ldr	r0, [r7, #4]
 800fcf8:	f000 fa49 	bl	801018e <USBD_CtlError>
            err++;
 800fcfc:	7afb      	ldrb	r3, [r7, #11]
 800fcfe:	3301      	adds	r3, #1
 800fd00:	72fb      	strb	r3, [r7, #11]
          break;
 800fd02:	e007      	b.n	800fd14 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800fd04:	6839      	ldr	r1, [r7, #0]
 800fd06:	6878      	ldr	r0, [r7, #4]
 800fd08:	f000 fa41 	bl	801018e <USBD_CtlError>
          err++;
 800fd0c:	7afb      	ldrb	r3, [r7, #11]
 800fd0e:	3301      	adds	r3, #1
 800fd10:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800fd12:	bf00      	nop
      }
      break;
 800fd14:	e037      	b.n	800fd86 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	7c1b      	ldrb	r3, [r3, #16]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d109      	bne.n	800fd32 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fd24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fd26:	f107 0208 	add.w	r2, r7, #8
 800fd2a:	4610      	mov	r0, r2
 800fd2c:	4798      	blx	r3
 800fd2e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fd30:	e029      	b.n	800fd86 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fd32:	6839      	ldr	r1, [r7, #0]
 800fd34:	6878      	ldr	r0, [r7, #4]
 800fd36:	f000 fa2a 	bl	801018e <USBD_CtlError>
        err++;
 800fd3a:	7afb      	ldrb	r3, [r7, #11]
 800fd3c:	3301      	adds	r3, #1
 800fd3e:	72fb      	strb	r3, [r7, #11]
      break;
 800fd40:	e021      	b.n	800fd86 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	7c1b      	ldrb	r3, [r3, #16]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d10d      	bne.n	800fd66 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fd50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd52:	f107 0208 	add.w	r2, r7, #8
 800fd56:	4610      	mov	r0, r2
 800fd58:	4798      	blx	r3
 800fd5a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	3301      	adds	r3, #1
 800fd60:	2207      	movs	r2, #7
 800fd62:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800fd64:	e00f      	b.n	800fd86 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800fd66:	6839      	ldr	r1, [r7, #0]
 800fd68:	6878      	ldr	r0, [r7, #4]
 800fd6a:	f000 fa10 	bl	801018e <USBD_CtlError>
        err++;
 800fd6e:	7afb      	ldrb	r3, [r7, #11]
 800fd70:	3301      	adds	r3, #1
 800fd72:	72fb      	strb	r3, [r7, #11]
      break;
 800fd74:	e007      	b.n	800fd86 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800fd76:	6839      	ldr	r1, [r7, #0]
 800fd78:	6878      	ldr	r0, [r7, #4]
 800fd7a:	f000 fa08 	bl	801018e <USBD_CtlError>
      err++;
 800fd7e:	7afb      	ldrb	r3, [r7, #11]
 800fd80:	3301      	adds	r3, #1
 800fd82:	72fb      	strb	r3, [r7, #11]
      break;
 800fd84:	bf00      	nop
  }

  if (err != 0U)
 800fd86:	7afb      	ldrb	r3, [r7, #11]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d11e      	bne.n	800fdca <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800fd8c:	683b      	ldr	r3, [r7, #0]
 800fd8e:	88db      	ldrh	r3, [r3, #6]
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d016      	beq.n	800fdc2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800fd94:	893b      	ldrh	r3, [r7, #8]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d00e      	beq.n	800fdb8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800fd9a:	683b      	ldr	r3, [r7, #0]
 800fd9c:	88da      	ldrh	r2, [r3, #6]
 800fd9e:	893b      	ldrh	r3, [r7, #8]
 800fda0:	4293      	cmp	r3, r2
 800fda2:	bf28      	it	cs
 800fda4:	4613      	movcs	r3, r2
 800fda6:	b29b      	uxth	r3, r3
 800fda8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800fdaa:	893b      	ldrh	r3, [r7, #8]
 800fdac:	461a      	mov	r2, r3
 800fdae:	68f9      	ldr	r1, [r7, #12]
 800fdb0:	6878      	ldr	r0, [r7, #4]
 800fdb2:	f000 fa69 	bl	8010288 <USBD_CtlSendData>
 800fdb6:	e009      	b.n	800fdcc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800fdb8:	6839      	ldr	r1, [r7, #0]
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	f000 f9e7 	bl	801018e <USBD_CtlError>
 800fdc0:	e004      	b.n	800fdcc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800fdc2:	6878      	ldr	r0, [r7, #4]
 800fdc4:	f000 faba 	bl	801033c <USBD_CtlSendStatus>
 800fdc8:	e000      	b.n	800fdcc <USBD_GetDescriptor+0x320>
    return;
 800fdca:	bf00      	nop
  }
}
 800fdcc:	3710      	adds	r7, #16
 800fdce:	46bd      	mov	sp, r7
 800fdd0:	bd80      	pop	{r7, pc}
 800fdd2:	bf00      	nop

0800fdd4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b084      	sub	sp, #16
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	6078      	str	r0, [r7, #4]
 800fddc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800fdde:	683b      	ldr	r3, [r7, #0]
 800fde0:	889b      	ldrh	r3, [r3, #4]
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d131      	bne.n	800fe4a <USBD_SetAddress+0x76>
 800fde6:	683b      	ldr	r3, [r7, #0]
 800fde8:	88db      	ldrh	r3, [r3, #6]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d12d      	bne.n	800fe4a <USBD_SetAddress+0x76>
 800fdee:	683b      	ldr	r3, [r7, #0]
 800fdf0:	885b      	ldrh	r3, [r3, #2]
 800fdf2:	2b7f      	cmp	r3, #127	@ 0x7f
 800fdf4:	d829      	bhi.n	800fe4a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800fdf6:	683b      	ldr	r3, [r7, #0]
 800fdf8:	885b      	ldrh	r3, [r3, #2]
 800fdfa:	b2db      	uxtb	r3, r3
 800fdfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fe00:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fe08:	b2db      	uxtb	r3, r3
 800fe0a:	2b03      	cmp	r3, #3
 800fe0c:	d104      	bne.n	800fe18 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800fe0e:	6839      	ldr	r1, [r7, #0]
 800fe10:	6878      	ldr	r0, [r7, #4]
 800fe12:	f000 f9bc 	bl	801018e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe16:	e01d      	b.n	800fe54 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	7bfa      	ldrb	r2, [r7, #15]
 800fe1c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800fe20:	7bfb      	ldrb	r3, [r7, #15]
 800fe22:	4619      	mov	r1, r3
 800fe24:	6878      	ldr	r0, [r7, #4]
 800fe26:	f000 ff75 	bl	8010d14 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800fe2a:	6878      	ldr	r0, [r7, #4]
 800fe2c:	f000 fa86 	bl	801033c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800fe30:	7bfb      	ldrb	r3, [r7, #15]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d004      	beq.n	800fe40 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	2202      	movs	r2, #2
 800fe3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe3e:	e009      	b.n	800fe54 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	2201      	movs	r2, #1
 800fe44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fe48:	e004      	b.n	800fe54 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800fe4a:	6839      	ldr	r1, [r7, #0]
 800fe4c:	6878      	ldr	r0, [r7, #4]
 800fe4e:	f000 f99e 	bl	801018e <USBD_CtlError>
  }
}
 800fe52:	bf00      	nop
 800fe54:	bf00      	nop
 800fe56:	3710      	adds	r7, #16
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	bd80      	pop	{r7, pc}

0800fe5c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b084      	sub	sp, #16
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
 800fe64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fe66:	2300      	movs	r3, #0
 800fe68:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800fe6a:	683b      	ldr	r3, [r7, #0]
 800fe6c:	885b      	ldrh	r3, [r3, #2]
 800fe6e:	b2da      	uxtb	r2, r3
 800fe70:	4b4e      	ldr	r3, [pc, #312]	@ (800ffac <USBD_SetConfig+0x150>)
 800fe72:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800fe74:	4b4d      	ldr	r3, [pc, #308]	@ (800ffac <USBD_SetConfig+0x150>)
 800fe76:	781b      	ldrb	r3, [r3, #0]
 800fe78:	2b01      	cmp	r3, #1
 800fe7a:	d905      	bls.n	800fe88 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800fe7c:	6839      	ldr	r1, [r7, #0]
 800fe7e:	6878      	ldr	r0, [r7, #4]
 800fe80:	f000 f985 	bl	801018e <USBD_CtlError>
    return USBD_FAIL;
 800fe84:	2303      	movs	r3, #3
 800fe86:	e08c      	b.n	800ffa2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fe8e:	b2db      	uxtb	r3, r3
 800fe90:	2b02      	cmp	r3, #2
 800fe92:	d002      	beq.n	800fe9a <USBD_SetConfig+0x3e>
 800fe94:	2b03      	cmp	r3, #3
 800fe96:	d029      	beq.n	800feec <USBD_SetConfig+0x90>
 800fe98:	e075      	b.n	800ff86 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800fe9a:	4b44      	ldr	r3, [pc, #272]	@ (800ffac <USBD_SetConfig+0x150>)
 800fe9c:	781b      	ldrb	r3, [r3, #0]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d020      	beq.n	800fee4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800fea2:	4b42      	ldr	r3, [pc, #264]	@ (800ffac <USBD_SetConfig+0x150>)
 800fea4:	781b      	ldrb	r3, [r3, #0]
 800fea6:	461a      	mov	r2, r3
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800feac:	4b3f      	ldr	r3, [pc, #252]	@ (800ffac <USBD_SetConfig+0x150>)
 800feae:	781b      	ldrb	r3, [r3, #0]
 800feb0:	4619      	mov	r1, r3
 800feb2:	6878      	ldr	r0, [r7, #4]
 800feb4:	f7fe ffb9 	bl	800ee2a <USBD_SetClassConfig>
 800feb8:	4603      	mov	r3, r0
 800feba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800febc:	7bfb      	ldrb	r3, [r7, #15]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d008      	beq.n	800fed4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800fec2:	6839      	ldr	r1, [r7, #0]
 800fec4:	6878      	ldr	r0, [r7, #4]
 800fec6:	f000 f962 	bl	801018e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	2202      	movs	r2, #2
 800fece:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800fed2:	e065      	b.n	800ffa0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800fed4:	6878      	ldr	r0, [r7, #4]
 800fed6:	f000 fa31 	bl	801033c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	2203      	movs	r2, #3
 800fede:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800fee2:	e05d      	b.n	800ffa0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800fee4:	6878      	ldr	r0, [r7, #4]
 800fee6:	f000 fa29 	bl	801033c <USBD_CtlSendStatus>
      break;
 800feea:	e059      	b.n	800ffa0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800feec:	4b2f      	ldr	r3, [pc, #188]	@ (800ffac <USBD_SetConfig+0x150>)
 800feee:	781b      	ldrb	r3, [r3, #0]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d112      	bne.n	800ff1a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	2202      	movs	r2, #2
 800fef8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800fefc:	4b2b      	ldr	r3, [pc, #172]	@ (800ffac <USBD_SetConfig+0x150>)
 800fefe:	781b      	ldrb	r3, [r3, #0]
 800ff00:	461a      	mov	r2, r3
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ff06:	4b29      	ldr	r3, [pc, #164]	@ (800ffac <USBD_SetConfig+0x150>)
 800ff08:	781b      	ldrb	r3, [r3, #0]
 800ff0a:	4619      	mov	r1, r3
 800ff0c:	6878      	ldr	r0, [r7, #4]
 800ff0e:	f7fe ffa8 	bl	800ee62 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ff12:	6878      	ldr	r0, [r7, #4]
 800ff14:	f000 fa12 	bl	801033c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ff18:	e042      	b.n	800ffa0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ff1a:	4b24      	ldr	r3, [pc, #144]	@ (800ffac <USBD_SetConfig+0x150>)
 800ff1c:	781b      	ldrb	r3, [r3, #0]
 800ff1e:	461a      	mov	r2, r3
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	685b      	ldr	r3, [r3, #4]
 800ff24:	429a      	cmp	r2, r3
 800ff26:	d02a      	beq.n	800ff7e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	685b      	ldr	r3, [r3, #4]
 800ff2c:	b2db      	uxtb	r3, r3
 800ff2e:	4619      	mov	r1, r3
 800ff30:	6878      	ldr	r0, [r7, #4]
 800ff32:	f7fe ff96 	bl	800ee62 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ff36:	4b1d      	ldr	r3, [pc, #116]	@ (800ffac <USBD_SetConfig+0x150>)
 800ff38:	781b      	ldrb	r3, [r3, #0]
 800ff3a:	461a      	mov	r2, r3
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ff40:	4b1a      	ldr	r3, [pc, #104]	@ (800ffac <USBD_SetConfig+0x150>)
 800ff42:	781b      	ldrb	r3, [r3, #0]
 800ff44:	4619      	mov	r1, r3
 800ff46:	6878      	ldr	r0, [r7, #4]
 800ff48:	f7fe ff6f 	bl	800ee2a <USBD_SetClassConfig>
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ff50:	7bfb      	ldrb	r3, [r7, #15]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d00f      	beq.n	800ff76 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ff56:	6839      	ldr	r1, [r7, #0]
 800ff58:	6878      	ldr	r0, [r7, #4]
 800ff5a:	f000 f918 	bl	801018e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	685b      	ldr	r3, [r3, #4]
 800ff62:	b2db      	uxtb	r3, r3
 800ff64:	4619      	mov	r1, r3
 800ff66:	6878      	ldr	r0, [r7, #4]
 800ff68:	f7fe ff7b 	bl	800ee62 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2202      	movs	r2, #2
 800ff70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ff74:	e014      	b.n	800ffa0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ff76:	6878      	ldr	r0, [r7, #4]
 800ff78:	f000 f9e0 	bl	801033c <USBD_CtlSendStatus>
      break;
 800ff7c:	e010      	b.n	800ffa0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ff7e:	6878      	ldr	r0, [r7, #4]
 800ff80:	f000 f9dc 	bl	801033c <USBD_CtlSendStatus>
      break;
 800ff84:	e00c      	b.n	800ffa0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ff86:	6839      	ldr	r1, [r7, #0]
 800ff88:	6878      	ldr	r0, [r7, #4]
 800ff8a:	f000 f900 	bl	801018e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ff8e:	4b07      	ldr	r3, [pc, #28]	@ (800ffac <USBD_SetConfig+0x150>)
 800ff90:	781b      	ldrb	r3, [r3, #0]
 800ff92:	4619      	mov	r1, r3
 800ff94:	6878      	ldr	r0, [r7, #4]
 800ff96:	f7fe ff64 	bl	800ee62 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ff9a:	2303      	movs	r3, #3
 800ff9c:	73fb      	strb	r3, [r7, #15]
      break;
 800ff9e:	bf00      	nop
  }

  return ret;
 800ffa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	3710      	adds	r7, #16
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	bd80      	pop	{r7, pc}
 800ffaa:	bf00      	nop
 800ffac:	24000490 	.word	0x24000490

0800ffb0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	b082      	sub	sp, #8
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
 800ffb8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ffba:	683b      	ldr	r3, [r7, #0]
 800ffbc:	88db      	ldrh	r3, [r3, #6]
 800ffbe:	2b01      	cmp	r3, #1
 800ffc0:	d004      	beq.n	800ffcc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ffc2:	6839      	ldr	r1, [r7, #0]
 800ffc4:	6878      	ldr	r0, [r7, #4]
 800ffc6:	f000 f8e2 	bl	801018e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ffca:	e023      	b.n	8010014 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ffd2:	b2db      	uxtb	r3, r3
 800ffd4:	2b02      	cmp	r3, #2
 800ffd6:	dc02      	bgt.n	800ffde <USBD_GetConfig+0x2e>
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	dc03      	bgt.n	800ffe4 <USBD_GetConfig+0x34>
 800ffdc:	e015      	b.n	801000a <USBD_GetConfig+0x5a>
 800ffde:	2b03      	cmp	r3, #3
 800ffe0:	d00b      	beq.n	800fffa <USBD_GetConfig+0x4a>
 800ffe2:	e012      	b.n	801000a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	2200      	movs	r2, #0
 800ffe8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	3308      	adds	r3, #8
 800ffee:	2201      	movs	r2, #1
 800fff0:	4619      	mov	r1, r3
 800fff2:	6878      	ldr	r0, [r7, #4]
 800fff4:	f000 f948 	bl	8010288 <USBD_CtlSendData>
        break;
 800fff8:	e00c      	b.n	8010014 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	3304      	adds	r3, #4
 800fffe:	2201      	movs	r2, #1
 8010000:	4619      	mov	r1, r3
 8010002:	6878      	ldr	r0, [r7, #4]
 8010004:	f000 f940 	bl	8010288 <USBD_CtlSendData>
        break;
 8010008:	e004      	b.n	8010014 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801000a:	6839      	ldr	r1, [r7, #0]
 801000c:	6878      	ldr	r0, [r7, #4]
 801000e:	f000 f8be 	bl	801018e <USBD_CtlError>
        break;
 8010012:	bf00      	nop
}
 8010014:	bf00      	nop
 8010016:	3708      	adds	r7, #8
 8010018:	46bd      	mov	sp, r7
 801001a:	bd80      	pop	{r7, pc}

0801001c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801001c:	b580      	push	{r7, lr}
 801001e:	b082      	sub	sp, #8
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
 8010024:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801002c:	b2db      	uxtb	r3, r3
 801002e:	3b01      	subs	r3, #1
 8010030:	2b02      	cmp	r3, #2
 8010032:	d81e      	bhi.n	8010072 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	88db      	ldrh	r3, [r3, #6]
 8010038:	2b02      	cmp	r3, #2
 801003a:	d004      	beq.n	8010046 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 801003c:	6839      	ldr	r1, [r7, #0]
 801003e:	6878      	ldr	r0, [r7, #4]
 8010040:	f000 f8a5 	bl	801018e <USBD_CtlError>
        break;
 8010044:	e01a      	b.n	801007c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	2201      	movs	r2, #1
 801004a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8010052:	2b00      	cmp	r3, #0
 8010054:	d005      	beq.n	8010062 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	68db      	ldr	r3, [r3, #12]
 801005a:	f043 0202 	orr.w	r2, r3, #2
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	330c      	adds	r3, #12
 8010066:	2202      	movs	r2, #2
 8010068:	4619      	mov	r1, r3
 801006a:	6878      	ldr	r0, [r7, #4]
 801006c:	f000 f90c 	bl	8010288 <USBD_CtlSendData>
      break;
 8010070:	e004      	b.n	801007c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010072:	6839      	ldr	r1, [r7, #0]
 8010074:	6878      	ldr	r0, [r7, #4]
 8010076:	f000 f88a 	bl	801018e <USBD_CtlError>
      break;
 801007a:	bf00      	nop
  }
}
 801007c:	bf00      	nop
 801007e:	3708      	adds	r7, #8
 8010080:	46bd      	mov	sp, r7
 8010082:	bd80      	pop	{r7, pc}

08010084 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010084:	b580      	push	{r7, lr}
 8010086:	b082      	sub	sp, #8
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
 801008c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801008e:	683b      	ldr	r3, [r7, #0]
 8010090:	885b      	ldrh	r3, [r3, #2]
 8010092:	2b01      	cmp	r3, #1
 8010094:	d107      	bne.n	80100a6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	2201      	movs	r2, #1
 801009a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801009e:	6878      	ldr	r0, [r7, #4]
 80100a0:	f000 f94c 	bl	801033c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80100a4:	e013      	b.n	80100ce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80100a6:	683b      	ldr	r3, [r7, #0]
 80100a8:	885b      	ldrh	r3, [r3, #2]
 80100aa:	2b02      	cmp	r3, #2
 80100ac:	d10b      	bne.n	80100c6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80100ae:	683b      	ldr	r3, [r7, #0]
 80100b0:	889b      	ldrh	r3, [r3, #4]
 80100b2:	0a1b      	lsrs	r3, r3, #8
 80100b4:	b29b      	uxth	r3, r3
 80100b6:	b2da      	uxtb	r2, r3
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80100be:	6878      	ldr	r0, [r7, #4]
 80100c0:	f000 f93c 	bl	801033c <USBD_CtlSendStatus>
}
 80100c4:	e003      	b.n	80100ce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80100c6:	6839      	ldr	r1, [r7, #0]
 80100c8:	6878      	ldr	r0, [r7, #4]
 80100ca:	f000 f860 	bl	801018e <USBD_CtlError>
}
 80100ce:	bf00      	nop
 80100d0:	3708      	adds	r7, #8
 80100d2:	46bd      	mov	sp, r7
 80100d4:	bd80      	pop	{r7, pc}

080100d6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80100d6:	b580      	push	{r7, lr}
 80100d8:	b082      	sub	sp, #8
 80100da:	af00      	add	r7, sp, #0
 80100dc:	6078      	str	r0, [r7, #4]
 80100de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80100e6:	b2db      	uxtb	r3, r3
 80100e8:	3b01      	subs	r3, #1
 80100ea:	2b02      	cmp	r3, #2
 80100ec:	d80b      	bhi.n	8010106 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80100ee:	683b      	ldr	r3, [r7, #0]
 80100f0:	885b      	ldrh	r3, [r3, #2]
 80100f2:	2b01      	cmp	r3, #1
 80100f4:	d10c      	bne.n	8010110 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	2200      	movs	r2, #0
 80100fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80100fe:	6878      	ldr	r0, [r7, #4]
 8010100:	f000 f91c 	bl	801033c <USBD_CtlSendStatus>
      }
      break;
 8010104:	e004      	b.n	8010110 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8010106:	6839      	ldr	r1, [r7, #0]
 8010108:	6878      	ldr	r0, [r7, #4]
 801010a:	f000 f840 	bl	801018e <USBD_CtlError>
      break;
 801010e:	e000      	b.n	8010112 <USBD_ClrFeature+0x3c>
      break;
 8010110:	bf00      	nop
  }
}
 8010112:	bf00      	nop
 8010114:	3708      	adds	r7, #8
 8010116:	46bd      	mov	sp, r7
 8010118:	bd80      	pop	{r7, pc}

0801011a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801011a:	b580      	push	{r7, lr}
 801011c:	b084      	sub	sp, #16
 801011e:	af00      	add	r7, sp, #0
 8010120:	6078      	str	r0, [r7, #4]
 8010122:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010124:	683b      	ldr	r3, [r7, #0]
 8010126:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010128:	68fb      	ldr	r3, [r7, #12]
 801012a:	781a      	ldrb	r2, [r3, #0]
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	3301      	adds	r3, #1
 8010134:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	781a      	ldrb	r2, [r3, #0]
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	3301      	adds	r3, #1
 8010142:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8010144:	68f8      	ldr	r0, [r7, #12]
 8010146:	f7ff fa16 	bl	800f576 <SWAPBYTE>
 801014a:	4603      	mov	r3, r0
 801014c:	461a      	mov	r2, r3
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	3301      	adds	r3, #1
 8010156:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	3301      	adds	r3, #1
 801015c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801015e:	68f8      	ldr	r0, [r7, #12]
 8010160:	f7ff fa09 	bl	800f576 <SWAPBYTE>
 8010164:	4603      	mov	r3, r0
 8010166:	461a      	mov	r2, r3
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	3301      	adds	r3, #1
 8010170:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8010172:	68fb      	ldr	r3, [r7, #12]
 8010174:	3301      	adds	r3, #1
 8010176:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8010178:	68f8      	ldr	r0, [r7, #12]
 801017a:	f7ff f9fc 	bl	800f576 <SWAPBYTE>
 801017e:	4603      	mov	r3, r0
 8010180:	461a      	mov	r2, r3
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	80da      	strh	r2, [r3, #6]
}
 8010186:	bf00      	nop
 8010188:	3710      	adds	r7, #16
 801018a:	46bd      	mov	sp, r7
 801018c:	bd80      	pop	{r7, pc}

0801018e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801018e:	b580      	push	{r7, lr}
 8010190:	b082      	sub	sp, #8
 8010192:	af00      	add	r7, sp, #0
 8010194:	6078      	str	r0, [r7, #4]
 8010196:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010198:	2180      	movs	r1, #128	@ 0x80
 801019a:	6878      	ldr	r0, [r7, #4]
 801019c:	f000 fd50 	bl	8010c40 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80101a0:	2100      	movs	r1, #0
 80101a2:	6878      	ldr	r0, [r7, #4]
 80101a4:	f000 fd4c 	bl	8010c40 <USBD_LL_StallEP>
}
 80101a8:	bf00      	nop
 80101aa:	3708      	adds	r7, #8
 80101ac:	46bd      	mov	sp, r7
 80101ae:	bd80      	pop	{r7, pc}

080101b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80101b0:	b580      	push	{r7, lr}
 80101b2:	b086      	sub	sp, #24
 80101b4:	af00      	add	r7, sp, #0
 80101b6:	60f8      	str	r0, [r7, #12]
 80101b8:	60b9      	str	r1, [r7, #8]
 80101ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80101bc:	2300      	movs	r3, #0
 80101be:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d042      	beq.n	801024c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80101ca:	6938      	ldr	r0, [r7, #16]
 80101cc:	f000 f842 	bl	8010254 <USBD_GetLen>
 80101d0:	4603      	mov	r3, r0
 80101d2:	3301      	adds	r3, #1
 80101d4:	005b      	lsls	r3, r3, #1
 80101d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80101da:	d808      	bhi.n	80101ee <USBD_GetString+0x3e>
 80101dc:	6938      	ldr	r0, [r7, #16]
 80101de:	f000 f839 	bl	8010254 <USBD_GetLen>
 80101e2:	4603      	mov	r3, r0
 80101e4:	3301      	adds	r3, #1
 80101e6:	b29b      	uxth	r3, r3
 80101e8:	005b      	lsls	r3, r3, #1
 80101ea:	b29a      	uxth	r2, r3
 80101ec:	e001      	b.n	80101f2 <USBD_GetString+0x42>
 80101ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80101f6:	7dfb      	ldrb	r3, [r7, #23]
 80101f8:	68ba      	ldr	r2, [r7, #8]
 80101fa:	4413      	add	r3, r2
 80101fc:	687a      	ldr	r2, [r7, #4]
 80101fe:	7812      	ldrb	r2, [r2, #0]
 8010200:	701a      	strb	r2, [r3, #0]
  idx++;
 8010202:	7dfb      	ldrb	r3, [r7, #23]
 8010204:	3301      	adds	r3, #1
 8010206:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8010208:	7dfb      	ldrb	r3, [r7, #23]
 801020a:	68ba      	ldr	r2, [r7, #8]
 801020c:	4413      	add	r3, r2
 801020e:	2203      	movs	r2, #3
 8010210:	701a      	strb	r2, [r3, #0]
  idx++;
 8010212:	7dfb      	ldrb	r3, [r7, #23]
 8010214:	3301      	adds	r3, #1
 8010216:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8010218:	e013      	b.n	8010242 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 801021a:	7dfb      	ldrb	r3, [r7, #23]
 801021c:	68ba      	ldr	r2, [r7, #8]
 801021e:	4413      	add	r3, r2
 8010220:	693a      	ldr	r2, [r7, #16]
 8010222:	7812      	ldrb	r2, [r2, #0]
 8010224:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8010226:	693b      	ldr	r3, [r7, #16]
 8010228:	3301      	adds	r3, #1
 801022a:	613b      	str	r3, [r7, #16]
    idx++;
 801022c:	7dfb      	ldrb	r3, [r7, #23]
 801022e:	3301      	adds	r3, #1
 8010230:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010232:	7dfb      	ldrb	r3, [r7, #23]
 8010234:	68ba      	ldr	r2, [r7, #8]
 8010236:	4413      	add	r3, r2
 8010238:	2200      	movs	r2, #0
 801023a:	701a      	strb	r2, [r3, #0]
    idx++;
 801023c:	7dfb      	ldrb	r3, [r7, #23]
 801023e:	3301      	adds	r3, #1
 8010240:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010242:	693b      	ldr	r3, [r7, #16]
 8010244:	781b      	ldrb	r3, [r3, #0]
 8010246:	2b00      	cmp	r3, #0
 8010248:	d1e7      	bne.n	801021a <USBD_GetString+0x6a>
 801024a:	e000      	b.n	801024e <USBD_GetString+0x9e>
    return;
 801024c:	bf00      	nop
  }
}
 801024e:	3718      	adds	r7, #24
 8010250:	46bd      	mov	sp, r7
 8010252:	bd80      	pop	{r7, pc}

08010254 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8010254:	b480      	push	{r7}
 8010256:	b085      	sub	sp, #20
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801025c:	2300      	movs	r3, #0
 801025e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8010264:	e005      	b.n	8010272 <USBD_GetLen+0x1e>
  {
    len++;
 8010266:	7bfb      	ldrb	r3, [r7, #15]
 8010268:	3301      	adds	r3, #1
 801026a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 801026c:	68bb      	ldr	r3, [r7, #8]
 801026e:	3301      	adds	r3, #1
 8010270:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8010272:	68bb      	ldr	r3, [r7, #8]
 8010274:	781b      	ldrb	r3, [r3, #0]
 8010276:	2b00      	cmp	r3, #0
 8010278:	d1f5      	bne.n	8010266 <USBD_GetLen+0x12>
  }

  return len;
 801027a:	7bfb      	ldrb	r3, [r7, #15]
}
 801027c:	4618      	mov	r0, r3
 801027e:	3714      	adds	r7, #20
 8010280:	46bd      	mov	sp, r7
 8010282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010286:	4770      	bx	lr

08010288 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8010288:	b580      	push	{r7, lr}
 801028a:	b084      	sub	sp, #16
 801028c:	af00      	add	r7, sp, #0
 801028e:	60f8      	str	r0, [r7, #12]
 8010290:	60b9      	str	r1, [r7, #8]
 8010292:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	2202      	movs	r2, #2
 8010298:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	687a      	ldr	r2, [r7, #4]
 80102a0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	687a      	ldr	r2, [r7, #4]
 80102a6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	68ba      	ldr	r2, [r7, #8]
 80102ac:	2100      	movs	r1, #0
 80102ae:	68f8      	ldr	r0, [r7, #12]
 80102b0:	f000 fd4f 	bl	8010d52 <USBD_LL_Transmit>

  return USBD_OK;
 80102b4:	2300      	movs	r3, #0
}
 80102b6:	4618      	mov	r0, r3
 80102b8:	3710      	adds	r7, #16
 80102ba:	46bd      	mov	sp, r7
 80102bc:	bd80      	pop	{r7, pc}

080102be <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80102be:	b580      	push	{r7, lr}
 80102c0:	b084      	sub	sp, #16
 80102c2:	af00      	add	r7, sp, #0
 80102c4:	60f8      	str	r0, [r7, #12]
 80102c6:	60b9      	str	r1, [r7, #8]
 80102c8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	68ba      	ldr	r2, [r7, #8]
 80102ce:	2100      	movs	r1, #0
 80102d0:	68f8      	ldr	r0, [r7, #12]
 80102d2:	f000 fd3e 	bl	8010d52 <USBD_LL_Transmit>

  return USBD_OK;
 80102d6:	2300      	movs	r3, #0
}
 80102d8:	4618      	mov	r0, r3
 80102da:	3710      	adds	r7, #16
 80102dc:	46bd      	mov	sp, r7
 80102de:	bd80      	pop	{r7, pc}

080102e0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80102e0:	b580      	push	{r7, lr}
 80102e2:	b084      	sub	sp, #16
 80102e4:	af00      	add	r7, sp, #0
 80102e6:	60f8      	str	r0, [r7, #12]
 80102e8:	60b9      	str	r1, [r7, #8]
 80102ea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	2203      	movs	r2, #3
 80102f0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	687a      	ldr	r2, [r7, #4]
 80102f8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	687a      	ldr	r2, [r7, #4]
 8010300:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	68ba      	ldr	r2, [r7, #8]
 8010308:	2100      	movs	r1, #0
 801030a:	68f8      	ldr	r0, [r7, #12]
 801030c:	f000 fd42 	bl	8010d94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010310:	2300      	movs	r3, #0
}
 8010312:	4618      	mov	r0, r3
 8010314:	3710      	adds	r7, #16
 8010316:	46bd      	mov	sp, r7
 8010318:	bd80      	pop	{r7, pc}

0801031a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801031a:	b580      	push	{r7, lr}
 801031c:	b084      	sub	sp, #16
 801031e:	af00      	add	r7, sp, #0
 8010320:	60f8      	str	r0, [r7, #12]
 8010322:	60b9      	str	r1, [r7, #8]
 8010324:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	68ba      	ldr	r2, [r7, #8]
 801032a:	2100      	movs	r1, #0
 801032c:	68f8      	ldr	r0, [r7, #12]
 801032e:	f000 fd31 	bl	8010d94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8010332:	2300      	movs	r3, #0
}
 8010334:	4618      	mov	r0, r3
 8010336:	3710      	adds	r7, #16
 8010338:	46bd      	mov	sp, r7
 801033a:	bd80      	pop	{r7, pc}

0801033c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801033c:	b580      	push	{r7, lr}
 801033e:	b082      	sub	sp, #8
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	2204      	movs	r2, #4
 8010348:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801034c:	2300      	movs	r3, #0
 801034e:	2200      	movs	r2, #0
 8010350:	2100      	movs	r1, #0
 8010352:	6878      	ldr	r0, [r7, #4]
 8010354:	f000 fcfd 	bl	8010d52 <USBD_LL_Transmit>

  return USBD_OK;
 8010358:	2300      	movs	r3, #0
}
 801035a:	4618      	mov	r0, r3
 801035c:	3708      	adds	r7, #8
 801035e:	46bd      	mov	sp, r7
 8010360:	bd80      	pop	{r7, pc}

08010362 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8010362:	b580      	push	{r7, lr}
 8010364:	b082      	sub	sp, #8
 8010366:	af00      	add	r7, sp, #0
 8010368:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	2205      	movs	r2, #5
 801036e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010372:	2300      	movs	r3, #0
 8010374:	2200      	movs	r2, #0
 8010376:	2100      	movs	r1, #0
 8010378:	6878      	ldr	r0, [r7, #4]
 801037a:	f000 fd0b 	bl	8010d94 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801037e:	2300      	movs	r3, #0
}
 8010380:	4618      	mov	r0, r3
 8010382:	3708      	adds	r7, #8
 8010384:	46bd      	mov	sp, r7
 8010386:	bd80      	pop	{r7, pc}

08010388 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010388:	b580      	push	{r7, lr}
 801038a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 801038c:	2201      	movs	r2, #1
 801038e:	4913      	ldr	r1, [pc, #76]	@ (80103dc <MX_USB_DEVICE_Init+0x54>)
 8010390:	4813      	ldr	r0, [pc, #76]	@ (80103e0 <MX_USB_DEVICE_Init+0x58>)
 8010392:	f7fe fccd 	bl	800ed30 <USBD_Init>
 8010396:	4603      	mov	r3, r0
 8010398:	2b00      	cmp	r3, #0
 801039a:	d001      	beq.n	80103a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801039c:	f7f0 fc58 	bl	8000c50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 80103a0:	4910      	ldr	r1, [pc, #64]	@ (80103e4 <MX_USB_DEVICE_Init+0x5c>)
 80103a2:	480f      	ldr	r0, [pc, #60]	@ (80103e0 <MX_USB_DEVICE_Init+0x58>)
 80103a4:	f7fe fcf4 	bl	800ed90 <USBD_RegisterClass>
 80103a8:	4603      	mov	r3, r0
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d001      	beq.n	80103b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80103ae:	f7f0 fc4f 	bl	8000c50 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 80103b2:	490d      	ldr	r1, [pc, #52]	@ (80103e8 <MX_USB_DEVICE_Init+0x60>)
 80103b4:	480a      	ldr	r0, [pc, #40]	@ (80103e0 <MX_USB_DEVICE_Init+0x58>)
 80103b6:	f7fe fbeb 	bl	800eb90 <USBD_CDC_RegisterInterface>
 80103ba:	4603      	mov	r3, r0
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d001      	beq.n	80103c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80103c0:	f7f0 fc46 	bl	8000c50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 80103c4:	4806      	ldr	r0, [pc, #24]	@ (80103e0 <MX_USB_DEVICE_Init+0x58>)
 80103c6:	f7fe fd19 	bl	800edfc <USBD_Start>
 80103ca:	4603      	mov	r3, r0
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d001      	beq.n	80103d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80103d0:	f7f0 fc3e 	bl	8000c50 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80103d4:	f7f8 fc72 	bl	8008cbc <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80103d8:	bf00      	nop
 80103da:	bd80      	pop	{r7, pc}
 80103dc:	240000b4 	.word	0x240000b4
 80103e0:	24000494 	.word	0x24000494
 80103e4:	24000020 	.word	0x24000020
 80103e8:	240000a0 	.word	0x240000a0

080103ec <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80103ec:	b580      	push	{r7, lr}
 80103ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80103f0:	2200      	movs	r2, #0
 80103f2:	4905      	ldr	r1, [pc, #20]	@ (8010408 <CDC_Init_HS+0x1c>)
 80103f4:	4805      	ldr	r0, [pc, #20]	@ (801040c <CDC_Init_HS+0x20>)
 80103f6:	f7fe fbe5 	bl	800ebc4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 80103fa:	4905      	ldr	r1, [pc, #20]	@ (8010410 <CDC_Init_HS+0x24>)
 80103fc:	4803      	ldr	r0, [pc, #12]	@ (801040c <CDC_Init_HS+0x20>)
 80103fe:	f7fe fc03 	bl	800ec08 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010402:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8010404:	4618      	mov	r0, r3
 8010406:	bd80      	pop	{r7, pc}
 8010408:	24000f70 	.word	0x24000f70
 801040c:	24000494 	.word	0x24000494
 8010410:	24000770 	.word	0x24000770

08010414 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8010414:	b480      	push	{r7}
 8010416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8010418:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 801041a:	4618      	mov	r0, r3
 801041c:	46bd      	mov	sp, r7
 801041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010422:	4770      	bx	lr

08010424 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010424:	b480      	push	{r7}
 8010426:	b083      	sub	sp, #12
 8010428:	af00      	add	r7, sp, #0
 801042a:	4603      	mov	r3, r0
 801042c:	6039      	str	r1, [r7, #0]
 801042e:	71fb      	strb	r3, [r7, #7]
 8010430:	4613      	mov	r3, r2
 8010432:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8010434:	79fb      	ldrb	r3, [r7, #7]
 8010436:	2b23      	cmp	r3, #35	@ 0x23
 8010438:	d84a      	bhi.n	80104d0 <CDC_Control_HS+0xac>
 801043a:	a201      	add	r2, pc, #4	@ (adr r2, 8010440 <CDC_Control_HS+0x1c>)
 801043c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010440:	080104d1 	.word	0x080104d1
 8010444:	080104d1 	.word	0x080104d1
 8010448:	080104d1 	.word	0x080104d1
 801044c:	080104d1 	.word	0x080104d1
 8010450:	080104d1 	.word	0x080104d1
 8010454:	080104d1 	.word	0x080104d1
 8010458:	080104d1 	.word	0x080104d1
 801045c:	080104d1 	.word	0x080104d1
 8010460:	080104d1 	.word	0x080104d1
 8010464:	080104d1 	.word	0x080104d1
 8010468:	080104d1 	.word	0x080104d1
 801046c:	080104d1 	.word	0x080104d1
 8010470:	080104d1 	.word	0x080104d1
 8010474:	080104d1 	.word	0x080104d1
 8010478:	080104d1 	.word	0x080104d1
 801047c:	080104d1 	.word	0x080104d1
 8010480:	080104d1 	.word	0x080104d1
 8010484:	080104d1 	.word	0x080104d1
 8010488:	080104d1 	.word	0x080104d1
 801048c:	080104d1 	.word	0x080104d1
 8010490:	080104d1 	.word	0x080104d1
 8010494:	080104d1 	.word	0x080104d1
 8010498:	080104d1 	.word	0x080104d1
 801049c:	080104d1 	.word	0x080104d1
 80104a0:	080104d1 	.word	0x080104d1
 80104a4:	080104d1 	.word	0x080104d1
 80104a8:	080104d1 	.word	0x080104d1
 80104ac:	080104d1 	.word	0x080104d1
 80104b0:	080104d1 	.word	0x080104d1
 80104b4:	080104d1 	.word	0x080104d1
 80104b8:	080104d1 	.word	0x080104d1
 80104bc:	080104d1 	.word	0x080104d1
 80104c0:	080104d1 	.word	0x080104d1
 80104c4:	080104d1 	.word	0x080104d1
 80104c8:	080104d1 	.word	0x080104d1
 80104cc:	080104d1 	.word	0x080104d1
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80104d0:	bf00      	nop
  }

  return (USBD_OK);
 80104d2:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 80104d4:	4618      	mov	r0, r3
 80104d6:	370c      	adds	r7, #12
 80104d8:	46bd      	mov	sp, r7
 80104da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104de:	4770      	bx	lr

080104e0 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 80104e0:	b580      	push	{r7, lr}
 80104e2:	b082      	sub	sp, #8
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	6078      	str	r0, [r7, #4]
 80104e8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80104ea:	6879      	ldr	r1, [r7, #4]
 80104ec:	480b      	ldr	r0, [pc, #44]	@ (801051c <CDC_Receive_HS+0x3c>)
 80104ee:	f7fe fb8b 	bl	800ec08 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80104f2:	480a      	ldr	r0, [pc, #40]	@ (801051c <CDC_Receive_HS+0x3c>)
 80104f4:	f7fe fbe6 	bl	800ecc4 <USBD_CDC_ReceivePacket>
  USB_CDC_RxHandler(UserRxBufferHS, *Len);
 80104f8:	683b      	ldr	r3, [r7, #0]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	4619      	mov	r1, r3
 80104fe:	4808      	ldr	r0, [pc, #32]	@ (8010520 <CDC_Receive_HS+0x40>)
 8010500:	f7ef ff36 	bl	8000370 <USB_CDC_RxHandler>
  memset(UserRxBufferHS, '\0', *Len);
 8010504:	683b      	ldr	r3, [r7, #0]
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	461a      	mov	r2, r3
 801050a:	2100      	movs	r1, #0
 801050c:	4804      	ldr	r0, [pc, #16]	@ (8010520 <CDC_Receive_HS+0x40>)
 801050e:	f000 fcb9 	bl	8010e84 <memset>
  return (USBD_OK);
 8010512:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8010514:	4618      	mov	r0, r3
 8010516:	3708      	adds	r7, #8
 8010518:	46bd      	mov	sp, r7
 801051a:	bd80      	pop	{r7, pc}
 801051c:	24000494 	.word	0x24000494
 8010520:	24000770 	.word	0x24000770

08010524 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8010524:	b580      	push	{r7, lr}
 8010526:	b084      	sub	sp, #16
 8010528:	af00      	add	r7, sp, #0
 801052a:	6078      	str	r0, [r7, #4]
 801052c:	460b      	mov	r3, r1
 801052e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010530:	2300      	movs	r3, #0
 8010532:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8010534:	4b0d      	ldr	r3, [pc, #52]	@ (801056c <CDC_Transmit_HS+0x48>)
 8010536:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801053a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801053c:	68bb      	ldr	r3, [r7, #8]
 801053e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8010542:	2b00      	cmp	r3, #0
 8010544:	d001      	beq.n	801054a <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8010546:	2301      	movs	r3, #1
 8010548:	e00b      	b.n	8010562 <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 801054a:	887b      	ldrh	r3, [r7, #2]
 801054c:	461a      	mov	r2, r3
 801054e:	6879      	ldr	r1, [r7, #4]
 8010550:	4806      	ldr	r0, [pc, #24]	@ (801056c <CDC_Transmit_HS+0x48>)
 8010552:	f7fe fb37 	bl	800ebc4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8010556:	4805      	ldr	r0, [pc, #20]	@ (801056c <CDC_Transmit_HS+0x48>)
 8010558:	f7fe fb74 	bl	800ec44 <USBD_CDC_TransmitPacket>
 801055c:	4603      	mov	r3, r0
 801055e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8010560:	7bfb      	ldrb	r3, [r7, #15]
}
 8010562:	4618      	mov	r0, r3
 8010564:	3710      	adds	r7, #16
 8010566:	46bd      	mov	sp, r7
 8010568:	bd80      	pop	{r7, pc}
 801056a:	bf00      	nop
 801056c:	24000494 	.word	0x24000494

08010570 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010570:	b480      	push	{r7}
 8010572:	b087      	sub	sp, #28
 8010574:	af00      	add	r7, sp, #0
 8010576:	60f8      	str	r0, [r7, #12]
 8010578:	60b9      	str	r1, [r7, #8]
 801057a:	4613      	mov	r3, r2
 801057c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801057e:	2300      	movs	r3, #0
 8010580:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8010582:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010586:	4618      	mov	r0, r3
 8010588:	371c      	adds	r7, #28
 801058a:	46bd      	mov	sp, r7
 801058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010590:	4770      	bx	lr
	...

08010594 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010594:	b480      	push	{r7}
 8010596:	b083      	sub	sp, #12
 8010598:	af00      	add	r7, sp, #0
 801059a:	4603      	mov	r3, r0
 801059c:	6039      	str	r1, [r7, #0]
 801059e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80105a0:	683b      	ldr	r3, [r7, #0]
 80105a2:	2212      	movs	r2, #18
 80105a4:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 80105a6:	4b03      	ldr	r3, [pc, #12]	@ (80105b4 <USBD_HS_DeviceDescriptor+0x20>)
}
 80105a8:	4618      	mov	r0, r3
 80105aa:	370c      	adds	r7, #12
 80105ac:	46bd      	mov	sp, r7
 80105ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b2:	4770      	bx	lr
 80105b4:	240000d4 	.word	0x240000d4

080105b8 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80105b8:	b480      	push	{r7}
 80105ba:	b083      	sub	sp, #12
 80105bc:	af00      	add	r7, sp, #0
 80105be:	4603      	mov	r3, r0
 80105c0:	6039      	str	r1, [r7, #0]
 80105c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80105c4:	683b      	ldr	r3, [r7, #0]
 80105c6:	2204      	movs	r2, #4
 80105c8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80105ca:	4b03      	ldr	r3, [pc, #12]	@ (80105d8 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80105cc:	4618      	mov	r0, r3
 80105ce:	370c      	adds	r7, #12
 80105d0:	46bd      	mov	sp, r7
 80105d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d6:	4770      	bx	lr
 80105d8:	240000e8 	.word	0x240000e8

080105dc <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80105dc:	b580      	push	{r7, lr}
 80105de:	b082      	sub	sp, #8
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	4603      	mov	r3, r0
 80105e4:	6039      	str	r1, [r7, #0]
 80105e6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80105e8:	79fb      	ldrb	r3, [r7, #7]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d105      	bne.n	80105fa <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80105ee:	683a      	ldr	r2, [r7, #0]
 80105f0:	4907      	ldr	r1, [pc, #28]	@ (8010610 <USBD_HS_ProductStrDescriptor+0x34>)
 80105f2:	4808      	ldr	r0, [pc, #32]	@ (8010614 <USBD_HS_ProductStrDescriptor+0x38>)
 80105f4:	f7ff fddc 	bl	80101b0 <USBD_GetString>
 80105f8:	e004      	b.n	8010604 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80105fa:	683a      	ldr	r2, [r7, #0]
 80105fc:	4904      	ldr	r1, [pc, #16]	@ (8010610 <USBD_HS_ProductStrDescriptor+0x34>)
 80105fe:	4805      	ldr	r0, [pc, #20]	@ (8010614 <USBD_HS_ProductStrDescriptor+0x38>)
 8010600:	f7ff fdd6 	bl	80101b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010604:	4b02      	ldr	r3, [pc, #8]	@ (8010610 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8010606:	4618      	mov	r0, r3
 8010608:	3708      	adds	r7, #8
 801060a:	46bd      	mov	sp, r7
 801060c:	bd80      	pop	{r7, pc}
 801060e:	bf00      	nop
 8010610:	24001770 	.word	0x24001770
 8010614:	080111c4 	.word	0x080111c4

08010618 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b082      	sub	sp, #8
 801061c:	af00      	add	r7, sp, #0
 801061e:	4603      	mov	r3, r0
 8010620:	6039      	str	r1, [r7, #0]
 8010622:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010624:	683a      	ldr	r2, [r7, #0]
 8010626:	4904      	ldr	r1, [pc, #16]	@ (8010638 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8010628:	4804      	ldr	r0, [pc, #16]	@ (801063c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 801062a:	f7ff fdc1 	bl	80101b0 <USBD_GetString>
  return USBD_StrDesc;
 801062e:	4b02      	ldr	r3, [pc, #8]	@ (8010638 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8010630:	4618      	mov	r0, r3
 8010632:	3708      	adds	r7, #8
 8010634:	46bd      	mov	sp, r7
 8010636:	bd80      	pop	{r7, pc}
 8010638:	24001770 	.word	0x24001770
 801063c:	080111dc 	.word	0x080111dc

08010640 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010640:	b580      	push	{r7, lr}
 8010642:	b082      	sub	sp, #8
 8010644:	af00      	add	r7, sp, #0
 8010646:	4603      	mov	r3, r0
 8010648:	6039      	str	r1, [r7, #0]
 801064a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801064c:	683b      	ldr	r3, [r7, #0]
 801064e:	221a      	movs	r2, #26
 8010650:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010652:	f000 f843 	bl	80106dc <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8010656:	4b02      	ldr	r3, [pc, #8]	@ (8010660 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8010658:	4618      	mov	r0, r3
 801065a:	3708      	adds	r7, #8
 801065c:	46bd      	mov	sp, r7
 801065e:	bd80      	pop	{r7, pc}
 8010660:	240000ec 	.word	0x240000ec

08010664 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010664:	b580      	push	{r7, lr}
 8010666:	b082      	sub	sp, #8
 8010668:	af00      	add	r7, sp, #0
 801066a:	4603      	mov	r3, r0
 801066c:	6039      	str	r1, [r7, #0]
 801066e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010670:	79fb      	ldrb	r3, [r7, #7]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d105      	bne.n	8010682 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8010676:	683a      	ldr	r2, [r7, #0]
 8010678:	4907      	ldr	r1, [pc, #28]	@ (8010698 <USBD_HS_ConfigStrDescriptor+0x34>)
 801067a:	4808      	ldr	r0, [pc, #32]	@ (801069c <USBD_HS_ConfigStrDescriptor+0x38>)
 801067c:	f7ff fd98 	bl	80101b0 <USBD_GetString>
 8010680:	e004      	b.n	801068c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8010682:	683a      	ldr	r2, [r7, #0]
 8010684:	4904      	ldr	r1, [pc, #16]	@ (8010698 <USBD_HS_ConfigStrDescriptor+0x34>)
 8010686:	4805      	ldr	r0, [pc, #20]	@ (801069c <USBD_HS_ConfigStrDescriptor+0x38>)
 8010688:	f7ff fd92 	bl	80101b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801068c:	4b02      	ldr	r3, [pc, #8]	@ (8010698 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801068e:	4618      	mov	r0, r3
 8010690:	3708      	adds	r7, #8
 8010692:	46bd      	mov	sp, r7
 8010694:	bd80      	pop	{r7, pc}
 8010696:	bf00      	nop
 8010698:	24001770 	.word	0x24001770
 801069c:	080111f0 	.word	0x080111f0

080106a0 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b082      	sub	sp, #8
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	4603      	mov	r3, r0
 80106a8:	6039      	str	r1, [r7, #0]
 80106aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80106ac:	79fb      	ldrb	r3, [r7, #7]
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d105      	bne.n	80106be <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80106b2:	683a      	ldr	r2, [r7, #0]
 80106b4:	4907      	ldr	r1, [pc, #28]	@ (80106d4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80106b6:	4808      	ldr	r0, [pc, #32]	@ (80106d8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80106b8:	f7ff fd7a 	bl	80101b0 <USBD_GetString>
 80106bc:	e004      	b.n	80106c8 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80106be:	683a      	ldr	r2, [r7, #0]
 80106c0:	4904      	ldr	r1, [pc, #16]	@ (80106d4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80106c2:	4805      	ldr	r0, [pc, #20]	@ (80106d8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80106c4:	f7ff fd74 	bl	80101b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80106c8:	4b02      	ldr	r3, [pc, #8]	@ (80106d4 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80106ca:	4618      	mov	r0, r3
 80106cc:	3708      	adds	r7, #8
 80106ce:	46bd      	mov	sp, r7
 80106d0:	bd80      	pop	{r7, pc}
 80106d2:	bf00      	nop
 80106d4:	24001770 	.word	0x24001770
 80106d8:	080111fc 	.word	0x080111fc

080106dc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80106dc:	b580      	push	{r7, lr}
 80106de:	b084      	sub	sp, #16
 80106e0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80106e2:	4b0f      	ldr	r3, [pc, #60]	@ (8010720 <Get_SerialNum+0x44>)
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80106e8:	4b0e      	ldr	r3, [pc, #56]	@ (8010724 <Get_SerialNum+0x48>)
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80106ee:	4b0e      	ldr	r3, [pc, #56]	@ (8010728 <Get_SerialNum+0x4c>)
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80106f4:	68fa      	ldr	r2, [r7, #12]
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	4413      	add	r3, r2
 80106fa:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d009      	beq.n	8010716 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010702:	2208      	movs	r2, #8
 8010704:	4909      	ldr	r1, [pc, #36]	@ (801072c <Get_SerialNum+0x50>)
 8010706:	68f8      	ldr	r0, [r7, #12]
 8010708:	f000 f814 	bl	8010734 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801070c:	2204      	movs	r2, #4
 801070e:	4908      	ldr	r1, [pc, #32]	@ (8010730 <Get_SerialNum+0x54>)
 8010710:	68b8      	ldr	r0, [r7, #8]
 8010712:	f000 f80f 	bl	8010734 <IntToUnicode>
  }
}
 8010716:	bf00      	nop
 8010718:	3710      	adds	r7, #16
 801071a:	46bd      	mov	sp, r7
 801071c:	bd80      	pop	{r7, pc}
 801071e:	bf00      	nop
 8010720:	08fff800 	.word	0x08fff800
 8010724:	08fff804 	.word	0x08fff804
 8010728:	08fff808 	.word	0x08fff808
 801072c:	240000ee 	.word	0x240000ee
 8010730:	240000fe 	.word	0x240000fe

08010734 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010734:	b480      	push	{r7}
 8010736:	b087      	sub	sp, #28
 8010738:	af00      	add	r7, sp, #0
 801073a:	60f8      	str	r0, [r7, #12]
 801073c:	60b9      	str	r1, [r7, #8]
 801073e:	4613      	mov	r3, r2
 8010740:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010742:	2300      	movs	r3, #0
 8010744:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010746:	2300      	movs	r3, #0
 8010748:	75fb      	strb	r3, [r7, #23]
 801074a:	e027      	b.n	801079c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	0f1b      	lsrs	r3, r3, #28
 8010750:	2b09      	cmp	r3, #9
 8010752:	d80b      	bhi.n	801076c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	0f1b      	lsrs	r3, r3, #28
 8010758:	b2da      	uxtb	r2, r3
 801075a:	7dfb      	ldrb	r3, [r7, #23]
 801075c:	005b      	lsls	r3, r3, #1
 801075e:	4619      	mov	r1, r3
 8010760:	68bb      	ldr	r3, [r7, #8]
 8010762:	440b      	add	r3, r1
 8010764:	3230      	adds	r2, #48	@ 0x30
 8010766:	b2d2      	uxtb	r2, r2
 8010768:	701a      	strb	r2, [r3, #0]
 801076a:	e00a      	b.n	8010782 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	0f1b      	lsrs	r3, r3, #28
 8010770:	b2da      	uxtb	r2, r3
 8010772:	7dfb      	ldrb	r3, [r7, #23]
 8010774:	005b      	lsls	r3, r3, #1
 8010776:	4619      	mov	r1, r3
 8010778:	68bb      	ldr	r3, [r7, #8]
 801077a:	440b      	add	r3, r1
 801077c:	3237      	adds	r2, #55	@ 0x37
 801077e:	b2d2      	uxtb	r2, r2
 8010780:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	011b      	lsls	r3, r3, #4
 8010786:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010788:	7dfb      	ldrb	r3, [r7, #23]
 801078a:	005b      	lsls	r3, r3, #1
 801078c:	3301      	adds	r3, #1
 801078e:	68ba      	ldr	r2, [r7, #8]
 8010790:	4413      	add	r3, r2
 8010792:	2200      	movs	r2, #0
 8010794:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010796:	7dfb      	ldrb	r3, [r7, #23]
 8010798:	3301      	adds	r3, #1
 801079a:	75fb      	strb	r3, [r7, #23]
 801079c:	7dfa      	ldrb	r2, [r7, #23]
 801079e:	79fb      	ldrb	r3, [r7, #7]
 80107a0:	429a      	cmp	r2, r3
 80107a2:	d3d3      	bcc.n	801074c <IntToUnicode+0x18>
  }
}
 80107a4:	bf00      	nop
 80107a6:	bf00      	nop
 80107a8:	371c      	adds	r7, #28
 80107aa:	46bd      	mov	sp, r7
 80107ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107b0:	4770      	bx	lr
	...

080107b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b0ba      	sub	sp, #232	@ 0xe8
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80107bc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80107c0:	2200      	movs	r2, #0
 80107c2:	601a      	str	r2, [r3, #0]
 80107c4:	605a      	str	r2, [r3, #4]
 80107c6:	609a      	str	r2, [r3, #8]
 80107c8:	60da      	str	r2, [r3, #12]
 80107ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80107cc:	f107 0310 	add.w	r3, r7, #16
 80107d0:	22c0      	movs	r2, #192	@ 0xc0
 80107d2:	2100      	movs	r1, #0
 80107d4:	4618      	mov	r0, r3
 80107d6:	f000 fb55 	bl	8010e84 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	681b      	ldr	r3, [r3, #0]
 80107de:	4a43      	ldr	r2, [pc, #268]	@ (80108ec <HAL_PCD_MspInit+0x138>)
 80107e0:	4293      	cmp	r3, r2
 80107e2:	d17f      	bne.n	80108e4 <HAL_PCD_MspInit+0x130>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80107e4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80107e8:	f04f 0300 	mov.w	r3, #0
 80107ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 80107f0:	2301      	movs	r3, #1
 80107f2:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 80107f4:	2312      	movs	r3, #18
 80107f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80107f8:	2302      	movs	r3, #2
 80107fa:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 80107fc:	2303      	movs	r3, #3
 80107fe:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 128;
 8010800:	2380      	movs	r3, #128	@ 0x80
 8010802:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8010804:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8010808:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 801080a:	2300      	movs	r3, #0
 801080c:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 801080e:	2300      	movs	r3, #0
 8010810:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8010812:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8010816:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801081a:	f107 0310 	add.w	r3, r7, #16
 801081e:	4618      	mov	r0, r3
 8010820:	f7f9 fa6e 	bl	8009d00 <HAL_RCCEx_PeriphCLKConfig>
 8010824:	4603      	mov	r3, r0
 8010826:	2b00      	cmp	r3, #0
 8010828:	d001      	beq.n	801082e <HAL_PCD_MspInit+0x7a>
    {
      Error_Handler();
 801082a:	f7f0 fa11 	bl	8000c50 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 801082e:	f7f8 fa45 	bl	8008cbc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010832:	4b2f      	ldr	r3, [pc, #188]	@ (80108f0 <HAL_PCD_MspInit+0x13c>)
 8010834:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8010838:	4a2d      	ldr	r2, [pc, #180]	@ (80108f0 <HAL_PCD_MspInit+0x13c>)
 801083a:	f043 0301 	orr.w	r3, r3, #1
 801083e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8010842:	4b2b      	ldr	r3, [pc, #172]	@ (80108f0 <HAL_PCD_MspInit+0x13c>)
 8010844:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8010848:	f003 0301 	and.w	r3, r3, #1
 801084c:	60fb      	str	r3, [r7, #12]
 801084e:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    PA11     ------> USB_OTG_HS_DM
    PA12     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8010850:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010854:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010858:	2300      	movs	r3, #0
 801085a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801085e:	2300      	movs	r3, #0
 8010860:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010864:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8010868:	4619      	mov	r1, r3
 801086a:	4822      	ldr	r0, [pc, #136]	@ (80108f4 <HAL_PCD_MspInit+0x140>)
 801086c:	f7f6 f8cc 	bl	8006a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010870:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8010874:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010878:	2302      	movs	r3, #2
 801087a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801087e:	2300      	movs	r3, #0
 8010880:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010884:	2300      	movs	r3, #0
 8010886:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801088a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 801088e:	4619      	mov	r1, r3
 8010890:	4818      	ldr	r0, [pc, #96]	@ (80108f4 <HAL_PCD_MspInit+0x140>)
 8010892:	f7f6 f8b9 	bl	8006a08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8010896:	4b16      	ldr	r3, [pc, #88]	@ (80108f0 <HAL_PCD_MspInit+0x13c>)
 8010898:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 801089c:	4a14      	ldr	r2, [pc, #80]	@ (80108f0 <HAL_PCD_MspInit+0x13c>)
 801089e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80108a2:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80108a6:	4b12      	ldr	r3, [pc, #72]	@ (80108f0 <HAL_PCD_MspInit+0x13c>)
 80108a8:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80108ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80108b0:	60bb      	str	r3, [r7, #8]
 80108b2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_EP1_OUT_IRQn, 0, 0);
 80108b4:	2200      	movs	r2, #0
 80108b6:	2100      	movs	r1, #0
 80108b8:	204a      	movs	r0, #74	@ 0x4a
 80108ba:	f7f2 f974 	bl	8002ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_OUT_IRQn);
 80108be:	204a      	movs	r0, #74	@ 0x4a
 80108c0:	f7f2 f98b 	bl	8002bda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_EP1_IN_IRQn, 0, 0);
 80108c4:	2200      	movs	r2, #0
 80108c6:	2100      	movs	r1, #0
 80108c8:	204b      	movs	r0, #75	@ 0x4b
 80108ca:	f7f2 f96c 	bl	8002ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_IN_IRQn);
 80108ce:	204b      	movs	r0, #75	@ 0x4b
 80108d0:	f7f2 f983 	bl	8002bda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80108d4:	2200      	movs	r2, #0
 80108d6:	2100      	movs	r1, #0
 80108d8:	204d      	movs	r0, #77	@ 0x4d
 80108da:	f7f2 f964 	bl	8002ba6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80108de:	204d      	movs	r0, #77	@ 0x4d
 80108e0:	f7f2 f97b 	bl	8002bda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80108e4:	bf00      	nop
 80108e6:	37e8      	adds	r7, #232	@ 0xe8
 80108e8:	46bd      	mov	sp, r7
 80108ea:	bd80      	pop	{r7, pc}
 80108ec:	40040000 	.word	0x40040000
 80108f0:	58024400 	.word	0x58024400
 80108f4:	58020000 	.word	0x58020000

080108f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b082      	sub	sp, #8
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 801090c:	4619      	mov	r1, r3
 801090e:	4610      	mov	r0, r2
 8010910:	f7fe fac1 	bl	800ee96 <USBD_LL_SetupStage>
}
 8010914:	bf00      	nop
 8010916:	3708      	adds	r7, #8
 8010918:	46bd      	mov	sp, r7
 801091a:	bd80      	pop	{r7, pc}

0801091c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801091c:	b580      	push	{r7, lr}
 801091e:	b082      	sub	sp, #8
 8010920:	af00      	add	r7, sp, #0
 8010922:	6078      	str	r0, [r7, #4]
 8010924:	460b      	mov	r3, r1
 8010926:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801092e:	78fa      	ldrb	r2, [r7, #3]
 8010930:	6879      	ldr	r1, [r7, #4]
 8010932:	4613      	mov	r3, r2
 8010934:	00db      	lsls	r3, r3, #3
 8010936:	4413      	add	r3, r2
 8010938:	009b      	lsls	r3, r3, #2
 801093a:	440b      	add	r3, r1
 801093c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8010940:	681a      	ldr	r2, [r3, #0]
 8010942:	78fb      	ldrb	r3, [r7, #3]
 8010944:	4619      	mov	r1, r3
 8010946:	f7fe fafb 	bl	800ef40 <USBD_LL_DataOutStage>
}
 801094a:	bf00      	nop
 801094c:	3708      	adds	r7, #8
 801094e:	46bd      	mov	sp, r7
 8010950:	bd80      	pop	{r7, pc}

08010952 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010952:	b580      	push	{r7, lr}
 8010954:	b082      	sub	sp, #8
 8010956:	af00      	add	r7, sp, #0
 8010958:	6078      	str	r0, [r7, #4]
 801095a:	460b      	mov	r3, r1
 801095c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8010964:	78fa      	ldrb	r2, [r7, #3]
 8010966:	6879      	ldr	r1, [r7, #4]
 8010968:	4613      	mov	r3, r2
 801096a:	00db      	lsls	r3, r3, #3
 801096c:	4413      	add	r3, r2
 801096e:	009b      	lsls	r3, r3, #2
 8010970:	440b      	add	r3, r1
 8010972:	3320      	adds	r3, #32
 8010974:	681a      	ldr	r2, [r3, #0]
 8010976:	78fb      	ldrb	r3, [r7, #3]
 8010978:	4619      	mov	r1, r3
 801097a:	f7fe fb94 	bl	800f0a6 <USBD_LL_DataInStage>
}
 801097e:	bf00      	nop
 8010980:	3708      	adds	r7, #8
 8010982:	46bd      	mov	sp, r7
 8010984:	bd80      	pop	{r7, pc}

08010986 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010986:	b580      	push	{r7, lr}
 8010988:	b082      	sub	sp, #8
 801098a:	af00      	add	r7, sp, #0
 801098c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010994:	4618      	mov	r0, r3
 8010996:	f7fe fcce 	bl	800f336 <USBD_LL_SOF>
}
 801099a:	bf00      	nop
 801099c:	3708      	adds	r7, #8
 801099e:	46bd      	mov	sp, r7
 80109a0:	bd80      	pop	{r7, pc}

080109a2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80109a2:	b580      	push	{r7, lr}
 80109a4:	b084      	sub	sp, #16
 80109a6:	af00      	add	r7, sp, #0
 80109a8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80109aa:	2301      	movs	r3, #1
 80109ac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	79db      	ldrb	r3, [r3, #7]
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d102      	bne.n	80109bc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80109b6:	2300      	movs	r3, #0
 80109b8:	73fb      	strb	r3, [r7, #15]
 80109ba:	e008      	b.n	80109ce <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	79db      	ldrb	r3, [r3, #7]
 80109c0:	2b02      	cmp	r3, #2
 80109c2:	d102      	bne.n	80109ca <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80109c4:	2301      	movs	r3, #1
 80109c6:	73fb      	strb	r3, [r7, #15]
 80109c8:	e001      	b.n	80109ce <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80109ca:	f7f0 f941 	bl	8000c50 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80109d4:	7bfa      	ldrb	r2, [r7, #15]
 80109d6:	4611      	mov	r1, r2
 80109d8:	4618      	mov	r0, r3
 80109da:	f7fe fc68 	bl	800f2ae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80109e4:	4618      	mov	r0, r3
 80109e6:	f7fe fc10 	bl	800f20a <USBD_LL_Reset>
}
 80109ea:	bf00      	nop
 80109ec:	3710      	adds	r7, #16
 80109ee:	46bd      	mov	sp, r7
 80109f0:	bd80      	pop	{r7, pc}
	...

080109f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b082      	sub	sp, #8
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010a02:	4618      	mov	r0, r3
 8010a04:	f7fe fc63 	bl	800f2ce <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	687a      	ldr	r2, [r7, #4]
 8010a14:	6812      	ldr	r2, [r2, #0]
 8010a16:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8010a1a:	f043 0301 	orr.w	r3, r3, #1
 8010a1e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	7adb      	ldrb	r3, [r3, #11]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d005      	beq.n	8010a34 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8010a28:	4b04      	ldr	r3, [pc, #16]	@ (8010a3c <HAL_PCD_SuspendCallback+0x48>)
 8010a2a:	691b      	ldr	r3, [r3, #16]
 8010a2c:	4a03      	ldr	r2, [pc, #12]	@ (8010a3c <HAL_PCD_SuspendCallback+0x48>)
 8010a2e:	f043 0306 	orr.w	r3, r3, #6
 8010a32:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8010a34:	bf00      	nop
 8010a36:	3708      	adds	r7, #8
 8010a38:	46bd      	mov	sp, r7
 8010a3a:	bd80      	pop	{r7, pc}
 8010a3c:	e000ed00 	.word	0xe000ed00

08010a40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010a40:	b580      	push	{r7, lr}
 8010a42:	b082      	sub	sp, #8
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010a4e:	4618      	mov	r0, r3
 8010a50:	f7fe fc59 	bl	800f306 <USBD_LL_Resume>
}
 8010a54:	bf00      	nop
 8010a56:	3708      	adds	r7, #8
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	bd80      	pop	{r7, pc}

08010a5c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b082      	sub	sp, #8
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
 8010a64:	460b      	mov	r3, r1
 8010a66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010a6e:	78fa      	ldrb	r2, [r7, #3]
 8010a70:	4611      	mov	r1, r2
 8010a72:	4618      	mov	r0, r3
 8010a74:	f7fe fcb1 	bl	800f3da <USBD_LL_IsoOUTIncomplete>
}
 8010a78:	bf00      	nop
 8010a7a:	3708      	adds	r7, #8
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	bd80      	pop	{r7, pc}

08010a80 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b082      	sub	sp, #8
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
 8010a88:	460b      	mov	r3, r1
 8010a8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010a92:	78fa      	ldrb	r2, [r7, #3]
 8010a94:	4611      	mov	r1, r2
 8010a96:	4618      	mov	r0, r3
 8010a98:	f7fe fc6d 	bl	800f376 <USBD_LL_IsoINIncomplete>
}
 8010a9c:	bf00      	nop
 8010a9e:	3708      	adds	r7, #8
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	bd80      	pop	{r7, pc}

08010aa4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010aa4:	b580      	push	{r7, lr}
 8010aa6:	b082      	sub	sp, #8
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010ab2:	4618      	mov	r0, r3
 8010ab4:	f7fe fcc3 	bl	800f43e <USBD_LL_DevConnected>
}
 8010ab8:	bf00      	nop
 8010aba:	3708      	adds	r7, #8
 8010abc:	46bd      	mov	sp, r7
 8010abe:	bd80      	pop	{r7, pc}

08010ac0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8010ac0:	b580      	push	{r7, lr}
 8010ac2:	b082      	sub	sp, #8
 8010ac4:	af00      	add	r7, sp, #0
 8010ac6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8010ace:	4618      	mov	r0, r3
 8010ad0:	f7fe fcc0 	bl	800f454 <USBD_LL_DevDisconnected>
}
 8010ad4:	bf00      	nop
 8010ad6:	3708      	adds	r7, #8
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	bd80      	pop	{r7, pc}

08010adc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8010adc:	b580      	push	{r7, lr}
 8010ade:	b082      	sub	sp, #8
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	781b      	ldrb	r3, [r3, #0]
 8010ae8:	2b01      	cmp	r3, #1
 8010aea:	d140      	bne.n	8010b6e <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8010aec:	4a22      	ldr	r2, [pc, #136]	@ (8010b78 <USBD_LL_Init+0x9c>)
 8010aee:	687b      	ldr	r3, [r7, #4]
 8010af0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	4a20      	ldr	r2, [pc, #128]	@ (8010b78 <USBD_LL_Init+0x9c>)
 8010af8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8010afc:	4b1e      	ldr	r3, [pc, #120]	@ (8010b78 <USBD_LL_Init+0x9c>)
 8010afe:	4a1f      	ldr	r2, [pc, #124]	@ (8010b7c <USBD_LL_Init+0xa0>)
 8010b00:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8010b02:	4b1d      	ldr	r3, [pc, #116]	@ (8010b78 <USBD_LL_Init+0x9c>)
 8010b04:	2209      	movs	r2, #9
 8010b06:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8010b08:	4b1b      	ldr	r3, [pc, #108]	@ (8010b78 <USBD_LL_Init+0x9c>)
 8010b0a:	2202      	movs	r2, #2
 8010b0c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8010b0e:	4b1a      	ldr	r3, [pc, #104]	@ (8010b78 <USBD_LL_Init+0x9c>)
 8010b10:	2200      	movs	r2, #0
 8010b12:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8010b14:	4b18      	ldr	r3, [pc, #96]	@ (8010b78 <USBD_LL_Init+0x9c>)
 8010b16:	2202      	movs	r2, #2
 8010b18:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8010b1a:	4b17      	ldr	r3, [pc, #92]	@ (8010b78 <USBD_LL_Init+0x9c>)
 8010b1c:	2200      	movs	r2, #0
 8010b1e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8010b20:	4b15      	ldr	r3, [pc, #84]	@ (8010b78 <USBD_LL_Init+0x9c>)
 8010b22:	2200      	movs	r2, #0
 8010b24:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8010b26:	4b14      	ldr	r3, [pc, #80]	@ (8010b78 <USBD_LL_Init+0x9c>)
 8010b28:	2200      	movs	r2, #0
 8010b2a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 8010b2c:	4b12      	ldr	r3, [pc, #72]	@ (8010b78 <USBD_LL_Init+0x9c>)
 8010b2e:	2201      	movs	r2, #1
 8010b30:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8010b32:	4b11      	ldr	r3, [pc, #68]	@ (8010b78 <USBD_LL_Init+0x9c>)
 8010b34:	2200      	movs	r2, #0
 8010b36:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8010b38:	4b0f      	ldr	r3, [pc, #60]	@ (8010b78 <USBD_LL_Init+0x9c>)
 8010b3a:	2200      	movs	r2, #0
 8010b3c:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8010b3e:	480e      	ldr	r0, [pc, #56]	@ (8010b78 <USBD_LL_Init+0x9c>)
 8010b40:	f7f6 fde1 	bl	8007706 <HAL_PCD_Init>
 8010b44:	4603      	mov	r3, r0
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d001      	beq.n	8010b4e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8010b4a:	f7f0 f881 	bl	8000c50 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8010b4e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8010b52:	4809      	ldr	r0, [pc, #36]	@ (8010b78 <USBD_LL_Init+0x9c>)
 8010b54:	f7f8 f837 	bl	8008bc6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8010b58:	2280      	movs	r2, #128	@ 0x80
 8010b5a:	2100      	movs	r1, #0
 8010b5c:	4806      	ldr	r0, [pc, #24]	@ (8010b78 <USBD_LL_Init+0x9c>)
 8010b5e:	f7f7 ffeb 	bl	8008b38 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8010b62:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8010b66:	2101      	movs	r1, #1
 8010b68:	4803      	ldr	r0, [pc, #12]	@ (8010b78 <USBD_LL_Init+0x9c>)
 8010b6a:	f7f7 ffe5 	bl	8008b38 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8010b6e:	2300      	movs	r3, #0
}
 8010b70:	4618      	mov	r0, r3
 8010b72:	3708      	adds	r7, #8
 8010b74:	46bd      	mov	sp, r7
 8010b76:	bd80      	pop	{r7, pc}
 8010b78:	24001970 	.word	0x24001970
 8010b7c:	40040000 	.word	0x40040000

08010b80 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8010b80:	b580      	push	{r7, lr}
 8010b82:	b084      	sub	sp, #16
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b88:	2300      	movs	r3, #0
 8010b8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010b8c:	2300      	movs	r3, #0
 8010b8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010b96:	4618      	mov	r0, r3
 8010b98:	f7f6 fec1 	bl	800791e <HAL_PCD_Start>
 8010b9c:	4603      	mov	r3, r0
 8010b9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ba0:	7bfb      	ldrb	r3, [r7, #15]
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	f000 f942 	bl	8010e2c <USBD_Get_USB_Status>
 8010ba8:	4603      	mov	r3, r0
 8010baa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010bac:	7bbb      	ldrb	r3, [r7, #14]
}
 8010bae:	4618      	mov	r0, r3
 8010bb0:	3710      	adds	r7, #16
 8010bb2:	46bd      	mov	sp, r7
 8010bb4:	bd80      	pop	{r7, pc}

08010bb6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8010bb6:	b580      	push	{r7, lr}
 8010bb8:	b084      	sub	sp, #16
 8010bba:	af00      	add	r7, sp, #0
 8010bbc:	6078      	str	r0, [r7, #4]
 8010bbe:	4608      	mov	r0, r1
 8010bc0:	4611      	mov	r1, r2
 8010bc2:	461a      	mov	r2, r3
 8010bc4:	4603      	mov	r3, r0
 8010bc6:	70fb      	strb	r3, [r7, #3]
 8010bc8:	460b      	mov	r3, r1
 8010bca:	70bb      	strb	r3, [r7, #2]
 8010bcc:	4613      	mov	r3, r2
 8010bce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010bde:	78bb      	ldrb	r3, [r7, #2]
 8010be0:	883a      	ldrh	r2, [r7, #0]
 8010be2:	78f9      	ldrb	r1, [r7, #3]
 8010be4:	f7f7 fbc2 	bl	800836c <HAL_PCD_EP_Open>
 8010be8:	4603      	mov	r3, r0
 8010bea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010bec:	7bfb      	ldrb	r3, [r7, #15]
 8010bee:	4618      	mov	r0, r3
 8010bf0:	f000 f91c 	bl	8010e2c <USBD_Get_USB_Status>
 8010bf4:	4603      	mov	r3, r0
 8010bf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010bf8:	7bbb      	ldrb	r3, [r7, #14]
}
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	3710      	adds	r7, #16
 8010bfe:	46bd      	mov	sp, r7
 8010c00:	bd80      	pop	{r7, pc}

08010c02 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010c02:	b580      	push	{r7, lr}
 8010c04:	b084      	sub	sp, #16
 8010c06:	af00      	add	r7, sp, #0
 8010c08:	6078      	str	r0, [r7, #4]
 8010c0a:	460b      	mov	r3, r1
 8010c0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c0e:	2300      	movs	r3, #0
 8010c10:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c12:	2300      	movs	r3, #0
 8010c14:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010c1c:	78fa      	ldrb	r2, [r7, #3]
 8010c1e:	4611      	mov	r1, r2
 8010c20:	4618      	mov	r0, r3
 8010c22:	f7f7 fc0d 	bl	8008440 <HAL_PCD_EP_Close>
 8010c26:	4603      	mov	r3, r0
 8010c28:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c2a:	7bfb      	ldrb	r3, [r7, #15]
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	f000 f8fd 	bl	8010e2c <USBD_Get_USB_Status>
 8010c32:	4603      	mov	r3, r0
 8010c34:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c36:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c38:	4618      	mov	r0, r3
 8010c3a:	3710      	adds	r7, #16
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	bd80      	pop	{r7, pc}

08010c40 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b084      	sub	sp, #16
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
 8010c48:	460b      	mov	r3, r1
 8010c4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c50:	2300      	movs	r3, #0
 8010c52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010c5a:	78fa      	ldrb	r2, [r7, #3]
 8010c5c:	4611      	mov	r1, r2
 8010c5e:	4618      	mov	r0, r3
 8010c60:	f7f7 fcc5 	bl	80085ee <HAL_PCD_EP_SetStall>
 8010c64:	4603      	mov	r3, r0
 8010c66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010c68:	7bfb      	ldrb	r3, [r7, #15]
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	f000 f8de 	bl	8010e2c <USBD_Get_USB_Status>
 8010c70:	4603      	mov	r3, r0
 8010c72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c74:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c76:	4618      	mov	r0, r3
 8010c78:	3710      	adds	r7, #16
 8010c7a:	46bd      	mov	sp, r7
 8010c7c:	bd80      	pop	{r7, pc}

08010c7e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010c7e:	b580      	push	{r7, lr}
 8010c80:	b084      	sub	sp, #16
 8010c82:	af00      	add	r7, sp, #0
 8010c84:	6078      	str	r0, [r7, #4]
 8010c86:	460b      	mov	r3, r1
 8010c88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010c8a:	2300      	movs	r3, #0
 8010c8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010c8e:	2300      	movs	r3, #0
 8010c90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010c98:	78fa      	ldrb	r2, [r7, #3]
 8010c9a:	4611      	mov	r1, r2
 8010c9c:	4618      	mov	r0, r3
 8010c9e:	f7f7 fd09 	bl	80086b4 <HAL_PCD_EP_ClrStall>
 8010ca2:	4603      	mov	r3, r0
 8010ca4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010ca6:	7bfb      	ldrb	r3, [r7, #15]
 8010ca8:	4618      	mov	r0, r3
 8010caa:	f000 f8bf 	bl	8010e2c <USBD_Get_USB_Status>
 8010cae:	4603      	mov	r3, r0
 8010cb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010cb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	3710      	adds	r7, #16
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	bd80      	pop	{r7, pc}

08010cbc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010cbc:	b480      	push	{r7}
 8010cbe:	b085      	sub	sp, #20
 8010cc0:	af00      	add	r7, sp, #0
 8010cc2:	6078      	str	r0, [r7, #4]
 8010cc4:	460b      	mov	r3, r1
 8010cc6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010cce:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8010cd0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	da0b      	bge.n	8010cf0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8010cd8:	78fb      	ldrb	r3, [r7, #3]
 8010cda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010cde:	68f9      	ldr	r1, [r7, #12]
 8010ce0:	4613      	mov	r3, r2
 8010ce2:	00db      	lsls	r3, r3, #3
 8010ce4:	4413      	add	r3, r2
 8010ce6:	009b      	lsls	r3, r3, #2
 8010ce8:	440b      	add	r3, r1
 8010cea:	3316      	adds	r3, #22
 8010cec:	781b      	ldrb	r3, [r3, #0]
 8010cee:	e00b      	b.n	8010d08 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8010cf0:	78fb      	ldrb	r3, [r7, #3]
 8010cf2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010cf6:	68f9      	ldr	r1, [r7, #12]
 8010cf8:	4613      	mov	r3, r2
 8010cfa:	00db      	lsls	r3, r3, #3
 8010cfc:	4413      	add	r3, r2
 8010cfe:	009b      	lsls	r3, r3, #2
 8010d00:	440b      	add	r3, r1
 8010d02:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8010d06:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010d08:	4618      	mov	r0, r3
 8010d0a:	3714      	adds	r7, #20
 8010d0c:	46bd      	mov	sp, r7
 8010d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d12:	4770      	bx	lr

08010d14 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8010d14:	b580      	push	{r7, lr}
 8010d16:	b084      	sub	sp, #16
 8010d18:	af00      	add	r7, sp, #0
 8010d1a:	6078      	str	r0, [r7, #4]
 8010d1c:	460b      	mov	r3, r1
 8010d1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d20:	2300      	movs	r3, #0
 8010d22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d24:	2300      	movs	r3, #0
 8010d26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010d2e:	78fa      	ldrb	r2, [r7, #3]
 8010d30:	4611      	mov	r1, r2
 8010d32:	4618      	mov	r0, r3
 8010d34:	f7f7 faf6 	bl	8008324 <HAL_PCD_SetAddress>
 8010d38:	4603      	mov	r3, r0
 8010d3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010d3c:	7bfb      	ldrb	r3, [r7, #15]
 8010d3e:	4618      	mov	r0, r3
 8010d40:	f000 f874 	bl	8010e2c <USBD_Get_USB_Status>
 8010d44:	4603      	mov	r3, r0
 8010d46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010d48:	7bbb      	ldrb	r3, [r7, #14]
}
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	3710      	adds	r7, #16
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	bd80      	pop	{r7, pc}

08010d52 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010d52:	b580      	push	{r7, lr}
 8010d54:	b086      	sub	sp, #24
 8010d56:	af00      	add	r7, sp, #0
 8010d58:	60f8      	str	r0, [r7, #12]
 8010d5a:	607a      	str	r2, [r7, #4]
 8010d5c:	603b      	str	r3, [r7, #0]
 8010d5e:	460b      	mov	r3, r1
 8010d60:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010d62:	2300      	movs	r3, #0
 8010d64:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010d66:	2300      	movs	r3, #0
 8010d68:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010d70:	7af9      	ldrb	r1, [r7, #11]
 8010d72:	683b      	ldr	r3, [r7, #0]
 8010d74:	687a      	ldr	r2, [r7, #4]
 8010d76:	f7f7 fc00 	bl	800857a <HAL_PCD_EP_Transmit>
 8010d7a:	4603      	mov	r3, r0
 8010d7c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010d7e:	7dfb      	ldrb	r3, [r7, #23]
 8010d80:	4618      	mov	r0, r3
 8010d82:	f000 f853 	bl	8010e2c <USBD_Get_USB_Status>
 8010d86:	4603      	mov	r3, r0
 8010d88:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010d8a:	7dbb      	ldrb	r3, [r7, #22]
}
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	3718      	adds	r7, #24
 8010d90:	46bd      	mov	sp, r7
 8010d92:	bd80      	pop	{r7, pc}

08010d94 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b086      	sub	sp, #24
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	60f8      	str	r0, [r7, #12]
 8010d9c:	607a      	str	r2, [r7, #4]
 8010d9e:	603b      	str	r3, [r7, #0]
 8010da0:	460b      	mov	r3, r1
 8010da2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010da4:	2300      	movs	r3, #0
 8010da6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010da8:	2300      	movs	r3, #0
 8010daa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8010db2:	7af9      	ldrb	r1, [r7, #11]
 8010db4:	683b      	ldr	r3, [r7, #0]
 8010db6:	687a      	ldr	r2, [r7, #4]
 8010db8:	f7f7 fb8c 	bl	80084d4 <HAL_PCD_EP_Receive>
 8010dbc:	4603      	mov	r3, r0
 8010dbe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010dc0:	7dfb      	ldrb	r3, [r7, #23]
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	f000 f832 	bl	8010e2c <USBD_Get_USB_Status>
 8010dc8:	4603      	mov	r3, r0
 8010dca:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010dcc:	7dbb      	ldrb	r3, [r7, #22]
}
 8010dce:	4618      	mov	r0, r3
 8010dd0:	3718      	adds	r7, #24
 8010dd2:	46bd      	mov	sp, r7
 8010dd4:	bd80      	pop	{r7, pc}

08010dd6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010dd6:	b580      	push	{r7, lr}
 8010dd8:	b082      	sub	sp, #8
 8010dda:	af00      	add	r7, sp, #0
 8010ddc:	6078      	str	r0, [r7, #4]
 8010dde:	460b      	mov	r3, r1
 8010de0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010de8:	78fa      	ldrb	r2, [r7, #3]
 8010dea:	4611      	mov	r1, r2
 8010dec:	4618      	mov	r0, r3
 8010dee:	f7f7 fbac 	bl	800854a <HAL_PCD_EP_GetRxCount>
 8010df2:	4603      	mov	r3, r0
}
 8010df4:	4618      	mov	r0, r3
 8010df6:	3708      	adds	r7, #8
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	bd80      	pop	{r7, pc}

08010dfc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8010dfc:	b480      	push	{r7}
 8010dfe:	b083      	sub	sp, #12
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010e04:	4b03      	ldr	r3, [pc, #12]	@ (8010e14 <USBD_static_malloc+0x18>)
}
 8010e06:	4618      	mov	r0, r3
 8010e08:	370c      	adds	r7, #12
 8010e0a:	46bd      	mov	sp, r7
 8010e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e10:	4770      	bx	lr
 8010e12:	bf00      	nop
 8010e14:	24001e54 	.word	0x24001e54

08010e18 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010e18:	b480      	push	{r7}
 8010e1a:	b083      	sub	sp, #12
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8010e20:	bf00      	nop
 8010e22:	370c      	adds	r7, #12
 8010e24:	46bd      	mov	sp, r7
 8010e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e2a:	4770      	bx	lr

08010e2c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010e2c:	b480      	push	{r7}
 8010e2e:	b085      	sub	sp, #20
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	4603      	mov	r3, r0
 8010e34:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010e36:	2300      	movs	r3, #0
 8010e38:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010e3a:	79fb      	ldrb	r3, [r7, #7]
 8010e3c:	2b03      	cmp	r3, #3
 8010e3e:	d817      	bhi.n	8010e70 <USBD_Get_USB_Status+0x44>
 8010e40:	a201      	add	r2, pc, #4	@ (adr r2, 8010e48 <USBD_Get_USB_Status+0x1c>)
 8010e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e46:	bf00      	nop
 8010e48:	08010e59 	.word	0x08010e59
 8010e4c:	08010e5f 	.word	0x08010e5f
 8010e50:	08010e65 	.word	0x08010e65
 8010e54:	08010e6b 	.word	0x08010e6b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010e58:	2300      	movs	r3, #0
 8010e5a:	73fb      	strb	r3, [r7, #15]
    break;
 8010e5c:	e00b      	b.n	8010e76 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8010e5e:	2303      	movs	r3, #3
 8010e60:	73fb      	strb	r3, [r7, #15]
    break;
 8010e62:	e008      	b.n	8010e76 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010e64:	2301      	movs	r3, #1
 8010e66:	73fb      	strb	r3, [r7, #15]
    break;
 8010e68:	e005      	b.n	8010e76 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010e6a:	2303      	movs	r3, #3
 8010e6c:	73fb      	strb	r3, [r7, #15]
    break;
 8010e6e:	e002      	b.n	8010e76 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8010e70:	2303      	movs	r3, #3
 8010e72:	73fb      	strb	r3, [r7, #15]
    break;
 8010e74:	bf00      	nop
  }
  return usb_status;
 8010e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e78:	4618      	mov	r0, r3
 8010e7a:	3714      	adds	r7, #20
 8010e7c:	46bd      	mov	sp, r7
 8010e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e82:	4770      	bx	lr

08010e84 <memset>:
 8010e84:	4402      	add	r2, r0
 8010e86:	4603      	mov	r3, r0
 8010e88:	4293      	cmp	r3, r2
 8010e8a:	d100      	bne.n	8010e8e <memset+0xa>
 8010e8c:	4770      	bx	lr
 8010e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8010e92:	e7f9      	b.n	8010e88 <memset+0x4>

08010e94 <__libc_init_array>:
 8010e94:	b570      	push	{r4, r5, r6, lr}
 8010e96:	4d0d      	ldr	r5, [pc, #52]	@ (8010ecc <__libc_init_array+0x38>)
 8010e98:	4c0d      	ldr	r4, [pc, #52]	@ (8010ed0 <__libc_init_array+0x3c>)
 8010e9a:	1b64      	subs	r4, r4, r5
 8010e9c:	10a4      	asrs	r4, r4, #2
 8010e9e:	2600      	movs	r6, #0
 8010ea0:	42a6      	cmp	r6, r4
 8010ea2:	d109      	bne.n	8010eb8 <__libc_init_array+0x24>
 8010ea4:	4d0b      	ldr	r5, [pc, #44]	@ (8010ed4 <__libc_init_array+0x40>)
 8010ea6:	4c0c      	ldr	r4, [pc, #48]	@ (8010ed8 <__libc_init_array+0x44>)
 8010ea8:	f000 f826 	bl	8010ef8 <_init>
 8010eac:	1b64      	subs	r4, r4, r5
 8010eae:	10a4      	asrs	r4, r4, #2
 8010eb0:	2600      	movs	r6, #0
 8010eb2:	42a6      	cmp	r6, r4
 8010eb4:	d105      	bne.n	8010ec2 <__libc_init_array+0x2e>
 8010eb6:	bd70      	pop	{r4, r5, r6, pc}
 8010eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8010ebc:	4798      	blx	r3
 8010ebe:	3601      	adds	r6, #1
 8010ec0:	e7ee      	b.n	8010ea0 <__libc_init_array+0xc>
 8010ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8010ec6:	4798      	blx	r3
 8010ec8:	3601      	adds	r6, #1
 8010eca:	e7f2      	b.n	8010eb2 <__libc_init_array+0x1e>
 8010ecc:	08011224 	.word	0x08011224
 8010ed0:	08011224 	.word	0x08011224
 8010ed4:	08011224 	.word	0x08011224
 8010ed8:	08011228 	.word	0x08011228

08010edc <memcpy>:
 8010edc:	440a      	add	r2, r1
 8010ede:	4291      	cmp	r1, r2
 8010ee0:	f100 33ff 	add.w	r3, r0, #4294967295
 8010ee4:	d100      	bne.n	8010ee8 <memcpy+0xc>
 8010ee6:	4770      	bx	lr
 8010ee8:	b510      	push	{r4, lr}
 8010eea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010eee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010ef2:	4291      	cmp	r1, r2
 8010ef4:	d1f9      	bne.n	8010eea <memcpy+0xe>
 8010ef6:	bd10      	pop	{r4, pc}

08010ef8 <_init>:
 8010ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010efa:	bf00      	nop
 8010efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010efe:	bc08      	pop	{r3}
 8010f00:	469e      	mov	lr, r3
 8010f02:	4770      	bx	lr

08010f04 <_fini>:
 8010f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f06:	bf00      	nop
 8010f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f0a:	bc08      	pop	{r3}
 8010f0c:	469e      	mov	lr, r3
 8010f0e:	4770      	bx	lr
