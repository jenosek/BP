
thesis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000132cc  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  08013578  08013578  00014578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08013728  08013728  00014728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0801372c  0801372c  0001472c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000158  24000000  08013730  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000210c  24000158  08013888  00015158  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24002264  08013888  00015264  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00015158  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002492a  00000000  00000000  00015186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00005163  00000000  00000000  00039ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001ca0  00000000  00000000  0003ec18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000015b7  00000000  00000000  000408b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00036edc  00000000  00000000  00041e6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00028a98  00000000  00000000  00078d4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014e59e  00000000  00000000  000a17e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001efd81  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00007c60  00000000  00000000  001efdc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000054  00000000  00000000  001f7a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000158 	.word	0x24000158
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08013560 	.word	0x08013560

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	2400015c 	.word	0x2400015c
 80002e8:	08013560 	.word	0x08013560

080002ec <I2C_write>:
#include "comms.h"


// I2C
void I2C_write(HAL_StatusTypeDef* status, DeviceAdress dev_adress, uint8_t reg_adress, uint8_t* data) {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b088      	sub	sp, #32
 80002f0:	af04      	add	r7, sp, #16
 80002f2:	60f8      	str	r0, [r7, #12]
 80002f4:	607b      	str	r3, [r7, #4]
 80002f6:	460b      	mov	r3, r1
 80002f8:	72fb      	strb	r3, [r7, #11]
 80002fa:	4613      	mov	r3, r2
 80002fc:	72bb      	strb	r3, [r7, #10]
	*status = HAL_I2C_Mem_Write(&hi2c2, dev_adress, reg_adress, I2C_MEMADD_SIZE_8BIT, data, 1, 100);
 80002fe:	7afb      	ldrb	r3, [r7, #11]
 8000300:	b299      	uxth	r1, r3
 8000302:	7abb      	ldrb	r3, [r7, #10]
 8000304:	b29a      	uxth	r2, r3
 8000306:	2364      	movs	r3, #100	@ 0x64
 8000308:	9302      	str	r3, [sp, #8]
 800030a:	2301      	movs	r3, #1
 800030c:	9301      	str	r3, [sp, #4]
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	9300      	str	r3, [sp, #0]
 8000312:	2301      	movs	r3, #1
 8000314:	4805      	ldr	r0, [pc, #20]	@ (800032c <I2C_write+0x40>)
 8000316:	f008 fa3f 	bl	8008798 <HAL_I2C_Mem_Write>
 800031a:	4603      	mov	r3, r0
 800031c:	461a      	mov	r2, r3
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	701a      	strb	r2, [r3, #0]
}
 8000322:	bf00      	nop
 8000324:	3710      	adds	r7, #16
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	24000348 	.word	0x24000348

08000330 <I2C_read>:

void I2C_read(HAL_StatusTypeDef* status, DeviceAdress dev_adress, uint8_t reg_adress, uint8_t* data) {
 8000330:	b580      	push	{r7, lr}
 8000332:	b086      	sub	sp, #24
 8000334:	af02      	add	r7, sp, #8
 8000336:	60f8      	str	r0, [r7, #12]
 8000338:	607b      	str	r3, [r7, #4]
 800033a:	460b      	mov	r3, r1
 800033c:	72fb      	strb	r3, [r7, #11]
 800033e:	4613      	mov	r3, r2
 8000340:	72bb      	strb	r3, [r7, #10]
	dev_adress += 1;
 8000342:	7afb      	ldrb	r3, [r7, #11]
 8000344:	3301      	adds	r3, #1
 8000346:	72fb      	strb	r3, [r7, #11]
	*status = HAL_I2C_Master_Transmit(&hi2c2, dev_adress, &reg_adress, 1, 500);
 8000348:	7afb      	ldrb	r3, [r7, #11]
 800034a:	b299      	uxth	r1, r3
 800034c:	f107 020a 	add.w	r2, r7, #10
 8000350:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	2301      	movs	r3, #1
 8000358:	480d      	ldr	r0, [pc, #52]	@ (8000390 <I2C_read+0x60>)
 800035a:	f008 f80f 	bl	800837c <HAL_I2C_Master_Transmit>
 800035e:	4603      	mov	r3, r0
 8000360:	461a      	mov	r2, r3
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	701a      	strb	r2, [r3, #0]
	*status |= HAL_I2C_Master_Receive(&hi2c2, dev_adress, data, 1, 100);
 8000366:	7afb      	ldrb	r3, [r7, #11]
 8000368:	b299      	uxth	r1, r3
 800036a:	2364      	movs	r3, #100	@ 0x64
 800036c:	9300      	str	r3, [sp, #0]
 800036e:	2301      	movs	r3, #1
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	4807      	ldr	r0, [pc, #28]	@ (8000390 <I2C_read+0x60>)
 8000374:	f008 f91a 	bl	80085ac <HAL_I2C_Master_Receive>
 8000378:	4603      	mov	r3, r0
 800037a:	461a      	mov	r2, r3
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	4313      	orrs	r3, r2
 8000382:	b2da      	uxtb	r2, r3
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	701a      	strb	r2, [r3, #0]
}
 8000388:	bf00      	nop
 800038a:	3710      	adds	r7, #16
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	24000348 	.word	0x24000348

08000394 <close_SPI>:




// SPI
void close_SPI(SPI_HandleTypeDef* hspi) {
 8000394:	b480      	push	{r7}
 8000396:	b085      	sub	sp, #20
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
	uint32_t itflag = hspi->Instance->SR;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	60fb      	str	r3, [r7, #12]

	  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	699a      	ldr	r2, [r3, #24]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	f042 0208 	orr.w	r2, r2, #8
 80003b2:	619a      	str	r2, [r3, #24]
	  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	699a      	ldr	r2, [r3, #24]
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	f042 0210 	orr.w	r2, r2, #16
 80003c2:	619a      	str	r2, [r3, #24]

	  /* Disable SPI peripheral */
	  __HAL_SPI_DISABLE(hspi);
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	681a      	ldr	r2, [r3, #0]
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	f022 0201 	bic.w	r2, r2, #1
 80003d2:	601a      	str	r2, [r3, #0]

	  /* Disable ITs */
	  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	6919      	ldr	r1, [r3, #16]
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	681a      	ldr	r2, [r3, #0]
 80003de:	4b3c      	ldr	r3, [pc, #240]	@ (80004d0 <close_SPI+0x13c>)
 80003e0:	400b      	ands	r3, r1
 80003e2:	6113      	str	r3, [r2, #16]
	                              SPI_IT_FRE | SPI_IT_MODF));

	  /* Disable Tx DMA Request */
	  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	689a      	ldr	r2, [r3, #8]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80003f2:	609a      	str	r2, [r3, #8]

	  /* Report UnderRun error for non RX Only communication */
	  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80003fa:	b2db      	uxtb	r3, r3
 80003fc:	2b04      	cmp	r3, #4
 80003fe:	d014      	beq.n	800042a <close_SPI+0x96>
	  {
	    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	f003 0320 	and.w	r3, r3, #32
 8000406:	2b00      	cmp	r3, #0
 8000408:	d00f      	beq.n	800042a <close_SPI+0x96>
	    {
	      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000410:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	699a      	ldr	r2, [r3, #24]
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	f042 0220 	orr.w	r2, r2, #32
 8000428:	619a      	str	r2, [r3, #24]
	    }
	  }

	  /* Report OverRun error for non TX Only communication */
	  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000430:	b2db      	uxtb	r3, r3
 8000432:	2b03      	cmp	r3, #3
 8000434:	d014      	beq.n	8000460 <close_SPI+0xcc>
	  {
	    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800043c:	2b00      	cmp	r3, #0
 800043e:	d00f      	beq.n	8000460 <close_SPI+0xcc>
	    {
	      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000446:	f043 0204 	orr.w	r2, r3, #4
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	699a      	ldr	r2, [r3, #24]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800045e:	619a      	str	r2, [r3, #24]
	    }
	#endif /* USE_SPI_CRC */
	  }

	  /* SPI Mode Fault error interrupt occurred -------------------------------*/
	  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000466:	2b00      	cmp	r3, #0
 8000468:	d00f      	beq.n	800048a <close_SPI+0xf6>
	  {
	    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000470:	f043 0201 	orr.w	r2, r3, #1
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	699a      	ldr	r2, [r3, #24]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000488:	619a      	str	r2, [r3, #24]
	  }

	  /* SPI Frame error interrupt occurred ------------------------------------*/
	  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000490:	2b00      	cmp	r3, #0
 8000492:	d00f      	beq.n	80004b4 <close_SPI+0x120>
	  {
	    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800049a:	f043 0208 	orr.w	r2, r3, #8
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	699a      	ldr	r2, [r3, #24]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80004b2:	619a      	str	r2, [r3, #24]
	  }

	  hspi->TxXferCount = (uint16_t)0UL;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	2200      	movs	r2, #0
 80004b8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
	  hspi->RxXferCount = (uint16_t)0UL;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	2200      	movs	r2, #0
 80004c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80004c4:	bf00      	nop
 80004c6:	3714      	adds	r7, #20
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr
 80004d0:	fffffc90 	.word	0xfffffc90

080004d4 <HAL_SPI_TxCpltCallback>:

// DMA callbacks, when SPI finishes
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	dma_flag = DMA_COMPLETED;
 80004dc:	4b04      	ldr	r3, [pc, #16]	@ (80004f0 <HAL_SPI_TxCpltCallback+0x1c>)
 80004de:	2200      	movs	r2, #0
 80004e0:	701a      	strb	r2, [r3, #0]
}
 80004e2:	bf00      	nop
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	24000174 	.word	0x24000174

080004f4 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	dma_flag = DMA_COMPLETED;
 80004fc:	4b04      	ldr	r3, [pc, #16]	@ (8000510 <HAL_SPI_TxRxCpltCallback+0x1c>)
 80004fe:	2200      	movs	r2, #0
 8000500:	701a      	strb	r2, [r3, #0]
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	24000174 	.word	0x24000174

08000514 <SPI_check_CTS>:

void SPI_check_CTS(HAL_StatusTypeDef* status) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	uint8_t attempt = 0;
 800051c:	2300      	movs	r3, #0
 800051e:	73fb      	strb	r3, [r7, #15]
	//uint8_t data[] = {0x20, 0, 0, 0}; //GET_INT_STATUS to clear CTS
	// Wait until Clear To Send (CTS) signal appears
	while (!(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9))) {
 8000520:	e00c      	b.n	800053c <SPI_check_CTS+0x28>
		attempt++;
 8000522:	7bfb      	ldrb	r3, [r7, #15]
 8000524:	3301      	adds	r3, #1
 8000526:	73fb      	strb	r3, [r7, #15]
		if (attempt > 100) {
 8000528:	7bfb      	ldrb	r3, [r7, #15]
 800052a:	2b64      	cmp	r3, #100	@ 0x64
 800052c:	d903      	bls.n	8000536 <SPI_check_CTS+0x22>
			*status = 0x3; // Timeout
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2203      	movs	r2, #3
 8000532:	701a      	strb	r2, [r3, #0]
			return;
 8000534:	e00a      	b.n	800054c <SPI_check_CTS+0x38>
		}
		HAL_Delay(100);
 8000536:	2064      	movs	r0, #100	@ 0x64
 8000538:	f002 fd32 	bl	8002fa0 <HAL_Delay>
	while (!(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9))) {
 800053c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000540:	4804      	ldr	r0, [pc, #16]	@ (8000554 <SPI_check_CTS+0x40>)
 8000542:	f007 fe33 	bl	80081ac <HAL_GPIO_ReadPin>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d0ea      	beq.n	8000522 <SPI_check_CTS+0xe>

	//*status |= HAL_SPI_Transmit(&hspi4, data, 4, 100);

	// SI is now ready to receive data

}
 800054c:	3710      	adds	r7, #16
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	58021000 	.word	0x58021000

08000558 <SPI_write>:


void SPI_write(HAL_StatusTypeDef* status, uint8_t* data, uint8_t* size) {
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
 800055e:	60f8      	str	r0, [r7, #12]
 8000560:	60b9      	str	r1, [r7, #8]
 8000562:	607a      	str	r2, [r7, #4]
	// Transmit data array
	SPI_check_CTS(status);
 8000564:	68f8      	ldr	r0, [r7, #12]
 8000566:	f7ff ffd5 	bl	8000514 <SPI_check_CTS>
	if (*status != 0) {return;}
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d110      	bne.n	8000594 <SPI_write+0x3c>
	*status |= HAL_SPI_Transmit(&hspi4, data, *size, 100);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	461a      	mov	r2, r3
 8000578:	2364      	movs	r3, #100	@ 0x64
 800057a:	68b9      	ldr	r1, [r7, #8]
 800057c:	4807      	ldr	r0, [pc, #28]	@ (800059c <SPI_write+0x44>)
 800057e:	f00d fddb 	bl	800e138 <HAL_SPI_Transmit>
 8000582:	4603      	mov	r3, r0
 8000584:	461a      	mov	r2, r3
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	4313      	orrs	r3, r2
 800058c:	b2da      	uxtb	r2, r3
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	701a      	strb	r2, [r3, #0]
 8000592:	e000      	b.n	8000596 <SPI_write+0x3e>
	if (*status != 0) {return;}
 8000594:	bf00      	nop
}
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	2400039c 	.word	0x2400039c

080005a0 <SPI_read>:

// SPI functions
void SPI_read(HAL_StatusTypeDef* status, uint8_t* data, uint8_t* TxSize, uint8_t* RxSize) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af02      	add	r7, sp, #8
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
 80005ac:	603b      	str	r3, [r7, #0]
	for (uint8_t i = 0; i < *TxSize; i++) {
		data_buffer[i] = data[i];
	}
	*/

	SPI_check_CTS(status);
 80005ae:	68f8      	ldr	r0, [r7, #12]
 80005b0:	f7ff ffb0 	bl	8000514 <SPI_check_CTS>
	if (*status != 0) {return;}
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d14a      	bne.n	8000652 <SPI_read+0xb2>
	// Duplicate data array with command and zeros (use static buffer)
	data_buffer[0] = data[0];
	*/

	// Address of requested register
	*status |= HAL_SPI_Transmit(&hspi4, data, *TxSize, 70);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	2346      	movs	r3, #70	@ 0x46
 80005c4:	68b9      	ldr	r1, [r7, #8]
 80005c6:	4826      	ldr	r0, [pc, #152]	@ (8000660 <SPI_read+0xc0>)
 80005c8:	f00d fdb6 	bl	800e138 <HAL_SPI_Transmit>
 80005cc:	4603      	mov	r3, r0
 80005ce:	461a      	mov	r2, r3
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	701a      	strb	r2, [r3, #0]

	// Wait for CTS
	SPI_check_CTS(status);
 80005dc:	68f8      	ldr	r0, [r7, #12]
 80005de:	f7ff ff99 	bl	8000514 <SPI_check_CTS>
	if (*status != 0) {return;}
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d135      	bne.n	8000656 <SPI_read+0xb6>


	// Once approved, prepare for reading (READ_CMD_BUFF)
	data[0] = 0x44;
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	2244      	movs	r2, #68	@ 0x44
 80005ee:	701a      	strb	r2, [r3, #0]
	data[1] = 0xFF;
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	3301      	adds	r3, #1
 80005f4:	22ff      	movs	r2, #255	@ 0xff
 80005f6:	701a      	strb	r2, [r3, #0]

	// Insert padding (Tx delay + CTS byte)
	*RxSize += 2;
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	3302      	adds	r3, #2
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	701a      	strb	r2, [r3, #0]

	// Issue reading command
	*status |= HAL_SPI_TransmitReceive(&hspi4, data, data_buffer, *RxSize, 100);
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	461a      	mov	r2, r3
 800060a:	2364      	movs	r3, #100	@ 0x64
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	4613      	mov	r3, r2
 8000610:	4a14      	ldr	r2, [pc, #80]	@ (8000664 <SPI_read+0xc4>)
 8000612:	68b9      	ldr	r1, [r7, #8]
 8000614:	4812      	ldr	r0, [pc, #72]	@ (8000660 <SPI_read+0xc0>)
 8000616:	f00d ff7d 	bl	800e514 <HAL_SPI_TransmitReceive>
 800061a:	4603      	mov	r3, r0
 800061c:	461a      	mov	r2, r3
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	4313      	orrs	r3, r2
 8000624:	b2da      	uxtb	r2, r3
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	701a      	strb	r2, [r3, #0]


	// Load read data into data array and remove padding at the beginning
	for (uint8_t i = 2; i < *RxSize; i++) {
 800062a:	2302      	movs	r3, #2
 800062c:	75fb      	strb	r3, [r7, #23]
 800062e:	e00a      	b.n	8000646 <SPI_read+0xa6>
		data[i-2] = data_buffer[i];
 8000630:	7dfa      	ldrb	r2, [r7, #23]
 8000632:	7dfb      	ldrb	r3, [r7, #23]
 8000634:	3b02      	subs	r3, #2
 8000636:	68b9      	ldr	r1, [r7, #8]
 8000638:	440b      	add	r3, r1
 800063a:	490a      	ldr	r1, [pc, #40]	@ (8000664 <SPI_read+0xc4>)
 800063c:	5c8a      	ldrb	r2, [r1, r2]
 800063e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 2; i < *RxSize; i++) {
 8000640:	7dfb      	ldrb	r3, [r7, #23]
 8000642:	3301      	adds	r3, #1
 8000644:	75fb      	strb	r3, [r7, #23]
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	7dfa      	ldrb	r2, [r7, #23]
 800064c:	429a      	cmp	r2, r3
 800064e:	d3ef      	bcc.n	8000630 <SPI_read+0x90>
 8000650:	e002      	b.n	8000658 <SPI_read+0xb8>
	if (*status != 0) {return;}
 8000652:	bf00      	nop
 8000654:	e000      	b.n	8000658 <SPI_read+0xb8>
	if (*status != 0) {return;}
 8000656:	bf00      	nop
	}

}
 8000658:	3718      	adds	r7, #24
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	2400039c 	.word	0x2400039c
 8000664:	24000178 	.word	0x24000178

08000668 <PowerReset>:
	}
	strcpy(IDs[1], temp);
	return;
}

void PowerReset(HAL_StatusTypeDef* status) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	uint8_t reg_val;

	// Reset all registers to default state
	I2C_read(status, USB_C_CONTROLLER, RESET, &reg_val);
 8000670:	f107 030f 	add.w	r3, r7, #15
 8000674:	220c      	movs	r2, #12
 8000676:	2144      	movs	r1, #68	@ 0x44
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f7ff fe59 	bl	8000330 <I2C_read>
	reg_val++;
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	3301      	adds	r3, #1
 8000682:	b2db      	uxtb	r3, r3
 8000684:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, RESET, &reg_val);
 8000686:	f107 030f 	add.w	r3, r7, #15
 800068a:	220c      	movs	r2, #12
 800068c:	2144      	movs	r1, #68	@ 0x44
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f7ff fe2c 	bl	80002ec <I2C_write>
}
 8000694:	bf00      	nop
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <PowerInit>:


void PowerInit(HAL_StatusTypeDef* status) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	uint8_t reg_val;

	// Reset all registers
	PowerReset(status);
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f7ff ffdf 	bl	8000668 <PowerReset>

	// Set device as SINK (Disable SRC/SNK toggle and poll CC lines only)
	// CONTROL2:(MODE, TOGGLE)
	I2C_read(status, USB_C_CONTROLLER, CONTROL2, &reg_val);
 80006aa:	f107 030f 	add.w	r3, r7, #15
 80006ae:	2208      	movs	r2, #8
 80006b0:	2144      	movs	r1, #68	@ 0x44
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f7ff fe3c 	bl	8000330 <I2C_read>
	reg_val |= ((1<<2) | 1);
 80006b8:	7bfb      	ldrb	r3, [r7, #15]
 80006ba:	f043 0305 	orr.w	r3, r3, #5
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	73fb      	strb	r3, [r7, #15]
	reg_val &= ~(1<<1);
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	f023 0302 	bic.w	r3, r3, #2
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, CONTROL2, &reg_val);
 80006cc:	f107 030f 	add.w	r3, r7, #15
 80006d0:	2208      	movs	r2, #8
 80006d2:	2144      	movs	r1, #68	@ 0x44
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f7ff fe09 	bl	80002ec <I2C_write>


	// Initially, set current to USB default  (recommended by doc.)
	I2C_read(status, USB_C_CONTROLLER, CONTROL0, &reg_val);
 80006da:	f107 030f 	add.w	r3, r7, #15
 80006de:	2206      	movs	r2, #6
 80006e0:	2144      	movs	r1, #68	@ 0x44
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f7ff fe24 	bl	8000330 <I2C_read>
	reg_val &= ~(1<<3);
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	f023 0308 	bic.w	r3, r3, #8
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	73fb      	strb	r3, [r7, #15]
	reg_val |= (1 << 2);
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	f043 0304 	orr.w	r3, r3, #4
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, CONTROL0, &reg_val);
 80006fc:	f107 030f 	add.w	r3, r7, #15
 8000700:	2206      	movs	r2, #6
 8000702:	2144      	movs	r1, #68	@ 0x44
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	f7ff fdf1 	bl	80002ec <I2C_write>

	// Disable current source(s) at CC lines
	I2C_read(status, USB_C_CONTROLLER, SWITCHES0, &reg_val);
 800070a:	f107 030f 	add.w	r3, r7, #15
 800070e:	2202      	movs	r2, #2
 8000710:	2144      	movs	r1, #68	@ 0x44
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f7ff fe0c 	bl	8000330 <I2C_read>
	reg_val &= ~((1 << 5) | (1 << 4));
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800071e:	b2db      	uxtb	r3, r3
 8000720:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, SWITCHES0, &reg_val);
 8000722:	f107 030f 	add.w	r3, r7, #15
 8000726:	2202      	movs	r2, #2
 8000728:	2144      	movs	r1, #68	@ 0x44
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f7ff fdde 	bl	80002ec <I2C_write>

	// Mask interrupt for current level request
	reg_val = 0xFE;
 8000730:	23fe      	movs	r3, #254	@ 0xfe
 8000732:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, MASK, &reg_val);
 8000734:	f107 030f 	add.w	r3, r7, #15
 8000738:	220a      	movs	r2, #10
 800073a:	2144      	movs	r1, #68	@ 0x44
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f7ff fdd5 	bl	80002ec <I2C_write>

	// Mask interrupt for toggle status
	reg_val = 0xBF;
 8000742:	23bf      	movs	r3, #191	@ 0xbf
 8000744:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, MASKA, &reg_val);
 8000746:	f107 030f 	add.w	r3, r7, #15
 800074a:	220e      	movs	r2, #14
 800074c:	2144      	movs	r1, #68	@ 0x44
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f7ff fdcc 	bl	80002ec <I2C_write>

	// Mask interrupt for GoodCRC acknowledge (BMC is not used)
	reg_val = 0x01;
 8000754:	2301      	movs	r3, #1
 8000756:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, MASKB, &reg_val);
 8000758:	f107 030f 	add.w	r3, r7, #15
 800075c:	220f      	movs	r2, #15
 800075e:	2144      	movs	r1, #68	@ 0x44
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff fdc3 	bl	80002ec <I2C_write>
}
 8000766:	bf00      	nop
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <PowerIncreaseCurrent>:

void PowerIncreaseCurrent(HAL_StatusTypeDef* status) {
 800076e:	b580      	push	{r7, lr}
 8000770:	b084      	sub	sp, #16
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
	uint8_t reg_val;

	I2C_read(status, USB_C_CONTROLLER, CONTROL0, &reg_val);
 8000776:	f107 030f 	add.w	r3, r7, #15
 800077a:	2206      	movs	r2, #6
 800077c:	2144      	movs	r1, #68	@ 0x44
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f7ff fdd6 	bl	8000330 <I2C_read>
	reg_val |= ((1<<3) | (1<<2));
 8000784:	7bfb      	ldrb	r3, [r7, #15]
 8000786:	f043 030c 	orr.w	r3, r3, #12
 800078a:	b2db      	uxtb	r3, r3
 800078c:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, CONTROL0, &reg_val);
 800078e:	f107 030f 	add.w	r3, r7, #15
 8000792:	2206      	movs	r2, #6
 8000794:	2144      	movs	r1, #68	@ 0x44
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f7ff fda8 	bl	80002ec <I2C_write>

	return;
 800079c:	bf00      	nop
}
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <USB_CDC_RxHandler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void USB_CDC_RxHandler(uint8_t *buffer, uint32_t size) {
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
	char cmd_temp = buffer[0];
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	73fb      	strb	r3, [r7, #15]
	if (cmd_temp == '\r') {
 80007b4:	7bfb      	ldrb	r3, [r7, #15]
 80007b6:	2b0d      	cmp	r3, #13
 80007b8:	d019      	beq.n	80007ee <USB_CDC_RxHandler+0x4a>
		return;
	}
	else if (size == 1) {
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d104      	bne.n	80007ca <USB_CDC_RxHandler+0x26>
		cmd_index = (char) buffer[0];
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	781a      	ldrb	r2, [r3, #0]
 80007c4:	4b0d      	ldr	r3, [pc, #52]	@ (80007fc <USB_CDC_RxHandler+0x58>)
 80007c6:	701a      	strb	r2, [r3, #0]
 80007c8:	e012      	b.n	80007f0 <USB_CDC_RxHandler+0x4c>
	}
	else {
		uint8_t first = (uint8_t) buffer[0] - '1';
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	3b31      	subs	r3, #49	@ 0x31
 80007d0:	73bb      	strb	r3, [r7, #14]
		uint8_t second = (uint8_t) buffer[1] - '1';
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	3301      	adds	r3, #1
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	3b31      	subs	r3, #49	@ 0x31
 80007da:	737b      	strb	r3, [r7, #13]

		cam_mode_select = first * 16 + second;
 80007dc:	7bbb      	ldrb	r3, [r7, #14]
 80007de:	011b      	lsls	r3, r3, #4
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	7b7b      	ldrb	r3, [r7, #13]
 80007e4:	4413      	add	r3, r2
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	4b05      	ldr	r3, [pc, #20]	@ (8000800 <USB_CDC_RxHandler+0x5c>)
 80007ea:	701a      	strb	r2, [r3, #0]
 80007ec:	e000      	b.n	80007f0 <USB_CDC_RxHandler+0x4c>
		return;
 80007ee:	bf00      	nop
			default: {
				cam_mode_select = 0xAA; //ERROR
			}
		}*/
	}
}
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	24000000 	.word	0x24000000
 8000800:	24000001 	.word	0x24000001

08000804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800080a:	f000 fbdf 	bl	8000fcc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080e:	f002 fb35 	bl	8002e7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000812:	f000 f847 	bl	80008a4 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000816:	f000 f8c7 	bl	80009a8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081a:	f000 fabf 	bl	8000d9c <MX_GPIO_Init>
  MX_DMA_Init();
 800081e:	f000 fa8d 	bl	8000d3c <MX_DMA_Init>
  MX_DCMI_Init();
 8000822:	f000 f9c1 	bl	8000ba8 <MX_DCMI_Init>
  MX_I2C2_Init();
 8000826:	f000 f9f3 	bl	8000c10 <MX_I2C2_Init>
  MX_ADC1_Init();
 800082a:	f000 f8dd 	bl	80009e8 <MX_ADC1_Init>
  MX_ADC2_Init();
 800082e:	f000 f955 	bl	8000adc <MX_ADC2_Init>
  MX_USB_DEVICE_Init();
 8000832:	f011 ffad 	bl	8012790 <MX_USB_DEVICE_Init>
  MX_SPI4_Init();
 8000836:	f000 fa2b 	bl	8000c90 <MX_SPI4_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  setup(&status, &error_index);
 800083a:	4912      	ldr	r1, [pc, #72]	@ (8000884 <main+0x80>)
 800083c:	4812      	ldr	r0, [pc, #72]	@ (8000888 <main+0x84>)
 800083e:	f001 fb26 	bl	8001e8e <setup>
#ifdef GROUND_STATION
  cmd_main_win();
#endif
  //HAL_NVIC_EnableIRQ(nIRQ_EXTI_IRQn);
  while (1) {
	  if (radio_nirq) {
 8000842:	4b12      	ldr	r3, [pc, #72]	@ (800088c <main+0x88>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d00a      	beq.n	8000860 <main+0x5c>
		  // Handling of the packet IRQ
		  //HAL_NVIC_DisableIRQ(nIRQ_EXTI_IRQn);
		  nirq_handler(&status, &error_index, &ping_in_progress, &ack, &img_progress);
 800084a:	4b11      	ldr	r3, [pc, #68]	@ (8000890 <main+0x8c>)
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	4b11      	ldr	r3, [pc, #68]	@ (8000894 <main+0x90>)
 8000850:	4a11      	ldr	r2, [pc, #68]	@ (8000898 <main+0x94>)
 8000852:	490c      	ldr	r1, [pc, #48]	@ (8000884 <main+0x80>)
 8000854:	480c      	ldr	r0, [pc, #48]	@ (8000888 <main+0x84>)
 8000856:	f001 fca3 	bl	80021a0 <nirq_handler>
		  //HAL_NVIC_EnableIRQ(nIRQ_EXTI_IRQn);
		  radio_nirq = 0;
 800085a:	4b0c      	ldr	r3, [pc, #48]	@ (800088c <main+0x88>)
 800085c:	2200      	movs	r2, #0
 800085e:	701a      	strb	r2, [r3, #0]
	  }
	  if (img_flag && ack) {
 8000860:	4b0e      	ldr	r3, [pc, #56]	@ (800089c <main+0x98>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d0ec      	beq.n	8000842 <main+0x3e>
 8000868:	4b0a      	ldr	r3, [pc, #40]	@ (8000894 <main+0x90>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d0e8      	beq.n	8000842 <main+0x3e>
		  transmit_img(&status, &error_index, &img_progress, &img_size);
 8000870:	4b0b      	ldr	r3, [pc, #44]	@ (80008a0 <main+0x9c>)
 8000872:	4a07      	ldr	r2, [pc, #28]	@ (8000890 <main+0x8c>)
 8000874:	4903      	ldr	r1, [pc, #12]	@ (8000884 <main+0x80>)
 8000876:	4804      	ldr	r0, [pc, #16]	@ (8000888 <main+0x84>)
 8000878:	f001 fc4e 	bl	8002118 <transmit_img>
		  ack = 0;
 800087c:	4b05      	ldr	r3, [pc, #20]	@ (8000894 <main+0x90>)
 800087e:	2200      	movs	r2, #0
 8000880:	701a      	strb	r2, [r3, #0]
	  if (radio_nirq) {
 8000882:	e7de      	b.n	8000842 <main+0x3e>
 8000884:	24000515 	.word	0x24000515
 8000888:	24000514 	.word	0x24000514
 800088c:	24000516 	.word	0x24000516
 8000890:	24000524 	.word	0x24000524
 8000894:	24000528 	.word	0x24000528
 8000898:	24000517 	.word	0x24000517
 800089c:	24000520 	.word	0x24000520
 80008a0:	2400051c 	.word	0x2400051c

080008a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b09c      	sub	sp, #112	@ 0x70
 80008a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ae:	224c      	movs	r2, #76	@ 0x4c
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f012 fdb0 	bl	8013418 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	2220      	movs	r2, #32
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f012 fdaa 	bl	8013418 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 80008c4:	4b36      	ldr	r3, [pc, #216]	@ (80009a0 <SystemClock_Config+0xfc>)
 80008c6:	f04f 32ff 	mov.w	r2, #4294967295
 80008ca:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008ce:	2002      	movs	r0, #2
 80008d0:	f009 fea8 	bl	800a624 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008d4:	2300      	movs	r3, #0
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	4b32      	ldr	r3, [pc, #200]	@ (80009a4 <SystemClock_Config+0x100>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	4a31      	ldr	r2, [pc, #196]	@ (80009a4 <SystemClock_Config+0x100>)
 80008de:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008e2:	6193      	str	r3, [r2, #24]
 80008e4:	4b2f      	ldr	r3, [pc, #188]	@ (80009a4 <SystemClock_Config+0x100>)
 80008e6:	699b      	ldr	r3, [r3, #24]
 80008e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008f0:	bf00      	nop
 80008f2:	4b2c      	ldr	r3, [pc, #176]	@ (80009a4 <SystemClock_Config+0x100>)
 80008f4:	699b      	ldr	r3, [r3, #24]
 80008f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008fe:	d1f8      	bne.n	80008f2 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000900:	2301      	movs	r3, #1
 8000902:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000904:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000908:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800090a:	2302      	movs	r3, #2
 800090c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800090e:	2302      	movs	r3, #2
 8000910:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000912:	2301      	movs	r3, #1
 8000914:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000916:	2346      	movs	r3, #70	@ 0x46
 8000918:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800091a:	2302      	movs	r3, #2
 800091c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 25;
 800091e:	2319      	movs	r3, #25
 8000920:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 8000922:	2304      	movs	r3, #4
 8000924:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000926:	230c      	movs	r3, #12
 8000928:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800092a:	2300      	movs	r3, #0
 800092c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000932:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000936:	4618      	mov	r0, r3
 8000938:	f009 febe 	bl	800a6b8 <HAL_RCC_OscConfig>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000942:	f000 fb6f 	bl	8001024 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000946:	233f      	movs	r3, #63	@ 0x3f
 8000948:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800094a:	2303      	movs	r3, #3
 800094c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000956:	2340      	movs	r3, #64	@ 0x40
 8000958:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800095a:	2340      	movs	r3, #64	@ 0x40
 800095c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800095e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000962:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000964:	2340      	movs	r3, #64	@ 0x40
 8000966:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	2106      	movs	r1, #6
 800096c:	4618      	mov	r0, r3
 800096e:	f00a fad5 	bl	800af1c <HAL_RCC_ClockConfig>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000978:	f000 fb54 	bl	8001024 <Error_Handler>
  }
  __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800097c:	4b08      	ldr	r3, [pc, #32]	@ (80009a0 <SystemClock_Config+0xfc>)
 800097e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000980:	4a07      	ldr	r2, [pc, #28]	@ (80009a0 <SystemClock_Config+0xfc>)
 8000982:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000986:	62d3      	str	r3, [r2, #44]	@ 0x2c
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLL1QCLK, RCC_MCODIV_1);
 8000988:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800098c:	f44f 0140 	mov.w	r1, #12582912	@ 0xc00000
 8000990:	2000      	movs	r0, #0
 8000992:	f00a fc79 	bl	800b288 <HAL_RCC_MCOConfig>
}
 8000996:	bf00      	nop
 8000998:	3770      	adds	r7, #112	@ 0x70
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	58024400 	.word	0x58024400
 80009a4:	58024800 	.word	0x58024800

080009a8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b0b0      	sub	sp, #192	@ 0xc0
 80009ac:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009ae:	463b      	mov	r3, r7
 80009b0:	22c0      	movs	r2, #192	@ 0xc0
 80009b2:	2100      	movs	r1, #0
 80009b4:	4618      	mov	r0, r3
 80009b6:	f012 fd2f 	bl	8013418 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 80009ba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80009be:	f04f 0300 	mov.w	r3, #0
 80009c2:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSE;
 80009c6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80009ca:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009cc:	463b      	mov	r3, r7
 80009ce:	4618      	mov	r0, r3
 80009d0:	f00a fe84 	bl	800b6dc <HAL_RCCEx_PeriphCLKConfig>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <PeriphCommonClock_Config+0x36>
  {
    Error_Handler();
 80009da:	f000 fb23 	bl	8001024 <Error_Handler>
  }
}
 80009de:	bf00      	nop
 80009e0:	37c0      	adds	r7, #192	@ 0xc0
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
	...

080009e8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b08a      	sub	sp, #40	@ 0x28
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	2200      	movs	r2, #0
 80009f4:	601a      	str	r2, [r3, #0]
 80009f6:	605a      	str	r2, [r3, #4]
 80009f8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80009fa:	463b      	mov	r3, r7
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]
 8000a08:	615a      	str	r2, [r3, #20]
 8000a0a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a0c:	4b30      	ldr	r3, [pc, #192]	@ (8000ad0 <MX_ADC1_Init+0xe8>)
 8000a0e:	4a31      	ldr	r2, [pc, #196]	@ (8000ad4 <MX_ADC1_Init+0xec>)
 8000a10:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000a12:	4b2f      	ldr	r3, [pc, #188]	@ (8000ad0 <MX_ADC1_Init+0xe8>)
 8000a14:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000a18:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a1a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ad0 <MX_ADC1_Init+0xe8>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a20:	4b2b      	ldr	r3, [pc, #172]	@ (8000ad0 <MX_ADC1_Init+0xe8>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a26:	4b2a      	ldr	r3, [pc, #168]	@ (8000ad0 <MX_ADC1_Init+0xe8>)
 8000a28:	2204      	movs	r2, #4
 8000a2a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a2c:	4b28      	ldr	r3, [pc, #160]	@ (8000ad0 <MX_ADC1_Init+0xe8>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a32:	4b27      	ldr	r3, [pc, #156]	@ (8000ad0 <MX_ADC1_Init+0xe8>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000a38:	4b25      	ldr	r3, [pc, #148]	@ (8000ad0 <MX_ADC1_Init+0xe8>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a3e:	4b24      	ldr	r3, [pc, #144]	@ (8000ad0 <MX_ADC1_Init+0xe8>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a44:	4b22      	ldr	r3, [pc, #136]	@ (8000ad0 <MX_ADC1_Init+0xe8>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a4a:	4b21      	ldr	r3, [pc, #132]	@ (8000ad0 <MX_ADC1_Init+0xe8>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a50:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad0 <MX_ADC1_Init+0xe8>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a56:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad0 <MX_ADC1_Init+0xe8>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad0 <MX_ADC1_Init+0xe8>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a62:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad0 <MX_ADC1_Init+0xe8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a6a:	4819      	ldr	r0, [pc, #100]	@ (8000ad0 <MX_ADC1_Init+0xe8>)
 8000a6c:	f002 fc7a 	bl	8003364 <HAL_ADC_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000a76:	f000 fad5 	bl	8001024 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a7e:	f107 031c 	add.w	r3, r7, #28
 8000a82:	4619      	mov	r1, r3
 8000a84:	4812      	ldr	r0, [pc, #72]	@ (8000ad0 <MX_ADC1_Init+0xe8>)
 8000a86:	f003 f939 	bl	8003cfc <HAL_ADCEx_MultiModeConfigChannel>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000a90:	f000 fac8 	bl	8001024 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000a94:	4b10      	ldr	r3, [pc, #64]	@ (8000ad8 <MX_ADC1_Init+0xf0>)
 8000a96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a98:	2306      	movs	r3, #6
 8000a9a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000aa0:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000aa4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000aa6:	2304      	movs	r3, #4
 8000aa8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4806      	ldr	r0, [pc, #24]	@ (8000ad0 <MX_ADC1_Init+0xe8>)
 8000ab8:	f002 fdae 	bl	8003618 <HAL_ADC_ConfigChannel>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000ac2:	f000 faaf 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ac6:	bf00      	nop
 8000ac8:	3728      	adds	r7, #40	@ 0x28
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	240001b8 	.word	0x240001b8
 8000ad4:	40022000 	.word	0x40022000
 8000ad8:	25b00200 	.word	0x25b00200

08000adc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b088      	sub	sp, #32
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ae2:	1d3b      	adds	r3, r7, #4
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
 8000af0:	615a      	str	r2, [r3, #20]
 8000af2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000af4:	4b29      	ldr	r3, [pc, #164]	@ (8000b9c <MX_ADC2_Init+0xc0>)
 8000af6:	4a2a      	ldr	r2, [pc, #168]	@ (8000ba0 <MX_ADC2_Init+0xc4>)
 8000af8:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000afa:	4b28      	ldr	r3, [pc, #160]	@ (8000b9c <MX_ADC2_Init+0xc0>)
 8000afc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000b00:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000b02:	4b26      	ldr	r3, [pc, #152]	@ (8000b9c <MX_ADC2_Init+0xc0>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b08:	4b24      	ldr	r3, [pc, #144]	@ (8000b9c <MX_ADC2_Init+0xc0>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b0e:	4b23      	ldr	r3, [pc, #140]	@ (8000b9c <MX_ADC2_Init+0xc0>)
 8000b10:	2204      	movs	r2, #4
 8000b12:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000b14:	4b21      	ldr	r3, [pc, #132]	@ (8000b9c <MX_ADC2_Init+0xc0>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000b1a:	4b20      	ldr	r3, [pc, #128]	@ (8000b9c <MX_ADC2_Init+0xc0>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000b20:	4b1e      	ldr	r3, [pc, #120]	@ (8000b9c <MX_ADC2_Init+0xc0>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000b26:	4b1d      	ldr	r3, [pc, #116]	@ (8000b9c <MX_ADC2_Init+0xc0>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b9c <MX_ADC2_Init+0xc0>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b32:	4b1a      	ldr	r3, [pc, #104]	@ (8000b9c <MX_ADC2_Init+0xc0>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b38:	4b18      	ldr	r3, [pc, #96]	@ (8000b9c <MX_ADC2_Init+0xc0>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b3e:	4b17      	ldr	r3, [pc, #92]	@ (8000b9c <MX_ADC2_Init+0xc0>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b44:	4b15      	ldr	r3, [pc, #84]	@ (8000b9c <MX_ADC2_Init+0xc0>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000b4a:	4b14      	ldr	r3, [pc, #80]	@ (8000b9c <MX_ADC2_Init+0xc0>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000b52:	4812      	ldr	r0, [pc, #72]	@ (8000b9c <MX_ADC2_Init+0xc0>)
 8000b54:	f002 fc06 	bl	8003364 <HAL_ADC_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000b5e:	f000 fa61 	bl	8001024 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000b62:	4b10      	ldr	r3, [pc, #64]	@ (8000ba4 <MX_ADC2_Init+0xc8>)
 8000b64:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b66:	2306      	movs	r3, #6
 8000b68:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b6e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000b72:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b74:	2304      	movs	r3, #4
 8000b76:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	4619      	mov	r1, r3
 8000b84:	4805      	ldr	r0, [pc, #20]	@ (8000b9c <MX_ADC2_Init+0xc0>)
 8000b86:	f002 fd47 	bl	8003618 <HAL_ADC_ConfigChannel>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000b90:	f000 fa48 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000b94:	bf00      	nop
 8000b96:	3720      	adds	r7, #32
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	2400021c 	.word	0x2400021c
 8000ba0:	40022100 	.word	0x40022100
 8000ba4:	21800100 	.word	0x21800100

08000ba8 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000bac:	4b16      	ldr	r3, [pc, #88]	@ (8000c08 <MX_DCMI_Init+0x60>)
 8000bae:	4a17      	ldr	r2, [pc, #92]	@ (8000c0c <MX_DCMI_Init+0x64>)
 8000bb0:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000bb2:	4b15      	ldr	r3, [pc, #84]	@ (8000c08 <MX_DCMI_Init+0x60>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000bb8:	4b13      	ldr	r3, [pc, #76]	@ (8000c08 <MX_DCMI_Init+0x60>)
 8000bba:	2220      	movs	r2, #32
 8000bbc:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000bbe:	4b12      	ldr	r3, [pc, #72]	@ (8000c08 <MX_DCMI_Init+0x60>)
 8000bc0:	2280      	movs	r2, #128	@ 0x80
 8000bc2:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000bc4:	4b10      	ldr	r3, [pc, #64]	@ (8000c08 <MX_DCMI_Init+0x60>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000bca:	4b0f      	ldr	r3, [pc, #60]	@ (8000c08 <MX_DCMI_Init+0x60>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000bd0:	4b0d      	ldr	r3, [pc, #52]	@ (8000c08 <MX_DCMI_Init+0x60>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c08 <MX_DCMI_Init+0x60>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8000c08 <MX_DCMI_Init+0x60>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000be2:	4b09      	ldr	r3, [pc, #36]	@ (8000c08 <MX_DCMI_Init+0x60>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000be8:	4b07      	ldr	r3, [pc, #28]	@ (8000c08 <MX_DCMI_Init+0x60>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000bee:	4b06      	ldr	r3, [pc, #24]	@ (8000c08 <MX_DCMI_Init+0x60>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000bf4:	4804      	ldr	r0, [pc, #16]	@ (8000c08 <MX_DCMI_Init+0x60>)
 8000bf6:	f003 faa5 	bl	8004144 <HAL_DCMI_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000c00:	f000 fa10 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	24000280 	.word	0x24000280
 8000c0c:	48020000 	.word	0x48020000

08000c10 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c14:	4b1b      	ldr	r3, [pc, #108]	@ (8000c84 <MX_I2C2_Init+0x74>)
 8000c16:	4a1c      	ldr	r2, [pc, #112]	@ (8000c88 <MX_I2C2_Init+0x78>)
 8000c18:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B0CCFF;
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8000c84 <MX_I2C2_Init+0x74>)
 8000c1c:	4a1b      	ldr	r2, [pc, #108]	@ (8000c8c <MX_I2C2_Init+0x7c>)
 8000c1e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c20:	4b18      	ldr	r3, [pc, #96]	@ (8000c84 <MX_I2C2_Init+0x74>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c26:	4b17      	ldr	r3, [pc, #92]	@ (8000c84 <MX_I2C2_Init+0x74>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c2c:	4b15      	ldr	r3, [pc, #84]	@ (8000c84 <MX_I2C2_Init+0x74>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c32:	4b14      	ldr	r3, [pc, #80]	@ (8000c84 <MX_I2C2_Init+0x74>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c38:	4b12      	ldr	r3, [pc, #72]	@ (8000c84 <MX_I2C2_Init+0x74>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	@ (8000c84 <MX_I2C2_Init+0x74>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	@ (8000c84 <MX_I2C2_Init+0x74>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c4a:	480e      	ldr	r0, [pc, #56]	@ (8000c84 <MX_I2C2_Init+0x74>)
 8000c4c:	f007 fafa 	bl	8008244 <HAL_I2C_Init>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d001      	beq.n	8000c5a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000c56:	f000 f9e5 	bl	8001024 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4809      	ldr	r0, [pc, #36]	@ (8000c84 <MX_I2C2_Init+0x74>)
 8000c5e:	f008 f9a9 	bl	8008fb4 <HAL_I2CEx_ConfigAnalogFilter>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000c68:	f000 f9dc 	bl	8001024 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4805      	ldr	r0, [pc, #20]	@ (8000c84 <MX_I2C2_Init+0x74>)
 8000c70:	f008 f9eb 	bl	800904a <HAL_I2CEx_ConfigDigitalFilter>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000c7a:	f000 f9d3 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	24000348 	.word	0x24000348
 8000c88:	40005800 	.word	0x40005800
 8000c8c:	20b0ccff 	.word	0x20b0ccff

08000c90 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000c94:	4b27      	ldr	r3, [pc, #156]	@ (8000d34 <MX_SPI4_Init+0xa4>)
 8000c96:	4a28      	ldr	r2, [pc, #160]	@ (8000d38 <MX_SPI4_Init+0xa8>)
 8000c98:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000c9a:	4b26      	ldr	r3, [pc, #152]	@ (8000d34 <MX_SPI4_Init+0xa4>)
 8000c9c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ca0:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000ca2:	4b24      	ldr	r3, [pc, #144]	@ (8000d34 <MX_SPI4_Init+0xa4>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ca8:	4b22      	ldr	r3, [pc, #136]	@ (8000d34 <MX_SPI4_Init+0xa4>)
 8000caa:	2207      	movs	r2, #7
 8000cac:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cae:	4b21      	ldr	r3, [pc, #132]	@ (8000d34 <MX_SPI4_Init+0xa4>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cb4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d34 <MX_SPI4_Init+0xa4>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000cba:	4b1e      	ldr	r3, [pc, #120]	@ (8000d34 <MX_SPI4_Init+0xa4>)
 8000cbc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000cc0:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d34 <MX_SPI4_Init+0xa4>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d34 <MX_SPI4_Init+0xa4>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cce:	4b19      	ldr	r3, [pc, #100]	@ (8000d34 <MX_SPI4_Init+0xa4>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cd4:	4b17      	ldr	r3, [pc, #92]	@ (8000d34 <MX_SPI4_Init+0xa4>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000cda:	4b16      	ldr	r3, [pc, #88]	@ (8000d34 <MX_SPI4_Init+0xa4>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ce0:	4b14      	ldr	r3, [pc, #80]	@ (8000d34 <MX_SPI4_Init+0xa4>)
 8000ce2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ce6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000ce8:	4b12      	ldr	r3, [pc, #72]	@ (8000d34 <MX_SPI4_Init+0xa4>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000cee:	4b11      	ldr	r3, [pc, #68]	@ (8000d34 <MX_SPI4_Init+0xa4>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d34 <MX_SPI4_Init+0xa4>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000d34 <MX_SPI4_Init+0xa4>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d00:	4b0c      	ldr	r3, [pc, #48]	@ (8000d34 <MX_SPI4_Init+0xa4>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d06:	4b0b      	ldr	r3, [pc, #44]	@ (8000d34 <MX_SPI4_Init+0xa4>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d0c:	4b09      	ldr	r3, [pc, #36]	@ (8000d34 <MX_SPI4_Init+0xa4>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d12:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <MX_SPI4_Init+0xa4>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d18:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <MX_SPI4_Init+0xa4>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000d1e:	4805      	ldr	r0, [pc, #20]	@ (8000d34 <MX_SPI4_Init+0xa4>)
 8000d20:	f00d f8e6 	bl	800def0 <HAL_SPI_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000d2a:	f000 f97b 	bl	8001024 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	2400039c 	.word	0x2400039c
 8000d38:	40013400 	.word	0x40013400

08000d3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d42:	4b15      	ldr	r3, [pc, #84]	@ (8000d98 <MX_DMA_Init+0x5c>)
 8000d44:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000d48:	4a13      	ldr	r2, [pc, #76]	@ (8000d98 <MX_DMA_Init+0x5c>)
 8000d4a:	f043 0301 	orr.w	r3, r3, #1
 8000d4e:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000d52:	4b11      	ldr	r3, [pc, #68]	@ (8000d98 <MX_DMA_Init+0x5c>)
 8000d54:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000d58:	f003 0301 	and.w	r3, r3, #1
 8000d5c:	607b      	str	r3, [r7, #4]
 8000d5e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2100      	movs	r1, #0
 8000d64:	200b      	movs	r0, #11
 8000d66:	f003 f940 	bl	8003fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d6a:	200b      	movs	r0, #11
 8000d6c:	f003 f957 	bl	800401e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2100      	movs	r1, #0
 8000d74:	200c      	movs	r0, #12
 8000d76:	f003 f938 	bl	8003fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d7a:	200c      	movs	r0, #12
 8000d7c:	f003 f94f 	bl	800401e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2100      	movs	r1, #0
 8000d84:	200d      	movs	r0, #13
 8000d86:	f003 f930 	bl	8003fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d8a:	200d      	movs	r0, #13
 8000d8c:	f003 f947 	bl	800401e <HAL_NVIC_EnableIRQ>

}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	58024400 	.word	0x58024400

08000d9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b08c      	sub	sp, #48	@ 0x30
 8000da0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da2:	f107 031c 	add.w	r3, r7, #28
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
 8000db0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000db2:	4b77      	ldr	r3, [pc, #476]	@ (8000f90 <MX_GPIO_Init+0x1f4>)
 8000db4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000db8:	4a75      	ldr	r2, [pc, #468]	@ (8000f90 <MX_GPIO_Init+0x1f4>)
 8000dba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dbe:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000dc2:	4b73      	ldr	r3, [pc, #460]	@ (8000f90 <MX_GPIO_Init+0x1f4>)
 8000dc4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000dc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dcc:	61bb      	str	r3, [r7, #24]
 8000dce:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd0:	4b6f      	ldr	r3, [pc, #444]	@ (8000f90 <MX_GPIO_Init+0x1f4>)
 8000dd2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000dd6:	4a6e      	ldr	r2, [pc, #440]	@ (8000f90 <MX_GPIO_Init+0x1f4>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000de0:	4b6b      	ldr	r3, [pc, #428]	@ (8000f90 <MX_GPIO_Init+0x1f4>)
 8000de2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	617b      	str	r3, [r7, #20]
 8000dec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dee:	4b68      	ldr	r3, [pc, #416]	@ (8000f90 <MX_GPIO_Init+0x1f4>)
 8000df0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000df4:	4a66      	ldr	r2, [pc, #408]	@ (8000f90 <MX_GPIO_Init+0x1f4>)
 8000df6:	f043 0304 	orr.w	r3, r3, #4
 8000dfa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000dfe:	4b64      	ldr	r3, [pc, #400]	@ (8000f90 <MX_GPIO_Init+0x1f4>)
 8000e00:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e04:	f003 0304 	and.w	r3, r3, #4
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0c:	4b60      	ldr	r3, [pc, #384]	@ (8000f90 <MX_GPIO_Init+0x1f4>)
 8000e0e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e12:	4a5f      	ldr	r2, [pc, #380]	@ (8000f90 <MX_GPIO_Init+0x1f4>)
 8000e14:	f043 0302 	orr.w	r3, r3, #2
 8000e18:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e1c:	4b5c      	ldr	r3, [pc, #368]	@ (8000f90 <MX_GPIO_Init+0x1f4>)
 8000e1e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e22:	f003 0302 	and.w	r3, r3, #2
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e2a:	4b59      	ldr	r3, [pc, #356]	@ (8000f90 <MX_GPIO_Init+0x1f4>)
 8000e2c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e30:	4a57      	ldr	r2, [pc, #348]	@ (8000f90 <MX_GPIO_Init+0x1f4>)
 8000e32:	f043 0310 	orr.w	r3, r3, #16
 8000e36:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e3a:	4b55      	ldr	r3, [pc, #340]	@ (8000f90 <MX_GPIO_Init+0x1f4>)
 8000e3c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e40:	f003 0310 	and.w	r3, r3, #16
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e48:	4b51      	ldr	r3, [pc, #324]	@ (8000f90 <MX_GPIO_Init+0x1f4>)
 8000e4a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e4e:	4a50      	ldr	r2, [pc, #320]	@ (8000f90 <MX_GPIO_Init+0x1f4>)
 8000e50:	f043 0308 	orr.w	r3, r3, #8
 8000e54:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000e58:	4b4d      	ldr	r3, [pc, #308]	@ (8000f90 <MX_GPIO_Init+0x1f4>)
 8000e5a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000e5e:	f003 0308 	and.w	r3, r3, #8
 8000e62:	607b      	str	r3, [r7, #4]
 8000e64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_3V3_GPIO_Port, DCMI_3V3_Pin, GPIO_PIN_RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000e6c:	4849      	ldr	r0, [pc, #292]	@ (8000f94 <MX_GPIO_Init+0x1f8>)
 8000e6e:	f007 f9b5 	bl	80081dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SDN_GPIO_Port, SDN_Pin, GPIO_PIN_RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e78:	4847      	ldr	r0, [pc, #284]	@ (8000f98 <MX_GPIO_Init+0x1fc>)
 8000e7a:	f007 f9af 	bl	80081dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_RST_GPIO_Port, DCMI_RST_Pin, GPIO_PIN_RESET);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e84:	4845      	ldr	r0, [pc, #276]	@ (8000f9c <MX_GPIO_Init+0x200>)
 8000e86:	f007 f9a9 	bl	80081dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWDN_GPIO_Port, DCMI_PWDN_Pin, GPIO_PIN_SET);
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e90:	4842      	ldr	r0, [pc, #264]	@ (8000f9c <MX_GPIO_Init+0x200>)
 8000e92:	f007 f9a3 	bl	80081dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : INT_N_Pin */
  GPIO_InitStruct.Pin = INT_N_Pin;
 8000e96:	2380      	movs	r3, #128	@ 0x80
 8000e98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(INT_N_GPIO_Port, &GPIO_InitStruct);
 8000ea2:	f107 031c 	add.w	r3, r7, #28
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	483d      	ldr	r0, [pc, #244]	@ (8000fa0 <MX_GPIO_Init+0x204>)
 8000eaa:	f006 ffcf 	bl	8007e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : FLT__Pin */
  GPIO_InitStruct.Pin = FLT__Pin;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(FLT__GPIO_Port, &GPIO_InitStruct);
 8000eba:	f107 031c 	add.w	r3, r7, #28
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	4835      	ldr	r0, [pc, #212]	@ (8000f98 <MX_GPIO_Init+0x1fc>)
 8000ec2:	f006 ffc3 	bl	8007e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : COMMAND_DONE_Pin */
  GPIO_InitStruct.Pin = COMMAND_DONE_Pin;
 8000ec6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000eca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COMMAND_DONE_GPIO_Port, &GPIO_InitStruct);
 8000ed4:	f107 031c 	add.w	r3, r7, #28
 8000ed8:	4619      	mov	r1, r3
 8000eda:	482e      	ldr	r0, [pc, #184]	@ (8000f94 <MX_GPIO_Init+0x1f8>)
 8000edc:	f006 ffb6 	bl	8007e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : nIRQ_Pin */
  GPIO_InitStruct.Pin = nIRQ_Pin;
 8000ee0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ee4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ee6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000eea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(nIRQ_GPIO_Port, &GPIO_InitStruct);
 8000ef0:	f107 031c 	add.w	r3, r7, #28
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4827      	ldr	r0, [pc, #156]	@ (8000f94 <MX_GPIO_Init+0x1f8>)
 8000ef8:	f006 ffa8 	bl	8007e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_3V3_Pin */
  GPIO_InitStruct.Pin = DCMI_3V3_Pin;
 8000efc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f02:	2301      	movs	r3, #1
 8000f04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(DCMI_3V3_GPIO_Port, &GPIO_InitStruct);
 8000f0e:	f107 031c 	add.w	r3, r7, #28
 8000f12:	4619      	mov	r1, r3
 8000f14:	481f      	ldr	r0, [pc, #124]	@ (8000f94 <MX_GPIO_Init+0x1f8>)
 8000f16:	f006 ff99 	bl	8007e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDN_Pin */
  GPIO_InitStruct.Pin = SDN_Pin;
 8000f1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f20:	2301      	movs	r3, #1
 8000f22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f24:	2302      	movs	r3, #2
 8000f26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SDN_GPIO_Port, &GPIO_InitStruct);
 8000f2c:	f107 031c 	add.w	r3, r7, #28
 8000f30:	4619      	mov	r1, r3
 8000f32:	4819      	ldr	r0, [pc, #100]	@ (8000f98 <MX_GPIO_Init+0x1fc>)
 8000f34:	f006 ff8a 	bl	8007e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_RST_Pin DCMI_PWDN_Pin */
  GPIO_InitStruct.Pin = DCMI_RST_Pin|DCMI_PWDN_Pin;
 8000f38:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f46:	2303      	movs	r3, #3
 8000f48:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f4a:	f107 031c 	add.w	r3, r7, #28
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4812      	ldr	r0, [pc, #72]	@ (8000f9c <MX_GPIO_Init+0x200>)
 8000f52:	f006 ff7b 	bl	8007e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_MCLK_Pin */
  GPIO_InitStruct.Pin = DCMI_MCLK_Pin;
 8000f56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f64:	2303      	movs	r3, #3
 8000f66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DCMI_MCLK_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	4619      	mov	r1, r3
 8000f72:	480b      	ldr	r0, [pc, #44]	@ (8000fa0 <MX_GPIO_Init+0x204>)
 8000f74:	f006 ff6a 	bl	8007e4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(nIRQ_EXTI_IRQn, 0, 0);
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	2028      	movs	r0, #40	@ 0x28
 8000f7e:	f003 f834 	bl	8003fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(nIRQ_EXTI_IRQn);
 8000f82:	2028      	movs	r0, #40	@ 0x28
 8000f84:	f003 f84b 	bl	800401e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f88:	bf00      	nop
 8000f8a:	3730      	adds	r7, #48	@ 0x30
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	58024400 	.word	0x58024400
 8000f94:	58021000 	.word	0x58021000
 8000f98:	58020400 	.word	0x58020400
 8000f9c:	58020c00 	.word	0x58020c00
 8000fa0:	58020000 	.word	0x58020000

08000fa4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b083      	sub	sp, #12
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_10) {
 8000fae:	88fb      	ldrh	r3, [r7, #6]
 8000fb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fb4:	d102      	bne.n	8000fbc <HAL_GPIO_EXTI_Callback+0x18>
    radio_nirq = 1;
 8000fb6:	4b04      	ldr	r3, [pc, #16]	@ (8000fc8 <HAL_GPIO_EXTI_Callback+0x24>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	701a      	strb	r2, [r3, #0]
  }
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	24000516 	.word	0x24000516

08000fcc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000fde:	f003 f839 	bl	8004054 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000fee:	231f      	movs	r3, #31
 8000ff0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000ff2:	2387      	movs	r3, #135	@ 0x87
 8000ff4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000ffe:	2301      	movs	r3, #1
 8001000:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001002:	2301      	movs	r3, #1
 8001004:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001006:	2300      	movs	r3, #0
 8001008:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800100a:	2300      	movs	r3, #0
 800100c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800100e:	463b      	mov	r3, r7
 8001010:	4618      	mov	r0, r3
 8001012:	f003 f857 	bl	80040c4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001016:	2004      	movs	r0, #4
 8001018:	f003 f834 	bl	8004084 <HAL_MPU_Enable>

}
 800101c:	bf00      	nop
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001028:	b672      	cpsid	i
}
 800102a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <Error_Handler+0x8>

08001030 <camera_init>:
	status |= HAL_I2C_Master_Receive(p_I2C, CAM_READ, data, 1, 100);
	return status;
}
*/

void camera_init(HAL_StatusTypeDef* status, uint8_t* mode){
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	6039      	str	r1, [r7, #0]
	//uint8_t read_value;



	// Power-up camera
	HAL_GPIO_WritePin(CAM_PWR_PORT, CAM_PWR_PIN, GPIO_PIN_SET);
 800103a:	2201      	movs	r2, #1
 800103c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001040:	48b6      	ldr	r0, [pc, #728]	@ (800131c <camera_init+0x2ec>)
 8001042:	f007 f8cb 	bl	80081dc <HAL_GPIO_WritePin>
	HAL_Delay(300);
 8001046:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800104a:	f001 ffa9 	bl	8002fa0 <HAL_Delay>

	// Enable camera
	HAL_GPIO_WritePin(CAM_PWDN_PORT, CAM_PWDN_PIN, GPIO_PIN_RESET);
 800104e:	2200      	movs	r2, #0
 8001050:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001054:	48b2      	ldr	r0, [pc, #712]	@ (8001320 <camera_init+0x2f0>)
 8001056:	f007 f8c1 	bl	80081dc <HAL_GPIO_WritePin>
	HAL_Delay(300);
 800105a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800105e:	f001 ff9f 	bl	8002fa0 <HAL_Delay>

	// Reset camera
	HAL_GPIO_WritePin(CAM_RESET_PORT, CAM_RESET_PIN, GPIO_PIN_RESET);
 8001062:	2200      	movs	r2, #0
 8001064:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001068:	48ad      	ldr	r0, [pc, #692]	@ (8001320 <camera_init+0x2f0>)
 800106a:	f007 f8b7 	bl	80081dc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800106e:	2064      	movs	r0, #100	@ 0x64
 8001070:	f001 ff96 	bl	8002fa0 <HAL_Delay>
	HAL_GPIO_WritePin(CAM_RESET_PORT, CAM_RESET_PIN, GPIO_PIN_SET);
 8001074:	2201      	movs	r2, #1
 8001076:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800107a:	48a9      	ldr	r0, [pc, #676]	@ (8001320 <camera_init+0x2f0>)
 800107c:	f007 f8ae 	bl	80081dc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001080:	2064      	movs	r0, #100	@ 0x64
 8001082:	f001 ff8d 	bl	8002fa0 <HAL_Delay>


	// Initialization common for all modes
	uint8_t data = 0x80;
 8001086:	2380      	movs	r3, #128	@ 0x80
 8001088:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 800108a:	f107 030f 	add.w	r3, r7, #15
 800108e:	2212      	movs	r2, #18
 8001090:	2142      	movs	r1, #66	@ 0x42
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff f92a 	bl	80002ec <I2C_write>
	//status = camera_write(CAM_COM7, 0x80);			// Reset all registers
	I2C_read(status, CAM_WRITE, CAM_CLKRC, &data);
 8001098:	f107 030f 	add.w	r3, r7, #15
 800109c:	2211      	movs	r2, #17
 800109e:	2142      	movs	r1, #66	@ 0x42
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff f945 	bl	8000330 <I2C_read>
	data |= 0b1;
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, CAM_WRITE, CAM_CLKRC, &data);
 80010b0:	f107 030f 	add.w	r3, r7, #15
 80010b4:	2211      	movs	r2, #17
 80010b6:	2142      	movs	r1, #66	@ 0x42
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f7ff f917 	bl	80002ec <I2C_write>
	//status |= camera_write(CAM_CLKRC, 0x01);		// Set clock pre-scaler /2, since A/C converter operates up to 12 MHz and input CLK is 24 MHz
	I2C_read(status, CAM_WRITE, CAM_DBLV, &data);
 80010be:	f107 030f 	add.w	r3, r7, #15
 80010c2:	226b      	movs	r2, #107	@ 0x6b
 80010c4:	2142      	movs	r1, #66	@ 0x42
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff f932 	bl	8000330 <I2C_read>
	data &= ~(1<<7 | 1<<6);
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	73fb      	strb	r3, [r7, #15]
	//data = 0x0A;
	I2C_write(status, CAM_WRITE, CAM_DBLV, &data);
 80010d6:	f107 030f 	add.w	r3, r7, #15
 80010da:	226b      	movs	r2, #107	@ 0x6b
 80010dc:	2142      	movs	r1, #66	@ 0x42
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff f904 	bl	80002ec <I2C_write>
	//status |= camera_write(CAM_DBLV, 0x0A);			// Bypass PLL

	// Enable scaling for resolutions smaller than VGA
	if ((*mode != 0x00) && (*mode != 0x01)) {
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d016      	beq.n	800111a <camera_init+0xea>
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d012      	beq.n	800111a <camera_init+0xea>
		//status |= camera_write(CAM_COM3, 0x08);
		I2C_read(status, CAM_WRITE, CAM_COM3, &data);
 80010f4:	f107 030f 	add.w	r3, r7, #15
 80010f8:	220c      	movs	r2, #12
 80010fa:	2142      	movs	r1, #66	@ 0x42
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f7ff f917 	bl	8000330 <I2C_read>
		//data = 0x08;
		data |= 1<<3;
 8001102:	7bfb      	ldrb	r3, [r7, #15]
 8001104:	f043 0308 	orr.w	r3, r3, #8
 8001108:	b2db      	uxtb	r3, r3
 800110a:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM3, &data);
 800110c:	f107 030f 	add.w	r3, r7, #15
 8001110:	220c      	movs	r2, #12
 8001112:	2142      	movs	r1, #66	@ 0x42
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f7ff f8e9 	bl	80002ec <I2C_write>
	}

	// Settings depending on choice of mode
	switch (*mode) {
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2b31      	cmp	r3, #49	@ 0x31
 8001120:	f200 80ee 	bhi.w	8001300 <camera_init+0x2d0>
 8001124:	a201      	add	r2, pc, #4	@ (adr r2, 800112c <camera_init+0xfc>)
 8001126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800112a:	bf00      	nop
 800112c:	080011f5 	.word	0x080011f5
 8001130:	08001209 	.word	0x08001209
 8001134:	08001301 	.word	0x08001301
 8001138:	08001301 	.word	0x08001301
 800113c:	08001301 	.word	0x08001301
 8001140:	08001301 	.word	0x08001301
 8001144:	08001301 	.word	0x08001301
 8001148:	08001301 	.word	0x08001301
 800114c:	08001301 	.word	0x08001301
 8001150:	08001301 	.word	0x08001301
 8001154:	08001301 	.word	0x08001301
 8001158:	08001301 	.word	0x08001301
 800115c:	08001301 	.word	0x08001301
 8001160:	08001301 	.word	0x08001301
 8001164:	08001301 	.word	0x08001301
 8001168:	08001301 	.word	0x08001301
 800116c:	0800122f 	.word	0x0800122f
 8001170:	08001243 	.word	0x08001243
 8001174:	08001301 	.word	0x08001301
 8001178:	08001301 	.word	0x08001301
 800117c:	08001301 	.word	0x08001301
 8001180:	08001301 	.word	0x08001301
 8001184:	08001301 	.word	0x08001301
 8001188:	08001301 	.word	0x08001301
 800118c:	08001301 	.word	0x08001301
 8001190:	08001301 	.word	0x08001301
 8001194:	08001301 	.word	0x08001301
 8001198:	08001301 	.word	0x08001301
 800119c:	08001301 	.word	0x08001301
 80011a0:	08001301 	.word	0x08001301
 80011a4:	08001301 	.word	0x08001301
 80011a8:	08001301 	.word	0x08001301
 80011ac:	08001269 	.word	0x08001269
 80011b0:	0800127d 	.word	0x0800127d
 80011b4:	08001301 	.word	0x08001301
 80011b8:	08001301 	.word	0x08001301
 80011bc:	08001301 	.word	0x08001301
 80011c0:	08001301 	.word	0x08001301
 80011c4:	08001301 	.word	0x08001301
 80011c8:	08001301 	.word	0x08001301
 80011cc:	08001301 	.word	0x08001301
 80011d0:	08001301 	.word	0x08001301
 80011d4:	08001301 	.word	0x08001301
 80011d8:	08001301 	.word	0x08001301
 80011dc:	08001301 	.word	0x08001301
 80011e0:	08001301 	.word	0x08001301
 80011e4:	08001301 	.word	0x08001301
 80011e8:	08001301 	.word	0x08001301
 80011ec:	080012a3 	.word	0x080012a3
 80011f0:	080012b7 	.word	0x080012b7
	// VGA - YUV
	case 0x00: {
		//status |= camera_write(CAM_COM7, 0x00);		// Set output format
		data = 0x00;
 80011f4:	2300      	movs	r3, #0
 80011f6:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 80011f8:	f107 030f 	add.w	r3, r7, #15
 80011fc:	2212      	movs	r2, #18
 80011fe:	2142      	movs	r1, #66	@ 0x42
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f7ff f873 	bl	80002ec <I2C_write>
		break;
 8001206:	e07b      	b.n	8001300 <camera_init+0x2d0>
	}
	// VGA - RGB565
	case 0x01: {
		//status |= camera_write(CAM_COM7, 0x04);		// Set output format
		data = 0x04;
 8001208:	2304      	movs	r3, #4
 800120a:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 800120c:	f107 030f 	add.w	r3, r7, #15
 8001210:	2212      	movs	r2, #18
 8001212:	2142      	movs	r1, #66	@ 0x42
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff f869 	bl	80002ec <I2C_write>
		//status |= camera_write(CAM_COM15, 0xD0);	// Set 565 RGB option
		data = 0xD0;
 800121a:	23d0      	movs	r3, #208	@ 0xd0
 800121c:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM15, &data);
 800121e:	f107 030f 	add.w	r3, r7, #15
 8001222:	2240      	movs	r2, #64	@ 0x40
 8001224:	2142      	movs	r1, #66	@ 0x42
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff f860 	bl	80002ec <I2C_write>
		break;
 800122c:	e068      	b.n	8001300 <camera_init+0x2d0>
	}
	// CIF - YUV
	case 0x10: {
		//status |= camera_write(CAM_COM7, 0x20);		// Set output format
		data = 0x20;
 800122e:	2320      	movs	r3, #32
 8001230:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 8001232:	f107 030f 	add.w	r3, r7, #15
 8001236:	2212      	movs	r2, #18
 8001238:	2142      	movs	r1, #66	@ 0x42
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff f856 	bl	80002ec <I2C_write>
		break;
 8001240:	e05e      	b.n	8001300 <camera_init+0x2d0>
	}
	// CIF - RGB565
	case 0x11: {
		//status |= camera_write(CAM_COM7, 0x24);		// Set output format
		data = 0x24;
 8001242:	2324      	movs	r3, #36	@ 0x24
 8001244:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 8001246:	f107 030f 	add.w	r3, r7, #15
 800124a:	2212      	movs	r2, #18
 800124c:	2142      	movs	r1, #66	@ 0x42
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff f84c 	bl	80002ec <I2C_write>
		//status |= camera_write(CAM_COM15, 0xD0);	// Set 565 RGB option
		data = 0xD0;
 8001254:	23d0      	movs	r3, #208	@ 0xd0
 8001256:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM15, &data);
 8001258:	f107 030f 	add.w	r3, r7, #15
 800125c:	2240      	movs	r2, #64	@ 0x40
 800125e:	2142      	movs	r1, #66	@ 0x42
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f7ff f843 	bl	80002ec <I2C_write>
		break;
 8001266:	e04b      	b.n	8001300 <camera_init+0x2d0>
	}
	// QVGA - YUV
	case 0x20: {
		//status |= camera_write(CAM_COM7, 0x10);		// Set output format
		data = 0x10;
 8001268:	2310      	movs	r3, #16
 800126a:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 800126c:	f107 030f 	add.w	r3, r7, #15
 8001270:	2212      	movs	r2, #18
 8001272:	2142      	movs	r1, #66	@ 0x42
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff f839 	bl	80002ec <I2C_write>
		break;
 800127a:	e041      	b.n	8001300 <camera_init+0x2d0>
	}
	// QVGA - RGB565
	case 0x21: {
		//status |= camera_write(CAM_COM7, 0x14);		// Set output format
		data = 0x14;
 800127c:	2314      	movs	r3, #20
 800127e:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 8001280:	f107 030f 	add.w	r3, r7, #15
 8001284:	2212      	movs	r2, #18
 8001286:	2142      	movs	r1, #66	@ 0x42
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff f82f 	bl	80002ec <I2C_write>
		//status |= camera_write(CAM_COM15, 0xD0);	// Set 565 RGB option
		data = 0xD0;
 800128e:	23d0      	movs	r3, #208	@ 0xd0
 8001290:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM15, &data);
 8001292:	f107 030f 	add.w	r3, r7, #15
 8001296:	2240      	movs	r2, #64	@ 0x40
 8001298:	2142      	movs	r1, #66	@ 0x42
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff f826 	bl	80002ec <I2C_write>
		break;
 80012a0:	e02e      	b.n	8001300 <camera_init+0x2d0>
	}
	// QCIF - YUV
	case 0x30: {
		//status |= camera_write(CAM_COM7, 0x08);		// Set output format
		data = 0x08;
 80012a2:	2308      	movs	r3, #8
 80012a4:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 80012a6:	f107 030f 	add.w	r3, r7, #15
 80012aa:	2212      	movs	r2, #18
 80012ac:	2142      	movs	r1, #66	@ 0x42
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff f81c 	bl	80002ec <I2C_write>
		break;
 80012b4:	e024      	b.n	8001300 <camera_init+0x2d0>
	}
	// QCIF - RGB565
	case 0x31: {
		//status |= camera_write(CAM_COM7, 0x0C);		// Set output format
		I2C_read(status, CAM_WRITE, CAM_COM7, &data);
 80012b6:	f107 030f 	add.w	r3, r7, #15
 80012ba:	2212      	movs	r2, #18
 80012bc:	2142      	movs	r1, #66	@ 0x42
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff f836 	bl	8000330 <I2C_read>
		//data = 0x0C;
		data |= (1 << 3) | (1 << 2);
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
 80012c6:	f043 030c 	orr.w	r3, r3, #12
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	73fb      	strb	r3, [r7, #15]

		I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 80012ce:	f107 030f 	add.w	r3, r7, #15
 80012d2:	2212      	movs	r2, #18
 80012d4:	2142      	movs	r1, #66	@ 0x42
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff f808 	bl	80002ec <I2C_write>
		//status |= camera_write(CAM_COM15, 0xD0);	// Set 565 RGB option
		//data = 0xD0;
		data &= ~(1<<5);
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	f023 0320 	bic.w	r3, r3, #32
 80012e2:	b2db      	uxtb	r3, r3
 80012e4:	73fb      	strb	r3, [r7, #15]
		data |= (1<<4);
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
 80012e8:	f043 0310 	orr.w	r3, r3, #16
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM15, &data);
 80012f0:	f107 030f 	add.w	r3, r7, #15
 80012f4:	2240      	movs	r2, #64	@ 0x40
 80012f6:	2142      	movs	r1, #66	@ 0x42
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7fe fff7 	bl	80002ec <I2C_write>
		break;
 80012fe:	bf00      	nop
	}


	//status |= camera_write(CAM_COM8, 0x8F);		// Automatic exposure & gain control
	//status |= camera_write(CAM_RSVD, 0x84);			// Colour correction
	data = 0x84;
 8001300:	2384      	movs	r3, #132	@ 0x84
 8001302:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, CAM_WRITE, CAM_RSVD, &data);
 8001304:	f107 030f 	add.w	r3, r7, #15
 8001308:	22b0      	movs	r2, #176	@ 0xb0
 800130a:	2142      	movs	r1, #66	@ 0x42
 800130c:	6878      	ldr	r0, [r7, #4]
 800130e:	f7fe ffed 	bl	80002ec <I2C_write>

	//return status;
}
 8001312:	bf00      	nop
 8001314:	3710      	adds	r7, #16
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	58021000 	.word	0x58021000
 8001320:	58020c00 	.word	0x58020c00

08001324 <camera_capture_photo>:


void camera_capture_photo(HAL_StatusTypeDef* status, uint8_t* destination_adress, uint32_t* size) {
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
	//HAL_StatusTypeDef status;

	// Begin transmission of data from camera to memory
	*status = HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, destination_adress, *size);
 8001330:	68ba      	ldr	r2, [r7, #8]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2102      	movs	r1, #2
 8001338:	480a      	ldr	r0, [pc, #40]	@ (8001364 <camera_capture_photo+0x40>)
 800133a:	f002 ff7d 	bl	8004238 <HAL_DCMI_Start_DMA>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	701a      	strb	r2, [r3, #0]
	HAL_Delay(5000);
 8001346:	f241 3088 	movw	r0, #5000	@ 0x1388
 800134a:	f001 fe29 	bl	8002fa0 <HAL_Delay>

	// End transmission
	*status = HAL_DCMI_Stop(&hdcmi);
 800134e:	4805      	ldr	r0, [pc, #20]	@ (8001364 <camera_capture_photo+0x40>)
 8001350:	f003 f834 	bl	80043bc <HAL_DCMI_Stop>
 8001354:	4603      	mov	r3, r0
 8001356:	461a      	mov	r2, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	701a      	strb	r2, [r3, #0]

	//return status;
}
 800135c:	bf00      	nop
 800135e:	3710      	adds	r7, #16
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	24000280 	.word	0x24000280

08001368 <radio_power_up>:
#include "radio.h"

void radio_power_up(HAL_StatusTypeDef *status) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 8001370:	2201      	movs	r2, #1
 8001372:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001376:	4890      	ldr	r0, [pc, #576]	@ (80015b8 <radio_power_up+0x250>)
 8001378:	f006 ff30 	bl	80081dc <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800137c:	2064      	movs	r0, #100	@ 0x64
 800137e:	f001 fe0f 	bl	8002fa0 <HAL_Delay>
	uint8_t data[] = {RF_POWER_UP};
 8001382:	4a8e      	ldr	r2, [pc, #568]	@ (80015bc <radio_power_up+0x254>)
 8001384:	f107 0308 	add.w	r3, r7, #8
 8001388:	e892 0003 	ldmia.w	r2, {r0, r1}
 800138c:	6018      	str	r0, [r3, #0]
 800138e:	3304      	adds	r3, #4
 8001390:	8019      	strh	r1, [r3, #0]
 8001392:	3302      	adds	r3, #2
 8001394:	0c0a      	lsrs	r2, r1, #16
 8001396:	701a      	strb	r2, [r3, #0]
	//uint8_t data[9] = {0x02, 0x01, 0x01, 0x01, 0xC9, 0xC3, 0x80, 0x44, 0xFF};
	uint8_t size = sizeof(data);
 8001398:	2307      	movs	r3, #7
 800139a:	777b      	strb	r3, [r7, #29]
	uint16_t attempt = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	83fb      	strh	r3, [r7, #30]
	//uint8_t NOP = 0x00;
	uint8_t *pData = data;
 80013a0:	f107 0308 	add.w	r3, r7, #8
 80013a4:	61bb      	str	r3, [r7, #24]
	SPI_HandleTypeDef *hspi = &hspi4;
 80013a6:	4b86      	ldr	r3, [pc, #536]	@ (80015c0 <radio_power_up+0x258>)
 80013a8:	617b      	str	r3, [r7, #20]

#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	3320      	adds	r3, #32
 80013b0:	613b      	str	r3, [r7, #16]
#endif /* __GNUC__ */

	// Optimization of HAL_SPI_Transmit

	if (hspi->State != HAL_SPI_STATE_READY) {
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d003      	beq.n	80013c6 <radio_power_up+0x5e>
		*status = HAL_BUSY;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2202      	movs	r2, #2
 80013c2:	701a      	strb	r2, [r3, #0]
		return;
 80013c4:	e0f4      	b.n	80015b0 <radio_power_up+0x248>
	}
	/* Lock the process */
	__HAL_LOCK(&hspi4);
 80013c6:	4b7e      	ldr	r3, [pc, #504]	@ (80015c0 <radio_power_up+0x258>)
 80013c8:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	f000 80ef 	beq.w	80015b0 <radio_power_up+0x248>
 80013d2:	4b7b      	ldr	r3, [pc, #492]	@ (80015c0 <radio_power_up+0x258>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

	/* Set the transaction information */
	hspi->State = HAL_SPI_STATE_BUSY_TX;
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	2203      	movs	r2, #3
 80013de:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	hspi->pTxBuffPtr = (const uint8_t*) pData;
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	65da      	str	r2, [r3, #92]	@ 0x5c
	hspi->TxXferSize = size; // One byte
 80013f0:	7f7b      	ldrb	r3, [r7, #29]
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
	hspi->TxXferCount = size;
 80013fa:	7f7b      	ldrb	r3, [r7, #29]
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

	/*Init field not used in handle to zero */
	hspi->pRxBuffPtr = NULL;
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	2200      	movs	r2, #0
 8001408:	665a      	str	r2, [r3, #100]	@ 0x64
	hspi->RxXferSize = (uint16_t) 0UL;
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	2200      	movs	r2, #0
 800140e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
	hspi->RxXferCount = (uint16_t) 0UL;
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	2200      	movs	r2, #0
 8001416:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
	hspi->TxISR = NULL;
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	2200      	movs	r2, #0
 800141e:	675a      	str	r2, [r3, #116]	@ 0x74
	hspi->RxISR = NULL;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	2200      	movs	r2, #0
 8001424:	671a      	str	r2, [r3, #112]	@ 0x70

	// Communication direction
	SPI_2LINES_TX(hspi);
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001438:	60da      	str	r2, [r3, #12]

	/* Set the number of data at current transfer */
	MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, size);
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	685a      	ldr	r2, [r3, #4]
 8001440:	4b60      	ldr	r3, [pc, #384]	@ (80015c4 <radio_power_up+0x25c>)
 8001442:	4013      	ands	r3, r2
 8001444:	7f79      	ldrb	r1, [r7, #29]
 8001446:	697a      	ldr	r2, [r7, #20]
 8001448:	6812      	ldr	r2, [r2, #0]
 800144a:	430b      	orrs	r3, r1
 800144c:	6053      	str	r3, [r2, #4]


	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 800144e:	2200      	movs	r2, #0
 8001450:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001454:	4858      	ldr	r0, [pc, #352]	@ (80015b8 <radio_power_up+0x250>)
 8001456:	f006 fec1 	bl	80081dc <HAL_GPIO_WritePin>

	// Wait for CTS to go high
	if (!(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9))) {
 800145a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800145e:	485a      	ldr	r0, [pc, #360]	@ (80015c8 <radio_power_up+0x260>)
 8001460:	f006 fea4 	bl	80081ac <HAL_GPIO_ReadPin>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d11f      	bne.n	80014aa <radio_power_up+0x142>
		// Wait until Clear To Send (CTS) signal appears
		while (!(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9))) {
 800146a:	e016      	b.n	800149a <radio_power_up+0x132>
			attempt++;
 800146c:	8bfb      	ldrh	r3, [r7, #30]
 800146e:	3301      	adds	r3, #1
 8001470:	83fb      	strh	r3, [r7, #30]
			if (attempt > 10000) {
 8001472:	8bfb      	ldrh	r3, [r7, #30]
 8001474:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001478:	4293      	cmp	r3, r2
 800147a:	d90e      	bls.n	800149a <radio_power_up+0x132>
				*status = 0x3; // Timeout
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2203      	movs	r2, #3
 8001480:	701a      	strb	r2, [r3, #0]
				// End process
				close_SPI(hspi);
 8001482:	6978      	ldr	r0, [r7, #20]
 8001484:	f7fe ff86 	bl	8000394 <close_SPI>
				hspi->State = HAL_SPI_STATE_READY;
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	2201      	movs	r2, #1
 800148c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

				/* Unlock the process */
				__HAL_UNLOCK(hspi);
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	2200      	movs	r2, #0
 8001494:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				return;
 8001498:	e08a      	b.n	80015b0 <radio_power_up+0x248>
		while (!(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9))) {
 800149a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800149e:	484a      	ldr	r0, [pc, #296]	@ (80015c8 <radio_power_up+0x260>)
 80014a0:	f006 fe84 	bl	80081ac <HAL_GPIO_ReadPin>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0e0      	beq.n	800146c <radio_power_up+0x104>
			}
		}
	}
	/* Enable SPI peripheral */
	__HAL_SPI_ENABLE(hspi);
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f042 0201 	orr.w	r2, r2, #1
 80014b8:	601a      	str	r2, [r3, #0]
	/* Master transfer start */
	SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014c8:	601a      	str	r2, [r3, #0]

	// Loop until the byte is sent
	// While this seems unnecessary, it covers 2 requirements - wait until SPI is ready to send and then send only one byte
	while (hspi->TxXferCount > 0UL) {
 80014ca:	e058      	b.n	800157e <radio_power_up+0x216>
		/* Wait until TXP flag is set to send data */
		if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) {
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d151      	bne.n	800157e <radio_power_up+0x216>
			if ((hspi->TxXferCount > 3UL)
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	2b03      	cmp	r3, #3
 80014e4:	d918      	bls.n	8001518 <radio_power_up+0x1b0>
					&& (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA)) {
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80014ea:	2b40      	cmp	r3, #64	@ 0x40
 80014ec:	d914      	bls.n	8001518 <radio_power_up+0x1b0>
				*((__IO uint32_t*) &hspi->Instance->TXDR) =
						*((const uint32_t*) hspi->pTxBuffPtr);
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
				*((__IO uint32_t*) &hspi->Instance->TXDR) =
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	681b      	ldr	r3, [r3, #0]
						*((const uint32_t*) hspi->pTxBuffPtr);
 80014f6:	6812      	ldr	r2, [r2, #0]
				*((__IO uint32_t*) &hspi->Instance->TXDR) =
 80014f8:	621a      	str	r2, [r3, #32]
				hspi->pTxBuffPtr += sizeof(uint32_t);
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014fe:	1d1a      	adds	r2, r3, #4
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	65da      	str	r2, [r3, #92]	@ 0x5c
				hspi->TxXferCount -= (uint16_t) 4UL;
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800150a:	b29b      	uxth	r3, r3
 800150c:	3b04      	subs	r3, #4
 800150e:	b29a      	uxth	r2, r3
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8001516:	e032      	b.n	800157e <radio_power_up+0x216>
			} else if ((hspi->TxXferCount > 1UL)
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800151e:	b29b      	uxth	r3, r3
 8001520:	2b01      	cmp	r3, #1
 8001522:	d917      	bls.n	8001554 <radio_power_up+0x1ec>
					&& (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA)) {
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001528:	2b00      	cmp	r3, #0
 800152a:	d013      	beq.n	8001554 <radio_power_up+0x1ec>
#if defined (__GNUC__)
				*ptxdr_16bits = *((const uint16_t*) hspi->pTxBuffPtr);
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001530:	881a      	ldrh	r2, [r3, #0]
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	801a      	strh	r2, [r3, #0]
#else
		          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
		#endif /* __GNUC__ */
				hspi->pTxBuffPtr += sizeof(uint16_t);
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800153a:	1c9a      	adds	r2, r3, #2
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	65da      	str	r2, [r3, #92]	@ 0x5c
				hspi->TxXferCount -= (uint16_t) 2UL;
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8001546:	b29b      	uxth	r3, r3
 8001548:	3b02      	subs	r3, #2
 800154a:	b29a      	uxth	r2, r3
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8001552:	e014      	b.n	800157e <radio_power_up+0x216>
			} else {
				*((__IO uint8_t*) &hspi->Instance->TXDR) =
						*((const uint8_t*) hspi->pTxBuffPtr);
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
				*((__IO uint8_t*) &hspi->Instance->TXDR) =
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	3320      	adds	r3, #32
						*((const uint8_t*) hspi->pTxBuffPtr);
 800155e:	7812      	ldrb	r2, [r2, #0]
				*((__IO uint8_t*) &hspi->Instance->TXDR) =
 8001560:	701a      	strb	r2, [r3, #0]
				hspi->pTxBuffPtr += sizeof(uint8_t);
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001566:	1c5a      	adds	r2, r3, #1
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	65da      	str	r2, [r3, #92]	@ 0x5c
				hspi->TxXferCount--;
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8001572:	b29b      	uxth	r3, r3
 8001574:	3b01      	subs	r3, #1
 8001576:	b29a      	uxth	r2, r3
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
	while (hspi->TxXferCount > 0UL) {
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8001584:	b29b      	uxth	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1a0      	bne.n	80014cc <radio_power_up+0x164>
		 }
		 */
	}

	// Wait until transfer is completed
	while (!(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_EOT))) {
 800158a:	bf00      	nop
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	f003 0308 	and.w	r3, r3, #8
 8001596:	2b08      	cmp	r3, #8
 8001598:	d1f8      	bne.n	800158c <radio_power_up+0x224>
	}

	// End process
	close_SPI(hspi);
 800159a:	6978      	ldr	r0, [r7, #20]
 800159c:	f7fe fefa 	bl	8000394 <close_SPI>
	hspi->State = HAL_SPI_STATE_READY;
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	2201      	movs	r2, #1
 80015a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

	/* Unlock the process */
	__HAL_UNLOCK(hspi);
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	2200      	movs	r2, #0
 80015ac:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

	//*status = HAL_SPI_Transmit(&hspi4, &NOP, 1, 10);
	//*status = HAL_SPI_Transmit(&hspi4, data, size, 50);
	//SPI_write(status, data, &size);
}
 80015b0:	3720      	adds	r7, #32
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	58020400 	.word	0x58020400
 80015bc:	08013578 	.word	0x08013578
 80015c0:	2400039c 	.word	0x2400039c
 80015c4:	ffff0000 	.word	0xffff0000
 80015c8:	58021000 	.word	0x58021000

080015cc <radio_pins>:

void radio_pins(HAL_StatusTypeDef* status) {
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_GPIO_PIN_CFG};
 80015d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001600 <radio_pins+0x34>)
 80015d6:	f107 0310 	add.w	r3, r7, #16
 80015da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015de:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t size = sizeof(data);
 80015e2:	2308      	movs	r3, #8
 80015e4:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80015e6:	f107 020f 	add.w	r2, r7, #15
 80015ea:	f107 0310 	add.w	r3, r7, #16
 80015ee:	4619      	mov	r1, r3
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7fe ffb1 	bl	8000558 <SPI_write>
}
 80015f6:	bf00      	nop
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	08013580 	.word	0x08013580

08001604 <radio_TCXO>:

void radio_TCXO(HAL_StatusTypeDef* status) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b086      	sub	sp, #24
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_GLOBAL_XO_TUNE_2};
 800160c:	4b08      	ldr	r3, [pc, #32]	@ (8001630 <radio_TCXO+0x2c>)
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	2300      	movs	r3, #0
 8001612:	82bb      	strh	r3, [r7, #20]
	uint8_t size = sizeof(data);
 8001614:	2306      	movs	r3, #6
 8001616:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001618:	f107 020f 	add.w	r2, r7, #15
 800161c:	f107 0310 	add.w	r3, r7, #16
 8001620:	4619      	mov	r1, r3
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7fe ff98 	bl	8000558 <SPI_write>
}
 8001628:	bf00      	nop
 800162a:	3718      	adds	r7, #24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	00020011 	.word	0x00020011

08001634 <radio_global>:

void radio_global(HAL_StatusTypeDef* status) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b086      	sub	sp, #24
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_GLOBAL_CONFIG_1};
 800163c:	4a0a      	ldr	r2, [pc, #40]	@ (8001668 <radio_global+0x34>)
 800163e:	f107 0310 	add.w	r3, r7, #16
 8001642:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001646:	6018      	str	r0, [r3, #0]
 8001648:	3304      	adds	r3, #4
 800164a:	7019      	strb	r1, [r3, #0]
	uint8_t size = sizeof(data);
 800164c:	2305      	movs	r3, #5
 800164e:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001650:	f107 020f 	add.w	r2, r7, #15
 8001654:	f107 0310 	add.w	r3, r7, #16
 8001658:	4619      	mov	r1, r3
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7fe ff7c 	bl	8000558 <SPI_write>
}
 8001660:	bf00      	nop
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	08013588 	.word	0x08013588

0800166c <radio_interrupts>:

void radio_interrupts(HAL_StatusTypeDef* status) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_INT_CTL_ENABLE_2};
 8001674:	4a0a      	ldr	r2, [pc, #40]	@ (80016a0 <radio_interrupts+0x34>)
 8001676:	f107 0310 	add.w	r3, r7, #16
 800167a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800167e:	6018      	str	r0, [r3, #0]
 8001680:	3304      	adds	r3, #4
 8001682:	8019      	strh	r1, [r3, #0]
	uint8_t size = sizeof(data);
 8001684:	2306      	movs	r3, #6
 8001686:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001688:	f107 020f 	add.w	r2, r7, #15
 800168c:	f107 0310 	add.w	r3, r7, #16
 8001690:	4619      	mov	r1, r3
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7fe ff60 	bl	8000558 <SPI_write>
}
 8001698:	bf00      	nop
 800169a:	3718      	adds	r7, #24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	08013590 	.word	0x08013590

080016a4 <radio_fast_registers>:

void radio_fast_registers(HAL_StatusTypeDef* status) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_FRR_CTL_A_MODE_4};
 80016ac:	4a0a      	ldr	r2, [pc, #40]	@ (80016d8 <radio_fast_registers+0x34>)
 80016ae:	f107 0310 	add.w	r3, r7, #16
 80016b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016b6:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t size = sizeof(data);
 80016ba:	2308      	movs	r3, #8
 80016bc:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80016be:	f107 020f 	add.w	r2, r7, #15
 80016c2:	f107 0310 	add.w	r3, r7, #16
 80016c6:	4619      	mov	r1, r3
 80016c8:	6878      	ldr	r0, [r7, #4]
 80016ca:	f7fe ff45 	bl	8000558 <SPI_write>
}
 80016ce:	bf00      	nop
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	08013598 	.word	0x08013598

080016dc <radio_Tx>:

void radio_Tx(HAL_StatusTypeDef* status) {
 80016dc:	b590      	push	{r4, r7, lr}
 80016de:	b089      	sub	sp, #36	@ 0x24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PREAMBLE_TX_LENGTH_9};
 80016e4:	4b09      	ldr	r3, [pc, #36]	@ (800170c <radio_Tx+0x30>)
 80016e6:	f107 0410 	add.w	r4, r7, #16
 80016ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016ec:	c407      	stmia	r4!, {r0, r1, r2}
 80016ee:	7023      	strb	r3, [r4, #0]
	uint8_t size = sizeof(data);
 80016f0:	230d      	movs	r3, #13
 80016f2:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80016f4:	f107 020f 	add.w	r2, r7, #15
 80016f8:	f107 0310 	add.w	r3, r7, #16
 80016fc:	4619      	mov	r1, r3
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7fe ff2a 	bl	8000558 <SPI_write>
}
 8001704:	bf00      	nop
 8001706:	3724      	adds	r7, #36	@ 0x24
 8001708:	46bd      	mov	sp, r7
 800170a:	bd90      	pop	{r4, r7, pc}
 800170c:	080135a0 	.word	0x080135a0

08001710 <radio_sync>:

void radio_sync(HAL_StatusTypeDef* status) {
 8001710:	b590      	push	{r4, r7, lr}
 8001712:	b089      	sub	sp, #36	@ 0x24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_SYNC_CONFIG_10};
 8001718:	4b09      	ldr	r3, [pc, #36]	@ (8001740 <radio_sync+0x30>)
 800171a:	f107 0410 	add.w	r4, r7, #16
 800171e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001720:	c407      	stmia	r4!, {r0, r1, r2}
 8001722:	8023      	strh	r3, [r4, #0]
	uint8_t size = sizeof(data);
 8001724:	230e      	movs	r3, #14
 8001726:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001728:	f107 020f 	add.w	r2, r7, #15
 800172c:	f107 0310 	add.w	r3, r7, #16
 8001730:	4619      	mov	r1, r3
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7fe ff10 	bl	8000558 <SPI_write>
}
 8001738:	bf00      	nop
 800173a:	3724      	adds	r7, #36	@ 0x24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd90      	pop	{r4, r7, pc}
 8001740:	080135b0 	.word	0x080135b0

08001744 <radio_packet_CRC>:

void radio_packet_CRC(HAL_StatusTypeDef* status) {
 8001744:	b590      	push	{r4, r7, lr}
 8001746:	b089      	sub	sp, #36	@ 0x24
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PKT_CRC_CONFIG_12};
 800174c:	4b09      	ldr	r3, [pc, #36]	@ (8001774 <radio_packet_CRC+0x30>)
 800174e:	f107 0410 	add.w	r4, r7, #16
 8001752:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001754:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 8001758:	2310      	movs	r3, #16
 800175a:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 800175c:	f107 020f 	add.w	r2, r7, #15
 8001760:	f107 0310 	add.w	r3, r7, #16
 8001764:	4619      	mov	r1, r3
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7fe fef6 	bl	8000558 <SPI_write>
}
 800176c:	bf00      	nop
 800176e:	3724      	adds	r7, #36	@ 0x24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd90      	pop	{r4, r7, pc}
 8001774:	080135c0 	.word	0x080135c0

08001778 <radio_Rx_thr>:

void radio_Rx_thr(HAL_StatusTypeDef* status) {
 8001778:	b590      	push	{r4, r7, lr}
 800177a:	b089      	sub	sp, #36	@ 0x24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PKT_RX_THRESHOLD_12};
 8001780:	4b09      	ldr	r3, [pc, #36]	@ (80017a8 <radio_Rx_thr+0x30>)
 8001782:	f107 0410 	add.w	r4, r7, #16
 8001786:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001788:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 800178c:	2310      	movs	r3, #16
 800178e:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001790:	f107 020f 	add.w	r2, r7, #15
 8001794:	f107 0310 	add.w	r3, r7, #16
 8001798:	4619      	mov	r1, r3
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7fe fedc 	bl	8000558 <SPI_write>
}
 80017a0:	bf00      	nop
 80017a2:	3724      	adds	r7, #36	@ 0x24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd90      	pop	{r4, r7, pc}
 80017a8:	080135d0 	.word	0x080135d0

080017ac <radio_Rx_CRC_1>:

void radio_Rx_CRC_1(HAL_StatusTypeDef* status) {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b088      	sub	sp, #32
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PKT_FIELD_3_CRC_CONFIG_12};
 80017b4:	4b0a      	ldr	r3, [pc, #40]	@ (80017e0 <radio_Rx_CRC_1+0x34>)
 80017b6:	613b      	str	r3, [r7, #16]
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	2200      	movs	r2, #0
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	605a      	str	r2, [r3, #4]
 80017c2:	609a      	str	r2, [r3, #8]
	uint8_t size = sizeof(data);
 80017c4:	2310      	movs	r3, #16
 80017c6:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80017c8:	f107 020f 	add.w	r2, r7, #15
 80017cc:	f107 0310 	add.w	r3, r7, #16
 80017d0:	4619      	mov	r1, r3
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f7fe fec0 	bl	8000558 <SPI_write>
}
 80017d8:	bf00      	nop
 80017da:	3720      	adds	r7, #32
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	180c1211 	.word	0x180c1211

080017e4 <radio_Rx_CRC_2>:

void radio_Rx_CRC_2(HAL_StatusTypeDef* status) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b088      	sub	sp, #32
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PKT_RX_FIELD_1_CRC_CONFIG_12};
 80017ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001818 <radio_Rx_CRC_2+0x34>)
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
	uint8_t size = sizeof(data);
 80017fc:	2310      	movs	r3, #16
 80017fe:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001800:	f107 020f 	add.w	r2, r7, #15
 8001804:	f107 0310 	add.w	r3, r7, #16
 8001808:	4619      	mov	r1, r3
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7fe fea4 	bl	8000558 <SPI_write>
}
 8001810:	bf00      	nop
 8001812:	3720      	adds	r7, #32
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	240c1211 	.word	0x240c1211

0800181c <radio_Rx_CRC_3>:

void radio_Rx_CRC_3(HAL_StatusTypeDef* status) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b086      	sub	sp, #24
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PKT_RX_FIELD_4_CRC_CONFIG_5};
 8001824:	4b0a      	ldr	r3, [pc, #40]	@ (8001850 <radio_Rx_CRC_3+0x34>)
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	f107 0310 	add.w	r3, r7, #16
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	711a      	strb	r2, [r3, #4]
	uint8_t size = sizeof(data);
 8001832:	2309      	movs	r3, #9
 8001834:	72fb      	strb	r3, [r7, #11]
	SPI_write(status, data, &size);
 8001836:	f107 020b 	add.w	r2, r7, #11
 800183a:	f107 030c 	add.w	r3, r7, #12
 800183e:	4619      	mov	r1, r3
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7fe fe89 	bl	8000558 <SPI_write>
}
 8001846:	bf00      	nop
 8001848:	3718      	adds	r7, #24
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	30051211 	.word	0x30051211

08001854 <radio_Rx_CRC_seed>:

void radio_Rx_CRC_seed(HAL_StatusTypeDef* status) {
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PKT_CRC_SEED_31_24_4};
 800185c:	4b08      	ldr	r3, [pc, #32]	@ (8001880 <radio_Rx_CRC_seed+0x2c>)
 800185e:	613b      	str	r3, [r7, #16]
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
	uint8_t size = sizeof(data);
 8001864:	2308      	movs	r3, #8
 8001866:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001868:	f107 020f 	add.w	r2, r7, #15
 800186c:	f107 0310 	add.w	r3, r7, #16
 8001870:	4619      	mov	r1, r3
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7fe fe70 	bl	8000558 <SPI_write>
}
 8001878:	bf00      	nop
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	36041211 	.word	0x36041211

08001884 <radio_mod>:

void radio_mod(HAL_StatusTypeDef* status) {
 8001884:	b590      	push	{r4, r7, lr}
 8001886:	b089      	sub	sp, #36	@ 0x24
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_MOD_TYPE_12};
 800188c:	4b09      	ldr	r3, [pc, #36]	@ (80018b4 <radio_mod+0x30>)
 800188e:	f107 0410 	add.w	r4, r7, #16
 8001892:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001894:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 8001898:	2310      	movs	r3, #16
 800189a:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 800189c:	f107 020f 	add.w	r2, r7, #15
 80018a0:	f107 0310 	add.w	r3, r7, #16
 80018a4:	4619      	mov	r1, r3
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7fe fe56 	bl	8000558 <SPI_write>
}
 80018ac:	bf00      	nop
 80018ae:	3724      	adds	r7, #36	@ 0x24
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd90      	pop	{r4, r7, pc}
 80018b4:	080135e0 	.word	0x080135e0

080018b8 <radio_freq_dev>:

void radio_freq_dev(HAL_StatusTypeDef* status) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_FREQ_DEV_0_1};
 80018c0:	4a0a      	ldr	r2, [pc, #40]	@ (80018ec <radio_freq_dev+0x34>)
 80018c2:	f107 0310 	add.w	r3, r7, #16
 80018c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018ca:	6018      	str	r0, [r3, #0]
 80018cc:	3304      	adds	r3, #4
 80018ce:	7019      	strb	r1, [r3, #0]
	uint8_t size = sizeof(data);
 80018d0:	2305      	movs	r3, #5
 80018d2:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80018d4:	f107 020f 	add.w	r2, r7, #15
 80018d8:	f107 0310 	add.w	r3, r7, #16
 80018dc:	4619      	mov	r1, r3
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f7fe fe3a 	bl	8000558 <SPI_write>
}
 80018e4:	bf00      	nop
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	080135f0 	.word	0x080135f0

080018f0 <radio_Tx_ramp>:

void radio_Tx_ramp(HAL_StatusTypeDef* status) {
 80018f0:	b590      	push	{r4, r7, lr}
 80018f2:	b089      	sub	sp, #36	@ 0x24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_TX_RAMP_DELAY_12};
 80018f8:	4b09      	ldr	r3, [pc, #36]	@ (8001920 <radio_Tx_ramp+0x30>)
 80018fa:	f107 0410 	add.w	r4, r7, #16
 80018fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001900:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 8001904:	2310      	movs	r3, #16
 8001906:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001908:	f107 020f 	add.w	r2, r7, #15
 800190c:	f107 0310 	add.w	r3, r7, #16
 8001910:	4619      	mov	r1, r3
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f7fe fe20 	bl	8000558 <SPI_write>
}
 8001918:	bf00      	nop
 800191a:	3724      	adds	r7, #36	@ 0x24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd90      	pop	{r4, r7, pc}
 8001920:	080135f8 	.word	0x080135f8

08001924 <radio_NCO_offset>:

void radio_NCO_offset(HAL_StatusTypeDef* status) {
 8001924:	b590      	push	{r4, r7, lr}
 8001926:	b089      	sub	sp, #36	@ 0x24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_BCR_NCO_OFFSET_2_12};
 800192c:	4b09      	ldr	r3, [pc, #36]	@ (8001954 <radio_NCO_offset+0x30>)
 800192e:	f107 0410 	add.w	r4, r7, #16
 8001932:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001934:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 8001938:	2310      	movs	r3, #16
 800193a:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 800193c:	f107 020f 	add.w	r2, r7, #15
 8001940:	f107 0310 	add.w	r3, r7, #16
 8001944:	4619      	mov	r1, r3
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7fe fe06 	bl	8000558 <SPI_write>
}
 800194c:	bf00      	nop
 800194e:	3724      	adds	r7, #36	@ 0x24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd90      	pop	{r4, r7, pc}
 8001954:	08013608 	.word	0x08013608

08001958 <radio_AFC>:

void radio_AFC(HAL_StatusTypeDef* status) {
 8001958:	b580      	push	{r7, lr}
 800195a:	b086      	sub	sp, #24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_AFC_LIMITER_1_3};
 8001960:	4a0c      	ldr	r2, [pc, #48]	@ (8001994 <radio_AFC+0x3c>)
 8001962:	f107 0310 	add.w	r3, r7, #16
 8001966:	e892 0003 	ldmia.w	r2, {r0, r1}
 800196a:	6018      	str	r0, [r3, #0]
 800196c:	3304      	adds	r3, #4
 800196e:	8019      	strh	r1, [r3, #0]
 8001970:	3302      	adds	r3, #2
 8001972:	0c0a      	lsrs	r2, r1, #16
 8001974:	701a      	strb	r2, [r3, #0]
	uint8_t size = sizeof(data);
 8001976:	2307      	movs	r3, #7
 8001978:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 800197a:	f107 020f 	add.w	r2, r7, #15
 800197e:	f107 0310 	add.w	r3, r7, #16
 8001982:	4619      	mov	r1, r3
 8001984:	6878      	ldr	r0, [r7, #4]
 8001986:	f7fe fde7 	bl	8000558 <SPI_write>
}
 800198a:	bf00      	nop
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	08013618 	.word	0x08013618

08001998 <radio_AGC_1>:

void radio_AGC_1(HAL_StatusTypeDef* status) {
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_AGC_CONTROL_1};
 80019a0:	4a0a      	ldr	r2, [pc, #40]	@ (80019cc <radio_AGC_1+0x34>)
 80019a2:	f107 0310 	add.w	r3, r7, #16
 80019a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019aa:	6018      	str	r0, [r3, #0]
 80019ac:	3304      	adds	r3, #4
 80019ae:	7019      	strb	r1, [r3, #0]
	uint8_t size = sizeof(data);
 80019b0:	2305      	movs	r3, #5
 80019b2:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80019b4:	f107 020f 	add.w	r2, r7, #15
 80019b8:	f107 0310 	add.w	r3, r7, #16
 80019bc:	4619      	mov	r1, r3
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7fe fdca 	bl	8000558 <SPI_write>
}
 80019c4:	bf00      	nop
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	08013620 	.word	0x08013620

080019d0 <radio_AGC_2>:

void radio_AGC_2(HAL_StatusTypeDef* status) {
 80019d0:	b590      	push	{r4, r7, lr}
 80019d2:	b089      	sub	sp, #36	@ 0x24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_AGC_WINDOW_SIZE_12};
 80019d8:	4b09      	ldr	r3, [pc, #36]	@ (8001a00 <radio_AGC_2+0x30>)
 80019da:	f107 0410 	add.w	r4, r7, #16
 80019de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 80019e4:	2310      	movs	r3, #16
 80019e6:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80019e8:	f107 020f 	add.w	r2, r7, #15
 80019ec:	f107 0310 	add.w	r3, r7, #16
 80019f0:	4619      	mov	r1, r3
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7fe fdb0 	bl	8000558 <SPI_write>
}
 80019f8:	bf00      	nop
 80019fa:	3724      	adds	r7, #36	@ 0x24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd90      	pop	{r4, r7, pc}
 8001a00:	08013628 	.word	0x08013628

08001a04 <radio_RAW>:

void radio_RAW(HAL_StatusTypeDef* status) {
 8001a04:	b590      	push	{r4, r7, lr}
 8001a06:	b089      	sub	sp, #36	@ 0x24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_RAW_CONTROL_10};
 8001a0c:	4b09      	ldr	r3, [pc, #36]	@ (8001a34 <radio_RAW+0x30>)
 8001a0e:	f107 0410 	add.w	r4, r7, #16
 8001a12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a14:	c407      	stmia	r4!, {r0, r1, r2}
 8001a16:	8023      	strh	r3, [r4, #0]
	uint8_t size = sizeof(data);
 8001a18:	230e      	movs	r3, #14
 8001a1a:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001a1c:	f107 020f 	add.w	r2, r7, #15
 8001a20:	f107 0310 	add.w	r3, r7, #16
 8001a24:	4619      	mov	r1, r3
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7fe fd96 	bl	8000558 <SPI_write>
}
 8001a2c:	bf00      	nop
 8001a2e:	3724      	adds	r7, #36	@ 0x24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd90      	pop	{r4, r7, pc}
 8001a34:	08013638 	.word	0x08013638

08001a38 <radio_search_period>:

void radio_search_period(HAL_StatusTypeDef* status) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_RAW_SEARCH2_2};
 8001a40:	4a0a      	ldr	r2, [pc, #40]	@ (8001a6c <radio_search_period+0x34>)
 8001a42:	f107 0310 	add.w	r3, r7, #16
 8001a46:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a4a:	6018      	str	r0, [r3, #0]
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	8019      	strh	r1, [r3, #0]
	uint8_t size = sizeof(data);
 8001a50:	2306      	movs	r3, #6
 8001a52:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001a54:	f107 020f 	add.w	r2, r7, #15
 8001a58:	f107 0310 	add.w	r3, r7, #16
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f7fe fd7a 	bl	8000558 <SPI_write>
}
 8001a64:	bf00      	nop
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	08013648 	.word	0x08013648

08001a70 <radio_GFSK_thr>:

void radio_GFSK_thr(HAL_StatusTypeDef* status) {
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_SPIKE_DET_2};
 8001a78:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa4 <radio_GFSK_thr+0x34>)
 8001a7a:	f107 0310 	add.w	r3, r7, #16
 8001a7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a82:	6018      	str	r0, [r3, #0]
 8001a84:	3304      	adds	r3, #4
 8001a86:	8019      	strh	r1, [r3, #0]
	uint8_t size = sizeof(data);
 8001a88:	2306      	movs	r3, #6
 8001a8a:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001a8c:	f107 020f 	add.w	r2, r7, #15
 8001a90:	f107 0310 	add.w	r3, r7, #16
 8001a94:	4619      	mov	r1, r3
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7fe fd5e 	bl	8000558 <SPI_write>
}
 8001a9c:	bf00      	nop
 8001a9e:	3718      	adds	r7, #24
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	08013650 	.word	0x08013650

08001aa8 <radio_RSSI_thr>:

void radio_RSSI_thr(HAL_StatusTypeDef* status) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_RSSI_MUTE_1};
 8001ab0:	4b08      	ldr	r3, [pc, #32]	@ (8001ad4 <radio_RSSI_thr+0x2c>)
 8001ab2:	613b      	str	r3, [r7, #16]
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	753b      	strb	r3, [r7, #20]
	uint8_t size = sizeof(data);
 8001ab8:	2305      	movs	r3, #5
 8001aba:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001abc:	f107 020f 	add.w	r2, r7, #15
 8001ac0:	f107 0310 	add.w	r3, r7, #16
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7fe fd46 	bl	8000558 <SPI_write>
}
 8001acc:	bf00      	nop
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	57012011 	.word	0x57012011

08001ad8 <radio_RSSI_att>:

void radio_RSSI_att(HAL_StatusTypeDef* status) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_DSA_CTRL1_5};
 8001ae0:	4a09      	ldr	r2, [pc, #36]	@ (8001b08 <radio_RSSI_att+0x30>)
 8001ae2:	f107 030c 	add.w	r3, r7, #12
 8001ae6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ae8:	c303      	stmia	r3!, {r0, r1}
 8001aea:	701a      	strb	r2, [r3, #0]
	uint8_t size = sizeof(data);
 8001aec:	2309      	movs	r3, #9
 8001aee:	72fb      	strb	r3, [r7, #11]
	SPI_write(status, data, &size);
 8001af0:	f107 020b 	add.w	r2, r7, #11
 8001af4:	f107 030c 	add.w	r3, r7, #12
 8001af8:	4619      	mov	r1, r3
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f7fe fd2c 	bl	8000558 <SPI_write>
}
 8001b00:	bf00      	nop
 8001b02:	3718      	adds	r7, #24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	08013658 	.word	0x08013658

08001b0c <radio_Rx_filter_1>:

void radio_Rx_filter_1(HAL_StatusTypeDef* status) {
 8001b0c:	b590      	push	{r4, r7, lr}
 8001b0e:	b089      	sub	sp, #36	@ 0x24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12};
 8001b14:	4b09      	ldr	r3, [pc, #36]	@ (8001b3c <radio_Rx_filter_1+0x30>)
 8001b16:	f107 0410 	add.w	r4, r7, #16
 8001b1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 8001b20:	2310      	movs	r3, #16
 8001b22:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001b24:	f107 020f 	add.w	r2, r7, #15
 8001b28:	f107 0310 	add.w	r3, r7, #16
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7fe fd12 	bl	8000558 <SPI_write>
}
 8001b34:	bf00      	nop
 8001b36:	3724      	adds	r7, #36	@ 0x24
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd90      	pop	{r4, r7, pc}
 8001b3c:	08013664 	.word	0x08013664

08001b40 <radio_Rx_filter_2>:

void radio_Rx_filter_2(HAL_StatusTypeDef* status) {
 8001b40:	b590      	push	{r4, r7, lr}
 8001b42:	b089      	sub	sp, #36	@ 0x24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12};
 8001b48:	4b09      	ldr	r3, [pc, #36]	@ (8001b70 <radio_Rx_filter_2+0x30>)
 8001b4a:	f107 0410 	add.w	r4, r7, #16
 8001b4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 8001b54:	2310      	movs	r3, #16
 8001b56:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001b58:	f107 020f 	add.w	r2, r7, #15
 8001b5c:	f107 0310 	add.w	r3, r7, #16
 8001b60:	4619      	mov	r1, r3
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f7fe fcf8 	bl	8000558 <SPI_write>
}
 8001b68:	bf00      	nop
 8001b6a:	3724      	adds	r7, #36	@ 0x24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd90      	pop	{r4, r7, pc}
 8001b70:	08013674 	.word	0x08013674

08001b74 <radio_Rx_filter_3>:

void radio_Rx_filter_3(HAL_StatusTypeDef* status) {
 8001b74:	b590      	push	{r4, r7, lr}
 8001b76:	b089      	sub	sp, #36	@ 0x24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12};
 8001b7c:	4b09      	ldr	r3, [pc, #36]	@ (8001ba4 <radio_Rx_filter_3+0x30>)
 8001b7e:	f107 0410 	add.w	r4, r7, #16
 8001b82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 8001b88:	2310      	movs	r3, #16
 8001b8a:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001b8c:	f107 020f 	add.w	r2, r7, #15
 8001b90:	f107 0310 	add.w	r3, r7, #16
 8001b94:	4619      	mov	r1, r3
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7fe fcde 	bl	8000558 <SPI_write>
}
 8001b9c:	bf00      	nop
 8001b9e:	3724      	adds	r7, #36	@ 0x24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd90      	pop	{r4, r7, pc}
 8001ba4:	08013684 	.word	0x08013684

08001ba8 <radio_PA_1>:

void radio_PA_1(HAL_StatusTypeDef* status) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PA_MODE_4};
 8001bb0:	4a0a      	ldr	r2, [pc, #40]	@ (8001bdc <radio_PA_1+0x34>)
 8001bb2:	f107 0310 	add.w	r3, r7, #16
 8001bb6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bba:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t size = sizeof(data);
 8001bbe:	2308      	movs	r3, #8
 8001bc0:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001bc2:	f107 020f 	add.w	r2, r7, #15
 8001bc6:	f107 0310 	add.w	r3, r7, #16
 8001bca:	4619      	mov	r1, r3
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7fe fcc3 	bl	8000558 <SPI_write>
}
 8001bd2:	bf00      	nop
 8001bd4:	3718      	adds	r7, #24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	08013694 	.word	0x08013694

08001be0 <radio_PA_2>:

void radio_PA_2(HAL_StatusTypeDef* status) {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_SYNTH_PFDCP_CPFF_7};
 8001be8:	4a0b      	ldr	r2, [pc, #44]	@ (8001c18 <radio_PA_2+0x38>)
 8001bea:	f107 030c 	add.w	r3, r7, #12
 8001bee:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bf0:	c303      	stmia	r3!, {r0, r1}
 8001bf2:	801a      	strh	r2, [r3, #0]
 8001bf4:	3302      	adds	r3, #2
 8001bf6:	0c12      	lsrs	r2, r2, #16
 8001bf8:	701a      	strb	r2, [r3, #0]
	uint8_t size = sizeof(data);
 8001bfa:	230b      	movs	r3, #11
 8001bfc:	72fb      	strb	r3, [r7, #11]
	SPI_write(status, data, &size);
 8001bfe:	f107 020b 	add.w	r2, r7, #11
 8001c02:	f107 030c 	add.w	r3, r7, #12
 8001c06:	4619      	mov	r1, r3
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7fe fca5 	bl	8000558 <SPI_write>
}
 8001c0e:	bf00      	nop
 8001c10:	3718      	adds	r7, #24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	0801369c 	.word	0x0801369c

08001c1c <radio_masks>:

void radio_masks(HAL_StatusTypeDef* status) {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b088      	sub	sp, #32
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MATCH_VALUE_1_12};
 8001c24:	4b0a      	ldr	r3, [pc, #40]	@ (8001c50 <radio_masks+0x34>)
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
	uint8_t size = sizeof(data);
 8001c34:	2310      	movs	r3, #16
 8001c36:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001c38:	f107 020f 	add.w	r2, r7, #15
 8001c3c:	f107 0310 	add.w	r3, r7, #16
 8001c40:	4619      	mov	r1, r3
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7fe fc88 	bl	8000558 <SPI_write>
}
 8001c48:	bf00      	nop
 8001c4a:	3720      	adds	r7, #32
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	000c3011 	.word	0x000c3011

08001c54 <radio_PLL>:

void radio_PLL(HAL_StatusTypeDef* status) {
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_FREQ_CONTROL_INTE_8};
 8001c5c:	4a09      	ldr	r2, [pc, #36]	@ (8001c84 <radio_PLL+0x30>)
 8001c5e:	f107 030c 	add.w	r3, r7, #12
 8001c62:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c64:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t size = sizeof(data);
 8001c68:	230c      	movs	r3, #12
 8001c6a:	72fb      	strb	r3, [r7, #11]
	SPI_write(status, data, &size);
 8001c6c:	f107 020b 	add.w	r2, r7, #11
 8001c70:	f107 030c 	add.w	r3, r7, #12
 8001c74:	4619      	mov	r1, r3
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f7fe fc6e 	bl	8000558 <SPI_write>
}
 8001c7c:	bf00      	nop
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	080136a8 	.word	0x080136a8

08001c88 <radio_mode_Rx>:

// Modes
void radio_mode_Rx(HAL_StatusTypeDef* status) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
	// Enable Rx and then enter ready mode
	uint8_t data[] = {0x32, 0, 0, 0, 60, 0, 8, 8, 8};
 8001c90:	4a09      	ldr	r2, [pc, #36]	@ (8001cb8 <radio_mode_Rx+0x30>)
 8001c92:	f107 030c 	add.w	r3, r7, #12
 8001c96:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c98:	c303      	stmia	r3!, {r0, r1}
 8001c9a:	701a      	strb	r2, [r3, #0]
	uint8_t size = sizeof(data);
 8001c9c:	2309      	movs	r3, #9
 8001c9e:	72fb      	strb	r3, [r7, #11]
	SPI_write(status, data, &size);
 8001ca0:	f107 020b 	add.w	r2, r7, #11
 8001ca4:	f107 030c 	add.w	r3, r7, #12
 8001ca8:	4619      	mov	r1, r3
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7fe fc54 	bl	8000558 <SPI_write>
}
 8001cb0:	bf00      	nop
 8001cb2:	3718      	adds	r7, #24
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	080136b4 	.word	0x080136b4

08001cbc <radio_write_FIFO>:

void radio_write_FIFO(HAL_StatusTypeDef* status, uint8_t* data) {
 8001cbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001cc0:	b087      	sub	sp, #28
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	6039      	str	r1, [r7, #0]
 8001cc8:	466b      	mov	r3, sp
 8001cca:	461e      	mov	r6, r3
	uint8_t size = 61;
 8001ccc:	233d      	movs	r3, #61	@ 0x3d
 8001cce:	72fb      	strb	r3, [r7, #11]
	uint8_t command[size];
 8001cd0:	7af9      	ldrb	r1, [r7, #11]
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	b2cb      	uxtb	r3, r1
 8001cda:	2200      	movs	r2, #0
 8001cdc:	4698      	mov	r8, r3
 8001cde:	4691      	mov	r9, r2
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	f04f 0300 	mov.w	r3, #0
 8001ce8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cf0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cf4:	b2cb      	uxtb	r3, r1
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	461c      	mov	r4, r3
 8001cfa:	4615      	mov	r5, r2
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	f04f 0300 	mov.w	r3, #0
 8001d04:	00eb      	lsls	r3, r5, #3
 8001d06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d0a:	00e2      	lsls	r2, r4, #3
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	3307      	adds	r3, #7
 8001d10:	08db      	lsrs	r3, r3, #3
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	ebad 0d03 	sub.w	sp, sp, r3
 8001d18:	466b      	mov	r3, sp
 8001d1a:	3300      	adds	r3, #0
 8001d1c:	60fb      	str	r3, [r7, #12]
	command[0] = 0x66;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2266      	movs	r2, #102	@ 0x66
 8001d22:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 1; i < size; i++) {
 8001d24:	2301      	movs	r3, #1
 8001d26:	75fb      	strb	r3, [r7, #23]
 8001d28:	e00a      	b.n	8001d40 <radio_write_FIFO+0x84>
		command[i] = data[i-1];
 8001d2a:	7dfb      	ldrb	r3, [r7, #23]
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	441a      	add	r2, r3
 8001d32:	7dfb      	ldrb	r3, [r7, #23]
 8001d34:	7811      	ldrb	r1, [r2, #0]
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 1; i < size; i++) {
 8001d3a:	7dfb      	ldrb	r3, [r7, #23]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	75fb      	strb	r3, [r7, #23]
 8001d40:	7afb      	ldrb	r3, [r7, #11]
 8001d42:	7dfa      	ldrb	r2, [r7, #23]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d3f0      	bcc.n	8001d2a <radio_write_FIFO+0x6e>
	}

	SPI_write(status, command, &size);
 8001d48:	f107 030b 	add.w	r3, r7, #11
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	68f9      	ldr	r1, [r7, #12]
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7fe fc01 	bl	8000558 <SPI_write>
 8001d56:	46b5      	mov	sp, r6
}
 8001d58:	bf00      	nop
 8001d5a:	371c      	adds	r7, #28
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08001d64 <radio_mode_Tx>:

void radio_mode_Tx(HAL_StatusTypeDef* status) {
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
	// Enable Tx mode. After transmission switch to Rx
	uint8_t data[] = {0x31, 0, 0x80, 0, 60, 0, 0};
 8001d6c:	4a0c      	ldr	r2, [pc, #48]	@ (8001da0 <radio_mode_Tx+0x3c>)
 8001d6e:	f107 0310 	add.w	r3, r7, #16
 8001d72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d76:	6018      	str	r0, [r3, #0]
 8001d78:	3304      	adds	r3, #4
 8001d7a:	8019      	strh	r1, [r3, #0]
 8001d7c:	3302      	adds	r3, #2
 8001d7e:	0c0a      	lsrs	r2, r1, #16
 8001d80:	701a      	strb	r2, [r3, #0]
	uint8_t size = sizeof(data);
 8001d82:	2307      	movs	r3, #7
 8001d84:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001d86:	f107 020f 	add.w	r2, r7, #15
 8001d8a:	f107 0310 	add.w	r3, r7, #16
 8001d8e:	4619      	mov	r1, r3
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7fe fbe1 	bl	8000558 <SPI_write>
}
 8001d96:	bf00      	nop
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	080136c0 	.word	0x080136c0

08001da4 <radio_send_packet>:

void radio_send_packet(HAL_StatusTypeDef* status, uint8_t* data) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
	// Fill FIFO
	radio_write_FIFO(status, data);
 8001dae:	6839      	ldr	r1, [r7, #0]
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff ff83 	bl	8001cbc <radio_write_FIFO>
	// Begin transmission
	radio_mode_Tx(status);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff ffd4 	bl	8001d64 <radio_mode_Tx>
}
 8001dbc:	bf00      	nop
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <radio_read_fifo>:

void radio_read_fifo(HAL_StatusTypeDef* status, uint8_t* data) {
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b094      	sub	sp, #80	@ 0x50
 8001dc8:	af02      	add	r7, sp, #8
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
	uint8_t dummy_data[61];
	dummy_data[0] = 0x77;
 8001dce:	2377      	movs	r3, #119	@ 0x77
 8001dd0:	723b      	strb	r3, [r7, #8]

	HAL_SPI_TransmitReceive(&hspi4, dummy_data, data, 61, 500);
 8001dd2:	f107 0108 	add.w	r1, r7, #8
 8001dd6:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	233d      	movs	r3, #61	@ 0x3d
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	4803      	ldr	r0, [pc, #12]	@ (8001df0 <radio_read_fifo+0x2c>)
 8001de2:	f00c fb97 	bl	800e514 <HAL_SPI_TransmitReceive>
}
 8001de6:	bf00      	nop
 8001de8:	3748      	adds	r7, #72	@ 0x48
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	2400039c 	.word	0x2400039c

08001df4 <radio_read_PH_status>:

uint8_t radio_read_PH_status(HAL_StatusTypeDef* status) {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b084      	sub	sp, #16
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
	uint8_t data[2] = {0x21, 0xFF}; //Leave all interrupts pending or they will reset themselves
 8001dfc:	f64f 7321 	movw	r3, #65313	@ 0xff21
 8001e00:	81bb      	strh	r3, [r7, #12]
	uint8_t size = 2;
 8001e02:	2302      	movs	r3, #2
 8001e04:	72fb      	strb	r3, [r7, #11]
	SPI_read(status, data, &size, &size);
 8001e06:	f107 030b 	add.w	r3, r7, #11
 8001e0a:	f107 020b 	add.w	r2, r7, #11
 8001e0e:	f107 010c 	add.w	r1, r7, #12
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7fe fbc4 	bl	80005a0 <SPI_read>

	uint8_t ph_status = data[0];
 8001e18:	7b3b      	ldrb	r3, [r7, #12]
 8001e1a:	73fb      	strb	r3, [r7, #15]
		// Incoming packet matched the filter


	}
	*/
	return ph_status;
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <radio_clear_PH_status>:

void radio_clear_PH_status(HAL_StatusTypeDef* status) {
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b084      	sub	sp, #16
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
	uint8_t data[2] = {0x21, 0x00}; //Leave all interrupts pending or they will reset themselves
 8001e2e:	2321      	movs	r3, #33	@ 0x21
 8001e30:	81bb      	strh	r3, [r7, #12]
	uint8_t size = 2;
 8001e32:	2302      	movs	r3, #2
 8001e34:	72fb      	strb	r3, [r7, #11]
	SPI_write(status, data, &size);
 8001e36:	f107 020b 	add.w	r2, r7, #11
 8001e3a:	f107 030c 	add.w	r3, r7, #12
 8001e3e:	4619      	mov	r1, r3
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7fe fb89 	bl	8000558 <SPI_write>
}
 8001e46:	bf00      	nop
 8001e48:	3710      	adds	r7, #16
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <radio_request_repetition>:

void radio_request_repetition(HAL_StatusTypeDef* status) {
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b092      	sub	sp, #72	@ 0x48
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
	uint8_t data[60] = {0};
 8001e56:	f107 030c 	add.w	r3, r7, #12
 8001e5a:	223c      	movs	r2, #60	@ 0x3c
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f011 fada 	bl	8013418 <memset>
	radio_send_packet(status, data);
 8001e64:	f107 030c 	add.w	r3, r7, #12
 8001e68:	4619      	mov	r1, r3
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f7ff ff9a 	bl	8001da4 <radio_send_packet>
}
 8001e70:	bf00      	nop
 8001e72:	3748      	adds	r7, #72	@ 0x48
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <radio_repetition_requested>:
void radio_repetition_requested (HAL_StatusTypeDef* status) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
	radio_mode_Tx(status); // Reuse data in TX FIFO
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff ff6f 	bl	8001d64 <radio_mode_Tx>
}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <setup>:
#include <routines.h>

void setup(HAL_StatusTypeDef* status, fault_flag* error_index) {
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b082      	sub	sp, #8
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	6039      	str	r1, [r7, #0]

	/// Issue POWER_UP command - wake transceiver up
		radio_power_up(status);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff fa65 	bl	8001368 <radio_power_up>
		if (*status != 0) {
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <setup+0x20>
			*error_index = RADIO_PWUP;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	2204      	movs	r2, #4
 8001eaa:	701a      	strb	r2, [r3, #0]
			return;
 8001eac:	e088      	b.n	8001fc0 <setup+0x132>
		}

	// USB-C
	PowerInit(status);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7fe fbf4 	bl	800069c <PowerInit>

	/// Check for errors, if non are found -> increase supply current
	if (*status == 0) {
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d107      	bne.n	8001ecc <setup+0x3e>
		PowerIncreaseCurrent(status);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7fe fc56 	bl	800076e <PowerIncreaseCurrent>
		*error_index = POWER_INIT;
		return;
	}

	/// Check for error
	if (*status != 0) {
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d008      	beq.n	8001edc <setup+0x4e>
 8001eca:	e003      	b.n	8001ed4 <setup+0x46>
		*error_index = POWER_INIT;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	701a      	strb	r2, [r3, #0]
		return;
 8001ed2:	e075      	b.n	8001fc0 <setup+0x132>
		*error_index = POWER_INC;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	2202      	movs	r2, #2
 8001ed8:	701a      	strb	r2, [r3, #0]
		return;
 8001eda:	e071      	b.n	8001fc0 <setup+0x132>

	*/


	/// Issue radio setup
	radio_pins(status);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f7ff fb75 	bl	80015cc <radio_pins>
	radio_TCXO(status);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f7ff fb8e 	bl	8001604 <radio_TCXO>
	radio_global(status);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f7ff fba3 	bl	8001634 <radio_global>
	radio_interrupts(status);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f7ff fbbc 	bl	800166c <radio_interrupts>
	radio_fast_registers(status);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff fbd5 	bl	80016a4 <radio_fast_registers>
	radio_Tx(status);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7ff fbee 	bl	80016dc <radio_Tx>
	radio_sync(status);
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	f7ff fc05 	bl	8001710 <radio_sync>
	radio_packet_CRC(status);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff fc1c 	bl	8001744 <radio_packet_CRC>
	radio_Rx_thr(status);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff fc33 	bl	8001778 <radio_Rx_thr>
	radio_Rx_CRC_1(status);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f7ff fc4a 	bl	80017ac <radio_Rx_CRC_1>
	radio_Rx_CRC_2(status);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f7ff fc63 	bl	80017e4 <radio_Rx_CRC_2>
	radio_Rx_CRC_3(status);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f7ff fc7c 	bl	800181c <radio_Rx_CRC_3>
	radio_Rx_CRC_seed(status);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f7ff fc95 	bl	8001854 <radio_Rx_CRC_seed>
	radio_mod(status);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7ff fcaa 	bl	8001884 <radio_mod>
	radio_freq_dev(status);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7ff fcc1 	bl	80018b8 <radio_freq_dev>
	radio_Tx_ramp(status);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff fcda 	bl	80018f0 <radio_Tx_ramp>
	radio_NCO_offset(status);
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f7ff fcf1 	bl	8001924 <radio_NCO_offset>
	radio_AFC(status);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7ff fd08 	bl	8001958 <radio_AFC>
	radio_AGC_1(status);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff fd25 	bl	8001998 <radio_AGC_1>
	radio_AGC_2(status);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff fd3e 	bl	80019d0 <radio_AGC_2>
	radio_RAW(status);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f7ff fd55 	bl	8001a04 <radio_RAW>
	radio_search_period(status);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff fd6c 	bl	8001a38 <radio_search_period>
	radio_GFSK_thr(status);
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f7ff fd85 	bl	8001a70 <radio_GFSK_thr>
	radio_RSSI_thr(status);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7ff fd9e 	bl	8001aa8 <radio_RSSI_thr>
	radio_RSSI_att(status);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff fdb3 	bl	8001ad8 <radio_RSSI_att>
	radio_Rx_filter_1(status);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff fdca 	bl	8001b0c <radio_Rx_filter_1>
	radio_Rx_filter_2(status);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7ff fde1 	bl	8001b40 <radio_Rx_filter_2>
	radio_Rx_filter_3(status);
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7ff fdf8 	bl	8001b74 <radio_Rx_filter_3>
	radio_PA_1(status);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f7ff fe0f 	bl	8001ba8 <radio_PA_1>
	radio_PA_2(status);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7ff fe28 	bl	8001be0 <radio_PA_2>
	radio_masks(status);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f7ff fe43 	bl	8001c1c <radio_masks>
	radio_PLL(status);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f7ff fe5c 	bl	8001c54 <radio_PLL>

	// Check for errors
	if (*status != 0) {
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d003      	beq.n	8001fac <setup+0x11e>
		*error_index = RADIO_SETUP;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	2205      	movs	r2, #5
 8001fa8:	701a      	strb	r2, [r3, #0]
		return;
 8001faa:	e009      	b.n	8001fc0 <setup+0x132>
	}

	// Init. radio into receive mode
	radio_mode_Rx(status);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7ff fe6b 	bl	8001c88 <radio_mode_Rx>
	if (*status != 0) {
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d002      	beq.n	8001fc0 <setup+0x132>
		*error_index = RADIO_SET_RX;
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	2206      	movs	r2, #6
 8001fbe:	701a      	strb	r2, [r3, #0]
	}

}
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <radio_ping>:
						 "==================================================\r\n";
	uint16_t TxBufferLen = sizeof(TxBuffer);
	CDC_Transmit_HS(TxBuffer, TxBufferLen);
}

void radio_ping(HAL_StatusTypeDef* status) {
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b092      	sub	sp, #72	@ 0x48
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
	// Fill 60byte packet with dummy data (all ones)
	uint8_t data[60];
	for (uint8_t i = 0; i < 60; i++) {
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001fd4:	e00b      	b.n	8001fee <radio_ping+0x28>
		data[i] = 0xFF;
 8001fd6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001fda:	3348      	adds	r3, #72	@ 0x48
 8001fdc:	443b      	add	r3, r7
 8001fde:	22ff      	movs	r2, #255	@ 0xff
 8001fe0:	f803 2c40 	strb.w	r2, [r3, #-64]
	for (uint8_t i = 0; i < 60; i++) {
 8001fe4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001fe8:	3301      	adds	r3, #1
 8001fea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8001fee:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001ff2:	2b3b      	cmp	r3, #59	@ 0x3b
 8001ff4:	d9ef      	bls.n	8001fd6 <radio_ping+0x10>
	}
	radio_send_packet(status, data);
 8001ff6:	f107 0308 	add.w	r3, r7, #8
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f7ff fed1 	bl	8001da4 <radio_send_packet>
}
 8002002:	bf00      	nop
 8002004:	3748      	adds	r7, #72	@ 0x48
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <get_img_res>:
void get_img_res(HAL_StatusTypeDef* status, uint8_t* img_mode) {
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
		/// VGA = 640 * 480 * 2 = 614400
		/// CIF = 352 * 288 * 2 = 202752
		/// QVGA = 320 * 240 * 2 = 153600
		/// QCIF = 176 * 144 * 2 = 50688

			uint8_t res = (*img_mode & 0b11110000);
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	f023 030f 	bic.w	r3, r3, #15
 800201e:	73fb      	strb	r3, [r7, #15]
			switch (res) {
 8002020:	7bfb      	ldrb	r3, [r7, #15]
 8002022:	2b30      	cmp	r3, #48	@ 0x30
 8002024:	d019      	beq.n	800205a <get_img_res+0x4e>
 8002026:	2b30      	cmp	r3, #48	@ 0x30
 8002028:	dc1c      	bgt.n	8002064 <get_img_res+0x58>
 800202a:	2b20      	cmp	r3, #32
 800202c:	d010      	beq.n	8002050 <get_img_res+0x44>
 800202e:	2b20      	cmp	r3, #32
 8002030:	dc18      	bgt.n	8002064 <get_img_res+0x58>
 8002032:	2b00      	cmp	r3, #0
 8002034:	d002      	beq.n	800203c <get_img_res+0x30>
 8002036:	2b10      	cmp	r3, #16
 8002038:	d005      	beq.n	8002046 <get_img_res+0x3a>
 800203a:	e013      	b.n	8002064 <get_img_res+0x58>
				case (0x00): {
					img_size = 614400;
 800203c:	4b10      	ldr	r3, [pc, #64]	@ (8002080 <get_img_res+0x74>)
 800203e:	f44f 2216 	mov.w	r2, #614400	@ 0x96000
 8002042:	601a      	str	r2, [r3, #0]
					break;
 8002044:	e015      	b.n	8002072 <get_img_res+0x66>
				}
				case (0x10): {
					img_size = 202752;
 8002046:	4b0e      	ldr	r3, [pc, #56]	@ (8002080 <get_img_res+0x74>)
 8002048:	f44f 3246 	mov.w	r2, #202752	@ 0x31800
 800204c:	601a      	str	r2, [r3, #0]
					break;
 800204e:	e010      	b.n	8002072 <get_img_res+0x66>
				}
				case (0x20): {
					img_size = 153600;
 8002050:	4b0b      	ldr	r3, [pc, #44]	@ (8002080 <get_img_res+0x74>)
 8002052:	f44f 3216 	mov.w	r2, #153600	@ 0x25800
 8002056:	601a      	str	r2, [r3, #0]
					break;
 8002058:	e00b      	b.n	8002072 <get_img_res+0x66>
				}
				case (0x30): {
					img_size = 50688;
 800205a:	4b09      	ldr	r3, [pc, #36]	@ (8002080 <get_img_res+0x74>)
 800205c:	f44f 4246 	mov.w	r2, #50688	@ 0xc600
 8002060:	601a      	str	r2, [r3, #0]
					break;
 8002062:	e006      	b.n	8002072 <get_img_res+0x66>
				}
				default: {
					*status = HAL_ERROR;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	701a      	strb	r2, [r3, #0]
					img_size = 0;
 800206a:	4b05      	ldr	r3, [pc, #20]	@ (8002080 <get_img_res+0x74>)
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
				}
			}
}
 8002070:	bf00      	nop
 8002072:	bf00      	nop
 8002074:	3714      	adds	r7, #20
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	2400051c 	.word	0x2400051c

08002084 <capture_img>:
		packet_buffer[1] = *img_mode;
		radio_send_packet(status, packet_buffer);
		img_flag = 1; // Activate flag
}

void capture_img(HAL_StatusTypeDef* status, fault_flag* error_index, uint8_t* img_mode) {
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
	get_img_res(status, img_mode);
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f7ff ffba 	bl	800200c <get_img_res>

	// Realloc globally defined image buffer to required size
	uint8_t* prev_buff_loc = img_buffer;
 8002098:	4b1c      	ldr	r3, [pc, #112]	@ (800210c <capture_img+0x88>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	617b      	str	r3, [r7, #20]
	if (!((uint8_t*) realloc(img_buffer, img_size))) {
 800209e:	4b1b      	ldr	r3, [pc, #108]	@ (800210c <capture_img+0x88>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a1b      	ldr	r2, [pc, #108]	@ (8002110 <capture_img+0x8c>)
 80020a4:	6812      	ldr	r2, [r2, #0]
 80020a6:	4611      	mov	r1, r2
 80020a8:	4618      	mov	r0, r3
 80020aa:	f011 f97f 	bl	80133ac <realloc>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d109      	bne.n	80020c8 <capture_img+0x44>
		free(prev_buff_loc);
 80020b4:	6978      	ldr	r0, [r7, #20]
 80020b6:	f011 f8c3 	bl	8013240 <free>
		*status = HAL_ERROR;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2201      	movs	r2, #1
 80020be:	701a      	strb	r2, [r3, #0]
		*error_index = MEM_REALLOC;
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	220c      	movs	r2, #12
 80020c4:	701a      	strb	r2, [r3, #0]
		return;
 80020c6:	e01d      	b.n	8002104 <capture_img+0x80>
	}

	camera_init(status, img_mode);
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f7fe ffb0 	bl	8001030 <camera_init>
	if (*status != 0) {
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d003      	beq.n	80020e0 <capture_img+0x5c>
		*error_index = CAM_INIT;
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	2209      	movs	r2, #9
 80020dc:	701a      	strb	r2, [r3, #0]
		return;
 80020de:	e011      	b.n	8002104 <capture_img+0x80>
	}
	camera_capture_photo(status, img_buffer, &img_size);
 80020e0:	4b0a      	ldr	r3, [pc, #40]	@ (800210c <capture_img+0x88>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002110 <capture_img+0x8c>)
 80020e6:	4619      	mov	r1, r3
 80020e8:	68f8      	ldr	r0, [r7, #12]
 80020ea:	f7ff f91b 	bl	8001324 <camera_capture_photo>

	if (*status != 0) {
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <capture_img+0x7a>
		*error_index = CAM_CAPTURE;
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	220a      	movs	r2, #10
 80020fa:	701a      	strb	r2, [r3, #0]
		return;
 80020fc:	e002      	b.n	8002104 <capture_img+0x80>
	}
	img_flag = 1; // Set flag to indicate that image is stored in buffer and ready to be transmitted
 80020fe:	4b05      	ldr	r3, [pc, #20]	@ (8002114 <capture_img+0x90>)
 8002100:	2201      	movs	r2, #1
 8002102:	701a      	strb	r2, [r3, #0]

}
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	24000518 	.word	0x24000518
 8002110:	2400051c 	.word	0x2400051c
 8002114:	24000520 	.word	0x24000520

08002118 <transmit_img>:

void transmit_img(HAL_StatusTypeDef* status, fault_flag* error_index, uint32_t* index, uint32_t* size) {
 8002118:	b580      	push	{r7, lr}
 800211a:	b094      	sub	sp, #80	@ 0x50
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	607a      	str	r2, [r7, #4]
 8002124:	603b      	str	r3, [r7, #0]
	uint8_t packet[60];
	uint8_t prev_idex = *index;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
	// Load data block to packet
	for (uint8_t i = 0; i < 60; i++) {
 800212e:	2300      	movs	r3, #0
 8002130:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8002134:	e022      	b.n	800217c <transmit_img+0x64>
		if (*index >= *size) {
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	429a      	cmp	r2, r3
 8002140:	d306      	bcc.n	8002150 <transmit_img+0x38>
			img_flag = 0;
 8002142:	4b15      	ldr	r3, [pc, #84]	@ (8002198 <transmit_img+0x80>)
 8002144:	2200      	movs	r2, #0
 8002146:	701a      	strb	r2, [r3, #0]
			*size = 0x100000000;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	2200      	movs	r2, #0
 800214c:	601a      	str	r2, [r3, #0]
			break;
 800214e:	e019      	b.n	8002184 <transmit_img+0x6c>
		}
		packet[i] = img_buffer[*index];
 8002150:	4b12      	ldr	r3, [pc, #72]	@ (800219c <transmit_img+0x84>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	441a      	add	r2, r3
 800215a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800215e:	7812      	ldrb	r2, [r2, #0]
 8002160:	3350      	adds	r3, #80	@ 0x50
 8002162:	443b      	add	r3, r7
 8002164:	f803 2c40 	strb.w	r2, [r3, #-64]
		(*index)++;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	1c5a      	adds	r2, r3, #1
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 60; i++) {
 8002172:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002176:	3301      	adds	r3, #1
 8002178:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800217c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002180:	2b3b      	cmp	r3, #59	@ 0x3b
 8002182:	d9d8      	bls.n	8002136 <transmit_img+0x1e>
	}

	// Send packet
	radio_send_packet(status, &packet);
 8002184:	f107 0310 	add.w	r3, r7, #16
 8002188:	4619      	mov	r1, r3
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f7ff fe0a 	bl	8001da4 <radio_send_packet>
}
 8002190:	bf00      	nop
 8002192:	3750      	adds	r7, #80	@ 0x50
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	24000520 	.word	0x24000520
 800219c:	24000518 	.word	0x24000518

080021a0 <nirq_handler>:

void nirq_handler(HAL_StatusTypeDef* status, fault_flag* error_index, uint8_t* ping, uint8_t* ack, uint32_t* index) {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b098      	sub	sp, #96	@ 0x60
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
 80021ac:	603b      	str	r3, [r7, #0]

	// Packet handling
	uint8_t pending_interrupts = radio_read_PH_status(status);
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f7ff fe20 	bl	8001df4 <radio_read_PH_status>
 80021b4:	4603      	mov	r3, r0
 80021b6:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	uint8_t reg = 0;
 80021ba:	2300      	movs	r3, #0
 80021bc:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	uint8_t control = 0;
 80021c0:	2300      	movs	r3, #0
 80021c2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

	reg = pending_interrupts & (1 << 4);
 80021c6:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80021ca:	f003 0310 	and.w	r3, r3, #16
 80021ce:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	control = (1 << 4);
 80021d2:	2310      	movs	r3, #16
 80021d4:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

	// Directly receiving
	if (reg == control) {
 80021d8:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 80021dc:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80021e0:	429a      	cmp	r2, r3
 80021e2:	f040 80b5 	bne.w	8002350 <nirq_handler+0x1b0>
		// Read packet from FIFO
		uint8_t packet[61]; //Ignore the first byte
		uint8_t AAs = 0;
 80021e6:	2300      	movs	r3, #0
 80021e8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		uint8_t CCs = 0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
		uint8_t FFs = 0;
 80021f2:	2300      	movs	r3, #0
 80021f4:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
		uint8_t zeros = 0;
 80021f8:	2300      	movs	r3, #0
 80021fa:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c

		radio_read_fifo(status, packet);
 80021fe:	f107 0314 	add.w	r3, r7, #20
 8002202:	4619      	mov	r1, r3
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f7ff fddd 	bl	8001dc4 <radio_read_fifo>
		if (*status != 0) {
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d002      	beq.n	8002218 <nirq_handler+0x78>
			*status = HAL_ERROR;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2201      	movs	r2, #1
 8002216:	701a      	strb	r2, [r3, #0]

		}


		for (uint8_t i = 1; i < 61; i++) {
 8002218:	2301      	movs	r3, #1
 800221a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 800221e:	e03b      	b.n	8002298 <nirq_handler+0xf8>
			if (packet[i] == 0xAA) {
 8002220:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002224:	3360      	adds	r3, #96	@ 0x60
 8002226:	443b      	add	r3, r7
 8002228:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 800222c:	2baa      	cmp	r3, #170	@ 0xaa
 800222e:	d105      	bne.n	800223c <nirq_handler+0x9c>
				AAs++;
 8002230:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002234:	3301      	adds	r3, #1
 8002236:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800223a:	e028      	b.n	800228e <nirq_handler+0xee>
			}
			else if (packet[i] == 0xCC) {
 800223c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002240:	3360      	adds	r3, #96	@ 0x60
 8002242:	443b      	add	r3, r7
 8002244:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 8002248:	2bcc      	cmp	r3, #204	@ 0xcc
 800224a:	d105      	bne.n	8002258 <nirq_handler+0xb8>
				CCs++;
 800224c:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8002250:	3301      	adds	r3, #1
 8002252:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
 8002256:	e01a      	b.n	800228e <nirq_handler+0xee>
			}
			else if (packet[i] == 0xFF) {
 8002258:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800225c:	3360      	adds	r3, #96	@ 0x60
 800225e:	443b      	add	r3, r7
 8002260:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 8002264:	2bff      	cmp	r3, #255	@ 0xff
 8002266:	d105      	bne.n	8002274 <nirq_handler+0xd4>
				FFs++;
 8002268:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 800226c:	3301      	adds	r3, #1
 800226e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
 8002272:	e00c      	b.n	800228e <nirq_handler+0xee>
			}
			else if (packet[i] == 0) {
 8002274:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002278:	3360      	adds	r3, #96	@ 0x60
 800227a:	443b      	add	r3, r7
 800227c:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d104      	bne.n	800228e <nirq_handler+0xee>
				zeros++;
 8002284:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8002288:	3301      	adds	r3, #1
 800228a:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
		for (uint8_t i = 1; i < 61; i++) {
 800228e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002292:	3301      	adds	r3, #1
 8002294:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8002298:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800229c:	2b3c      	cmp	r3, #60	@ 0x3c
 800229e:	d9bf      	bls.n	8002220 <nirq_handler+0x80>
		// NOTE: When B&W data are transmitted, expect only half of RF_FIFO usage due to erased chrominance
		/// After Tx receives ACK packet, transmission of 60 bytes of image data interleaved with ACKs begins
		//--------------------------------------------------------------------------------------------------------

		// PING
		if (FFs == 60) {
 80022a0:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 80022a4:	2b3c      	cmp	r3, #60	@ 0x3c
 80022a6:	d10e      	bne.n	80022c6 <nirq_handler+0x126>
			if (*ping == 1) { // Response to ping received
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d103      	bne.n	80022b8 <nirq_handler+0x118>
				*ping = 2;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2202      	movs	r2, #2
 80022b4:	701a      	strb	r2, [r3, #0]
 80022b6:	e047      	b.n	8002348 <nirq_handler+0x1a8>

			} else {
				HAL_Delay(100);
 80022b8:	2064      	movs	r0, #100	@ 0x64
 80022ba:	f000 fe71 	bl	8002fa0 <HAL_Delay>
				radio_ping(status); // Send ping response
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f7ff fe81 	bl	8001fc6 <radio_ping>
 80022c4:	e040      	b.n	8002348 <nirq_handler+0x1a8>
			}
		}

		// Data retransmission request
		else if (zeros == 60) {
 80022c6:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 80022ca:	2b3c      	cmp	r3, #60	@ 0x3c
 80022cc:	d103      	bne.n	80022d6 <nirq_handler+0x136>
			radio_repetition_requested(status);
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f7ff fdd2 	bl	8001e78 <radio_repetition_requested>
 80022d4:	e038      	b.n	8002348 <nirq_handler+0x1a8>
		}
		/// ACK
		else if (AAs == 60) {
 80022d6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80022da:	2b3c      	cmp	r3, #60	@ 0x3c
 80022dc:	d103      	bne.n	80022e6 <nirq_handler+0x146>
			*ack = 1;
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	2201      	movs	r2, #1
 80022e2:	701a      	strb	r2, [r3, #0]
 80022e4:	e030      	b.n	8002348 <nirq_handler+0x1a8>
		}

		/// TELEMETRY

		/// IMG
		else if (CCs == 59) {
 80022e6:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80022ea:	2b3b      	cmp	r3, #59	@ 0x3b
 80022ec:	d10a      	bne.n	8002304 <nirq_handler+0x164>
			uint8_t img_mode = packet[2];
 80022ee:	7dbb      	ldrb	r3, [r7, #22]
 80022f0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
			capture_img(status, error_index, &img_mode);
 80022f4:	f107 0353 	add.w	r3, r7, #83	@ 0x53
 80022f8:	461a      	mov	r2, r3
 80022fa:	68b9      	ldr	r1, [r7, #8]
 80022fc:	68f8      	ldr	r0, [r7, #12]
 80022fe:	f7ff fec1 	bl	8002084 <capture_img>
 8002302:	e021      	b.n	8002348 <nirq_handler+0x1a8>

		}
		else if (img_flag) {
 8002304:	4b58      	ldr	r3, [pc, #352]	@ (8002468 <nirq_handler+0x2c8>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d01d      	beq.n	8002348 <nirq_handler+0x1a8>
			for (uint8_t i = 1; i < 61; i++) {
 800230c:	2301      	movs	r3, #1
 800230e:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 8002312:	e015      	b.n	8002340 <nirq_handler+0x1a0>
				img_buffer[*index] = packet[i];
 8002314:	f897 205a 	ldrb.w	r2, [r7, #90]	@ 0x5a
 8002318:	4b54      	ldr	r3, [pc, #336]	@ (800246c <nirq_handler+0x2cc>)
 800231a:	6819      	ldr	r1, [r3, #0]
 800231c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	440b      	add	r3, r1
 8002322:	3260      	adds	r2, #96	@ 0x60
 8002324:	443a      	add	r2, r7
 8002326:	f812 2c4c 	ldrb.w	r2, [r2, #-76]
 800232a:	701a      	strb	r2, [r3, #0]
				(*index)++;
 800232c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	1c5a      	adds	r2, r3, #1
 8002332:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002334:	601a      	str	r2, [r3, #0]
			for (uint8_t i = 1; i < 61; i++) {
 8002336:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 800233a:	3301      	adds	r3, #1
 800233c:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
 8002340:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8002344:	2b3c      	cmp	r3, #60	@ 0x3c
 8002346:	d9e5      	bls.n	8002314 <nirq_handler+0x174>
			}
		}

		// Return from function as data are about to be transmitted
		radio_clear_PH_status(status);
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f7ff fd6c 	bl	8001e26 <radio_clear_PH_status>
 800234e:	e087      	b.n	8002460 <nirq_handler+0x2c0>
	// Receiving process - transceiver is not using this for some reason
	// 1. detect packet header
	// 2. Control CRC
	// 3. Read RX_FIFO

	reg = pending_interrupts & (1 << 7);
 8002350:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8002354:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002358:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	control = (1 << 7);
 800235c:	2380      	movs	r3, #128	@ 0x80
 800235e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54


	if (reg == control) {
 8002362:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8002366:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800236a:	429a      	cmp	r2, r3
 800236c:	d172      	bne.n	8002454 <nirq_handler+0x2b4>
		// An incoming packet matched filter, check CRC
		reg = pending_interrupts & ((1 << 3) | (1 << 2));
 800236e:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8002372:	f003 030c 	and.w	r3, r3, #12
 8002376:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
		control = 0;
 800237a:	2300      	movs	r3, #0
 800237c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
		if (reg == control) {
 8002380:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 8002384:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8002388:	429a      	cmp	r2, r3
 800238a:	d160      	bne.n	800244e <nirq_handler+0x2ae>
			// Read packet from FIFO
			uint8_t packet[60];
			uint8_t ones = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
			uint8_t zeros = 0;
 8002392:	2300      	movs	r3, #0
 8002394:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
			uint8_t rs= 60;
 8002398:	233c      	movs	r3, #60	@ 0x3c
 800239a:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
			uint8_t ts = 1;
 800239e:	2301      	movs	r3, #1
 80023a0:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51

			packet[0] = 0x77;
 80023a4:	2377      	movs	r3, #119	@ 0x77
 80023a6:	753b      	strb	r3, [r7, #20]
			SPI_read(status, packet, &ts, &rs);
 80023a8:	f107 0352 	add.w	r3, r7, #82	@ 0x52
 80023ac:	f107 0251 	add.w	r2, r7, #81	@ 0x51
 80023b0:	f107 0114 	add.w	r1, r7, #20
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f7fe f8f3 	bl	80005a0 <SPI_read>
			if (*status != 0) {
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d002      	beq.n	80023c8 <nirq_handler+0x228>
				*status = HAL_ERROR;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2201      	movs	r2, #1
 80023c6:	701a      	strb	r2, [r3, #0]

			}
			for (uint8_t i = 0; i < 60; i++) {
 80023c8:	2300      	movs	r3, #0
 80023ca:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80023ce:	e01f      	b.n	8002410 <nirq_handler+0x270>
				if (packet[i] == 0xFF) {
 80023d0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80023d4:	3360      	adds	r3, #96	@ 0x60
 80023d6:	443b      	add	r3, r7
 80023d8:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 80023dc:	2bff      	cmp	r3, #255	@ 0xff
 80023de:	d105      	bne.n	80023ec <nirq_handler+0x24c>
					ones++;
 80023e0:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 80023e4:	3301      	adds	r3, #1
 80023e6:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
 80023ea:	e00c      	b.n	8002406 <nirq_handler+0x266>
				}
				else if (packet[i] == 0) {
 80023ec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80023f0:	3360      	adds	r3, #96	@ 0x60
 80023f2:	443b      	add	r3, r7
 80023f4:	f813 3c4c 	ldrb.w	r3, [r3, #-76]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d104      	bne.n	8002406 <nirq_handler+0x266>
					zeros++;
 80023fc:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8002400:	3301      	adds	r3, #1
 8002402:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
			for (uint8_t i = 0; i < 60; i++) {
 8002406:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800240a:	3301      	adds	r3, #1
 800240c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 8002410:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8002414:	2b3b      	cmp	r3, #59	@ 0x3b
 8002416:	d9db      	bls.n	80023d0 <nirq_handler+0x230>
				}
			}

			// Data handling logic
			/// PING
			if (ones == 60) {
 8002418:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 800241c:	2b3c      	cmp	r3, #60	@ 0x3c
 800241e:	d10b      	bne.n	8002438 <nirq_handler+0x298>
				if (*ping == 1) { // Response to ping received
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d103      	bne.n	8002430 <nirq_handler+0x290>
					*ping = 2;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2202      	movs	r2, #2
 800242c:	701a      	strb	r2, [r3, #0]
 800242e:	e00a      	b.n	8002446 <nirq_handler+0x2a6>

				}
				else {
					radio_ping(status); // Send ping response
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f7ff fdc8 	bl	8001fc6 <radio_ping>
 8002436:	e006      	b.n	8002446 <nirq_handler+0x2a6>
				}
			}

			// Data retransmission request
			else if (zeros == 60) {
 8002438:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 800243c:	2b3c      	cmp	r3, #60	@ 0x3c
 800243e:	d102      	bne.n	8002446 <nirq_handler+0x2a6>
				radio_repetition_requested(status);
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f7ff fd19 	bl	8001e78 <radio_repetition_requested>
			/// TELEMETRY

			/// IMG

			// Clear IRQ and wait for transmission
			radio_clear_PH_status(status);
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f7ff fced 	bl	8001e26 <radio_clear_PH_status>
 800244c:	e008      	b.n	8002460 <nirq_handler+0x2c0>
			return;
		}

		// Request packet retransmission
		else {
			radio_request_repetition(status);
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f7ff fcfd 	bl	8001e4e <radio_request_repetition>
		// Buffer transmitted - switch to RX and listen
		radio_mode_Rx(status);
	}

	*/
	radio_clear_PH_status(status);
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	f7ff fce6 	bl	8001e26 <radio_clear_PH_status>
	radio_mode_Rx(status);
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f7ff fc14 	bl	8001c88 <radio_mode_Rx>



}
 8002460:	3760      	adds	r7, #96	@ 0x60
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	24000520 	.word	0x24000520
 800246c:	24000518 	.word	0x24000518

08002470 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002476:	4b0a      	ldr	r3, [pc, #40]	@ (80024a0 <HAL_MspInit+0x30>)
 8002478:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800247c:	4a08      	ldr	r2, [pc, #32]	@ (80024a0 <HAL_MspInit+0x30>)
 800247e:	f043 0302 	orr.w	r3, r3, #2
 8002482:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8002486:	4b06      	ldr	r3, [pc, #24]	@ (80024a0 <HAL_MspInit+0x30>)
 8002488:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800248c:	f003 0302 	and.w	r3, r3, #2
 8002490:	607b      	str	r3, [r7, #4]
 8002492:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	58024400 	.word	0x58024400

080024a4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b0be      	sub	sp, #248	@ 0xf8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024ac:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80024b0:	2200      	movs	r2, #0
 80024b2:	601a      	str	r2, [r3, #0]
 80024b4:	605a      	str	r2, [r3, #4]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	60da      	str	r2, [r3, #12]
 80024ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024bc:	f107 0320 	add.w	r3, r7, #32
 80024c0:	22c0      	movs	r2, #192	@ 0xc0
 80024c2:	2100      	movs	r1, #0
 80024c4:	4618      	mov	r0, r3
 80024c6:	f010 ffa7 	bl	8013418 <memset>
  if(hadc->Instance==ADC1)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a6f      	ldr	r2, [pc, #444]	@ (800268c <HAL_ADC_MspInit+0x1e8>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	f040 8087 	bne.w	80025e4 <HAL_ADC_MspInit+0x140>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80024d6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80024da:	f04f 0300 	mov.w	r3, #0
 80024de:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 80024e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80024e6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024ea:	f107 0320 	add.w	r3, r7, #32
 80024ee:	4618      	mov	r0, r3
 80024f0:	f009 f8f4 	bl	800b6dc <HAL_RCCEx_PeriphCLKConfig>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <HAL_ADC_MspInit+0x5a>
    {
      Error_Handler();
 80024fa:	f7fe fd93 	bl	8001024 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80024fe:	4b64      	ldr	r3, [pc, #400]	@ (8002690 <HAL_ADC_MspInit+0x1ec>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	3301      	adds	r3, #1
 8002504:	4a62      	ldr	r2, [pc, #392]	@ (8002690 <HAL_ADC_MspInit+0x1ec>)
 8002506:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002508:	4b61      	ldr	r3, [pc, #388]	@ (8002690 <HAL_ADC_MspInit+0x1ec>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d10e      	bne.n	800252e <HAL_ADC_MspInit+0x8a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002510:	4b60      	ldr	r3, [pc, #384]	@ (8002694 <HAL_ADC_MspInit+0x1f0>)
 8002512:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8002516:	4a5f      	ldr	r2, [pc, #380]	@ (8002694 <HAL_ADC_MspInit+0x1f0>)
 8002518:	f043 0320 	orr.w	r3, r3, #32
 800251c:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8002520:	4b5c      	ldr	r3, [pc, #368]	@ (8002694 <HAL_ADC_MspInit+0x1f0>)
 8002522:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8002526:	f003 0320 	and.w	r3, r3, #32
 800252a:	61fb      	str	r3, [r7, #28]
 800252c:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800252e:	4b59      	ldr	r3, [pc, #356]	@ (8002694 <HAL_ADC_MspInit+0x1f0>)
 8002530:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002534:	4a57      	ldr	r2, [pc, #348]	@ (8002694 <HAL_ADC_MspInit+0x1f0>)
 8002536:	f043 0301 	orr.w	r3, r3, #1
 800253a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800253e:	4b55      	ldr	r3, [pc, #340]	@ (8002694 <HAL_ADC_MspInit+0x1f0>)
 8002540:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	61bb      	str	r3, [r7, #24]
 800254a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800254c:	4b51      	ldr	r3, [pc, #324]	@ (8002694 <HAL_ADC_MspInit+0x1f0>)
 800254e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002552:	4a50      	ldr	r2, [pc, #320]	@ (8002694 <HAL_ADC_MspInit+0x1f0>)
 8002554:	f043 0304 	orr.w	r3, r3, #4
 8002558:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800255c:	4b4d      	ldr	r3, [pc, #308]	@ (8002694 <HAL_ADC_MspInit+0x1f0>)
 800255e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	617b      	str	r3, [r7, #20]
 8002568:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800256a:	4b4a      	ldr	r3, [pc, #296]	@ (8002694 <HAL_ADC_MspInit+0x1f0>)
 800256c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002570:	4a48      	ldr	r2, [pc, #288]	@ (8002694 <HAL_ADC_MspInit+0x1f0>)
 8002572:	f043 0302 	orr.w	r3, r3, #2
 8002576:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800257a:	4b46      	ldr	r3, [pc, #280]	@ (8002694 <HAL_ADC_MspInit+0x1f0>)
 800257c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	613b      	str	r3, [r7, #16]
 8002586:	693b      	ldr	r3, [r7, #16]
    PA0     ------> ADC1_INP16
    PA1     ------> ADC1_INN16
    PC4     ------> ADC1_INP4
    PB0     ------> ADC1_INP9
    */
    GPIO_InitStruct.Pin = NTC_2__Pin|NTC_2_A1_Pin;
 8002588:	2303      	movs	r3, #3
 800258a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800258e:	2303      	movs	r3, #3
 8002590:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002594:	2300      	movs	r3, #0
 8002596:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800259e:	4619      	mov	r1, r3
 80025a0:	483d      	ldr	r0, [pc, #244]	@ (8002698 <HAL_ADC_MspInit+0x1f4>)
 80025a2:	f005 fc53 	bl	8007e4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CC1_Pin;
 80025a6:	2310      	movs	r3, #16
 80025a8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025ac:	2303      	movs	r3, #3
 80025ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b2:	2300      	movs	r3, #0
 80025b4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(CC1_GPIO_Port, &GPIO_InitStruct);
 80025b8:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80025bc:	4619      	mov	r1, r3
 80025be:	4837      	ldr	r0, [pc, #220]	@ (800269c <HAL_ADC_MspInit+0x1f8>)
 80025c0:	f005 fc44 	bl	8007e4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_VBUS_Pin;
 80025c4:	2301      	movs	r3, #1
 80025c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025ca:	2303      	movs	r3, #3
 80025cc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(ADC_VBUS_GPIO_Port, &GPIO_InitStruct);
 80025d6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80025da:	4619      	mov	r1, r3
 80025dc:	4830      	ldr	r0, [pc, #192]	@ (80026a0 <HAL_ADC_MspInit+0x1fc>)
 80025de:	f005 fc35 	bl	8007e4c <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 80025e2:	e04e      	b.n	8002682 <HAL_ADC_MspInit+0x1de>
  else if(hadc->Instance==ADC2)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a2e      	ldr	r2, [pc, #184]	@ (80026a4 <HAL_ADC_MspInit+0x200>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d149      	bne.n	8002682 <HAL_ADC_MspInit+0x1de>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80025ee:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80025f2:	f04f 0300 	mov.w	r3, #0
 80025f6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 80025fa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025fe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002602:	f107 0320 	add.w	r3, r7, #32
 8002606:	4618      	mov	r0, r3
 8002608:	f009 f868 	bl	800b6dc <HAL_RCCEx_PeriphCLKConfig>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <HAL_ADC_MspInit+0x172>
      Error_Handler();
 8002612:	f7fe fd07 	bl	8001024 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002616:	4b1e      	ldr	r3, [pc, #120]	@ (8002690 <HAL_ADC_MspInit+0x1ec>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	3301      	adds	r3, #1
 800261c:	4a1c      	ldr	r2, [pc, #112]	@ (8002690 <HAL_ADC_MspInit+0x1ec>)
 800261e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002620:	4b1b      	ldr	r3, [pc, #108]	@ (8002690 <HAL_ADC_MspInit+0x1ec>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d10e      	bne.n	8002646 <HAL_ADC_MspInit+0x1a2>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002628:	4b1a      	ldr	r3, [pc, #104]	@ (8002694 <HAL_ADC_MspInit+0x1f0>)
 800262a:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800262e:	4a19      	ldr	r2, [pc, #100]	@ (8002694 <HAL_ADC_MspInit+0x1f0>)
 8002630:	f043 0320 	orr.w	r3, r3, #32
 8002634:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8002638:	4b16      	ldr	r3, [pc, #88]	@ (8002694 <HAL_ADC_MspInit+0x1f0>)
 800263a:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800263e:	f003 0320 	and.w	r3, r3, #32
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002646:	4b13      	ldr	r3, [pc, #76]	@ (8002694 <HAL_ADC_MspInit+0x1f0>)
 8002648:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800264c:	4a11      	ldr	r2, [pc, #68]	@ (8002694 <HAL_ADC_MspInit+0x1f0>)
 800264e:	f043 0304 	orr.w	r3, r3, #4
 8002652:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002656:	4b0f      	ldr	r3, [pc, #60]	@ (8002694 <HAL_ADC_MspInit+0x1f0>)
 8002658:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	60bb      	str	r3, [r7, #8]
 8002662:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CC2_Pin;
 8002664:	2320      	movs	r3, #32
 8002666:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800266a:	2303      	movs	r3, #3
 800266c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002670:	2300      	movs	r3, #0
 8002672:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(CC2_GPIO_Port, &GPIO_InitStruct);
 8002676:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800267a:	4619      	mov	r1, r3
 800267c:	4807      	ldr	r0, [pc, #28]	@ (800269c <HAL_ADC_MspInit+0x1f8>)
 800267e:	f005 fbe5 	bl	8007e4c <HAL_GPIO_Init>
}
 8002682:	bf00      	nop
 8002684:	37f8      	adds	r7, #248	@ 0xf8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40022000 	.word	0x40022000
 8002690:	2400052c 	.word	0x2400052c
 8002694:	58024400 	.word	0x58024400
 8002698:	58020000 	.word	0x58020000
 800269c:	58020800 	.word	0x58020800
 80026a0:	58020400 	.word	0x58020400
 80026a4:	40022100 	.word	0x40022100

080026a8 <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08c      	sub	sp, #48	@ 0x30
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b0:	f107 031c 	add.w	r3, r7, #28
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	609a      	str	r2, [r3, #8]
 80026bc:	60da      	str	r2, [r3, #12]
 80026be:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a6a      	ldr	r2, [pc, #424]	@ (8002870 <HAL_DCMI_MspInit+0x1c8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	f040 80ce 	bne.w	8002868 <HAL_DCMI_MspInit+0x1c0>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80026cc:	4b69      	ldr	r3, [pc, #420]	@ (8002874 <HAL_DCMI_MspInit+0x1cc>)
 80026ce:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 80026d2:	4a68      	ldr	r2, [pc, #416]	@ (8002874 <HAL_DCMI_MspInit+0x1cc>)
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	f8c2 313c 	str.w	r3, [r2, #316]	@ 0x13c
 80026dc:	4b65      	ldr	r3, [pc, #404]	@ (8002874 <HAL_DCMI_MspInit+0x1cc>)
 80026de:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	61bb      	str	r3, [r7, #24]
 80026e8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ea:	4b62      	ldr	r3, [pc, #392]	@ (8002874 <HAL_DCMI_MspInit+0x1cc>)
 80026ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80026f0:	4a60      	ldr	r2, [pc, #384]	@ (8002874 <HAL_DCMI_MspInit+0x1cc>)
 80026f2:	f043 0301 	orr.w	r3, r3, #1
 80026f6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80026fa:	4b5e      	ldr	r3, [pc, #376]	@ (8002874 <HAL_DCMI_MspInit+0x1cc>)
 80026fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002700:	f003 0301 	and.w	r3, r3, #1
 8002704:	617b      	str	r3, [r7, #20]
 8002706:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002708:	4b5a      	ldr	r3, [pc, #360]	@ (8002874 <HAL_DCMI_MspInit+0x1cc>)
 800270a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800270e:	4a59      	ldr	r2, [pc, #356]	@ (8002874 <HAL_DCMI_MspInit+0x1cc>)
 8002710:	f043 0304 	orr.w	r3, r3, #4
 8002714:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002718:	4b56      	ldr	r3, [pc, #344]	@ (8002874 <HAL_DCMI_MspInit+0x1cc>)
 800271a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800271e:	f003 0304 	and.w	r3, r3, #4
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002726:	4b53      	ldr	r3, [pc, #332]	@ (8002874 <HAL_DCMI_MspInit+0x1cc>)
 8002728:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800272c:	4a51      	ldr	r2, [pc, #324]	@ (8002874 <HAL_DCMI_MspInit+0x1cc>)
 800272e:	f043 0308 	orr.w	r3, r3, #8
 8002732:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002736:	4b4f      	ldr	r3, [pc, #316]	@ (8002874 <HAL_DCMI_MspInit+0x1cc>)
 8002738:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800273c:	f003 0308 	and.w	r3, r3, #8
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002744:	4b4b      	ldr	r3, [pc, #300]	@ (8002874 <HAL_DCMI_MspInit+0x1cc>)
 8002746:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800274a:	4a4a      	ldr	r2, [pc, #296]	@ (8002874 <HAL_DCMI_MspInit+0x1cc>)
 800274c:	f043 0302 	orr.w	r3, r3, #2
 8002750:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002754:	4b47      	ldr	r3, [pc, #284]	@ (8002874 <HAL_DCMI_MspInit+0x1cc>)
 8002756:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	60bb      	str	r3, [r7, #8]
 8002760:	68bb      	ldr	r3, [r7, #8]
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PB8     ------> DCMI_D6
    PB9     ------> DCMI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8002762:	2350      	movs	r3, #80	@ 0x50
 8002764:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002766:	2302      	movs	r3, #2
 8002768:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276a:	2300      	movs	r3, #0
 800276c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800276e:	2303      	movs	r3, #3
 8002770:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002772:	230d      	movs	r3, #13
 8002774:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002776:	f107 031c 	add.w	r3, r7, #28
 800277a:	4619      	mov	r1, r3
 800277c:	483e      	ldr	r0, [pc, #248]	@ (8002878 <HAL_DCMI_MspInit+0x1d0>)
 800277e:	f005 fb65 	bl	8007e4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8002782:	f44f 633c 	mov.w	r3, #3008	@ 0xbc0
 8002786:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002788:	2302      	movs	r3, #2
 800278a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800278c:	2300      	movs	r3, #0
 800278e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002790:	2303      	movs	r3, #3
 8002792:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002794:	230d      	movs	r3, #13
 8002796:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002798:	f107 031c 	add.w	r3, r7, #28
 800279c:	4619      	mov	r1, r3
 800279e:	4837      	ldr	r0, [pc, #220]	@ (800287c <HAL_DCMI_MspInit+0x1d4>)
 80027a0:	f005 fb54 	bl	8007e4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80027a4:	2308      	movs	r3, #8
 80027a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a8:	2302      	movs	r3, #2
 80027aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b0:	2303      	movs	r3, #3
 80027b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80027b4:	230d      	movs	r3, #13
 80027b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027b8:	f107 031c 	add.w	r3, r7, #28
 80027bc:	4619      	mov	r1, r3
 80027be:	4830      	ldr	r0, [pc, #192]	@ (8002880 <HAL_DCMI_MspInit+0x1d8>)
 80027c0:	f005 fb44 	bl	8007e4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80027c4:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80027c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ca:	2302      	movs	r3, #2
 80027cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ce:	2300      	movs	r3, #0
 80027d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027d2:	2303      	movs	r3, #3
 80027d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80027d6:	230d      	movs	r3, #13
 80027d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027da:	f107 031c 	add.w	r3, r7, #28
 80027de:	4619      	mov	r1, r3
 80027e0:	4828      	ldr	r0, [pc, #160]	@ (8002884 <HAL_DCMI_MspInit+0x1dc>)
 80027e2:	f005 fb33 	bl	8007e4c <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 80027e6:	4b28      	ldr	r3, [pc, #160]	@ (8002888 <HAL_DCMI_MspInit+0x1e0>)
 80027e8:	4a28      	ldr	r2, [pc, #160]	@ (800288c <HAL_DCMI_MspInit+0x1e4>)
 80027ea:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI_PSSI;
 80027ec:	4b26      	ldr	r3, [pc, #152]	@ (8002888 <HAL_DCMI_MspInit+0x1e0>)
 80027ee:	224b      	movs	r2, #75	@ 0x4b
 80027f0:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027f2:	4b25      	ldr	r3, [pc, #148]	@ (8002888 <HAL_DCMI_MspInit+0x1e0>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 80027f8:	4b23      	ldr	r3, [pc, #140]	@ (8002888 <HAL_DCMI_MspInit+0x1e0>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 80027fe:	4b22      	ldr	r3, [pc, #136]	@ (8002888 <HAL_DCMI_MspInit+0x1e0>)
 8002800:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002804:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002806:	4b20      	ldr	r3, [pc, #128]	@ (8002888 <HAL_DCMI_MspInit+0x1e0>)
 8002808:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800280c:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800280e:	4b1e      	ldr	r3, [pc, #120]	@ (8002888 <HAL_DCMI_MspInit+0x1e0>)
 8002810:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002814:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8002816:	4b1c      	ldr	r3, [pc, #112]	@ (8002888 <HAL_DCMI_MspInit+0x1e0>)
 8002818:	2200      	movs	r2, #0
 800281a:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800281c:	4b1a      	ldr	r3, [pc, #104]	@ (8002888 <HAL_DCMI_MspInit+0x1e0>)
 800281e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002822:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002824:	4b18      	ldr	r3, [pc, #96]	@ (8002888 <HAL_DCMI_MspInit+0x1e0>)
 8002826:	2204      	movs	r2, #4
 8002828:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800282a:	4b17      	ldr	r3, [pc, #92]	@ (8002888 <HAL_DCMI_MspInit+0x1e0>)
 800282c:	2203      	movs	r2, #3
 800282e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8002830:	4b15      	ldr	r3, [pc, #84]	@ (8002888 <HAL_DCMI_MspInit+0x1e0>)
 8002832:	2200      	movs	r2, #0
 8002834:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002836:	4b14      	ldr	r3, [pc, #80]	@ (8002888 <HAL_DCMI_MspInit+0x1e0>)
 8002838:	2200      	movs	r2, #0
 800283a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 800283c:	4812      	ldr	r0, [pc, #72]	@ (8002888 <HAL_DCMI_MspInit+0x1e0>)
 800283e:	f001 ff77 	bl	8004730 <HAL_DMA_Init>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <HAL_DCMI_MspInit+0x1a4>
    {
      Error_Handler();
 8002848:	f7fe fbec 	bl	8001024 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a0e      	ldr	r2, [pc, #56]	@ (8002888 <HAL_DCMI_MspInit+0x1e0>)
 8002850:	649a      	str	r2, [r3, #72]	@ 0x48
 8002852:	4a0d      	ldr	r2, [pc, #52]	@ (8002888 <HAL_DCMI_MspInit+0x1e0>)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_PSSI_IRQn, 0, 0);
 8002858:	2200      	movs	r2, #0
 800285a:	2100      	movs	r1, #0
 800285c:	204e      	movs	r0, #78	@ 0x4e
 800285e:	f001 fbc4 	bl	8003fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_PSSI_IRQn);
 8002862:	204e      	movs	r0, #78	@ 0x4e
 8002864:	f001 fbdb 	bl	800401e <HAL_NVIC_EnableIRQ>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 8002868:	bf00      	nop
 800286a:	3730      	adds	r7, #48	@ 0x30
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	48020000 	.word	0x48020000
 8002874:	58024400 	.word	0x58024400
 8002878:	58020000 	.word	0x58020000
 800287c:	58020800 	.word	0x58020800
 8002880:	58020c00 	.word	0x58020c00
 8002884:	58020400 	.word	0x58020400
 8002888:	240002d0 	.word	0x240002d0
 800288c:	40020010 	.word	0x40020010

08002890 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b0ba      	sub	sp, #232	@ 0xe8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002898:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	605a      	str	r2, [r3, #4]
 80028a2:	609a      	str	r2, [r3, #8]
 80028a4:	60da      	str	r2, [r3, #12]
 80028a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028a8:	f107 0310 	add.w	r3, r7, #16
 80028ac:	22c0      	movs	r2, #192	@ 0xc0
 80028ae:	2100      	movs	r1, #0
 80028b0:	4618      	mov	r0, r3
 80028b2:	f010 fdb1 	bl	8013418 <memset>
  if(hi2c->Instance==I2C2)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a27      	ldr	r2, [pc, #156]	@ (8002958 <HAL_I2C_MspInit+0xc8>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d146      	bne.n	800294e <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80028c0:	f04f 0208 	mov.w	r2, #8
 80028c4:	f04f 0300 	mov.w	r3, #0
 80028c8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80028cc:	2300      	movs	r3, #0
 80028ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028d2:	f107 0310 	add.w	r3, r7, #16
 80028d6:	4618      	mov	r0, r3
 80028d8:	f008 ff00 	bl	800b6dc <HAL_RCCEx_PeriphCLKConfig>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d001      	beq.n	80028e6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80028e2:	f7fe fb9f 	bl	8001024 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e6:	4b1d      	ldr	r3, [pc, #116]	@ (800295c <HAL_I2C_MspInit+0xcc>)
 80028e8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80028ec:	4a1b      	ldr	r2, [pc, #108]	@ (800295c <HAL_I2C_MspInit+0xcc>)
 80028ee:	f043 0302 	orr.w	r3, r3, #2
 80028f2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80028f6:	4b19      	ldr	r3, [pc, #100]	@ (800295c <HAL_I2C_MspInit+0xcc>)
 80028f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002904:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002908:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800290c:	2312      	movs	r3, #18
 800290e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002912:	2301      	movs	r3, #1
 8002914:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002918:	2303      	movs	r3, #3
 800291a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800291e:	2304      	movs	r3, #4
 8002920:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002924:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002928:	4619      	mov	r1, r3
 800292a:	480d      	ldr	r0, [pc, #52]	@ (8002960 <HAL_I2C_MspInit+0xd0>)
 800292c:	f005 fa8e 	bl	8007e4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002930:	4b0a      	ldr	r3, [pc, #40]	@ (800295c <HAL_I2C_MspInit+0xcc>)
 8002932:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002936:	4a09      	ldr	r2, [pc, #36]	@ (800295c <HAL_I2C_MspInit+0xcc>)
 8002938:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800293c:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002940:	4b06      	ldr	r3, [pc, #24]	@ (800295c <HAL_I2C_MspInit+0xcc>)
 8002942:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002946:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800294a:	60bb      	str	r3, [r7, #8]
 800294c:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 800294e:	bf00      	nop
 8002950:	37e8      	adds	r7, #232	@ 0xe8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40005800 	.word	0x40005800
 800295c:	58024400 	.word	0x58024400
 8002960:	58020400 	.word	0x58020400

08002964 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b0ba      	sub	sp, #232	@ 0xe8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800296c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	609a      	str	r2, [r3, #8]
 8002978:	60da      	str	r2, [r3, #12]
 800297a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800297c:	f107 0310 	add.w	r3, r7, #16
 8002980:	22c0      	movs	r2, #192	@ 0xc0
 8002982:	2100      	movs	r1, #0
 8002984:	4618      	mov	r0, r3
 8002986:	f010 fd47 	bl	8013418 <memset>
  if(hspi->Instance==SPI4)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a6b      	ldr	r2, [pc, #428]	@ (8002b3c <HAL_SPI_MspInit+0x1d8>)
 8002990:	4293      	cmp	r3, r2
 8002992:	f040 80cf 	bne.w	8002b34 <HAL_SPI_MspInit+0x1d0>

    /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8002996:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800299a:	f04f 0300 	mov.w	r3, #0
 800299e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80029a2:	2301      	movs	r3, #1
 80029a4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 80029a6:	2310      	movs	r3, #16
 80029a8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 80029aa:	2302      	movs	r3, #2
 80029ac:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 16;
 80029ae:	2310      	movs	r3, #16
 80029b0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80029b2:	2302      	movs	r3, #2
 80029b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80029b6:	23c0      	movs	r3, #192	@ 0xc0
 80029b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80029ba:	2300      	movs	r3, #0
 80029bc:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80029be:	2300      	movs	r3, #0
 80029c0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 80029c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80029c6:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029c8:	f107 0310 	add.w	r3, r7, #16
 80029cc:	4618      	mov	r0, r3
 80029ce:	f008 fe85 	bl	800b6dc <HAL_RCCEx_PeriphCLKConfig>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <HAL_SPI_MspInit+0x78>
    {
      Error_Handler();
 80029d8:	f7fe fb24 	bl	8001024 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80029dc:	4b58      	ldr	r3, [pc, #352]	@ (8002b40 <HAL_SPI_MspInit+0x1dc>)
 80029de:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80029e2:	4a57      	ldr	r2, [pc, #348]	@ (8002b40 <HAL_SPI_MspInit+0x1dc>)
 80029e4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80029e8:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 80029ec:	4b54      	ldr	r3, [pc, #336]	@ (8002b40 <HAL_SPI_MspInit+0x1dc>)
 80029ee:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 80029f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029f6:	60fb      	str	r3, [r7, #12]
 80029f8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029fa:	4b51      	ldr	r3, [pc, #324]	@ (8002b40 <HAL_SPI_MspInit+0x1dc>)
 80029fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002a00:	4a4f      	ldr	r2, [pc, #316]	@ (8002b40 <HAL_SPI_MspInit+0x1dc>)
 8002a02:	f043 0310 	orr.w	r3, r3, #16
 8002a06:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002a0a:	4b4d      	ldr	r3, [pc, #308]	@ (8002b40 <HAL_SPI_MspInit+0x1dc>)
 8002a0c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002a10:	f003 0310 	and.w	r3, r3, #16
 8002a14:	60bb      	str	r3, [r7, #8]
 8002a16:	68bb      	ldr	r3, [r7, #8]
    PE11     ------> SPI4_NSS
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = SPI4_nSEL_Pin;
 8002a18:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002a1c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a20:	2302      	movs	r3, #2
 8002a22:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a26:	2301      	movs	r3, #1
 8002a28:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002a32:	2305      	movs	r3, #5
 8002a34:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(SPI4_nSEL_GPIO_Port, &GPIO_InitStruct);
 8002a38:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4841      	ldr	r0, [pc, #260]	@ (8002b44 <HAL_SPI_MspInit+0x1e0>)
 8002a40:	f005 fa04 	bl	8007e4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002a44:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8002a48:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a52:	2300      	movs	r3, #0
 8002a54:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002a5e:	2305      	movs	r3, #5
 8002a60:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a64:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4836      	ldr	r0, [pc, #216]	@ (8002b44 <HAL_SPI_MspInit+0x1e0>)
 8002a6c:	f005 f9ee 	bl	8007e4c <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA1_Stream1;
 8002a70:	4b35      	ldr	r3, [pc, #212]	@ (8002b48 <HAL_SPI_MspInit+0x1e4>)
 8002a72:	4a36      	ldr	r2, [pc, #216]	@ (8002b4c <HAL_SPI_MspInit+0x1e8>)
 8002a74:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 8002a76:	4b34      	ldr	r3, [pc, #208]	@ (8002b48 <HAL_SPI_MspInit+0x1e4>)
 8002a78:	2254      	movs	r2, #84	@ 0x54
 8002a7a:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a7c:	4b32      	ldr	r3, [pc, #200]	@ (8002b48 <HAL_SPI_MspInit+0x1e4>)
 8002a7e:	2240      	movs	r2, #64	@ 0x40
 8002a80:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a82:	4b31      	ldr	r3, [pc, #196]	@ (8002b48 <HAL_SPI_MspInit+0x1e4>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a88:	4b2f      	ldr	r3, [pc, #188]	@ (8002b48 <HAL_SPI_MspInit+0x1e4>)
 8002a8a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a8e:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a90:	4b2d      	ldr	r3, [pc, #180]	@ (8002b48 <HAL_SPI_MspInit+0x1e4>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a96:	4b2c      	ldr	r3, [pc, #176]	@ (8002b48 <HAL_SPI_MspInit+0x1e4>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8002a9c:	4b2a      	ldr	r3, [pc, #168]	@ (8002b48 <HAL_SPI_MspInit+0x1e4>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002aa2:	4b29      	ldr	r3, [pc, #164]	@ (8002b48 <HAL_SPI_MspInit+0x1e4>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002aa8:	4b27      	ldr	r3, [pc, #156]	@ (8002b48 <HAL_SPI_MspInit+0x1e4>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8002aae:	4826      	ldr	r0, [pc, #152]	@ (8002b48 <HAL_SPI_MspInit+0x1e4>)
 8002ab0:	f001 fe3e 	bl	8004730 <HAL_DMA_Init>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d001      	beq.n	8002abe <HAL_SPI_MspInit+0x15a>
    {
      Error_Handler();
 8002aba:	f7fe fab3 	bl	8001024 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a21      	ldr	r2, [pc, #132]	@ (8002b48 <HAL_SPI_MspInit+0x1e4>)
 8002ac2:	679a      	str	r2, [r3, #120]	@ 0x78
 8002ac4:	4a20      	ldr	r2, [pc, #128]	@ (8002b48 <HAL_SPI_MspInit+0x1e4>)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI4_RX Init */
    hdma_spi4_rx.Instance = DMA1_Stream2;
 8002aca:	4b21      	ldr	r3, [pc, #132]	@ (8002b50 <HAL_SPI_MspInit+0x1ec>)
 8002acc:	4a21      	ldr	r2, [pc, #132]	@ (8002b54 <HAL_SPI_MspInit+0x1f0>)
 8002ace:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 8002ad0:	4b1f      	ldr	r3, [pc, #124]	@ (8002b50 <HAL_SPI_MspInit+0x1ec>)
 8002ad2:	2253      	movs	r2, #83	@ 0x53
 8002ad4:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ad6:	4b1e      	ldr	r3, [pc, #120]	@ (8002b50 <HAL_SPI_MspInit+0x1ec>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002adc:	4b1c      	ldr	r3, [pc, #112]	@ (8002b50 <HAL_SPI_MspInit+0x1ec>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b50 <HAL_SPI_MspInit+0x1ec>)
 8002ae4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ae8:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002aea:	4b19      	ldr	r3, [pc, #100]	@ (8002b50 <HAL_SPI_MspInit+0x1ec>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002af0:	4b17      	ldr	r3, [pc, #92]	@ (8002b50 <HAL_SPI_MspInit+0x1ec>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8002af6:	4b16      	ldr	r3, [pc, #88]	@ (8002b50 <HAL_SPI_MspInit+0x1ec>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002afc:	4b14      	ldr	r3, [pc, #80]	@ (8002b50 <HAL_SPI_MspInit+0x1ec>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b02:	4b13      	ldr	r3, [pc, #76]	@ (8002b50 <HAL_SPI_MspInit+0x1ec>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8002b08:	4811      	ldr	r0, [pc, #68]	@ (8002b50 <HAL_SPI_MspInit+0x1ec>)
 8002b0a:	f001 fe11 	bl	8004730 <HAL_DMA_Init>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <HAL_SPI_MspInit+0x1b4>
    {
      Error_Handler();
 8002b14:	f7fe fa86 	bl	8001024 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a0d      	ldr	r2, [pc, #52]	@ (8002b50 <HAL_SPI_MspInit+0x1ec>)
 8002b1c:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002b1e:	4a0c      	ldr	r2, [pc, #48]	@ (8002b50 <HAL_SPI_MspInit+0x1ec>)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8002b24:	2200      	movs	r2, #0
 8002b26:	2100      	movs	r1, #0
 8002b28:	2054      	movs	r0, #84	@ 0x54
 8002b2a:	f001 fa5e 	bl	8003fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8002b2e:	2054      	movs	r0, #84	@ 0x54
 8002b30:	f001 fa75 	bl	800401e <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 8002b34:	bf00      	nop
 8002b36:	37e8      	adds	r7, #232	@ 0xe8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	40013400 	.word	0x40013400
 8002b40:	58024400 	.word	0x58024400
 8002b44:	58021000 	.word	0x58021000
 8002b48:	24000424 	.word	0x24000424
 8002b4c:	40020028 	.word	0x40020028
 8002b50:	2400049c 	.word	0x2400049c
 8002b54:	40020040 	.word	0x40020040

08002b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b5c:	bf00      	nop
 8002b5e:	e7fd      	b.n	8002b5c <NMI_Handler+0x4>

08002b60 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b64:	bf00      	nop
 8002b66:	e7fd      	b.n	8002b64 <HardFault_Handler+0x4>

08002b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b6c:	bf00      	nop
 8002b6e:	e7fd      	b.n	8002b6c <MemManage_Handler+0x4>

08002b70 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b74:	bf00      	nop
 8002b76:	e7fd      	b.n	8002b74 <BusFault_Handler+0x4>

08002b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b7c:	bf00      	nop
 8002b7e:	e7fd      	b.n	8002b7c <UsageFault_Handler+0x4>

08002b80 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b84:	bf00      	nop
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr

08002b8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b92:	bf00      	nop
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ba0:	bf00      	nop
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr

08002baa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bae:	f000 f9d7 	bl	8002f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002bb2:	bf00      	nop
 8002bb4:	bd80      	pop	{r7, pc}
	...

08002bb8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8002bbc:	4802      	ldr	r0, [pc, #8]	@ (8002bc8 <DMA1_Stream0_IRQHandler+0x10>)
 8002bbe:	f003 f913 	bl	8005de8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002bc2:	bf00      	nop
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	240002d0 	.word	0x240002d0

08002bcc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8002bd0:	4802      	ldr	r0, [pc, #8]	@ (8002bdc <DMA1_Stream1_IRQHandler+0x10>)
 8002bd2:	f003 f909 	bl	8005de8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002bd6:	bf00      	nop
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	24000424 	.word	0x24000424

08002be0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8002be4:	4802      	ldr	r0, [pc, #8]	@ (8002bf0 <DMA1_Stream2_IRQHandler+0x10>)
 8002be6:	f003 f8ff 	bl	8005de8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002bea:	bf00      	nop
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	2400049c 	.word	0x2400049c

08002bf4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(nIRQ_Pin);
 8002bf8:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002bfc:	f005 fb07 	bl	800820e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002c00:	bf00      	nop
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <OTG_HS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 Out global interrupt.
  */
void OTG_HS_EP1_OUT_IRQHandler(void)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002c08:	4802      	ldr	r0, [pc, #8]	@ (8002c14 <OTG_HS_EP1_OUT_IRQHandler+0x10>)
 8002c0a:	f006 fbab 	bl	8009364 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 1 */
}
 8002c0e:	bf00      	nop
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	24001a18 	.word	0x24001a18

08002c18 <OTG_HS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 In global interrupt.
  */
void OTG_HS_EP1_IN_IRQHandler(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002c1c:	4802      	ldr	r0, [pc, #8]	@ (8002c28 <OTG_HS_EP1_IN_IRQHandler+0x10>)
 8002c1e:	f006 fba1 	bl	8009364 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 1 */
}
 8002c22:	bf00      	nop
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	24001a18 	.word	0x24001a18

08002c2c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002c30:	4802      	ldr	r0, [pc, #8]	@ (8002c3c <OTG_HS_IRQHandler+0x10>)
 8002c32:	f006 fb97 	bl	8009364 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002c36:	bf00      	nop
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	24001a18 	.word	0x24001a18

08002c40 <DCMI_PSSI_IRQHandler>:

/**
  * @brief This function handles DCMI and PSSI global interrupt.
  */
void DCMI_PSSI_IRQHandler(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_PSSI_IRQn 0 */

  /* USER CODE END DCMI_PSSI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8002c44:	4802      	ldr	r0, [pc, #8]	@ (8002c50 <DCMI_PSSI_IRQHandler+0x10>)
 8002c46:	f001 fc19 	bl	800447c <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_PSSI_IRQn 1 */

  /* USER CODE END DCMI_PSSI_IRQn 1 */
}
 8002c4a:	bf00      	nop
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	24000280 	.word	0x24000280

08002c54 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8002c58:	4802      	ldr	r0, [pc, #8]	@ (8002c64 <SPI4_IRQHandler+0x10>)
 8002c5a:	f00b ff95 	bl	800eb88 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8002c5e:	bf00      	nop
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	2400039c 	.word	0x2400039c

08002c68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c70:	4a14      	ldr	r2, [pc, #80]	@ (8002cc4 <_sbrk+0x5c>)
 8002c72:	4b15      	ldr	r3, [pc, #84]	@ (8002cc8 <_sbrk+0x60>)
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c7c:	4b13      	ldr	r3, [pc, #76]	@ (8002ccc <_sbrk+0x64>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d102      	bne.n	8002c8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c84:	4b11      	ldr	r3, [pc, #68]	@ (8002ccc <_sbrk+0x64>)
 8002c86:	4a12      	ldr	r2, [pc, #72]	@ (8002cd0 <_sbrk+0x68>)
 8002c88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c8a:	4b10      	ldr	r3, [pc, #64]	@ (8002ccc <_sbrk+0x64>)
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4413      	add	r3, r2
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d207      	bcs.n	8002ca8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c98:	f010 fbd6 	bl	8013448 <__errno>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	220c      	movs	r2, #12
 8002ca0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca6:	e009      	b.n	8002cbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ca8:	4b08      	ldr	r3, [pc, #32]	@ (8002ccc <_sbrk+0x64>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cae:	4b07      	ldr	r3, [pc, #28]	@ (8002ccc <_sbrk+0x64>)
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	4a05      	ldr	r2, [pc, #20]	@ (8002ccc <_sbrk+0x64>)
 8002cb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cba:	68fb      	ldr	r3, [r7, #12]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3718      	adds	r7, #24
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	24100000 	.word	0x24100000
 8002cc8:	00000400 	.word	0x00000400
 8002ccc:	24000530 	.word	0x24000530
 8002cd0:	24002268 	.word	0x24002268

08002cd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002cd8:	4b3e      	ldr	r3, [pc, #248]	@ (8002dd4 <SystemInit+0x100>)
 8002cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cde:	4a3d      	ldr	r2, [pc, #244]	@ (8002dd4 <SystemInit+0x100>)
 8002ce0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ce4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002ce8:	4b3b      	ldr	r3, [pc, #236]	@ (8002dd8 <SystemInit+0x104>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 030f 	and.w	r3, r3, #15
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d807      	bhi.n	8002d04 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002cf4:	4b38      	ldr	r3, [pc, #224]	@ (8002dd8 <SystemInit+0x104>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f023 030f 	bic.w	r3, r3, #15
 8002cfc:	4a36      	ldr	r2, [pc, #216]	@ (8002dd8 <SystemInit+0x104>)
 8002cfe:	f043 0303 	orr.w	r3, r3, #3
 8002d02:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002d04:	4b35      	ldr	r3, [pc, #212]	@ (8002ddc <SystemInit+0x108>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a34      	ldr	r2, [pc, #208]	@ (8002ddc <SystemInit+0x108>)
 8002d0a:	f043 0301 	orr.w	r3, r3, #1
 8002d0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002d10:	4b32      	ldr	r3, [pc, #200]	@ (8002ddc <SystemInit+0x108>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002d16:	4b31      	ldr	r3, [pc, #196]	@ (8002ddc <SystemInit+0x108>)
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	4930      	ldr	r1, [pc, #192]	@ (8002ddc <SystemInit+0x108>)
 8002d1c:	4b30      	ldr	r3, [pc, #192]	@ (8002de0 <SystemInit+0x10c>)
 8002d1e:	4013      	ands	r3, r2
 8002d20:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002d22:	4b2d      	ldr	r3, [pc, #180]	@ (8002dd8 <SystemInit+0x104>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 030c 	and.w	r3, r3, #12
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d007      	beq.n	8002d3e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002d2e:	4b2a      	ldr	r3, [pc, #168]	@ (8002dd8 <SystemInit+0x104>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f023 030f 	bic.w	r3, r3, #15
 8002d36:	4a28      	ldr	r2, [pc, #160]	@ (8002dd8 <SystemInit+0x104>)
 8002d38:	f043 0303 	orr.w	r3, r3, #3
 8002d3c:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8002d3e:	4b27      	ldr	r3, [pc, #156]	@ (8002ddc <SystemInit+0x108>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8002d44:	4b25      	ldr	r3, [pc, #148]	@ (8002ddc <SystemInit+0x108>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8002d4a:	4b24      	ldr	r3, [pc, #144]	@ (8002ddc <SystemInit+0x108>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002d50:	4b22      	ldr	r3, [pc, #136]	@ (8002ddc <SystemInit+0x108>)
 8002d52:	4a24      	ldr	r2, [pc, #144]	@ (8002de4 <SystemInit+0x110>)
 8002d54:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002d56:	4b21      	ldr	r3, [pc, #132]	@ (8002ddc <SystemInit+0x108>)
 8002d58:	4a23      	ldr	r2, [pc, #140]	@ (8002de8 <SystemInit+0x114>)
 8002d5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002d5c:	4b1f      	ldr	r3, [pc, #124]	@ (8002ddc <SystemInit+0x108>)
 8002d5e:	4a23      	ldr	r2, [pc, #140]	@ (8002dec <SystemInit+0x118>)
 8002d60:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002d62:	4b1e      	ldr	r3, [pc, #120]	@ (8002ddc <SystemInit+0x108>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002d68:	4b1c      	ldr	r3, [pc, #112]	@ (8002ddc <SystemInit+0x108>)
 8002d6a:	4a20      	ldr	r2, [pc, #128]	@ (8002dec <SystemInit+0x118>)
 8002d6c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002d6e:	4b1b      	ldr	r3, [pc, #108]	@ (8002ddc <SystemInit+0x108>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002d74:	4b19      	ldr	r3, [pc, #100]	@ (8002ddc <SystemInit+0x108>)
 8002d76:	4a1d      	ldr	r2, [pc, #116]	@ (8002dec <SystemInit+0x118>)
 8002d78:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002d7a:	4b18      	ldr	r3, [pc, #96]	@ (8002ddc <SystemInit+0x108>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002d80:	4b16      	ldr	r3, [pc, #88]	@ (8002ddc <SystemInit+0x108>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a15      	ldr	r2, [pc, #84]	@ (8002ddc <SystemInit+0x108>)
 8002d86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d8a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002d8c:	4b13      	ldr	r3, [pc, #76]	@ (8002ddc <SystemInit+0x108>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8002d92:	4b12      	ldr	r3, [pc, #72]	@ (8002ddc <SystemInit+0x108>)
 8002d94:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002d98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d113      	bne.n	8002dc8 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002da0:	4b0e      	ldr	r3, [pc, #56]	@ (8002ddc <SystemInit+0x108>)
 8002da2:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002da6:	4a0d      	ldr	r2, [pc, #52]	@ (8002ddc <SystemInit+0x108>)
 8002da8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002dac:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002db0:	4b0f      	ldr	r3, [pc, #60]	@ (8002df0 <SystemInit+0x11c>)
 8002db2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002db6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002db8:	4b08      	ldr	r3, [pc, #32]	@ (8002ddc <SystemInit+0x108>)
 8002dba:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002dbe:	4a07      	ldr	r2, [pc, #28]	@ (8002ddc <SystemInit+0x108>)
 8002dc0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002dc4:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002dc8:	bf00      	nop
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	e000ed00 	.word	0xe000ed00
 8002dd8:	52002000 	.word	0x52002000
 8002ddc:	58024400 	.word	0x58024400
 8002de0:	eaf6ed7f 	.word	0xeaf6ed7f
 8002de4:	02020200 	.word	0x02020200
 8002de8:	01ff0000 	.word	0x01ff0000
 8002dec:	01010280 	.word	0x01010280
 8002df0:	52004000 	.word	0x52004000

08002df4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8002df8:	4b09      	ldr	r3, [pc, #36]	@ (8002e20 <ExitRun0Mode+0x2c>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	4a08      	ldr	r2, [pc, #32]	@ (8002e20 <ExitRun0Mode+0x2c>)
 8002dfe:	f043 0302 	orr.w	r3, r3, #2
 8002e02:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8002e04:	bf00      	nop
 8002e06:	4b06      	ldr	r3, [pc, #24]	@ (8002e20 <ExitRun0Mode+0x2c>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0f9      	beq.n	8002e06 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8002e12:	bf00      	nop
 8002e14:	bf00      	nop
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	58024800 	.word	0x58024800

08002e24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002e24:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002e60 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8002e28:	f7ff ffe4 	bl	8002df4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e2c:	f7ff ff52 	bl	8002cd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e30:	480c      	ldr	r0, [pc, #48]	@ (8002e64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e32:	490d      	ldr	r1, [pc, #52]	@ (8002e68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e34:	4a0d      	ldr	r2, [pc, #52]	@ (8002e6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e38:	e002      	b.n	8002e40 <LoopCopyDataInit>

08002e3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e3e:	3304      	adds	r3, #4

08002e40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e44:	d3f9      	bcc.n	8002e3a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e46:	4a0a      	ldr	r2, [pc, #40]	@ (8002e70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e48:	4c0a      	ldr	r4, [pc, #40]	@ (8002e74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e4c:	e001      	b.n	8002e52 <LoopFillZerobss>

08002e4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e50:	3204      	adds	r2, #4

08002e52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e54:	d3fb      	bcc.n	8002e4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e56:	f010 fafd 	bl	8013454 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e5a:	f7fd fcd3 	bl	8000804 <main>
  bx  lr
 8002e5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e60:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8002e64:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002e68:	24000158 	.word	0x24000158
  ldr r2, =_sidata
 8002e6c:	08013730 	.word	0x08013730
  ldr r2, =_sbss
 8002e70:	24000158 	.word	0x24000158
  ldr r4, =_ebss
 8002e74:	24002264 	.word	0x24002264

08002e78 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e78:	e7fe      	b.n	8002e78 <ADC_IRQHandler>
	...

08002e7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e82:	2003      	movs	r0, #3
 8002e84:	f001 f8a6 	bl	8003fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 8002e88:	f008 fa68 	bl	800b35c <HAL_RCC_GetSysClockFreq>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	4b15      	ldr	r3, [pc, #84]	@ (8002ee4 <HAL_Init+0x68>)
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	0a1b      	lsrs	r3, r3, #8
 8002e94:	f003 030f 	and.w	r3, r3, #15
 8002e98:	4913      	ldr	r1, [pc, #76]	@ (8002ee8 <HAL_Init+0x6c>)
 8002e9a:	5ccb      	ldrb	r3, [r1, r3]
 8002e9c:	f003 031f 	and.w	r3, r3, #31
 8002ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea4:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 8002ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8002ee4 <HAL_Init+0x68>)
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	4a0e      	ldr	r2, [pc, #56]	@ (8002ee8 <HAL_Init+0x6c>)
 8002eb0:	5cd3      	ldrb	r3, [r2, r3]
 8002eb2:	f003 031f 	and.w	r3, r3, #31
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ebc:	4a0b      	ldr	r2, [pc, #44]	@ (8002eec <HAL_Init+0x70>)
 8002ebe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ec0:	4a0b      	ldr	r2, [pc, #44]	@ (8002ef0 <HAL_Init+0x74>)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ec6:	200f      	movs	r0, #15
 8002ec8:	f000 f814 	bl	8002ef4 <HAL_InitTick>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e002      	b.n	8002edc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002ed6:	f7ff facb 	bl	8002470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3708      	adds	r7, #8
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	58024400 	.word	0x58024400
 8002ee8:	08013710 	.word	0x08013710
 8002eec:	24000008 	.word	0x24000008
 8002ef0:	24000004 	.word	0x24000004

08002ef4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002efc:	4b15      	ldr	r3, [pc, #84]	@ (8002f54 <HAL_InitTick+0x60>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e021      	b.n	8002f4c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002f08:	4b13      	ldr	r3, [pc, #76]	@ (8002f58 <HAL_InitTick+0x64>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	4b11      	ldr	r3, [pc, #68]	@ (8002f54 <HAL_InitTick+0x60>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	4619      	mov	r1, r3
 8002f12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f001 f88b 	bl	800403a <HAL_SYSTICK_Config>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e00e      	b.n	8002f4c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b0f      	cmp	r3, #15
 8002f32:	d80a      	bhi.n	8002f4a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f34:	2200      	movs	r2, #0
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	f04f 30ff 	mov.w	r0, #4294967295
 8002f3c:	f001 f855 	bl	8003fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f40:	4a06      	ldr	r2, [pc, #24]	@ (8002f5c <HAL_InitTick+0x68>)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
 8002f48:	e000      	b.n	8002f4c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3708      	adds	r7, #8
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	24000010 	.word	0x24000010
 8002f58:	24000004 	.word	0x24000004
 8002f5c:	2400000c 	.word	0x2400000c

08002f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f64:	4b06      	ldr	r3, [pc, #24]	@ (8002f80 <HAL_IncTick+0x20>)
 8002f66:	781b      	ldrb	r3, [r3, #0]
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4b06      	ldr	r3, [pc, #24]	@ (8002f84 <HAL_IncTick+0x24>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4413      	add	r3, r2
 8002f70:	4a04      	ldr	r2, [pc, #16]	@ (8002f84 <HAL_IncTick+0x24>)
 8002f72:	6013      	str	r3, [r2, #0]
}
 8002f74:	bf00      	nop
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	24000010 	.word	0x24000010
 8002f84:	24000534 	.word	0x24000534

08002f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f8c:	4b03      	ldr	r3, [pc, #12]	@ (8002f9c <HAL_GetTick+0x14>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr
 8002f9a:	bf00      	nop
 8002f9c:	24000534 	.word	0x24000534

08002fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fa8:	f7ff ffee 	bl	8002f88 <HAL_GetTick>
 8002fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb8:	d005      	beq.n	8002fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fba:	4b0a      	ldr	r3, [pc, #40]	@ (8002fe4 <HAL_Delay+0x44>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fc6:	bf00      	nop
 8002fc8:	f7ff ffde 	bl	8002f88 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	68fa      	ldr	r2, [r7, #12]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d8f7      	bhi.n	8002fc8 <HAL_Delay+0x28>
  {
  }
}
 8002fd8:	bf00      	nop
 8002fda:	bf00      	nop
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	24000010 	.word	0x24000010

08002fe8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	609a      	str	r2, [r3, #8]
}
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800300e:	b480      	push	{r7}
 8003010:	b083      	sub	sp, #12
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
 8003016:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	609a      	str	r2, [r3, #8]
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003044:	4618      	mov	r0, r3
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003050:	b480      	push	{r7}
 8003052:	b087      	sub	sp, #28
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003060:	2b00      	cmp	r3, #0
 8003062:	d107      	bne.n	8003074 <LL_ADC_SetChannelPreselection+0x24>
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	0e9b      	lsrs	r3, r3, #26
 8003068:	f003 031f 	and.w	r3, r3, #31
 800306c:	2201      	movs	r2, #1
 800306e:	fa02 f303 	lsl.w	r3, r2, r3
 8003072:	e015      	b.n	80030a0 <LL_ADC_SetChannelPreselection+0x50>
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	fa93 f3a3 	rbit	r3, r3
 800307e:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 800308a:	2320      	movs	r3, #32
 800308c:	e003      	b.n	8003096 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	fab3 f383 	clz	r3, r3
 8003094:	b2db      	uxtb	r3, r3
 8003096:	f003 031f 	and.w	r3, r3, #31
 800309a:	2201      	movs	r2, #1
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	69d2      	ldr	r2, [r2, #28]
 80030a4:	431a      	orrs	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 80030aa:	bf00      	nop
 80030ac:	371c      	adds	r7, #28
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b087      	sub	sp, #28
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	60f8      	str	r0, [r7, #12]
 80030be:	60b9      	str	r1, [r7, #8]
 80030c0:	607a      	str	r2, [r7, #4]
 80030c2:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	3360      	adds	r3, #96	@ 0x60
 80030c8:	461a      	mov	r2, r3
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	4413      	add	r3, r2
 80030d0:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	430b      	orrs	r3, r1
 80030e4:	431a      	orrs	r2, r3
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80030ea:	bf00      	nop
 80030ec:	371c      	adds	r7, #28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b085      	sub	sp, #20
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	60f8      	str	r0, [r7, #12]
 80030fe:	60b9      	str	r1, [r7, #8]
 8003100:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	f003 031f 	and.w	r3, r3, #31
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	fa01 f303 	lsl.w	r3, r1, r3
 8003116:	431a      	orrs	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	611a      	str	r2, [r3, #16]
}
 800311c:	bf00      	nop
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003128:	b480      	push	{r7}
 800312a:	b087      	sub	sp, #28
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	3360      	adds	r3, #96	@ 0x60
 8003138:	461a      	mov	r2, r3
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	431a      	orrs	r2, r3
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	601a      	str	r2, [r3, #0]
  }
}
 8003152:	bf00      	nop
 8003154:	371c      	adds	r7, #28
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr

0800315e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800315e:	b480      	push	{r7}
 8003160:	b087      	sub	sp, #28
 8003162:	af00      	add	r7, sp, #0
 8003164:	60f8      	str	r0, [r7, #12]
 8003166:	60b9      	str	r1, [r7, #8]
 8003168:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	3330      	adds	r3, #48	@ 0x30
 800316e:	461a      	mov	r2, r3
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	0a1b      	lsrs	r3, r3, #8
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	f003 030c 	and.w	r3, r3, #12
 800317a:	4413      	add	r3, r2
 800317c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	f003 031f 	and.w	r3, r3, #31
 8003188:	211f      	movs	r1, #31
 800318a:	fa01 f303 	lsl.w	r3, r1, r3
 800318e:	43db      	mvns	r3, r3
 8003190:	401a      	ands	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	0e9b      	lsrs	r3, r3, #26
 8003196:	f003 011f 	and.w	r1, r3, #31
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	f003 031f 	and.w	r3, r3, #31
 80031a0:	fa01 f303 	lsl.w	r3, r1, r3
 80031a4:	431a      	orrs	r2, r3
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80031aa:	bf00      	nop
 80031ac:	371c      	adds	r7, #28
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b087      	sub	sp, #28
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	60f8      	str	r0, [r7, #12]
 80031be:	60b9      	str	r1, [r7, #8]
 80031c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	3314      	adds	r3, #20
 80031c6:	461a      	mov	r2, r3
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	0e5b      	lsrs	r3, r3, #25
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	f003 0304 	and.w	r3, r3, #4
 80031d2:	4413      	add	r3, r2
 80031d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	0d1b      	lsrs	r3, r3, #20
 80031de:	f003 031f 	and.w	r3, r3, #31
 80031e2:	2107      	movs	r1, #7
 80031e4:	fa01 f303 	lsl.w	r3, r1, r3
 80031e8:	43db      	mvns	r3, r3
 80031ea:	401a      	ands	r2, r3
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	0d1b      	lsrs	r3, r3, #20
 80031f0:	f003 031f 	and.w	r3, r3, #31
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	fa01 f303 	lsl.w	r3, r1, r3
 80031fa:	431a      	orrs	r2, r3
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003200:	bf00      	nop
 8003202:	371c      	adds	r7, #28
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr

0800320c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003224:	43db      	mvns	r3, r3
 8003226:	401a      	ands	r2, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f003 0318 	and.w	r3, r3, #24
 800322e:	4908      	ldr	r1, [pc, #32]	@ (8003250 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003230:	40d9      	lsrs	r1, r3
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	400b      	ands	r3, r1
 8003236:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800323a:	431a      	orrs	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003242:	bf00      	nop
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	000fffff 	.word	0x000fffff

08003254 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	4b04      	ldr	r3, [pc, #16]	@ (8003274 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003262:	4013      	ands	r3, r2
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	6093      	str	r3, [r2, #8]
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	5fffffc0 	.word	0x5fffffc0

08003278 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003278:	b480      	push	{r7}
 800327a:	b083      	sub	sp, #12
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689b      	ldr	r3, [r3, #8]
 8003284:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003288:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800328c:	d101      	bne.n	8003292 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800328e:	2301      	movs	r3, #1
 8003290:	e000      	b.n	8003294 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	4b05      	ldr	r3, [pc, #20]	@ (80032c4 <LL_ADC_EnableInternalRegulator+0x24>)
 80032ae:	4013      	ands	r3, r2
 80032b0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	6fffffc0 	.word	0x6fffffc0

080032c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80032dc:	d101      	bne.n	80032e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80032de:	2301      	movs	r3, #1
 80032e0:	e000      	b.n	80032e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b01      	cmp	r3, #1
 8003302:	d101      	bne.n	8003308 <LL_ADC_IsEnabled+0x18>
 8003304:	2301      	movs	r3, #1
 8003306:	e000      	b.n	800330a <LL_ADC_IsEnabled+0x1a>
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	370c      	adds	r7, #12
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr

08003316 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	f003 0304 	and.w	r3, r3, #4
 8003326:	2b04      	cmp	r3, #4
 8003328:	d101      	bne.n	800332e <LL_ADC_REG_IsConversionOngoing+0x18>
 800332a:	2301      	movs	r3, #1
 800332c:	e000      	b.n	8003330 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 0308 	and.w	r3, r3, #8
 800334c:	2b08      	cmp	r3, #8
 800334e:	d101      	bne.n	8003354 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003350:	2301      	movs	r3, #1
 8003352:	e000      	b.n	8003356 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	370c      	adds	r7, #12
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
	...

08003364 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003364:	b590      	push	{r4, r7, lr}
 8003366:	b089      	sub	sp, #36	@ 0x24
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800336c:	2300      	movs	r3, #0
 800336e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003370:	2300      	movs	r3, #0
 8003372:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e138      	b.n	80035f0 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003388:	2b00      	cmp	r3, #0
 800338a:	d109      	bne.n	80033a0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f7ff f889 	bl	80024a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff ff67 	bl	8003278 <LL_ADC_IsDeepPowerDownEnabled>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d004      	beq.n	80033ba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff ff4d 	bl	8003254 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4618      	mov	r0, r3
 80033c0:	f7ff ff82 	bl	80032c8 <LL_ADC_IsInternalRegulatorEnabled>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d114      	bne.n	80033f4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7ff ff66 	bl	80032a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80033d4:	4b88      	ldr	r3, [pc, #544]	@ (80035f8 <HAL_ADC_Init+0x294>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	099b      	lsrs	r3, r3, #6
 80033da:	4a88      	ldr	r2, [pc, #544]	@ (80035fc <HAL_ADC_Init+0x298>)
 80033dc:	fba2 2303 	umull	r2, r3, r2, r3
 80033e0:	099b      	lsrs	r3, r3, #6
 80033e2:	3301      	adds	r3, #1
 80033e4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80033e6:	e002      	b.n	80033ee <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	3b01      	subs	r3, #1
 80033ec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1f9      	bne.n	80033e8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7ff ff65 	bl	80032c8 <LL_ADC_IsInternalRegulatorEnabled>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10d      	bne.n	8003420 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003408:	f043 0210 	orr.w	r2, r3, #16
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003414:	f043 0201 	orr.w	r2, r3, #1
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff ff76 	bl	8003316 <LL_ADC_REG_IsConversionOngoing>
 800342a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003430:	f003 0310 	and.w	r3, r3, #16
 8003434:	2b00      	cmp	r3, #0
 8003436:	f040 80d2 	bne.w	80035de <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	2b00      	cmp	r3, #0
 800343e:	f040 80ce 	bne.w	80035de <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003446:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800344a:	f043 0202 	orr.w	r2, r3, #2
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff ff4a 	bl	80032f0 <LL_ADC_IsEnabled>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d110      	bne.n	8003484 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003462:	4867      	ldr	r0, [pc, #412]	@ (8003600 <HAL_ADC_Init+0x29c>)
 8003464:	f7ff ff44 	bl	80032f0 <LL_ADC_IsEnabled>
 8003468:	4604      	mov	r4, r0
 800346a:	4866      	ldr	r0, [pc, #408]	@ (8003604 <HAL_ADC_Init+0x2a0>)
 800346c:	f7ff ff40 	bl	80032f0 <LL_ADC_IsEnabled>
 8003470:	4603      	mov	r3, r0
 8003472:	4323      	orrs	r3, r4
 8003474:	2b00      	cmp	r3, #0
 8003476:	d105      	bne.n	8003484 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	4619      	mov	r1, r3
 800347e:	4862      	ldr	r0, [pc, #392]	@ (8003608 <HAL_ADC_Init+0x2a4>)
 8003480:	f7ff fdb2 	bl	8002fe8 <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	7d5b      	ldrb	r3, [r3, #21]
 8003488:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800348e:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 8003494:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	7f1b      	ldrb	r3, [r3, #28]
 800349a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800349c:	4313      	orrs	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	7f1b      	ldrb	r3, [r3, #28]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d106      	bne.n	80034b6 <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6a1b      	ldr	r3, [r3, #32]
 80034ac:	3b01      	subs	r3, #1
 80034ae:	045b      	lsls	r3, r3, #17
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d009      	beq.n	80034d2 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c2:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ca:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68da      	ldr	r2, [r3, #12]
 80034d8:	4b4c      	ldr	r3, [pc, #304]	@ (800360c <HAL_ADC_Init+0x2a8>)
 80034da:	4013      	ands	r3, r2
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	6812      	ldr	r2, [r2, #0]
 80034e0:	69b9      	ldr	r1, [r7, #24]
 80034e2:	430b      	orrs	r3, r1
 80034e4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7ff ff13 	bl	8003316 <LL_ADC_REG_IsConversionOngoing>
 80034f0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff ff20 	bl	800333c <LL_ADC_INJ_IsConversionOngoing>
 80034fc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d14a      	bne.n	800359a <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d147      	bne.n	800359a <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	7d1b      	ldrb	r3, [r3, #20]
 800350e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8003514:	4313      	orrs	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68da      	ldr	r2, [r3, #12]
 800351e:	4b3c      	ldr	r3, [pc, #240]	@ (8003610 <HAL_ADC_Init+0x2ac>)
 8003520:	4013      	ands	r3, r2
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	6812      	ldr	r2, [r2, #0]
 8003526:	69b9      	ldr	r1, [r7, #24]
 8003528:	430b      	orrs	r3, r1
 800352a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003532:	2b01      	cmp	r3, #1
 8003534:	d11b      	bne.n	800356e <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	691a      	ldr	r2, [r3, #16]
 8003542:	4b34      	ldr	r3, [pc, #208]	@ (8003614 <HAL_ADC_Init+0x2b0>)
 8003544:	4013      	ands	r3, r2
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800354a:	3a01      	subs	r2, #1
 800354c:	0411      	lsls	r1, r2, #16
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003552:	4311      	orrs	r1, r2
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8003558:	4311      	orrs	r1, r2
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800355e:	430a      	orrs	r2, r1
 8003560:	431a      	orrs	r2, r3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f042 0201 	orr.w	r2, r2, #1
 800356a:	611a      	str	r2, [r3, #16]
 800356c:	e007      	b.n	800357e <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	691a      	ldr	r2, [r3, #16]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 0201 	bic.w	r2, r2, #1
 800357c:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	430a      	orrs	r2, r1
 8003592:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 fabd 	bl	8003b14 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d10c      	bne.n	80035bc <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a8:	f023 010f 	bic.w	r1, r3, #15
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	1e5a      	subs	r2, r3, #1
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	631a      	str	r2, [r3, #48]	@ 0x30
 80035ba:	e007      	b.n	80035cc <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 020f 	bic.w	r2, r2, #15
 80035ca:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035d0:	f023 0303 	bic.w	r3, r3, #3
 80035d4:	f043 0201 	orr.w	r2, r3, #1
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	655a      	str	r2, [r3, #84]	@ 0x54
 80035dc:	e007      	b.n	80035ee <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e2:	f043 0210 	orr.w	r2, r3, #16
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80035ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3724      	adds	r7, #36	@ 0x24
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd90      	pop	{r4, r7, pc}
 80035f8:	24000004 	.word	0x24000004
 80035fc:	053e2d63 	.word	0x053e2d63
 8003600:	40022000 	.word	0x40022000
 8003604:	40022100 	.word	0x40022100
 8003608:	40022300 	.word	0x40022300
 800360c:	fff0c003 	.word	0xfff0c003
 8003610:	ffffbffc 	.word	0xffffbffc
 8003614:	fc00f81e 	.word	0xfc00f81e

08003618 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003618:	b590      	push	{r4, r7, lr}
 800361a:	b08d      	sub	sp, #52	@ 0x34
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003622:	2300      	movs	r3, #0
 8003624:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003628:	2300      	movs	r3, #0
 800362a:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	4a5b      	ldr	r2, [pc, #364]	@ (80037a0 <HAL_ADC_ConfigChannel+0x188>)
 8003632:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800363a:	2b01      	cmp	r3, #1
 800363c:	d101      	bne.n	8003642 <HAL_ADC_ConfigChannel+0x2a>
 800363e:	2302      	movs	r3, #2
 8003640:	e263      	b.n	8003b0a <HAL_ADC_ConfigChannel+0x4f2>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f7ff fe61 	bl	8003316 <LL_ADC_REG_IsConversionOngoing>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	f040 8248 	bne.w	8003aec <HAL_ADC_ConfigChannel+0x4d4>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	db2c      	blt.n	80036be <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800366c:	2b00      	cmp	r3, #0
 800366e:	d108      	bne.n	8003682 <HAL_ADC_ConfigChannel+0x6a>
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	0e9b      	lsrs	r3, r3, #26
 8003676:	f003 031f 	and.w	r3, r3, #31
 800367a:	2201      	movs	r2, #1
 800367c:	fa02 f303 	lsl.w	r3, r2, r3
 8003680:	e016      	b.n	80036b0 <HAL_ADC_ConfigChannel+0x98>
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	fa93 f3a3 	rbit	r3, r3
 800368e:	613b      	str	r3, [r7, #16]
  return result;
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 800369a:	2320      	movs	r3, #32
 800369c:	e003      	b.n	80036a6 <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 800369e:	69bb      	ldr	r3, [r7, #24]
 80036a0:	fab3 f383 	clz	r3, r3
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	f003 031f 	and.w	r3, r3, #31
 80036aa:	2201      	movs	r2, #1
 80036ac:	fa02 f303 	lsl.w	r3, r2, r3
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	6812      	ldr	r2, [r2, #0]
 80036b4:	69d1      	ldr	r1, [r2, #28]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	6812      	ldr	r2, [r2, #0]
 80036ba:	430b      	orrs	r3, r1
 80036bc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6818      	ldr	r0, [r3, #0]
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	6859      	ldr	r1, [r3, #4]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	461a      	mov	r2, r3
 80036cc:	f7ff fd47 	bl	800315e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff fe1e 	bl	8003316 <LL_ADC_REG_IsConversionOngoing>
 80036da:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff fe2b 	bl	800333c <LL_ADC_INJ_IsConversionOngoing>
 80036e6:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80036e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f040 80a2 	bne.w	8003834 <HAL_ADC_ConfigChannel+0x21c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80036f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	f040 809e 	bne.w	8003834 <HAL_ADC_ConfigChannel+0x21c>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6818      	ldr	r0, [r3, #0]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	6819      	ldr	r1, [r3, #0]
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	461a      	mov	r2, r3
 8003706:	f7ff fd56 	bl	80031b6 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	f003 0310 	and.w	r3, r3, #16
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10b      	bne.n	8003730 <HAL_ADC_ConfigChannel+0x118>
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	695a      	ldr	r2, [r3, #20]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	089b      	lsrs	r3, r3, #2
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	005b      	lsls	r3, r3, #1
 800372a:	fa02 f303 	lsl.w	r3, r2, r3
 800372e:	e00a      	b.n	8003746 <HAL_ADC_ConfigChannel+0x12e>
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	695a      	ldr	r2, [r3, #20]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	089b      	lsrs	r3, r3, #2
 800373c:	f003 0304 	and.w	r3, r3, #4
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	fa02 f303 	lsl.w	r3, r2, r3
 8003746:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	691b      	ldr	r3, [r3, #16]
 800374c:	2b04      	cmp	r3, #4
 800374e:	d029      	beq.n	80037a4 <HAL_ADC_ConfigChannel+0x18c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6818      	ldr	r0, [r3, #0]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	6919      	ldr	r1, [r3, #16]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	6a3b      	ldr	r3, [r7, #32]
 800375e:	f7ff fcaa 	bl	80030b6 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6818      	ldr	r0, [r3, #0]
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	6919      	ldr	r1, [r3, #16]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	7e5b      	ldrb	r3, [r3, #25]
 800376e:	2b01      	cmp	r3, #1
 8003770:	d102      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x160>
 8003772:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003776:	e000      	b.n	800377a <HAL_ADC_ConfigChannel+0x162>
 8003778:	2300      	movs	r3, #0
 800377a:	461a      	mov	r2, r3
 800377c:	f7ff fcd4 	bl	8003128 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6818      	ldr	r0, [r3, #0]
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	6919      	ldr	r1, [r3, #16]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	7e1b      	ldrb	r3, [r3, #24]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d102      	bne.n	8003796 <HAL_ADC_ConfigChannel+0x17e>
 8003790:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003794:	e000      	b.n	8003798 <HAL_ADC_ConfigChannel+0x180>
 8003796:	2300      	movs	r3, #0
 8003798:	461a      	mov	r2, r3
 800379a:	f7ff fcac 	bl	80030f6 <LL_ADC_SetDataRightShift>
 800379e:	e049      	b.n	8003834 <HAL_ADC_ConfigChannel+0x21c>
 80037a0:	47ff0000 	.word	0x47ff0000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80037aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	069b      	lsls	r3, r3, #26
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d107      	bne.n	80037c8 <HAL_ADC_ConfigChannel+0x1b0>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80037c6:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037ce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	069b      	lsls	r3, r3, #26
 80037d8:	429a      	cmp	r2, r3
 80037da:	d107      	bne.n	80037ec <HAL_ADC_ConfigChannel+0x1d4>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80037ea:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037f2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	069b      	lsls	r3, r3, #26
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d107      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x1f8>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800380e:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003816:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	069b      	lsls	r3, r3, #26
 8003820:	429a      	cmp	r2, r3
 8003822:	d107      	bne.n	8003834 <HAL_ADC_ConfigChannel+0x21c>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003832:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff fd59 	bl	80032f0 <LL_ADC_IsEnabled>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	f040 815c 	bne.w	8003afe <HAL_ADC_ConfigChannel+0x4e6>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6818      	ldr	r0, [r3, #0]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	6819      	ldr	r1, [r3, #0]
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	461a      	mov	r2, r3
 8003854:	f7ff fcda 	bl	800320c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	4a89      	ldr	r2, [pc, #548]	@ (8003a84 <HAL_ADC_ConfigChannel+0x46c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	f040 809a 	bne.w	8003998 <HAL_ADC_ConfigChannel+0x380>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4986      	ldr	r1, [pc, #536]	@ (8003a88 <HAL_ADC_ConfigChannel+0x470>)
 800386e:	428b      	cmp	r3, r1
 8003870:	d147      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x2ea>
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4985      	ldr	r1, [pc, #532]	@ (8003a8c <HAL_ADC_ConfigChannel+0x474>)
 8003878:	428b      	cmp	r3, r1
 800387a:	d040      	beq.n	80038fe <HAL_ADC_ConfigChannel+0x2e6>
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4983      	ldr	r1, [pc, #524]	@ (8003a90 <HAL_ADC_ConfigChannel+0x478>)
 8003882:	428b      	cmp	r3, r1
 8003884:	d039      	beq.n	80038fa <HAL_ADC_ConfigChannel+0x2e2>
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4982      	ldr	r1, [pc, #520]	@ (8003a94 <HAL_ADC_ConfigChannel+0x47c>)
 800388c:	428b      	cmp	r3, r1
 800388e:	d032      	beq.n	80038f6 <HAL_ADC_ConfigChannel+0x2de>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4980      	ldr	r1, [pc, #512]	@ (8003a98 <HAL_ADC_ConfigChannel+0x480>)
 8003896:	428b      	cmp	r3, r1
 8003898:	d02b      	beq.n	80038f2 <HAL_ADC_ConfigChannel+0x2da>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	497f      	ldr	r1, [pc, #508]	@ (8003a9c <HAL_ADC_ConfigChannel+0x484>)
 80038a0:	428b      	cmp	r3, r1
 80038a2:	d024      	beq.n	80038ee <HAL_ADC_ConfigChannel+0x2d6>
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	497d      	ldr	r1, [pc, #500]	@ (8003aa0 <HAL_ADC_ConfigChannel+0x488>)
 80038aa:	428b      	cmp	r3, r1
 80038ac:	d01d      	beq.n	80038ea <HAL_ADC_ConfigChannel+0x2d2>
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	497c      	ldr	r1, [pc, #496]	@ (8003aa4 <HAL_ADC_ConfigChannel+0x48c>)
 80038b4:	428b      	cmp	r3, r1
 80038b6:	d016      	beq.n	80038e6 <HAL_ADC_ConfigChannel+0x2ce>
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	497a      	ldr	r1, [pc, #488]	@ (8003aa8 <HAL_ADC_ConfigChannel+0x490>)
 80038be:	428b      	cmp	r3, r1
 80038c0:	d00f      	beq.n	80038e2 <HAL_ADC_ConfigChannel+0x2ca>
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4979      	ldr	r1, [pc, #484]	@ (8003aac <HAL_ADC_ConfigChannel+0x494>)
 80038c8:	428b      	cmp	r3, r1
 80038ca:	d008      	beq.n	80038de <HAL_ADC_ConfigChannel+0x2c6>
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4977      	ldr	r1, [pc, #476]	@ (8003ab0 <HAL_ADC_ConfigChannel+0x498>)
 80038d2:	428b      	cmp	r3, r1
 80038d4:	d101      	bne.n	80038da <HAL_ADC_ConfigChannel+0x2c2>
 80038d6:	4b77      	ldr	r3, [pc, #476]	@ (8003ab4 <HAL_ADC_ConfigChannel+0x49c>)
 80038d8:	e05a      	b.n	8003990 <HAL_ADC_ConfigChannel+0x378>
 80038da:	2300      	movs	r3, #0
 80038dc:	e058      	b.n	8003990 <HAL_ADC_ConfigChannel+0x378>
 80038de:	4b76      	ldr	r3, [pc, #472]	@ (8003ab8 <HAL_ADC_ConfigChannel+0x4a0>)
 80038e0:	e056      	b.n	8003990 <HAL_ADC_ConfigChannel+0x378>
 80038e2:	4b76      	ldr	r3, [pc, #472]	@ (8003abc <HAL_ADC_ConfigChannel+0x4a4>)
 80038e4:	e054      	b.n	8003990 <HAL_ADC_ConfigChannel+0x378>
 80038e6:	4b70      	ldr	r3, [pc, #448]	@ (8003aa8 <HAL_ADC_ConfigChannel+0x490>)
 80038e8:	e052      	b.n	8003990 <HAL_ADC_ConfigChannel+0x378>
 80038ea:	4b6e      	ldr	r3, [pc, #440]	@ (8003aa4 <HAL_ADC_ConfigChannel+0x48c>)
 80038ec:	e050      	b.n	8003990 <HAL_ADC_ConfigChannel+0x378>
 80038ee:	4b74      	ldr	r3, [pc, #464]	@ (8003ac0 <HAL_ADC_ConfigChannel+0x4a8>)
 80038f0:	e04e      	b.n	8003990 <HAL_ADC_ConfigChannel+0x378>
 80038f2:	4b74      	ldr	r3, [pc, #464]	@ (8003ac4 <HAL_ADC_ConfigChannel+0x4ac>)
 80038f4:	e04c      	b.n	8003990 <HAL_ADC_ConfigChannel+0x378>
 80038f6:	4b74      	ldr	r3, [pc, #464]	@ (8003ac8 <HAL_ADC_ConfigChannel+0x4b0>)
 80038f8:	e04a      	b.n	8003990 <HAL_ADC_ConfigChannel+0x378>
 80038fa:	4b74      	ldr	r3, [pc, #464]	@ (8003acc <HAL_ADC_ConfigChannel+0x4b4>)
 80038fc:	e048      	b.n	8003990 <HAL_ADC_ConfigChannel+0x378>
 80038fe:	2301      	movs	r3, #1
 8003900:	e046      	b.n	8003990 <HAL_ADC_ConfigChannel+0x378>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4972      	ldr	r1, [pc, #456]	@ (8003ad0 <HAL_ADC_ConfigChannel+0x4b8>)
 8003908:	428b      	cmp	r3, r1
 800390a:	d140      	bne.n	800398e <HAL_ADC_ConfigChannel+0x376>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	495e      	ldr	r1, [pc, #376]	@ (8003a8c <HAL_ADC_ConfigChannel+0x474>)
 8003912:	428b      	cmp	r3, r1
 8003914:	d039      	beq.n	800398a <HAL_ADC_ConfigChannel+0x372>
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	495d      	ldr	r1, [pc, #372]	@ (8003a90 <HAL_ADC_ConfigChannel+0x478>)
 800391c:	428b      	cmp	r3, r1
 800391e:	d032      	beq.n	8003986 <HAL_ADC_ConfigChannel+0x36e>
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	495b      	ldr	r1, [pc, #364]	@ (8003a94 <HAL_ADC_ConfigChannel+0x47c>)
 8003926:	428b      	cmp	r3, r1
 8003928:	d02b      	beq.n	8003982 <HAL_ADC_ConfigChannel+0x36a>
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	495a      	ldr	r1, [pc, #360]	@ (8003a98 <HAL_ADC_ConfigChannel+0x480>)
 8003930:	428b      	cmp	r3, r1
 8003932:	d024      	beq.n	800397e <HAL_ADC_ConfigChannel+0x366>
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4958      	ldr	r1, [pc, #352]	@ (8003a9c <HAL_ADC_ConfigChannel+0x484>)
 800393a:	428b      	cmp	r3, r1
 800393c:	d01d      	beq.n	800397a <HAL_ADC_ConfigChannel+0x362>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4957      	ldr	r1, [pc, #348]	@ (8003aa0 <HAL_ADC_ConfigChannel+0x488>)
 8003944:	428b      	cmp	r3, r1
 8003946:	d016      	beq.n	8003976 <HAL_ADC_ConfigChannel+0x35e>
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4955      	ldr	r1, [pc, #340]	@ (8003aa4 <HAL_ADC_ConfigChannel+0x48c>)
 800394e:	428b      	cmp	r3, r1
 8003950:	d00f      	beq.n	8003972 <HAL_ADC_ConfigChannel+0x35a>
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4954      	ldr	r1, [pc, #336]	@ (8003aa8 <HAL_ADC_ConfigChannel+0x490>)
 8003958:	428b      	cmp	r3, r1
 800395a:	d008      	beq.n	800396e <HAL_ADC_ConfigChannel+0x356>
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4953      	ldr	r1, [pc, #332]	@ (8003ab0 <HAL_ADC_ConfigChannel+0x498>)
 8003962:	428b      	cmp	r3, r1
 8003964:	d101      	bne.n	800396a <HAL_ADC_ConfigChannel+0x352>
 8003966:	4b53      	ldr	r3, [pc, #332]	@ (8003ab4 <HAL_ADC_ConfigChannel+0x49c>)
 8003968:	e012      	b.n	8003990 <HAL_ADC_ConfigChannel+0x378>
 800396a:	2300      	movs	r3, #0
 800396c:	e010      	b.n	8003990 <HAL_ADC_ConfigChannel+0x378>
 800396e:	4b53      	ldr	r3, [pc, #332]	@ (8003abc <HAL_ADC_ConfigChannel+0x4a4>)
 8003970:	e00e      	b.n	8003990 <HAL_ADC_ConfigChannel+0x378>
 8003972:	4b4d      	ldr	r3, [pc, #308]	@ (8003aa8 <HAL_ADC_ConfigChannel+0x490>)
 8003974:	e00c      	b.n	8003990 <HAL_ADC_ConfigChannel+0x378>
 8003976:	4b4b      	ldr	r3, [pc, #300]	@ (8003aa4 <HAL_ADC_ConfigChannel+0x48c>)
 8003978:	e00a      	b.n	8003990 <HAL_ADC_ConfigChannel+0x378>
 800397a:	4b51      	ldr	r3, [pc, #324]	@ (8003ac0 <HAL_ADC_ConfigChannel+0x4a8>)
 800397c:	e008      	b.n	8003990 <HAL_ADC_ConfigChannel+0x378>
 800397e:	4b51      	ldr	r3, [pc, #324]	@ (8003ac4 <HAL_ADC_ConfigChannel+0x4ac>)
 8003980:	e006      	b.n	8003990 <HAL_ADC_ConfigChannel+0x378>
 8003982:	4b51      	ldr	r3, [pc, #324]	@ (8003ac8 <HAL_ADC_ConfigChannel+0x4b0>)
 8003984:	e004      	b.n	8003990 <HAL_ADC_ConfigChannel+0x378>
 8003986:	4b51      	ldr	r3, [pc, #324]	@ (8003acc <HAL_ADC_ConfigChannel+0x4b4>)
 8003988:	e002      	b.n	8003990 <HAL_ADC_ConfigChannel+0x378>
 800398a:	2301      	movs	r3, #1
 800398c:	e000      	b.n	8003990 <HAL_ADC_ConfigChannel+0x378>
 800398e:	2300      	movs	r3, #0
 8003990:	4619      	mov	r1, r3
 8003992:	4610      	mov	r0, r2
 8003994:	f7ff fb5c 	bl	8003050 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	f280 80ae 	bge.w	8003afe <HAL_ADC_ConfigChannel+0x4e6>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039a2:	484c      	ldr	r0, [pc, #304]	@ (8003ad4 <HAL_ADC_ConfigChannel+0x4bc>)
 80039a4:	f7ff fb46 	bl	8003034 <LL_ADC_GetCommonPathInternalCh>
 80039a8:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039aa:	4837      	ldr	r0, [pc, #220]	@ (8003a88 <HAL_ADC_ConfigChannel+0x470>)
 80039ac:	f7ff fca0 	bl	80032f0 <LL_ADC_IsEnabled>
 80039b0:	4604      	mov	r4, r0
 80039b2:	4847      	ldr	r0, [pc, #284]	@ (8003ad0 <HAL_ADC_ConfigChannel+0x4b8>)
 80039b4:	f7ff fc9c 	bl	80032f0 <LL_ADC_IsEnabled>
 80039b8:	4603      	mov	r3, r0
 80039ba:	4323      	orrs	r3, r4
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d156      	bne.n	8003a6e <HAL_ADC_ConfigChannel+0x456>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a44      	ldr	r2, [pc, #272]	@ (8003ad8 <HAL_ADC_ConfigChannel+0x4c0>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d123      	bne.n	8003a12 <HAL_ADC_ConfigChannel+0x3fa>
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d11e      	bne.n	8003a12 <HAL_ADC_ConfigChannel+0x3fa>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a3d      	ldr	r2, [pc, #244]	@ (8003ad0 <HAL_ADC_ConfigChannel+0x4b8>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	f040 808f 	bne.w	8003afe <HAL_ADC_ConfigChannel+0x4e6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80039e6:	4619      	mov	r1, r3
 80039e8:	483a      	ldr	r0, [pc, #232]	@ (8003ad4 <HAL_ADC_ConfigChannel+0x4bc>)
 80039ea:	f7ff fb10 	bl	800300e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039ee:	4b3b      	ldr	r3, [pc, #236]	@ (8003adc <HAL_ADC_ConfigChannel+0x4c4>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	099b      	lsrs	r3, r3, #6
 80039f4:	4a3a      	ldr	r2, [pc, #232]	@ (8003ae0 <HAL_ADC_ConfigChannel+0x4c8>)
 80039f6:	fba2 2303 	umull	r2, r3, r2, r3
 80039fa:	099b      	lsrs	r3, r3, #6
 80039fc:	3301      	adds	r3, #1
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003a02:	e002      	b.n	8003a0a <HAL_ADC_ConfigChannel+0x3f2>
              {
                wait_loop_index--;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	3b01      	subs	r3, #1
 8003a08:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d1f9      	bne.n	8003a04 <HAL_ADC_ConfigChannel+0x3ec>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a10:	e075      	b.n	8003afe <HAL_ADC_ConfigChannel+0x4e6>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a33      	ldr	r2, [pc, #204]	@ (8003ae4 <HAL_ADC_ConfigChannel+0x4cc>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d111      	bne.n	8003a40 <HAL_ADC_ConfigChannel+0x428>
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10c      	bne.n	8003a40 <HAL_ADC_ConfigChannel+0x428>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a29      	ldr	r2, [pc, #164]	@ (8003ad0 <HAL_ADC_ConfigChannel+0x4b8>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d166      	bne.n	8003afe <HAL_ADC_ConfigChannel+0x4e6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a36:	4619      	mov	r1, r3
 8003a38:	4826      	ldr	r0, [pc, #152]	@ (8003ad4 <HAL_ADC_ConfigChannel+0x4bc>)
 8003a3a:	f7ff fae8 	bl	800300e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a3e:	e05e      	b.n	8003afe <HAL_ADC_ConfigChannel+0x4e6>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a28      	ldr	r2, [pc, #160]	@ (8003ae8 <HAL_ADC_ConfigChannel+0x4d0>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d159      	bne.n	8003afe <HAL_ADC_ConfigChannel+0x4e6>
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d154      	bne.n	8003afe <HAL_ADC_ConfigChannel+0x4e6>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a1d      	ldr	r2, [pc, #116]	@ (8003ad0 <HAL_ADC_ConfigChannel+0x4b8>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d14f      	bne.n	8003afe <HAL_ADC_ConfigChannel+0x4e6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003a64:	4619      	mov	r1, r3
 8003a66:	481b      	ldr	r0, [pc, #108]	@ (8003ad4 <HAL_ADC_ConfigChannel+0x4bc>)
 8003a68:	f7ff fad1 	bl	800300e <LL_ADC_SetCommonPathInternalCh>
 8003a6c:	e047      	b.n	8003afe <HAL_ADC_ConfigChannel+0x4e6>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a72:	f043 0220 	orr.w	r2, r3, #32
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003a80:	e03d      	b.n	8003afe <HAL_ADC_ConfigChannel+0x4e6>
 8003a82:	bf00      	nop
 8003a84:	47ff0000 	.word	0x47ff0000
 8003a88:	40022000 	.word	0x40022000
 8003a8c:	04300002 	.word	0x04300002
 8003a90:	08600004 	.word	0x08600004
 8003a94:	0c900008 	.word	0x0c900008
 8003a98:	10c00010 	.word	0x10c00010
 8003a9c:	14f00020 	.word	0x14f00020
 8003aa0:	2a000400 	.word	0x2a000400
 8003aa4:	2e300800 	.word	0x2e300800
 8003aa8:	32601000 	.word	0x32601000
 8003aac:	43210000 	.word	0x43210000
 8003ab0:	4b840000 	.word	0x4b840000
 8003ab4:	4fb80000 	.word	0x4fb80000
 8003ab8:	47520000 	.word	0x47520000
 8003abc:	36902000 	.word	0x36902000
 8003ac0:	25b00200 	.word	0x25b00200
 8003ac4:	21800100 	.word	0x21800100
 8003ac8:	1d500080 	.word	0x1d500080
 8003acc:	19200040 	.word	0x19200040
 8003ad0:	40022100 	.word	0x40022100
 8003ad4:	40022300 	.word	0x40022300
 8003ad8:	cb840000 	.word	0xcb840000
 8003adc:	24000004 	.word	0x24000004
 8003ae0:	053e2d63 	.word	0x053e2d63
 8003ae4:	bac04000 	.word	0xbac04000
 8003ae8:	cfb80000 	.word	0xcfb80000
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003af0:	f043 0220 	orr.w	r2, r3, #32
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003b06:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3734      	adds	r7, #52	@ 0x34
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd90      	pop	{r4, r7, pc}
 8003b12:	bf00      	nop

08003b14 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003b1c:	4b60      	ldr	r3, [pc, #384]	@ (8003ca0 <ADC_ConfigureBoostMode+0x18c>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d01c      	beq.n	8003b62 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003b28:	f007 fd92 	bl	800b650 <HAL_RCC_GetHCLKFreq>
 8003b2c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b36:	d010      	beq.n	8003b5a <ADC_ConfigureBoostMode+0x46>
 8003b38:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003b3c:	d873      	bhi.n	8003c26 <ADC_ConfigureBoostMode+0x112>
 8003b3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b42:	d002      	beq.n	8003b4a <ADC_ConfigureBoostMode+0x36>
 8003b44:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003b48:	d16d      	bne.n	8003c26 <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	0c1b      	lsrs	r3, r3, #16
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b56:	60fb      	str	r3, [r7, #12]
        break;
 8003b58:	e068      	b.n	8003c2c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	089b      	lsrs	r3, r3, #2
 8003b5e:	60fb      	str	r3, [r7, #12]
        break;
 8003b60:	e064      	b.n	8003c2c <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003b62:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003b66:	f04f 0100 	mov.w	r1, #0
 8003b6a:	f008 ff75 	bl	800ca58 <HAL_RCCEx_GetPeriphCLKFreq>
 8003b6e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003b78:	d051      	beq.n	8003c1e <ADC_ConfigureBoostMode+0x10a>
 8003b7a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003b7e:	d854      	bhi.n	8003c2a <ADC_ConfigureBoostMode+0x116>
 8003b80:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003b84:	d047      	beq.n	8003c16 <ADC_ConfigureBoostMode+0x102>
 8003b86:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003b8a:	d84e      	bhi.n	8003c2a <ADC_ConfigureBoostMode+0x116>
 8003b8c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003b90:	d03d      	beq.n	8003c0e <ADC_ConfigureBoostMode+0xfa>
 8003b92:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003b96:	d848      	bhi.n	8003c2a <ADC_ConfigureBoostMode+0x116>
 8003b98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003b9c:	d033      	beq.n	8003c06 <ADC_ConfigureBoostMode+0xf2>
 8003b9e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ba2:	d842      	bhi.n	8003c2a <ADC_ConfigureBoostMode+0x116>
 8003ba4:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003ba8:	d029      	beq.n	8003bfe <ADC_ConfigureBoostMode+0xea>
 8003baa:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003bae:	d83c      	bhi.n	8003c2a <ADC_ConfigureBoostMode+0x116>
 8003bb0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003bb4:	d01a      	beq.n	8003bec <ADC_ConfigureBoostMode+0xd8>
 8003bb6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003bba:	d836      	bhi.n	8003c2a <ADC_ConfigureBoostMode+0x116>
 8003bbc:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003bc0:	d014      	beq.n	8003bec <ADC_ConfigureBoostMode+0xd8>
 8003bc2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003bc6:	d830      	bhi.n	8003c2a <ADC_ConfigureBoostMode+0x116>
 8003bc8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bcc:	d00e      	beq.n	8003bec <ADC_ConfigureBoostMode+0xd8>
 8003bce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bd2:	d82a      	bhi.n	8003c2a <ADC_ConfigureBoostMode+0x116>
 8003bd4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003bd8:	d008      	beq.n	8003bec <ADC_ConfigureBoostMode+0xd8>
 8003bda:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003bde:	d824      	bhi.n	8003c2a <ADC_ConfigureBoostMode+0x116>
 8003be0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003be4:	d002      	beq.n	8003bec <ADC_ConfigureBoostMode+0xd8>
 8003be6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003bea:	d11e      	bne.n	8003c2a <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	0c9b      	lsrs	r3, r3, #18
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bfa:	60fb      	str	r3, [r7, #12]
        break;
 8003bfc:	e016      	b.n	8003c2c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	091b      	lsrs	r3, r3, #4
 8003c02:	60fb      	str	r3, [r7, #12]
        break;
 8003c04:	e012      	b.n	8003c2c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	095b      	lsrs	r3, r3, #5
 8003c0a:	60fb      	str	r3, [r7, #12]
        break;
 8003c0c:	e00e      	b.n	8003c2c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	099b      	lsrs	r3, r3, #6
 8003c12:	60fb      	str	r3, [r7, #12]
        break;
 8003c14:	e00a      	b.n	8003c2c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	09db      	lsrs	r3, r3, #7
 8003c1a:	60fb      	str	r3, [r7, #12]
        break;
 8003c1c:	e006      	b.n	8003c2c <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	0a1b      	lsrs	r3, r3, #8
 8003c22:	60fb      	str	r3, [r7, #12]
        break;
 8003c24:	e002      	b.n	8003c2c <ADC_ConfigureBoostMode+0x118>
        break;
 8003c26:	bf00      	nop
 8003c28:	e000      	b.n	8003c2c <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8003c2a:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	085b      	lsrs	r3, r3, #1
 8003c30:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4a1b      	ldr	r2, [pc, #108]	@ (8003ca4 <ADC_ConfigureBoostMode+0x190>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d808      	bhi.n	8003c4c <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689a      	ldr	r2, [r3, #8]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003c48:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003c4a:	e025      	b.n	8003c98 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	4a16      	ldr	r2, [pc, #88]	@ (8003ca8 <ADC_ConfigureBoostMode+0x194>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d80a      	bhi.n	8003c6a <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c66:	609a      	str	r2, [r3, #8]
}
 8003c68:	e016      	b.n	8003c98 <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	4a0f      	ldr	r2, [pc, #60]	@ (8003cac <ADC_ConfigureBoostMode+0x198>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d80a      	bhi.n	8003c88 <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c84:	609a      	str	r2, [r3, #8]
}
 8003c86:	e007      	b.n	8003c98 <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	689a      	ldr	r2, [r3, #8]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003c96:	609a      	str	r2, [r3, #8]
}
 8003c98:	bf00      	nop
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40022300 	.word	0x40022300
 8003ca4:	005f5e10 	.word	0x005f5e10
 8003ca8:	00bebc20 	.word	0x00bebc20
 8003cac:	017d7840 	.word	0x017d7840

08003cb0 <LL_ADC_IsEnabled>:
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d101      	bne.n	8003cc8 <LL_ADC_IsEnabled+0x18>
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e000      	b.n	8003cca <LL_ADC_IsEnabled+0x1a>
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <LL_ADC_REG_IsConversionOngoing>:
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 0304 	and.w	r3, r3, #4
 8003ce6:	2b04      	cmp	r3, #4
 8003ce8:	d101      	bne.n	8003cee <LL_ADC_REG_IsConversionOngoing+0x18>
 8003cea:	2301      	movs	r3, #1
 8003cec:	e000      	b.n	8003cf0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003cfc:	b590      	push	{r4, r7, lr}
 8003cfe:	b09f      	sub	sp, #124	@ 0x7c
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d06:	2300      	movs	r3, #0
 8003d08:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d101      	bne.n	8003d1a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003d16:	2302      	movs	r3, #2
 8003d18:	e080      	b.n	8003e1c <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003d22:	2300      	movs	r3, #0
 8003d24:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003d26:	2300      	movs	r3, #0
 8003d28:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a3d      	ldr	r2, [pc, #244]	@ (8003e24 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d102      	bne.n	8003d3a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003d34:	4b3c      	ldr	r3, [pc, #240]	@ (8003e28 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003d36:	60bb      	str	r3, [r7, #8]
 8003d38:	e001      	b.n	8003d3e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10b      	bne.n	8003d5c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d48:	f043 0220 	orr.w	r2, r3, #32
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e05f      	b.n	8003e1c <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7ff ffb9 	bl	8003cd6 <LL_ADC_REG_IsConversionOngoing>
 8003d64:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7ff ffb3 	bl	8003cd6 <LL_ADC_REG_IsConversionOngoing>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d141      	bne.n	8003dfa <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003d76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d13e      	bne.n	8003dfa <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003d7c:	4b2b      	ldr	r3, [pc, #172]	@ (8003e2c <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8003d7e:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d020      	beq.n	8003dca <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003d88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	431a      	orrs	r2, r3
 8003d96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d98:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d9a:	4822      	ldr	r0, [pc, #136]	@ (8003e24 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003d9c:	f7ff ff88 	bl	8003cb0 <LL_ADC_IsEnabled>
 8003da0:	4604      	mov	r4, r0
 8003da2:	4821      	ldr	r0, [pc, #132]	@ (8003e28 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003da4:	f7ff ff84 	bl	8003cb0 <LL_ADC_IsEnabled>
 8003da8:	4603      	mov	r3, r0
 8003daa:	4323      	orrs	r3, r4
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d12e      	bne.n	8003e0e <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003db0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003db2:	689a      	ldr	r2, [r3, #8]
 8003db4:	4b1e      	ldr	r3, [pc, #120]	@ (8003e30 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8003db6:	4013      	ands	r3, r2
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	6811      	ldr	r1, [r2, #0]
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	6892      	ldr	r2, [r2, #8]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dc6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003dc8:	e021      	b.n	8003e0e <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003dca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003dd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dd4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003dd6:	4813      	ldr	r0, [pc, #76]	@ (8003e24 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003dd8:	f7ff ff6a 	bl	8003cb0 <LL_ADC_IsEnabled>
 8003ddc:	4604      	mov	r4, r0
 8003dde:	4812      	ldr	r0, [pc, #72]	@ (8003e28 <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003de0:	f7ff ff66 	bl	8003cb0 <LL_ADC_IsEnabled>
 8003de4:	4603      	mov	r3, r0
 8003de6:	4323      	orrs	r3, r4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d110      	bne.n	8003e0e <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003dec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dee:	689a      	ldr	r2, [r3, #8]
 8003df0:	4b0f      	ldr	r3, [pc, #60]	@ (8003e30 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8003df2:	4013      	ands	r3, r2
 8003df4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003df6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003df8:	e009      	b.n	8003e0e <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dfe:	f043 0220 	orr.w	r2, r3, #32
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003e0c:	e000      	b.n	8003e10 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e0e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003e18:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	377c      	adds	r7, #124	@ 0x7c
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd90      	pop	{r4, r7, pc}
 8003e24:	40022000 	.word	0x40022000
 8003e28:	40022100 	.word	0x40022100
 8003e2c:	40022300 	.word	0x40022300
 8003e30:	fffff0e0 	.word	0xfffff0e0

08003e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f003 0307 	and.w	r3, r3, #7
 8003e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e44:	4b0b      	ldr	r3, [pc, #44]	@ (8003e74 <__NVIC_SetPriorityGrouping+0x40>)
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e50:	4013      	ands	r3, r2
 8003e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003e5c:	4b06      	ldr	r3, [pc, #24]	@ (8003e78 <__NVIC_SetPriorityGrouping+0x44>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e62:	4a04      	ldr	r2, [pc, #16]	@ (8003e74 <__NVIC_SetPriorityGrouping+0x40>)
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	60d3      	str	r3, [r2, #12]
}
 8003e68:	bf00      	nop
 8003e6a:	3714      	adds	r7, #20
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr
 8003e74:	e000ed00 	.word	0xe000ed00
 8003e78:	05fa0000 	.word	0x05fa0000

08003e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e80:	4b04      	ldr	r3, [pc, #16]	@ (8003e94 <__NVIC_GetPriorityGrouping+0x18>)
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	0a1b      	lsrs	r3, r3, #8
 8003e86:	f003 0307 	and.w	r3, r3, #7
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr
 8003e94:	e000ed00 	.word	0xe000ed00

08003e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003ea2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	db0b      	blt.n	8003ec2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003eaa:	88fb      	ldrh	r3, [r7, #6]
 8003eac:	f003 021f 	and.w	r2, r3, #31
 8003eb0:	4907      	ldr	r1, [pc, #28]	@ (8003ed0 <__NVIC_EnableIRQ+0x38>)
 8003eb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003eb6:	095b      	lsrs	r3, r3, #5
 8003eb8:	2001      	movs	r0, #1
 8003eba:	fa00 f202 	lsl.w	r2, r0, r2
 8003ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003ec2:	bf00      	nop
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	e000e100 	.word	0xe000e100

08003ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	4603      	mov	r3, r0
 8003edc:	6039      	str	r1, [r7, #0]
 8003ede:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003ee0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	db0a      	blt.n	8003efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	490c      	ldr	r1, [pc, #48]	@ (8003f20 <__NVIC_SetPriority+0x4c>)
 8003eee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ef2:	0112      	lsls	r2, r2, #4
 8003ef4:	b2d2      	uxtb	r2, r2
 8003ef6:	440b      	add	r3, r1
 8003ef8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003efc:	e00a      	b.n	8003f14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	4908      	ldr	r1, [pc, #32]	@ (8003f24 <__NVIC_SetPriority+0x50>)
 8003f04:	88fb      	ldrh	r3, [r7, #6]
 8003f06:	f003 030f 	and.w	r3, r3, #15
 8003f0a:	3b04      	subs	r3, #4
 8003f0c:	0112      	lsls	r2, r2, #4
 8003f0e:	b2d2      	uxtb	r2, r2
 8003f10:	440b      	add	r3, r1
 8003f12:	761a      	strb	r2, [r3, #24]
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr
 8003f20:	e000e100 	.word	0xe000e100
 8003f24:	e000ed00 	.word	0xe000ed00

08003f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b089      	sub	sp, #36	@ 0x24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f003 0307 	and.w	r3, r3, #7
 8003f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	f1c3 0307 	rsb	r3, r3, #7
 8003f42:	2b04      	cmp	r3, #4
 8003f44:	bf28      	it	cs
 8003f46:	2304      	movcs	r3, #4
 8003f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	3304      	adds	r3, #4
 8003f4e:	2b06      	cmp	r3, #6
 8003f50:	d902      	bls.n	8003f58 <NVIC_EncodePriority+0x30>
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	3b03      	subs	r3, #3
 8003f56:	e000      	b.n	8003f5a <NVIC_EncodePriority+0x32>
 8003f58:	2300      	movs	r3, #0
 8003f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	43da      	mvns	r2, r3
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	401a      	ands	r2, r3
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f70:	f04f 31ff 	mov.w	r1, #4294967295
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	fa01 f303 	lsl.w	r3, r1, r3
 8003f7a:	43d9      	mvns	r1, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f80:	4313      	orrs	r3, r2
         );
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3724      	adds	r7, #36	@ 0x24
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
	...

08003f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fa0:	d301      	bcc.n	8003fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e00f      	b.n	8003fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8003fd0 <SysTick_Config+0x40>)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	3b01      	subs	r3, #1
 8003fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003fae:	210f      	movs	r1, #15
 8003fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003fb4:	f7ff ff8e 	bl	8003ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003fb8:	4b05      	ldr	r3, [pc, #20]	@ (8003fd0 <SysTick_Config+0x40>)
 8003fba:	2200      	movs	r2, #0
 8003fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003fbe:	4b04      	ldr	r3, [pc, #16]	@ (8003fd0 <SysTick_Config+0x40>)
 8003fc0:	2207      	movs	r2, #7
 8003fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	e000e010 	.word	0xe000e010

08003fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f7ff ff29 	bl	8003e34 <__NVIC_SetPriorityGrouping>
}
 8003fe2:	bf00      	nop
 8003fe4:	3708      	adds	r7, #8
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b086      	sub	sp, #24
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	60b9      	str	r1, [r7, #8]
 8003ff4:	607a      	str	r2, [r7, #4]
 8003ff6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ff8:	f7ff ff40 	bl	8003e7c <__NVIC_GetPriorityGrouping>
 8003ffc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	68b9      	ldr	r1, [r7, #8]
 8004002:	6978      	ldr	r0, [r7, #20]
 8004004:	f7ff ff90 	bl	8003f28 <NVIC_EncodePriority>
 8004008:	4602      	mov	r2, r0
 800400a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800400e:	4611      	mov	r1, r2
 8004010:	4618      	mov	r0, r3
 8004012:	f7ff ff5f 	bl	8003ed4 <__NVIC_SetPriority>
}
 8004016:	bf00      	nop
 8004018:	3718      	adds	r7, #24
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800401e:	b580      	push	{r7, lr}
 8004020:	b082      	sub	sp, #8
 8004022:	af00      	add	r7, sp, #0
 8004024:	4603      	mov	r3, r0
 8004026:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004028:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800402c:	4618      	mov	r0, r3
 800402e:	f7ff ff33 	bl	8003e98 <__NVIC_EnableIRQ>
}
 8004032:	bf00      	nop
 8004034:	3708      	adds	r7, #8
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}

0800403a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b082      	sub	sp, #8
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f7ff ffa4 	bl	8003f90 <SysTick_Config>
 8004048:	4603      	mov	r3, r0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3708      	adds	r7, #8
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
	...

08004054 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004054:	b480      	push	{r7}
 8004056:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8004058:	f3bf 8f5f 	dmb	sy
}
 800405c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800405e:	4b07      	ldr	r3, [pc, #28]	@ (800407c <HAL_MPU_Disable+0x28>)
 8004060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004062:	4a06      	ldr	r2, [pc, #24]	@ (800407c <HAL_MPU_Disable+0x28>)
 8004064:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004068:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800406a:	4b05      	ldr	r3, [pc, #20]	@ (8004080 <HAL_MPU_Disable+0x2c>)
 800406c:	2200      	movs	r2, #0
 800406e:	605a      	str	r2, [r3, #4]
}
 8004070:	bf00      	nop
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	e000ed00 	.word	0xe000ed00
 8004080:	e000ed90 	.word	0xe000ed90

08004084 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800408c:	4a0b      	ldr	r2, [pc, #44]	@ (80040bc <HAL_MPU_Enable+0x38>)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f043 0301 	orr.w	r3, r3, #1
 8004094:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8004096:	4b0a      	ldr	r3, [pc, #40]	@ (80040c0 <HAL_MPU_Enable+0x3c>)
 8004098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800409a:	4a09      	ldr	r2, [pc, #36]	@ (80040c0 <HAL_MPU_Enable+0x3c>)
 800409c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040a0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80040a2:	f3bf 8f4f 	dsb	sy
}
 80040a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80040a8:	f3bf 8f6f 	isb	sy
}
 80040ac:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80040ae:	bf00      	nop
 80040b0:	370c      	adds	r7, #12
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	e000ed90 	.word	0xe000ed90
 80040c0:	e000ed00 	.word	0xe000ed00

080040c4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	785a      	ldrb	r2, [r3, #1]
 80040d0:	4b1b      	ldr	r3, [pc, #108]	@ (8004140 <HAL_MPU_ConfigRegion+0x7c>)
 80040d2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80040d4:	4b1a      	ldr	r3, [pc, #104]	@ (8004140 <HAL_MPU_ConfigRegion+0x7c>)
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	4a19      	ldr	r2, [pc, #100]	@ (8004140 <HAL_MPU_ConfigRegion+0x7c>)
 80040da:	f023 0301 	bic.w	r3, r3, #1
 80040de:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80040e0:	4a17      	ldr	r2, [pc, #92]	@ (8004140 <HAL_MPU_ConfigRegion+0x7c>)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	7b1b      	ldrb	r3, [r3, #12]
 80040ec:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	7adb      	ldrb	r3, [r3, #11]
 80040f2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80040f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	7a9b      	ldrb	r3, [r3, #10]
 80040fa:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80040fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	7b5b      	ldrb	r3, [r3, #13]
 8004102:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004104:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	7b9b      	ldrb	r3, [r3, #14]
 800410a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800410c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	7bdb      	ldrb	r3, [r3, #15]
 8004112:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004114:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	7a5b      	ldrb	r3, [r3, #9]
 800411a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800411c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	7a1b      	ldrb	r3, [r3, #8]
 8004122:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004124:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	7812      	ldrb	r2, [r2, #0]
 800412a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800412c:	4a04      	ldr	r2, [pc, #16]	@ (8004140 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800412e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004130:	6113      	str	r3, [r2, #16]
}
 8004132:	bf00      	nop
 8004134:	370c      	adds	r7, #12
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	e000ed90 	.word	0xe000ed90

08004144 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e069      	b.n	800422a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	d102      	bne.n	8004168 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7fe faa0 	bl	80026a8 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d002      	beq.n	800417e <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	6819      	ldr	r1, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	4b2a      	ldr	r3, [pc, #168]	@ (8004234 <HAL_DCMI_Init+0xf0>)
 800418a:	400b      	ands	r3, r1
 800418c:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6819      	ldr	r1, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685a      	ldr	r2, [r3, #4]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	695b      	ldr	r3, [r3, #20]
 800419c:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80041a2:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80041ae:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80041ba:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c0:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80041c6:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041cc:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80041d2:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	2b10      	cmp	r3, #16
 80041e2:	d112      	bne.n	800420a <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	7f1b      	ldrb	r3, [r3, #28]
 80041e8:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	7f5b      	ldrb	r3, [r3, #29]
 80041ee:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80041f0:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	7f9b      	ldrb	r3, [r3, #30]
 80041f6:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80041f8:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	7fdb      	ldrb	r3, [r3, #31]
 8004200:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004206:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004208:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68da      	ldr	r2, [r3, #12]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f042 021e 	orr.w	r2, r2, #30
 8004218:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3708      	adds	r7, #8
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	ffe0f007 	.word	0xffe0f007

08004238 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b088      	sub	sp, #32
 800423c:	af02      	add	r7, sp, #8
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	607a      	str	r2, [r7, #4]
 8004244:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800424c:	2b01      	cmp	r3, #1
 800424e:	d101      	bne.n	8004254 <HAL_DCMI_Start_DMA+0x1c>
 8004250:	2302      	movs	r3, #2
 8004252:	e0ab      	b.n	80043ac <HAL_DCMI_Start_DMA+0x174>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004272:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 0202 	bic.w	r2, r2, #2
 8004282:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6819      	ldr	r1, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	430a      	orrs	r2, r1
 8004292:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004298:	4a46      	ldr	r2, [pc, #280]	@ (80043b4 <HAL_DCMI_Start_DMA+0x17c>)
 800429a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042a0:	4a45      	ldr	r2, [pc, #276]	@ (80043b8 <HAL_DCMI_Start_DMA+0x180>)
 80042a2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042a8:	2200      	movs	r2, #0
 80042aa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	639a      	str	r2, [r3, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hdcmi->XferSize = 0;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdcmi->pBuffPtr = 0;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	645a      	str	r2, [r3, #68]	@ 0x44

  if (Length <= 0xFFFFU)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042ca:	d219      	bcs.n	8004300 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	3328      	adds	r3, #40	@ 0x28
 80042d6:	4619      	mov	r1, r3
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	f000 fdb6 	bl	8004e4c <HAL_DMA_Start_IT>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d055      	beq.n	8004392 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2240      	movs	r2, #64	@ 0x40
 80042ea:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e055      	b.n	80043ac <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004304:	4a2b      	ldr	r2, [pc, #172]	@ (80043b4 <HAL_DCMI_Start_DMA+0x17c>)
 8004306:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2201      	movs	r2, #1
 800430c:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferSize = Length;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdcmi->pBuffPtr = pData;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 800431a:	e009      	b.n	8004330 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004320:	085a      	lsrs	r2, r3, #1
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800432a:	005a      	lsls	r2, r3, #1
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	639a      	str	r2, [r3, #56]	@ 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004334:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004338:	d2f0      	bcs.n	800431c <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800433e:	1e9a      	subs	r2, r3, #2
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	4413      	add	r3, r2
 8004356:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	3328      	adds	r3, #40	@ 0x28
 8004362:	4619      	mov	r1, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	f003 f8bd 	bl	80074ec <HAL_DMAEx_MultiBufferStart_IT>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00c      	beq.n	8004392 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2240      	movs	r2, #64	@ 0x40
 800437c:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	e00c      	b.n	80043ac <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f042 0201 	orr.w	r2, r2, #1
 80043a0:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3718      	adds	r7, #24
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	080045d1 	.word	0x080045d1
 80043b8:	080046f7 	.word	0x080046f7

080043bc <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 80043c4:	4b2b      	ldr	r3, [pc, #172]	@ (8004474 <HAL_DCMI_Stop+0xb8>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a2b      	ldr	r2, [pc, #172]	@ (8004478 <HAL_DCMI_Stop+0xbc>)
 80043ca:	fba2 2303 	umull	r2, r3, r2, r3
 80043ce:	0a5b      	lsrs	r3, r3, #9
 80043d0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80043d4:	fb02 f303 	mul.w	r3, r2, r3
 80043d8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80043da:	2300      	movs	r3, #0
 80043dc:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d101      	bne.n	80043ec <HAL_DCMI_Stop+0x30>
 80043e8:	2302      	movs	r3, #2
 80043ea:	e03f      	b.n	800446c <HAL_DCMI_Stop+0xb0>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f022 0201 	bic.w	r2, r2, #1
 800440a:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	3b01      	subs	r3, #1
 8004410:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d108      	bne.n	800442a <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800441c:	f043 0220 	orr.w	r2, r3, #32
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	64da      	str	r2, [r3, #76]	@ 0x4c

      status = HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	72fb      	strb	r3, [r7, #11]
      break;
 8004428:	e006      	b.n	8004438 <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1e9      	bne.n	800440c <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004446:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800444c:	4618      	mov	r0, r3
 800444e:	f000 ff67 	bl	8005320 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return status;
 800446a:	7afb      	ldrb	r3, [r7, #11]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}
 8004474:	24000004 	.word	0x24000004
 8004478:	10624dd3 	.word	0x10624dd3

0800447c <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f003 0304 	and.w	r3, r3, #4
 8004492:	2b00      	cmp	r3, #0
 8004494:	d016      	beq.n	80044c4 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2204      	movs	r2, #4
 800449c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044a2:	f043 0202 	orr.w	r2, r3, #2
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2204      	movs	r2, #4
 80044ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044b6:	4a31      	ldr	r2, [pc, #196]	@ (800457c <HAL_DCMI_IRQHandler+0x100>)
 80044b8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044be:	4618      	mov	r0, r3
 80044c0:	f001 fa4c 	bl	800595c <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d016      	beq.n	80044fc <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2202      	movs	r2, #2
 80044d4:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044da:	f043 0201 	orr.w	r2, r3, #1
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2204      	movs	r2, #4
 80044e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044ee:	4a23      	ldr	r2, [pc, #140]	@ (800457c <HAL_DCMI_IRQHandler+0x100>)
 80044f0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044f6:	4618      	mov	r0, r3
 80044f8:	f001 fa30 	bl	800595c <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f003 0310 	and.w	r3, r3, #16
 8004502:	2b00      	cmp	r3, #0
 8004504:	d006      	beq.n	8004514 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2210      	movs	r2, #16
 800450c:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f840 	bl	8004594 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f003 0308 	and.w	r3, r3, #8
 800451a:	2b00      	cmp	r3, #0
 800451c:	d006      	beq.n	800452c <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2208      	movs	r2, #8
 8004524:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 f83e 	bl	80045a8 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d01d      	beq.n	8004572 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b02      	cmp	r3, #2
 8004542:	d107      	bne.n	8004554 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68da      	ldr	r2, [r3, #12]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f022 021e 	bic.w	r2, r2, #30
 8004552:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68da      	ldr	r2, [r3, #12]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 0201 	bic.w	r2, r2, #1
 8004562:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2201      	movs	r2, #1
 800456a:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 f825 	bl	80045bc <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8004572:	bf00      	nop
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	080046f7 	.word	0x080046f7

08004580 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b083      	sub	sp, #12
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045dc:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d043      	beq.n	800466e <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80045f2:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f8:	f003 0301 	and.w	r3, r3, #1
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d118      	bne.n	8004632 <DCMI_DMAXferCplt+0x62>
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d015      	beq.n	8004632 <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004618:	00da      	lsls	r2, r3, #3
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	4413      	add	r3, r2
 800461e:	2200      	movs	r2, #0
 8004620:	4619      	mov	r1, r3
 8004622:	f003 fac1 	bl	8007ba8 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800462a:	1e5a      	subs	r2, r3, #1
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	639a      	str	r2, [r3, #56]	@ 0x38
 8004630:	e044      	b.n	80046bc <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d13c      	bne.n	80046bc <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004654:	00da      	lsls	r2, r3, #3
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	4413      	add	r3, r2
 800465a:	2201      	movs	r2, #1
 800465c:	4619      	mov	r1, r3
 800465e:	f003 faa3 	bl	8007ba8 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004666:	1e5a      	subs	r2, r3, #1
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	639a      	str	r2, [r3, #56]	@ 0x38
 800466c:	e026      	b.n	80046bc <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d006      	beq.n	800468c <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004688:	60da      	str	r2, [r3, #12]
 800468a:	e017      	b.n	80046bc <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10f      	bne.n	80046bc <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046a0:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046a6:	0099      	lsls	r1, r3, #2
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	440a      	add	r2, r1
 80046b2:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	639a      	str	r2, [r3, #56]	@ 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d112      	bne.n	80046ee <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	68da      	ldr	r2, [r3, #12]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0201 	orr.w	r2, r2, #1
 80046d6:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0302 	and.w	r3, r3, #2
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d103      	bne.n	80046ee <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
  }
}
 80046ee:	bf00      	nop
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80046f6:	b580      	push	{r7, lr}
 80046f8:	b084      	sub	sp, #16
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004702:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800470a:	2b02      	cmp	r3, #2
 800470c:	d009      	beq.n	8004722 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800471a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f7ff ff2c 	bl	8004580 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8004728:	bf00      	nop
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004738:	f7fe fc26 	bl	8002f88 <HAL_GetTick>
 800473c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d101      	bne.n	8004748 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e37d      	b.n	8004e44 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a66      	ldr	r2, [pc, #408]	@ (80048e8 <HAL_DMA_Init+0x1b8>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d04a      	beq.n	80047e8 <HAL_DMA_Init+0xb8>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a65      	ldr	r2, [pc, #404]	@ (80048ec <HAL_DMA_Init+0x1bc>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d045      	beq.n	80047e8 <HAL_DMA_Init+0xb8>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a63      	ldr	r2, [pc, #396]	@ (80048f0 <HAL_DMA_Init+0x1c0>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d040      	beq.n	80047e8 <HAL_DMA_Init+0xb8>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a62      	ldr	r2, [pc, #392]	@ (80048f4 <HAL_DMA_Init+0x1c4>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d03b      	beq.n	80047e8 <HAL_DMA_Init+0xb8>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a60      	ldr	r2, [pc, #384]	@ (80048f8 <HAL_DMA_Init+0x1c8>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d036      	beq.n	80047e8 <HAL_DMA_Init+0xb8>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a5f      	ldr	r2, [pc, #380]	@ (80048fc <HAL_DMA_Init+0x1cc>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d031      	beq.n	80047e8 <HAL_DMA_Init+0xb8>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a5d      	ldr	r2, [pc, #372]	@ (8004900 <HAL_DMA_Init+0x1d0>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d02c      	beq.n	80047e8 <HAL_DMA_Init+0xb8>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a5c      	ldr	r2, [pc, #368]	@ (8004904 <HAL_DMA_Init+0x1d4>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d027      	beq.n	80047e8 <HAL_DMA_Init+0xb8>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a5a      	ldr	r2, [pc, #360]	@ (8004908 <HAL_DMA_Init+0x1d8>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d022      	beq.n	80047e8 <HAL_DMA_Init+0xb8>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a59      	ldr	r2, [pc, #356]	@ (800490c <HAL_DMA_Init+0x1dc>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d01d      	beq.n	80047e8 <HAL_DMA_Init+0xb8>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a57      	ldr	r2, [pc, #348]	@ (8004910 <HAL_DMA_Init+0x1e0>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d018      	beq.n	80047e8 <HAL_DMA_Init+0xb8>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a56      	ldr	r2, [pc, #344]	@ (8004914 <HAL_DMA_Init+0x1e4>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d013      	beq.n	80047e8 <HAL_DMA_Init+0xb8>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a54      	ldr	r2, [pc, #336]	@ (8004918 <HAL_DMA_Init+0x1e8>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d00e      	beq.n	80047e8 <HAL_DMA_Init+0xb8>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a53      	ldr	r2, [pc, #332]	@ (800491c <HAL_DMA_Init+0x1ec>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d009      	beq.n	80047e8 <HAL_DMA_Init+0xb8>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a51      	ldr	r2, [pc, #324]	@ (8004920 <HAL_DMA_Init+0x1f0>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d004      	beq.n	80047e8 <HAL_DMA_Init+0xb8>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a50      	ldr	r2, [pc, #320]	@ (8004924 <HAL_DMA_Init+0x1f4>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d101      	bne.n	80047ec <HAL_DMA_Init+0xbc>
 80047e8:	2301      	movs	r3, #1
 80047ea:	e000      	b.n	80047ee <HAL_DMA_Init+0xbe>
 80047ec:	2300      	movs	r3, #0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f000 813c 	beq.w	8004a6c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2202      	movs	r2, #2
 80047f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a37      	ldr	r2, [pc, #220]	@ (80048e8 <HAL_DMA_Init+0x1b8>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d04a      	beq.n	80048a4 <HAL_DMA_Init+0x174>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a36      	ldr	r2, [pc, #216]	@ (80048ec <HAL_DMA_Init+0x1bc>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d045      	beq.n	80048a4 <HAL_DMA_Init+0x174>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a34      	ldr	r2, [pc, #208]	@ (80048f0 <HAL_DMA_Init+0x1c0>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d040      	beq.n	80048a4 <HAL_DMA_Init+0x174>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a33      	ldr	r2, [pc, #204]	@ (80048f4 <HAL_DMA_Init+0x1c4>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d03b      	beq.n	80048a4 <HAL_DMA_Init+0x174>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a31      	ldr	r2, [pc, #196]	@ (80048f8 <HAL_DMA_Init+0x1c8>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d036      	beq.n	80048a4 <HAL_DMA_Init+0x174>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a30      	ldr	r2, [pc, #192]	@ (80048fc <HAL_DMA_Init+0x1cc>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d031      	beq.n	80048a4 <HAL_DMA_Init+0x174>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a2e      	ldr	r2, [pc, #184]	@ (8004900 <HAL_DMA_Init+0x1d0>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d02c      	beq.n	80048a4 <HAL_DMA_Init+0x174>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a2d      	ldr	r2, [pc, #180]	@ (8004904 <HAL_DMA_Init+0x1d4>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d027      	beq.n	80048a4 <HAL_DMA_Init+0x174>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a2b      	ldr	r2, [pc, #172]	@ (8004908 <HAL_DMA_Init+0x1d8>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d022      	beq.n	80048a4 <HAL_DMA_Init+0x174>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a2a      	ldr	r2, [pc, #168]	@ (800490c <HAL_DMA_Init+0x1dc>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d01d      	beq.n	80048a4 <HAL_DMA_Init+0x174>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a28      	ldr	r2, [pc, #160]	@ (8004910 <HAL_DMA_Init+0x1e0>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d018      	beq.n	80048a4 <HAL_DMA_Init+0x174>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a27      	ldr	r2, [pc, #156]	@ (8004914 <HAL_DMA_Init+0x1e4>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d013      	beq.n	80048a4 <HAL_DMA_Init+0x174>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a25      	ldr	r2, [pc, #148]	@ (8004918 <HAL_DMA_Init+0x1e8>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d00e      	beq.n	80048a4 <HAL_DMA_Init+0x174>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a24      	ldr	r2, [pc, #144]	@ (800491c <HAL_DMA_Init+0x1ec>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d009      	beq.n	80048a4 <HAL_DMA_Init+0x174>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a22      	ldr	r2, [pc, #136]	@ (8004920 <HAL_DMA_Init+0x1f0>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d004      	beq.n	80048a4 <HAL_DMA_Init+0x174>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a21      	ldr	r2, [pc, #132]	@ (8004924 <HAL_DMA_Init+0x1f4>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d108      	bne.n	80048b6 <HAL_DMA_Init+0x186>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f022 0201 	bic.w	r2, r2, #1
 80048b2:	601a      	str	r2, [r3, #0]
 80048b4:	e007      	b.n	80048c6 <HAL_DMA_Init+0x196>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 0201 	bic.w	r2, r2, #1
 80048c4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80048c6:	e02f      	b.n	8004928 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048c8:	f7fe fb5e 	bl	8002f88 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b05      	cmp	r3, #5
 80048d4:	d928      	bls.n	8004928 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2220      	movs	r2, #32
 80048da:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2203      	movs	r2, #3
 80048e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e2ad      	b.n	8004e44 <HAL_DMA_Init+0x714>
 80048e8:	40020010 	.word	0x40020010
 80048ec:	40020028 	.word	0x40020028
 80048f0:	40020040 	.word	0x40020040
 80048f4:	40020058 	.word	0x40020058
 80048f8:	40020070 	.word	0x40020070
 80048fc:	40020088 	.word	0x40020088
 8004900:	400200a0 	.word	0x400200a0
 8004904:	400200b8 	.word	0x400200b8
 8004908:	40020410 	.word	0x40020410
 800490c:	40020428 	.word	0x40020428
 8004910:	40020440 	.word	0x40020440
 8004914:	40020458 	.word	0x40020458
 8004918:	40020470 	.word	0x40020470
 800491c:	40020488 	.word	0x40020488
 8004920:	400204a0 	.word	0x400204a0
 8004924:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1c8      	bne.n	80048c8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	4b73      	ldr	r3, [pc, #460]	@ (8004b10 <HAL_DMA_Init+0x3e0>)
 8004942:	4013      	ands	r3, r2
 8004944:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800494e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800495a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004966:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a1b      	ldr	r3, [r3, #32]
 800496c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	4313      	orrs	r3, r2
 8004972:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004978:	2b04      	cmp	r3, #4
 800497a:	d107      	bne.n	800498c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004984:	4313      	orrs	r3, r2
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	4313      	orrs	r3, r2
 800498a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	2b28      	cmp	r3, #40	@ 0x28
 8004992:	d903      	bls.n	800499c <HAL_DMA_Init+0x26c>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	2b2e      	cmp	r3, #46	@ 0x2e
 800499a:	d91f      	bls.n	80049dc <HAL_DMA_Init+0x2ac>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	2b3e      	cmp	r3, #62	@ 0x3e
 80049a2:	d903      	bls.n	80049ac <HAL_DMA_Init+0x27c>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	2b42      	cmp	r3, #66	@ 0x42
 80049aa:	d917      	bls.n	80049dc <HAL_DMA_Init+0x2ac>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	2b46      	cmp	r3, #70	@ 0x46
 80049b2:	d903      	bls.n	80049bc <HAL_DMA_Init+0x28c>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	2b48      	cmp	r3, #72	@ 0x48
 80049ba:	d90f      	bls.n	80049dc <HAL_DMA_Init+0x2ac>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	2b4e      	cmp	r3, #78	@ 0x4e
 80049c2:	d903      	bls.n	80049cc <HAL_DMA_Init+0x29c>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	2b52      	cmp	r3, #82	@ 0x52
 80049ca:	d907      	bls.n	80049dc <HAL_DMA_Init+0x2ac>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	2b73      	cmp	r3, #115	@ 0x73
 80049d2:	d905      	bls.n	80049e0 <HAL_DMA_Init+0x2b0>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	2b77      	cmp	r3, #119	@ 0x77
 80049da:	d801      	bhi.n	80049e0 <HAL_DMA_Init+0x2b0>
 80049dc:	2301      	movs	r3, #1
 80049de:	e000      	b.n	80049e2 <HAL_DMA_Init+0x2b2>
 80049e0:	2300      	movs	r3, #0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80049ec:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	697a      	ldr	r2, [r7, #20]
 80049f4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	695b      	ldr	r3, [r3, #20]
 80049fc:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f023 0307 	bic.w	r3, r3, #7
 8004a04:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a0a:	697a      	ldr	r2, [r7, #20]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a14:	2b04      	cmp	r3, #4
 8004a16:	d117      	bne.n	8004a48 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00e      	beq.n	8004a48 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f002 fbd4 	bl	80071d8 <DMA_CheckFifoParam>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d008      	beq.n	8004a48 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2240      	movs	r2, #64	@ 0x40
 8004a3a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e1fd      	b.n	8004e44 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f002 fb0f 	bl	8007074 <DMA_CalcBaseAndBitshift>
 8004a56:	4603      	mov	r3, r0
 8004a58:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a5e:	f003 031f 	and.w	r3, r3, #31
 8004a62:	223f      	movs	r2, #63	@ 0x3f
 8004a64:	409a      	lsls	r2, r3
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	609a      	str	r2, [r3, #8]
 8004a6a:	e0fd      	b.n	8004c68 <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a28      	ldr	r2, [pc, #160]	@ (8004b14 <HAL_DMA_Init+0x3e4>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d04a      	beq.n	8004b0c <HAL_DMA_Init+0x3dc>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a27      	ldr	r2, [pc, #156]	@ (8004b18 <HAL_DMA_Init+0x3e8>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d045      	beq.n	8004b0c <HAL_DMA_Init+0x3dc>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a25      	ldr	r2, [pc, #148]	@ (8004b1c <HAL_DMA_Init+0x3ec>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d040      	beq.n	8004b0c <HAL_DMA_Init+0x3dc>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a24      	ldr	r2, [pc, #144]	@ (8004b20 <HAL_DMA_Init+0x3f0>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d03b      	beq.n	8004b0c <HAL_DMA_Init+0x3dc>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a22      	ldr	r2, [pc, #136]	@ (8004b24 <HAL_DMA_Init+0x3f4>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d036      	beq.n	8004b0c <HAL_DMA_Init+0x3dc>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a21      	ldr	r2, [pc, #132]	@ (8004b28 <HAL_DMA_Init+0x3f8>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d031      	beq.n	8004b0c <HAL_DMA_Init+0x3dc>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a1f      	ldr	r2, [pc, #124]	@ (8004b2c <HAL_DMA_Init+0x3fc>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d02c      	beq.n	8004b0c <HAL_DMA_Init+0x3dc>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a1e      	ldr	r2, [pc, #120]	@ (8004b30 <HAL_DMA_Init+0x400>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d027      	beq.n	8004b0c <HAL_DMA_Init+0x3dc>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a1c      	ldr	r2, [pc, #112]	@ (8004b34 <HAL_DMA_Init+0x404>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d022      	beq.n	8004b0c <HAL_DMA_Init+0x3dc>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a1b      	ldr	r2, [pc, #108]	@ (8004b38 <HAL_DMA_Init+0x408>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d01d      	beq.n	8004b0c <HAL_DMA_Init+0x3dc>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a19      	ldr	r2, [pc, #100]	@ (8004b3c <HAL_DMA_Init+0x40c>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d018      	beq.n	8004b0c <HAL_DMA_Init+0x3dc>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a18      	ldr	r2, [pc, #96]	@ (8004b40 <HAL_DMA_Init+0x410>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d013      	beq.n	8004b0c <HAL_DMA_Init+0x3dc>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a16      	ldr	r2, [pc, #88]	@ (8004b44 <HAL_DMA_Init+0x414>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d00e      	beq.n	8004b0c <HAL_DMA_Init+0x3dc>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a15      	ldr	r2, [pc, #84]	@ (8004b48 <HAL_DMA_Init+0x418>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d009      	beq.n	8004b0c <HAL_DMA_Init+0x3dc>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a13      	ldr	r2, [pc, #76]	@ (8004b4c <HAL_DMA_Init+0x41c>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d004      	beq.n	8004b0c <HAL_DMA_Init+0x3dc>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a12      	ldr	r2, [pc, #72]	@ (8004b50 <HAL_DMA_Init+0x420>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d123      	bne.n	8004b54 <HAL_DMA_Init+0x424>
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e022      	b.n	8004b56 <HAL_DMA_Init+0x426>
 8004b10:	fe10803f 	.word	0xfe10803f
 8004b14:	48022c08 	.word	0x48022c08
 8004b18:	48022c1c 	.word	0x48022c1c
 8004b1c:	48022c30 	.word	0x48022c30
 8004b20:	48022c44 	.word	0x48022c44
 8004b24:	48022c58 	.word	0x48022c58
 8004b28:	48022c6c 	.word	0x48022c6c
 8004b2c:	48022c80 	.word	0x48022c80
 8004b30:	48022c94 	.word	0x48022c94
 8004b34:	58025408 	.word	0x58025408
 8004b38:	5802541c 	.word	0x5802541c
 8004b3c:	58025430 	.word	0x58025430
 8004b40:	58025444 	.word	0x58025444
 8004b44:	58025458 	.word	0x58025458
 8004b48:	5802546c 	.word	0x5802546c
 8004b4c:	58025480 	.word	0x58025480
 8004b50:	58025494 	.word	0x58025494
 8004b54:	2300      	movs	r3, #0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d07d      	beq.n	8004c56 <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a7f      	ldr	r2, [pc, #508]	@ (8004d5c <HAL_DMA_Init+0x62c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d021      	beq.n	8004ba8 <HAL_DMA_Init+0x478>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a7d      	ldr	r2, [pc, #500]	@ (8004d60 <HAL_DMA_Init+0x630>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d01c      	beq.n	8004ba8 <HAL_DMA_Init+0x478>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a7c      	ldr	r2, [pc, #496]	@ (8004d64 <HAL_DMA_Init+0x634>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d017      	beq.n	8004ba8 <HAL_DMA_Init+0x478>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a7a      	ldr	r2, [pc, #488]	@ (8004d68 <HAL_DMA_Init+0x638>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d012      	beq.n	8004ba8 <HAL_DMA_Init+0x478>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a79      	ldr	r2, [pc, #484]	@ (8004d6c <HAL_DMA_Init+0x63c>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d00d      	beq.n	8004ba8 <HAL_DMA_Init+0x478>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a77      	ldr	r2, [pc, #476]	@ (8004d70 <HAL_DMA_Init+0x640>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d008      	beq.n	8004ba8 <HAL_DMA_Init+0x478>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a76      	ldr	r2, [pc, #472]	@ (8004d74 <HAL_DMA_Init+0x644>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d003      	beq.n	8004ba8 <HAL_DMA_Init+0x478>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a74      	ldr	r2, [pc, #464]	@ (8004d78 <HAL_DMA_Init+0x648>)
 8004ba6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	4b6e      	ldr	r3, [pc, #440]	@ (8004d7c <HAL_DMA_Init+0x64c>)
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	2b40      	cmp	r3, #64	@ 0x40
 8004bce:	d008      	beq.n	8004be2 <HAL_DMA_Init+0x4b2>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	2b80      	cmp	r3, #128	@ 0x80
 8004bd6:	d102      	bne.n	8004bde <HAL_DMA_Init+0x4ae>
 8004bd8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004bdc:	e002      	b.n	8004be4 <HAL_DMA_Init+0x4b4>
 8004bde:	2300      	movs	r3, #0
 8004be0:	e000      	b.n	8004be4 <HAL_DMA_Init+0x4b4>
 8004be2:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	68d2      	ldr	r2, [r2, #12]
 8004be8:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004bea:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004bf2:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	695b      	ldr	r3, [r3, #20]
 8004bf8:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004bfa:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	699b      	ldr	r3, [r3, #24]
 8004c00:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004c02:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	69db      	ldr	r3, [r3, #28]
 8004c08:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004c0a:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004c12:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	4313      	orrs	r3, r2
 8004c18:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	461a      	mov	r2, r3
 8004c28:	4b55      	ldr	r3, [pc, #340]	@ (8004d80 <HAL_DMA_Init+0x650>)
 8004c2a:	4413      	add	r3, r2
 8004c2c:	4a55      	ldr	r2, [pc, #340]	@ (8004d84 <HAL_DMA_Init+0x654>)
 8004c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c32:	091b      	lsrs	r3, r3, #4
 8004c34:	009a      	lsls	r2, r3, #2
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f002 fa1a 	bl	8007074 <DMA_CalcBaseAndBitshift>
 8004c40:	4603      	mov	r3, r0
 8004c42:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c48:	f003 031f 	and.w	r3, r3, #31
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	409a      	lsls	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	605a      	str	r2, [r3, #4]
 8004c54:	e008      	b.n	8004c68 <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2240      	movs	r2, #64	@ 0x40
 8004c5a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2203      	movs	r2, #3
 8004c60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e0ed      	b.n	8004e44 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a46      	ldr	r2, [pc, #280]	@ (8004d88 <HAL_DMA_Init+0x658>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d072      	beq.n	8004d58 <HAL_DMA_Init+0x628>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a45      	ldr	r2, [pc, #276]	@ (8004d8c <HAL_DMA_Init+0x65c>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d06d      	beq.n	8004d58 <HAL_DMA_Init+0x628>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a43      	ldr	r2, [pc, #268]	@ (8004d90 <HAL_DMA_Init+0x660>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d068      	beq.n	8004d58 <HAL_DMA_Init+0x628>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a42      	ldr	r2, [pc, #264]	@ (8004d94 <HAL_DMA_Init+0x664>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d063      	beq.n	8004d58 <HAL_DMA_Init+0x628>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a40      	ldr	r2, [pc, #256]	@ (8004d98 <HAL_DMA_Init+0x668>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d05e      	beq.n	8004d58 <HAL_DMA_Init+0x628>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a3f      	ldr	r2, [pc, #252]	@ (8004d9c <HAL_DMA_Init+0x66c>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d059      	beq.n	8004d58 <HAL_DMA_Init+0x628>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a3d      	ldr	r2, [pc, #244]	@ (8004da0 <HAL_DMA_Init+0x670>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d054      	beq.n	8004d58 <HAL_DMA_Init+0x628>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a3c      	ldr	r2, [pc, #240]	@ (8004da4 <HAL_DMA_Init+0x674>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d04f      	beq.n	8004d58 <HAL_DMA_Init+0x628>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a3a      	ldr	r2, [pc, #232]	@ (8004da8 <HAL_DMA_Init+0x678>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d04a      	beq.n	8004d58 <HAL_DMA_Init+0x628>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a39      	ldr	r2, [pc, #228]	@ (8004dac <HAL_DMA_Init+0x67c>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d045      	beq.n	8004d58 <HAL_DMA_Init+0x628>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a37      	ldr	r2, [pc, #220]	@ (8004db0 <HAL_DMA_Init+0x680>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d040      	beq.n	8004d58 <HAL_DMA_Init+0x628>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a36      	ldr	r2, [pc, #216]	@ (8004db4 <HAL_DMA_Init+0x684>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d03b      	beq.n	8004d58 <HAL_DMA_Init+0x628>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a34      	ldr	r2, [pc, #208]	@ (8004db8 <HAL_DMA_Init+0x688>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d036      	beq.n	8004d58 <HAL_DMA_Init+0x628>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a33      	ldr	r2, [pc, #204]	@ (8004dbc <HAL_DMA_Init+0x68c>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d031      	beq.n	8004d58 <HAL_DMA_Init+0x628>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a31      	ldr	r2, [pc, #196]	@ (8004dc0 <HAL_DMA_Init+0x690>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d02c      	beq.n	8004d58 <HAL_DMA_Init+0x628>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a30      	ldr	r2, [pc, #192]	@ (8004dc4 <HAL_DMA_Init+0x694>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d027      	beq.n	8004d58 <HAL_DMA_Init+0x628>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a13      	ldr	r2, [pc, #76]	@ (8004d5c <HAL_DMA_Init+0x62c>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d022      	beq.n	8004d58 <HAL_DMA_Init+0x628>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a12      	ldr	r2, [pc, #72]	@ (8004d60 <HAL_DMA_Init+0x630>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d01d      	beq.n	8004d58 <HAL_DMA_Init+0x628>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a10      	ldr	r2, [pc, #64]	@ (8004d64 <HAL_DMA_Init+0x634>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d018      	beq.n	8004d58 <HAL_DMA_Init+0x628>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a0f      	ldr	r2, [pc, #60]	@ (8004d68 <HAL_DMA_Init+0x638>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d013      	beq.n	8004d58 <HAL_DMA_Init+0x628>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a0d      	ldr	r2, [pc, #52]	@ (8004d6c <HAL_DMA_Init+0x63c>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d00e      	beq.n	8004d58 <HAL_DMA_Init+0x628>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a0c      	ldr	r2, [pc, #48]	@ (8004d70 <HAL_DMA_Init+0x640>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d009      	beq.n	8004d58 <HAL_DMA_Init+0x628>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a0a      	ldr	r2, [pc, #40]	@ (8004d74 <HAL_DMA_Init+0x644>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d004      	beq.n	8004d58 <HAL_DMA_Init+0x628>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a09      	ldr	r2, [pc, #36]	@ (8004d78 <HAL_DMA_Init+0x648>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d137      	bne.n	8004dc8 <HAL_DMA_Init+0x698>
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e036      	b.n	8004dca <HAL_DMA_Init+0x69a>
 8004d5c:	58025408 	.word	0x58025408
 8004d60:	5802541c 	.word	0x5802541c
 8004d64:	58025430 	.word	0x58025430
 8004d68:	58025444 	.word	0x58025444
 8004d6c:	58025458 	.word	0x58025458
 8004d70:	5802546c 	.word	0x5802546c
 8004d74:	58025480 	.word	0x58025480
 8004d78:	58025494 	.word	0x58025494
 8004d7c:	fffe000f 	.word	0xfffe000f
 8004d80:	a7fdabf8 	.word	0xa7fdabf8
 8004d84:	cccccccd 	.word	0xcccccccd
 8004d88:	40020010 	.word	0x40020010
 8004d8c:	40020028 	.word	0x40020028
 8004d90:	40020040 	.word	0x40020040
 8004d94:	40020058 	.word	0x40020058
 8004d98:	40020070 	.word	0x40020070
 8004d9c:	40020088 	.word	0x40020088
 8004da0:	400200a0 	.word	0x400200a0
 8004da4:	400200b8 	.word	0x400200b8
 8004da8:	40020410 	.word	0x40020410
 8004dac:	40020428 	.word	0x40020428
 8004db0:	40020440 	.word	0x40020440
 8004db4:	40020458 	.word	0x40020458
 8004db8:	40020470 	.word	0x40020470
 8004dbc:	40020488 	.word	0x40020488
 8004dc0:	400204a0 	.word	0x400204a0
 8004dc4:	400204b8 	.word	0x400204b8
 8004dc8:	2300      	movs	r3, #0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d032      	beq.n	8004e34 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f002 fa7e 	bl	80072d0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	2b80      	cmp	r3, #128	@ 0x80
 8004dda:	d102      	bne.n	8004de2 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685a      	ldr	r2, [r3, #4]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dea:	b2d2      	uxtb	r2, r2
 8004dec:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004df6:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d010      	beq.n	8004e22 <HAL_DMA_Init+0x6f2>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d80c      	bhi.n	8004e22 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f002 fafb 	bl	8007404 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e12:	2200      	movs	r2, #0
 8004e14:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004e1e:	605a      	str	r2, [r3, #4]
 8004e20:	e008      	b.n	8004e34 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2200      	movs	r2, #0
 8004e38:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3718      	adds	r7, #24
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
 8004e58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e226      	b.n	80052b6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d101      	bne.n	8004e76 <HAL_DMA_Start_IT+0x2a>
 8004e72:	2302      	movs	r3, #2
 8004e74:	e21f      	b.n	80052b6 <HAL_DMA_Start_IT+0x46a>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	f040 820a 	bne.w	80052a0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a68      	ldr	r2, [pc, #416]	@ (8005040 <HAL_DMA_Start_IT+0x1f4>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d04a      	beq.n	8004f3a <HAL_DMA_Start_IT+0xee>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a66      	ldr	r2, [pc, #408]	@ (8005044 <HAL_DMA_Start_IT+0x1f8>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d045      	beq.n	8004f3a <HAL_DMA_Start_IT+0xee>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a65      	ldr	r2, [pc, #404]	@ (8005048 <HAL_DMA_Start_IT+0x1fc>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d040      	beq.n	8004f3a <HAL_DMA_Start_IT+0xee>
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a63      	ldr	r2, [pc, #396]	@ (800504c <HAL_DMA_Start_IT+0x200>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d03b      	beq.n	8004f3a <HAL_DMA_Start_IT+0xee>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a62      	ldr	r2, [pc, #392]	@ (8005050 <HAL_DMA_Start_IT+0x204>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d036      	beq.n	8004f3a <HAL_DMA_Start_IT+0xee>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a60      	ldr	r2, [pc, #384]	@ (8005054 <HAL_DMA_Start_IT+0x208>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d031      	beq.n	8004f3a <HAL_DMA_Start_IT+0xee>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a5f      	ldr	r2, [pc, #380]	@ (8005058 <HAL_DMA_Start_IT+0x20c>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d02c      	beq.n	8004f3a <HAL_DMA_Start_IT+0xee>
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a5d      	ldr	r2, [pc, #372]	@ (800505c <HAL_DMA_Start_IT+0x210>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d027      	beq.n	8004f3a <HAL_DMA_Start_IT+0xee>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a5c      	ldr	r2, [pc, #368]	@ (8005060 <HAL_DMA_Start_IT+0x214>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d022      	beq.n	8004f3a <HAL_DMA_Start_IT+0xee>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a5a      	ldr	r2, [pc, #360]	@ (8005064 <HAL_DMA_Start_IT+0x218>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d01d      	beq.n	8004f3a <HAL_DMA_Start_IT+0xee>
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a59      	ldr	r2, [pc, #356]	@ (8005068 <HAL_DMA_Start_IT+0x21c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d018      	beq.n	8004f3a <HAL_DMA_Start_IT+0xee>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a57      	ldr	r2, [pc, #348]	@ (800506c <HAL_DMA_Start_IT+0x220>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d013      	beq.n	8004f3a <HAL_DMA_Start_IT+0xee>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a56      	ldr	r2, [pc, #344]	@ (8005070 <HAL_DMA_Start_IT+0x224>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d00e      	beq.n	8004f3a <HAL_DMA_Start_IT+0xee>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a54      	ldr	r2, [pc, #336]	@ (8005074 <HAL_DMA_Start_IT+0x228>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d009      	beq.n	8004f3a <HAL_DMA_Start_IT+0xee>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a53      	ldr	r2, [pc, #332]	@ (8005078 <HAL_DMA_Start_IT+0x22c>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d004      	beq.n	8004f3a <HAL_DMA_Start_IT+0xee>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a51      	ldr	r2, [pc, #324]	@ (800507c <HAL_DMA_Start_IT+0x230>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d108      	bne.n	8004f4c <HAL_DMA_Start_IT+0x100>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f022 0201 	bic.w	r2, r2, #1
 8004f48:	601a      	str	r2, [r3, #0]
 8004f4a:	e007      	b.n	8004f5c <HAL_DMA_Start_IT+0x110>
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 0201 	bic.w	r2, r2, #1
 8004f5a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	68b9      	ldr	r1, [r7, #8]
 8004f62:	68f8      	ldr	r0, [r7, #12]
 8004f64:	f001 fea2 	bl	8006cac <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a34      	ldr	r2, [pc, #208]	@ (8005040 <HAL_DMA_Start_IT+0x1f4>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d04a      	beq.n	8005008 <HAL_DMA_Start_IT+0x1bc>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a33      	ldr	r2, [pc, #204]	@ (8005044 <HAL_DMA_Start_IT+0x1f8>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d045      	beq.n	8005008 <HAL_DMA_Start_IT+0x1bc>
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a31      	ldr	r2, [pc, #196]	@ (8005048 <HAL_DMA_Start_IT+0x1fc>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d040      	beq.n	8005008 <HAL_DMA_Start_IT+0x1bc>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a30      	ldr	r2, [pc, #192]	@ (800504c <HAL_DMA_Start_IT+0x200>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d03b      	beq.n	8005008 <HAL_DMA_Start_IT+0x1bc>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a2e      	ldr	r2, [pc, #184]	@ (8005050 <HAL_DMA_Start_IT+0x204>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d036      	beq.n	8005008 <HAL_DMA_Start_IT+0x1bc>
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a2d      	ldr	r2, [pc, #180]	@ (8005054 <HAL_DMA_Start_IT+0x208>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d031      	beq.n	8005008 <HAL_DMA_Start_IT+0x1bc>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a2b      	ldr	r2, [pc, #172]	@ (8005058 <HAL_DMA_Start_IT+0x20c>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d02c      	beq.n	8005008 <HAL_DMA_Start_IT+0x1bc>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a2a      	ldr	r2, [pc, #168]	@ (800505c <HAL_DMA_Start_IT+0x210>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d027      	beq.n	8005008 <HAL_DMA_Start_IT+0x1bc>
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a28      	ldr	r2, [pc, #160]	@ (8005060 <HAL_DMA_Start_IT+0x214>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d022      	beq.n	8005008 <HAL_DMA_Start_IT+0x1bc>
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a27      	ldr	r2, [pc, #156]	@ (8005064 <HAL_DMA_Start_IT+0x218>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d01d      	beq.n	8005008 <HAL_DMA_Start_IT+0x1bc>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a25      	ldr	r2, [pc, #148]	@ (8005068 <HAL_DMA_Start_IT+0x21c>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d018      	beq.n	8005008 <HAL_DMA_Start_IT+0x1bc>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a24      	ldr	r2, [pc, #144]	@ (800506c <HAL_DMA_Start_IT+0x220>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d013      	beq.n	8005008 <HAL_DMA_Start_IT+0x1bc>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a22      	ldr	r2, [pc, #136]	@ (8005070 <HAL_DMA_Start_IT+0x224>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d00e      	beq.n	8005008 <HAL_DMA_Start_IT+0x1bc>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a21      	ldr	r2, [pc, #132]	@ (8005074 <HAL_DMA_Start_IT+0x228>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d009      	beq.n	8005008 <HAL_DMA_Start_IT+0x1bc>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a1f      	ldr	r2, [pc, #124]	@ (8005078 <HAL_DMA_Start_IT+0x22c>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d004      	beq.n	8005008 <HAL_DMA_Start_IT+0x1bc>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a1e      	ldr	r2, [pc, #120]	@ (800507c <HAL_DMA_Start_IT+0x230>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d101      	bne.n	800500c <HAL_DMA_Start_IT+0x1c0>
 8005008:	2301      	movs	r3, #1
 800500a:	e000      	b.n	800500e <HAL_DMA_Start_IT+0x1c2>
 800500c:	2300      	movs	r3, #0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d036      	beq.n	8005080 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f023 021e 	bic.w	r2, r3, #30
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f042 0216 	orr.w	r2, r2, #22
 8005024:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502a:	2b00      	cmp	r3, #0
 800502c:	d03e      	beq.n	80050ac <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f042 0208 	orr.w	r2, r2, #8
 800503c:	601a      	str	r2, [r3, #0]
 800503e:	e035      	b.n	80050ac <HAL_DMA_Start_IT+0x260>
 8005040:	40020010 	.word	0x40020010
 8005044:	40020028 	.word	0x40020028
 8005048:	40020040 	.word	0x40020040
 800504c:	40020058 	.word	0x40020058
 8005050:	40020070 	.word	0x40020070
 8005054:	40020088 	.word	0x40020088
 8005058:	400200a0 	.word	0x400200a0
 800505c:	400200b8 	.word	0x400200b8
 8005060:	40020410 	.word	0x40020410
 8005064:	40020428 	.word	0x40020428
 8005068:	40020440 	.word	0x40020440
 800506c:	40020458 	.word	0x40020458
 8005070:	40020470 	.word	0x40020470
 8005074:	40020488 	.word	0x40020488
 8005078:	400204a0 	.word	0x400204a0
 800507c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f023 020e 	bic.w	r2, r3, #14
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f042 020a 	orr.w	r2, r2, #10
 8005092:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005098:	2b00      	cmp	r3, #0
 800509a:	d007      	beq.n	80050ac <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f042 0204 	orr.w	r2, r2, #4
 80050aa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a83      	ldr	r2, [pc, #524]	@ (80052c0 <HAL_DMA_Start_IT+0x474>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d072      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a82      	ldr	r2, [pc, #520]	@ (80052c4 <HAL_DMA_Start_IT+0x478>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d06d      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a80      	ldr	r2, [pc, #512]	@ (80052c8 <HAL_DMA_Start_IT+0x47c>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d068      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a7f      	ldr	r2, [pc, #508]	@ (80052cc <HAL_DMA_Start_IT+0x480>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d063      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a7d      	ldr	r2, [pc, #500]	@ (80052d0 <HAL_DMA_Start_IT+0x484>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d05e      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a7c      	ldr	r2, [pc, #496]	@ (80052d4 <HAL_DMA_Start_IT+0x488>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d059      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a7a      	ldr	r2, [pc, #488]	@ (80052d8 <HAL_DMA_Start_IT+0x48c>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d054      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a79      	ldr	r2, [pc, #484]	@ (80052dc <HAL_DMA_Start_IT+0x490>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d04f      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a77      	ldr	r2, [pc, #476]	@ (80052e0 <HAL_DMA_Start_IT+0x494>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d04a      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a76      	ldr	r2, [pc, #472]	@ (80052e4 <HAL_DMA_Start_IT+0x498>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d045      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a74      	ldr	r2, [pc, #464]	@ (80052e8 <HAL_DMA_Start_IT+0x49c>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d040      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a73      	ldr	r2, [pc, #460]	@ (80052ec <HAL_DMA_Start_IT+0x4a0>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d03b      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a71      	ldr	r2, [pc, #452]	@ (80052f0 <HAL_DMA_Start_IT+0x4a4>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d036      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a70      	ldr	r2, [pc, #448]	@ (80052f4 <HAL_DMA_Start_IT+0x4a8>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d031      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a6e      	ldr	r2, [pc, #440]	@ (80052f8 <HAL_DMA_Start_IT+0x4ac>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d02c      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a6d      	ldr	r2, [pc, #436]	@ (80052fc <HAL_DMA_Start_IT+0x4b0>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d027      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a6b      	ldr	r2, [pc, #428]	@ (8005300 <HAL_DMA_Start_IT+0x4b4>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d022      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a6a      	ldr	r2, [pc, #424]	@ (8005304 <HAL_DMA_Start_IT+0x4b8>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d01d      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a68      	ldr	r2, [pc, #416]	@ (8005308 <HAL_DMA_Start_IT+0x4bc>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d018      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a67      	ldr	r2, [pc, #412]	@ (800530c <HAL_DMA_Start_IT+0x4c0>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d013      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a65      	ldr	r2, [pc, #404]	@ (8005310 <HAL_DMA_Start_IT+0x4c4>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d00e      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a64      	ldr	r2, [pc, #400]	@ (8005314 <HAL_DMA_Start_IT+0x4c8>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d009      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a62      	ldr	r2, [pc, #392]	@ (8005318 <HAL_DMA_Start_IT+0x4cc>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d004      	beq.n	800519c <HAL_DMA_Start_IT+0x350>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a61      	ldr	r2, [pc, #388]	@ (800531c <HAL_DMA_Start_IT+0x4d0>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d101      	bne.n	80051a0 <HAL_DMA_Start_IT+0x354>
 800519c:	2301      	movs	r3, #1
 800519e:	e000      	b.n	80051a2 <HAL_DMA_Start_IT+0x356>
 80051a0:	2300      	movs	r3, #0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d01a      	beq.n	80051dc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d007      	beq.n	80051c4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051c2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d007      	beq.n	80051dc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051da:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a37      	ldr	r2, [pc, #220]	@ (80052c0 <HAL_DMA_Start_IT+0x474>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d04a      	beq.n	800527c <HAL_DMA_Start_IT+0x430>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a36      	ldr	r2, [pc, #216]	@ (80052c4 <HAL_DMA_Start_IT+0x478>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d045      	beq.n	800527c <HAL_DMA_Start_IT+0x430>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a34      	ldr	r2, [pc, #208]	@ (80052c8 <HAL_DMA_Start_IT+0x47c>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d040      	beq.n	800527c <HAL_DMA_Start_IT+0x430>
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a33      	ldr	r2, [pc, #204]	@ (80052cc <HAL_DMA_Start_IT+0x480>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d03b      	beq.n	800527c <HAL_DMA_Start_IT+0x430>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a31      	ldr	r2, [pc, #196]	@ (80052d0 <HAL_DMA_Start_IT+0x484>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d036      	beq.n	800527c <HAL_DMA_Start_IT+0x430>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a30      	ldr	r2, [pc, #192]	@ (80052d4 <HAL_DMA_Start_IT+0x488>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d031      	beq.n	800527c <HAL_DMA_Start_IT+0x430>
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a2e      	ldr	r2, [pc, #184]	@ (80052d8 <HAL_DMA_Start_IT+0x48c>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d02c      	beq.n	800527c <HAL_DMA_Start_IT+0x430>
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a2d      	ldr	r2, [pc, #180]	@ (80052dc <HAL_DMA_Start_IT+0x490>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d027      	beq.n	800527c <HAL_DMA_Start_IT+0x430>
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a2b      	ldr	r2, [pc, #172]	@ (80052e0 <HAL_DMA_Start_IT+0x494>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d022      	beq.n	800527c <HAL_DMA_Start_IT+0x430>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a2a      	ldr	r2, [pc, #168]	@ (80052e4 <HAL_DMA_Start_IT+0x498>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d01d      	beq.n	800527c <HAL_DMA_Start_IT+0x430>
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a28      	ldr	r2, [pc, #160]	@ (80052e8 <HAL_DMA_Start_IT+0x49c>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d018      	beq.n	800527c <HAL_DMA_Start_IT+0x430>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a27      	ldr	r2, [pc, #156]	@ (80052ec <HAL_DMA_Start_IT+0x4a0>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d013      	beq.n	800527c <HAL_DMA_Start_IT+0x430>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a25      	ldr	r2, [pc, #148]	@ (80052f0 <HAL_DMA_Start_IT+0x4a4>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d00e      	beq.n	800527c <HAL_DMA_Start_IT+0x430>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a24      	ldr	r2, [pc, #144]	@ (80052f4 <HAL_DMA_Start_IT+0x4a8>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d009      	beq.n	800527c <HAL_DMA_Start_IT+0x430>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a22      	ldr	r2, [pc, #136]	@ (80052f8 <HAL_DMA_Start_IT+0x4ac>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d004      	beq.n	800527c <HAL_DMA_Start_IT+0x430>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a21      	ldr	r2, [pc, #132]	@ (80052fc <HAL_DMA_Start_IT+0x4b0>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d108      	bne.n	800528e <HAL_DMA_Start_IT+0x442>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f042 0201 	orr.w	r2, r2, #1
 800528a:	601a      	str	r2, [r3, #0]
 800528c:	e012      	b.n	80052b4 <HAL_DMA_Start_IT+0x468>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f042 0201 	orr.w	r2, r2, #1
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	e009      	b.n	80052b4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80052a6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80052b0:	2301      	movs	r3, #1
 80052b2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80052b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3718      	adds	r7, #24
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	40020010 	.word	0x40020010
 80052c4:	40020028 	.word	0x40020028
 80052c8:	40020040 	.word	0x40020040
 80052cc:	40020058 	.word	0x40020058
 80052d0:	40020070 	.word	0x40020070
 80052d4:	40020088 	.word	0x40020088
 80052d8:	400200a0 	.word	0x400200a0
 80052dc:	400200b8 	.word	0x400200b8
 80052e0:	40020410 	.word	0x40020410
 80052e4:	40020428 	.word	0x40020428
 80052e8:	40020440 	.word	0x40020440
 80052ec:	40020458 	.word	0x40020458
 80052f0:	40020470 	.word	0x40020470
 80052f4:	40020488 	.word	0x40020488
 80052f8:	400204a0 	.word	0x400204a0
 80052fc:	400204b8 	.word	0x400204b8
 8005300:	58025408 	.word	0x58025408
 8005304:	5802541c 	.word	0x5802541c
 8005308:	58025430 	.word	0x58025430
 800530c:	58025444 	.word	0x58025444
 8005310:	58025458 	.word	0x58025458
 8005314:	5802546c 	.word	0x5802546c
 8005318:	58025480 	.word	0x58025480
 800531c:	58025494 	.word	0x58025494

08005320 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8005328:	f7fd fe2e 	bl	8002f88 <HAL_GetTick>
 800532c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e2dc      	b.n	80058f2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b02      	cmp	r3, #2
 8005342:	d008      	beq.n	8005356 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2280      	movs	r2, #128	@ 0x80
 8005348:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e2cd      	b.n	80058f2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a76      	ldr	r2, [pc, #472]	@ (8005534 <HAL_DMA_Abort+0x214>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d04a      	beq.n	80053f6 <HAL_DMA_Abort+0xd6>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a74      	ldr	r2, [pc, #464]	@ (8005538 <HAL_DMA_Abort+0x218>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d045      	beq.n	80053f6 <HAL_DMA_Abort+0xd6>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a73      	ldr	r2, [pc, #460]	@ (800553c <HAL_DMA_Abort+0x21c>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d040      	beq.n	80053f6 <HAL_DMA_Abort+0xd6>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a71      	ldr	r2, [pc, #452]	@ (8005540 <HAL_DMA_Abort+0x220>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d03b      	beq.n	80053f6 <HAL_DMA_Abort+0xd6>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a70      	ldr	r2, [pc, #448]	@ (8005544 <HAL_DMA_Abort+0x224>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d036      	beq.n	80053f6 <HAL_DMA_Abort+0xd6>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a6e      	ldr	r2, [pc, #440]	@ (8005548 <HAL_DMA_Abort+0x228>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d031      	beq.n	80053f6 <HAL_DMA_Abort+0xd6>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a6d      	ldr	r2, [pc, #436]	@ (800554c <HAL_DMA_Abort+0x22c>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d02c      	beq.n	80053f6 <HAL_DMA_Abort+0xd6>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a6b      	ldr	r2, [pc, #428]	@ (8005550 <HAL_DMA_Abort+0x230>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d027      	beq.n	80053f6 <HAL_DMA_Abort+0xd6>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a6a      	ldr	r2, [pc, #424]	@ (8005554 <HAL_DMA_Abort+0x234>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d022      	beq.n	80053f6 <HAL_DMA_Abort+0xd6>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a68      	ldr	r2, [pc, #416]	@ (8005558 <HAL_DMA_Abort+0x238>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d01d      	beq.n	80053f6 <HAL_DMA_Abort+0xd6>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a67      	ldr	r2, [pc, #412]	@ (800555c <HAL_DMA_Abort+0x23c>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d018      	beq.n	80053f6 <HAL_DMA_Abort+0xd6>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a65      	ldr	r2, [pc, #404]	@ (8005560 <HAL_DMA_Abort+0x240>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d013      	beq.n	80053f6 <HAL_DMA_Abort+0xd6>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a64      	ldr	r2, [pc, #400]	@ (8005564 <HAL_DMA_Abort+0x244>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d00e      	beq.n	80053f6 <HAL_DMA_Abort+0xd6>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a62      	ldr	r2, [pc, #392]	@ (8005568 <HAL_DMA_Abort+0x248>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d009      	beq.n	80053f6 <HAL_DMA_Abort+0xd6>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a61      	ldr	r2, [pc, #388]	@ (800556c <HAL_DMA_Abort+0x24c>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d004      	beq.n	80053f6 <HAL_DMA_Abort+0xd6>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a5f      	ldr	r2, [pc, #380]	@ (8005570 <HAL_DMA_Abort+0x250>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d101      	bne.n	80053fa <HAL_DMA_Abort+0xda>
 80053f6:	2301      	movs	r3, #1
 80053f8:	e000      	b.n	80053fc <HAL_DMA_Abort+0xdc>
 80053fa:	2300      	movs	r3, #0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d013      	beq.n	8005428 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f022 021e 	bic.w	r2, r2, #30
 800540e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	695a      	ldr	r2, [r3, #20]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800541e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	617b      	str	r3, [r7, #20]
 8005426:	e00a      	b.n	800543e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f022 020e 	bic.w	r2, r2, #14
 8005436:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a3c      	ldr	r2, [pc, #240]	@ (8005534 <HAL_DMA_Abort+0x214>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d072      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a3a      	ldr	r2, [pc, #232]	@ (8005538 <HAL_DMA_Abort+0x218>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d06d      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4a39      	ldr	r2, [pc, #228]	@ (800553c <HAL_DMA_Abort+0x21c>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d068      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a37      	ldr	r2, [pc, #220]	@ (8005540 <HAL_DMA_Abort+0x220>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d063      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a36      	ldr	r2, [pc, #216]	@ (8005544 <HAL_DMA_Abort+0x224>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d05e      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a34      	ldr	r2, [pc, #208]	@ (8005548 <HAL_DMA_Abort+0x228>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d059      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a33      	ldr	r2, [pc, #204]	@ (800554c <HAL_DMA_Abort+0x22c>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d054      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a31      	ldr	r2, [pc, #196]	@ (8005550 <HAL_DMA_Abort+0x230>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d04f      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a30      	ldr	r2, [pc, #192]	@ (8005554 <HAL_DMA_Abort+0x234>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d04a      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a2e      	ldr	r2, [pc, #184]	@ (8005558 <HAL_DMA_Abort+0x238>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d045      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a2d      	ldr	r2, [pc, #180]	@ (800555c <HAL_DMA_Abort+0x23c>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d040      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a2b      	ldr	r2, [pc, #172]	@ (8005560 <HAL_DMA_Abort+0x240>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d03b      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a2a      	ldr	r2, [pc, #168]	@ (8005564 <HAL_DMA_Abort+0x244>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d036      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a28      	ldr	r2, [pc, #160]	@ (8005568 <HAL_DMA_Abort+0x248>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d031      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a27      	ldr	r2, [pc, #156]	@ (800556c <HAL_DMA_Abort+0x24c>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d02c      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a25      	ldr	r2, [pc, #148]	@ (8005570 <HAL_DMA_Abort+0x250>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d027      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a24      	ldr	r2, [pc, #144]	@ (8005574 <HAL_DMA_Abort+0x254>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d022      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a22      	ldr	r2, [pc, #136]	@ (8005578 <HAL_DMA_Abort+0x258>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d01d      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a21      	ldr	r2, [pc, #132]	@ (800557c <HAL_DMA_Abort+0x25c>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d018      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a1f      	ldr	r2, [pc, #124]	@ (8005580 <HAL_DMA_Abort+0x260>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d013      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a1e      	ldr	r2, [pc, #120]	@ (8005584 <HAL_DMA_Abort+0x264>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d00e      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a1c      	ldr	r2, [pc, #112]	@ (8005588 <HAL_DMA_Abort+0x268>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d009      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a1b      	ldr	r2, [pc, #108]	@ (800558c <HAL_DMA_Abort+0x26c>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d004      	beq.n	800552e <HAL_DMA_Abort+0x20e>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a19      	ldr	r2, [pc, #100]	@ (8005590 <HAL_DMA_Abort+0x270>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d132      	bne.n	8005594 <HAL_DMA_Abort+0x274>
 800552e:	2301      	movs	r3, #1
 8005530:	e031      	b.n	8005596 <HAL_DMA_Abort+0x276>
 8005532:	bf00      	nop
 8005534:	40020010 	.word	0x40020010
 8005538:	40020028 	.word	0x40020028
 800553c:	40020040 	.word	0x40020040
 8005540:	40020058 	.word	0x40020058
 8005544:	40020070 	.word	0x40020070
 8005548:	40020088 	.word	0x40020088
 800554c:	400200a0 	.word	0x400200a0
 8005550:	400200b8 	.word	0x400200b8
 8005554:	40020410 	.word	0x40020410
 8005558:	40020428 	.word	0x40020428
 800555c:	40020440 	.word	0x40020440
 8005560:	40020458 	.word	0x40020458
 8005564:	40020470 	.word	0x40020470
 8005568:	40020488 	.word	0x40020488
 800556c:	400204a0 	.word	0x400204a0
 8005570:	400204b8 	.word	0x400204b8
 8005574:	58025408 	.word	0x58025408
 8005578:	5802541c 	.word	0x5802541c
 800557c:	58025430 	.word	0x58025430
 8005580:	58025444 	.word	0x58025444
 8005584:	58025458 	.word	0x58025458
 8005588:	5802546c 	.word	0x5802546c
 800558c:	58025480 	.word	0x58025480
 8005590:	58025494 	.word	0x58025494
 8005594:	2300      	movs	r3, #0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d007      	beq.n	80055aa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80055a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a6d      	ldr	r2, [pc, #436]	@ (8005764 <HAL_DMA_Abort+0x444>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d04a      	beq.n	800564a <HAL_DMA_Abort+0x32a>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a6b      	ldr	r2, [pc, #428]	@ (8005768 <HAL_DMA_Abort+0x448>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d045      	beq.n	800564a <HAL_DMA_Abort+0x32a>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a6a      	ldr	r2, [pc, #424]	@ (800576c <HAL_DMA_Abort+0x44c>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d040      	beq.n	800564a <HAL_DMA_Abort+0x32a>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a68      	ldr	r2, [pc, #416]	@ (8005770 <HAL_DMA_Abort+0x450>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d03b      	beq.n	800564a <HAL_DMA_Abort+0x32a>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a67      	ldr	r2, [pc, #412]	@ (8005774 <HAL_DMA_Abort+0x454>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d036      	beq.n	800564a <HAL_DMA_Abort+0x32a>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a65      	ldr	r2, [pc, #404]	@ (8005778 <HAL_DMA_Abort+0x458>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d031      	beq.n	800564a <HAL_DMA_Abort+0x32a>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a64      	ldr	r2, [pc, #400]	@ (800577c <HAL_DMA_Abort+0x45c>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d02c      	beq.n	800564a <HAL_DMA_Abort+0x32a>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a62      	ldr	r2, [pc, #392]	@ (8005780 <HAL_DMA_Abort+0x460>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d027      	beq.n	800564a <HAL_DMA_Abort+0x32a>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a61      	ldr	r2, [pc, #388]	@ (8005784 <HAL_DMA_Abort+0x464>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d022      	beq.n	800564a <HAL_DMA_Abort+0x32a>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a5f      	ldr	r2, [pc, #380]	@ (8005788 <HAL_DMA_Abort+0x468>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d01d      	beq.n	800564a <HAL_DMA_Abort+0x32a>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a5e      	ldr	r2, [pc, #376]	@ (800578c <HAL_DMA_Abort+0x46c>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d018      	beq.n	800564a <HAL_DMA_Abort+0x32a>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a5c      	ldr	r2, [pc, #368]	@ (8005790 <HAL_DMA_Abort+0x470>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d013      	beq.n	800564a <HAL_DMA_Abort+0x32a>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a5b      	ldr	r2, [pc, #364]	@ (8005794 <HAL_DMA_Abort+0x474>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d00e      	beq.n	800564a <HAL_DMA_Abort+0x32a>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a59      	ldr	r2, [pc, #356]	@ (8005798 <HAL_DMA_Abort+0x478>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d009      	beq.n	800564a <HAL_DMA_Abort+0x32a>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a58      	ldr	r2, [pc, #352]	@ (800579c <HAL_DMA_Abort+0x47c>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d004      	beq.n	800564a <HAL_DMA_Abort+0x32a>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a56      	ldr	r2, [pc, #344]	@ (80057a0 <HAL_DMA_Abort+0x480>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d108      	bne.n	800565c <HAL_DMA_Abort+0x33c>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f022 0201 	bic.w	r2, r2, #1
 8005658:	601a      	str	r2, [r3, #0]
 800565a:	e007      	b.n	800566c <HAL_DMA_Abort+0x34c>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f022 0201 	bic.w	r2, r2, #1
 800566a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800566c:	e013      	b.n	8005696 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800566e:	f7fd fc8b 	bl	8002f88 <HAL_GetTick>
 8005672:	4602      	mov	r2, r0
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	1ad3      	subs	r3, r2, r3
 8005678:	2b05      	cmp	r3, #5
 800567a:	d90c      	bls.n	8005696 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2220      	movs	r2, #32
 8005680:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2203      	movs	r2, #3
 8005686:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2200      	movs	r2, #0
 800568e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e12d      	b.n	80058f2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1e5      	bne.n	800566e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a2f      	ldr	r2, [pc, #188]	@ (8005764 <HAL_DMA_Abort+0x444>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d04a      	beq.n	8005742 <HAL_DMA_Abort+0x422>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a2d      	ldr	r2, [pc, #180]	@ (8005768 <HAL_DMA_Abort+0x448>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d045      	beq.n	8005742 <HAL_DMA_Abort+0x422>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a2c      	ldr	r2, [pc, #176]	@ (800576c <HAL_DMA_Abort+0x44c>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d040      	beq.n	8005742 <HAL_DMA_Abort+0x422>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a2a      	ldr	r2, [pc, #168]	@ (8005770 <HAL_DMA_Abort+0x450>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d03b      	beq.n	8005742 <HAL_DMA_Abort+0x422>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a29      	ldr	r2, [pc, #164]	@ (8005774 <HAL_DMA_Abort+0x454>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d036      	beq.n	8005742 <HAL_DMA_Abort+0x422>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a27      	ldr	r2, [pc, #156]	@ (8005778 <HAL_DMA_Abort+0x458>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d031      	beq.n	8005742 <HAL_DMA_Abort+0x422>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a26      	ldr	r2, [pc, #152]	@ (800577c <HAL_DMA_Abort+0x45c>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d02c      	beq.n	8005742 <HAL_DMA_Abort+0x422>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a24      	ldr	r2, [pc, #144]	@ (8005780 <HAL_DMA_Abort+0x460>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d027      	beq.n	8005742 <HAL_DMA_Abort+0x422>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a23      	ldr	r2, [pc, #140]	@ (8005784 <HAL_DMA_Abort+0x464>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d022      	beq.n	8005742 <HAL_DMA_Abort+0x422>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a21      	ldr	r2, [pc, #132]	@ (8005788 <HAL_DMA_Abort+0x468>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d01d      	beq.n	8005742 <HAL_DMA_Abort+0x422>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a20      	ldr	r2, [pc, #128]	@ (800578c <HAL_DMA_Abort+0x46c>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d018      	beq.n	8005742 <HAL_DMA_Abort+0x422>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a1e      	ldr	r2, [pc, #120]	@ (8005790 <HAL_DMA_Abort+0x470>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d013      	beq.n	8005742 <HAL_DMA_Abort+0x422>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a1d      	ldr	r2, [pc, #116]	@ (8005794 <HAL_DMA_Abort+0x474>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d00e      	beq.n	8005742 <HAL_DMA_Abort+0x422>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a1b      	ldr	r2, [pc, #108]	@ (8005798 <HAL_DMA_Abort+0x478>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d009      	beq.n	8005742 <HAL_DMA_Abort+0x422>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a1a      	ldr	r2, [pc, #104]	@ (800579c <HAL_DMA_Abort+0x47c>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d004      	beq.n	8005742 <HAL_DMA_Abort+0x422>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a18      	ldr	r2, [pc, #96]	@ (80057a0 <HAL_DMA_Abort+0x480>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d101      	bne.n	8005746 <HAL_DMA_Abort+0x426>
 8005742:	2301      	movs	r3, #1
 8005744:	e000      	b.n	8005748 <HAL_DMA_Abort+0x428>
 8005746:	2300      	movs	r3, #0
 8005748:	2b00      	cmp	r3, #0
 800574a:	d02b      	beq.n	80057a4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005750:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005756:	f003 031f 	and.w	r3, r3, #31
 800575a:	223f      	movs	r2, #63	@ 0x3f
 800575c:	409a      	lsls	r2, r3
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	609a      	str	r2, [r3, #8]
 8005762:	e02a      	b.n	80057ba <HAL_DMA_Abort+0x49a>
 8005764:	40020010 	.word	0x40020010
 8005768:	40020028 	.word	0x40020028
 800576c:	40020040 	.word	0x40020040
 8005770:	40020058 	.word	0x40020058
 8005774:	40020070 	.word	0x40020070
 8005778:	40020088 	.word	0x40020088
 800577c:	400200a0 	.word	0x400200a0
 8005780:	400200b8 	.word	0x400200b8
 8005784:	40020410 	.word	0x40020410
 8005788:	40020428 	.word	0x40020428
 800578c:	40020440 	.word	0x40020440
 8005790:	40020458 	.word	0x40020458
 8005794:	40020470 	.word	0x40020470
 8005798:	40020488 	.word	0x40020488
 800579c:	400204a0 	.word	0x400204a0
 80057a0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057a8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057ae:	f003 031f 	and.w	r3, r3, #31
 80057b2:	2201      	movs	r2, #1
 80057b4:	409a      	lsls	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a4f      	ldr	r2, [pc, #316]	@ (80058fc <HAL_DMA_Abort+0x5dc>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d072      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a4d      	ldr	r2, [pc, #308]	@ (8005900 <HAL_DMA_Abort+0x5e0>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d06d      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a4c      	ldr	r2, [pc, #304]	@ (8005904 <HAL_DMA_Abort+0x5e4>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d068      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a4a      	ldr	r2, [pc, #296]	@ (8005908 <HAL_DMA_Abort+0x5e8>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d063      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a49      	ldr	r2, [pc, #292]	@ (800590c <HAL_DMA_Abort+0x5ec>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d05e      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a47      	ldr	r2, [pc, #284]	@ (8005910 <HAL_DMA_Abort+0x5f0>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d059      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a46      	ldr	r2, [pc, #280]	@ (8005914 <HAL_DMA_Abort+0x5f4>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d054      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a44      	ldr	r2, [pc, #272]	@ (8005918 <HAL_DMA_Abort+0x5f8>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d04f      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a43      	ldr	r2, [pc, #268]	@ (800591c <HAL_DMA_Abort+0x5fc>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d04a      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a41      	ldr	r2, [pc, #260]	@ (8005920 <HAL_DMA_Abort+0x600>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d045      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a40      	ldr	r2, [pc, #256]	@ (8005924 <HAL_DMA_Abort+0x604>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d040      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a3e      	ldr	r2, [pc, #248]	@ (8005928 <HAL_DMA_Abort+0x608>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d03b      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a3d      	ldr	r2, [pc, #244]	@ (800592c <HAL_DMA_Abort+0x60c>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d036      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a3b      	ldr	r2, [pc, #236]	@ (8005930 <HAL_DMA_Abort+0x610>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d031      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a3a      	ldr	r2, [pc, #232]	@ (8005934 <HAL_DMA_Abort+0x614>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d02c      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a38      	ldr	r2, [pc, #224]	@ (8005938 <HAL_DMA_Abort+0x618>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d027      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a37      	ldr	r2, [pc, #220]	@ (800593c <HAL_DMA_Abort+0x61c>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d022      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a35      	ldr	r2, [pc, #212]	@ (8005940 <HAL_DMA_Abort+0x620>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d01d      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a34      	ldr	r2, [pc, #208]	@ (8005944 <HAL_DMA_Abort+0x624>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d018      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a32      	ldr	r2, [pc, #200]	@ (8005948 <HAL_DMA_Abort+0x628>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d013      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a31      	ldr	r2, [pc, #196]	@ (800594c <HAL_DMA_Abort+0x62c>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d00e      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a2f      	ldr	r2, [pc, #188]	@ (8005950 <HAL_DMA_Abort+0x630>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d009      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a2e      	ldr	r2, [pc, #184]	@ (8005954 <HAL_DMA_Abort+0x634>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d004      	beq.n	80058aa <HAL_DMA_Abort+0x58a>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a2c      	ldr	r2, [pc, #176]	@ (8005958 <HAL_DMA_Abort+0x638>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d101      	bne.n	80058ae <HAL_DMA_Abort+0x58e>
 80058aa:	2301      	movs	r3, #1
 80058ac:	e000      	b.n	80058b0 <HAL_DMA_Abort+0x590>
 80058ae:	2300      	movs	r3, #0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d015      	beq.n	80058e0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80058bc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00c      	beq.n	80058e0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80058d4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058da:	687a      	ldr	r2, [r7, #4]
 80058dc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80058de:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3718      	adds	r7, #24
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	40020010 	.word	0x40020010
 8005900:	40020028 	.word	0x40020028
 8005904:	40020040 	.word	0x40020040
 8005908:	40020058 	.word	0x40020058
 800590c:	40020070 	.word	0x40020070
 8005910:	40020088 	.word	0x40020088
 8005914:	400200a0 	.word	0x400200a0
 8005918:	400200b8 	.word	0x400200b8
 800591c:	40020410 	.word	0x40020410
 8005920:	40020428 	.word	0x40020428
 8005924:	40020440 	.word	0x40020440
 8005928:	40020458 	.word	0x40020458
 800592c:	40020470 	.word	0x40020470
 8005930:	40020488 	.word	0x40020488
 8005934:	400204a0 	.word	0x400204a0
 8005938:	400204b8 	.word	0x400204b8
 800593c:	58025408 	.word	0x58025408
 8005940:	5802541c 	.word	0x5802541c
 8005944:	58025430 	.word	0x58025430
 8005948:	58025444 	.word	0x58025444
 800594c:	58025458 	.word	0x58025458
 8005950:	5802546c 	.word	0x5802546c
 8005954:	58025480 	.word	0x58025480
 8005958:	58025494 	.word	0x58025494

0800595c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e237      	b.n	8005dde <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b02      	cmp	r3, #2
 8005978:	d004      	beq.n	8005984 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2280      	movs	r2, #128	@ 0x80
 800597e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e22c      	b.n	8005dde <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a5c      	ldr	r2, [pc, #368]	@ (8005afc <HAL_DMA_Abort_IT+0x1a0>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d04a      	beq.n	8005a24 <HAL_DMA_Abort_IT+0xc8>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a5b      	ldr	r2, [pc, #364]	@ (8005b00 <HAL_DMA_Abort_IT+0x1a4>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d045      	beq.n	8005a24 <HAL_DMA_Abort_IT+0xc8>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a59      	ldr	r2, [pc, #356]	@ (8005b04 <HAL_DMA_Abort_IT+0x1a8>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d040      	beq.n	8005a24 <HAL_DMA_Abort_IT+0xc8>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a58      	ldr	r2, [pc, #352]	@ (8005b08 <HAL_DMA_Abort_IT+0x1ac>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d03b      	beq.n	8005a24 <HAL_DMA_Abort_IT+0xc8>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a56      	ldr	r2, [pc, #344]	@ (8005b0c <HAL_DMA_Abort_IT+0x1b0>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d036      	beq.n	8005a24 <HAL_DMA_Abort_IT+0xc8>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a55      	ldr	r2, [pc, #340]	@ (8005b10 <HAL_DMA_Abort_IT+0x1b4>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d031      	beq.n	8005a24 <HAL_DMA_Abort_IT+0xc8>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a53      	ldr	r2, [pc, #332]	@ (8005b14 <HAL_DMA_Abort_IT+0x1b8>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d02c      	beq.n	8005a24 <HAL_DMA_Abort_IT+0xc8>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a52      	ldr	r2, [pc, #328]	@ (8005b18 <HAL_DMA_Abort_IT+0x1bc>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d027      	beq.n	8005a24 <HAL_DMA_Abort_IT+0xc8>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a50      	ldr	r2, [pc, #320]	@ (8005b1c <HAL_DMA_Abort_IT+0x1c0>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d022      	beq.n	8005a24 <HAL_DMA_Abort_IT+0xc8>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a4f      	ldr	r2, [pc, #316]	@ (8005b20 <HAL_DMA_Abort_IT+0x1c4>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d01d      	beq.n	8005a24 <HAL_DMA_Abort_IT+0xc8>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a4d      	ldr	r2, [pc, #308]	@ (8005b24 <HAL_DMA_Abort_IT+0x1c8>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d018      	beq.n	8005a24 <HAL_DMA_Abort_IT+0xc8>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a4c      	ldr	r2, [pc, #304]	@ (8005b28 <HAL_DMA_Abort_IT+0x1cc>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d013      	beq.n	8005a24 <HAL_DMA_Abort_IT+0xc8>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a4a      	ldr	r2, [pc, #296]	@ (8005b2c <HAL_DMA_Abort_IT+0x1d0>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d00e      	beq.n	8005a24 <HAL_DMA_Abort_IT+0xc8>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a49      	ldr	r2, [pc, #292]	@ (8005b30 <HAL_DMA_Abort_IT+0x1d4>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d009      	beq.n	8005a24 <HAL_DMA_Abort_IT+0xc8>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a47      	ldr	r2, [pc, #284]	@ (8005b34 <HAL_DMA_Abort_IT+0x1d8>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d004      	beq.n	8005a24 <HAL_DMA_Abort_IT+0xc8>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a46      	ldr	r2, [pc, #280]	@ (8005b38 <HAL_DMA_Abort_IT+0x1dc>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d101      	bne.n	8005a28 <HAL_DMA_Abort_IT+0xcc>
 8005a24:	2301      	movs	r3, #1
 8005a26:	e000      	b.n	8005a2a <HAL_DMA_Abort_IT+0xce>
 8005a28:	2300      	movs	r3, #0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f000 8086 	beq.w	8005b3c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2204      	movs	r2, #4
 8005a34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a2f      	ldr	r2, [pc, #188]	@ (8005afc <HAL_DMA_Abort_IT+0x1a0>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d04a      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0x17c>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a2e      	ldr	r2, [pc, #184]	@ (8005b00 <HAL_DMA_Abort_IT+0x1a4>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d045      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0x17c>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a2c      	ldr	r2, [pc, #176]	@ (8005b04 <HAL_DMA_Abort_IT+0x1a8>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d040      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0x17c>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a2b      	ldr	r2, [pc, #172]	@ (8005b08 <HAL_DMA_Abort_IT+0x1ac>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d03b      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0x17c>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a29      	ldr	r2, [pc, #164]	@ (8005b0c <HAL_DMA_Abort_IT+0x1b0>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d036      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0x17c>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a28      	ldr	r2, [pc, #160]	@ (8005b10 <HAL_DMA_Abort_IT+0x1b4>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d031      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0x17c>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a26      	ldr	r2, [pc, #152]	@ (8005b14 <HAL_DMA_Abort_IT+0x1b8>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d02c      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0x17c>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a25      	ldr	r2, [pc, #148]	@ (8005b18 <HAL_DMA_Abort_IT+0x1bc>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d027      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0x17c>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a23      	ldr	r2, [pc, #140]	@ (8005b1c <HAL_DMA_Abort_IT+0x1c0>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d022      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0x17c>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a22      	ldr	r2, [pc, #136]	@ (8005b20 <HAL_DMA_Abort_IT+0x1c4>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d01d      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0x17c>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a20      	ldr	r2, [pc, #128]	@ (8005b24 <HAL_DMA_Abort_IT+0x1c8>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d018      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0x17c>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a1f      	ldr	r2, [pc, #124]	@ (8005b28 <HAL_DMA_Abort_IT+0x1cc>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d013      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0x17c>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a1d      	ldr	r2, [pc, #116]	@ (8005b2c <HAL_DMA_Abort_IT+0x1d0>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d00e      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0x17c>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a1c      	ldr	r2, [pc, #112]	@ (8005b30 <HAL_DMA_Abort_IT+0x1d4>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d009      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0x17c>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a1a      	ldr	r2, [pc, #104]	@ (8005b34 <HAL_DMA_Abort_IT+0x1d8>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d004      	beq.n	8005ad8 <HAL_DMA_Abort_IT+0x17c>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a19      	ldr	r2, [pc, #100]	@ (8005b38 <HAL_DMA_Abort_IT+0x1dc>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d108      	bne.n	8005aea <HAL_DMA_Abort_IT+0x18e>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f022 0201 	bic.w	r2, r2, #1
 8005ae6:	601a      	str	r2, [r3, #0]
 8005ae8:	e178      	b.n	8005ddc <HAL_DMA_Abort_IT+0x480>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f022 0201 	bic.w	r2, r2, #1
 8005af8:	601a      	str	r2, [r3, #0]
 8005afa:	e16f      	b.n	8005ddc <HAL_DMA_Abort_IT+0x480>
 8005afc:	40020010 	.word	0x40020010
 8005b00:	40020028 	.word	0x40020028
 8005b04:	40020040 	.word	0x40020040
 8005b08:	40020058 	.word	0x40020058
 8005b0c:	40020070 	.word	0x40020070
 8005b10:	40020088 	.word	0x40020088
 8005b14:	400200a0 	.word	0x400200a0
 8005b18:	400200b8 	.word	0x400200b8
 8005b1c:	40020410 	.word	0x40020410
 8005b20:	40020428 	.word	0x40020428
 8005b24:	40020440 	.word	0x40020440
 8005b28:	40020458 	.word	0x40020458
 8005b2c:	40020470 	.word	0x40020470
 8005b30:	40020488 	.word	0x40020488
 8005b34:	400204a0 	.word	0x400204a0
 8005b38:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f022 020e 	bic.w	r2, r2, #14
 8005b4a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a6c      	ldr	r2, [pc, #432]	@ (8005d04 <HAL_DMA_Abort_IT+0x3a8>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d04a      	beq.n	8005bec <HAL_DMA_Abort_IT+0x290>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a6b      	ldr	r2, [pc, #428]	@ (8005d08 <HAL_DMA_Abort_IT+0x3ac>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d045      	beq.n	8005bec <HAL_DMA_Abort_IT+0x290>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a69      	ldr	r2, [pc, #420]	@ (8005d0c <HAL_DMA_Abort_IT+0x3b0>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d040      	beq.n	8005bec <HAL_DMA_Abort_IT+0x290>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a68      	ldr	r2, [pc, #416]	@ (8005d10 <HAL_DMA_Abort_IT+0x3b4>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d03b      	beq.n	8005bec <HAL_DMA_Abort_IT+0x290>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a66      	ldr	r2, [pc, #408]	@ (8005d14 <HAL_DMA_Abort_IT+0x3b8>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d036      	beq.n	8005bec <HAL_DMA_Abort_IT+0x290>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a65      	ldr	r2, [pc, #404]	@ (8005d18 <HAL_DMA_Abort_IT+0x3bc>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d031      	beq.n	8005bec <HAL_DMA_Abort_IT+0x290>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a63      	ldr	r2, [pc, #396]	@ (8005d1c <HAL_DMA_Abort_IT+0x3c0>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d02c      	beq.n	8005bec <HAL_DMA_Abort_IT+0x290>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a62      	ldr	r2, [pc, #392]	@ (8005d20 <HAL_DMA_Abort_IT+0x3c4>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d027      	beq.n	8005bec <HAL_DMA_Abort_IT+0x290>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a60      	ldr	r2, [pc, #384]	@ (8005d24 <HAL_DMA_Abort_IT+0x3c8>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d022      	beq.n	8005bec <HAL_DMA_Abort_IT+0x290>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a5f      	ldr	r2, [pc, #380]	@ (8005d28 <HAL_DMA_Abort_IT+0x3cc>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d01d      	beq.n	8005bec <HAL_DMA_Abort_IT+0x290>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a5d      	ldr	r2, [pc, #372]	@ (8005d2c <HAL_DMA_Abort_IT+0x3d0>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d018      	beq.n	8005bec <HAL_DMA_Abort_IT+0x290>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a5c      	ldr	r2, [pc, #368]	@ (8005d30 <HAL_DMA_Abort_IT+0x3d4>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d013      	beq.n	8005bec <HAL_DMA_Abort_IT+0x290>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a5a      	ldr	r2, [pc, #360]	@ (8005d34 <HAL_DMA_Abort_IT+0x3d8>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d00e      	beq.n	8005bec <HAL_DMA_Abort_IT+0x290>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a59      	ldr	r2, [pc, #356]	@ (8005d38 <HAL_DMA_Abort_IT+0x3dc>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d009      	beq.n	8005bec <HAL_DMA_Abort_IT+0x290>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a57      	ldr	r2, [pc, #348]	@ (8005d3c <HAL_DMA_Abort_IT+0x3e0>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d004      	beq.n	8005bec <HAL_DMA_Abort_IT+0x290>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a56      	ldr	r2, [pc, #344]	@ (8005d40 <HAL_DMA_Abort_IT+0x3e4>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d108      	bne.n	8005bfe <HAL_DMA_Abort_IT+0x2a2>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 0201 	bic.w	r2, r2, #1
 8005bfa:	601a      	str	r2, [r3, #0]
 8005bfc:	e007      	b.n	8005c0e <HAL_DMA_Abort_IT+0x2b2>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 0201 	bic.w	r2, r2, #1
 8005c0c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a3c      	ldr	r2, [pc, #240]	@ (8005d04 <HAL_DMA_Abort_IT+0x3a8>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d072      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a3a      	ldr	r2, [pc, #232]	@ (8005d08 <HAL_DMA_Abort_IT+0x3ac>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d06d      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a39      	ldr	r2, [pc, #228]	@ (8005d0c <HAL_DMA_Abort_IT+0x3b0>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d068      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a37      	ldr	r2, [pc, #220]	@ (8005d10 <HAL_DMA_Abort_IT+0x3b4>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d063      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a36      	ldr	r2, [pc, #216]	@ (8005d14 <HAL_DMA_Abort_IT+0x3b8>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d05e      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a34      	ldr	r2, [pc, #208]	@ (8005d18 <HAL_DMA_Abort_IT+0x3bc>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d059      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a33      	ldr	r2, [pc, #204]	@ (8005d1c <HAL_DMA_Abort_IT+0x3c0>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d054      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a31      	ldr	r2, [pc, #196]	@ (8005d20 <HAL_DMA_Abort_IT+0x3c4>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d04f      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a30      	ldr	r2, [pc, #192]	@ (8005d24 <HAL_DMA_Abort_IT+0x3c8>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d04a      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a2e      	ldr	r2, [pc, #184]	@ (8005d28 <HAL_DMA_Abort_IT+0x3cc>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d045      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a2d      	ldr	r2, [pc, #180]	@ (8005d2c <HAL_DMA_Abort_IT+0x3d0>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d040      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a2b      	ldr	r2, [pc, #172]	@ (8005d30 <HAL_DMA_Abort_IT+0x3d4>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d03b      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a2a      	ldr	r2, [pc, #168]	@ (8005d34 <HAL_DMA_Abort_IT+0x3d8>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d036      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a28      	ldr	r2, [pc, #160]	@ (8005d38 <HAL_DMA_Abort_IT+0x3dc>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d031      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a27      	ldr	r2, [pc, #156]	@ (8005d3c <HAL_DMA_Abort_IT+0x3e0>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d02c      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a25      	ldr	r2, [pc, #148]	@ (8005d40 <HAL_DMA_Abort_IT+0x3e4>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d027      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a24      	ldr	r2, [pc, #144]	@ (8005d44 <HAL_DMA_Abort_IT+0x3e8>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d022      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a22      	ldr	r2, [pc, #136]	@ (8005d48 <HAL_DMA_Abort_IT+0x3ec>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d01d      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a21      	ldr	r2, [pc, #132]	@ (8005d4c <HAL_DMA_Abort_IT+0x3f0>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d018      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a1f      	ldr	r2, [pc, #124]	@ (8005d50 <HAL_DMA_Abort_IT+0x3f4>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d013      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a1e      	ldr	r2, [pc, #120]	@ (8005d54 <HAL_DMA_Abort_IT+0x3f8>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d00e      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a1c      	ldr	r2, [pc, #112]	@ (8005d58 <HAL_DMA_Abort_IT+0x3fc>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d009      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a1b      	ldr	r2, [pc, #108]	@ (8005d5c <HAL_DMA_Abort_IT+0x400>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d004      	beq.n	8005cfe <HAL_DMA_Abort_IT+0x3a2>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a19      	ldr	r2, [pc, #100]	@ (8005d60 <HAL_DMA_Abort_IT+0x404>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d132      	bne.n	8005d64 <HAL_DMA_Abort_IT+0x408>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e031      	b.n	8005d66 <HAL_DMA_Abort_IT+0x40a>
 8005d02:	bf00      	nop
 8005d04:	40020010 	.word	0x40020010
 8005d08:	40020028 	.word	0x40020028
 8005d0c:	40020040 	.word	0x40020040
 8005d10:	40020058 	.word	0x40020058
 8005d14:	40020070 	.word	0x40020070
 8005d18:	40020088 	.word	0x40020088
 8005d1c:	400200a0 	.word	0x400200a0
 8005d20:	400200b8 	.word	0x400200b8
 8005d24:	40020410 	.word	0x40020410
 8005d28:	40020428 	.word	0x40020428
 8005d2c:	40020440 	.word	0x40020440
 8005d30:	40020458 	.word	0x40020458
 8005d34:	40020470 	.word	0x40020470
 8005d38:	40020488 	.word	0x40020488
 8005d3c:	400204a0 	.word	0x400204a0
 8005d40:	400204b8 	.word	0x400204b8
 8005d44:	58025408 	.word	0x58025408
 8005d48:	5802541c 	.word	0x5802541c
 8005d4c:	58025430 	.word	0x58025430
 8005d50:	58025444 	.word	0x58025444
 8005d54:	58025458 	.word	0x58025458
 8005d58:	5802546c 	.word	0x5802546c
 8005d5c:	58025480 	.word	0x58025480
 8005d60:	58025494 	.word	0x58025494
 8005d64:	2300      	movs	r3, #0
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d028      	beq.n	8005dbc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d74:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005d78:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d7e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005d84:	f003 031f 	and.w	r3, r3, #31
 8005d88:	2201      	movs	r2, #1
 8005d8a:	409a      	lsls	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005d98:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00c      	beq.n	8005dbc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005db0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005dba:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d003      	beq.n	8005ddc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop

08005de8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b08a      	sub	sp, #40	@ 0x28
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005df0:	2300      	movs	r3, #0
 8005df2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005df4:	4b67      	ldr	r3, [pc, #412]	@ (8005f94 <HAL_DMA_IRQHandler+0x1ac>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a67      	ldr	r2, [pc, #412]	@ (8005f98 <HAL_DMA_IRQHandler+0x1b0>)
 8005dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8005dfe:	0a9b      	lsrs	r3, r3, #10
 8005e00:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e06:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e0c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005e0e:	6a3b      	ldr	r3, [r7, #32]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a5f      	ldr	r2, [pc, #380]	@ (8005f9c <HAL_DMA_IRQHandler+0x1b4>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d04a      	beq.n	8005eba <HAL_DMA_IRQHandler+0xd2>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a5d      	ldr	r2, [pc, #372]	@ (8005fa0 <HAL_DMA_IRQHandler+0x1b8>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d045      	beq.n	8005eba <HAL_DMA_IRQHandler+0xd2>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a5c      	ldr	r2, [pc, #368]	@ (8005fa4 <HAL_DMA_IRQHandler+0x1bc>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d040      	beq.n	8005eba <HAL_DMA_IRQHandler+0xd2>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a5a      	ldr	r2, [pc, #360]	@ (8005fa8 <HAL_DMA_IRQHandler+0x1c0>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d03b      	beq.n	8005eba <HAL_DMA_IRQHandler+0xd2>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a59      	ldr	r2, [pc, #356]	@ (8005fac <HAL_DMA_IRQHandler+0x1c4>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d036      	beq.n	8005eba <HAL_DMA_IRQHandler+0xd2>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a57      	ldr	r2, [pc, #348]	@ (8005fb0 <HAL_DMA_IRQHandler+0x1c8>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d031      	beq.n	8005eba <HAL_DMA_IRQHandler+0xd2>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a56      	ldr	r2, [pc, #344]	@ (8005fb4 <HAL_DMA_IRQHandler+0x1cc>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d02c      	beq.n	8005eba <HAL_DMA_IRQHandler+0xd2>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a54      	ldr	r2, [pc, #336]	@ (8005fb8 <HAL_DMA_IRQHandler+0x1d0>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d027      	beq.n	8005eba <HAL_DMA_IRQHandler+0xd2>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a53      	ldr	r2, [pc, #332]	@ (8005fbc <HAL_DMA_IRQHandler+0x1d4>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d022      	beq.n	8005eba <HAL_DMA_IRQHandler+0xd2>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a51      	ldr	r2, [pc, #324]	@ (8005fc0 <HAL_DMA_IRQHandler+0x1d8>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d01d      	beq.n	8005eba <HAL_DMA_IRQHandler+0xd2>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a50      	ldr	r2, [pc, #320]	@ (8005fc4 <HAL_DMA_IRQHandler+0x1dc>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d018      	beq.n	8005eba <HAL_DMA_IRQHandler+0xd2>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a4e      	ldr	r2, [pc, #312]	@ (8005fc8 <HAL_DMA_IRQHandler+0x1e0>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d013      	beq.n	8005eba <HAL_DMA_IRQHandler+0xd2>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a4d      	ldr	r2, [pc, #308]	@ (8005fcc <HAL_DMA_IRQHandler+0x1e4>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d00e      	beq.n	8005eba <HAL_DMA_IRQHandler+0xd2>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a4b      	ldr	r2, [pc, #300]	@ (8005fd0 <HAL_DMA_IRQHandler+0x1e8>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d009      	beq.n	8005eba <HAL_DMA_IRQHandler+0xd2>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a4a      	ldr	r2, [pc, #296]	@ (8005fd4 <HAL_DMA_IRQHandler+0x1ec>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d004      	beq.n	8005eba <HAL_DMA_IRQHandler+0xd2>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a48      	ldr	r2, [pc, #288]	@ (8005fd8 <HAL_DMA_IRQHandler+0x1f0>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d101      	bne.n	8005ebe <HAL_DMA_IRQHandler+0xd6>
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e000      	b.n	8005ec0 <HAL_DMA_IRQHandler+0xd8>
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f000 842b 	beq.w	800671c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005eca:	f003 031f 	and.w	r3, r3, #31
 8005ece:	2208      	movs	r2, #8
 8005ed0:	409a      	lsls	r2, r3
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	f000 80a2 	beq.w	8006020 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a2e      	ldr	r2, [pc, #184]	@ (8005f9c <HAL_DMA_IRQHandler+0x1b4>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d04a      	beq.n	8005f7c <HAL_DMA_IRQHandler+0x194>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a2d      	ldr	r2, [pc, #180]	@ (8005fa0 <HAL_DMA_IRQHandler+0x1b8>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d045      	beq.n	8005f7c <HAL_DMA_IRQHandler+0x194>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a2b      	ldr	r2, [pc, #172]	@ (8005fa4 <HAL_DMA_IRQHandler+0x1bc>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d040      	beq.n	8005f7c <HAL_DMA_IRQHandler+0x194>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a2a      	ldr	r2, [pc, #168]	@ (8005fa8 <HAL_DMA_IRQHandler+0x1c0>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d03b      	beq.n	8005f7c <HAL_DMA_IRQHandler+0x194>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a28      	ldr	r2, [pc, #160]	@ (8005fac <HAL_DMA_IRQHandler+0x1c4>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d036      	beq.n	8005f7c <HAL_DMA_IRQHandler+0x194>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a27      	ldr	r2, [pc, #156]	@ (8005fb0 <HAL_DMA_IRQHandler+0x1c8>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d031      	beq.n	8005f7c <HAL_DMA_IRQHandler+0x194>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a25      	ldr	r2, [pc, #148]	@ (8005fb4 <HAL_DMA_IRQHandler+0x1cc>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d02c      	beq.n	8005f7c <HAL_DMA_IRQHandler+0x194>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a24      	ldr	r2, [pc, #144]	@ (8005fb8 <HAL_DMA_IRQHandler+0x1d0>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d027      	beq.n	8005f7c <HAL_DMA_IRQHandler+0x194>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a22      	ldr	r2, [pc, #136]	@ (8005fbc <HAL_DMA_IRQHandler+0x1d4>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d022      	beq.n	8005f7c <HAL_DMA_IRQHandler+0x194>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a21      	ldr	r2, [pc, #132]	@ (8005fc0 <HAL_DMA_IRQHandler+0x1d8>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d01d      	beq.n	8005f7c <HAL_DMA_IRQHandler+0x194>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a1f      	ldr	r2, [pc, #124]	@ (8005fc4 <HAL_DMA_IRQHandler+0x1dc>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d018      	beq.n	8005f7c <HAL_DMA_IRQHandler+0x194>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a1e      	ldr	r2, [pc, #120]	@ (8005fc8 <HAL_DMA_IRQHandler+0x1e0>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d013      	beq.n	8005f7c <HAL_DMA_IRQHandler+0x194>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a1c      	ldr	r2, [pc, #112]	@ (8005fcc <HAL_DMA_IRQHandler+0x1e4>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d00e      	beq.n	8005f7c <HAL_DMA_IRQHandler+0x194>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a1b      	ldr	r2, [pc, #108]	@ (8005fd0 <HAL_DMA_IRQHandler+0x1e8>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d009      	beq.n	8005f7c <HAL_DMA_IRQHandler+0x194>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a19      	ldr	r2, [pc, #100]	@ (8005fd4 <HAL_DMA_IRQHandler+0x1ec>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d004      	beq.n	8005f7c <HAL_DMA_IRQHandler+0x194>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a18      	ldr	r2, [pc, #96]	@ (8005fd8 <HAL_DMA_IRQHandler+0x1f0>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d12f      	bne.n	8005fdc <HAL_DMA_IRQHandler+0x1f4>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f003 0304 	and.w	r3, r3, #4
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	bf14      	ite	ne
 8005f8a:	2301      	movne	r3, #1
 8005f8c:	2300      	moveq	r3, #0
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	e02e      	b.n	8005ff0 <HAL_DMA_IRQHandler+0x208>
 8005f92:	bf00      	nop
 8005f94:	24000004 	.word	0x24000004
 8005f98:	1b4e81b5 	.word	0x1b4e81b5
 8005f9c:	40020010 	.word	0x40020010
 8005fa0:	40020028 	.word	0x40020028
 8005fa4:	40020040 	.word	0x40020040
 8005fa8:	40020058 	.word	0x40020058
 8005fac:	40020070 	.word	0x40020070
 8005fb0:	40020088 	.word	0x40020088
 8005fb4:	400200a0 	.word	0x400200a0
 8005fb8:	400200b8 	.word	0x400200b8
 8005fbc:	40020410 	.word	0x40020410
 8005fc0:	40020428 	.word	0x40020428
 8005fc4:	40020440 	.word	0x40020440
 8005fc8:	40020458 	.word	0x40020458
 8005fcc:	40020470 	.word	0x40020470
 8005fd0:	40020488 	.word	0x40020488
 8005fd4:	400204a0 	.word	0x400204a0
 8005fd8:	400204b8 	.word	0x400204b8
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f003 0308 	and.w	r3, r3, #8
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	bf14      	ite	ne
 8005fea:	2301      	movne	r3, #1
 8005fec:	2300      	moveq	r3, #0
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d015      	beq.n	8006020 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f022 0204 	bic.w	r2, r2, #4
 8006002:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006008:	f003 031f 	and.w	r3, r3, #31
 800600c:	2208      	movs	r2, #8
 800600e:	409a      	lsls	r2, r3
 8006010:	6a3b      	ldr	r3, [r7, #32]
 8006012:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006018:	f043 0201 	orr.w	r2, r3, #1
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006024:	f003 031f 	and.w	r3, r3, #31
 8006028:	69ba      	ldr	r2, [r7, #24]
 800602a:	fa22 f303 	lsr.w	r3, r2, r3
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	2b00      	cmp	r3, #0
 8006034:	d06e      	beq.n	8006114 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a69      	ldr	r2, [pc, #420]	@ (80061e0 <HAL_DMA_IRQHandler+0x3f8>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d04a      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x2ee>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a67      	ldr	r2, [pc, #412]	@ (80061e4 <HAL_DMA_IRQHandler+0x3fc>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d045      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x2ee>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a66      	ldr	r2, [pc, #408]	@ (80061e8 <HAL_DMA_IRQHandler+0x400>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d040      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x2ee>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a64      	ldr	r2, [pc, #400]	@ (80061ec <HAL_DMA_IRQHandler+0x404>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d03b      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x2ee>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a63      	ldr	r2, [pc, #396]	@ (80061f0 <HAL_DMA_IRQHandler+0x408>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d036      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x2ee>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a61      	ldr	r2, [pc, #388]	@ (80061f4 <HAL_DMA_IRQHandler+0x40c>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d031      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x2ee>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a60      	ldr	r2, [pc, #384]	@ (80061f8 <HAL_DMA_IRQHandler+0x410>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d02c      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x2ee>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a5e      	ldr	r2, [pc, #376]	@ (80061fc <HAL_DMA_IRQHandler+0x414>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d027      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x2ee>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	4a5d      	ldr	r2, [pc, #372]	@ (8006200 <HAL_DMA_IRQHandler+0x418>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d022      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x2ee>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a5b      	ldr	r2, [pc, #364]	@ (8006204 <HAL_DMA_IRQHandler+0x41c>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d01d      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x2ee>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a5a      	ldr	r2, [pc, #360]	@ (8006208 <HAL_DMA_IRQHandler+0x420>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d018      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x2ee>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a58      	ldr	r2, [pc, #352]	@ (800620c <HAL_DMA_IRQHandler+0x424>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d013      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x2ee>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4a57      	ldr	r2, [pc, #348]	@ (8006210 <HAL_DMA_IRQHandler+0x428>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d00e      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x2ee>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a55      	ldr	r2, [pc, #340]	@ (8006214 <HAL_DMA_IRQHandler+0x42c>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d009      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x2ee>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4a54      	ldr	r2, [pc, #336]	@ (8006218 <HAL_DMA_IRQHandler+0x430>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d004      	beq.n	80060d6 <HAL_DMA_IRQHandler+0x2ee>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4a52      	ldr	r2, [pc, #328]	@ (800621c <HAL_DMA_IRQHandler+0x434>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d10a      	bne.n	80060ec <HAL_DMA_IRQHandler+0x304>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	695b      	ldr	r3, [r3, #20]
 80060dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	bf14      	ite	ne
 80060e4:	2301      	movne	r3, #1
 80060e6:	2300      	moveq	r3, #0
 80060e8:	b2db      	uxtb	r3, r3
 80060ea:	e003      	b.n	80060f4 <HAL_DMA_IRQHandler+0x30c>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2300      	movs	r3, #0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00d      	beq.n	8006114 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060fc:	f003 031f 	and.w	r3, r3, #31
 8006100:	2201      	movs	r2, #1
 8006102:	409a      	lsls	r2, r3
 8006104:	6a3b      	ldr	r3, [r7, #32]
 8006106:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800610c:	f043 0202 	orr.w	r2, r3, #2
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006118:	f003 031f 	and.w	r3, r3, #31
 800611c:	2204      	movs	r2, #4
 800611e:	409a      	lsls	r2, r3
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	4013      	ands	r3, r2
 8006124:	2b00      	cmp	r3, #0
 8006126:	f000 808f 	beq.w	8006248 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a2c      	ldr	r2, [pc, #176]	@ (80061e0 <HAL_DMA_IRQHandler+0x3f8>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d04a      	beq.n	80061ca <HAL_DMA_IRQHandler+0x3e2>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a2a      	ldr	r2, [pc, #168]	@ (80061e4 <HAL_DMA_IRQHandler+0x3fc>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d045      	beq.n	80061ca <HAL_DMA_IRQHandler+0x3e2>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a29      	ldr	r2, [pc, #164]	@ (80061e8 <HAL_DMA_IRQHandler+0x400>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d040      	beq.n	80061ca <HAL_DMA_IRQHandler+0x3e2>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a27      	ldr	r2, [pc, #156]	@ (80061ec <HAL_DMA_IRQHandler+0x404>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d03b      	beq.n	80061ca <HAL_DMA_IRQHandler+0x3e2>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a26      	ldr	r2, [pc, #152]	@ (80061f0 <HAL_DMA_IRQHandler+0x408>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d036      	beq.n	80061ca <HAL_DMA_IRQHandler+0x3e2>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a24      	ldr	r2, [pc, #144]	@ (80061f4 <HAL_DMA_IRQHandler+0x40c>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d031      	beq.n	80061ca <HAL_DMA_IRQHandler+0x3e2>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a23      	ldr	r2, [pc, #140]	@ (80061f8 <HAL_DMA_IRQHandler+0x410>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d02c      	beq.n	80061ca <HAL_DMA_IRQHandler+0x3e2>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a21      	ldr	r2, [pc, #132]	@ (80061fc <HAL_DMA_IRQHandler+0x414>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d027      	beq.n	80061ca <HAL_DMA_IRQHandler+0x3e2>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a20      	ldr	r2, [pc, #128]	@ (8006200 <HAL_DMA_IRQHandler+0x418>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d022      	beq.n	80061ca <HAL_DMA_IRQHandler+0x3e2>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a1e      	ldr	r2, [pc, #120]	@ (8006204 <HAL_DMA_IRQHandler+0x41c>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d01d      	beq.n	80061ca <HAL_DMA_IRQHandler+0x3e2>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a1d      	ldr	r2, [pc, #116]	@ (8006208 <HAL_DMA_IRQHandler+0x420>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d018      	beq.n	80061ca <HAL_DMA_IRQHandler+0x3e2>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a1b      	ldr	r2, [pc, #108]	@ (800620c <HAL_DMA_IRQHandler+0x424>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d013      	beq.n	80061ca <HAL_DMA_IRQHandler+0x3e2>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a1a      	ldr	r2, [pc, #104]	@ (8006210 <HAL_DMA_IRQHandler+0x428>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d00e      	beq.n	80061ca <HAL_DMA_IRQHandler+0x3e2>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a18      	ldr	r2, [pc, #96]	@ (8006214 <HAL_DMA_IRQHandler+0x42c>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d009      	beq.n	80061ca <HAL_DMA_IRQHandler+0x3e2>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a17      	ldr	r2, [pc, #92]	@ (8006218 <HAL_DMA_IRQHandler+0x430>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d004      	beq.n	80061ca <HAL_DMA_IRQHandler+0x3e2>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a15      	ldr	r2, [pc, #84]	@ (800621c <HAL_DMA_IRQHandler+0x434>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d12a      	bne.n	8006220 <HAL_DMA_IRQHandler+0x438>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 0302 	and.w	r3, r3, #2
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	bf14      	ite	ne
 80061d8:	2301      	movne	r3, #1
 80061da:	2300      	moveq	r3, #0
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	e023      	b.n	8006228 <HAL_DMA_IRQHandler+0x440>
 80061e0:	40020010 	.word	0x40020010
 80061e4:	40020028 	.word	0x40020028
 80061e8:	40020040 	.word	0x40020040
 80061ec:	40020058 	.word	0x40020058
 80061f0:	40020070 	.word	0x40020070
 80061f4:	40020088 	.word	0x40020088
 80061f8:	400200a0 	.word	0x400200a0
 80061fc:	400200b8 	.word	0x400200b8
 8006200:	40020410 	.word	0x40020410
 8006204:	40020428 	.word	0x40020428
 8006208:	40020440 	.word	0x40020440
 800620c:	40020458 	.word	0x40020458
 8006210:	40020470 	.word	0x40020470
 8006214:	40020488 	.word	0x40020488
 8006218:	400204a0 	.word	0x400204a0
 800621c:	400204b8 	.word	0x400204b8
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2300      	movs	r3, #0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00d      	beq.n	8006248 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006230:	f003 031f 	and.w	r3, r3, #31
 8006234:	2204      	movs	r2, #4
 8006236:	409a      	lsls	r2, r3
 8006238:	6a3b      	ldr	r3, [r7, #32]
 800623a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006240:	f043 0204 	orr.w	r2, r3, #4
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800624c:	f003 031f 	and.w	r3, r3, #31
 8006250:	2210      	movs	r2, #16
 8006252:	409a      	lsls	r2, r3
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	4013      	ands	r3, r2
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 80a6 	beq.w	80063aa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a85      	ldr	r2, [pc, #532]	@ (8006478 <HAL_DMA_IRQHandler+0x690>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d04a      	beq.n	80062fe <HAL_DMA_IRQHandler+0x516>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a83      	ldr	r2, [pc, #524]	@ (800647c <HAL_DMA_IRQHandler+0x694>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d045      	beq.n	80062fe <HAL_DMA_IRQHandler+0x516>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a82      	ldr	r2, [pc, #520]	@ (8006480 <HAL_DMA_IRQHandler+0x698>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d040      	beq.n	80062fe <HAL_DMA_IRQHandler+0x516>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a80      	ldr	r2, [pc, #512]	@ (8006484 <HAL_DMA_IRQHandler+0x69c>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d03b      	beq.n	80062fe <HAL_DMA_IRQHandler+0x516>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a7f      	ldr	r2, [pc, #508]	@ (8006488 <HAL_DMA_IRQHandler+0x6a0>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d036      	beq.n	80062fe <HAL_DMA_IRQHandler+0x516>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a7d      	ldr	r2, [pc, #500]	@ (800648c <HAL_DMA_IRQHandler+0x6a4>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d031      	beq.n	80062fe <HAL_DMA_IRQHandler+0x516>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a7c      	ldr	r2, [pc, #496]	@ (8006490 <HAL_DMA_IRQHandler+0x6a8>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d02c      	beq.n	80062fe <HAL_DMA_IRQHandler+0x516>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a7a      	ldr	r2, [pc, #488]	@ (8006494 <HAL_DMA_IRQHandler+0x6ac>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d027      	beq.n	80062fe <HAL_DMA_IRQHandler+0x516>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a79      	ldr	r2, [pc, #484]	@ (8006498 <HAL_DMA_IRQHandler+0x6b0>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d022      	beq.n	80062fe <HAL_DMA_IRQHandler+0x516>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a77      	ldr	r2, [pc, #476]	@ (800649c <HAL_DMA_IRQHandler+0x6b4>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d01d      	beq.n	80062fe <HAL_DMA_IRQHandler+0x516>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a76      	ldr	r2, [pc, #472]	@ (80064a0 <HAL_DMA_IRQHandler+0x6b8>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d018      	beq.n	80062fe <HAL_DMA_IRQHandler+0x516>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a74      	ldr	r2, [pc, #464]	@ (80064a4 <HAL_DMA_IRQHandler+0x6bc>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d013      	beq.n	80062fe <HAL_DMA_IRQHandler+0x516>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a73      	ldr	r2, [pc, #460]	@ (80064a8 <HAL_DMA_IRQHandler+0x6c0>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d00e      	beq.n	80062fe <HAL_DMA_IRQHandler+0x516>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a71      	ldr	r2, [pc, #452]	@ (80064ac <HAL_DMA_IRQHandler+0x6c4>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d009      	beq.n	80062fe <HAL_DMA_IRQHandler+0x516>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a70      	ldr	r2, [pc, #448]	@ (80064b0 <HAL_DMA_IRQHandler+0x6c8>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d004      	beq.n	80062fe <HAL_DMA_IRQHandler+0x516>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a6e      	ldr	r2, [pc, #440]	@ (80064b4 <HAL_DMA_IRQHandler+0x6cc>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d10a      	bne.n	8006314 <HAL_DMA_IRQHandler+0x52c>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f003 0308 	and.w	r3, r3, #8
 8006308:	2b00      	cmp	r3, #0
 800630a:	bf14      	ite	ne
 800630c:	2301      	movne	r3, #1
 800630e:	2300      	moveq	r3, #0
 8006310:	b2db      	uxtb	r3, r3
 8006312:	e009      	b.n	8006328 <HAL_DMA_IRQHandler+0x540>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0304 	and.w	r3, r3, #4
 800631e:	2b00      	cmp	r3, #0
 8006320:	bf14      	ite	ne
 8006322:	2301      	movne	r3, #1
 8006324:	2300      	moveq	r3, #0
 8006326:	b2db      	uxtb	r3, r3
 8006328:	2b00      	cmp	r3, #0
 800632a:	d03e      	beq.n	80063aa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006330:	f003 031f 	and.w	r3, r3, #31
 8006334:	2210      	movs	r2, #16
 8006336:	409a      	lsls	r2, r3
 8006338:	6a3b      	ldr	r3, [r7, #32]
 800633a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006346:	2b00      	cmp	r3, #0
 8006348:	d018      	beq.n	800637c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006354:	2b00      	cmp	r3, #0
 8006356:	d108      	bne.n	800636a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800635c:	2b00      	cmp	r3, #0
 800635e:	d024      	beq.n	80063aa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	4798      	blx	r3
 8006368:	e01f      	b.n	80063aa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800636e:	2b00      	cmp	r3, #0
 8006370:	d01b      	beq.n	80063aa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	4798      	blx	r3
 800637a:	e016      	b.n	80063aa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006386:	2b00      	cmp	r3, #0
 8006388:	d107      	bne.n	800639a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f022 0208 	bic.w	r2, r2, #8
 8006398:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d003      	beq.n	80063aa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063ae:	f003 031f 	and.w	r3, r3, #31
 80063b2:	2220      	movs	r2, #32
 80063b4:	409a      	lsls	r2, r3
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	4013      	ands	r3, r2
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	f000 8110 	beq.w	80065e0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a2c      	ldr	r2, [pc, #176]	@ (8006478 <HAL_DMA_IRQHandler+0x690>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d04a      	beq.n	8006460 <HAL_DMA_IRQHandler+0x678>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a2b      	ldr	r2, [pc, #172]	@ (800647c <HAL_DMA_IRQHandler+0x694>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d045      	beq.n	8006460 <HAL_DMA_IRQHandler+0x678>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a29      	ldr	r2, [pc, #164]	@ (8006480 <HAL_DMA_IRQHandler+0x698>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d040      	beq.n	8006460 <HAL_DMA_IRQHandler+0x678>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4a28      	ldr	r2, [pc, #160]	@ (8006484 <HAL_DMA_IRQHandler+0x69c>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d03b      	beq.n	8006460 <HAL_DMA_IRQHandler+0x678>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	4a26      	ldr	r2, [pc, #152]	@ (8006488 <HAL_DMA_IRQHandler+0x6a0>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d036      	beq.n	8006460 <HAL_DMA_IRQHandler+0x678>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a25      	ldr	r2, [pc, #148]	@ (800648c <HAL_DMA_IRQHandler+0x6a4>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d031      	beq.n	8006460 <HAL_DMA_IRQHandler+0x678>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a23      	ldr	r2, [pc, #140]	@ (8006490 <HAL_DMA_IRQHandler+0x6a8>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d02c      	beq.n	8006460 <HAL_DMA_IRQHandler+0x678>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a22      	ldr	r2, [pc, #136]	@ (8006494 <HAL_DMA_IRQHandler+0x6ac>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d027      	beq.n	8006460 <HAL_DMA_IRQHandler+0x678>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a20      	ldr	r2, [pc, #128]	@ (8006498 <HAL_DMA_IRQHandler+0x6b0>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d022      	beq.n	8006460 <HAL_DMA_IRQHandler+0x678>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a1f      	ldr	r2, [pc, #124]	@ (800649c <HAL_DMA_IRQHandler+0x6b4>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d01d      	beq.n	8006460 <HAL_DMA_IRQHandler+0x678>
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a1d      	ldr	r2, [pc, #116]	@ (80064a0 <HAL_DMA_IRQHandler+0x6b8>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d018      	beq.n	8006460 <HAL_DMA_IRQHandler+0x678>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a1c      	ldr	r2, [pc, #112]	@ (80064a4 <HAL_DMA_IRQHandler+0x6bc>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d013      	beq.n	8006460 <HAL_DMA_IRQHandler+0x678>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a1a      	ldr	r2, [pc, #104]	@ (80064a8 <HAL_DMA_IRQHandler+0x6c0>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d00e      	beq.n	8006460 <HAL_DMA_IRQHandler+0x678>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4a19      	ldr	r2, [pc, #100]	@ (80064ac <HAL_DMA_IRQHandler+0x6c4>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d009      	beq.n	8006460 <HAL_DMA_IRQHandler+0x678>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a17      	ldr	r2, [pc, #92]	@ (80064b0 <HAL_DMA_IRQHandler+0x6c8>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d004      	beq.n	8006460 <HAL_DMA_IRQHandler+0x678>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a16      	ldr	r2, [pc, #88]	@ (80064b4 <HAL_DMA_IRQHandler+0x6cc>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d12b      	bne.n	80064b8 <HAL_DMA_IRQHandler+0x6d0>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 0310 	and.w	r3, r3, #16
 800646a:	2b00      	cmp	r3, #0
 800646c:	bf14      	ite	ne
 800646e:	2301      	movne	r3, #1
 8006470:	2300      	moveq	r3, #0
 8006472:	b2db      	uxtb	r3, r3
 8006474:	e02a      	b.n	80064cc <HAL_DMA_IRQHandler+0x6e4>
 8006476:	bf00      	nop
 8006478:	40020010 	.word	0x40020010
 800647c:	40020028 	.word	0x40020028
 8006480:	40020040 	.word	0x40020040
 8006484:	40020058 	.word	0x40020058
 8006488:	40020070 	.word	0x40020070
 800648c:	40020088 	.word	0x40020088
 8006490:	400200a0 	.word	0x400200a0
 8006494:	400200b8 	.word	0x400200b8
 8006498:	40020410 	.word	0x40020410
 800649c:	40020428 	.word	0x40020428
 80064a0:	40020440 	.word	0x40020440
 80064a4:	40020458 	.word	0x40020458
 80064a8:	40020470 	.word	0x40020470
 80064ac:	40020488 	.word	0x40020488
 80064b0:	400204a0 	.word	0x400204a0
 80064b4:	400204b8 	.word	0x400204b8
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0302 	and.w	r3, r3, #2
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	bf14      	ite	ne
 80064c6:	2301      	movne	r3, #1
 80064c8:	2300      	moveq	r3, #0
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f000 8087 	beq.w	80065e0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80064d6:	f003 031f 	and.w	r3, r3, #31
 80064da:	2220      	movs	r2, #32
 80064dc:	409a      	lsls	r2, r3
 80064de:	6a3b      	ldr	r3, [r7, #32]
 80064e0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b04      	cmp	r3, #4
 80064ec:	d139      	bne.n	8006562 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f022 0216 	bic.w	r2, r2, #22
 80064fc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	695a      	ldr	r2, [r3, #20]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800650c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006512:	2b00      	cmp	r3, #0
 8006514:	d103      	bne.n	800651e <HAL_DMA_IRQHandler+0x736>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800651a:	2b00      	cmp	r3, #0
 800651c:	d007      	beq.n	800652e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f022 0208 	bic.w	r2, r2, #8
 800652c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006532:	f003 031f 	and.w	r3, r3, #31
 8006536:	223f      	movs	r2, #63	@ 0x3f
 8006538:	409a      	lsls	r2, r3
 800653a:	6a3b      	ldr	r3, [r7, #32]
 800653c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2201      	movs	r2, #1
 8006542:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006552:	2b00      	cmp	r3, #0
 8006554:	f000 8382 	beq.w	8006c5c <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	4798      	blx	r3
          }
          return;
 8006560:	e37c      	b.n	8006c5c <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800656c:	2b00      	cmp	r3, #0
 800656e:	d018      	beq.n	80065a2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800657a:	2b00      	cmp	r3, #0
 800657c:	d108      	bne.n	8006590 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006582:	2b00      	cmp	r3, #0
 8006584:	d02c      	beq.n	80065e0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	4798      	blx	r3
 800658e:	e027      	b.n	80065e0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006594:	2b00      	cmp	r3, #0
 8006596:	d023      	beq.n	80065e0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	4798      	blx	r3
 80065a0:	e01e      	b.n	80065e0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10f      	bne.n	80065d0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f022 0210 	bic.w	r2, r2, #16
 80065be:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d003      	beq.n	80065e0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	f000 833e 	beq.w	8006c66 <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f000 8088 	beq.w	8006708 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2204      	movs	r2, #4
 80065fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a89      	ldr	r2, [pc, #548]	@ (800682c <HAL_DMA_IRQHandler+0xa44>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d04a      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x8b8>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a88      	ldr	r2, [pc, #544]	@ (8006830 <HAL_DMA_IRQHandler+0xa48>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d045      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x8b8>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a86      	ldr	r2, [pc, #536]	@ (8006834 <HAL_DMA_IRQHandler+0xa4c>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d040      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x8b8>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a85      	ldr	r2, [pc, #532]	@ (8006838 <HAL_DMA_IRQHandler+0xa50>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d03b      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x8b8>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a83      	ldr	r2, [pc, #524]	@ (800683c <HAL_DMA_IRQHandler+0xa54>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d036      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x8b8>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a82      	ldr	r2, [pc, #520]	@ (8006840 <HAL_DMA_IRQHandler+0xa58>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d031      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x8b8>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a80      	ldr	r2, [pc, #512]	@ (8006844 <HAL_DMA_IRQHandler+0xa5c>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d02c      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x8b8>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a7f      	ldr	r2, [pc, #508]	@ (8006848 <HAL_DMA_IRQHandler+0xa60>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d027      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x8b8>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a7d      	ldr	r2, [pc, #500]	@ (800684c <HAL_DMA_IRQHandler+0xa64>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d022      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x8b8>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a7c      	ldr	r2, [pc, #496]	@ (8006850 <HAL_DMA_IRQHandler+0xa68>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d01d      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x8b8>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a7a      	ldr	r2, [pc, #488]	@ (8006854 <HAL_DMA_IRQHandler+0xa6c>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d018      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x8b8>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a79      	ldr	r2, [pc, #484]	@ (8006858 <HAL_DMA_IRQHandler+0xa70>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d013      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x8b8>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a77      	ldr	r2, [pc, #476]	@ (800685c <HAL_DMA_IRQHandler+0xa74>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d00e      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x8b8>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a76      	ldr	r2, [pc, #472]	@ (8006860 <HAL_DMA_IRQHandler+0xa78>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d009      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x8b8>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a74      	ldr	r2, [pc, #464]	@ (8006864 <HAL_DMA_IRQHandler+0xa7c>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d004      	beq.n	80066a0 <HAL_DMA_IRQHandler+0x8b8>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a73      	ldr	r2, [pc, #460]	@ (8006868 <HAL_DMA_IRQHandler+0xa80>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d108      	bne.n	80066b2 <HAL_DMA_IRQHandler+0x8ca>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f022 0201 	bic.w	r2, r2, #1
 80066ae:	601a      	str	r2, [r3, #0]
 80066b0:	e007      	b.n	80066c2 <HAL_DMA_IRQHandler+0x8da>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f022 0201 	bic.w	r2, r2, #1
 80066c0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	3301      	adds	r3, #1
 80066c6:	60fb      	str	r3, [r7, #12]
 80066c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d307      	bcc.n	80066de <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0301 	and.w	r3, r3, #1
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1f2      	bne.n	80066c2 <HAL_DMA_IRQHandler+0x8da>
 80066dc:	e000      	b.n	80066e0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80066de:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0301 	and.w	r3, r3, #1
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d004      	beq.n	80066f8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2203      	movs	r2, #3
 80066f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80066f6:	e003      	b.n	8006700 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800670c:	2b00      	cmp	r3, #0
 800670e:	f000 82aa 	beq.w	8006c66 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	4798      	blx	r3
 800671a:	e2a4      	b.n	8006c66 <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a52      	ldr	r2, [pc, #328]	@ (800686c <HAL_DMA_IRQHandler+0xa84>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d04a      	beq.n	80067bc <HAL_DMA_IRQHandler+0x9d4>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a51      	ldr	r2, [pc, #324]	@ (8006870 <HAL_DMA_IRQHandler+0xa88>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d045      	beq.n	80067bc <HAL_DMA_IRQHandler+0x9d4>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a4f      	ldr	r2, [pc, #316]	@ (8006874 <HAL_DMA_IRQHandler+0xa8c>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d040      	beq.n	80067bc <HAL_DMA_IRQHandler+0x9d4>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a4e      	ldr	r2, [pc, #312]	@ (8006878 <HAL_DMA_IRQHandler+0xa90>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d03b      	beq.n	80067bc <HAL_DMA_IRQHandler+0x9d4>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a4c      	ldr	r2, [pc, #304]	@ (800687c <HAL_DMA_IRQHandler+0xa94>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d036      	beq.n	80067bc <HAL_DMA_IRQHandler+0x9d4>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a4b      	ldr	r2, [pc, #300]	@ (8006880 <HAL_DMA_IRQHandler+0xa98>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d031      	beq.n	80067bc <HAL_DMA_IRQHandler+0x9d4>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a49      	ldr	r2, [pc, #292]	@ (8006884 <HAL_DMA_IRQHandler+0xa9c>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d02c      	beq.n	80067bc <HAL_DMA_IRQHandler+0x9d4>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a48      	ldr	r2, [pc, #288]	@ (8006888 <HAL_DMA_IRQHandler+0xaa0>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d027      	beq.n	80067bc <HAL_DMA_IRQHandler+0x9d4>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a46      	ldr	r2, [pc, #280]	@ (800688c <HAL_DMA_IRQHandler+0xaa4>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d022      	beq.n	80067bc <HAL_DMA_IRQHandler+0x9d4>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a45      	ldr	r2, [pc, #276]	@ (8006890 <HAL_DMA_IRQHandler+0xaa8>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d01d      	beq.n	80067bc <HAL_DMA_IRQHandler+0x9d4>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a43      	ldr	r2, [pc, #268]	@ (8006894 <HAL_DMA_IRQHandler+0xaac>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d018      	beq.n	80067bc <HAL_DMA_IRQHandler+0x9d4>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a42      	ldr	r2, [pc, #264]	@ (8006898 <HAL_DMA_IRQHandler+0xab0>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d013      	beq.n	80067bc <HAL_DMA_IRQHandler+0x9d4>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a40      	ldr	r2, [pc, #256]	@ (800689c <HAL_DMA_IRQHandler+0xab4>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d00e      	beq.n	80067bc <HAL_DMA_IRQHandler+0x9d4>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a3f      	ldr	r2, [pc, #252]	@ (80068a0 <HAL_DMA_IRQHandler+0xab8>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d009      	beq.n	80067bc <HAL_DMA_IRQHandler+0x9d4>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a3d      	ldr	r2, [pc, #244]	@ (80068a4 <HAL_DMA_IRQHandler+0xabc>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d004      	beq.n	80067bc <HAL_DMA_IRQHandler+0x9d4>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a3c      	ldr	r2, [pc, #240]	@ (80068a8 <HAL_DMA_IRQHandler+0xac0>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d101      	bne.n	80067c0 <HAL_DMA_IRQHandler+0x9d8>
 80067bc:	2301      	movs	r3, #1
 80067be:	e000      	b.n	80067c2 <HAL_DMA_IRQHandler+0x9da>
 80067c0:	2300      	movs	r3, #0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	f000 824f 	beq.w	8006c66 <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067d4:	f003 031f 	and.w	r3, r3, #31
 80067d8:	2204      	movs	r2, #4
 80067da:	409a      	lsls	r2, r3
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	4013      	ands	r3, r2
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f000 80dd 	beq.w	80069a0 <HAL_DMA_IRQHandler+0xbb8>
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	f003 0304 	and.w	r3, r3, #4
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f000 80d7 	beq.w	80069a0 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067f6:	f003 031f 	and.w	r3, r3, #31
 80067fa:	2204      	movs	r2, #4
 80067fc:	409a      	lsls	r2, r3
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006808:	2b00      	cmp	r3, #0
 800680a:	d059      	beq.n	80068c0 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d14a      	bne.n	80068ac <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800681a:	2b00      	cmp	r3, #0
 800681c:	f000 8220 	beq.w	8006c60 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006828:	e21a      	b.n	8006c60 <HAL_DMA_IRQHandler+0xe78>
 800682a:	bf00      	nop
 800682c:	40020010 	.word	0x40020010
 8006830:	40020028 	.word	0x40020028
 8006834:	40020040 	.word	0x40020040
 8006838:	40020058 	.word	0x40020058
 800683c:	40020070 	.word	0x40020070
 8006840:	40020088 	.word	0x40020088
 8006844:	400200a0 	.word	0x400200a0
 8006848:	400200b8 	.word	0x400200b8
 800684c:	40020410 	.word	0x40020410
 8006850:	40020428 	.word	0x40020428
 8006854:	40020440 	.word	0x40020440
 8006858:	40020458 	.word	0x40020458
 800685c:	40020470 	.word	0x40020470
 8006860:	40020488 	.word	0x40020488
 8006864:	400204a0 	.word	0x400204a0
 8006868:	400204b8 	.word	0x400204b8
 800686c:	48022c08 	.word	0x48022c08
 8006870:	48022c1c 	.word	0x48022c1c
 8006874:	48022c30 	.word	0x48022c30
 8006878:	48022c44 	.word	0x48022c44
 800687c:	48022c58 	.word	0x48022c58
 8006880:	48022c6c 	.word	0x48022c6c
 8006884:	48022c80 	.word	0x48022c80
 8006888:	48022c94 	.word	0x48022c94
 800688c:	58025408 	.word	0x58025408
 8006890:	5802541c 	.word	0x5802541c
 8006894:	58025430 	.word	0x58025430
 8006898:	58025444 	.word	0x58025444
 800689c:	58025458 	.word	0x58025458
 80068a0:	5802546c 	.word	0x5802546c
 80068a4:	58025480 	.word	0x58025480
 80068a8:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f000 81d5 	beq.w	8006c60 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068be:	e1cf      	b.n	8006c60 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	f003 0320 	and.w	r3, r3, #32
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d160      	bne.n	800698c <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a7f      	ldr	r2, [pc, #508]	@ (8006acc <HAL_DMA_IRQHandler+0xce4>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d04a      	beq.n	800696a <HAL_DMA_IRQHandler+0xb82>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a7d      	ldr	r2, [pc, #500]	@ (8006ad0 <HAL_DMA_IRQHandler+0xce8>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d045      	beq.n	800696a <HAL_DMA_IRQHandler+0xb82>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a7c      	ldr	r2, [pc, #496]	@ (8006ad4 <HAL_DMA_IRQHandler+0xcec>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d040      	beq.n	800696a <HAL_DMA_IRQHandler+0xb82>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a7a      	ldr	r2, [pc, #488]	@ (8006ad8 <HAL_DMA_IRQHandler+0xcf0>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d03b      	beq.n	800696a <HAL_DMA_IRQHandler+0xb82>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a79      	ldr	r2, [pc, #484]	@ (8006adc <HAL_DMA_IRQHandler+0xcf4>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d036      	beq.n	800696a <HAL_DMA_IRQHandler+0xb82>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a77      	ldr	r2, [pc, #476]	@ (8006ae0 <HAL_DMA_IRQHandler+0xcf8>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d031      	beq.n	800696a <HAL_DMA_IRQHandler+0xb82>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a76      	ldr	r2, [pc, #472]	@ (8006ae4 <HAL_DMA_IRQHandler+0xcfc>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d02c      	beq.n	800696a <HAL_DMA_IRQHandler+0xb82>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a74      	ldr	r2, [pc, #464]	@ (8006ae8 <HAL_DMA_IRQHandler+0xd00>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d027      	beq.n	800696a <HAL_DMA_IRQHandler+0xb82>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a73      	ldr	r2, [pc, #460]	@ (8006aec <HAL_DMA_IRQHandler+0xd04>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d022      	beq.n	800696a <HAL_DMA_IRQHandler+0xb82>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a71      	ldr	r2, [pc, #452]	@ (8006af0 <HAL_DMA_IRQHandler+0xd08>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d01d      	beq.n	800696a <HAL_DMA_IRQHandler+0xb82>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a70      	ldr	r2, [pc, #448]	@ (8006af4 <HAL_DMA_IRQHandler+0xd0c>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d018      	beq.n	800696a <HAL_DMA_IRQHandler+0xb82>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a6e      	ldr	r2, [pc, #440]	@ (8006af8 <HAL_DMA_IRQHandler+0xd10>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d013      	beq.n	800696a <HAL_DMA_IRQHandler+0xb82>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4a6d      	ldr	r2, [pc, #436]	@ (8006afc <HAL_DMA_IRQHandler+0xd14>)
 8006948:	4293      	cmp	r3, r2
 800694a:	d00e      	beq.n	800696a <HAL_DMA_IRQHandler+0xb82>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a6b      	ldr	r2, [pc, #428]	@ (8006b00 <HAL_DMA_IRQHandler+0xd18>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d009      	beq.n	800696a <HAL_DMA_IRQHandler+0xb82>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a6a      	ldr	r2, [pc, #424]	@ (8006b04 <HAL_DMA_IRQHandler+0xd1c>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d004      	beq.n	800696a <HAL_DMA_IRQHandler+0xb82>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a68      	ldr	r2, [pc, #416]	@ (8006b08 <HAL_DMA_IRQHandler+0xd20>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d108      	bne.n	800697c <HAL_DMA_IRQHandler+0xb94>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f022 0208 	bic.w	r2, r2, #8
 8006978:	601a      	str	r2, [r3, #0]
 800697a:	e007      	b.n	800698c <HAL_DMA_IRQHandler+0xba4>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	681a      	ldr	r2, [r3, #0]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f022 0204 	bic.w	r2, r2, #4
 800698a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006990:	2b00      	cmp	r3, #0
 8006992:	f000 8165 	beq.w	8006c60 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800699e:	e15f      	b.n	8006c60 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069a4:	f003 031f 	and.w	r3, r3, #31
 80069a8:	2202      	movs	r2, #2
 80069aa:	409a      	lsls	r2, r3
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	4013      	ands	r3, r2
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f000 80c5 	beq.w	8006b40 <HAL_DMA_IRQHandler+0xd58>
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	f003 0302 	and.w	r3, r3, #2
 80069bc:	2b00      	cmp	r3, #0
 80069be:	f000 80bf 	beq.w	8006b40 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069c6:	f003 031f 	and.w	r3, r3, #31
 80069ca:	2202      	movs	r2, #2
 80069cc:	409a      	lsls	r2, r3
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d018      	beq.n	8006a0e <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d109      	bne.n	80069fa <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	f000 813a 	beq.w	8006c64 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069f8:	e134      	b.n	8006c64 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f000 8130 	beq.w	8006c64 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a0c:	e12a      	b.n	8006c64 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	f003 0320 	and.w	r3, r3, #32
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	f040 8089 	bne.w	8006b2c <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a2b      	ldr	r2, [pc, #172]	@ (8006acc <HAL_DMA_IRQHandler+0xce4>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d04a      	beq.n	8006aba <HAL_DMA_IRQHandler+0xcd2>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	4a29      	ldr	r2, [pc, #164]	@ (8006ad0 <HAL_DMA_IRQHandler+0xce8>)
 8006a2a:	4293      	cmp	r3, r2
 8006a2c:	d045      	beq.n	8006aba <HAL_DMA_IRQHandler+0xcd2>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	4a28      	ldr	r2, [pc, #160]	@ (8006ad4 <HAL_DMA_IRQHandler+0xcec>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d040      	beq.n	8006aba <HAL_DMA_IRQHandler+0xcd2>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	4a26      	ldr	r2, [pc, #152]	@ (8006ad8 <HAL_DMA_IRQHandler+0xcf0>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d03b      	beq.n	8006aba <HAL_DMA_IRQHandler+0xcd2>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a25      	ldr	r2, [pc, #148]	@ (8006adc <HAL_DMA_IRQHandler+0xcf4>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d036      	beq.n	8006aba <HAL_DMA_IRQHandler+0xcd2>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4a23      	ldr	r2, [pc, #140]	@ (8006ae0 <HAL_DMA_IRQHandler+0xcf8>)
 8006a52:	4293      	cmp	r3, r2
 8006a54:	d031      	beq.n	8006aba <HAL_DMA_IRQHandler+0xcd2>
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a22      	ldr	r2, [pc, #136]	@ (8006ae4 <HAL_DMA_IRQHandler+0xcfc>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d02c      	beq.n	8006aba <HAL_DMA_IRQHandler+0xcd2>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a20      	ldr	r2, [pc, #128]	@ (8006ae8 <HAL_DMA_IRQHandler+0xd00>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d027      	beq.n	8006aba <HAL_DMA_IRQHandler+0xcd2>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a1f      	ldr	r2, [pc, #124]	@ (8006aec <HAL_DMA_IRQHandler+0xd04>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d022      	beq.n	8006aba <HAL_DMA_IRQHandler+0xcd2>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a1d      	ldr	r2, [pc, #116]	@ (8006af0 <HAL_DMA_IRQHandler+0xd08>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d01d      	beq.n	8006aba <HAL_DMA_IRQHandler+0xcd2>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a1c      	ldr	r2, [pc, #112]	@ (8006af4 <HAL_DMA_IRQHandler+0xd0c>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d018      	beq.n	8006aba <HAL_DMA_IRQHandler+0xcd2>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a1a      	ldr	r2, [pc, #104]	@ (8006af8 <HAL_DMA_IRQHandler+0xd10>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d013      	beq.n	8006aba <HAL_DMA_IRQHandler+0xcd2>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a19      	ldr	r2, [pc, #100]	@ (8006afc <HAL_DMA_IRQHandler+0xd14>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d00e      	beq.n	8006aba <HAL_DMA_IRQHandler+0xcd2>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a17      	ldr	r2, [pc, #92]	@ (8006b00 <HAL_DMA_IRQHandler+0xd18>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d009      	beq.n	8006aba <HAL_DMA_IRQHandler+0xcd2>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a16      	ldr	r2, [pc, #88]	@ (8006b04 <HAL_DMA_IRQHandler+0xd1c>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d004      	beq.n	8006aba <HAL_DMA_IRQHandler+0xcd2>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a14      	ldr	r2, [pc, #80]	@ (8006b08 <HAL_DMA_IRQHandler+0xd20>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d128      	bne.n	8006b0c <HAL_DMA_IRQHandler+0xd24>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f022 0214 	bic.w	r2, r2, #20
 8006ac8:	601a      	str	r2, [r3, #0]
 8006aca:	e027      	b.n	8006b1c <HAL_DMA_IRQHandler+0xd34>
 8006acc:	40020010 	.word	0x40020010
 8006ad0:	40020028 	.word	0x40020028
 8006ad4:	40020040 	.word	0x40020040
 8006ad8:	40020058 	.word	0x40020058
 8006adc:	40020070 	.word	0x40020070
 8006ae0:	40020088 	.word	0x40020088
 8006ae4:	400200a0 	.word	0x400200a0
 8006ae8:	400200b8 	.word	0x400200b8
 8006aec:	40020410 	.word	0x40020410
 8006af0:	40020428 	.word	0x40020428
 8006af4:	40020440 	.word	0x40020440
 8006af8:	40020458 	.word	0x40020458
 8006afc:	40020470 	.word	0x40020470
 8006b00:	40020488 	.word	0x40020488
 8006b04:	400204a0 	.word	0x400204a0
 8006b08:	400204b8 	.word	0x400204b8
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f022 020a 	bic.w	r2, r2, #10
 8006b1a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f000 8097 	beq.w	8006c64 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b3e:	e091      	b.n	8006c64 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b44:	f003 031f 	and.w	r3, r3, #31
 8006b48:	2208      	movs	r2, #8
 8006b4a:	409a      	lsls	r2, r3
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	4013      	ands	r3, r2
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	f000 8088 	beq.w	8006c66 <HAL_DMA_IRQHandler+0xe7e>
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	f003 0308 	and.w	r3, r3, #8
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	f000 8082 	beq.w	8006c66 <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a41      	ldr	r2, [pc, #260]	@ (8006c6c <HAL_DMA_IRQHandler+0xe84>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d04a      	beq.n	8006c02 <HAL_DMA_IRQHandler+0xe1a>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a3f      	ldr	r2, [pc, #252]	@ (8006c70 <HAL_DMA_IRQHandler+0xe88>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d045      	beq.n	8006c02 <HAL_DMA_IRQHandler+0xe1a>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a3e      	ldr	r2, [pc, #248]	@ (8006c74 <HAL_DMA_IRQHandler+0xe8c>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d040      	beq.n	8006c02 <HAL_DMA_IRQHandler+0xe1a>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a3c      	ldr	r2, [pc, #240]	@ (8006c78 <HAL_DMA_IRQHandler+0xe90>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d03b      	beq.n	8006c02 <HAL_DMA_IRQHandler+0xe1a>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a3b      	ldr	r2, [pc, #236]	@ (8006c7c <HAL_DMA_IRQHandler+0xe94>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d036      	beq.n	8006c02 <HAL_DMA_IRQHandler+0xe1a>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a39      	ldr	r2, [pc, #228]	@ (8006c80 <HAL_DMA_IRQHandler+0xe98>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d031      	beq.n	8006c02 <HAL_DMA_IRQHandler+0xe1a>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a38      	ldr	r2, [pc, #224]	@ (8006c84 <HAL_DMA_IRQHandler+0xe9c>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d02c      	beq.n	8006c02 <HAL_DMA_IRQHandler+0xe1a>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a36      	ldr	r2, [pc, #216]	@ (8006c88 <HAL_DMA_IRQHandler+0xea0>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d027      	beq.n	8006c02 <HAL_DMA_IRQHandler+0xe1a>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a35      	ldr	r2, [pc, #212]	@ (8006c8c <HAL_DMA_IRQHandler+0xea4>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d022      	beq.n	8006c02 <HAL_DMA_IRQHandler+0xe1a>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a33      	ldr	r2, [pc, #204]	@ (8006c90 <HAL_DMA_IRQHandler+0xea8>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d01d      	beq.n	8006c02 <HAL_DMA_IRQHandler+0xe1a>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a32      	ldr	r2, [pc, #200]	@ (8006c94 <HAL_DMA_IRQHandler+0xeac>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d018      	beq.n	8006c02 <HAL_DMA_IRQHandler+0xe1a>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a30      	ldr	r2, [pc, #192]	@ (8006c98 <HAL_DMA_IRQHandler+0xeb0>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d013      	beq.n	8006c02 <HAL_DMA_IRQHandler+0xe1a>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a2f      	ldr	r2, [pc, #188]	@ (8006c9c <HAL_DMA_IRQHandler+0xeb4>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d00e      	beq.n	8006c02 <HAL_DMA_IRQHandler+0xe1a>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a2d      	ldr	r2, [pc, #180]	@ (8006ca0 <HAL_DMA_IRQHandler+0xeb8>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d009      	beq.n	8006c02 <HAL_DMA_IRQHandler+0xe1a>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a2c      	ldr	r2, [pc, #176]	@ (8006ca4 <HAL_DMA_IRQHandler+0xebc>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d004      	beq.n	8006c02 <HAL_DMA_IRQHandler+0xe1a>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a2a      	ldr	r2, [pc, #168]	@ (8006ca8 <HAL_DMA_IRQHandler+0xec0>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d108      	bne.n	8006c14 <HAL_DMA_IRQHandler+0xe2c>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f022 021c 	bic.w	r2, r2, #28
 8006c10:	601a      	str	r2, [r3, #0]
 8006c12:	e007      	b.n	8006c24 <HAL_DMA_IRQHandler+0xe3c>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f022 020e 	bic.w	r2, r2, #14
 8006c22:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c28:	f003 031f 	and.w	r3, r3, #31
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	409a      	lsls	r2, r3
 8006c30:	69fb      	ldr	r3, [r7, #28]
 8006c32:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d009      	beq.n	8006c66 <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	4798      	blx	r3
 8006c5a:	e004      	b.n	8006c66 <HAL_DMA_IRQHandler+0xe7e>
          return;
 8006c5c:	bf00      	nop
 8006c5e:	e002      	b.n	8006c66 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c60:	bf00      	nop
 8006c62:	e000      	b.n	8006c66 <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c64:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006c66:	3728      	adds	r7, #40	@ 0x28
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	40020010 	.word	0x40020010
 8006c70:	40020028 	.word	0x40020028
 8006c74:	40020040 	.word	0x40020040
 8006c78:	40020058 	.word	0x40020058
 8006c7c:	40020070 	.word	0x40020070
 8006c80:	40020088 	.word	0x40020088
 8006c84:	400200a0 	.word	0x400200a0
 8006c88:	400200b8 	.word	0x400200b8
 8006c8c:	40020410 	.word	0x40020410
 8006c90:	40020428 	.word	0x40020428
 8006c94:	40020440 	.word	0x40020440
 8006c98:	40020458 	.word	0x40020458
 8006c9c:	40020470 	.word	0x40020470
 8006ca0:	40020488 	.word	0x40020488
 8006ca4:	400204a0 	.word	0x400204a0
 8006ca8:	400204b8 	.word	0x400204b8

08006cac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b087      	sub	sp, #28
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	607a      	str	r2, [r7, #4]
 8006cb8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cbe:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cc4:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a7f      	ldr	r2, [pc, #508]	@ (8006ec8 <DMA_SetConfig+0x21c>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d072      	beq.n	8006db6 <DMA_SetConfig+0x10a>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a7d      	ldr	r2, [pc, #500]	@ (8006ecc <DMA_SetConfig+0x220>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d06d      	beq.n	8006db6 <DMA_SetConfig+0x10a>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a7c      	ldr	r2, [pc, #496]	@ (8006ed0 <DMA_SetConfig+0x224>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d068      	beq.n	8006db6 <DMA_SetConfig+0x10a>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a7a      	ldr	r2, [pc, #488]	@ (8006ed4 <DMA_SetConfig+0x228>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d063      	beq.n	8006db6 <DMA_SetConfig+0x10a>
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a79      	ldr	r2, [pc, #484]	@ (8006ed8 <DMA_SetConfig+0x22c>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d05e      	beq.n	8006db6 <DMA_SetConfig+0x10a>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a77      	ldr	r2, [pc, #476]	@ (8006edc <DMA_SetConfig+0x230>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d059      	beq.n	8006db6 <DMA_SetConfig+0x10a>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a76      	ldr	r2, [pc, #472]	@ (8006ee0 <DMA_SetConfig+0x234>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d054      	beq.n	8006db6 <DMA_SetConfig+0x10a>
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a74      	ldr	r2, [pc, #464]	@ (8006ee4 <DMA_SetConfig+0x238>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d04f      	beq.n	8006db6 <DMA_SetConfig+0x10a>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a73      	ldr	r2, [pc, #460]	@ (8006ee8 <DMA_SetConfig+0x23c>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d04a      	beq.n	8006db6 <DMA_SetConfig+0x10a>
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a71      	ldr	r2, [pc, #452]	@ (8006eec <DMA_SetConfig+0x240>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d045      	beq.n	8006db6 <DMA_SetConfig+0x10a>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a70      	ldr	r2, [pc, #448]	@ (8006ef0 <DMA_SetConfig+0x244>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d040      	beq.n	8006db6 <DMA_SetConfig+0x10a>
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a6e      	ldr	r2, [pc, #440]	@ (8006ef4 <DMA_SetConfig+0x248>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d03b      	beq.n	8006db6 <DMA_SetConfig+0x10a>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a6d      	ldr	r2, [pc, #436]	@ (8006ef8 <DMA_SetConfig+0x24c>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d036      	beq.n	8006db6 <DMA_SetConfig+0x10a>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a6b      	ldr	r2, [pc, #428]	@ (8006efc <DMA_SetConfig+0x250>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d031      	beq.n	8006db6 <DMA_SetConfig+0x10a>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a6a      	ldr	r2, [pc, #424]	@ (8006f00 <DMA_SetConfig+0x254>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d02c      	beq.n	8006db6 <DMA_SetConfig+0x10a>
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a68      	ldr	r2, [pc, #416]	@ (8006f04 <DMA_SetConfig+0x258>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d027      	beq.n	8006db6 <DMA_SetConfig+0x10a>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a67      	ldr	r2, [pc, #412]	@ (8006f08 <DMA_SetConfig+0x25c>)
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	d022      	beq.n	8006db6 <DMA_SetConfig+0x10a>
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4a65      	ldr	r2, [pc, #404]	@ (8006f0c <DMA_SetConfig+0x260>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d01d      	beq.n	8006db6 <DMA_SetConfig+0x10a>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a64      	ldr	r2, [pc, #400]	@ (8006f10 <DMA_SetConfig+0x264>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d018      	beq.n	8006db6 <DMA_SetConfig+0x10a>
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4a62      	ldr	r2, [pc, #392]	@ (8006f14 <DMA_SetConfig+0x268>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d013      	beq.n	8006db6 <DMA_SetConfig+0x10a>
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a61      	ldr	r2, [pc, #388]	@ (8006f18 <DMA_SetConfig+0x26c>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d00e      	beq.n	8006db6 <DMA_SetConfig+0x10a>
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a5f      	ldr	r2, [pc, #380]	@ (8006f1c <DMA_SetConfig+0x270>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d009      	beq.n	8006db6 <DMA_SetConfig+0x10a>
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a5e      	ldr	r2, [pc, #376]	@ (8006f20 <DMA_SetConfig+0x274>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d004      	beq.n	8006db6 <DMA_SetConfig+0x10a>
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a5c      	ldr	r2, [pc, #368]	@ (8006f24 <DMA_SetConfig+0x278>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d101      	bne.n	8006dba <DMA_SetConfig+0x10e>
 8006db6:	2301      	movs	r3, #1
 8006db8:	e000      	b.n	8006dbc <DMA_SetConfig+0x110>
 8006dba:	2300      	movs	r3, #0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00d      	beq.n	8006ddc <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006dc8:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d004      	beq.n	8006ddc <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dd6:	68fa      	ldr	r2, [r7, #12]
 8006dd8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006dda:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a39      	ldr	r2, [pc, #228]	@ (8006ec8 <DMA_SetConfig+0x21c>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d04a      	beq.n	8006e7c <DMA_SetConfig+0x1d0>
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a38      	ldr	r2, [pc, #224]	@ (8006ecc <DMA_SetConfig+0x220>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d045      	beq.n	8006e7c <DMA_SetConfig+0x1d0>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a36      	ldr	r2, [pc, #216]	@ (8006ed0 <DMA_SetConfig+0x224>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d040      	beq.n	8006e7c <DMA_SetConfig+0x1d0>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a35      	ldr	r2, [pc, #212]	@ (8006ed4 <DMA_SetConfig+0x228>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d03b      	beq.n	8006e7c <DMA_SetConfig+0x1d0>
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a33      	ldr	r2, [pc, #204]	@ (8006ed8 <DMA_SetConfig+0x22c>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d036      	beq.n	8006e7c <DMA_SetConfig+0x1d0>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a32      	ldr	r2, [pc, #200]	@ (8006edc <DMA_SetConfig+0x230>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d031      	beq.n	8006e7c <DMA_SetConfig+0x1d0>
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a30      	ldr	r2, [pc, #192]	@ (8006ee0 <DMA_SetConfig+0x234>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d02c      	beq.n	8006e7c <DMA_SetConfig+0x1d0>
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a2f      	ldr	r2, [pc, #188]	@ (8006ee4 <DMA_SetConfig+0x238>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d027      	beq.n	8006e7c <DMA_SetConfig+0x1d0>
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a2d      	ldr	r2, [pc, #180]	@ (8006ee8 <DMA_SetConfig+0x23c>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d022      	beq.n	8006e7c <DMA_SetConfig+0x1d0>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a2c      	ldr	r2, [pc, #176]	@ (8006eec <DMA_SetConfig+0x240>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d01d      	beq.n	8006e7c <DMA_SetConfig+0x1d0>
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a2a      	ldr	r2, [pc, #168]	@ (8006ef0 <DMA_SetConfig+0x244>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d018      	beq.n	8006e7c <DMA_SetConfig+0x1d0>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a29      	ldr	r2, [pc, #164]	@ (8006ef4 <DMA_SetConfig+0x248>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d013      	beq.n	8006e7c <DMA_SetConfig+0x1d0>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a27      	ldr	r2, [pc, #156]	@ (8006ef8 <DMA_SetConfig+0x24c>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d00e      	beq.n	8006e7c <DMA_SetConfig+0x1d0>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a26      	ldr	r2, [pc, #152]	@ (8006efc <DMA_SetConfig+0x250>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d009      	beq.n	8006e7c <DMA_SetConfig+0x1d0>
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a24      	ldr	r2, [pc, #144]	@ (8006f00 <DMA_SetConfig+0x254>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d004      	beq.n	8006e7c <DMA_SetConfig+0x1d0>
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a23      	ldr	r2, [pc, #140]	@ (8006f04 <DMA_SetConfig+0x258>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d101      	bne.n	8006e80 <DMA_SetConfig+0x1d4>
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	e000      	b.n	8006e82 <DMA_SetConfig+0x1d6>
 8006e80:	2300      	movs	r3, #0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d059      	beq.n	8006f3a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e8a:	f003 031f 	and.w	r3, r3, #31
 8006e8e:	223f      	movs	r2, #63	@ 0x3f
 8006e90:	409a      	lsls	r2, r3
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006ea4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	683a      	ldr	r2, [r7, #0]
 8006eac:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	2b40      	cmp	r3, #64	@ 0x40
 8006eb4:	d138      	bne.n	8006f28 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	68ba      	ldr	r2, [r7, #8]
 8006ec4:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006ec6:	e0ae      	b.n	8007026 <DMA_SetConfig+0x37a>
 8006ec8:	40020010 	.word	0x40020010
 8006ecc:	40020028 	.word	0x40020028
 8006ed0:	40020040 	.word	0x40020040
 8006ed4:	40020058 	.word	0x40020058
 8006ed8:	40020070 	.word	0x40020070
 8006edc:	40020088 	.word	0x40020088
 8006ee0:	400200a0 	.word	0x400200a0
 8006ee4:	400200b8 	.word	0x400200b8
 8006ee8:	40020410 	.word	0x40020410
 8006eec:	40020428 	.word	0x40020428
 8006ef0:	40020440 	.word	0x40020440
 8006ef4:	40020458 	.word	0x40020458
 8006ef8:	40020470 	.word	0x40020470
 8006efc:	40020488 	.word	0x40020488
 8006f00:	400204a0 	.word	0x400204a0
 8006f04:	400204b8 	.word	0x400204b8
 8006f08:	58025408 	.word	0x58025408
 8006f0c:	5802541c 	.word	0x5802541c
 8006f10:	58025430 	.word	0x58025430
 8006f14:	58025444 	.word	0x58025444
 8006f18:	58025458 	.word	0x58025458
 8006f1c:	5802546c 	.word	0x5802546c
 8006f20:	58025480 	.word	0x58025480
 8006f24:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68ba      	ldr	r2, [r7, #8]
 8006f2e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	687a      	ldr	r2, [r7, #4]
 8006f36:	60da      	str	r2, [r3, #12]
}
 8006f38:	e075      	b.n	8007026 <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a3d      	ldr	r2, [pc, #244]	@ (8007034 <DMA_SetConfig+0x388>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d04a      	beq.n	8006fda <DMA_SetConfig+0x32e>
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a3b      	ldr	r2, [pc, #236]	@ (8007038 <DMA_SetConfig+0x38c>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d045      	beq.n	8006fda <DMA_SetConfig+0x32e>
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a3a      	ldr	r2, [pc, #232]	@ (800703c <DMA_SetConfig+0x390>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d040      	beq.n	8006fda <DMA_SetConfig+0x32e>
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a38      	ldr	r2, [pc, #224]	@ (8007040 <DMA_SetConfig+0x394>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d03b      	beq.n	8006fda <DMA_SetConfig+0x32e>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a37      	ldr	r2, [pc, #220]	@ (8007044 <DMA_SetConfig+0x398>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d036      	beq.n	8006fda <DMA_SetConfig+0x32e>
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a35      	ldr	r2, [pc, #212]	@ (8007048 <DMA_SetConfig+0x39c>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d031      	beq.n	8006fda <DMA_SetConfig+0x32e>
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a34      	ldr	r2, [pc, #208]	@ (800704c <DMA_SetConfig+0x3a0>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d02c      	beq.n	8006fda <DMA_SetConfig+0x32e>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a32      	ldr	r2, [pc, #200]	@ (8007050 <DMA_SetConfig+0x3a4>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d027      	beq.n	8006fda <DMA_SetConfig+0x32e>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a31      	ldr	r2, [pc, #196]	@ (8007054 <DMA_SetConfig+0x3a8>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d022      	beq.n	8006fda <DMA_SetConfig+0x32e>
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a2f      	ldr	r2, [pc, #188]	@ (8007058 <DMA_SetConfig+0x3ac>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d01d      	beq.n	8006fda <DMA_SetConfig+0x32e>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a2e      	ldr	r2, [pc, #184]	@ (800705c <DMA_SetConfig+0x3b0>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d018      	beq.n	8006fda <DMA_SetConfig+0x32e>
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a2c      	ldr	r2, [pc, #176]	@ (8007060 <DMA_SetConfig+0x3b4>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d013      	beq.n	8006fda <DMA_SetConfig+0x32e>
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a2b      	ldr	r2, [pc, #172]	@ (8007064 <DMA_SetConfig+0x3b8>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d00e      	beq.n	8006fda <DMA_SetConfig+0x32e>
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a29      	ldr	r2, [pc, #164]	@ (8007068 <DMA_SetConfig+0x3bc>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d009      	beq.n	8006fda <DMA_SetConfig+0x32e>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a28      	ldr	r2, [pc, #160]	@ (800706c <DMA_SetConfig+0x3c0>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d004      	beq.n	8006fda <DMA_SetConfig+0x32e>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a26      	ldr	r2, [pc, #152]	@ (8007070 <DMA_SetConfig+0x3c4>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d101      	bne.n	8006fde <DMA_SetConfig+0x332>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e000      	b.n	8006fe0 <DMA_SetConfig+0x334>
 8006fde:	2300      	movs	r3, #0
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d020      	beq.n	8007026 <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fe8:	f003 031f 	and.w	r3, r3, #31
 8006fec:	2201      	movs	r2, #1
 8006fee:	409a      	lsls	r2, r3
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	683a      	ldr	r2, [r7, #0]
 8006ffa:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	2b40      	cmp	r3, #64	@ 0x40
 8007002:	d108      	bne.n	8007016 <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	60da      	str	r2, [r3, #12]
}
 8007014:	e007      	b.n	8007026 <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	68ba      	ldr	r2, [r7, #8]
 800701c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	60da      	str	r2, [r3, #12]
}
 8007026:	bf00      	nop
 8007028:	371c      	adds	r7, #28
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	48022c08 	.word	0x48022c08
 8007038:	48022c1c 	.word	0x48022c1c
 800703c:	48022c30 	.word	0x48022c30
 8007040:	48022c44 	.word	0x48022c44
 8007044:	48022c58 	.word	0x48022c58
 8007048:	48022c6c 	.word	0x48022c6c
 800704c:	48022c80 	.word	0x48022c80
 8007050:	48022c94 	.word	0x48022c94
 8007054:	58025408 	.word	0x58025408
 8007058:	5802541c 	.word	0x5802541c
 800705c:	58025430 	.word	0x58025430
 8007060:	58025444 	.word	0x58025444
 8007064:	58025458 	.word	0x58025458
 8007068:	5802546c 	.word	0x5802546c
 800706c:	58025480 	.word	0x58025480
 8007070:	58025494 	.word	0x58025494

08007074 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a42      	ldr	r2, [pc, #264]	@ (800718c <DMA_CalcBaseAndBitshift+0x118>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d04a      	beq.n	800711c <DMA_CalcBaseAndBitshift+0xa8>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a41      	ldr	r2, [pc, #260]	@ (8007190 <DMA_CalcBaseAndBitshift+0x11c>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d045      	beq.n	800711c <DMA_CalcBaseAndBitshift+0xa8>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4a3f      	ldr	r2, [pc, #252]	@ (8007194 <DMA_CalcBaseAndBitshift+0x120>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d040      	beq.n	800711c <DMA_CalcBaseAndBitshift+0xa8>
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a3e      	ldr	r2, [pc, #248]	@ (8007198 <DMA_CalcBaseAndBitshift+0x124>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d03b      	beq.n	800711c <DMA_CalcBaseAndBitshift+0xa8>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a3c      	ldr	r2, [pc, #240]	@ (800719c <DMA_CalcBaseAndBitshift+0x128>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d036      	beq.n	800711c <DMA_CalcBaseAndBitshift+0xa8>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	4a3b      	ldr	r2, [pc, #236]	@ (80071a0 <DMA_CalcBaseAndBitshift+0x12c>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d031      	beq.n	800711c <DMA_CalcBaseAndBitshift+0xa8>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a39      	ldr	r2, [pc, #228]	@ (80071a4 <DMA_CalcBaseAndBitshift+0x130>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d02c      	beq.n	800711c <DMA_CalcBaseAndBitshift+0xa8>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a38      	ldr	r2, [pc, #224]	@ (80071a8 <DMA_CalcBaseAndBitshift+0x134>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d027      	beq.n	800711c <DMA_CalcBaseAndBitshift+0xa8>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a36      	ldr	r2, [pc, #216]	@ (80071ac <DMA_CalcBaseAndBitshift+0x138>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d022      	beq.n	800711c <DMA_CalcBaseAndBitshift+0xa8>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a35      	ldr	r2, [pc, #212]	@ (80071b0 <DMA_CalcBaseAndBitshift+0x13c>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d01d      	beq.n	800711c <DMA_CalcBaseAndBitshift+0xa8>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a33      	ldr	r2, [pc, #204]	@ (80071b4 <DMA_CalcBaseAndBitshift+0x140>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d018      	beq.n	800711c <DMA_CalcBaseAndBitshift+0xa8>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a32      	ldr	r2, [pc, #200]	@ (80071b8 <DMA_CalcBaseAndBitshift+0x144>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d013      	beq.n	800711c <DMA_CalcBaseAndBitshift+0xa8>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a30      	ldr	r2, [pc, #192]	@ (80071bc <DMA_CalcBaseAndBitshift+0x148>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d00e      	beq.n	800711c <DMA_CalcBaseAndBitshift+0xa8>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a2f      	ldr	r2, [pc, #188]	@ (80071c0 <DMA_CalcBaseAndBitshift+0x14c>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d009      	beq.n	800711c <DMA_CalcBaseAndBitshift+0xa8>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	4a2d      	ldr	r2, [pc, #180]	@ (80071c4 <DMA_CalcBaseAndBitshift+0x150>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d004      	beq.n	800711c <DMA_CalcBaseAndBitshift+0xa8>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4a2c      	ldr	r2, [pc, #176]	@ (80071c8 <DMA_CalcBaseAndBitshift+0x154>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d101      	bne.n	8007120 <DMA_CalcBaseAndBitshift+0xac>
 800711c:	2301      	movs	r3, #1
 800711e:	e000      	b.n	8007122 <DMA_CalcBaseAndBitshift+0xae>
 8007120:	2300      	movs	r3, #0
 8007122:	2b00      	cmp	r3, #0
 8007124:	d024      	beq.n	8007170 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	b2db      	uxtb	r3, r3
 800712c:	3b10      	subs	r3, #16
 800712e:	4a27      	ldr	r2, [pc, #156]	@ (80071cc <DMA_CalcBaseAndBitshift+0x158>)
 8007130:	fba2 2303 	umull	r2, r3, r2, r3
 8007134:	091b      	lsrs	r3, r3, #4
 8007136:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f003 0307 	and.w	r3, r3, #7
 800713e:	4a24      	ldr	r2, [pc, #144]	@ (80071d0 <DMA_CalcBaseAndBitshift+0x15c>)
 8007140:	5cd3      	ldrb	r3, [r2, r3]
 8007142:	461a      	mov	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2b03      	cmp	r3, #3
 800714c:	d908      	bls.n	8007160 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	461a      	mov	r2, r3
 8007154:	4b1f      	ldr	r3, [pc, #124]	@ (80071d4 <DMA_CalcBaseAndBitshift+0x160>)
 8007156:	4013      	ands	r3, r2
 8007158:	1d1a      	adds	r2, r3, #4
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	659a      	str	r2, [r3, #88]	@ 0x58
 800715e:	e00d      	b.n	800717c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	461a      	mov	r2, r3
 8007166:	4b1b      	ldr	r3, [pc, #108]	@ (80071d4 <DMA_CalcBaseAndBitshift+0x160>)
 8007168:	4013      	ands	r3, r2
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	6593      	str	r3, [r2, #88]	@ 0x58
 800716e:	e005      	b.n	800717c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007180:	4618      	mov	r0, r3
 8007182:	3714      	adds	r7, #20
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr
 800718c:	40020010 	.word	0x40020010
 8007190:	40020028 	.word	0x40020028
 8007194:	40020040 	.word	0x40020040
 8007198:	40020058 	.word	0x40020058
 800719c:	40020070 	.word	0x40020070
 80071a0:	40020088 	.word	0x40020088
 80071a4:	400200a0 	.word	0x400200a0
 80071a8:	400200b8 	.word	0x400200b8
 80071ac:	40020410 	.word	0x40020410
 80071b0:	40020428 	.word	0x40020428
 80071b4:	40020440 	.word	0x40020440
 80071b8:	40020458 	.word	0x40020458
 80071bc:	40020470 	.word	0x40020470
 80071c0:	40020488 	.word	0x40020488
 80071c4:	400204a0 	.word	0x400204a0
 80071c8:	400204b8 	.word	0x400204b8
 80071cc:	aaaaaaab 	.word	0xaaaaaaab
 80071d0:	08013720 	.word	0x08013720
 80071d4:	fffffc00 	.word	0xfffffc00

080071d8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80071d8:	b480      	push	{r7}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071e0:	2300      	movs	r3, #0
 80071e2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d120      	bne.n	800722e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071f0:	2b03      	cmp	r3, #3
 80071f2:	d858      	bhi.n	80072a6 <DMA_CheckFifoParam+0xce>
 80071f4:	a201      	add	r2, pc, #4	@ (adr r2, 80071fc <DMA_CheckFifoParam+0x24>)
 80071f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071fa:	bf00      	nop
 80071fc:	0800720d 	.word	0x0800720d
 8007200:	0800721f 	.word	0x0800721f
 8007204:	0800720d 	.word	0x0800720d
 8007208:	080072a7 	.word	0x080072a7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007210:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007214:	2b00      	cmp	r3, #0
 8007216:	d048      	beq.n	80072aa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800721c:	e045      	b.n	80072aa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007222:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007226:	d142      	bne.n	80072ae <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800722c:	e03f      	b.n	80072ae <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	699b      	ldr	r3, [r3, #24]
 8007232:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007236:	d123      	bne.n	8007280 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800723c:	2b03      	cmp	r3, #3
 800723e:	d838      	bhi.n	80072b2 <DMA_CheckFifoParam+0xda>
 8007240:	a201      	add	r2, pc, #4	@ (adr r2, 8007248 <DMA_CheckFifoParam+0x70>)
 8007242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007246:	bf00      	nop
 8007248:	08007259 	.word	0x08007259
 800724c:	0800725f 	.word	0x0800725f
 8007250:	08007259 	.word	0x08007259
 8007254:	08007271 	.word	0x08007271
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	73fb      	strb	r3, [r7, #15]
        break;
 800725c:	e030      	b.n	80072c0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007262:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007266:	2b00      	cmp	r3, #0
 8007268:	d025      	beq.n	80072b6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800726e:	e022      	b.n	80072b6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007274:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007278:	d11f      	bne.n	80072ba <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800727e:	e01c      	b.n	80072ba <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007284:	2b02      	cmp	r3, #2
 8007286:	d902      	bls.n	800728e <DMA_CheckFifoParam+0xb6>
 8007288:	2b03      	cmp	r3, #3
 800728a:	d003      	beq.n	8007294 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800728c:	e018      	b.n	80072c0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	73fb      	strb	r3, [r7, #15]
        break;
 8007292:	e015      	b.n	80072c0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007298:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800729c:	2b00      	cmp	r3, #0
 800729e:	d00e      	beq.n	80072be <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	73fb      	strb	r3, [r7, #15]
    break;
 80072a4:	e00b      	b.n	80072be <DMA_CheckFifoParam+0xe6>
        break;
 80072a6:	bf00      	nop
 80072a8:	e00a      	b.n	80072c0 <DMA_CheckFifoParam+0xe8>
        break;
 80072aa:	bf00      	nop
 80072ac:	e008      	b.n	80072c0 <DMA_CheckFifoParam+0xe8>
        break;
 80072ae:	bf00      	nop
 80072b0:	e006      	b.n	80072c0 <DMA_CheckFifoParam+0xe8>
        break;
 80072b2:	bf00      	nop
 80072b4:	e004      	b.n	80072c0 <DMA_CheckFifoParam+0xe8>
        break;
 80072b6:	bf00      	nop
 80072b8:	e002      	b.n	80072c0 <DMA_CheckFifoParam+0xe8>
        break;
 80072ba:	bf00      	nop
 80072bc:	e000      	b.n	80072c0 <DMA_CheckFifoParam+0xe8>
    break;
 80072be:	bf00      	nop
    }
  }

  return status;
 80072c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c2:	4618      	mov	r0, r3
 80072c4:	3714      	adds	r7, #20
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop

080072d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a38      	ldr	r2, [pc, #224]	@ (80073c4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d022      	beq.n	800732e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a36      	ldr	r2, [pc, #216]	@ (80073c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d01d      	beq.n	800732e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a35      	ldr	r2, [pc, #212]	@ (80073cc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d018      	beq.n	800732e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a33      	ldr	r2, [pc, #204]	@ (80073d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d013      	beq.n	800732e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a32      	ldr	r2, [pc, #200]	@ (80073d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d00e      	beq.n	800732e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a30      	ldr	r2, [pc, #192]	@ (80073d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d009      	beq.n	800732e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a2f      	ldr	r2, [pc, #188]	@ (80073dc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d004      	beq.n	800732e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a2d      	ldr	r2, [pc, #180]	@ (80073e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d101      	bne.n	8007332 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800732e:	2301      	movs	r3, #1
 8007330:	e000      	b.n	8007334 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007332:	2300      	movs	r3, #0
 8007334:	2b00      	cmp	r3, #0
 8007336:	d01a      	beq.n	800736e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	b2db      	uxtb	r3, r3
 800733e:	3b08      	subs	r3, #8
 8007340:	4a28      	ldr	r2, [pc, #160]	@ (80073e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007342:	fba2 2303 	umull	r2, r3, r2, r3
 8007346:	091b      	lsrs	r3, r3, #4
 8007348:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	4b26      	ldr	r3, [pc, #152]	@ (80073e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800734e:	4413      	add	r3, r2
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	461a      	mov	r2, r3
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a24      	ldr	r2, [pc, #144]	@ (80073ec <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800735c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f003 031f 	and.w	r3, r3, #31
 8007364:	2201      	movs	r2, #1
 8007366:	409a      	lsls	r2, r3
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800736c:	e024      	b.n	80073b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	b2db      	uxtb	r3, r3
 8007374:	3b10      	subs	r3, #16
 8007376:	4a1e      	ldr	r2, [pc, #120]	@ (80073f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007378:	fba2 2303 	umull	r2, r3, r2, r3
 800737c:	091b      	lsrs	r3, r3, #4
 800737e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	4a1c      	ldr	r2, [pc, #112]	@ (80073f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d806      	bhi.n	8007396 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	4a1b      	ldr	r2, [pc, #108]	@ (80073f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d902      	bls.n	8007396 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	3308      	adds	r3, #8
 8007394:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	4b18      	ldr	r3, [pc, #96]	@ (80073fc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800739a:	4413      	add	r3, r2
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	461a      	mov	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	4a16      	ldr	r2, [pc, #88]	@ (8007400 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80073a8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f003 031f 	and.w	r3, r3, #31
 80073b0:	2201      	movs	r2, #1
 80073b2:	409a      	lsls	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80073b8:	bf00      	nop
 80073ba:	3714      	adds	r7, #20
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr
 80073c4:	58025408 	.word	0x58025408
 80073c8:	5802541c 	.word	0x5802541c
 80073cc:	58025430 	.word	0x58025430
 80073d0:	58025444 	.word	0x58025444
 80073d4:	58025458 	.word	0x58025458
 80073d8:	5802546c 	.word	0x5802546c
 80073dc:	58025480 	.word	0x58025480
 80073e0:	58025494 	.word	0x58025494
 80073e4:	cccccccd 	.word	0xcccccccd
 80073e8:	16009600 	.word	0x16009600
 80073ec:	58025880 	.word	0x58025880
 80073f0:	aaaaaaab 	.word	0xaaaaaaab
 80073f4:	400204b8 	.word	0x400204b8
 80073f8:	4002040f 	.word	0x4002040f
 80073fc:	10008200 	.word	0x10008200
 8007400:	40020880 	.word	0x40020880

08007404 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	b2db      	uxtb	r3, r3
 8007412:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d04a      	beq.n	80074b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2b08      	cmp	r3, #8
 800741e:	d847      	bhi.n	80074b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	4a25      	ldr	r2, [pc, #148]	@ (80074bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d022      	beq.n	8007470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a24      	ldr	r2, [pc, #144]	@ (80074c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d01d      	beq.n	8007470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4a22      	ldr	r2, [pc, #136]	@ (80074c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d018      	beq.n	8007470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	4a21      	ldr	r2, [pc, #132]	@ (80074c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007444:	4293      	cmp	r3, r2
 8007446:	d013      	beq.n	8007470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a1f      	ldr	r2, [pc, #124]	@ (80074cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d00e      	beq.n	8007470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a1e      	ldr	r2, [pc, #120]	@ (80074d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d009      	beq.n	8007470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a1c      	ldr	r2, [pc, #112]	@ (80074d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d004      	beq.n	8007470 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a1b      	ldr	r2, [pc, #108]	@ (80074d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d101      	bne.n	8007474 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007470:	2301      	movs	r3, #1
 8007472:	e000      	b.n	8007476 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007474:	2300      	movs	r3, #0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d00a      	beq.n	8007490 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800747a:	68fa      	ldr	r2, [r7, #12]
 800747c:	4b17      	ldr	r3, [pc, #92]	@ (80074dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800747e:	4413      	add	r3, r2
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	461a      	mov	r2, r3
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	4a15      	ldr	r2, [pc, #84]	@ (80074e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800748c:	671a      	str	r2, [r3, #112]	@ 0x70
 800748e:	e009      	b.n	80074a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007490:	68fa      	ldr	r2, [r7, #12]
 8007492:	4b14      	ldr	r3, [pc, #80]	@ (80074e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007494:	4413      	add	r3, r2
 8007496:	009b      	lsls	r3, r3, #2
 8007498:	461a      	mov	r2, r3
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4a11      	ldr	r2, [pc, #68]	@ (80074e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80074a2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	3b01      	subs	r3, #1
 80074a8:	2201      	movs	r2, #1
 80074aa:	409a      	lsls	r2, r3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80074b0:	bf00      	nop
 80074b2:	3714      	adds	r7, #20
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr
 80074bc:	58025408 	.word	0x58025408
 80074c0:	5802541c 	.word	0x5802541c
 80074c4:	58025430 	.word	0x58025430
 80074c8:	58025444 	.word	0x58025444
 80074cc:	58025458 	.word	0x58025458
 80074d0:	5802546c 	.word	0x5802546c
 80074d4:	58025480 	.word	0x58025480
 80074d8:	58025494 	.word	0x58025494
 80074dc:	1600963f 	.word	0x1600963f
 80074e0:	58025940 	.word	0x58025940
 80074e4:	1000823f 	.word	0x1000823f
 80074e8:	40020940 	.word	0x40020940

080074ec <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b086      	sub	sp, #24
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
 80074f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074fa:	2300      	movs	r3, #0
 80074fc:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	689b      	ldr	r3, [r3, #8]
 8007502:	2b80      	cmp	r3, #128	@ 0x80
 8007504:	d105      	bne.n	8007512 <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800750c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e315      	b.n	8007b3e <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007518:	2b01      	cmp	r3, #1
 800751a:	d101      	bne.n	8007520 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 800751c:	2302      	movs	r3, #2
 800751e:	e30e      	b.n	8007b3e <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2201      	movs	r2, #1
 8007524:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800752e:	b2db      	uxtb	r3, r3
 8007530:	2b01      	cmp	r3, #1
 8007532:	f040 82fd 	bne.w	8007b30 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2202      	movs	r2, #2
 800753a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a82      	ldr	r2, [pc, #520]	@ (8007754 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d04a      	beq.n	80075e4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a81      	ldr	r2, [pc, #516]	@ (8007758 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d045      	beq.n	80075e4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a7f      	ldr	r2, [pc, #508]	@ (800775c <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d040      	beq.n	80075e4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a7e      	ldr	r2, [pc, #504]	@ (8007760 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d03b      	beq.n	80075e4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a7c      	ldr	r2, [pc, #496]	@ (8007764 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d036      	beq.n	80075e4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a7b      	ldr	r2, [pc, #492]	@ (8007768 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d031      	beq.n	80075e4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a79      	ldr	r2, [pc, #484]	@ (800776c <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d02c      	beq.n	80075e4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a78      	ldr	r2, [pc, #480]	@ (8007770 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d027      	beq.n	80075e4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a76      	ldr	r2, [pc, #472]	@ (8007774 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d022      	beq.n	80075e4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a75      	ldr	r2, [pc, #468]	@ (8007778 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d01d      	beq.n	80075e4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a73      	ldr	r2, [pc, #460]	@ (800777c <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d018      	beq.n	80075e4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a72      	ldr	r2, [pc, #456]	@ (8007780 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d013      	beq.n	80075e4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a70      	ldr	r2, [pc, #448]	@ (8007784 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d00e      	beq.n	80075e4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a6f      	ldr	r2, [pc, #444]	@ (8007788 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d009      	beq.n	80075e4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a6d      	ldr	r2, [pc, #436]	@ (800778c <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d004      	beq.n	80075e4 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a6c      	ldr	r2, [pc, #432]	@ (8007790 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d101      	bne.n	80075e8 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 80075e4:	2301      	movs	r3, #1
 80075e6:	e000      	b.n	80075ea <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 80075e8:	2300      	movs	r3, #0
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d018      	beq.n	8007620 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80075fc:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800760a:	3308      	adds	r3, #8
 800760c:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007612:	f003 031f 	and.w	r3, r3, #31
 8007616:	223f      	movs	r2, #63	@ 0x3f
 8007618:	409a      	lsls	r2, r3
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	601a      	str	r2, [r3, #0]
 800761e:	e018      	b.n	8007652 <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	6819      	ldr	r1, [r3, #0]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	f248 0320 	movw	r3, #32800	@ 0x8020
 800762e:	430b      	orrs	r3, r1
 8007630:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	683a      	ldr	r2, [r7, #0]
 8007638:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800763e:	3304      	adds	r3, #4
 8007640:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007646:	f003 031f 	and.w	r3, r3, #31
 800764a:	2201      	movs	r2, #1
 800764c:	409a      	lsls	r2, r3
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007652:	6a3b      	ldr	r3, [r7, #32]
 8007654:	687a      	ldr	r2, [r7, #4]
 8007656:	68b9      	ldr	r1, [r7, #8]
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f000 fb41 	bl	8007ce0 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a3c      	ldr	r2, [pc, #240]	@ (8007754 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d072      	beq.n	800774e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a3a      	ldr	r2, [pc, #232]	@ (8007758 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d06d      	beq.n	800774e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a39      	ldr	r2, [pc, #228]	@ (800775c <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d068      	beq.n	800774e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a37      	ldr	r2, [pc, #220]	@ (8007760 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d063      	beq.n	800774e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a36      	ldr	r2, [pc, #216]	@ (8007764 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d05e      	beq.n	800774e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a34      	ldr	r2, [pc, #208]	@ (8007768 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d059      	beq.n	800774e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4a33      	ldr	r2, [pc, #204]	@ (800776c <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d054      	beq.n	800774e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	4a31      	ldr	r2, [pc, #196]	@ (8007770 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d04f      	beq.n	800774e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a30      	ldr	r2, [pc, #192]	@ (8007774 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d04a      	beq.n	800774e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	4a2e      	ldr	r2, [pc, #184]	@ (8007778 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d045      	beq.n	800774e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a2d      	ldr	r2, [pc, #180]	@ (800777c <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d040      	beq.n	800774e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a2b      	ldr	r2, [pc, #172]	@ (8007780 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d03b      	beq.n	800774e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a2a      	ldr	r2, [pc, #168]	@ (8007784 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d036      	beq.n	800774e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a28      	ldr	r2, [pc, #160]	@ (8007788 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d031      	beq.n	800774e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a27      	ldr	r2, [pc, #156]	@ (800778c <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d02c      	beq.n	800774e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a25      	ldr	r2, [pc, #148]	@ (8007790 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d027      	beq.n	800774e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a24      	ldr	r2, [pc, #144]	@ (8007794 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d022      	beq.n	800774e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a22      	ldr	r2, [pc, #136]	@ (8007798 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d01d      	beq.n	800774e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a21      	ldr	r2, [pc, #132]	@ (800779c <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d018      	beq.n	800774e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a1f      	ldr	r2, [pc, #124]	@ (80077a0 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d013      	beq.n	800774e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a1e      	ldr	r2, [pc, #120]	@ (80077a4 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d00e      	beq.n	800774e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a1c      	ldr	r2, [pc, #112]	@ (80077a8 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d009      	beq.n	800774e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a1b      	ldr	r2, [pc, #108]	@ (80077ac <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d004      	beq.n	800774e <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a19      	ldr	r2, [pc, #100]	@ (80077b0 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d132      	bne.n	80077b4 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 800774e:	2301      	movs	r3, #1
 8007750:	e031      	b.n	80077b6 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 8007752:	bf00      	nop
 8007754:	40020010 	.word	0x40020010
 8007758:	40020028 	.word	0x40020028
 800775c:	40020040 	.word	0x40020040
 8007760:	40020058 	.word	0x40020058
 8007764:	40020070 	.word	0x40020070
 8007768:	40020088 	.word	0x40020088
 800776c:	400200a0 	.word	0x400200a0
 8007770:	400200b8 	.word	0x400200b8
 8007774:	40020410 	.word	0x40020410
 8007778:	40020428 	.word	0x40020428
 800777c:	40020440 	.word	0x40020440
 8007780:	40020458 	.word	0x40020458
 8007784:	40020470 	.word	0x40020470
 8007788:	40020488 	.word	0x40020488
 800778c:	400204a0 	.word	0x400204a0
 8007790:	400204b8 	.word	0x400204b8
 8007794:	58025408 	.word	0x58025408
 8007798:	5802541c 	.word	0x5802541c
 800779c:	58025430 	.word	0x58025430
 80077a0:	58025444 	.word	0x58025444
 80077a4:	58025458 	.word	0x58025458
 80077a8:	5802546c 	.word	0x5802546c
 80077ac:	58025480 	.word	0x58025480
 80077b0:	58025494 	.word	0x58025494
 80077b4:	2300      	movs	r3, #0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00d      	beq.n	80077d6 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077be:	68fa      	ldr	r2, [r7, #12]
 80077c0:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80077c2:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d004      	beq.n	80077d6 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80077d4:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a3b      	ldr	r2, [pc, #236]	@ (80078c8 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d04a      	beq.n	8007876 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a39      	ldr	r2, [pc, #228]	@ (80078cc <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d045      	beq.n	8007876 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a38      	ldr	r2, [pc, #224]	@ (80078d0 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d040      	beq.n	8007876 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a36      	ldr	r2, [pc, #216]	@ (80078d4 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d03b      	beq.n	8007876 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	4a35      	ldr	r2, [pc, #212]	@ (80078d8 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8007804:	4293      	cmp	r3, r2
 8007806:	d036      	beq.n	8007876 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a33      	ldr	r2, [pc, #204]	@ (80078dc <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d031      	beq.n	8007876 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a32      	ldr	r2, [pc, #200]	@ (80078e0 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d02c      	beq.n	8007876 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a30      	ldr	r2, [pc, #192]	@ (80078e4 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d027      	beq.n	8007876 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4a2f      	ldr	r2, [pc, #188]	@ (80078e8 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d022      	beq.n	8007876 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a2d      	ldr	r2, [pc, #180]	@ (80078ec <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d01d      	beq.n	8007876 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	4a2c      	ldr	r2, [pc, #176]	@ (80078f0 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d018      	beq.n	8007876 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4a2a      	ldr	r2, [pc, #168]	@ (80078f4 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d013      	beq.n	8007876 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a29      	ldr	r2, [pc, #164]	@ (80078f8 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d00e      	beq.n	8007876 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a27      	ldr	r2, [pc, #156]	@ (80078fc <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d009      	beq.n	8007876 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a26      	ldr	r2, [pc, #152]	@ (8007900 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d004      	beq.n	8007876 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a24      	ldr	r2, [pc, #144]	@ (8007904 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d101      	bne.n	800787a <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8007876:	2301      	movs	r3, #1
 8007878:	e000      	b.n	800787c <HAL_DMAEx_MultiBufferStart_IT+0x390>
 800787a:	2300      	movs	r3, #0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d043      	beq.n	8007908 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f023 021e 	bic.w	r2, r3, #30
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f042 0216 	orr.w	r2, r2, #22
 8007892:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	695a      	ldr	r2, [r3, #20]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80078a2:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d103      	bne.n	80078b4 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d043      	beq.n	800793c <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f042 0208 	orr.w	r2, r2, #8
 80078c2:	601a      	str	r2, [r3, #0]
 80078c4:	e03a      	b.n	800793c <HAL_DMAEx_MultiBufferStart_IT+0x450>
 80078c6:	bf00      	nop
 80078c8:	40020010 	.word	0x40020010
 80078cc:	40020028 	.word	0x40020028
 80078d0:	40020040 	.word	0x40020040
 80078d4:	40020058 	.word	0x40020058
 80078d8:	40020070 	.word	0x40020070
 80078dc:	40020088 	.word	0x40020088
 80078e0:	400200a0 	.word	0x400200a0
 80078e4:	400200b8 	.word	0x400200b8
 80078e8:	40020410 	.word	0x40020410
 80078ec:	40020428 	.word	0x40020428
 80078f0:	40020440 	.word	0x40020440
 80078f4:	40020458 	.word	0x40020458
 80078f8:	40020470 	.word	0x40020470
 80078fc:	40020488 	.word	0x40020488
 8007900:	400204a0 	.word	0x400204a0
 8007904:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f023 020e 	bic.w	r2, r3, #14
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f042 020a 	orr.w	r2, r2, #10
 800791a:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007920:	2b00      	cmp	r3, #0
 8007922:	d103      	bne.n	800792c <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007928:	2b00      	cmp	r3, #0
 800792a:	d007      	beq.n	800793c <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f042 0204 	orr.w	r2, r2, #4
 800793a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a81      	ldr	r2, [pc, #516]	@ (8007b48 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d072      	beq.n	8007a2c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a80      	ldr	r2, [pc, #512]	@ (8007b4c <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d06d      	beq.n	8007a2c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a7e      	ldr	r2, [pc, #504]	@ (8007b50 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d068      	beq.n	8007a2c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a7d      	ldr	r2, [pc, #500]	@ (8007b54 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d063      	beq.n	8007a2c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a7b      	ldr	r2, [pc, #492]	@ (8007b58 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d05e      	beq.n	8007a2c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a7a      	ldr	r2, [pc, #488]	@ (8007b5c <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d059      	beq.n	8007a2c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a78      	ldr	r2, [pc, #480]	@ (8007b60 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d054      	beq.n	8007a2c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a77      	ldr	r2, [pc, #476]	@ (8007b64 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d04f      	beq.n	8007a2c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a75      	ldr	r2, [pc, #468]	@ (8007b68 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8007992:	4293      	cmp	r3, r2
 8007994:	d04a      	beq.n	8007a2c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a74      	ldr	r2, [pc, #464]	@ (8007b6c <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d045      	beq.n	8007a2c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a72      	ldr	r2, [pc, #456]	@ (8007b70 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d040      	beq.n	8007a2c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a71      	ldr	r2, [pc, #452]	@ (8007b74 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d03b      	beq.n	8007a2c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a6f      	ldr	r2, [pc, #444]	@ (8007b78 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d036      	beq.n	8007a2c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a6e      	ldr	r2, [pc, #440]	@ (8007b7c <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d031      	beq.n	8007a2c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a6c      	ldr	r2, [pc, #432]	@ (8007b80 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d02c      	beq.n	8007a2c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a6b      	ldr	r2, [pc, #428]	@ (8007b84 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	d027      	beq.n	8007a2c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a69      	ldr	r2, [pc, #420]	@ (8007b88 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d022      	beq.n	8007a2c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a68      	ldr	r2, [pc, #416]	@ (8007b8c <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d01d      	beq.n	8007a2c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a66      	ldr	r2, [pc, #408]	@ (8007b90 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d018      	beq.n	8007a2c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a65      	ldr	r2, [pc, #404]	@ (8007b94 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d013      	beq.n	8007a2c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a63      	ldr	r2, [pc, #396]	@ (8007b98 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d00e      	beq.n	8007a2c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a62      	ldr	r2, [pc, #392]	@ (8007b9c <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d009      	beq.n	8007a2c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a60      	ldr	r2, [pc, #384]	@ (8007ba0 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d004      	beq.n	8007a2c <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a5f      	ldr	r2, [pc, #380]	@ (8007ba4 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d101      	bne.n	8007a30 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e000      	b.n	8007a32 <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8007a30:	2300      	movs	r3, #0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d01a      	beq.n	8007a6c <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d007      	beq.n	8007a54 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007a4e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007a52:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d007      	beq.n	8007a6c <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007a6a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a35      	ldr	r2, [pc, #212]	@ (8007b48 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d04a      	beq.n	8007b0c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a34      	ldr	r2, [pc, #208]	@ (8007b4c <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d045      	beq.n	8007b0c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a32      	ldr	r2, [pc, #200]	@ (8007b50 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d040      	beq.n	8007b0c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a31      	ldr	r2, [pc, #196]	@ (8007b54 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d03b      	beq.n	8007b0c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a2f      	ldr	r2, [pc, #188]	@ (8007b58 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d036      	beq.n	8007b0c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a2e      	ldr	r2, [pc, #184]	@ (8007b5c <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d031      	beq.n	8007b0c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a2c      	ldr	r2, [pc, #176]	@ (8007b60 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d02c      	beq.n	8007b0c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a2b      	ldr	r2, [pc, #172]	@ (8007b64 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d027      	beq.n	8007b0c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a29      	ldr	r2, [pc, #164]	@ (8007b68 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d022      	beq.n	8007b0c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a28      	ldr	r2, [pc, #160]	@ (8007b6c <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d01d      	beq.n	8007b0c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a26      	ldr	r2, [pc, #152]	@ (8007b70 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d018      	beq.n	8007b0c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a25      	ldr	r2, [pc, #148]	@ (8007b74 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d013      	beq.n	8007b0c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a23      	ldr	r2, [pc, #140]	@ (8007b78 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d00e      	beq.n	8007b0c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a22      	ldr	r2, [pc, #136]	@ (8007b7c <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d009      	beq.n	8007b0c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a20      	ldr	r2, [pc, #128]	@ (8007b80 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d004      	beq.n	8007b0c <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a1f      	ldr	r2, [pc, #124]	@ (8007b84 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d108      	bne.n	8007b1e <HAL_DMAEx_MultiBufferStart_IT+0x632>
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f042 0201 	orr.w	r2, r2, #1
 8007b1a:	601a      	str	r2, [r3, #0]
 8007b1c:	e00e      	b.n	8007b3c <HAL_DMAEx_MultiBufferStart_IT+0x650>
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f042 0201 	orr.w	r2, r2, #1
 8007b2c:	601a      	str	r2, [r3, #0]
 8007b2e:	e005      	b.n	8007b3c <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007b36:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3718      	adds	r7, #24
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop
 8007b48:	40020010 	.word	0x40020010
 8007b4c:	40020028 	.word	0x40020028
 8007b50:	40020040 	.word	0x40020040
 8007b54:	40020058 	.word	0x40020058
 8007b58:	40020070 	.word	0x40020070
 8007b5c:	40020088 	.word	0x40020088
 8007b60:	400200a0 	.word	0x400200a0
 8007b64:	400200b8 	.word	0x400200b8
 8007b68:	40020410 	.word	0x40020410
 8007b6c:	40020428 	.word	0x40020428
 8007b70:	40020440 	.word	0x40020440
 8007b74:	40020458 	.word	0x40020458
 8007b78:	40020470 	.word	0x40020470
 8007b7c:	40020488 	.word	0x40020488
 8007b80:	400204a0 	.word	0x400204a0
 8007b84:	400204b8 	.word	0x400204b8
 8007b88:	58025408 	.word	0x58025408
 8007b8c:	5802541c 	.word	0x5802541c
 8007b90:	58025430 	.word	0x58025430
 8007b94:	58025444 	.word	0x58025444
 8007b98:	58025458 	.word	0x58025458
 8007b9c:	5802546c 	.word	0x5802546c
 8007ba0:	58025480 	.word	0x58025480
 8007ba4:	58025494 	.word	0x58025494

08007ba8 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b085      	sub	sp, #20
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	4613      	mov	r3, r2
 8007bb4:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a39      	ldr	r2, [pc, #228]	@ (8007ca0 <HAL_DMAEx_ChangeMemory+0xf8>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d04a      	beq.n	8007c56 <HAL_DMAEx_ChangeMemory+0xae>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a37      	ldr	r2, [pc, #220]	@ (8007ca4 <HAL_DMAEx_ChangeMemory+0xfc>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d045      	beq.n	8007c56 <HAL_DMAEx_ChangeMemory+0xae>
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a36      	ldr	r2, [pc, #216]	@ (8007ca8 <HAL_DMAEx_ChangeMemory+0x100>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d040      	beq.n	8007c56 <HAL_DMAEx_ChangeMemory+0xae>
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a34      	ldr	r2, [pc, #208]	@ (8007cac <HAL_DMAEx_ChangeMemory+0x104>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d03b      	beq.n	8007c56 <HAL_DMAEx_ChangeMemory+0xae>
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a33      	ldr	r2, [pc, #204]	@ (8007cb0 <HAL_DMAEx_ChangeMemory+0x108>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d036      	beq.n	8007c56 <HAL_DMAEx_ChangeMemory+0xae>
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a31      	ldr	r2, [pc, #196]	@ (8007cb4 <HAL_DMAEx_ChangeMemory+0x10c>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d031      	beq.n	8007c56 <HAL_DMAEx_ChangeMemory+0xae>
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a30      	ldr	r2, [pc, #192]	@ (8007cb8 <HAL_DMAEx_ChangeMemory+0x110>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d02c      	beq.n	8007c56 <HAL_DMAEx_ChangeMemory+0xae>
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a2e      	ldr	r2, [pc, #184]	@ (8007cbc <HAL_DMAEx_ChangeMemory+0x114>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d027      	beq.n	8007c56 <HAL_DMAEx_ChangeMemory+0xae>
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a2d      	ldr	r2, [pc, #180]	@ (8007cc0 <HAL_DMAEx_ChangeMemory+0x118>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d022      	beq.n	8007c56 <HAL_DMAEx_ChangeMemory+0xae>
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a2b      	ldr	r2, [pc, #172]	@ (8007cc4 <HAL_DMAEx_ChangeMemory+0x11c>)
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d01d      	beq.n	8007c56 <HAL_DMAEx_ChangeMemory+0xae>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	4a2a      	ldr	r2, [pc, #168]	@ (8007cc8 <HAL_DMAEx_ChangeMemory+0x120>)
 8007c20:	4293      	cmp	r3, r2
 8007c22:	d018      	beq.n	8007c56 <HAL_DMAEx_ChangeMemory+0xae>
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4a28      	ldr	r2, [pc, #160]	@ (8007ccc <HAL_DMAEx_ChangeMemory+0x124>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d013      	beq.n	8007c56 <HAL_DMAEx_ChangeMemory+0xae>
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4a27      	ldr	r2, [pc, #156]	@ (8007cd0 <HAL_DMAEx_ChangeMemory+0x128>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d00e      	beq.n	8007c56 <HAL_DMAEx_ChangeMemory+0xae>
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a25      	ldr	r2, [pc, #148]	@ (8007cd4 <HAL_DMAEx_ChangeMemory+0x12c>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d009      	beq.n	8007c56 <HAL_DMAEx_ChangeMemory+0xae>
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a24      	ldr	r2, [pc, #144]	@ (8007cd8 <HAL_DMAEx_ChangeMemory+0x130>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d004      	beq.n	8007c56 <HAL_DMAEx_ChangeMemory+0xae>
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a22      	ldr	r2, [pc, #136]	@ (8007cdc <HAL_DMAEx_ChangeMemory+0x134>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d101      	bne.n	8007c5a <HAL_DMAEx_ChangeMemory+0xb2>
 8007c56:	2301      	movs	r3, #1
 8007c58:	e000      	b.n	8007c5c <HAL_DMAEx_ChangeMemory+0xb4>
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00c      	beq.n	8007c7a <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 8007c60:	79fb      	ldrb	r3, [r7, #7]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d104      	bne.n	8007c70 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	68ba      	ldr	r2, [r7, #8]
 8007c6c:	60da      	str	r2, [r3, #12]
 8007c6e:	e010      	b.n	8007c92 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68ba      	ldr	r2, [r7, #8]
 8007c76:	611a      	str	r2, [r3, #16]
 8007c78:	e00b      	b.n	8007c92 <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 8007c7a:	79fb      	ldrb	r3, [r7, #7]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d104      	bne.n	8007c8a <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	68ba      	ldr	r2, [r7, #8]
 8007c86:	60da      	str	r2, [r3, #12]
 8007c88:	e003      	b.n	8007c92 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	68ba      	ldr	r2, [r7, #8]
 8007c90:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 8007c92:	2300      	movs	r3, #0
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3714      	adds	r7, #20
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr
 8007ca0:	40020010 	.word	0x40020010
 8007ca4:	40020028 	.word	0x40020028
 8007ca8:	40020040 	.word	0x40020040
 8007cac:	40020058 	.word	0x40020058
 8007cb0:	40020070 	.word	0x40020070
 8007cb4:	40020088 	.word	0x40020088
 8007cb8:	400200a0 	.word	0x400200a0
 8007cbc:	400200b8 	.word	0x400200b8
 8007cc0:	40020410 	.word	0x40020410
 8007cc4:	40020428 	.word	0x40020428
 8007cc8:	40020440 	.word	0x40020440
 8007ccc:	40020458 	.word	0x40020458
 8007cd0:	40020470 	.word	0x40020470
 8007cd4:	40020488 	.word	0x40020488
 8007cd8:	400204a0 	.word	0x400204a0
 8007cdc:	400204b8 	.word	0x400204b8

08007ce0 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	607a      	str	r2, [r7, #4]
 8007cec:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a46      	ldr	r2, [pc, #280]	@ (8007e0c <DMA_MultiBufferSetConfig+0x12c>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d04a      	beq.n	8007d8e <DMA_MultiBufferSetConfig+0xae>
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a44      	ldr	r2, [pc, #272]	@ (8007e10 <DMA_MultiBufferSetConfig+0x130>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d045      	beq.n	8007d8e <DMA_MultiBufferSetConfig+0xae>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a43      	ldr	r2, [pc, #268]	@ (8007e14 <DMA_MultiBufferSetConfig+0x134>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d040      	beq.n	8007d8e <DMA_MultiBufferSetConfig+0xae>
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a41      	ldr	r2, [pc, #260]	@ (8007e18 <DMA_MultiBufferSetConfig+0x138>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d03b      	beq.n	8007d8e <DMA_MultiBufferSetConfig+0xae>
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a40      	ldr	r2, [pc, #256]	@ (8007e1c <DMA_MultiBufferSetConfig+0x13c>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d036      	beq.n	8007d8e <DMA_MultiBufferSetConfig+0xae>
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a3e      	ldr	r2, [pc, #248]	@ (8007e20 <DMA_MultiBufferSetConfig+0x140>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d031      	beq.n	8007d8e <DMA_MultiBufferSetConfig+0xae>
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a3d      	ldr	r2, [pc, #244]	@ (8007e24 <DMA_MultiBufferSetConfig+0x144>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d02c      	beq.n	8007d8e <DMA_MultiBufferSetConfig+0xae>
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a3b      	ldr	r2, [pc, #236]	@ (8007e28 <DMA_MultiBufferSetConfig+0x148>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d027      	beq.n	8007d8e <DMA_MultiBufferSetConfig+0xae>
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a3a      	ldr	r2, [pc, #232]	@ (8007e2c <DMA_MultiBufferSetConfig+0x14c>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d022      	beq.n	8007d8e <DMA_MultiBufferSetConfig+0xae>
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a38      	ldr	r2, [pc, #224]	@ (8007e30 <DMA_MultiBufferSetConfig+0x150>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d01d      	beq.n	8007d8e <DMA_MultiBufferSetConfig+0xae>
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a37      	ldr	r2, [pc, #220]	@ (8007e34 <DMA_MultiBufferSetConfig+0x154>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d018      	beq.n	8007d8e <DMA_MultiBufferSetConfig+0xae>
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a35      	ldr	r2, [pc, #212]	@ (8007e38 <DMA_MultiBufferSetConfig+0x158>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d013      	beq.n	8007d8e <DMA_MultiBufferSetConfig+0xae>
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a34      	ldr	r2, [pc, #208]	@ (8007e3c <DMA_MultiBufferSetConfig+0x15c>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d00e      	beq.n	8007d8e <DMA_MultiBufferSetConfig+0xae>
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a32      	ldr	r2, [pc, #200]	@ (8007e40 <DMA_MultiBufferSetConfig+0x160>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d009      	beq.n	8007d8e <DMA_MultiBufferSetConfig+0xae>
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a31      	ldr	r2, [pc, #196]	@ (8007e44 <DMA_MultiBufferSetConfig+0x164>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d004      	beq.n	8007d8e <DMA_MultiBufferSetConfig+0xae>
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a2f      	ldr	r2, [pc, #188]	@ (8007e48 <DMA_MultiBufferSetConfig+0x168>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d101      	bne.n	8007d92 <DMA_MultiBufferSetConfig+0xb2>
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e000      	b.n	8007d94 <DMA_MultiBufferSetConfig+0xb4>
 8007d92:	2300      	movs	r3, #0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d019      	beq.n	8007dcc <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	683a      	ldr	r2, [r7, #0]
 8007d9e:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	2b40      	cmp	r3, #64	@ 0x40
 8007da6:	d108      	bne.n	8007dba <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	68ba      	ldr	r2, [r7, #8]
 8007db6:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8007db8:	e021      	b.n	8007dfe <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	68ba      	ldr	r2, [r7, #8]
 8007dc0:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	60da      	str	r2, [r3, #12]
}
 8007dca:	e018      	b.n	8007dfe <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	683a      	ldr	r2, [r7, #0]
 8007dd2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	2b40      	cmp	r3, #64	@ 0x40
 8007dda:	d108      	bne.n	8007dee <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68ba      	ldr	r2, [r7, #8]
 8007dea:	60da      	str	r2, [r3, #12]
}
 8007dec:	e007      	b.n	8007dfe <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	68ba      	ldr	r2, [r7, #8]
 8007df4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	687a      	ldr	r2, [r7, #4]
 8007dfc:	60da      	str	r2, [r3, #12]
}
 8007dfe:	bf00      	nop
 8007e00:	3714      	adds	r7, #20
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr
 8007e0a:	bf00      	nop
 8007e0c:	40020010 	.word	0x40020010
 8007e10:	40020028 	.word	0x40020028
 8007e14:	40020040 	.word	0x40020040
 8007e18:	40020058 	.word	0x40020058
 8007e1c:	40020070 	.word	0x40020070
 8007e20:	40020088 	.word	0x40020088
 8007e24:	400200a0 	.word	0x400200a0
 8007e28:	400200b8 	.word	0x400200b8
 8007e2c:	40020410 	.word	0x40020410
 8007e30:	40020428 	.word	0x40020428
 8007e34:	40020440 	.word	0x40020440
 8007e38:	40020458 	.word	0x40020458
 8007e3c:	40020470 	.word	0x40020470
 8007e40:	40020488 	.word	0x40020488
 8007e44:	400204a0 	.word	0x400204a0
 8007e48:	400204b8 	.word	0x400204b8

08007e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b089      	sub	sp, #36	@ 0x24
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007e56:	2300      	movs	r3, #0
 8007e58:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007e5a:	4b89      	ldr	r3, [pc, #548]	@ (8008080 <HAL_GPIO_Init+0x234>)
 8007e5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007e5e:	e194      	b.n	800818a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	2101      	movs	r1, #1
 8007e66:	69fb      	ldr	r3, [r7, #28]
 8007e68:	fa01 f303 	lsl.w	r3, r1, r3
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	f000 8186 	beq.w	8008184 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	f003 0303 	and.w	r3, r3, #3
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d005      	beq.n	8007e90 <HAL_GPIO_Init+0x44>
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	f003 0303 	and.w	r3, r3, #3
 8007e8c:	2b02      	cmp	r3, #2
 8007e8e:	d130      	bne.n	8007ef2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	005b      	lsls	r3, r3, #1
 8007e9a:	2203      	movs	r2, #3
 8007e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea0:	43db      	mvns	r3, r3
 8007ea2:	69ba      	ldr	r2, [r7, #24]
 8007ea4:	4013      	ands	r3, r2
 8007ea6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	68da      	ldr	r2, [r3, #12]
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	005b      	lsls	r3, r3, #1
 8007eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8007eb4:	69ba      	ldr	r2, [r7, #24]
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	69ba      	ldr	r2, [r7, #24]
 8007ebe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007ec6:	2201      	movs	r2, #1
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	fa02 f303 	lsl.w	r3, r2, r3
 8007ece:	43db      	mvns	r3, r3
 8007ed0:	69ba      	ldr	r2, [r7, #24]
 8007ed2:	4013      	ands	r3, r2
 8007ed4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	091b      	lsrs	r3, r3, #4
 8007edc:	f003 0201 	and.w	r2, r3, #1
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ee6:	69ba      	ldr	r2, [r7, #24]
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	69ba      	ldr	r2, [r7, #24]
 8007ef0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	f003 0303 	and.w	r3, r3, #3
 8007efa:	2b03      	cmp	r3, #3
 8007efc:	d017      	beq.n	8007f2e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	005b      	lsls	r3, r3, #1
 8007f08:	2203      	movs	r2, #3
 8007f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f0e:	43db      	mvns	r3, r3
 8007f10:	69ba      	ldr	r2, [r7, #24]
 8007f12:	4013      	ands	r3, r2
 8007f14:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	689a      	ldr	r2, [r3, #8]
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	005b      	lsls	r3, r3, #1
 8007f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f22:	69ba      	ldr	r2, [r7, #24]
 8007f24:	4313      	orrs	r3, r2
 8007f26:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	69ba      	ldr	r2, [r7, #24]
 8007f2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	f003 0303 	and.w	r3, r3, #3
 8007f36:	2b02      	cmp	r3, #2
 8007f38:	d123      	bne.n	8007f82 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007f3a:	69fb      	ldr	r3, [r7, #28]
 8007f3c:	08da      	lsrs	r2, r3, #3
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	3208      	adds	r2, #8
 8007f42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007f48:	69fb      	ldr	r3, [r7, #28]
 8007f4a:	f003 0307 	and.w	r3, r3, #7
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	220f      	movs	r2, #15
 8007f52:	fa02 f303 	lsl.w	r3, r2, r3
 8007f56:	43db      	mvns	r3, r3
 8007f58:	69ba      	ldr	r2, [r7, #24]
 8007f5a:	4013      	ands	r3, r2
 8007f5c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	691a      	ldr	r2, [r3, #16]
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	f003 0307 	and.w	r3, r3, #7
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f6e:	69ba      	ldr	r2, [r7, #24]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	08da      	lsrs	r2, r3, #3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	3208      	adds	r2, #8
 8007f7c:	69b9      	ldr	r1, [r7, #24]
 8007f7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	005b      	lsls	r3, r3, #1
 8007f8c:	2203      	movs	r2, #3
 8007f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f92:	43db      	mvns	r3, r3
 8007f94:	69ba      	ldr	r2, [r7, #24]
 8007f96:	4013      	ands	r3, r2
 8007f98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007f9a:	683b      	ldr	r3, [r7, #0]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	f003 0203 	and.w	r2, r3, #3
 8007fa2:	69fb      	ldr	r3, [r7, #28]
 8007fa4:	005b      	lsls	r3, r3, #1
 8007fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8007faa:	69ba      	ldr	r2, [r7, #24]
 8007fac:	4313      	orrs	r3, r2
 8007fae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	69ba      	ldr	r2, [r7, #24]
 8007fb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	f000 80e0 	beq.w	8008184 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007fc4:	4b2f      	ldr	r3, [pc, #188]	@ (8008084 <HAL_GPIO_Init+0x238>)
 8007fc6:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8007fca:	4a2e      	ldr	r2, [pc, #184]	@ (8008084 <HAL_GPIO_Init+0x238>)
 8007fcc:	f043 0302 	orr.w	r3, r3, #2
 8007fd0:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8007fd4:	4b2b      	ldr	r3, [pc, #172]	@ (8008084 <HAL_GPIO_Init+0x238>)
 8007fd6:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 8007fda:	f003 0302 	and.w	r3, r3, #2
 8007fde:	60fb      	str	r3, [r7, #12]
 8007fe0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007fe2:	4a29      	ldr	r2, [pc, #164]	@ (8008088 <HAL_GPIO_Init+0x23c>)
 8007fe4:	69fb      	ldr	r3, [r7, #28]
 8007fe6:	089b      	lsrs	r3, r3, #2
 8007fe8:	3302      	adds	r3, #2
 8007fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007ff0:	69fb      	ldr	r3, [r7, #28]
 8007ff2:	f003 0303 	and.w	r3, r3, #3
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	220f      	movs	r2, #15
 8007ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8007ffe:	43db      	mvns	r3, r3
 8008000:	69ba      	ldr	r2, [r7, #24]
 8008002:	4013      	ands	r3, r2
 8008004:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	4a20      	ldr	r2, [pc, #128]	@ (800808c <HAL_GPIO_Init+0x240>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d052      	beq.n	80080b4 <HAL_GPIO_Init+0x268>
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a1f      	ldr	r2, [pc, #124]	@ (8008090 <HAL_GPIO_Init+0x244>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d031      	beq.n	800807a <HAL_GPIO_Init+0x22e>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a1e      	ldr	r2, [pc, #120]	@ (8008094 <HAL_GPIO_Init+0x248>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d02b      	beq.n	8008076 <HAL_GPIO_Init+0x22a>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4a1d      	ldr	r2, [pc, #116]	@ (8008098 <HAL_GPIO_Init+0x24c>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d025      	beq.n	8008072 <HAL_GPIO_Init+0x226>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a1c      	ldr	r2, [pc, #112]	@ (800809c <HAL_GPIO_Init+0x250>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d01f      	beq.n	800806e <HAL_GPIO_Init+0x222>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4a1b      	ldr	r2, [pc, #108]	@ (80080a0 <HAL_GPIO_Init+0x254>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d019      	beq.n	800806a <HAL_GPIO_Init+0x21e>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	4a1a      	ldr	r2, [pc, #104]	@ (80080a4 <HAL_GPIO_Init+0x258>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d013      	beq.n	8008066 <HAL_GPIO_Init+0x21a>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4a19      	ldr	r2, [pc, #100]	@ (80080a8 <HAL_GPIO_Init+0x25c>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d00d      	beq.n	8008062 <HAL_GPIO_Init+0x216>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	4a18      	ldr	r2, [pc, #96]	@ (80080ac <HAL_GPIO_Init+0x260>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d007      	beq.n	800805e <HAL_GPIO_Init+0x212>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4a17      	ldr	r2, [pc, #92]	@ (80080b0 <HAL_GPIO_Init+0x264>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d101      	bne.n	800805a <HAL_GPIO_Init+0x20e>
 8008056:	2309      	movs	r3, #9
 8008058:	e02d      	b.n	80080b6 <HAL_GPIO_Init+0x26a>
 800805a:	230a      	movs	r3, #10
 800805c:	e02b      	b.n	80080b6 <HAL_GPIO_Init+0x26a>
 800805e:	2308      	movs	r3, #8
 8008060:	e029      	b.n	80080b6 <HAL_GPIO_Init+0x26a>
 8008062:	2307      	movs	r3, #7
 8008064:	e027      	b.n	80080b6 <HAL_GPIO_Init+0x26a>
 8008066:	2306      	movs	r3, #6
 8008068:	e025      	b.n	80080b6 <HAL_GPIO_Init+0x26a>
 800806a:	2305      	movs	r3, #5
 800806c:	e023      	b.n	80080b6 <HAL_GPIO_Init+0x26a>
 800806e:	2304      	movs	r3, #4
 8008070:	e021      	b.n	80080b6 <HAL_GPIO_Init+0x26a>
 8008072:	2303      	movs	r3, #3
 8008074:	e01f      	b.n	80080b6 <HAL_GPIO_Init+0x26a>
 8008076:	2302      	movs	r3, #2
 8008078:	e01d      	b.n	80080b6 <HAL_GPIO_Init+0x26a>
 800807a:	2301      	movs	r3, #1
 800807c:	e01b      	b.n	80080b6 <HAL_GPIO_Init+0x26a>
 800807e:	bf00      	nop
 8008080:	58000080 	.word	0x58000080
 8008084:	58024400 	.word	0x58024400
 8008088:	58000400 	.word	0x58000400
 800808c:	58020000 	.word	0x58020000
 8008090:	58020400 	.word	0x58020400
 8008094:	58020800 	.word	0x58020800
 8008098:	58020c00 	.word	0x58020c00
 800809c:	58021000 	.word	0x58021000
 80080a0:	58021400 	.word	0x58021400
 80080a4:	58021800 	.word	0x58021800
 80080a8:	58021c00 	.word	0x58021c00
 80080ac:	58022000 	.word	0x58022000
 80080b0:	58022400 	.word	0x58022400
 80080b4:	2300      	movs	r3, #0
 80080b6:	69fa      	ldr	r2, [r7, #28]
 80080b8:	f002 0203 	and.w	r2, r2, #3
 80080bc:	0092      	lsls	r2, r2, #2
 80080be:	4093      	lsls	r3, r2
 80080c0:	69ba      	ldr	r2, [r7, #24]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80080c6:	4938      	ldr	r1, [pc, #224]	@ (80081a8 <HAL_GPIO_Init+0x35c>)
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	089b      	lsrs	r3, r3, #2
 80080cc:	3302      	adds	r3, #2
 80080ce:	69ba      	ldr	r2, [r7, #24]
 80080d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80080d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80080dc:	693b      	ldr	r3, [r7, #16]
 80080de:	43db      	mvns	r3, r3
 80080e0:	69ba      	ldr	r2, [r7, #24]
 80080e2:	4013      	ands	r3, r2
 80080e4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d003      	beq.n	80080fa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80080f2:	69ba      	ldr	r2, [r7, #24]
 80080f4:	693b      	ldr	r3, [r7, #16]
 80080f6:	4313      	orrs	r3, r2
 80080f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80080fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008102:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	43db      	mvns	r3, r3
 800810e:	69ba      	ldr	r2, [r7, #24]
 8008110:	4013      	ands	r3, r2
 8008112:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800811c:	2b00      	cmp	r3, #0
 800811e:	d003      	beq.n	8008128 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008120:	69ba      	ldr	r2, [r7, #24]
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	4313      	orrs	r3, r2
 8008126:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008128:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800812c:	69bb      	ldr	r3, [r7, #24]
 800812e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	43db      	mvns	r3, r3
 800813a:	69ba      	ldr	r2, [r7, #24]
 800813c:	4013      	ands	r3, r2
 800813e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008148:	2b00      	cmp	r3, #0
 800814a:	d003      	beq.n	8008154 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800814c:	69ba      	ldr	r2, [r7, #24]
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	4313      	orrs	r3, r2
 8008152:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	69ba      	ldr	r2, [r7, #24]
 8008158:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	43db      	mvns	r3, r3
 8008164:	69ba      	ldr	r2, [r7, #24]
 8008166:	4013      	ands	r3, r2
 8008168:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008172:	2b00      	cmp	r3, #0
 8008174:	d003      	beq.n	800817e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008176:	69ba      	ldr	r2, [r7, #24]
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	4313      	orrs	r3, r2
 800817c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	69ba      	ldr	r2, [r7, #24]
 8008182:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	3301      	adds	r3, #1
 8008188:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	69fb      	ldr	r3, [r7, #28]
 8008190:	fa22 f303 	lsr.w	r3, r2, r3
 8008194:	2b00      	cmp	r3, #0
 8008196:	f47f ae63 	bne.w	8007e60 <HAL_GPIO_Init+0x14>
  }
}
 800819a:	bf00      	nop
 800819c:	bf00      	nop
 800819e:	3724      	adds	r7, #36	@ 0x24
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr
 80081a8:	58000400 	.word	0x58000400

080081ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b085      	sub	sp, #20
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	460b      	mov	r3, r1
 80081b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	691a      	ldr	r2, [r3, #16]
 80081bc:	887b      	ldrh	r3, [r7, #2]
 80081be:	4013      	ands	r3, r2
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d002      	beq.n	80081ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80081c4:	2301      	movs	r3, #1
 80081c6:	73fb      	strb	r3, [r7, #15]
 80081c8:	e001      	b.n	80081ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80081ca:	2300      	movs	r3, #0
 80081cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80081ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3714      	adds	r7, #20
 80081d4:	46bd      	mov	sp, r7
 80081d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081da:	4770      	bx	lr

080081dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80081dc:	b480      	push	{r7}
 80081de:	b083      	sub	sp, #12
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	460b      	mov	r3, r1
 80081e6:	807b      	strh	r3, [r7, #2]
 80081e8:	4613      	mov	r3, r2
 80081ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80081ec:	787b      	ldrb	r3, [r7, #1]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d003      	beq.n	80081fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80081f2:	887a      	ldrh	r2, [r7, #2]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80081f8:	e003      	b.n	8008202 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80081fa:	887b      	ldrh	r3, [r7, #2]
 80081fc:	041a      	lsls	r2, r3, #16
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	619a      	str	r2, [r3, #24]
}
 8008202:	bf00      	nop
 8008204:	370c      	adds	r7, #12
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr

0800820e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800820e:	b580      	push	{r7, lr}
 8008210:	b082      	sub	sp, #8
 8008212:	af00      	add	r7, sp, #0
 8008214:	4603      	mov	r3, r0
 8008216:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8008218:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800821c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008220:	88fb      	ldrh	r3, [r7, #6]
 8008222:	4013      	ands	r3, r2
 8008224:	2b00      	cmp	r3, #0
 8008226:	d008      	beq.n	800823a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008228:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800822c:	88fb      	ldrh	r3, [r7, #6]
 800822e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008232:	88fb      	ldrh	r3, [r7, #6]
 8008234:	4618      	mov	r0, r3
 8008236:	f7f8 feb5 	bl	8000fa4 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800823a:	bf00      	nop
 800823c:	3708      	adds	r7, #8
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}
	...

08008244 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b082      	sub	sp, #8
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d101      	bne.n	8008256 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	e08b      	b.n	800836e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800825c:	b2db      	uxtb	r3, r3
 800825e:	2b00      	cmp	r3, #0
 8008260:	d106      	bne.n	8008270 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f7fa fb10 	bl	8002890 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2224      	movs	r2, #36	@ 0x24
 8008274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f022 0201 	bic.w	r2, r2, #1
 8008286:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	685a      	ldr	r2, [r3, #4]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008294:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	689a      	ldr	r2, [r3, #8]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80082a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d107      	bne.n	80082be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	689a      	ldr	r2, [r3, #8]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80082ba:	609a      	str	r2, [r3, #8]
 80082bc:	e006      	b.n	80082cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	689a      	ldr	r2, [r3, #8]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80082ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	68db      	ldr	r3, [r3, #12]
 80082d0:	2b02      	cmp	r3, #2
 80082d2:	d108      	bne.n	80082e6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	685a      	ldr	r2, [r3, #4]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80082e2:	605a      	str	r2, [r3, #4]
 80082e4:	e007      	b.n	80082f6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	685a      	ldr	r2, [r3, #4]
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80082f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	6859      	ldr	r1, [r3, #4]
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	4b1d      	ldr	r3, [pc, #116]	@ (8008378 <HAL_I2C_Init+0x134>)
 8008302:	430b      	orrs	r3, r1
 8008304:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	68da      	ldr	r2, [r3, #12]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008314:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	691a      	ldr	r2, [r3, #16]
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	695b      	ldr	r3, [r3, #20]
 800831e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	699b      	ldr	r3, [r3, #24]
 8008326:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	430a      	orrs	r2, r1
 800832e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	69d9      	ldr	r1, [r3, #28]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6a1a      	ldr	r2, [r3, #32]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	430a      	orrs	r2, r1
 800833e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	681a      	ldr	r2, [r3, #0]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f042 0201 	orr.w	r2, r2, #1
 800834e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2220      	movs	r2, #32
 800835a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2200      	movs	r2, #0
 8008362:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800836c:	2300      	movs	r3, #0
}
 800836e:	4618      	mov	r0, r3
 8008370:	3708      	adds	r7, #8
 8008372:	46bd      	mov	sp, r7
 8008374:	bd80      	pop	{r7, pc}
 8008376:	bf00      	nop
 8008378:	02008000 	.word	0x02008000

0800837c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b088      	sub	sp, #32
 8008380:	af02      	add	r7, sp, #8
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	607a      	str	r2, [r7, #4]
 8008386:	461a      	mov	r2, r3
 8008388:	460b      	mov	r3, r1
 800838a:	817b      	strh	r3, [r7, #10]
 800838c:	4613      	mov	r3, r2
 800838e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008396:	b2db      	uxtb	r3, r3
 8008398:	2b20      	cmp	r3, #32
 800839a:	f040 80fd 	bne.w	8008598 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d101      	bne.n	80083ac <HAL_I2C_Master_Transmit+0x30>
 80083a8:	2302      	movs	r3, #2
 80083aa:	e0f6      	b.n	800859a <HAL_I2C_Master_Transmit+0x21e>
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2201      	movs	r2, #1
 80083b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80083b4:	f7fa fde8 	bl	8002f88 <HAL_GetTick>
 80083b8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	9300      	str	r3, [sp, #0]
 80083be:	2319      	movs	r3, #25
 80083c0:	2201      	movs	r2, #1
 80083c2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80083c6:	68f8      	ldr	r0, [r7, #12]
 80083c8:	f000 fb72 	bl	8008ab0 <I2C_WaitOnFlagUntilTimeout>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d001      	beq.n	80083d6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	e0e1      	b.n	800859a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2221      	movs	r2, #33	@ 0x21
 80083da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2210      	movs	r2, #16
 80083e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2200      	movs	r2, #0
 80083ea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	893a      	ldrh	r2, [r7, #8]
 80083f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2200      	movs	r2, #0
 80083fc:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008402:	b29b      	uxth	r3, r3
 8008404:	2bff      	cmp	r3, #255	@ 0xff
 8008406:	d906      	bls.n	8008416 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	22ff      	movs	r2, #255	@ 0xff
 800840c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800840e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008412:	617b      	str	r3, [r7, #20]
 8008414:	e007      	b.n	8008426 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800841a:	b29a      	uxth	r2, r3
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008420:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008424:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800842a:	2b00      	cmp	r3, #0
 800842c:	d024      	beq.n	8008478 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008432:	781a      	ldrb	r2, [r3, #0]
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800843e:	1c5a      	adds	r2, r3, #1
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008448:	b29b      	uxth	r3, r3
 800844a:	3b01      	subs	r3, #1
 800844c:	b29a      	uxth	r2, r3
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008456:	3b01      	subs	r3, #1
 8008458:	b29a      	uxth	r2, r3
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008462:	b2db      	uxtb	r3, r3
 8008464:	3301      	adds	r3, #1
 8008466:	b2da      	uxtb	r2, r3
 8008468:	8979      	ldrh	r1, [r7, #10]
 800846a:	4b4e      	ldr	r3, [pc, #312]	@ (80085a4 <HAL_I2C_Master_Transmit+0x228>)
 800846c:	9300      	str	r3, [sp, #0]
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	68f8      	ldr	r0, [r7, #12]
 8008472:	f000 fd6d 	bl	8008f50 <I2C_TransferConfig>
 8008476:	e066      	b.n	8008546 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800847c:	b2da      	uxtb	r2, r3
 800847e:	8979      	ldrh	r1, [r7, #10]
 8008480:	4b48      	ldr	r3, [pc, #288]	@ (80085a4 <HAL_I2C_Master_Transmit+0x228>)
 8008482:	9300      	str	r3, [sp, #0]
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	68f8      	ldr	r0, [r7, #12]
 8008488:	f000 fd62 	bl	8008f50 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800848c:	e05b      	b.n	8008546 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800848e:	693a      	ldr	r2, [r7, #16]
 8008490:	6a39      	ldr	r1, [r7, #32]
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	f000 fb65 	bl	8008b62 <I2C_WaitOnTXISFlagUntilTimeout>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d001      	beq.n	80084a2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e07b      	b.n	800859a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084a6:	781a      	ldrb	r2, [r3, #0]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084b2:	1c5a      	adds	r2, r3, #1
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084bc:	b29b      	uxth	r3, r3
 80084be:	3b01      	subs	r3, #1
 80084c0:	b29a      	uxth	r2, r3
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084ca:	3b01      	subs	r3, #1
 80084cc:	b29a      	uxth	r2, r3
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d034      	beq.n	8008546 <HAL_I2C_Master_Transmit+0x1ca>
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d130      	bne.n	8008546 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	9300      	str	r3, [sp, #0]
 80084e8:	6a3b      	ldr	r3, [r7, #32]
 80084ea:	2200      	movs	r2, #0
 80084ec:	2180      	movs	r1, #128	@ 0x80
 80084ee:	68f8      	ldr	r0, [r7, #12]
 80084f0:	f000 fade 	bl	8008ab0 <I2C_WaitOnFlagUntilTimeout>
 80084f4:	4603      	mov	r3, r0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d001      	beq.n	80084fe <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80084fa:	2301      	movs	r3, #1
 80084fc:	e04d      	b.n	800859a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008502:	b29b      	uxth	r3, r3
 8008504:	2bff      	cmp	r3, #255	@ 0xff
 8008506:	d90e      	bls.n	8008526 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	22ff      	movs	r2, #255	@ 0xff
 800850c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008512:	b2da      	uxtb	r2, r3
 8008514:	8979      	ldrh	r1, [r7, #10]
 8008516:	2300      	movs	r3, #0
 8008518:	9300      	str	r3, [sp, #0]
 800851a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800851e:	68f8      	ldr	r0, [r7, #12]
 8008520:	f000 fd16 	bl	8008f50 <I2C_TransferConfig>
 8008524:	e00f      	b.n	8008546 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800852a:	b29a      	uxth	r2, r3
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008534:	b2da      	uxtb	r2, r3
 8008536:	8979      	ldrh	r1, [r7, #10]
 8008538:	2300      	movs	r3, #0
 800853a:	9300      	str	r3, [sp, #0]
 800853c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008540:	68f8      	ldr	r0, [r7, #12]
 8008542:	f000 fd05 	bl	8008f50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800854a:	b29b      	uxth	r3, r3
 800854c:	2b00      	cmp	r3, #0
 800854e:	d19e      	bne.n	800848e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008550:	693a      	ldr	r2, [r7, #16]
 8008552:	6a39      	ldr	r1, [r7, #32]
 8008554:	68f8      	ldr	r0, [r7, #12]
 8008556:	f000 fb4b 	bl	8008bf0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800855a:	4603      	mov	r3, r0
 800855c:	2b00      	cmp	r3, #0
 800855e:	d001      	beq.n	8008564 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	e01a      	b.n	800859a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2220      	movs	r2, #32
 800856a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	6859      	ldr	r1, [r3, #4]
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	4b0c      	ldr	r3, [pc, #48]	@ (80085a8 <HAL_I2C_Master_Transmit+0x22c>)
 8008578:	400b      	ands	r3, r1
 800857a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2220      	movs	r2, #32
 8008580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2200      	movs	r2, #0
 8008588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2200      	movs	r2, #0
 8008590:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008594:	2300      	movs	r3, #0
 8008596:	e000      	b.n	800859a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8008598:	2302      	movs	r3, #2
  }
}
 800859a:	4618      	mov	r0, r3
 800859c:	3718      	adds	r7, #24
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	80002000 	.word	0x80002000
 80085a8:	fe00e800 	.word	0xfe00e800

080085ac <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b088      	sub	sp, #32
 80085b0:	af02      	add	r7, sp, #8
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	607a      	str	r2, [r7, #4]
 80085b6:	461a      	mov	r2, r3
 80085b8:	460b      	mov	r3, r1
 80085ba:	817b      	strh	r3, [r7, #10]
 80085bc:	4613      	mov	r3, r2
 80085be:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085c6:	b2db      	uxtb	r3, r3
 80085c8:	2b20      	cmp	r3, #32
 80085ca:	f040 80db 	bne.w	8008784 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80085d4:	2b01      	cmp	r3, #1
 80085d6:	d101      	bne.n	80085dc <HAL_I2C_Master_Receive+0x30>
 80085d8:	2302      	movs	r3, #2
 80085da:	e0d4      	b.n	8008786 <HAL_I2C_Master_Receive+0x1da>
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80085e4:	f7fa fcd0 	bl	8002f88 <HAL_GetTick>
 80085e8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	9300      	str	r3, [sp, #0]
 80085ee:	2319      	movs	r3, #25
 80085f0:	2201      	movs	r2, #1
 80085f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80085f6:	68f8      	ldr	r0, [r7, #12]
 80085f8:	f000 fa5a 	bl	8008ab0 <I2C_WaitOnFlagUntilTimeout>
 80085fc:	4603      	mov	r3, r0
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d001      	beq.n	8008606 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8008602:	2301      	movs	r3, #1
 8008604:	e0bf      	b.n	8008786 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2222      	movs	r2, #34	@ 0x22
 800860a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	2210      	movs	r2, #16
 8008612:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2200      	movs	r2, #0
 800861a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	893a      	ldrh	r2, [r7, #8]
 8008626:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2200      	movs	r2, #0
 800862c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008632:	b29b      	uxth	r3, r3
 8008634:	2bff      	cmp	r3, #255	@ 0xff
 8008636:	d90e      	bls.n	8008656 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	22ff      	movs	r2, #255	@ 0xff
 800863c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008642:	b2da      	uxtb	r2, r3
 8008644:	8979      	ldrh	r1, [r7, #10]
 8008646:	4b52      	ldr	r3, [pc, #328]	@ (8008790 <HAL_I2C_Master_Receive+0x1e4>)
 8008648:	9300      	str	r3, [sp, #0]
 800864a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800864e:	68f8      	ldr	r0, [r7, #12]
 8008650:	f000 fc7e 	bl	8008f50 <I2C_TransferConfig>
 8008654:	e06d      	b.n	8008732 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800865a:	b29a      	uxth	r2, r3
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008664:	b2da      	uxtb	r2, r3
 8008666:	8979      	ldrh	r1, [r7, #10]
 8008668:	4b49      	ldr	r3, [pc, #292]	@ (8008790 <HAL_I2C_Master_Receive+0x1e4>)
 800866a:	9300      	str	r3, [sp, #0]
 800866c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008670:	68f8      	ldr	r0, [r7, #12]
 8008672:	f000 fc6d 	bl	8008f50 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8008676:	e05c      	b.n	8008732 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008678:	697a      	ldr	r2, [r7, #20]
 800867a:	6a39      	ldr	r1, [r7, #32]
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	f000 fafb 	bl	8008c78 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d001      	beq.n	800868c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8008688:	2301      	movs	r3, #1
 800868a:	e07c      	b.n	8008786 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008696:	b2d2      	uxtb	r2, r2
 8008698:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800869e:	1c5a      	adds	r2, r3, #1
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086a8:	3b01      	subs	r3, #1
 80086aa:	b29a      	uxth	r2, r3
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086b4:	b29b      	uxth	r3, r3
 80086b6:	3b01      	subs	r3, #1
 80086b8:	b29a      	uxth	r2, r3
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086c2:	b29b      	uxth	r3, r3
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d034      	beq.n	8008732 <HAL_I2C_Master_Receive+0x186>
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d130      	bne.n	8008732 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	9300      	str	r3, [sp, #0]
 80086d4:	6a3b      	ldr	r3, [r7, #32]
 80086d6:	2200      	movs	r2, #0
 80086d8:	2180      	movs	r1, #128	@ 0x80
 80086da:	68f8      	ldr	r0, [r7, #12]
 80086dc:	f000 f9e8 	bl	8008ab0 <I2C_WaitOnFlagUntilTimeout>
 80086e0:	4603      	mov	r3, r0
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d001      	beq.n	80086ea <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80086e6:	2301      	movs	r3, #1
 80086e8:	e04d      	b.n	8008786 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086ee:	b29b      	uxth	r3, r3
 80086f0:	2bff      	cmp	r3, #255	@ 0xff
 80086f2:	d90e      	bls.n	8008712 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	22ff      	movs	r2, #255	@ 0xff
 80086f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086fe:	b2da      	uxtb	r2, r3
 8008700:	8979      	ldrh	r1, [r7, #10]
 8008702:	2300      	movs	r3, #0
 8008704:	9300      	str	r3, [sp, #0]
 8008706:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800870a:	68f8      	ldr	r0, [r7, #12]
 800870c:	f000 fc20 	bl	8008f50 <I2C_TransferConfig>
 8008710:	e00f      	b.n	8008732 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008716:	b29a      	uxth	r2, r3
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008720:	b2da      	uxtb	r2, r3
 8008722:	8979      	ldrh	r1, [r7, #10]
 8008724:	2300      	movs	r3, #0
 8008726:	9300      	str	r3, [sp, #0]
 8008728:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800872c:	68f8      	ldr	r0, [r7, #12]
 800872e:	f000 fc0f 	bl	8008f50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008736:	b29b      	uxth	r3, r3
 8008738:	2b00      	cmp	r3, #0
 800873a:	d19d      	bne.n	8008678 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800873c:	697a      	ldr	r2, [r7, #20]
 800873e:	6a39      	ldr	r1, [r7, #32]
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f000 fa55 	bl	8008bf0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008746:	4603      	mov	r3, r0
 8008748:	2b00      	cmp	r3, #0
 800874a:	d001      	beq.n	8008750 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	e01a      	b.n	8008786 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2220      	movs	r2, #32
 8008756:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	6859      	ldr	r1, [r3, #4]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681a      	ldr	r2, [r3, #0]
 8008762:	4b0c      	ldr	r3, [pc, #48]	@ (8008794 <HAL_I2C_Master_Receive+0x1e8>)
 8008764:	400b      	ands	r3, r1
 8008766:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2220      	movs	r2, #32
 800876c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2200      	movs	r2, #0
 8008774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2200      	movs	r2, #0
 800877c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008780:	2300      	movs	r3, #0
 8008782:	e000      	b.n	8008786 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8008784:	2302      	movs	r3, #2
  }
}
 8008786:	4618      	mov	r0, r3
 8008788:	3718      	adds	r7, #24
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	80002400 	.word	0x80002400
 8008794:	fe00e800 	.word	0xfe00e800

08008798 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b088      	sub	sp, #32
 800879c:	af02      	add	r7, sp, #8
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	4608      	mov	r0, r1
 80087a2:	4611      	mov	r1, r2
 80087a4:	461a      	mov	r2, r3
 80087a6:	4603      	mov	r3, r0
 80087a8:	817b      	strh	r3, [r7, #10]
 80087aa:	460b      	mov	r3, r1
 80087ac:	813b      	strh	r3, [r7, #8]
 80087ae:	4613      	mov	r3, r2
 80087b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	2b20      	cmp	r3, #32
 80087bc:	f040 80f9 	bne.w	80089b2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80087c0:	6a3b      	ldr	r3, [r7, #32]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d002      	beq.n	80087cc <HAL_I2C_Mem_Write+0x34>
 80087c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d105      	bne.n	80087d8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80087d2:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	e0ed      	b.n	80089b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d101      	bne.n	80087e6 <HAL_I2C_Mem_Write+0x4e>
 80087e2:	2302      	movs	r3, #2
 80087e4:	e0e6      	b.n	80089b4 <HAL_I2C_Mem_Write+0x21c>
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	2201      	movs	r2, #1
 80087ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80087ee:	f7fa fbcb 	bl	8002f88 <HAL_GetTick>
 80087f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	9300      	str	r3, [sp, #0]
 80087f8:	2319      	movs	r3, #25
 80087fa:	2201      	movs	r2, #1
 80087fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008800:	68f8      	ldr	r0, [r7, #12]
 8008802:	f000 f955 	bl	8008ab0 <I2C_WaitOnFlagUntilTimeout>
 8008806:	4603      	mov	r3, r0
 8008808:	2b00      	cmp	r3, #0
 800880a:	d001      	beq.n	8008810 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800880c:	2301      	movs	r3, #1
 800880e:	e0d1      	b.n	80089b4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2221      	movs	r2, #33	@ 0x21
 8008814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2240      	movs	r2, #64	@ 0x40
 800881c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2200      	movs	r2, #0
 8008824:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	6a3a      	ldr	r2, [r7, #32]
 800882a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008830:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2200      	movs	r2, #0
 8008836:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008838:	88f8      	ldrh	r0, [r7, #6]
 800883a:	893a      	ldrh	r2, [r7, #8]
 800883c:	8979      	ldrh	r1, [r7, #10]
 800883e:	697b      	ldr	r3, [r7, #20]
 8008840:	9301      	str	r3, [sp, #4]
 8008842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008844:	9300      	str	r3, [sp, #0]
 8008846:	4603      	mov	r3, r0
 8008848:	68f8      	ldr	r0, [r7, #12]
 800884a:	f000 f8b9 	bl	80089c0 <I2C_RequestMemoryWrite>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d005      	beq.n	8008860 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	2200      	movs	r2, #0
 8008858:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800885c:	2301      	movs	r3, #1
 800885e:	e0a9      	b.n	80089b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008864:	b29b      	uxth	r3, r3
 8008866:	2bff      	cmp	r3, #255	@ 0xff
 8008868:	d90e      	bls.n	8008888 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	22ff      	movs	r2, #255	@ 0xff
 800886e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008874:	b2da      	uxtb	r2, r3
 8008876:	8979      	ldrh	r1, [r7, #10]
 8008878:	2300      	movs	r3, #0
 800887a:	9300      	str	r3, [sp, #0]
 800887c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	f000 fb65 	bl	8008f50 <I2C_TransferConfig>
 8008886:	e00f      	b.n	80088a8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800888c:	b29a      	uxth	r2, r3
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008896:	b2da      	uxtb	r2, r3
 8008898:	8979      	ldrh	r1, [r7, #10]
 800889a:	2300      	movs	r3, #0
 800889c:	9300      	str	r3, [sp, #0]
 800889e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80088a2:	68f8      	ldr	r0, [r7, #12]
 80088a4:	f000 fb54 	bl	8008f50 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80088a8:	697a      	ldr	r2, [r7, #20]
 80088aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80088ac:	68f8      	ldr	r0, [r7, #12]
 80088ae:	f000 f958 	bl	8008b62 <I2C_WaitOnTXISFlagUntilTimeout>
 80088b2:	4603      	mov	r3, r0
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d001      	beq.n	80088bc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80088b8:	2301      	movs	r3, #1
 80088ba:	e07b      	b.n	80089b4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088c0:	781a      	ldrb	r2, [r3, #0]
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088cc:	1c5a      	adds	r2, r3, #1
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	3b01      	subs	r3, #1
 80088da:	b29a      	uxth	r2, r3
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088e4:	3b01      	subs	r3, #1
 80088e6:	b29a      	uxth	r2, r3
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d034      	beq.n	8008960 <HAL_I2C_Mem_Write+0x1c8>
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d130      	bne.n	8008960 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	9300      	str	r3, [sp, #0]
 8008902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008904:	2200      	movs	r2, #0
 8008906:	2180      	movs	r1, #128	@ 0x80
 8008908:	68f8      	ldr	r0, [r7, #12]
 800890a:	f000 f8d1 	bl	8008ab0 <I2C_WaitOnFlagUntilTimeout>
 800890e:	4603      	mov	r3, r0
 8008910:	2b00      	cmp	r3, #0
 8008912:	d001      	beq.n	8008918 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008914:	2301      	movs	r3, #1
 8008916:	e04d      	b.n	80089b4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800891c:	b29b      	uxth	r3, r3
 800891e:	2bff      	cmp	r3, #255	@ 0xff
 8008920:	d90e      	bls.n	8008940 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	22ff      	movs	r2, #255	@ 0xff
 8008926:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800892c:	b2da      	uxtb	r2, r3
 800892e:	8979      	ldrh	r1, [r7, #10]
 8008930:	2300      	movs	r3, #0
 8008932:	9300      	str	r3, [sp, #0]
 8008934:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008938:	68f8      	ldr	r0, [r7, #12]
 800893a:	f000 fb09 	bl	8008f50 <I2C_TransferConfig>
 800893e:	e00f      	b.n	8008960 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008944:	b29a      	uxth	r2, r3
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800894e:	b2da      	uxtb	r2, r3
 8008950:	8979      	ldrh	r1, [r7, #10]
 8008952:	2300      	movs	r3, #0
 8008954:	9300      	str	r3, [sp, #0]
 8008956:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800895a:	68f8      	ldr	r0, [r7, #12]
 800895c:	f000 faf8 	bl	8008f50 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008964:	b29b      	uxth	r3, r3
 8008966:	2b00      	cmp	r3, #0
 8008968:	d19e      	bne.n	80088a8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800896a:	697a      	ldr	r2, [r7, #20]
 800896c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800896e:	68f8      	ldr	r0, [r7, #12]
 8008970:	f000 f93e 	bl	8008bf0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008974:	4603      	mov	r3, r0
 8008976:	2b00      	cmp	r3, #0
 8008978:	d001      	beq.n	800897e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800897a:	2301      	movs	r3, #1
 800897c:	e01a      	b.n	80089b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2220      	movs	r2, #32
 8008984:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	6859      	ldr	r1, [r3, #4]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	4b0a      	ldr	r3, [pc, #40]	@ (80089bc <HAL_I2C_Mem_Write+0x224>)
 8008992:	400b      	ands	r3, r1
 8008994:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2220      	movs	r2, #32
 800899a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	2200      	movs	r2, #0
 80089a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2200      	movs	r2, #0
 80089aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80089ae:	2300      	movs	r3, #0
 80089b0:	e000      	b.n	80089b4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80089b2:	2302      	movs	r3, #2
  }
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3718      	adds	r7, #24
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	fe00e800 	.word	0xfe00e800

080089c0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b086      	sub	sp, #24
 80089c4:	af02      	add	r7, sp, #8
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	4608      	mov	r0, r1
 80089ca:	4611      	mov	r1, r2
 80089cc:	461a      	mov	r2, r3
 80089ce:	4603      	mov	r3, r0
 80089d0:	817b      	strh	r3, [r7, #10]
 80089d2:	460b      	mov	r3, r1
 80089d4:	813b      	strh	r3, [r7, #8]
 80089d6:	4613      	mov	r3, r2
 80089d8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80089da:	88fb      	ldrh	r3, [r7, #6]
 80089dc:	b2da      	uxtb	r2, r3
 80089de:	8979      	ldrh	r1, [r7, #10]
 80089e0:	4b20      	ldr	r3, [pc, #128]	@ (8008a64 <I2C_RequestMemoryWrite+0xa4>)
 80089e2:	9300      	str	r3, [sp, #0]
 80089e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80089e8:	68f8      	ldr	r0, [r7, #12]
 80089ea:	f000 fab1 	bl	8008f50 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80089ee:	69fa      	ldr	r2, [r7, #28]
 80089f0:	69b9      	ldr	r1, [r7, #24]
 80089f2:	68f8      	ldr	r0, [r7, #12]
 80089f4:	f000 f8b5 	bl	8008b62 <I2C_WaitOnTXISFlagUntilTimeout>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d001      	beq.n	8008a02 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	e02c      	b.n	8008a5c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008a02:	88fb      	ldrh	r3, [r7, #6]
 8008a04:	2b01      	cmp	r3, #1
 8008a06:	d105      	bne.n	8008a14 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008a08:	893b      	ldrh	r3, [r7, #8]
 8008a0a:	b2da      	uxtb	r2, r3
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	629a      	str	r2, [r3, #40]	@ 0x28
 8008a12:	e015      	b.n	8008a40 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008a14:	893b      	ldrh	r3, [r7, #8]
 8008a16:	0a1b      	lsrs	r3, r3, #8
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	b2da      	uxtb	r2, r3
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008a22:	69fa      	ldr	r2, [r7, #28]
 8008a24:	69b9      	ldr	r1, [r7, #24]
 8008a26:	68f8      	ldr	r0, [r7, #12]
 8008a28:	f000 f89b 	bl	8008b62 <I2C_WaitOnTXISFlagUntilTimeout>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d001      	beq.n	8008a36 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	e012      	b.n	8008a5c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008a36:	893b      	ldrh	r3, [r7, #8]
 8008a38:	b2da      	uxtb	r2, r3
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	9300      	str	r3, [sp, #0]
 8008a44:	69bb      	ldr	r3, [r7, #24]
 8008a46:	2200      	movs	r2, #0
 8008a48:	2180      	movs	r1, #128	@ 0x80
 8008a4a:	68f8      	ldr	r0, [r7, #12]
 8008a4c:	f000 f830 	bl	8008ab0 <I2C_WaitOnFlagUntilTimeout>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d001      	beq.n	8008a5a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008a56:	2301      	movs	r3, #1
 8008a58:	e000      	b.n	8008a5c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008a5a:	2300      	movs	r3, #0
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3710      	adds	r7, #16
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	80002000 	.word	0x80002000

08008a68 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	699b      	ldr	r3, [r3, #24]
 8008a76:	f003 0302 	and.w	r3, r3, #2
 8008a7a:	2b02      	cmp	r3, #2
 8008a7c:	d103      	bne.n	8008a86 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	2200      	movs	r2, #0
 8008a84:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	699b      	ldr	r3, [r3, #24]
 8008a8c:	f003 0301 	and.w	r3, r3, #1
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d007      	beq.n	8008aa4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	699a      	ldr	r2, [r3, #24]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f042 0201 	orr.w	r2, r2, #1
 8008aa2:	619a      	str	r2, [r3, #24]
  }
}
 8008aa4:	bf00      	nop
 8008aa6:	370c      	adds	r7, #12
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	603b      	str	r3, [r7, #0]
 8008abc:	4613      	mov	r3, r2
 8008abe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008ac0:	e03b      	b.n	8008b3a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ac2:	69ba      	ldr	r2, [r7, #24]
 8008ac4:	6839      	ldr	r1, [r7, #0]
 8008ac6:	68f8      	ldr	r0, [r7, #12]
 8008ac8:	f000 f962 	bl	8008d90 <I2C_IsErrorOccurred>
 8008acc:	4603      	mov	r3, r0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d001      	beq.n	8008ad6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	e041      	b.n	8008b5a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008adc:	d02d      	beq.n	8008b3a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ade:	f7fa fa53 	bl	8002f88 <HAL_GetTick>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	69bb      	ldr	r3, [r7, #24]
 8008ae6:	1ad3      	subs	r3, r2, r3
 8008ae8:	683a      	ldr	r2, [r7, #0]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d302      	bcc.n	8008af4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d122      	bne.n	8008b3a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	699a      	ldr	r2, [r3, #24]
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	4013      	ands	r3, r2
 8008afe:	68ba      	ldr	r2, [r7, #8]
 8008b00:	429a      	cmp	r2, r3
 8008b02:	bf0c      	ite	eq
 8008b04:	2301      	moveq	r3, #1
 8008b06:	2300      	movne	r3, #0
 8008b08:	b2db      	uxtb	r3, r3
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	79fb      	ldrb	r3, [r7, #7]
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d113      	bne.n	8008b3a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b16:	f043 0220 	orr.w	r2, r3, #32
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2220      	movs	r2, #32
 8008b22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2200      	movs	r2, #0
 8008b32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	e00f      	b.n	8008b5a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	699a      	ldr	r2, [r3, #24]
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	4013      	ands	r3, r2
 8008b44:	68ba      	ldr	r2, [r7, #8]
 8008b46:	429a      	cmp	r2, r3
 8008b48:	bf0c      	ite	eq
 8008b4a:	2301      	moveq	r3, #1
 8008b4c:	2300      	movne	r3, #0
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	461a      	mov	r2, r3
 8008b52:	79fb      	ldrb	r3, [r7, #7]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d0b4      	beq.n	8008ac2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3710      	adds	r7, #16
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}

08008b62 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b084      	sub	sp, #16
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	60f8      	str	r0, [r7, #12]
 8008b6a:	60b9      	str	r1, [r7, #8]
 8008b6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008b6e:	e033      	b.n	8008bd8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	68b9      	ldr	r1, [r7, #8]
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f000 f90b 	bl	8008d90 <I2C_IsErrorOccurred>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d001      	beq.n	8008b84 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	e031      	b.n	8008be8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b8a:	d025      	beq.n	8008bd8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b8c:	f7fa f9fc 	bl	8002f88 <HAL_GetTick>
 8008b90:	4602      	mov	r2, r0
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	68ba      	ldr	r2, [r7, #8]
 8008b98:	429a      	cmp	r2, r3
 8008b9a:	d302      	bcc.n	8008ba2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d11a      	bne.n	8008bd8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	699b      	ldr	r3, [r3, #24]
 8008ba8:	f003 0302 	and.w	r3, r3, #2
 8008bac:	2b02      	cmp	r3, #2
 8008bae:	d013      	beq.n	8008bd8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008bb4:	f043 0220 	orr.w	r2, r3, #32
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2220      	movs	r2, #32
 8008bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e007      	b.n	8008be8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	699b      	ldr	r3, [r3, #24]
 8008bde:	f003 0302 	and.w	r3, r3, #2
 8008be2:	2b02      	cmp	r3, #2
 8008be4:	d1c4      	bne.n	8008b70 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008be6:	2300      	movs	r3, #0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3710      	adds	r7, #16
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	60f8      	str	r0, [r7, #12]
 8008bf8:	60b9      	str	r1, [r7, #8]
 8008bfa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008bfc:	e02f      	b.n	8008c5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	68b9      	ldr	r1, [r7, #8]
 8008c02:	68f8      	ldr	r0, [r7, #12]
 8008c04:	f000 f8c4 	bl	8008d90 <I2C_IsErrorOccurred>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d001      	beq.n	8008c12 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008c0e:	2301      	movs	r3, #1
 8008c10:	e02d      	b.n	8008c6e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c12:	f7fa f9b9 	bl	8002f88 <HAL_GetTick>
 8008c16:	4602      	mov	r2, r0
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	1ad3      	subs	r3, r2, r3
 8008c1c:	68ba      	ldr	r2, [r7, #8]
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d302      	bcc.n	8008c28 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d11a      	bne.n	8008c5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	699b      	ldr	r3, [r3, #24]
 8008c2e:	f003 0320 	and.w	r3, r3, #32
 8008c32:	2b20      	cmp	r3, #32
 8008c34:	d013      	beq.n	8008c5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008c3a:	f043 0220 	orr.w	r2, r3, #32
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2220      	movs	r2, #32
 8008c46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	2200      	movs	r2, #0
 8008c56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e007      	b.n	8008c6e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	699b      	ldr	r3, [r3, #24]
 8008c64:	f003 0320 	and.w	r3, r3, #32
 8008c68:	2b20      	cmp	r3, #32
 8008c6a:	d1c8      	bne.n	8008bfe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008c6c:	2300      	movs	r3, #0
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3710      	adds	r7, #16
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
	...

08008c78 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b086      	sub	sp, #24
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	60f8      	str	r0, [r7, #12]
 8008c80:	60b9      	str	r1, [r7, #8]
 8008c82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c84:	2300      	movs	r3, #0
 8008c86:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008c88:	e071      	b.n	8008d6e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	68b9      	ldr	r1, [r7, #8]
 8008c8e:	68f8      	ldr	r0, [r7, #12]
 8008c90:	f000 f87e 	bl	8008d90 <I2C_IsErrorOccurred>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d001      	beq.n	8008c9e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	699b      	ldr	r3, [r3, #24]
 8008ca4:	f003 0320 	and.w	r3, r3, #32
 8008ca8:	2b20      	cmp	r3, #32
 8008caa:	d13b      	bne.n	8008d24 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8008cac:	7dfb      	ldrb	r3, [r7, #23]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d138      	bne.n	8008d24 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	699b      	ldr	r3, [r3, #24]
 8008cb8:	f003 0304 	and.w	r3, r3, #4
 8008cbc:	2b04      	cmp	r3, #4
 8008cbe:	d105      	bne.n	8008ccc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d001      	beq.n	8008ccc <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	699b      	ldr	r3, [r3, #24]
 8008cd2:	f003 0310 	and.w	r3, r3, #16
 8008cd6:	2b10      	cmp	r3, #16
 8008cd8:	d121      	bne.n	8008d1e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2210      	movs	r2, #16
 8008ce0:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2204      	movs	r2, #4
 8008ce6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	2220      	movs	r2, #32
 8008cee:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	6859      	ldr	r1, [r3, #4]
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	4b24      	ldr	r3, [pc, #144]	@ (8008d8c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8008cfc:	400b      	ands	r3, r1
 8008cfe:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2220      	movs	r2, #32
 8008d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2200      	movs	r2, #0
 8008d14:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8008d18:	2301      	movs	r3, #1
 8008d1a:	75fb      	strb	r3, [r7, #23]
 8008d1c:	e002      	b.n	8008d24 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	2200      	movs	r2, #0
 8008d22:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8008d24:	f7fa f930 	bl	8002f88 <HAL_GetTick>
 8008d28:	4602      	mov	r2, r0
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	1ad3      	subs	r3, r2, r3
 8008d2e:	68ba      	ldr	r2, [r7, #8]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d302      	bcc.n	8008d3a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d119      	bne.n	8008d6e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8008d3a:	7dfb      	ldrb	r3, [r7, #23]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d116      	bne.n	8008d6e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	699b      	ldr	r3, [r3, #24]
 8008d46:	f003 0304 	and.w	r3, r3, #4
 8008d4a:	2b04      	cmp	r3, #4
 8008d4c:	d00f      	beq.n	8008d6e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d52:	f043 0220 	orr.w	r2, r3, #32
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2220      	movs	r2, #32
 8008d5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2200      	movs	r2, #0
 8008d66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	699b      	ldr	r3, [r3, #24]
 8008d74:	f003 0304 	and.w	r3, r3, #4
 8008d78:	2b04      	cmp	r3, #4
 8008d7a:	d002      	beq.n	8008d82 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8008d7c:	7dfb      	ldrb	r3, [r7, #23]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d083      	beq.n	8008c8a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8008d82:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3718      	adds	r7, #24
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}
 8008d8c:	fe00e800 	.word	0xfe00e800

08008d90 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b08a      	sub	sp, #40	@ 0x28
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	60f8      	str	r0, [r7, #12]
 8008d98:	60b9      	str	r1, [r7, #8]
 8008d9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	699b      	ldr	r3, [r3, #24]
 8008da8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008daa:	2300      	movs	r3, #0
 8008dac:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008db2:	69bb      	ldr	r3, [r7, #24]
 8008db4:	f003 0310 	and.w	r3, r3, #16
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d068      	beq.n	8008e8e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	2210      	movs	r2, #16
 8008dc2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008dc4:	e049      	b.n	8008e5a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dcc:	d045      	beq.n	8008e5a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008dce:	f7fa f8db 	bl	8002f88 <HAL_GetTick>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	1ad3      	subs	r3, r2, r3
 8008dd8:	68ba      	ldr	r2, [r7, #8]
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d302      	bcc.n	8008de4 <I2C_IsErrorOccurred+0x54>
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d13a      	bne.n	8008e5a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008dee:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008df6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	699b      	ldr	r3, [r3, #24]
 8008dfe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008e02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008e06:	d121      	bne.n	8008e4c <I2C_IsErrorOccurred+0xbc>
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008e0e:	d01d      	beq.n	8008e4c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8008e10:	7cfb      	ldrb	r3, [r7, #19]
 8008e12:	2b20      	cmp	r3, #32
 8008e14:	d01a      	beq.n	8008e4c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	685a      	ldr	r2, [r3, #4]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008e24:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8008e26:	f7fa f8af 	bl	8002f88 <HAL_GetTick>
 8008e2a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008e2c:	e00e      	b.n	8008e4c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008e2e:	f7fa f8ab 	bl	8002f88 <HAL_GetTick>
 8008e32:	4602      	mov	r2, r0
 8008e34:	69fb      	ldr	r3, [r7, #28]
 8008e36:	1ad3      	subs	r3, r2, r3
 8008e38:	2b19      	cmp	r3, #25
 8008e3a:	d907      	bls.n	8008e4c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008e3c:	6a3b      	ldr	r3, [r7, #32]
 8008e3e:	f043 0320 	orr.w	r3, r3, #32
 8008e42:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8008e4a:	e006      	b.n	8008e5a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	699b      	ldr	r3, [r3, #24]
 8008e52:	f003 0320 	and.w	r3, r3, #32
 8008e56:	2b20      	cmp	r3, #32
 8008e58:	d1e9      	bne.n	8008e2e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	699b      	ldr	r3, [r3, #24]
 8008e60:	f003 0320 	and.w	r3, r3, #32
 8008e64:	2b20      	cmp	r3, #32
 8008e66:	d003      	beq.n	8008e70 <I2C_IsErrorOccurred+0xe0>
 8008e68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d0aa      	beq.n	8008dc6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008e70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d103      	bne.n	8008e80 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	2220      	movs	r2, #32
 8008e7e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008e80:	6a3b      	ldr	r3, [r7, #32]
 8008e82:	f043 0304 	orr.w	r3, r3, #4
 8008e86:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8008e88:	2301      	movs	r3, #1
 8008e8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	699b      	ldr	r3, [r3, #24]
 8008e94:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008e96:	69bb      	ldr	r3, [r7, #24]
 8008e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d00b      	beq.n	8008eb8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8008ea0:	6a3b      	ldr	r3, [r7, #32]
 8008ea2:	f043 0301 	orr.w	r3, r3, #1
 8008ea6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008eb0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d00b      	beq.n	8008eda <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8008ec2:	6a3b      	ldr	r3, [r7, #32]
 8008ec4:	f043 0308 	orr.w	r3, r3, #8
 8008ec8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008ed2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008eda:	69bb      	ldr	r3, [r7, #24]
 8008edc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d00b      	beq.n	8008efc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8008ee4:	6a3b      	ldr	r3, [r7, #32]
 8008ee6:	f043 0302 	orr.w	r3, r3, #2
 8008eea:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008ef4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8008efc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d01c      	beq.n	8008f3e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008f04:	68f8      	ldr	r0, [r7, #12]
 8008f06:	f7ff fdaf 	bl	8008a68 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	6859      	ldr	r1, [r3, #4]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	4b0d      	ldr	r3, [pc, #52]	@ (8008f4c <I2C_IsErrorOccurred+0x1bc>)
 8008f16:	400b      	ands	r3, r1
 8008f18:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008f1e:	6a3b      	ldr	r3, [r7, #32]
 8008f20:	431a      	orrs	r2, r3
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	2220      	movs	r2, #32
 8008f2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	2200      	movs	r2, #0
 8008f32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8008f3e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3728      	adds	r7, #40	@ 0x28
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	fe00e800 	.word	0xfe00e800

08008f50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b087      	sub	sp, #28
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	60f8      	str	r0, [r7, #12]
 8008f58:	607b      	str	r3, [r7, #4]
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	817b      	strh	r3, [r7, #10]
 8008f5e:	4613      	mov	r3, r2
 8008f60:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008f62:	897b      	ldrh	r3, [r7, #10]
 8008f64:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008f68:	7a7b      	ldrb	r3, [r7, #9]
 8008f6a:	041b      	lsls	r3, r3, #16
 8008f6c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008f70:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008f76:	6a3b      	ldr	r3, [r7, #32]
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008f7e:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	685a      	ldr	r2, [r3, #4]
 8008f86:	6a3b      	ldr	r3, [r7, #32]
 8008f88:	0d5b      	lsrs	r3, r3, #21
 8008f8a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8008f8e:	4b08      	ldr	r3, [pc, #32]	@ (8008fb0 <I2C_TransferConfig+0x60>)
 8008f90:	430b      	orrs	r3, r1
 8008f92:	43db      	mvns	r3, r3
 8008f94:	ea02 0103 	and.w	r1, r2, r3
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	697a      	ldr	r2, [r7, #20]
 8008f9e:	430a      	orrs	r2, r1
 8008fa0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008fa2:	bf00      	nop
 8008fa4:	371c      	adds	r7, #28
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr
 8008fae:	bf00      	nop
 8008fb0:	03ff63ff 	.word	0x03ff63ff

08008fb4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b083      	sub	sp, #12
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	2b20      	cmp	r3, #32
 8008fc8:	d138      	bne.n	800903c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d101      	bne.n	8008fd8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008fd4:	2302      	movs	r3, #2
 8008fd6:	e032      	b.n	800903e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2224      	movs	r2, #36	@ 0x24
 8008fe4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f022 0201 	bic.w	r2, r2, #1
 8008ff6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	681a      	ldr	r2, [r3, #0]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8009006:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	6819      	ldr	r1, [r3, #0]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	683a      	ldr	r2, [r7, #0]
 8009014:	430a      	orrs	r2, r1
 8009016:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f042 0201 	orr.w	r2, r2, #1
 8009026:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2220      	movs	r2, #32
 800902c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8009038:	2300      	movs	r3, #0
 800903a:	e000      	b.n	800903e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800903c:	2302      	movs	r3, #2
  }
}
 800903e:	4618      	mov	r0, r3
 8009040:	370c      	adds	r7, #12
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr

0800904a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800904a:	b480      	push	{r7}
 800904c:	b085      	sub	sp, #20
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
 8009052:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800905a:	b2db      	uxtb	r3, r3
 800905c:	2b20      	cmp	r3, #32
 800905e:	d139      	bne.n	80090d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8009066:	2b01      	cmp	r3, #1
 8009068:	d101      	bne.n	800906e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800906a:	2302      	movs	r3, #2
 800906c:	e033      	b.n	80090d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2201      	movs	r2, #1
 8009072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2224      	movs	r2, #36	@ 0x24
 800907a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	681a      	ldr	r2, [r3, #0]
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f022 0201 	bic.w	r2, r2, #1
 800908c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800909c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	021b      	lsls	r3, r3, #8
 80090a2:	68fa      	ldr	r2, [r7, #12]
 80090a4:	4313      	orrs	r3, r2
 80090a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	68fa      	ldr	r2, [r7, #12]
 80090ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f042 0201 	orr.w	r2, r2, #1
 80090be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2220      	movs	r2, #32
 80090c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80090d0:	2300      	movs	r3, #0
 80090d2:	e000      	b.n	80090d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80090d4:	2302      	movs	r3, #2
  }
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3714      	adds	r7, #20
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr

080090e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80090e2:	b580      	push	{r7, lr}
 80090e4:	b086      	sub	sp, #24
 80090e6:	af02      	add	r7, sp, #8
 80090e8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d101      	bne.n	80090f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80090f0:	2301      	movs	r3, #1
 80090f2:	e0fe      	b.n	80092f2 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d106      	bne.n	800910e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f009 fd31 	bl	8012b70 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2203      	movs	r2, #3
 8009112:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4618      	mov	r0, r3
 800911c:	f006 f949 	bl	800f3b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6818      	ldr	r0, [r3, #0]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	7c1a      	ldrb	r2, [r3, #16]
 8009128:	f88d 2000 	strb.w	r2, [sp]
 800912c:	3304      	adds	r3, #4
 800912e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009130:	f006 f81a 	bl	800f168 <USB_CoreInit>
 8009134:	4603      	mov	r3, r0
 8009136:	2b00      	cmp	r3, #0
 8009138:	d005      	beq.n	8009146 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2202      	movs	r2, #2
 800913e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009142:	2301      	movs	r3, #1
 8009144:	e0d5      	b.n	80092f2 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	2100      	movs	r1, #0
 800914c:	4618      	mov	r0, r3
 800914e:	f006 f941 	bl	800f3d4 <USB_SetCurrentMode>
 8009152:	4603      	mov	r3, r0
 8009154:	2b00      	cmp	r3, #0
 8009156:	d005      	beq.n	8009164 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2202      	movs	r2, #2
 800915c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009160:	2301      	movs	r3, #1
 8009162:	e0c6      	b.n	80092f2 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009164:	2300      	movs	r3, #0
 8009166:	73fb      	strb	r3, [r7, #15]
 8009168:	e04a      	b.n	8009200 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800916a:	7bfa      	ldrb	r2, [r7, #15]
 800916c:	6879      	ldr	r1, [r7, #4]
 800916e:	4613      	mov	r3, r2
 8009170:	00db      	lsls	r3, r3, #3
 8009172:	4413      	add	r3, r2
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	440b      	add	r3, r1
 8009178:	3315      	adds	r3, #21
 800917a:	2201      	movs	r2, #1
 800917c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800917e:	7bfa      	ldrb	r2, [r7, #15]
 8009180:	6879      	ldr	r1, [r7, #4]
 8009182:	4613      	mov	r3, r2
 8009184:	00db      	lsls	r3, r3, #3
 8009186:	4413      	add	r3, r2
 8009188:	009b      	lsls	r3, r3, #2
 800918a:	440b      	add	r3, r1
 800918c:	3314      	adds	r3, #20
 800918e:	7bfa      	ldrb	r2, [r7, #15]
 8009190:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8009192:	7bfa      	ldrb	r2, [r7, #15]
 8009194:	7bfb      	ldrb	r3, [r7, #15]
 8009196:	b298      	uxth	r0, r3
 8009198:	6879      	ldr	r1, [r7, #4]
 800919a:	4613      	mov	r3, r2
 800919c:	00db      	lsls	r3, r3, #3
 800919e:	4413      	add	r3, r2
 80091a0:	009b      	lsls	r3, r3, #2
 80091a2:	440b      	add	r3, r1
 80091a4:	332e      	adds	r3, #46	@ 0x2e
 80091a6:	4602      	mov	r2, r0
 80091a8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80091aa:	7bfa      	ldrb	r2, [r7, #15]
 80091ac:	6879      	ldr	r1, [r7, #4]
 80091ae:	4613      	mov	r3, r2
 80091b0:	00db      	lsls	r3, r3, #3
 80091b2:	4413      	add	r3, r2
 80091b4:	009b      	lsls	r3, r3, #2
 80091b6:	440b      	add	r3, r1
 80091b8:	3318      	adds	r3, #24
 80091ba:	2200      	movs	r2, #0
 80091bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80091be:	7bfa      	ldrb	r2, [r7, #15]
 80091c0:	6879      	ldr	r1, [r7, #4]
 80091c2:	4613      	mov	r3, r2
 80091c4:	00db      	lsls	r3, r3, #3
 80091c6:	4413      	add	r3, r2
 80091c8:	009b      	lsls	r3, r3, #2
 80091ca:	440b      	add	r3, r1
 80091cc:	331c      	adds	r3, #28
 80091ce:	2200      	movs	r2, #0
 80091d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80091d2:	7bfa      	ldrb	r2, [r7, #15]
 80091d4:	6879      	ldr	r1, [r7, #4]
 80091d6:	4613      	mov	r3, r2
 80091d8:	00db      	lsls	r3, r3, #3
 80091da:	4413      	add	r3, r2
 80091dc:	009b      	lsls	r3, r3, #2
 80091de:	440b      	add	r3, r1
 80091e0:	3320      	adds	r3, #32
 80091e2:	2200      	movs	r2, #0
 80091e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80091e6:	7bfa      	ldrb	r2, [r7, #15]
 80091e8:	6879      	ldr	r1, [r7, #4]
 80091ea:	4613      	mov	r3, r2
 80091ec:	00db      	lsls	r3, r3, #3
 80091ee:	4413      	add	r3, r2
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	440b      	add	r3, r1
 80091f4:	3324      	adds	r3, #36	@ 0x24
 80091f6:	2200      	movs	r2, #0
 80091f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80091fa:	7bfb      	ldrb	r3, [r7, #15]
 80091fc:	3301      	adds	r3, #1
 80091fe:	73fb      	strb	r3, [r7, #15]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	791b      	ldrb	r3, [r3, #4]
 8009204:	7bfa      	ldrb	r2, [r7, #15]
 8009206:	429a      	cmp	r2, r3
 8009208:	d3af      	bcc.n	800916a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800920a:	2300      	movs	r3, #0
 800920c:	73fb      	strb	r3, [r7, #15]
 800920e:	e044      	b.n	800929a <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009210:	7bfa      	ldrb	r2, [r7, #15]
 8009212:	6879      	ldr	r1, [r7, #4]
 8009214:	4613      	mov	r3, r2
 8009216:	00db      	lsls	r3, r3, #3
 8009218:	4413      	add	r3, r2
 800921a:	009b      	lsls	r3, r3, #2
 800921c:	440b      	add	r3, r1
 800921e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8009222:	2200      	movs	r2, #0
 8009224:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009226:	7bfa      	ldrb	r2, [r7, #15]
 8009228:	6879      	ldr	r1, [r7, #4]
 800922a:	4613      	mov	r3, r2
 800922c:	00db      	lsls	r3, r3, #3
 800922e:	4413      	add	r3, r2
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	440b      	add	r3, r1
 8009234:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8009238:	7bfa      	ldrb	r2, [r7, #15]
 800923a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800923c:	7bfa      	ldrb	r2, [r7, #15]
 800923e:	6879      	ldr	r1, [r7, #4]
 8009240:	4613      	mov	r3, r2
 8009242:	00db      	lsls	r3, r3, #3
 8009244:	4413      	add	r3, r2
 8009246:	009b      	lsls	r3, r3, #2
 8009248:	440b      	add	r3, r1
 800924a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800924e:	2200      	movs	r2, #0
 8009250:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009252:	7bfa      	ldrb	r2, [r7, #15]
 8009254:	6879      	ldr	r1, [r7, #4]
 8009256:	4613      	mov	r3, r2
 8009258:	00db      	lsls	r3, r3, #3
 800925a:	4413      	add	r3, r2
 800925c:	009b      	lsls	r3, r3, #2
 800925e:	440b      	add	r3, r1
 8009260:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8009264:	2200      	movs	r2, #0
 8009266:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009268:	7bfa      	ldrb	r2, [r7, #15]
 800926a:	6879      	ldr	r1, [r7, #4]
 800926c:	4613      	mov	r3, r2
 800926e:	00db      	lsls	r3, r3, #3
 8009270:	4413      	add	r3, r2
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	440b      	add	r3, r1
 8009276:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800927a:	2200      	movs	r2, #0
 800927c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800927e:	7bfa      	ldrb	r2, [r7, #15]
 8009280:	6879      	ldr	r1, [r7, #4]
 8009282:	4613      	mov	r3, r2
 8009284:	00db      	lsls	r3, r3, #3
 8009286:	4413      	add	r3, r2
 8009288:	009b      	lsls	r3, r3, #2
 800928a:	440b      	add	r3, r1
 800928c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8009290:	2200      	movs	r2, #0
 8009292:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009294:	7bfb      	ldrb	r3, [r7, #15]
 8009296:	3301      	adds	r3, #1
 8009298:	73fb      	strb	r3, [r7, #15]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	791b      	ldrb	r3, [r3, #4]
 800929e:	7bfa      	ldrb	r2, [r7, #15]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d3b5      	bcc.n	8009210 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	6818      	ldr	r0, [r3, #0]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	7c1a      	ldrb	r2, [r3, #16]
 80092ac:	f88d 2000 	strb.w	r2, [sp]
 80092b0:	3304      	adds	r3, #4
 80092b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80092b4:	f006 f8da 	bl	800f46c <USB_DevInit>
 80092b8:	4603      	mov	r3, r0
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d005      	beq.n	80092ca <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2202      	movs	r2, #2
 80092c2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80092c6:	2301      	movs	r3, #1
 80092c8:	e013      	b.n	80092f2 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	7b1b      	ldrb	r3, [r3, #12]
 80092dc:	2b01      	cmp	r3, #1
 80092de:	d102      	bne.n	80092e6 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f001 f96f 	bl	800a5c4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	4618      	mov	r0, r3
 80092ec:	f007 f91d 	bl	801052a <USB_DevDisconnect>

  return HAL_OK;
 80092f0:	2300      	movs	r3, #0
}
 80092f2:	4618      	mov	r0, r3
 80092f4:	3710      	adds	r7, #16
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}

080092fa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80092fa:	b580      	push	{r7, lr}
 80092fc:	b084      	sub	sp, #16
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800930e:	2b01      	cmp	r3, #1
 8009310:	d101      	bne.n	8009316 <HAL_PCD_Start+0x1c>
 8009312:	2302      	movs	r3, #2
 8009314:	e022      	b.n	800935c <HAL_PCD_Start+0x62>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2201      	movs	r2, #1
 800931a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009326:	2b00      	cmp	r3, #0
 8009328:	d009      	beq.n	800933e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800932e:	2b01      	cmp	r3, #1
 8009330:	d105      	bne.n	800933e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009336:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	4618      	mov	r0, r3
 8009344:	f006 f824 	bl	800f390 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	4618      	mov	r0, r3
 800934e:	f007 f8cb 	bl	80104e8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2200      	movs	r2, #0
 8009356:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800935a:	2300      	movs	r3, #0
}
 800935c:	4618      	mov	r0, r3
 800935e:	3710      	adds	r7, #16
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009364:	b590      	push	{r4, r7, lr}
 8009366:	b08d      	sub	sp, #52	@ 0x34
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009372:	6a3b      	ldr	r3, [r7, #32]
 8009374:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4618      	mov	r0, r3
 800937c:	f007 f989 	bl	8010692 <USB_GetMode>
 8009380:	4603      	mov	r3, r0
 8009382:	2b00      	cmp	r3, #0
 8009384:	f040 84b9 	bne.w	8009cfa <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	4618      	mov	r0, r3
 800938e:	f007 f8ed 	bl	801056c <USB_ReadInterrupts>
 8009392:	4603      	mov	r3, r0
 8009394:	2b00      	cmp	r3, #0
 8009396:	f000 84af 	beq.w	8009cf8 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800939a:	69fb      	ldr	r3, [r7, #28]
 800939c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	0a1b      	lsrs	r3, r3, #8
 80093a4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4618      	mov	r0, r3
 80093b4:	f007 f8da 	bl	801056c <USB_ReadInterrupts>
 80093b8:	4603      	mov	r3, r0
 80093ba:	f003 0302 	and.w	r3, r3, #2
 80093be:	2b02      	cmp	r3, #2
 80093c0:	d107      	bne.n	80093d2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	695a      	ldr	r2, [r3, #20]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f002 0202 	and.w	r2, r2, #2
 80093d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4618      	mov	r0, r3
 80093d8:	f007 f8c8 	bl	801056c <USB_ReadInterrupts>
 80093dc:	4603      	mov	r3, r0
 80093de:	f003 0310 	and.w	r3, r3, #16
 80093e2:	2b10      	cmp	r3, #16
 80093e4:	d161      	bne.n	80094aa <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	699a      	ldr	r2, [r3, #24]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f022 0210 	bic.w	r2, r2, #16
 80093f4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80093f6:	6a3b      	ldr	r3, [r7, #32]
 80093f8:	6a1b      	ldr	r3, [r3, #32]
 80093fa:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80093fc:	69bb      	ldr	r3, [r7, #24]
 80093fe:	f003 020f 	and.w	r2, r3, #15
 8009402:	4613      	mov	r3, r2
 8009404:	00db      	lsls	r3, r3, #3
 8009406:	4413      	add	r3, r2
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800940e:	687a      	ldr	r2, [r7, #4]
 8009410:	4413      	add	r3, r2
 8009412:	3304      	adds	r3, #4
 8009414:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009416:	69bb      	ldr	r3, [r7, #24]
 8009418:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800941c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009420:	d124      	bne.n	800946c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009422:	69ba      	ldr	r2, [r7, #24]
 8009424:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8009428:	4013      	ands	r3, r2
 800942a:	2b00      	cmp	r3, #0
 800942c:	d035      	beq.n	800949a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009432:	69bb      	ldr	r3, [r7, #24]
 8009434:	091b      	lsrs	r3, r3, #4
 8009436:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009438:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800943c:	b29b      	uxth	r3, r3
 800943e:	461a      	mov	r2, r3
 8009440:	6a38      	ldr	r0, [r7, #32]
 8009442:	f006 feff 	bl	8010244 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009446:	697b      	ldr	r3, [r7, #20]
 8009448:	68da      	ldr	r2, [r3, #12]
 800944a:	69bb      	ldr	r3, [r7, #24]
 800944c:	091b      	lsrs	r3, r3, #4
 800944e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009452:	441a      	add	r2, r3
 8009454:	697b      	ldr	r3, [r7, #20]
 8009456:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	695a      	ldr	r2, [r3, #20]
 800945c:	69bb      	ldr	r3, [r7, #24]
 800945e:	091b      	lsrs	r3, r3, #4
 8009460:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009464:	441a      	add	r2, r3
 8009466:	697b      	ldr	r3, [r7, #20]
 8009468:	615a      	str	r2, [r3, #20]
 800946a:	e016      	b.n	800949a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8009472:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8009476:	d110      	bne.n	800949a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800947e:	2208      	movs	r2, #8
 8009480:	4619      	mov	r1, r3
 8009482:	6a38      	ldr	r0, [r7, #32]
 8009484:	f006 fede 	bl	8010244 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009488:	697b      	ldr	r3, [r7, #20]
 800948a:	695a      	ldr	r2, [r3, #20]
 800948c:	69bb      	ldr	r3, [r7, #24]
 800948e:	091b      	lsrs	r3, r3, #4
 8009490:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009494:	441a      	add	r2, r3
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	699a      	ldr	r2, [r3, #24]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	f042 0210 	orr.w	r2, r2, #16
 80094a8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4618      	mov	r0, r3
 80094b0:	f007 f85c 	bl	801056c <USB_ReadInterrupts>
 80094b4:	4603      	mov	r3, r0
 80094b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80094ba:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80094be:	f040 80a7 	bne.w	8009610 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80094c2:	2300      	movs	r3, #0
 80094c4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4618      	mov	r0, r3
 80094cc:	f007 f861 	bl	8010592 <USB_ReadDevAllOutEpInterrupt>
 80094d0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80094d2:	e099      	b.n	8009608 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80094d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d6:	f003 0301 	and.w	r3, r3, #1
 80094da:	2b00      	cmp	r3, #0
 80094dc:	f000 808e 	beq.w	80095fc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094e6:	b2d2      	uxtb	r2, r2
 80094e8:	4611      	mov	r1, r2
 80094ea:	4618      	mov	r0, r3
 80094ec:	f007 f885 	bl	80105fa <USB_ReadDevOutEPInterrupt>
 80094f0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	f003 0301 	and.w	r3, r3, #1
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d00c      	beq.n	8009516 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80094fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094fe:	015a      	lsls	r2, r3, #5
 8009500:	69fb      	ldr	r3, [r7, #28]
 8009502:	4413      	add	r3, r2
 8009504:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009508:	461a      	mov	r2, r3
 800950a:	2301      	movs	r3, #1
 800950c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800950e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 fed1 	bl	800a2b8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009516:	693b      	ldr	r3, [r7, #16]
 8009518:	f003 0308 	and.w	r3, r3, #8
 800951c:	2b00      	cmp	r3, #0
 800951e:	d00c      	beq.n	800953a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009522:	015a      	lsls	r2, r3, #5
 8009524:	69fb      	ldr	r3, [r7, #28]
 8009526:	4413      	add	r3, r2
 8009528:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800952c:	461a      	mov	r2, r3
 800952e:	2308      	movs	r3, #8
 8009530:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009532:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 ffa7 	bl	800a488 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	f003 0310 	and.w	r3, r3, #16
 8009540:	2b00      	cmp	r3, #0
 8009542:	d008      	beq.n	8009556 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009546:	015a      	lsls	r2, r3, #5
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	4413      	add	r3, r2
 800954c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009550:	461a      	mov	r2, r3
 8009552:	2310      	movs	r3, #16
 8009554:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8009556:	693b      	ldr	r3, [r7, #16]
 8009558:	f003 0302 	and.w	r3, r3, #2
 800955c:	2b00      	cmp	r3, #0
 800955e:	d030      	beq.n	80095c2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8009560:	6a3b      	ldr	r3, [r7, #32]
 8009562:	695b      	ldr	r3, [r3, #20]
 8009564:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009568:	2b80      	cmp	r3, #128	@ 0x80
 800956a:	d109      	bne.n	8009580 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800956c:	69fb      	ldr	r3, [r7, #28]
 800956e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	69fa      	ldr	r2, [r7, #28]
 8009576:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800957a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800957e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8009580:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009582:	4613      	mov	r3, r2
 8009584:	00db      	lsls	r3, r3, #3
 8009586:	4413      	add	r3, r2
 8009588:	009b      	lsls	r3, r3, #2
 800958a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	4413      	add	r3, r2
 8009592:	3304      	adds	r3, #4
 8009594:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	78db      	ldrb	r3, [r3, #3]
 800959a:	2b01      	cmp	r3, #1
 800959c:	d108      	bne.n	80095b0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	2200      	movs	r2, #0
 80095a2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80095a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a6:	b2db      	uxtb	r3, r3
 80095a8:	4619      	mov	r1, r3
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f009 fc34 	bl	8012e18 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80095b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095b2:	015a      	lsls	r2, r3, #5
 80095b4:	69fb      	ldr	r3, [r7, #28]
 80095b6:	4413      	add	r3, r2
 80095b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095bc:	461a      	mov	r2, r3
 80095be:	2302      	movs	r3, #2
 80095c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	f003 0320 	and.w	r3, r3, #32
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d008      	beq.n	80095de <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80095cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ce:	015a      	lsls	r2, r3, #5
 80095d0:	69fb      	ldr	r3, [r7, #28]
 80095d2:	4413      	add	r3, r2
 80095d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095d8:	461a      	mov	r2, r3
 80095da:	2320      	movs	r3, #32
 80095dc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d009      	beq.n	80095fc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80095e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ea:	015a      	lsls	r2, r3, #5
 80095ec:	69fb      	ldr	r3, [r7, #28]
 80095ee:	4413      	add	r3, r2
 80095f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095f4:	461a      	mov	r2, r3
 80095f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80095fa:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80095fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095fe:	3301      	adds	r3, #1
 8009600:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8009602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009604:	085b      	lsrs	r3, r3, #1
 8009606:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8009608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800960a:	2b00      	cmp	r3, #0
 800960c:	f47f af62 	bne.w	80094d4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4618      	mov	r0, r3
 8009616:	f006 ffa9 	bl	801056c <USB_ReadInterrupts>
 800961a:	4603      	mov	r3, r0
 800961c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009620:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009624:	f040 80db 	bne.w	80097de <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4618      	mov	r0, r3
 800962e:	f006 ffca 	bl	80105c6 <USB_ReadDevAllInEpInterrupt>
 8009632:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8009634:	2300      	movs	r3, #0
 8009636:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8009638:	e0cd      	b.n	80097d6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800963a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800963c:	f003 0301 	and.w	r3, r3, #1
 8009640:	2b00      	cmp	r3, #0
 8009642:	f000 80c2 	beq.w	80097ca <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800964c:	b2d2      	uxtb	r2, r2
 800964e:	4611      	mov	r1, r2
 8009650:	4618      	mov	r0, r3
 8009652:	f006 fff0 	bl	8010636 <USB_ReadDevInEPInterrupt>
 8009656:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	f003 0301 	and.w	r3, r3, #1
 800965e:	2b00      	cmp	r3, #0
 8009660:	d057      	beq.n	8009712 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009664:	f003 030f 	and.w	r3, r3, #15
 8009668:	2201      	movs	r2, #1
 800966a:	fa02 f303 	lsl.w	r3, r2, r3
 800966e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009670:	69fb      	ldr	r3, [r7, #28]
 8009672:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009676:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	43db      	mvns	r3, r3
 800967c:	69f9      	ldr	r1, [r7, #28]
 800967e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009682:	4013      	ands	r3, r2
 8009684:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009688:	015a      	lsls	r2, r3, #5
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	4413      	add	r3, r2
 800968e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009692:	461a      	mov	r2, r3
 8009694:	2301      	movs	r3, #1
 8009696:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	799b      	ldrb	r3, [r3, #6]
 800969c:	2b01      	cmp	r3, #1
 800969e:	d132      	bne.n	8009706 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80096a0:	6879      	ldr	r1, [r7, #4]
 80096a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096a4:	4613      	mov	r3, r2
 80096a6:	00db      	lsls	r3, r3, #3
 80096a8:	4413      	add	r3, r2
 80096aa:	009b      	lsls	r3, r3, #2
 80096ac:	440b      	add	r3, r1
 80096ae:	3320      	adds	r3, #32
 80096b0:	6819      	ldr	r1, [r3, #0]
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096b6:	4613      	mov	r3, r2
 80096b8:	00db      	lsls	r3, r3, #3
 80096ba:	4413      	add	r3, r2
 80096bc:	009b      	lsls	r3, r3, #2
 80096be:	4403      	add	r3, r0
 80096c0:	331c      	adds	r3, #28
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4419      	add	r1, r3
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096ca:	4613      	mov	r3, r2
 80096cc:	00db      	lsls	r3, r3, #3
 80096ce:	4413      	add	r3, r2
 80096d0:	009b      	lsls	r3, r3, #2
 80096d2:	4403      	add	r3, r0
 80096d4:	3320      	adds	r3, #32
 80096d6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80096d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d113      	bne.n	8009706 <HAL_PCD_IRQHandler+0x3a2>
 80096de:	6879      	ldr	r1, [r7, #4]
 80096e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096e2:	4613      	mov	r3, r2
 80096e4:	00db      	lsls	r3, r3, #3
 80096e6:	4413      	add	r3, r2
 80096e8:	009b      	lsls	r3, r3, #2
 80096ea:	440b      	add	r3, r1
 80096ec:	3324      	adds	r3, #36	@ 0x24
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d108      	bne.n	8009706 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6818      	ldr	r0, [r3, #0]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80096fe:	461a      	mov	r2, r3
 8009700:	2101      	movs	r1, #1
 8009702:	f006 fff9 	bl	80106f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009708:	b2db      	uxtb	r3, r3
 800970a:	4619      	mov	r1, r3
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f009 fafe 	bl	8012d0e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	f003 0308 	and.w	r3, r3, #8
 8009718:	2b00      	cmp	r3, #0
 800971a:	d008      	beq.n	800972e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800971c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800971e:	015a      	lsls	r2, r3, #5
 8009720:	69fb      	ldr	r3, [r7, #28]
 8009722:	4413      	add	r3, r2
 8009724:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009728:	461a      	mov	r2, r3
 800972a:	2308      	movs	r3, #8
 800972c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	f003 0310 	and.w	r3, r3, #16
 8009734:	2b00      	cmp	r3, #0
 8009736:	d008      	beq.n	800974a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800973a:	015a      	lsls	r2, r3, #5
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	4413      	add	r3, r2
 8009740:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009744:	461a      	mov	r2, r3
 8009746:	2310      	movs	r3, #16
 8009748:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009750:	2b00      	cmp	r3, #0
 8009752:	d008      	beq.n	8009766 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009756:	015a      	lsls	r2, r3, #5
 8009758:	69fb      	ldr	r3, [r7, #28]
 800975a:	4413      	add	r3, r2
 800975c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009760:	461a      	mov	r2, r3
 8009762:	2340      	movs	r3, #64	@ 0x40
 8009764:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	f003 0302 	and.w	r3, r3, #2
 800976c:	2b00      	cmp	r3, #0
 800976e:	d023      	beq.n	80097b8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8009770:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009772:	6a38      	ldr	r0, [r7, #32]
 8009774:	f005 ffd8 	bl	800f728 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8009778:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800977a:	4613      	mov	r3, r2
 800977c:	00db      	lsls	r3, r3, #3
 800977e:	4413      	add	r3, r2
 8009780:	009b      	lsls	r3, r3, #2
 8009782:	3310      	adds	r3, #16
 8009784:	687a      	ldr	r2, [r7, #4]
 8009786:	4413      	add	r3, r2
 8009788:	3304      	adds	r3, #4
 800978a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	78db      	ldrb	r3, [r3, #3]
 8009790:	2b01      	cmp	r3, #1
 8009792:	d108      	bne.n	80097a6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	2200      	movs	r2, #0
 8009798:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800979a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800979c:	b2db      	uxtb	r3, r3
 800979e:	4619      	mov	r1, r3
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f009 fb4b 	bl	8012e3c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80097a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097a8:	015a      	lsls	r2, r3, #5
 80097aa:	69fb      	ldr	r3, [r7, #28]
 80097ac:	4413      	add	r3, r2
 80097ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097b2:	461a      	mov	r2, r3
 80097b4:	2302      	movs	r3, #2
 80097b6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d003      	beq.n	80097ca <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80097c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 fcea 	bl	800a19e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80097ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097cc:	3301      	adds	r3, #1
 80097ce:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80097d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097d2:	085b      	lsrs	r3, r3, #1
 80097d4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80097d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097d8:	2b00      	cmp	r3, #0
 80097da:	f47f af2e 	bne.w	800963a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4618      	mov	r0, r3
 80097e4:	f006 fec2 	bl	801056c <USB_ReadInterrupts>
 80097e8:	4603      	mov	r3, r0
 80097ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80097ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80097f2:	d122      	bne.n	800983a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80097f4:	69fb      	ldr	r3, [r7, #28]
 80097f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097fa:	685b      	ldr	r3, [r3, #4]
 80097fc:	69fa      	ldr	r2, [r7, #28]
 80097fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009802:	f023 0301 	bic.w	r3, r3, #1
 8009806:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800980e:	2b01      	cmp	r3, #1
 8009810:	d108      	bne.n	8009824 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2200      	movs	r2, #0
 8009816:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800981a:	2100      	movs	r1, #0
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f000 fef5 	bl	800a60c <HAL_PCDEx_LPM_Callback>
 8009822:	e002      	b.n	800982a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f009 fae9 	bl	8012dfc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	695a      	ldr	r2, [r3, #20]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8009838:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4618      	mov	r0, r3
 8009840:	f006 fe94 	bl	801056c <USB_ReadInterrupts>
 8009844:	4603      	mov	r3, r0
 8009846:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800984a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800984e:	d112      	bne.n	8009876 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009850:	69fb      	ldr	r3, [r7, #28]
 8009852:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	f003 0301 	and.w	r3, r3, #1
 800985c:	2b01      	cmp	r3, #1
 800985e:	d102      	bne.n	8009866 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f009 faa5 	bl	8012db0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	695a      	ldr	r2, [r3, #20]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8009874:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4618      	mov	r0, r3
 800987c:	f006 fe76 	bl	801056c <USB_ReadInterrupts>
 8009880:	4603      	mov	r3, r0
 8009882:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009886:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800988a:	d121      	bne.n	80098d0 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	695a      	ldr	r2, [r3, #20]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800989a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d111      	bne.n	80098ca <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2201      	movs	r2, #1
 80098aa:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098b4:	089b      	lsrs	r3, r3, #2
 80098b6:	f003 020f 	and.w	r2, r3, #15
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80098c0:	2101      	movs	r1, #1
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f000 fea2 	bl	800a60c <HAL_PCDEx_LPM_Callback>
 80098c8:	e002      	b.n	80098d0 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f009 fa70 	bl	8012db0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4618      	mov	r0, r3
 80098d6:	f006 fe49 	bl	801056c <USB_ReadInterrupts>
 80098da:	4603      	mov	r3, r0
 80098dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80098e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098e4:	f040 80b7 	bne.w	8009a56 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80098e8:	69fb      	ldr	r3, [r7, #28]
 80098ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	69fa      	ldr	r2, [r7, #28]
 80098f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80098f6:	f023 0301 	bic.w	r3, r3, #1
 80098fa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	2110      	movs	r1, #16
 8009902:	4618      	mov	r0, r3
 8009904:	f005 ff10 	bl	800f728 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009908:	2300      	movs	r3, #0
 800990a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800990c:	e046      	b.n	800999c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800990e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009910:	015a      	lsls	r2, r3, #5
 8009912:	69fb      	ldr	r3, [r7, #28]
 8009914:	4413      	add	r3, r2
 8009916:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800991a:	461a      	mov	r2, r3
 800991c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009920:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009924:	015a      	lsls	r2, r3, #5
 8009926:	69fb      	ldr	r3, [r7, #28]
 8009928:	4413      	add	r3, r2
 800992a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009932:	0151      	lsls	r1, r2, #5
 8009934:	69fa      	ldr	r2, [r7, #28]
 8009936:	440a      	add	r2, r1
 8009938:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800993c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009940:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009944:	015a      	lsls	r2, r3, #5
 8009946:	69fb      	ldr	r3, [r7, #28]
 8009948:	4413      	add	r3, r2
 800994a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800994e:	461a      	mov	r2, r3
 8009950:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009954:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009958:	015a      	lsls	r2, r3, #5
 800995a:	69fb      	ldr	r3, [r7, #28]
 800995c:	4413      	add	r3, r2
 800995e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009966:	0151      	lsls	r1, r2, #5
 8009968:	69fa      	ldr	r2, [r7, #28]
 800996a:	440a      	add	r2, r1
 800996c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009970:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009974:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009976:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009978:	015a      	lsls	r2, r3, #5
 800997a:	69fb      	ldr	r3, [r7, #28]
 800997c:	4413      	add	r3, r2
 800997e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009986:	0151      	lsls	r1, r2, #5
 8009988:	69fa      	ldr	r2, [r7, #28]
 800998a:	440a      	add	r2, r1
 800998c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009990:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009994:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009998:	3301      	adds	r3, #1
 800999a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	791b      	ldrb	r3, [r3, #4]
 80099a0:	461a      	mov	r2, r3
 80099a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d3b2      	bcc.n	800990e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80099a8:	69fb      	ldr	r3, [r7, #28]
 80099aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099ae:	69db      	ldr	r3, [r3, #28]
 80099b0:	69fa      	ldr	r2, [r7, #28]
 80099b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80099b6:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80099ba:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	7bdb      	ldrb	r3, [r3, #15]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d016      	beq.n	80099f2 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80099c4:	69fb      	ldr	r3, [r7, #28]
 80099c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80099ce:	69fa      	ldr	r2, [r7, #28]
 80099d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80099d4:	f043 030b 	orr.w	r3, r3, #11
 80099d8:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80099dc:	69fb      	ldr	r3, [r7, #28]
 80099de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80099e4:	69fa      	ldr	r2, [r7, #28]
 80099e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80099ea:	f043 030b 	orr.w	r3, r3, #11
 80099ee:	6453      	str	r3, [r2, #68]	@ 0x44
 80099f0:	e015      	b.n	8009a1e <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80099f2:	69fb      	ldr	r3, [r7, #28]
 80099f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099f8:	695a      	ldr	r2, [r3, #20]
 80099fa:	69fb      	ldr	r3, [r7, #28]
 80099fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a00:	4619      	mov	r1, r3
 8009a02:	f242 032b 	movw	r3, #8235	@ 0x202b
 8009a06:	4313      	orrs	r3, r2
 8009a08:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009a0a:	69fb      	ldr	r3, [r7, #28]
 8009a0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a10:	691b      	ldr	r3, [r3, #16]
 8009a12:	69fa      	ldr	r2, [r7, #28]
 8009a14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a18:	f043 030b 	orr.w	r3, r3, #11
 8009a1c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009a1e:	69fb      	ldr	r3, [r7, #28]
 8009a20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	69fa      	ldr	r2, [r7, #28]
 8009a28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a2c:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009a30:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	6818      	ldr	r0, [r3, #0]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009a40:	461a      	mov	r2, r3
 8009a42:	f006 fe59 	bl	80106f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	695a      	ldr	r2, [r3, #20]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8009a54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f006 fd86 	bl	801056c <USB_ReadInterrupts>
 8009a60:	4603      	mov	r3, r0
 8009a62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009a66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a6a:	d123      	bne.n	8009ab4 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4618      	mov	r0, r3
 8009a72:	f006 fe1d 	bl	80106b0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	f005 fecd 	bl	800f81a <USB_GetDevSpeed>
 8009a80:	4603      	mov	r3, r0
 8009a82:	461a      	mov	r2, r3
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681c      	ldr	r4, [r3, #0]
 8009a8c:	f001 fde0 	bl	800b650 <HAL_RCC_GetHCLKFreq>
 8009a90:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009a96:	461a      	mov	r2, r3
 8009a98:	4620      	mov	r0, r4
 8009a9a:	f005 fbd7 	bl	800f24c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f009 f95d 	bl	8012d5e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	695a      	ldr	r2, [r3, #20]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8009ab2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f006 fd57 	bl	801056c <USB_ReadInterrupts>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	f003 0308 	and.w	r3, r3, #8
 8009ac4:	2b08      	cmp	r3, #8
 8009ac6:	d10a      	bne.n	8009ade <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f009 f93a 	bl	8012d42 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	695a      	ldr	r2, [r3, #20]
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f002 0208 	and.w	r2, r2, #8
 8009adc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f006 fd42 	bl	801056c <USB_ReadInterrupts>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009aee:	2b80      	cmp	r3, #128	@ 0x80
 8009af0:	d123      	bne.n	8009b3a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8009af2:	6a3b      	ldr	r3, [r7, #32]
 8009af4:	699b      	ldr	r3, [r3, #24]
 8009af6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009afa:	6a3b      	ldr	r3, [r7, #32]
 8009afc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009afe:	2301      	movs	r3, #1
 8009b00:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b02:	e014      	b.n	8009b2e <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009b04:	6879      	ldr	r1, [r7, #4]
 8009b06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b08:	4613      	mov	r3, r2
 8009b0a:	00db      	lsls	r3, r3, #3
 8009b0c:	4413      	add	r3, r2
 8009b0e:	009b      	lsls	r3, r3, #2
 8009b10:	440b      	add	r3, r1
 8009b12:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8009b16:	781b      	ldrb	r3, [r3, #0]
 8009b18:	2b01      	cmp	r3, #1
 8009b1a:	d105      	bne.n	8009b28 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b1e:	b2db      	uxtb	r3, r3
 8009b20:	4619      	mov	r1, r3
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f000 fb0a 	bl	800a13c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b2a:	3301      	adds	r3, #1
 8009b2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	791b      	ldrb	r3, [r3, #4]
 8009b32:	461a      	mov	r2, r3
 8009b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d3e4      	bcc.n	8009b04 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f006 fd14 	bl	801056c <USB_ReadInterrupts>
 8009b44:	4603      	mov	r3, r0
 8009b46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009b4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009b4e:	d13c      	bne.n	8009bca <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009b50:	2301      	movs	r3, #1
 8009b52:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b54:	e02b      	b.n	8009bae <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b58:	015a      	lsls	r2, r3, #5
 8009b5a:	69fb      	ldr	r3, [r7, #28]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009b66:	6879      	ldr	r1, [r7, #4]
 8009b68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b6a:	4613      	mov	r3, r2
 8009b6c:	00db      	lsls	r3, r3, #3
 8009b6e:	4413      	add	r3, r2
 8009b70:	009b      	lsls	r3, r3, #2
 8009b72:	440b      	add	r3, r1
 8009b74:	3318      	adds	r3, #24
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d115      	bne.n	8009ba8 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8009b7c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	da12      	bge.n	8009ba8 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009b82:	6879      	ldr	r1, [r7, #4]
 8009b84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b86:	4613      	mov	r3, r2
 8009b88:	00db      	lsls	r3, r3, #3
 8009b8a:	4413      	add	r3, r2
 8009b8c:	009b      	lsls	r3, r3, #2
 8009b8e:	440b      	add	r3, r1
 8009b90:	3317      	adds	r3, #23
 8009b92:	2201      	movs	r2, #1
 8009b94:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8009b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	4619      	mov	r1, r3
 8009ba2:	6878      	ldr	r0, [r7, #4]
 8009ba4:	f000 faca 	bl	800a13c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009baa:	3301      	adds	r3, #1
 8009bac:	627b      	str	r3, [r7, #36]	@ 0x24
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	791b      	ldrb	r3, [r3, #4]
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d3cd      	bcc.n	8009b56 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	695a      	ldr	r2, [r3, #20]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8009bc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f006 fccc 	bl	801056c <USB_ReadInterrupts>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009bda:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009bde:	d156      	bne.n	8009c8e <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009be0:	2301      	movs	r3, #1
 8009be2:	627b      	str	r3, [r7, #36]	@ 0x24
 8009be4:	e045      	b.n	8009c72 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8009be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009be8:	015a      	lsls	r2, r3, #5
 8009bea:	69fb      	ldr	r3, [r7, #28]
 8009bec:	4413      	add	r3, r2
 8009bee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009bf6:	6879      	ldr	r1, [r7, #4]
 8009bf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009bfa:	4613      	mov	r3, r2
 8009bfc:	00db      	lsls	r3, r3, #3
 8009bfe:	4413      	add	r3, r2
 8009c00:	009b      	lsls	r3, r3, #2
 8009c02:	440b      	add	r3, r1
 8009c04:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d12e      	bne.n	8009c6c <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009c0e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	da2b      	bge.n	8009c6c <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8009c14:	69bb      	ldr	r3, [r7, #24]
 8009c16:	0c1a      	lsrs	r2, r3, #16
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8009c1e:	4053      	eors	r3, r2
 8009c20:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d121      	bne.n	8009c6c <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8009c28:	6879      	ldr	r1, [r7, #4]
 8009c2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c2c:	4613      	mov	r3, r2
 8009c2e:	00db      	lsls	r3, r3, #3
 8009c30:	4413      	add	r3, r2
 8009c32:	009b      	lsls	r3, r3, #2
 8009c34:	440b      	add	r3, r1
 8009c36:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8009c3a:	2201      	movs	r2, #1
 8009c3c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009c3e:	6a3b      	ldr	r3, [r7, #32]
 8009c40:	699b      	ldr	r3, [r3, #24]
 8009c42:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009c46:	6a3b      	ldr	r3, [r7, #32]
 8009c48:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8009c4a:	6a3b      	ldr	r3, [r7, #32]
 8009c4c:	695b      	ldr	r3, [r3, #20]
 8009c4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d10a      	bne.n	8009c6c <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8009c56:	69fb      	ldr	r3, [r7, #28]
 8009c58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	69fa      	ldr	r2, [r7, #28]
 8009c60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009c64:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009c68:	6053      	str	r3, [r2, #4]
            break;
 8009c6a:	e008      	b.n	8009c7e <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c6e:	3301      	adds	r3, #1
 8009c70:	627b      	str	r3, [r7, #36]	@ 0x24
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	791b      	ldrb	r3, [r3, #4]
 8009c76:	461a      	mov	r2, r3
 8009c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c7a:	4293      	cmp	r3, r2
 8009c7c:	d3b3      	bcc.n	8009be6 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	695a      	ldr	r2, [r3, #20]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8009c8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4618      	mov	r0, r3
 8009c94:	f006 fc6a 	bl	801056c <USB_ReadInterrupts>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ca2:	d10a      	bne.n	8009cba <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009ca4:	6878      	ldr	r0, [r7, #4]
 8009ca6:	f009 f8db 	bl	8012e60 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	695a      	ldr	r2, [r3, #20]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8009cb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f006 fc54 	bl	801056c <USB_ReadInterrupts>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	f003 0304 	and.w	r3, r3, #4
 8009cca:	2b04      	cmp	r3, #4
 8009ccc:	d115      	bne.n	8009cfa <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	f003 0304 	and.w	r3, r3, #4
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d002      	beq.n	8009ce6 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f009 f8cb 	bl	8012e7c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	6859      	ldr	r1, [r3, #4]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	69ba      	ldr	r2, [r7, #24]
 8009cf2:	430a      	orrs	r2, r1
 8009cf4:	605a      	str	r2, [r3, #4]
 8009cf6:	e000      	b.n	8009cfa <HAL_PCD_IRQHandler+0x996>
      return;
 8009cf8:	bf00      	nop
    }
  }
}
 8009cfa:	3734      	adds	r7, #52	@ 0x34
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd90      	pop	{r4, r7, pc}

08009d00 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b082      	sub	sp, #8
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	460b      	mov	r3, r1
 8009d0a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009d12:	2b01      	cmp	r3, #1
 8009d14:	d101      	bne.n	8009d1a <HAL_PCD_SetAddress+0x1a>
 8009d16:	2302      	movs	r3, #2
 8009d18:	e012      	b.n	8009d40 <HAL_PCD_SetAddress+0x40>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2201      	movs	r2, #1
 8009d1e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	78fa      	ldrb	r2, [r7, #3]
 8009d26:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	78fa      	ldrb	r2, [r7, #3]
 8009d2e:	4611      	mov	r1, r2
 8009d30:	4618      	mov	r0, r3
 8009d32:	f006 fbb3 	bl	801049c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2200      	movs	r2, #0
 8009d3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8009d3e:	2300      	movs	r3, #0
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3708      	adds	r7, #8
 8009d44:	46bd      	mov	sp, r7
 8009d46:	bd80      	pop	{r7, pc}

08009d48 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009d48:	b580      	push	{r7, lr}
 8009d4a:	b084      	sub	sp, #16
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	4608      	mov	r0, r1
 8009d52:	4611      	mov	r1, r2
 8009d54:	461a      	mov	r2, r3
 8009d56:	4603      	mov	r3, r0
 8009d58:	70fb      	strb	r3, [r7, #3]
 8009d5a:	460b      	mov	r3, r1
 8009d5c:	803b      	strh	r3, [r7, #0]
 8009d5e:	4613      	mov	r3, r2
 8009d60:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8009d62:	2300      	movs	r3, #0
 8009d64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009d66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	da0f      	bge.n	8009d8e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009d6e:	78fb      	ldrb	r3, [r7, #3]
 8009d70:	f003 020f 	and.w	r2, r3, #15
 8009d74:	4613      	mov	r3, r2
 8009d76:	00db      	lsls	r3, r3, #3
 8009d78:	4413      	add	r3, r2
 8009d7a:	009b      	lsls	r3, r3, #2
 8009d7c:	3310      	adds	r3, #16
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	4413      	add	r3, r2
 8009d82:	3304      	adds	r3, #4
 8009d84:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2201      	movs	r2, #1
 8009d8a:	705a      	strb	r2, [r3, #1]
 8009d8c:	e00f      	b.n	8009dae <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009d8e:	78fb      	ldrb	r3, [r7, #3]
 8009d90:	f003 020f 	and.w	r2, r3, #15
 8009d94:	4613      	mov	r3, r2
 8009d96:	00db      	lsls	r3, r3, #3
 8009d98:	4413      	add	r3, r2
 8009d9a:	009b      	lsls	r3, r3, #2
 8009d9c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	4413      	add	r3, r2
 8009da4:	3304      	adds	r3, #4
 8009da6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2200      	movs	r2, #0
 8009dac:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009dae:	78fb      	ldrb	r3, [r7, #3]
 8009db0:	f003 030f 	and.w	r3, r3, #15
 8009db4:	b2da      	uxtb	r2, r3
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8009dba:	883b      	ldrh	r3, [r7, #0]
 8009dbc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	78ba      	ldrb	r2, [r7, #2]
 8009dc8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	785b      	ldrb	r3, [r3, #1]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d004      	beq.n	8009ddc <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	781b      	ldrb	r3, [r3, #0]
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009ddc:	78bb      	ldrb	r3, [r7, #2]
 8009dde:	2b02      	cmp	r3, #2
 8009de0:	d102      	bne.n	8009de8 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2200      	movs	r2, #0
 8009de6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d101      	bne.n	8009df6 <HAL_PCD_EP_Open+0xae>
 8009df2:	2302      	movs	r3, #2
 8009df4:	e00e      	b.n	8009e14 <HAL_PCD_EP_Open+0xcc>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	2201      	movs	r2, #1
 8009dfa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	68f9      	ldr	r1, [r7, #12]
 8009e04:	4618      	mov	r0, r3
 8009e06:	f005 fd2d 	bl	800f864 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8009e12:	7afb      	ldrb	r3, [r7, #11]
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3710      	adds	r7, #16
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	bd80      	pop	{r7, pc}

08009e1c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b084      	sub	sp, #16
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	460b      	mov	r3, r1
 8009e26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009e28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	da0f      	bge.n	8009e50 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009e30:	78fb      	ldrb	r3, [r7, #3]
 8009e32:	f003 020f 	and.w	r2, r3, #15
 8009e36:	4613      	mov	r3, r2
 8009e38:	00db      	lsls	r3, r3, #3
 8009e3a:	4413      	add	r3, r2
 8009e3c:	009b      	lsls	r3, r3, #2
 8009e3e:	3310      	adds	r3, #16
 8009e40:	687a      	ldr	r2, [r7, #4]
 8009e42:	4413      	add	r3, r2
 8009e44:	3304      	adds	r3, #4
 8009e46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	705a      	strb	r2, [r3, #1]
 8009e4e:	e00f      	b.n	8009e70 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009e50:	78fb      	ldrb	r3, [r7, #3]
 8009e52:	f003 020f 	and.w	r2, r3, #15
 8009e56:	4613      	mov	r3, r2
 8009e58:	00db      	lsls	r3, r3, #3
 8009e5a:	4413      	add	r3, r2
 8009e5c:	009b      	lsls	r3, r3, #2
 8009e5e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	4413      	add	r3, r2
 8009e66:	3304      	adds	r3, #4
 8009e68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8009e70:	78fb      	ldrb	r3, [r7, #3]
 8009e72:	f003 030f 	and.w	r3, r3, #15
 8009e76:	b2da      	uxtb	r2, r3
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009e82:	2b01      	cmp	r3, #1
 8009e84:	d101      	bne.n	8009e8a <HAL_PCD_EP_Close+0x6e>
 8009e86:	2302      	movs	r3, #2
 8009e88:	e00e      	b.n	8009ea8 <HAL_PCD_EP_Close+0x8c>
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	68f9      	ldr	r1, [r7, #12]
 8009e98:	4618      	mov	r0, r3
 8009e9a:	f005 fd6b 	bl	800f974 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8009ea6:	2300      	movs	r3, #0
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3710      	adds	r7, #16
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b086      	sub	sp, #24
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	60f8      	str	r0, [r7, #12]
 8009eb8:	607a      	str	r2, [r7, #4]
 8009eba:	603b      	str	r3, [r7, #0]
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009ec0:	7afb      	ldrb	r3, [r7, #11]
 8009ec2:	f003 020f 	and.w	r2, r3, #15
 8009ec6:	4613      	mov	r3, r2
 8009ec8:	00db      	lsls	r3, r3, #3
 8009eca:	4413      	add	r3, r2
 8009ecc:	009b      	lsls	r3, r3, #2
 8009ece:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009ed2:	68fa      	ldr	r2, [r7, #12]
 8009ed4:	4413      	add	r3, r2
 8009ed6:	3304      	adds	r3, #4
 8009ed8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009eda:	697b      	ldr	r3, [r7, #20]
 8009edc:	687a      	ldr	r2, [r7, #4]
 8009ede:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	683a      	ldr	r2, [r7, #0]
 8009ee4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	2200      	movs	r2, #0
 8009ef0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009ef2:	7afb      	ldrb	r3, [r7, #11]
 8009ef4:	f003 030f 	and.w	r3, r3, #15
 8009ef8:	b2da      	uxtb	r2, r3
 8009efa:	697b      	ldr	r3, [r7, #20]
 8009efc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	799b      	ldrb	r3, [r3, #6]
 8009f02:	2b01      	cmp	r3, #1
 8009f04:	d102      	bne.n	8009f0c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	6818      	ldr	r0, [r3, #0]
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	799b      	ldrb	r3, [r3, #6]
 8009f14:	461a      	mov	r2, r3
 8009f16:	6979      	ldr	r1, [r7, #20]
 8009f18:	f005 fe08 	bl	800fb2c <USB_EPStartXfer>

  return HAL_OK;
 8009f1c:	2300      	movs	r3, #0
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3718      	adds	r7, #24
 8009f22:	46bd      	mov	sp, r7
 8009f24:	bd80      	pop	{r7, pc}

08009f26 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8009f26:	b480      	push	{r7}
 8009f28:	b083      	sub	sp, #12
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
 8009f2e:	460b      	mov	r3, r1
 8009f30:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009f32:	78fb      	ldrb	r3, [r7, #3]
 8009f34:	f003 020f 	and.w	r2, r3, #15
 8009f38:	6879      	ldr	r1, [r7, #4]
 8009f3a:	4613      	mov	r3, r2
 8009f3c:	00db      	lsls	r3, r3, #3
 8009f3e:	4413      	add	r3, r2
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	440b      	add	r3, r1
 8009f44:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8009f48:	681b      	ldr	r3, [r3, #0]
}
 8009f4a:	4618      	mov	r0, r3
 8009f4c:	370c      	adds	r7, #12
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f54:	4770      	bx	lr

08009f56 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009f56:	b580      	push	{r7, lr}
 8009f58:	b086      	sub	sp, #24
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	60f8      	str	r0, [r7, #12]
 8009f5e:	607a      	str	r2, [r7, #4]
 8009f60:	603b      	str	r3, [r7, #0]
 8009f62:	460b      	mov	r3, r1
 8009f64:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009f66:	7afb      	ldrb	r3, [r7, #11]
 8009f68:	f003 020f 	and.w	r2, r3, #15
 8009f6c:	4613      	mov	r3, r2
 8009f6e:	00db      	lsls	r3, r3, #3
 8009f70:	4413      	add	r3, r2
 8009f72:	009b      	lsls	r3, r3, #2
 8009f74:	3310      	adds	r3, #16
 8009f76:	68fa      	ldr	r2, [r7, #12]
 8009f78:	4413      	add	r3, r2
 8009f7a:	3304      	adds	r3, #4
 8009f7c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009f84:	697b      	ldr	r3, [r7, #20]
 8009f86:	683a      	ldr	r2, [r7, #0]
 8009f88:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8009f8a:	697b      	ldr	r3, [r7, #20]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	2201      	movs	r2, #1
 8009f94:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009f96:	7afb      	ldrb	r3, [r7, #11]
 8009f98:	f003 030f 	and.w	r3, r3, #15
 8009f9c:	b2da      	uxtb	r2, r3
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	799b      	ldrb	r3, [r3, #6]
 8009fa6:	2b01      	cmp	r3, #1
 8009fa8:	d102      	bne.n	8009fb0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009faa:	687a      	ldr	r2, [r7, #4]
 8009fac:	697b      	ldr	r3, [r7, #20]
 8009fae:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	6818      	ldr	r0, [r3, #0]
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	799b      	ldrb	r3, [r3, #6]
 8009fb8:	461a      	mov	r2, r3
 8009fba:	6979      	ldr	r1, [r7, #20]
 8009fbc:	f005 fdb6 	bl	800fb2c <USB_EPStartXfer>

  return HAL_OK;
 8009fc0:	2300      	movs	r3, #0
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3718      	adds	r7, #24
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}

08009fca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009fca:	b580      	push	{r7, lr}
 8009fcc:	b084      	sub	sp, #16
 8009fce:	af00      	add	r7, sp, #0
 8009fd0:	6078      	str	r0, [r7, #4]
 8009fd2:	460b      	mov	r3, r1
 8009fd4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009fd6:	78fb      	ldrb	r3, [r7, #3]
 8009fd8:	f003 030f 	and.w	r3, r3, #15
 8009fdc:	687a      	ldr	r2, [r7, #4]
 8009fde:	7912      	ldrb	r2, [r2, #4]
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d901      	bls.n	8009fe8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	e04f      	b.n	800a088 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009fe8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	da0f      	bge.n	800a010 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009ff0:	78fb      	ldrb	r3, [r7, #3]
 8009ff2:	f003 020f 	and.w	r2, r3, #15
 8009ff6:	4613      	mov	r3, r2
 8009ff8:	00db      	lsls	r3, r3, #3
 8009ffa:	4413      	add	r3, r2
 8009ffc:	009b      	lsls	r3, r3, #2
 8009ffe:	3310      	adds	r3, #16
 800a000:	687a      	ldr	r2, [r7, #4]
 800a002:	4413      	add	r3, r2
 800a004:	3304      	adds	r3, #4
 800a006:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2201      	movs	r2, #1
 800a00c:	705a      	strb	r2, [r3, #1]
 800a00e:	e00d      	b.n	800a02c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a010:	78fa      	ldrb	r2, [r7, #3]
 800a012:	4613      	mov	r3, r2
 800a014:	00db      	lsls	r3, r3, #3
 800a016:	4413      	add	r3, r2
 800a018:	009b      	lsls	r3, r3, #2
 800a01a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a01e:	687a      	ldr	r2, [r7, #4]
 800a020:	4413      	add	r3, r2
 800a022:	3304      	adds	r3, #4
 800a024:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2200      	movs	r2, #0
 800a02a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2201      	movs	r2, #1
 800a030:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a032:	78fb      	ldrb	r3, [r7, #3]
 800a034:	f003 030f 	and.w	r3, r3, #15
 800a038:	b2da      	uxtb	r2, r3
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800a044:	2b01      	cmp	r3, #1
 800a046:	d101      	bne.n	800a04c <HAL_PCD_EP_SetStall+0x82>
 800a048:	2302      	movs	r3, #2
 800a04a:	e01d      	b.n	800a088 <HAL_PCD_EP_SetStall+0xbe>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2201      	movs	r2, #1
 800a050:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	68f9      	ldr	r1, [r7, #12]
 800a05a:	4618      	mov	r0, r3
 800a05c:	f006 f94a 	bl	80102f4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a060:	78fb      	ldrb	r3, [r7, #3]
 800a062:	f003 030f 	and.w	r3, r3, #15
 800a066:	2b00      	cmp	r3, #0
 800a068:	d109      	bne.n	800a07e <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	6818      	ldr	r0, [r3, #0]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	7999      	ldrb	r1, [r3, #6]
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a078:	461a      	mov	r2, r3
 800a07a:	f006 fb3d 	bl	80106f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2200      	movs	r2, #0
 800a082:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800a086:	2300      	movs	r3, #0
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3710      	adds	r7, #16
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b084      	sub	sp, #16
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	460b      	mov	r3, r1
 800a09a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a09c:	78fb      	ldrb	r3, [r7, #3]
 800a09e:	f003 030f 	and.w	r3, r3, #15
 800a0a2:	687a      	ldr	r2, [r7, #4]
 800a0a4:	7912      	ldrb	r2, [r2, #4]
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d901      	bls.n	800a0ae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	e042      	b.n	800a134 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a0ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	da0f      	bge.n	800a0d6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a0b6:	78fb      	ldrb	r3, [r7, #3]
 800a0b8:	f003 020f 	and.w	r2, r3, #15
 800a0bc:	4613      	mov	r3, r2
 800a0be:	00db      	lsls	r3, r3, #3
 800a0c0:	4413      	add	r3, r2
 800a0c2:	009b      	lsls	r3, r3, #2
 800a0c4:	3310      	adds	r3, #16
 800a0c6:	687a      	ldr	r2, [r7, #4]
 800a0c8:	4413      	add	r3, r2
 800a0ca:	3304      	adds	r3, #4
 800a0cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	2201      	movs	r2, #1
 800a0d2:	705a      	strb	r2, [r3, #1]
 800a0d4:	e00f      	b.n	800a0f6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a0d6:	78fb      	ldrb	r3, [r7, #3]
 800a0d8:	f003 020f 	and.w	r2, r3, #15
 800a0dc:	4613      	mov	r3, r2
 800a0de:	00db      	lsls	r3, r3, #3
 800a0e0:	4413      	add	r3, r2
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	4413      	add	r3, r2
 800a0ec:	3304      	adds	r3, #4
 800a0ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a0fc:	78fb      	ldrb	r3, [r7, #3]
 800a0fe:	f003 030f 	and.w	r3, r3, #15
 800a102:	b2da      	uxtb	r2, r3
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800a10e:	2b01      	cmp	r3, #1
 800a110:	d101      	bne.n	800a116 <HAL_PCD_EP_ClrStall+0x86>
 800a112:	2302      	movs	r3, #2
 800a114:	e00e      	b.n	800a134 <HAL_PCD_EP_ClrStall+0xa4>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2201      	movs	r2, #1
 800a11a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	68f9      	ldr	r1, [r7, #12]
 800a124:	4618      	mov	r0, r3
 800a126:	f006 f953 	bl	80103d0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2200      	movs	r2, #0
 800a12e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800a132:	2300      	movs	r3, #0
}
 800a134:	4618      	mov	r0, r3
 800a136:	3710      	adds	r7, #16
 800a138:	46bd      	mov	sp, r7
 800a13a:	bd80      	pop	{r7, pc}

0800a13c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b084      	sub	sp, #16
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]
 800a144:	460b      	mov	r3, r1
 800a146:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800a148:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	da0c      	bge.n	800a16a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a150:	78fb      	ldrb	r3, [r7, #3]
 800a152:	f003 020f 	and.w	r2, r3, #15
 800a156:	4613      	mov	r3, r2
 800a158:	00db      	lsls	r3, r3, #3
 800a15a:	4413      	add	r3, r2
 800a15c:	009b      	lsls	r3, r3, #2
 800a15e:	3310      	adds	r3, #16
 800a160:	687a      	ldr	r2, [r7, #4]
 800a162:	4413      	add	r3, r2
 800a164:	3304      	adds	r3, #4
 800a166:	60fb      	str	r3, [r7, #12]
 800a168:	e00c      	b.n	800a184 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a16a:	78fb      	ldrb	r3, [r7, #3]
 800a16c:	f003 020f 	and.w	r2, r3, #15
 800a170:	4613      	mov	r3, r2
 800a172:	00db      	lsls	r3, r3, #3
 800a174:	4413      	add	r3, r2
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a17c:	687a      	ldr	r2, [r7, #4]
 800a17e:	4413      	add	r3, r2
 800a180:	3304      	adds	r3, #4
 800a182:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	68f9      	ldr	r1, [r7, #12]
 800a18a:	4618      	mov	r0, r3
 800a18c:	f005 ff72 	bl	8010074 <USB_EPStopXfer>
 800a190:	4603      	mov	r3, r0
 800a192:	72fb      	strb	r3, [r7, #11]

  return ret;
 800a194:	7afb      	ldrb	r3, [r7, #11]
}
 800a196:	4618      	mov	r0, r3
 800a198:	3710      	adds	r7, #16
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}

0800a19e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a19e:	b580      	push	{r7, lr}
 800a1a0:	b08a      	sub	sp, #40	@ 0x28
 800a1a2:	af02      	add	r7, sp, #8
 800a1a4:	6078      	str	r0, [r7, #4]
 800a1a6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a1b2:	683a      	ldr	r2, [r7, #0]
 800a1b4:	4613      	mov	r3, r2
 800a1b6:	00db      	lsls	r3, r3, #3
 800a1b8:	4413      	add	r3, r2
 800a1ba:	009b      	lsls	r3, r3, #2
 800a1bc:	3310      	adds	r3, #16
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	4413      	add	r3, r2
 800a1c2:	3304      	adds	r3, #4
 800a1c4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	695a      	ldr	r2, [r3, #20]
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	691b      	ldr	r3, [r3, #16]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d901      	bls.n	800a1d6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	e06b      	b.n	800a2ae <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	691a      	ldr	r2, [r3, #16]
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	695b      	ldr	r3, [r3, #20]
 800a1de:	1ad3      	subs	r3, r2, r3
 800a1e0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	689b      	ldr	r3, [r3, #8]
 800a1e6:	69fa      	ldr	r2, [r7, #28]
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d902      	bls.n	800a1f2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	689b      	ldr	r3, [r3, #8]
 800a1f0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a1f2:	69fb      	ldr	r3, [r7, #28]
 800a1f4:	3303      	adds	r3, #3
 800a1f6:	089b      	lsrs	r3, r3, #2
 800a1f8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a1fa:	e02a      	b.n	800a252 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	691a      	ldr	r2, [r3, #16]
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	695b      	ldr	r3, [r3, #20]
 800a204:	1ad3      	subs	r3, r2, r3
 800a206:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	689b      	ldr	r3, [r3, #8]
 800a20c:	69fa      	ldr	r2, [r7, #28]
 800a20e:	429a      	cmp	r2, r3
 800a210:	d902      	bls.n	800a218 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	689b      	ldr	r3, [r3, #8]
 800a216:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a218:	69fb      	ldr	r3, [r7, #28]
 800a21a:	3303      	adds	r3, #3
 800a21c:	089b      	lsrs	r3, r3, #2
 800a21e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	68d9      	ldr	r1, [r3, #12]
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	b2da      	uxtb	r2, r3
 800a228:	69fb      	ldr	r3, [r7, #28]
 800a22a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a230:	9300      	str	r3, [sp, #0]
 800a232:	4603      	mov	r3, r0
 800a234:	6978      	ldr	r0, [r7, #20]
 800a236:	f005 ffc7 	bl	80101c8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	68da      	ldr	r2, [r3, #12]
 800a23e:	69fb      	ldr	r3, [r7, #28]
 800a240:	441a      	add	r2, r3
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	695a      	ldr	r2, [r3, #20]
 800a24a:	69fb      	ldr	r3, [r7, #28]
 800a24c:	441a      	add	r2, r3
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	015a      	lsls	r2, r3, #5
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	4413      	add	r3, r2
 800a25a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a25e:	699b      	ldr	r3, [r3, #24]
 800a260:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a262:	69ba      	ldr	r2, [r7, #24]
 800a264:	429a      	cmp	r2, r3
 800a266:	d809      	bhi.n	800a27c <PCD_WriteEmptyTxFifo+0xde>
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	695a      	ldr	r2, [r3, #20]
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a270:	429a      	cmp	r2, r3
 800a272:	d203      	bcs.n	800a27c <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	691b      	ldr	r3, [r3, #16]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d1bf      	bne.n	800a1fc <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	691a      	ldr	r2, [r3, #16]
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	695b      	ldr	r3, [r3, #20]
 800a284:	429a      	cmp	r2, r3
 800a286:	d811      	bhi.n	800a2ac <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	f003 030f 	and.w	r3, r3, #15
 800a28e:	2201      	movs	r2, #1
 800a290:	fa02 f303 	lsl.w	r3, r2, r3
 800a294:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a29c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	43db      	mvns	r3, r3
 800a2a2:	6939      	ldr	r1, [r7, #16]
 800a2a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a2a8:	4013      	ands	r3, r2
 800a2aa:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800a2ac:	2300      	movs	r3, #0
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3720      	adds	r7, #32
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}
	...

0800a2b8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b088      	sub	sp, #32
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2c8:	69fb      	ldr	r3, [r7, #28]
 800a2ca:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a2cc:	69fb      	ldr	r3, [r7, #28]
 800a2ce:	333c      	adds	r3, #60	@ 0x3c
 800a2d0:	3304      	adds	r3, #4
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	015a      	lsls	r2, r3, #5
 800a2da:	69bb      	ldr	r3, [r7, #24]
 800a2dc:	4413      	add	r3, r2
 800a2de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2e2:	689b      	ldr	r3, [r3, #8]
 800a2e4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	799b      	ldrb	r3, [r3, #6]
 800a2ea:	2b01      	cmp	r3, #1
 800a2ec:	d17b      	bne.n	800a3e6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	f003 0308 	and.w	r3, r3, #8
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d015      	beq.n	800a324 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	4a61      	ldr	r2, [pc, #388]	@ (800a480 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	f240 80b9 	bls.w	800a474 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a308:	2b00      	cmp	r3, #0
 800a30a:	f000 80b3 	beq.w	800a474 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	015a      	lsls	r2, r3, #5
 800a312:	69bb      	ldr	r3, [r7, #24]
 800a314:	4413      	add	r3, r2
 800a316:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a31a:	461a      	mov	r2, r3
 800a31c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a320:	6093      	str	r3, [r2, #8]
 800a322:	e0a7      	b.n	800a474 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	f003 0320 	and.w	r3, r3, #32
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d009      	beq.n	800a342 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a32e:	683b      	ldr	r3, [r7, #0]
 800a330:	015a      	lsls	r2, r3, #5
 800a332:	69bb      	ldr	r3, [r7, #24]
 800a334:	4413      	add	r3, r2
 800a336:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a33a:	461a      	mov	r2, r3
 800a33c:	2320      	movs	r3, #32
 800a33e:	6093      	str	r3, [r2, #8]
 800a340:	e098      	b.n	800a474 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a348:	2b00      	cmp	r3, #0
 800a34a:	f040 8093 	bne.w	800a474 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	4a4b      	ldr	r2, [pc, #300]	@ (800a480 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d90f      	bls.n	800a376 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d00a      	beq.n	800a376 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	015a      	lsls	r2, r3, #5
 800a364:	69bb      	ldr	r3, [r7, #24]
 800a366:	4413      	add	r3, r2
 800a368:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a36c:	461a      	mov	r2, r3
 800a36e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a372:	6093      	str	r3, [r2, #8]
 800a374:	e07e      	b.n	800a474 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800a376:	683a      	ldr	r2, [r7, #0]
 800a378:	4613      	mov	r3, r2
 800a37a:	00db      	lsls	r3, r3, #3
 800a37c:	4413      	add	r3, r2
 800a37e:	009b      	lsls	r3, r3, #2
 800a380:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a384:	687a      	ldr	r2, [r7, #4]
 800a386:	4413      	add	r3, r2
 800a388:	3304      	adds	r3, #4
 800a38a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	6a1a      	ldr	r2, [r3, #32]
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	0159      	lsls	r1, r3, #5
 800a394:	69bb      	ldr	r3, [r7, #24]
 800a396:	440b      	add	r3, r1
 800a398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a39c:	691b      	ldr	r3, [r3, #16]
 800a39e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a3a2:	1ad2      	subs	r2, r2, r3
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d114      	bne.n	800a3d8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	691b      	ldr	r3, [r3, #16]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d109      	bne.n	800a3ca <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6818      	ldr	r0, [r3, #0]
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a3c0:	461a      	mov	r2, r3
 800a3c2:	2101      	movs	r1, #1
 800a3c4:	f006 f998 	bl	80106f8 <USB_EP0_OutStart>
 800a3c8:	e006      	b.n	800a3d8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	68da      	ldr	r2, [r3, #12]
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	695b      	ldr	r3, [r3, #20]
 800a3d2:	441a      	add	r2, r3
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	4619      	mov	r1, r3
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f008 fc7a 	bl	8012cd8 <HAL_PCD_DataOutStageCallback>
 800a3e4:	e046      	b.n	800a474 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a3e6:	697b      	ldr	r3, [r7, #20]
 800a3e8:	4a26      	ldr	r2, [pc, #152]	@ (800a484 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d124      	bne.n	800a438 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a3ee:	693b      	ldr	r3, [r7, #16]
 800a3f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d00a      	beq.n	800a40e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	015a      	lsls	r2, r3, #5
 800a3fc:	69bb      	ldr	r3, [r7, #24]
 800a3fe:	4413      	add	r3, r2
 800a400:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a404:	461a      	mov	r2, r3
 800a406:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a40a:	6093      	str	r3, [r2, #8]
 800a40c:	e032      	b.n	800a474 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	f003 0320 	and.w	r3, r3, #32
 800a414:	2b00      	cmp	r3, #0
 800a416:	d008      	beq.n	800a42a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	015a      	lsls	r2, r3, #5
 800a41c:	69bb      	ldr	r3, [r7, #24]
 800a41e:	4413      	add	r3, r2
 800a420:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a424:	461a      	mov	r2, r3
 800a426:	2320      	movs	r3, #32
 800a428:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	b2db      	uxtb	r3, r3
 800a42e:	4619      	mov	r1, r3
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f008 fc51 	bl	8012cd8 <HAL_PCD_DataOutStageCallback>
 800a436:	e01d      	b.n	800a474 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d114      	bne.n	800a468 <PCD_EP_OutXfrComplete_int+0x1b0>
 800a43e:	6879      	ldr	r1, [r7, #4]
 800a440:	683a      	ldr	r2, [r7, #0]
 800a442:	4613      	mov	r3, r2
 800a444:	00db      	lsls	r3, r3, #3
 800a446:	4413      	add	r3, r2
 800a448:	009b      	lsls	r3, r3, #2
 800a44a:	440b      	add	r3, r1
 800a44c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d108      	bne.n	800a468 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	6818      	ldr	r0, [r3, #0]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a460:	461a      	mov	r2, r3
 800a462:	2100      	movs	r1, #0
 800a464:	f006 f948 	bl	80106f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	b2db      	uxtb	r3, r3
 800a46c:	4619      	mov	r1, r3
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f008 fc32 	bl	8012cd8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a474:	2300      	movs	r3, #0
}
 800a476:	4618      	mov	r0, r3
 800a478:	3720      	adds	r7, #32
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	bf00      	nop
 800a480:	4f54300a 	.word	0x4f54300a
 800a484:	4f54310a 	.word	0x4f54310a

0800a488 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b086      	sub	sp, #24
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a498:	697b      	ldr	r3, [r7, #20]
 800a49a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	333c      	adds	r3, #60	@ 0x3c
 800a4a0:	3304      	adds	r3, #4
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	015a      	lsls	r2, r3, #5
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	4413      	add	r3, r2
 800a4ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4b2:	689b      	ldr	r3, [r3, #8]
 800a4b4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	4a15      	ldr	r2, [pc, #84]	@ (800a510 <PCD_EP_OutSetupPacket_int+0x88>)
 800a4ba:	4293      	cmp	r3, r2
 800a4bc:	d90e      	bls.n	800a4dc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a4be:	68bb      	ldr	r3, [r7, #8]
 800a4c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d009      	beq.n	800a4dc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	015a      	lsls	r2, r3, #5
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	4413      	add	r3, r2
 800a4d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4d4:	461a      	mov	r2, r3
 800a4d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a4da:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f008 fbe9 	bl	8012cb4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	4a0a      	ldr	r2, [pc, #40]	@ (800a510 <PCD_EP_OutSetupPacket_int+0x88>)
 800a4e6:	4293      	cmp	r3, r2
 800a4e8:	d90c      	bls.n	800a504 <PCD_EP_OutSetupPacket_int+0x7c>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	799b      	ldrb	r3, [r3, #6]
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	d108      	bne.n	800a504 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6818      	ldr	r0, [r3, #0]
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a4fc:	461a      	mov	r2, r3
 800a4fe:	2101      	movs	r1, #1
 800a500:	f006 f8fa 	bl	80106f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a504:	2300      	movs	r3, #0
}
 800a506:	4618      	mov	r0, r3
 800a508:	3718      	adds	r7, #24
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}
 800a50e:	bf00      	nop
 800a510:	4f54300a 	.word	0x4f54300a

0800a514 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a514:	b480      	push	{r7}
 800a516:	b085      	sub	sp, #20
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	460b      	mov	r3, r1
 800a51e:	70fb      	strb	r3, [r7, #3]
 800a520:	4613      	mov	r3, r2
 800a522:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a52a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a52c:	78fb      	ldrb	r3, [r7, #3]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d107      	bne.n	800a542 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a532:	883b      	ldrh	r3, [r7, #0]
 800a534:	0419      	lsls	r1, r3, #16
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	68ba      	ldr	r2, [r7, #8]
 800a53c:	430a      	orrs	r2, r1
 800a53e:	629a      	str	r2, [r3, #40]	@ 0x28
 800a540:	e028      	b.n	800a594 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a548:	0c1b      	lsrs	r3, r3, #16
 800a54a:	68ba      	ldr	r2, [r7, #8]
 800a54c:	4413      	add	r3, r2
 800a54e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a550:	2300      	movs	r3, #0
 800a552:	73fb      	strb	r3, [r7, #15]
 800a554:	e00d      	b.n	800a572 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	7bfb      	ldrb	r3, [r7, #15]
 800a55c:	3340      	adds	r3, #64	@ 0x40
 800a55e:	009b      	lsls	r3, r3, #2
 800a560:	4413      	add	r3, r2
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	0c1b      	lsrs	r3, r3, #16
 800a566:	68ba      	ldr	r2, [r7, #8]
 800a568:	4413      	add	r3, r2
 800a56a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a56c:	7bfb      	ldrb	r3, [r7, #15]
 800a56e:	3301      	adds	r3, #1
 800a570:	73fb      	strb	r3, [r7, #15]
 800a572:	7bfa      	ldrb	r2, [r7, #15]
 800a574:	78fb      	ldrb	r3, [r7, #3]
 800a576:	3b01      	subs	r3, #1
 800a578:	429a      	cmp	r2, r3
 800a57a:	d3ec      	bcc.n	800a556 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a57c:	883b      	ldrh	r3, [r7, #0]
 800a57e:	0418      	lsls	r0, r3, #16
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6819      	ldr	r1, [r3, #0]
 800a584:	78fb      	ldrb	r3, [r7, #3]
 800a586:	3b01      	subs	r3, #1
 800a588:	68ba      	ldr	r2, [r7, #8]
 800a58a:	4302      	orrs	r2, r0
 800a58c:	3340      	adds	r3, #64	@ 0x40
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	440b      	add	r3, r1
 800a592:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a594:	2300      	movs	r3, #0
}
 800a596:	4618      	mov	r0, r3
 800a598:	3714      	adds	r7, #20
 800a59a:	46bd      	mov	sp, r7
 800a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a0:	4770      	bx	lr

0800a5a2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a5a2:	b480      	push	{r7}
 800a5a4:	b083      	sub	sp, #12
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
 800a5aa:	460b      	mov	r3, r1
 800a5ac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	887a      	ldrh	r2, [r7, #2]
 800a5b4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800a5b6:	2300      	movs	r3, #0
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	370c      	adds	r7, #12
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c2:	4770      	bx	lr

0800a5c4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b085      	sub	sp, #20
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2201      	movs	r2, #1
 800a5d6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	699b      	ldr	r3, [r3, #24]
 800a5e6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a5f2:	4b05      	ldr	r3, [pc, #20]	@ (800a608 <HAL_PCDEx_ActivateLPM+0x44>)
 800a5f4:	4313      	orrs	r3, r2
 800a5f6:	68fa      	ldr	r2, [r7, #12]
 800a5f8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800a5fa:	2300      	movs	r3, #0
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3714      	adds	r7, #20
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr
 800a608:	10000003 	.word	0x10000003

0800a60c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	460b      	mov	r3, r1
 800a616:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800a618:	bf00      	nop
 800a61a:	370c      	adds	r7, #12
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr

0800a624 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b084      	sub	sp, #16
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a62c:	4b19      	ldr	r3, [pc, #100]	@ (800a694 <HAL_PWREx_ConfigSupply+0x70>)
 800a62e:	68db      	ldr	r3, [r3, #12]
 800a630:	f003 0304 	and.w	r3, r3, #4
 800a634:	2b04      	cmp	r3, #4
 800a636:	d00a      	beq.n	800a64e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a638:	4b16      	ldr	r3, [pc, #88]	@ (800a694 <HAL_PWREx_ConfigSupply+0x70>)
 800a63a:	68db      	ldr	r3, [r3, #12]
 800a63c:	f003 0307 	and.w	r3, r3, #7
 800a640:	687a      	ldr	r2, [r7, #4]
 800a642:	429a      	cmp	r2, r3
 800a644:	d001      	beq.n	800a64a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a646:	2301      	movs	r3, #1
 800a648:	e01f      	b.n	800a68a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a64a:	2300      	movs	r3, #0
 800a64c:	e01d      	b.n	800a68a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a64e:	4b11      	ldr	r3, [pc, #68]	@ (800a694 <HAL_PWREx_ConfigSupply+0x70>)
 800a650:	68db      	ldr	r3, [r3, #12]
 800a652:	f023 0207 	bic.w	r2, r3, #7
 800a656:	490f      	ldr	r1, [pc, #60]	@ (800a694 <HAL_PWREx_ConfigSupply+0x70>)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	4313      	orrs	r3, r2
 800a65c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a65e:	f7f8 fc93 	bl	8002f88 <HAL_GetTick>
 800a662:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a664:	e009      	b.n	800a67a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a666:	f7f8 fc8f 	bl	8002f88 <HAL_GetTick>
 800a66a:	4602      	mov	r2, r0
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	1ad3      	subs	r3, r2, r3
 800a670:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a674:	d901      	bls.n	800a67a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a676:	2301      	movs	r3, #1
 800a678:	e007      	b.n	800a68a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a67a:	4b06      	ldr	r3, [pc, #24]	@ (800a694 <HAL_PWREx_ConfigSupply+0x70>)
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a682:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a686:	d1ee      	bne.n	800a666 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a688:	2300      	movs	r3, #0
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3710      	adds	r7, #16
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop
 800a694:	58024800 	.word	0x58024800

0800a698 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800a698:	b480      	push	{r7}
 800a69a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800a69c:	4b05      	ldr	r3, [pc, #20]	@ (800a6b4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	4a04      	ldr	r2, [pc, #16]	@ (800a6b4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a6a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a6a6:	60d3      	str	r3, [r2, #12]
}
 800a6a8:	bf00      	nop
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr
 800a6b2:	bf00      	nop
 800a6b4:	58024800 	.word	0x58024800

0800a6b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b08c      	sub	sp, #48	@ 0x30
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d102      	bne.n	800a6cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	f000 bc1f 	b.w	800af0a <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f003 0301 	and.w	r3, r3, #1
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	f000 80b3 	beq.w	800a840 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a6da:	4b95      	ldr	r3, [pc, #596]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a6dc:	691b      	ldr	r3, [r3, #16]
 800a6de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a6e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a6e4:	4b92      	ldr	r3, [pc, #584]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a6e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a6e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a6ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6ec:	2b10      	cmp	r3, #16
 800a6ee:	d007      	beq.n	800a700 <HAL_RCC_OscConfig+0x48>
 800a6f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6f2:	2b18      	cmp	r3, #24
 800a6f4:	d112      	bne.n	800a71c <HAL_RCC_OscConfig+0x64>
 800a6f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6f8:	f003 0303 	and.w	r3, r3, #3
 800a6fc:	2b02      	cmp	r3, #2
 800a6fe:	d10d      	bne.n	800a71c <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a700:	4b8b      	ldr	r3, [pc, #556]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a708:	2b00      	cmp	r3, #0
 800a70a:	f000 8098 	beq.w	800a83e <HAL_RCC_OscConfig+0x186>
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	685b      	ldr	r3, [r3, #4]
 800a712:	2b00      	cmp	r3, #0
 800a714:	f040 8093 	bne.w	800a83e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800a718:	2301      	movs	r3, #1
 800a71a:	e3f6      	b.n	800af0a <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	685b      	ldr	r3, [r3, #4]
 800a720:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a724:	d106      	bne.n	800a734 <HAL_RCC_OscConfig+0x7c>
 800a726:	4b82      	ldr	r3, [pc, #520]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4a81      	ldr	r2, [pc, #516]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a72c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a730:	6013      	str	r3, [r2, #0]
 800a732:	e058      	b.n	800a7e6 <HAL_RCC_OscConfig+0x12e>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d112      	bne.n	800a762 <HAL_RCC_OscConfig+0xaa>
 800a73c:	4b7c      	ldr	r3, [pc, #496]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a7b      	ldr	r2, [pc, #492]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a742:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a746:	6013      	str	r3, [r2, #0]
 800a748:	4b79      	ldr	r3, [pc, #484]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4a78      	ldr	r2, [pc, #480]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a74e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a752:	6013      	str	r3, [r2, #0]
 800a754:	4b76      	ldr	r3, [pc, #472]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4a75      	ldr	r2, [pc, #468]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a75a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a75e:	6013      	str	r3, [r2, #0]
 800a760:	e041      	b.n	800a7e6 <HAL_RCC_OscConfig+0x12e>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a76a:	d112      	bne.n	800a792 <HAL_RCC_OscConfig+0xda>
 800a76c:	4b70      	ldr	r3, [pc, #448]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a6f      	ldr	r2, [pc, #444]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a772:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a776:	6013      	str	r3, [r2, #0]
 800a778:	4b6d      	ldr	r3, [pc, #436]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4a6c      	ldr	r2, [pc, #432]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a77e:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a782:	6013      	str	r3, [r2, #0]
 800a784:	4b6a      	ldr	r3, [pc, #424]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	4a69      	ldr	r2, [pc, #420]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a78a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a78e:	6013      	str	r3, [r2, #0]
 800a790:	e029      	b.n	800a7e6 <HAL_RCC_OscConfig+0x12e>
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	685b      	ldr	r3, [r3, #4]
 800a796:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800a79a:	d112      	bne.n	800a7c2 <HAL_RCC_OscConfig+0x10a>
 800a79c:	4b64      	ldr	r3, [pc, #400]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	4a63      	ldr	r2, [pc, #396]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a7a2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a7a6:	6013      	str	r3, [r2, #0]
 800a7a8:	4b61      	ldr	r3, [pc, #388]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4a60      	ldr	r2, [pc, #384]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a7ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a7b2:	6013      	str	r3, [r2, #0]
 800a7b4:	4b5e      	ldr	r3, [pc, #376]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	4a5d      	ldr	r2, [pc, #372]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a7ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a7be:	6013      	str	r3, [r2, #0]
 800a7c0:	e011      	b.n	800a7e6 <HAL_RCC_OscConfig+0x12e>
 800a7c2:	4b5b      	ldr	r3, [pc, #364]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	4a5a      	ldr	r2, [pc, #360]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a7c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a7cc:	6013      	str	r3, [r2, #0]
 800a7ce:	4b58      	ldr	r3, [pc, #352]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	4a57      	ldr	r2, [pc, #348]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a7d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a7d8:	6013      	str	r3, [r2, #0]
 800a7da:	4b55      	ldr	r3, [pc, #340]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a54      	ldr	r2, [pc, #336]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a7e0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a7e4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	685b      	ldr	r3, [r3, #4]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d013      	beq.n	800a816 <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a7ee:	f7f8 fbcb 	bl	8002f88 <HAL_GetTick>
 800a7f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a7f4:	e008      	b.n	800a808 <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a7f6:	f7f8 fbc7 	bl	8002f88 <HAL_GetTick>
 800a7fa:	4602      	mov	r2, r0
 800a7fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7fe:	1ad3      	subs	r3, r2, r3
 800a800:	2b64      	cmp	r3, #100	@ 0x64
 800a802:	d901      	bls.n	800a808 <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800a804:	2303      	movs	r3, #3
 800a806:	e380      	b.n	800af0a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a808:	4b49      	ldr	r3, [pc, #292]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a810:	2b00      	cmp	r3, #0
 800a812:	d0f0      	beq.n	800a7f6 <HAL_RCC_OscConfig+0x13e>
 800a814:	e014      	b.n	800a840 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a816:	f7f8 fbb7 	bl	8002f88 <HAL_GetTick>
 800a81a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a81c:	e008      	b.n	800a830 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a81e:	f7f8 fbb3 	bl	8002f88 <HAL_GetTick>
 800a822:	4602      	mov	r2, r0
 800a824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a826:	1ad3      	subs	r3, r2, r3
 800a828:	2b64      	cmp	r3, #100	@ 0x64
 800a82a:	d901      	bls.n	800a830 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800a82c:	2303      	movs	r3, #3
 800a82e:	e36c      	b.n	800af0a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a830:	4b3f      	ldr	r3, [pc, #252]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d1f0      	bne.n	800a81e <HAL_RCC_OscConfig+0x166>
 800a83c:	e000      	b.n	800a840 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a83e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f003 0302 	and.w	r3, r3, #2
 800a848:	2b00      	cmp	r3, #0
 800a84a:	f000 808c 	beq.w	800a966 <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a84e:	4b38      	ldr	r3, [pc, #224]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a850:	691b      	ldr	r3, [r3, #16]
 800a852:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a856:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a858:	4b35      	ldr	r3, [pc, #212]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a85a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a85c:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a85e:	6a3b      	ldr	r3, [r7, #32]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d007      	beq.n	800a874 <HAL_RCC_OscConfig+0x1bc>
 800a864:	6a3b      	ldr	r3, [r7, #32]
 800a866:	2b18      	cmp	r3, #24
 800a868:	d137      	bne.n	800a8da <HAL_RCC_OscConfig+0x222>
 800a86a:	69fb      	ldr	r3, [r7, #28]
 800a86c:	f003 0303 	and.w	r3, r3, #3
 800a870:	2b00      	cmp	r3, #0
 800a872:	d132      	bne.n	800a8da <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a874:	4b2e      	ldr	r3, [pc, #184]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f003 0304 	and.w	r3, r3, #4
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d005      	beq.n	800a88c <HAL_RCC_OscConfig+0x1d4>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	68db      	ldr	r3, [r3, #12]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d101      	bne.n	800a88c <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800a888:	2301      	movs	r3, #1
 800a88a:	e33e      	b.n	800af0a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a88c:	4b28      	ldr	r3, [pc, #160]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f023 0219 	bic.w	r2, r3, #25
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	68db      	ldr	r3, [r3, #12]
 800a898:	4925      	ldr	r1, [pc, #148]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a89a:	4313      	orrs	r3, r2
 800a89c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a89e:	f7f8 fb73 	bl	8002f88 <HAL_GetTick>
 800a8a2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a8a4:	e008      	b.n	800a8b8 <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a8a6:	f7f8 fb6f 	bl	8002f88 <HAL_GetTick>
 800a8aa:	4602      	mov	r2, r0
 800a8ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8ae:	1ad3      	subs	r3, r2, r3
 800a8b0:	2b02      	cmp	r3, #2
 800a8b2:	d901      	bls.n	800a8b8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800a8b4:	2303      	movs	r3, #3
 800a8b6:	e328      	b.n	800af0a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a8b8:	4b1d      	ldr	r3, [pc, #116]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	f003 0304 	and.w	r3, r3, #4
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d0f0      	beq.n	800a8a6 <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a8c4:	4b1a      	ldr	r3, [pc, #104]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	691b      	ldr	r3, [r3, #16]
 800a8d0:	061b      	lsls	r3, r3, #24
 800a8d2:	4917      	ldr	r1, [pc, #92]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a8d8:	e045      	b.n	800a966 <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	68db      	ldr	r3, [r3, #12]
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d028      	beq.n	800a934 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a8e2:	4b13      	ldr	r3, [pc, #76]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f023 0219 	bic.w	r2, r3, #25
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	68db      	ldr	r3, [r3, #12]
 800a8ee:	4910      	ldr	r1, [pc, #64]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8f4:	f7f8 fb48 	bl	8002f88 <HAL_GetTick>
 800a8f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a8fa:	e008      	b.n	800a90e <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a8fc:	f7f8 fb44 	bl	8002f88 <HAL_GetTick>
 800a900:	4602      	mov	r2, r0
 800a902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a904:	1ad3      	subs	r3, r2, r3
 800a906:	2b02      	cmp	r3, #2
 800a908:	d901      	bls.n	800a90e <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800a90a:	2303      	movs	r3, #3
 800a90c:	e2fd      	b.n	800af0a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a90e:	4b08      	ldr	r3, [pc, #32]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f003 0304 	and.w	r3, r3, #4
 800a916:	2b00      	cmp	r3, #0
 800a918:	d0f0      	beq.n	800a8fc <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a91a:	4b05      	ldr	r3, [pc, #20]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	691b      	ldr	r3, [r3, #16]
 800a926:	061b      	lsls	r3, r3, #24
 800a928:	4901      	ldr	r1, [pc, #4]	@ (800a930 <HAL_RCC_OscConfig+0x278>)
 800a92a:	4313      	orrs	r3, r2
 800a92c:	604b      	str	r3, [r1, #4]
 800a92e:	e01a      	b.n	800a966 <HAL_RCC_OscConfig+0x2ae>
 800a930:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a934:	4b97      	ldr	r3, [pc, #604]	@ (800ab94 <HAL_RCC_OscConfig+0x4dc>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4a96      	ldr	r2, [pc, #600]	@ (800ab94 <HAL_RCC_OscConfig+0x4dc>)
 800a93a:	f023 0301 	bic.w	r3, r3, #1
 800a93e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a940:	f7f8 fb22 	bl	8002f88 <HAL_GetTick>
 800a944:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a946:	e008      	b.n	800a95a <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a948:	f7f8 fb1e 	bl	8002f88 <HAL_GetTick>
 800a94c:	4602      	mov	r2, r0
 800a94e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a950:	1ad3      	subs	r3, r2, r3
 800a952:	2b02      	cmp	r3, #2
 800a954:	d901      	bls.n	800a95a <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800a956:	2303      	movs	r3, #3
 800a958:	e2d7      	b.n	800af0a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a95a:	4b8e      	ldr	r3, [pc, #568]	@ (800ab94 <HAL_RCC_OscConfig+0x4dc>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f003 0304 	and.w	r3, r3, #4
 800a962:	2b00      	cmp	r3, #0
 800a964:	d1f0      	bne.n	800a948 <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f003 0310 	and.w	r3, r3, #16
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d06a      	beq.n	800aa48 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a972:	4b88      	ldr	r3, [pc, #544]	@ (800ab94 <HAL_RCC_OscConfig+0x4dc>)
 800a974:	691b      	ldr	r3, [r3, #16]
 800a976:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a97a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a97c:	4b85      	ldr	r3, [pc, #532]	@ (800ab94 <HAL_RCC_OscConfig+0x4dc>)
 800a97e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a980:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a982:	69bb      	ldr	r3, [r7, #24]
 800a984:	2b08      	cmp	r3, #8
 800a986:	d007      	beq.n	800a998 <HAL_RCC_OscConfig+0x2e0>
 800a988:	69bb      	ldr	r3, [r7, #24]
 800a98a:	2b18      	cmp	r3, #24
 800a98c:	d11b      	bne.n	800a9c6 <HAL_RCC_OscConfig+0x30e>
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	f003 0303 	and.w	r3, r3, #3
 800a994:	2b01      	cmp	r3, #1
 800a996:	d116      	bne.n	800a9c6 <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a998:	4b7e      	ldr	r3, [pc, #504]	@ (800ab94 <HAL_RCC_OscConfig+0x4dc>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d005      	beq.n	800a9b0 <HAL_RCC_OscConfig+0x2f8>
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	69db      	ldr	r3, [r3, #28]
 800a9a8:	2b80      	cmp	r3, #128	@ 0x80
 800a9aa:	d001      	beq.n	800a9b0 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	e2ac      	b.n	800af0a <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a9b0:	4b78      	ldr	r3, [pc, #480]	@ (800ab94 <HAL_RCC_OscConfig+0x4dc>)
 800a9b2:	68db      	ldr	r3, [r3, #12]
 800a9b4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6a1b      	ldr	r3, [r3, #32]
 800a9bc:	061b      	lsls	r3, r3, #24
 800a9be:	4975      	ldr	r1, [pc, #468]	@ (800ab94 <HAL_RCC_OscConfig+0x4dc>)
 800a9c0:	4313      	orrs	r3, r2
 800a9c2:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a9c4:	e040      	b.n	800aa48 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	69db      	ldr	r3, [r3, #28]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d023      	beq.n	800aa16 <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a9ce:	4b71      	ldr	r3, [pc, #452]	@ (800ab94 <HAL_RCC_OscConfig+0x4dc>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	4a70      	ldr	r2, [pc, #448]	@ (800ab94 <HAL_RCC_OscConfig+0x4dc>)
 800a9d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a9da:	f7f8 fad5 	bl	8002f88 <HAL_GetTick>
 800a9de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a9e0:	e008      	b.n	800a9f4 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a9e2:	f7f8 fad1 	bl	8002f88 <HAL_GetTick>
 800a9e6:	4602      	mov	r2, r0
 800a9e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ea:	1ad3      	subs	r3, r2, r3
 800a9ec:	2b02      	cmp	r3, #2
 800a9ee:	d901      	bls.n	800a9f4 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800a9f0:	2303      	movs	r3, #3
 800a9f2:	e28a      	b.n	800af0a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a9f4:	4b67      	ldr	r3, [pc, #412]	@ (800ab94 <HAL_RCC_OscConfig+0x4dc>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d0f0      	beq.n	800a9e2 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aa00:	4b64      	ldr	r3, [pc, #400]	@ (800ab94 <HAL_RCC_OscConfig+0x4dc>)
 800aa02:	68db      	ldr	r3, [r3, #12]
 800aa04:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6a1b      	ldr	r3, [r3, #32]
 800aa0c:	061b      	lsls	r3, r3, #24
 800aa0e:	4961      	ldr	r1, [pc, #388]	@ (800ab94 <HAL_RCC_OscConfig+0x4dc>)
 800aa10:	4313      	orrs	r3, r2
 800aa12:	60cb      	str	r3, [r1, #12]
 800aa14:	e018      	b.n	800aa48 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800aa16:	4b5f      	ldr	r3, [pc, #380]	@ (800ab94 <HAL_RCC_OscConfig+0x4dc>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	4a5e      	ldr	r2, [pc, #376]	@ (800ab94 <HAL_RCC_OscConfig+0x4dc>)
 800aa1c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aa20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa22:	f7f8 fab1 	bl	8002f88 <HAL_GetTick>
 800aa26:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800aa28:	e008      	b.n	800aa3c <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800aa2a:	f7f8 faad 	bl	8002f88 <HAL_GetTick>
 800aa2e:	4602      	mov	r2, r0
 800aa30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa32:	1ad3      	subs	r3, r2, r3
 800aa34:	2b02      	cmp	r3, #2
 800aa36:	d901      	bls.n	800aa3c <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800aa38:	2303      	movs	r3, #3
 800aa3a:	e266      	b.n	800af0a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800aa3c:	4b55      	ldr	r3, [pc, #340]	@ (800ab94 <HAL_RCC_OscConfig+0x4dc>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d1f0      	bne.n	800aa2a <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f003 0308 	and.w	r3, r3, #8
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d036      	beq.n	800aac2 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	695b      	ldr	r3, [r3, #20]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d019      	beq.n	800aa90 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800aa5c:	4b4d      	ldr	r3, [pc, #308]	@ (800ab94 <HAL_RCC_OscConfig+0x4dc>)
 800aa5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa60:	4a4c      	ldr	r2, [pc, #304]	@ (800ab94 <HAL_RCC_OscConfig+0x4dc>)
 800aa62:	f043 0301 	orr.w	r3, r3, #1
 800aa66:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa68:	f7f8 fa8e 	bl	8002f88 <HAL_GetTick>
 800aa6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800aa6e:	e008      	b.n	800aa82 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa70:	f7f8 fa8a 	bl	8002f88 <HAL_GetTick>
 800aa74:	4602      	mov	r2, r0
 800aa76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa78:	1ad3      	subs	r3, r2, r3
 800aa7a:	2b02      	cmp	r3, #2
 800aa7c:	d901      	bls.n	800aa82 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800aa7e:	2303      	movs	r3, #3
 800aa80:	e243      	b.n	800af0a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800aa82:	4b44      	ldr	r3, [pc, #272]	@ (800ab94 <HAL_RCC_OscConfig+0x4dc>)
 800aa84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa86:	f003 0302 	and.w	r3, r3, #2
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d0f0      	beq.n	800aa70 <HAL_RCC_OscConfig+0x3b8>
 800aa8e:	e018      	b.n	800aac2 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aa90:	4b40      	ldr	r3, [pc, #256]	@ (800ab94 <HAL_RCC_OscConfig+0x4dc>)
 800aa92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aa94:	4a3f      	ldr	r2, [pc, #252]	@ (800ab94 <HAL_RCC_OscConfig+0x4dc>)
 800aa96:	f023 0301 	bic.w	r3, r3, #1
 800aa9a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa9c:	f7f8 fa74 	bl	8002f88 <HAL_GetTick>
 800aaa0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aaa2:	e008      	b.n	800aab6 <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aaa4:	f7f8 fa70 	bl	8002f88 <HAL_GetTick>
 800aaa8:	4602      	mov	r2, r0
 800aaaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaac:	1ad3      	subs	r3, r2, r3
 800aaae:	2b02      	cmp	r3, #2
 800aab0:	d901      	bls.n	800aab6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800aab2:	2303      	movs	r3, #3
 800aab4:	e229      	b.n	800af0a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800aab6:	4b37      	ldr	r3, [pc, #220]	@ (800ab94 <HAL_RCC_OscConfig+0x4dc>)
 800aab8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aaba:	f003 0302 	and.w	r3, r3, #2
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d1f0      	bne.n	800aaa4 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	f003 0320 	and.w	r3, r3, #32
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d036      	beq.n	800ab3c <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	699b      	ldr	r3, [r3, #24]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d019      	beq.n	800ab0a <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800aad6:	4b2f      	ldr	r3, [pc, #188]	@ (800ab94 <HAL_RCC_OscConfig+0x4dc>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	4a2e      	ldr	r2, [pc, #184]	@ (800ab94 <HAL_RCC_OscConfig+0x4dc>)
 800aadc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800aae0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800aae2:	f7f8 fa51 	bl	8002f88 <HAL_GetTick>
 800aae6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aae8:	e008      	b.n	800aafc <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800aaea:	f7f8 fa4d 	bl	8002f88 <HAL_GetTick>
 800aaee:	4602      	mov	r2, r0
 800aaf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aaf2:	1ad3      	subs	r3, r2, r3
 800aaf4:	2b02      	cmp	r3, #2
 800aaf6:	d901      	bls.n	800aafc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800aaf8:	2303      	movs	r3, #3
 800aafa:	e206      	b.n	800af0a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800aafc:	4b25      	ldr	r3, [pc, #148]	@ (800ab94 <HAL_RCC_OscConfig+0x4dc>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d0f0      	beq.n	800aaea <HAL_RCC_OscConfig+0x432>
 800ab08:	e018      	b.n	800ab3c <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ab0a:	4b22      	ldr	r3, [pc, #136]	@ (800ab94 <HAL_RCC_OscConfig+0x4dc>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	4a21      	ldr	r2, [pc, #132]	@ (800ab94 <HAL_RCC_OscConfig+0x4dc>)
 800ab10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ab14:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ab16:	f7f8 fa37 	bl	8002f88 <HAL_GetTick>
 800ab1a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ab1c:	e008      	b.n	800ab30 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ab1e:	f7f8 fa33 	bl	8002f88 <HAL_GetTick>
 800ab22:	4602      	mov	r2, r0
 800ab24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab26:	1ad3      	subs	r3, r2, r3
 800ab28:	2b02      	cmp	r3, #2
 800ab2a:	d901      	bls.n	800ab30 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800ab2c:	2303      	movs	r3, #3
 800ab2e:	e1ec      	b.n	800af0a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ab30:	4b18      	ldr	r3, [pc, #96]	@ (800ab94 <HAL_RCC_OscConfig+0x4dc>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d1f0      	bne.n	800ab1e <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f003 0304 	and.w	r3, r3, #4
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	f000 80af 	beq.w	800aca8 <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ab4a:	4b13      	ldr	r3, [pc, #76]	@ (800ab98 <HAL_RCC_OscConfig+0x4e0>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	4a12      	ldr	r2, [pc, #72]	@ (800ab98 <HAL_RCC_OscConfig+0x4e0>)
 800ab50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ab54:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ab56:	f7f8 fa17 	bl	8002f88 <HAL_GetTick>
 800ab5a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ab5c:	e008      	b.n	800ab70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab5e:	f7f8 fa13 	bl	8002f88 <HAL_GetTick>
 800ab62:	4602      	mov	r2, r0
 800ab64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab66:	1ad3      	subs	r3, r2, r3
 800ab68:	2b64      	cmp	r3, #100	@ 0x64
 800ab6a:	d901      	bls.n	800ab70 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800ab6c:	2303      	movs	r3, #3
 800ab6e:	e1cc      	b.n	800af0a <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ab70:	4b09      	ldr	r3, [pc, #36]	@ (800ab98 <HAL_RCC_OscConfig+0x4e0>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d0f0      	beq.n	800ab5e <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	689b      	ldr	r3, [r3, #8]
 800ab80:	2b01      	cmp	r3, #1
 800ab82:	d10b      	bne.n	800ab9c <HAL_RCC_OscConfig+0x4e4>
 800ab84:	4b03      	ldr	r3, [pc, #12]	@ (800ab94 <HAL_RCC_OscConfig+0x4dc>)
 800ab86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab88:	4a02      	ldr	r2, [pc, #8]	@ (800ab94 <HAL_RCC_OscConfig+0x4dc>)
 800ab8a:	f043 0301 	orr.w	r3, r3, #1
 800ab8e:	6713      	str	r3, [r2, #112]	@ 0x70
 800ab90:	e05b      	b.n	800ac4a <HAL_RCC_OscConfig+0x592>
 800ab92:	bf00      	nop
 800ab94:	58024400 	.word	0x58024400
 800ab98:	58024800 	.word	0x58024800
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	689b      	ldr	r3, [r3, #8]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d112      	bne.n	800abca <HAL_RCC_OscConfig+0x512>
 800aba4:	4b9d      	ldr	r3, [pc, #628]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800aba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aba8:	4a9c      	ldr	r2, [pc, #624]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800abaa:	f023 0301 	bic.w	r3, r3, #1
 800abae:	6713      	str	r3, [r2, #112]	@ 0x70
 800abb0:	4b9a      	ldr	r3, [pc, #616]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800abb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abb4:	4a99      	ldr	r2, [pc, #612]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800abb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800abba:	6713      	str	r3, [r2, #112]	@ 0x70
 800abbc:	4b97      	ldr	r3, [pc, #604]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800abbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abc0:	4a96      	ldr	r2, [pc, #600]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800abc2:	f023 0304 	bic.w	r3, r3, #4
 800abc6:	6713      	str	r3, [r2, #112]	@ 0x70
 800abc8:	e03f      	b.n	800ac4a <HAL_RCC_OscConfig+0x592>
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	689b      	ldr	r3, [r3, #8]
 800abce:	2b05      	cmp	r3, #5
 800abd0:	d112      	bne.n	800abf8 <HAL_RCC_OscConfig+0x540>
 800abd2:	4b92      	ldr	r3, [pc, #584]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800abd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abd6:	4a91      	ldr	r2, [pc, #580]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800abd8:	f043 0304 	orr.w	r3, r3, #4
 800abdc:	6713      	str	r3, [r2, #112]	@ 0x70
 800abde:	4b8f      	ldr	r3, [pc, #572]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800abe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abe2:	4a8e      	ldr	r2, [pc, #568]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800abe4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800abe8:	6713      	str	r3, [r2, #112]	@ 0x70
 800abea:	4b8c      	ldr	r3, [pc, #560]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800abec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800abee:	4a8b      	ldr	r2, [pc, #556]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800abf0:	f043 0301 	orr.w	r3, r3, #1
 800abf4:	6713      	str	r3, [r2, #112]	@ 0x70
 800abf6:	e028      	b.n	800ac4a <HAL_RCC_OscConfig+0x592>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	689b      	ldr	r3, [r3, #8]
 800abfc:	2b85      	cmp	r3, #133	@ 0x85
 800abfe:	d112      	bne.n	800ac26 <HAL_RCC_OscConfig+0x56e>
 800ac00:	4b86      	ldr	r3, [pc, #536]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800ac02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac04:	4a85      	ldr	r2, [pc, #532]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800ac06:	f043 0304 	orr.w	r3, r3, #4
 800ac0a:	6713      	str	r3, [r2, #112]	@ 0x70
 800ac0c:	4b83      	ldr	r3, [pc, #524]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800ac0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac10:	4a82      	ldr	r2, [pc, #520]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800ac12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac16:	6713      	str	r3, [r2, #112]	@ 0x70
 800ac18:	4b80      	ldr	r3, [pc, #512]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800ac1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac1c:	4a7f      	ldr	r2, [pc, #508]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800ac1e:	f043 0301 	orr.w	r3, r3, #1
 800ac22:	6713      	str	r3, [r2, #112]	@ 0x70
 800ac24:	e011      	b.n	800ac4a <HAL_RCC_OscConfig+0x592>
 800ac26:	4b7d      	ldr	r3, [pc, #500]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800ac28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac2a:	4a7c      	ldr	r2, [pc, #496]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800ac2c:	f023 0301 	bic.w	r3, r3, #1
 800ac30:	6713      	str	r3, [r2, #112]	@ 0x70
 800ac32:	4b7a      	ldr	r3, [pc, #488]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800ac34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac36:	4a79      	ldr	r2, [pc, #484]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800ac38:	f023 0304 	bic.w	r3, r3, #4
 800ac3c:	6713      	str	r3, [r2, #112]	@ 0x70
 800ac3e:	4b77      	ldr	r3, [pc, #476]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800ac40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac42:	4a76      	ldr	r2, [pc, #472]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800ac44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac48:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	689b      	ldr	r3, [r3, #8]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d015      	beq.n	800ac7e <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac52:	f7f8 f999 	bl	8002f88 <HAL_GetTick>
 800ac56:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ac58:	e00a      	b.n	800ac70 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac5a:	f7f8 f995 	bl	8002f88 <HAL_GetTick>
 800ac5e:	4602      	mov	r2, r0
 800ac60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac62:	1ad3      	subs	r3, r2, r3
 800ac64:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d901      	bls.n	800ac70 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800ac6c:	2303      	movs	r3, #3
 800ac6e:	e14c      	b.n	800af0a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ac70:	4b6a      	ldr	r3, [pc, #424]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800ac72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac74:	f003 0302 	and.w	r3, r3, #2
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d0ee      	beq.n	800ac5a <HAL_RCC_OscConfig+0x5a2>
 800ac7c:	e014      	b.n	800aca8 <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac7e:	f7f8 f983 	bl	8002f88 <HAL_GetTick>
 800ac82:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ac84:	e00a      	b.n	800ac9c <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ac86:	f7f8 f97f 	bl	8002f88 <HAL_GetTick>
 800ac8a:	4602      	mov	r2, r0
 800ac8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac8e:	1ad3      	subs	r3, r2, r3
 800ac90:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ac94:	4293      	cmp	r3, r2
 800ac96:	d901      	bls.n	800ac9c <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800ac98:	2303      	movs	r3, #3
 800ac9a:	e136      	b.n	800af0a <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ac9c:	4b5f      	ldr	r3, [pc, #380]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800ac9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aca0:	f003 0302 	and.w	r3, r3, #2
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d1ee      	bne.n	800ac86 <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acac:	2b00      	cmp	r3, #0
 800acae:	f000 812b 	beq.w	800af08 <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800acb2:	4b5a      	ldr	r3, [pc, #360]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800acb4:	691b      	ldr	r3, [r3, #16]
 800acb6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800acba:	2b18      	cmp	r3, #24
 800acbc:	f000 80bb 	beq.w	800ae36 <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acc4:	2b02      	cmp	r3, #2
 800acc6:	f040 8095 	bne.w	800adf4 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800acca:	4b54      	ldr	r3, [pc, #336]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	4a53      	ldr	r2, [pc, #332]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800acd0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800acd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acd6:	f7f8 f957 	bl	8002f88 <HAL_GetTick>
 800acda:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800acdc:	e008      	b.n	800acf0 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800acde:	f7f8 f953 	bl	8002f88 <HAL_GetTick>
 800ace2:	4602      	mov	r2, r0
 800ace4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace6:	1ad3      	subs	r3, r2, r3
 800ace8:	2b02      	cmp	r3, #2
 800acea:	d901      	bls.n	800acf0 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800acec:	2303      	movs	r3, #3
 800acee:	e10c      	b.n	800af0a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800acf0:	4b4a      	ldr	r3, [pc, #296]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d1f0      	bne.n	800acde <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800acfc:	4b47      	ldr	r3, [pc, #284]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800acfe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ad00:	4b47      	ldr	r3, [pc, #284]	@ (800ae20 <HAL_RCC_OscConfig+0x768>)
 800ad02:	4013      	ands	r3, r2
 800ad04:	687a      	ldr	r2, [r7, #4]
 800ad06:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800ad08:	687a      	ldr	r2, [r7, #4]
 800ad0a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800ad0c:	0112      	lsls	r2, r2, #4
 800ad0e:	430a      	orrs	r2, r1
 800ad10:	4942      	ldr	r1, [pc, #264]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800ad12:	4313      	orrs	r3, r2
 800ad14:	628b      	str	r3, [r1, #40]	@ 0x28
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad1a:	3b01      	subs	r3, #1
 800ad1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ad24:	3b01      	subs	r3, #1
 800ad26:	025b      	lsls	r3, r3, #9
 800ad28:	b29b      	uxth	r3, r3
 800ad2a:	431a      	orrs	r2, r3
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad30:	3b01      	subs	r3, #1
 800ad32:	041b      	lsls	r3, r3, #16
 800ad34:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800ad38:	431a      	orrs	r2, r3
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad3e:	3b01      	subs	r3, #1
 800ad40:	061b      	lsls	r3, r3, #24
 800ad42:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ad46:	4935      	ldr	r1, [pc, #212]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800ad48:	4313      	orrs	r3, r2
 800ad4a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800ad4c:	4b33      	ldr	r3, [pc, #204]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800ad4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad50:	4a32      	ldr	r2, [pc, #200]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800ad52:	f023 0301 	bic.w	r3, r3, #1
 800ad56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800ad58:	4b30      	ldr	r3, [pc, #192]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800ad5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ad5c:	4b31      	ldr	r3, [pc, #196]	@ (800ae24 <HAL_RCC_OscConfig+0x76c>)
 800ad5e:	4013      	ands	r3, r2
 800ad60:	687a      	ldr	r2, [r7, #4]
 800ad62:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ad64:	00d2      	lsls	r2, r2, #3
 800ad66:	492d      	ldr	r1, [pc, #180]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800ad68:	4313      	orrs	r3, r2
 800ad6a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800ad6c:	4b2b      	ldr	r3, [pc, #172]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800ad6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad70:	f023 020c 	bic.w	r2, r3, #12
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad78:	4928      	ldr	r1, [pc, #160]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800ad7a:	4313      	orrs	r3, r2
 800ad7c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800ad7e:	4b27      	ldr	r3, [pc, #156]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800ad80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad82:	f023 0202 	bic.w	r2, r3, #2
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ad8a:	4924      	ldr	r1, [pc, #144]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800ad90:	4b22      	ldr	r3, [pc, #136]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800ad92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad94:	4a21      	ldr	r2, [pc, #132]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800ad96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ad9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad9c:	4b1f      	ldr	r3, [pc, #124]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800ad9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ada0:	4a1e      	ldr	r2, [pc, #120]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800ada2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ada6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800ada8:	4b1c      	ldr	r3, [pc, #112]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800adaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adac:	4a1b      	ldr	r2, [pc, #108]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800adae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800adb2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800adb4:	4b19      	ldr	r3, [pc, #100]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800adb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800adb8:	4a18      	ldr	r2, [pc, #96]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800adba:	f043 0301 	orr.w	r3, r3, #1
 800adbe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800adc0:	4b16      	ldr	r3, [pc, #88]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4a15      	ldr	r2, [pc, #84]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800adc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800adca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800adcc:	f7f8 f8dc 	bl	8002f88 <HAL_GetTick>
 800add0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800add2:	e008      	b.n	800ade6 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800add4:	f7f8 f8d8 	bl	8002f88 <HAL_GetTick>
 800add8:	4602      	mov	r2, r0
 800adda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800addc:	1ad3      	subs	r3, r2, r3
 800adde:	2b02      	cmp	r3, #2
 800ade0:	d901      	bls.n	800ade6 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800ade2:	2303      	movs	r3, #3
 800ade4:	e091      	b.n	800af0a <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ade6:	4b0d      	ldr	r3, [pc, #52]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d0f0      	beq.n	800add4 <HAL_RCC_OscConfig+0x71c>
 800adf2:	e089      	b.n	800af08 <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800adf4:	4b09      	ldr	r3, [pc, #36]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	4a08      	ldr	r2, [pc, #32]	@ (800ae1c <HAL_RCC_OscConfig+0x764>)
 800adfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800adfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ae00:	f7f8 f8c2 	bl	8002f88 <HAL_GetTick>
 800ae04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ae06:	e00f      	b.n	800ae28 <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ae08:	f7f8 f8be 	bl	8002f88 <HAL_GetTick>
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae10:	1ad3      	subs	r3, r2, r3
 800ae12:	2b02      	cmp	r3, #2
 800ae14:	d908      	bls.n	800ae28 <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800ae16:	2303      	movs	r3, #3
 800ae18:	e077      	b.n	800af0a <HAL_RCC_OscConfig+0x852>
 800ae1a:	bf00      	nop
 800ae1c:	58024400 	.word	0x58024400
 800ae20:	fffffc0c 	.word	0xfffffc0c
 800ae24:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800ae28:	4b3a      	ldr	r3, [pc, #232]	@ (800af14 <HAL_RCC_OscConfig+0x85c>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d1e9      	bne.n	800ae08 <HAL_RCC_OscConfig+0x750>
 800ae34:	e068      	b.n	800af08 <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800ae36:	4b37      	ldr	r3, [pc, #220]	@ (800af14 <HAL_RCC_OscConfig+0x85c>)
 800ae38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae3a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800ae3c:	4b35      	ldr	r3, [pc, #212]	@ (800af14 <HAL_RCC_OscConfig+0x85c>)
 800ae3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae40:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae46:	2b01      	cmp	r3, #1
 800ae48:	d031      	beq.n	800aeae <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae4a:	693b      	ldr	r3, [r7, #16]
 800ae4c:	f003 0203 	and.w	r2, r3, #3
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d12a      	bne.n	800aeae <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	091b      	lsrs	r3, r3, #4
 800ae5c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d122      	bne.n	800aeae <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae72:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800ae74:	429a      	cmp	r2, r3
 800ae76:	d11a      	bne.n	800aeae <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	0a5b      	lsrs	r3, r3, #9
 800ae7c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ae84:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d111      	bne.n	800aeae <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	0c1b      	lsrs	r3, r3, #16
 800ae8e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae96:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d108      	bne.n	800aeae <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	0e1b      	lsrs	r3, r3, #24
 800aea0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aea8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800aeaa:	429a      	cmp	r2, r3
 800aeac:	d001      	beq.n	800aeb2 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800aeae:	2301      	movs	r3, #1
 800aeb0:	e02b      	b.n	800af0a <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800aeb2:	4b18      	ldr	r3, [pc, #96]	@ (800af14 <HAL_RCC_OscConfig+0x85c>)
 800aeb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aeb6:	08db      	lsrs	r3, r3, #3
 800aeb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aebc:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800aec2:	693a      	ldr	r2, [r7, #16]
 800aec4:	429a      	cmp	r2, r3
 800aec6:	d01f      	beq.n	800af08 <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800aec8:	4b12      	ldr	r3, [pc, #72]	@ (800af14 <HAL_RCC_OscConfig+0x85c>)
 800aeca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aecc:	4a11      	ldr	r2, [pc, #68]	@ (800af14 <HAL_RCC_OscConfig+0x85c>)
 800aece:	f023 0301 	bic.w	r3, r3, #1
 800aed2:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800aed4:	f7f8 f858 	bl	8002f88 <HAL_GetTick>
 800aed8:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800aeda:	bf00      	nop
 800aedc:	f7f8 f854 	bl	8002f88 <HAL_GetTick>
 800aee0:	4602      	mov	r2, r0
 800aee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aee4:	4293      	cmp	r3, r2
 800aee6:	d0f9      	beq.n	800aedc <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800aee8:	4b0a      	ldr	r3, [pc, #40]	@ (800af14 <HAL_RCC_OscConfig+0x85c>)
 800aeea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800aeec:	4b0a      	ldr	r3, [pc, #40]	@ (800af18 <HAL_RCC_OscConfig+0x860>)
 800aeee:	4013      	ands	r3, r2
 800aef0:	687a      	ldr	r2, [r7, #4]
 800aef2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800aef4:	00d2      	lsls	r2, r2, #3
 800aef6:	4907      	ldr	r1, [pc, #28]	@ (800af14 <HAL_RCC_OscConfig+0x85c>)
 800aef8:	4313      	orrs	r3, r2
 800aefa:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800aefc:	4b05      	ldr	r3, [pc, #20]	@ (800af14 <HAL_RCC_OscConfig+0x85c>)
 800aefe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af00:	4a04      	ldr	r2, [pc, #16]	@ (800af14 <HAL_RCC_OscConfig+0x85c>)
 800af02:	f043 0301 	orr.w	r3, r3, #1
 800af06:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800af08:	2300      	movs	r3, #0
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3730      	adds	r7, #48	@ 0x30
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
 800af12:	bf00      	nop
 800af14:	58024400 	.word	0x58024400
 800af18:	ffff0007 	.word	0xffff0007

0800af1c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b086      	sub	sp, #24
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d101      	bne.n	800af30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800af2c:	2301      	movs	r3, #1
 800af2e:	e19c      	b.n	800b26a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800af30:	4b8a      	ldr	r3, [pc, #552]	@ (800b15c <HAL_RCC_ClockConfig+0x240>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f003 030f 	and.w	r3, r3, #15
 800af38:	683a      	ldr	r2, [r7, #0]
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d910      	bls.n	800af60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af3e:	4b87      	ldr	r3, [pc, #540]	@ (800b15c <HAL_RCC_ClockConfig+0x240>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f023 020f 	bic.w	r2, r3, #15
 800af46:	4985      	ldr	r1, [pc, #532]	@ (800b15c <HAL_RCC_ClockConfig+0x240>)
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	4313      	orrs	r3, r2
 800af4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800af4e:	4b83      	ldr	r3, [pc, #524]	@ (800b15c <HAL_RCC_ClockConfig+0x240>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f003 030f 	and.w	r3, r3, #15
 800af56:	683a      	ldr	r2, [r7, #0]
 800af58:	429a      	cmp	r2, r3
 800af5a:	d001      	beq.n	800af60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800af5c:	2301      	movs	r3, #1
 800af5e:	e184      	b.n	800b26a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	f003 0304 	and.w	r3, r3, #4
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d010      	beq.n	800af8e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	691a      	ldr	r2, [r3, #16]
 800af70:	4b7b      	ldr	r3, [pc, #492]	@ (800b160 <HAL_RCC_ClockConfig+0x244>)
 800af72:	699b      	ldr	r3, [r3, #24]
 800af74:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800af78:	429a      	cmp	r2, r3
 800af7a:	d908      	bls.n	800af8e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800af7c:	4b78      	ldr	r3, [pc, #480]	@ (800b160 <HAL_RCC_ClockConfig+0x244>)
 800af7e:	699b      	ldr	r3, [r3, #24]
 800af80:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	691b      	ldr	r3, [r3, #16]
 800af88:	4975      	ldr	r1, [pc, #468]	@ (800b160 <HAL_RCC_ClockConfig+0x244>)
 800af8a:	4313      	orrs	r3, r2
 800af8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f003 0308 	and.w	r3, r3, #8
 800af96:	2b00      	cmp	r3, #0
 800af98:	d010      	beq.n	800afbc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	695a      	ldr	r2, [r3, #20]
 800af9e:	4b70      	ldr	r3, [pc, #448]	@ (800b160 <HAL_RCC_ClockConfig+0x244>)
 800afa0:	69db      	ldr	r3, [r3, #28]
 800afa2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800afa6:	429a      	cmp	r2, r3
 800afa8:	d908      	bls.n	800afbc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800afaa:	4b6d      	ldr	r3, [pc, #436]	@ (800b160 <HAL_RCC_ClockConfig+0x244>)
 800afac:	69db      	ldr	r3, [r3, #28]
 800afae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	695b      	ldr	r3, [r3, #20]
 800afb6:	496a      	ldr	r1, [pc, #424]	@ (800b160 <HAL_RCC_ClockConfig+0x244>)
 800afb8:	4313      	orrs	r3, r2
 800afba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f003 0310 	and.w	r3, r3, #16
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d010      	beq.n	800afea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	699a      	ldr	r2, [r3, #24]
 800afcc:	4b64      	ldr	r3, [pc, #400]	@ (800b160 <HAL_RCC_ClockConfig+0x244>)
 800afce:	69db      	ldr	r3, [r3, #28]
 800afd0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800afd4:	429a      	cmp	r2, r3
 800afd6:	d908      	bls.n	800afea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800afd8:	4b61      	ldr	r3, [pc, #388]	@ (800b160 <HAL_RCC_ClockConfig+0x244>)
 800afda:	69db      	ldr	r3, [r3, #28]
 800afdc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	699b      	ldr	r3, [r3, #24]
 800afe4:	495e      	ldr	r1, [pc, #376]	@ (800b160 <HAL_RCC_ClockConfig+0x244>)
 800afe6:	4313      	orrs	r3, r2
 800afe8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	f003 0320 	and.w	r3, r3, #32
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d010      	beq.n	800b018 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	69da      	ldr	r2, [r3, #28]
 800affa:	4b59      	ldr	r3, [pc, #356]	@ (800b160 <HAL_RCC_ClockConfig+0x244>)
 800affc:	6a1b      	ldr	r3, [r3, #32]
 800affe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b002:	429a      	cmp	r2, r3
 800b004:	d908      	bls.n	800b018 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b006:	4b56      	ldr	r3, [pc, #344]	@ (800b160 <HAL_RCC_ClockConfig+0x244>)
 800b008:	6a1b      	ldr	r3, [r3, #32]
 800b00a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	69db      	ldr	r3, [r3, #28]
 800b012:	4953      	ldr	r1, [pc, #332]	@ (800b160 <HAL_RCC_ClockConfig+0x244>)
 800b014:	4313      	orrs	r3, r2
 800b016:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f003 0302 	and.w	r3, r3, #2
 800b020:	2b00      	cmp	r3, #0
 800b022:	d010      	beq.n	800b046 <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	68da      	ldr	r2, [r3, #12]
 800b028:	4b4d      	ldr	r3, [pc, #308]	@ (800b160 <HAL_RCC_ClockConfig+0x244>)
 800b02a:	699b      	ldr	r3, [r3, #24]
 800b02c:	f003 030f 	and.w	r3, r3, #15
 800b030:	429a      	cmp	r2, r3
 800b032:	d908      	bls.n	800b046 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b034:	4b4a      	ldr	r3, [pc, #296]	@ (800b160 <HAL_RCC_ClockConfig+0x244>)
 800b036:	699b      	ldr	r3, [r3, #24]
 800b038:	f023 020f 	bic.w	r2, r3, #15
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	68db      	ldr	r3, [r3, #12]
 800b040:	4947      	ldr	r1, [pc, #284]	@ (800b160 <HAL_RCC_ClockConfig+0x244>)
 800b042:	4313      	orrs	r3, r2
 800b044:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	f003 0301 	and.w	r3, r3, #1
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d055      	beq.n	800b0fe <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b052:	4b43      	ldr	r3, [pc, #268]	@ (800b160 <HAL_RCC_ClockConfig+0x244>)
 800b054:	699b      	ldr	r3, [r3, #24]
 800b056:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	689b      	ldr	r3, [r3, #8]
 800b05e:	4940      	ldr	r1, [pc, #256]	@ (800b160 <HAL_RCC_ClockConfig+0x244>)
 800b060:	4313      	orrs	r3, r2
 800b062:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	685b      	ldr	r3, [r3, #4]
 800b068:	2b02      	cmp	r3, #2
 800b06a:	d107      	bne.n	800b07c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b06c:	4b3c      	ldr	r3, [pc, #240]	@ (800b160 <HAL_RCC_ClockConfig+0x244>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b074:	2b00      	cmp	r3, #0
 800b076:	d121      	bne.n	800b0bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b078:	2301      	movs	r3, #1
 800b07a:	e0f6      	b.n	800b26a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	685b      	ldr	r3, [r3, #4]
 800b080:	2b03      	cmp	r3, #3
 800b082:	d107      	bne.n	800b094 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b084:	4b36      	ldr	r3, [pc, #216]	@ (800b160 <HAL_RCC_ClockConfig+0x244>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d115      	bne.n	800b0bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b090:	2301      	movs	r3, #1
 800b092:	e0ea      	b.n	800b26a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	685b      	ldr	r3, [r3, #4]
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d107      	bne.n	800b0ac <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b09c:	4b30      	ldr	r3, [pc, #192]	@ (800b160 <HAL_RCC_ClockConfig+0x244>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d109      	bne.n	800b0bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	e0de      	b.n	800b26a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b0ac:	4b2c      	ldr	r3, [pc, #176]	@ (800b160 <HAL_RCC_ClockConfig+0x244>)
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	f003 0304 	and.w	r3, r3, #4
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d101      	bne.n	800b0bc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b0b8:	2301      	movs	r3, #1
 800b0ba:	e0d6      	b.n	800b26a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b0bc:	4b28      	ldr	r3, [pc, #160]	@ (800b160 <HAL_RCC_ClockConfig+0x244>)
 800b0be:	691b      	ldr	r3, [r3, #16]
 800b0c0:	f023 0207 	bic.w	r2, r3, #7
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	685b      	ldr	r3, [r3, #4]
 800b0c8:	4925      	ldr	r1, [pc, #148]	@ (800b160 <HAL_RCC_ClockConfig+0x244>)
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0ce:	f7f7 ff5b 	bl	8002f88 <HAL_GetTick>
 800b0d2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b0d4:	e00a      	b.n	800b0ec <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b0d6:	f7f7 ff57 	bl	8002f88 <HAL_GetTick>
 800b0da:	4602      	mov	r2, r0
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	1ad3      	subs	r3, r2, r3
 800b0e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b0e4:	4293      	cmp	r3, r2
 800b0e6:	d901      	bls.n	800b0ec <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b0e8:	2303      	movs	r3, #3
 800b0ea:	e0be      	b.n	800b26a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b0ec:	4b1c      	ldr	r3, [pc, #112]	@ (800b160 <HAL_RCC_ClockConfig+0x244>)
 800b0ee:	691b      	ldr	r3, [r3, #16]
 800b0f0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	685b      	ldr	r3, [r3, #4]
 800b0f8:	00db      	lsls	r3, r3, #3
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d1eb      	bne.n	800b0d6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	f003 0302 	and.w	r3, r3, #2
 800b106:	2b00      	cmp	r3, #0
 800b108:	d010      	beq.n	800b12c <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	68da      	ldr	r2, [r3, #12]
 800b10e:	4b14      	ldr	r3, [pc, #80]	@ (800b160 <HAL_RCC_ClockConfig+0x244>)
 800b110:	699b      	ldr	r3, [r3, #24]
 800b112:	f003 030f 	and.w	r3, r3, #15
 800b116:	429a      	cmp	r2, r3
 800b118:	d208      	bcs.n	800b12c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b11a:	4b11      	ldr	r3, [pc, #68]	@ (800b160 <HAL_RCC_ClockConfig+0x244>)
 800b11c:	699b      	ldr	r3, [r3, #24]
 800b11e:	f023 020f 	bic.w	r2, r3, #15
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	68db      	ldr	r3, [r3, #12]
 800b126:	490e      	ldr	r1, [pc, #56]	@ (800b160 <HAL_RCC_ClockConfig+0x244>)
 800b128:	4313      	orrs	r3, r2
 800b12a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b12c:	4b0b      	ldr	r3, [pc, #44]	@ (800b15c <HAL_RCC_ClockConfig+0x240>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f003 030f 	and.w	r3, r3, #15
 800b134:	683a      	ldr	r2, [r7, #0]
 800b136:	429a      	cmp	r2, r3
 800b138:	d214      	bcs.n	800b164 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b13a:	4b08      	ldr	r3, [pc, #32]	@ (800b15c <HAL_RCC_ClockConfig+0x240>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f023 020f 	bic.w	r2, r3, #15
 800b142:	4906      	ldr	r1, [pc, #24]	@ (800b15c <HAL_RCC_ClockConfig+0x240>)
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	4313      	orrs	r3, r2
 800b148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b14a:	4b04      	ldr	r3, [pc, #16]	@ (800b15c <HAL_RCC_ClockConfig+0x240>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f003 030f 	and.w	r3, r3, #15
 800b152:	683a      	ldr	r2, [r7, #0]
 800b154:	429a      	cmp	r2, r3
 800b156:	d005      	beq.n	800b164 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b158:	2301      	movs	r3, #1
 800b15a:	e086      	b.n	800b26a <HAL_RCC_ClockConfig+0x34e>
 800b15c:	52002000 	.word	0x52002000
 800b160:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	f003 0304 	and.w	r3, r3, #4
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d010      	beq.n	800b192 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	691a      	ldr	r2, [r3, #16]
 800b174:	4b3f      	ldr	r3, [pc, #252]	@ (800b274 <HAL_RCC_ClockConfig+0x358>)
 800b176:	699b      	ldr	r3, [r3, #24]
 800b178:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b17c:	429a      	cmp	r2, r3
 800b17e:	d208      	bcs.n	800b192 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b180:	4b3c      	ldr	r3, [pc, #240]	@ (800b274 <HAL_RCC_ClockConfig+0x358>)
 800b182:	699b      	ldr	r3, [r3, #24]
 800b184:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	691b      	ldr	r3, [r3, #16]
 800b18c:	4939      	ldr	r1, [pc, #228]	@ (800b274 <HAL_RCC_ClockConfig+0x358>)
 800b18e:	4313      	orrs	r3, r2
 800b190:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	f003 0308 	and.w	r3, r3, #8
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d010      	beq.n	800b1c0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	695a      	ldr	r2, [r3, #20]
 800b1a2:	4b34      	ldr	r3, [pc, #208]	@ (800b274 <HAL_RCC_ClockConfig+0x358>)
 800b1a4:	69db      	ldr	r3, [r3, #28]
 800b1a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b1aa:	429a      	cmp	r2, r3
 800b1ac:	d208      	bcs.n	800b1c0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b1ae:	4b31      	ldr	r3, [pc, #196]	@ (800b274 <HAL_RCC_ClockConfig+0x358>)
 800b1b0:	69db      	ldr	r3, [r3, #28]
 800b1b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	695b      	ldr	r3, [r3, #20]
 800b1ba:	492e      	ldr	r1, [pc, #184]	@ (800b274 <HAL_RCC_ClockConfig+0x358>)
 800b1bc:	4313      	orrs	r3, r2
 800b1be:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f003 0310 	and.w	r3, r3, #16
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d010      	beq.n	800b1ee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	699a      	ldr	r2, [r3, #24]
 800b1d0:	4b28      	ldr	r3, [pc, #160]	@ (800b274 <HAL_RCC_ClockConfig+0x358>)
 800b1d2:	69db      	ldr	r3, [r3, #28]
 800b1d4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d208      	bcs.n	800b1ee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b1dc:	4b25      	ldr	r3, [pc, #148]	@ (800b274 <HAL_RCC_ClockConfig+0x358>)
 800b1de:	69db      	ldr	r3, [r3, #28]
 800b1e0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	699b      	ldr	r3, [r3, #24]
 800b1e8:	4922      	ldr	r1, [pc, #136]	@ (800b274 <HAL_RCC_ClockConfig+0x358>)
 800b1ea:	4313      	orrs	r3, r2
 800b1ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f003 0320 	and.w	r3, r3, #32
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d010      	beq.n	800b21c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	69da      	ldr	r2, [r3, #28]
 800b1fe:	4b1d      	ldr	r3, [pc, #116]	@ (800b274 <HAL_RCC_ClockConfig+0x358>)
 800b200:	6a1b      	ldr	r3, [r3, #32]
 800b202:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b206:	429a      	cmp	r2, r3
 800b208:	d208      	bcs.n	800b21c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b20a:	4b1a      	ldr	r3, [pc, #104]	@ (800b274 <HAL_RCC_ClockConfig+0x358>)
 800b20c:	6a1b      	ldr	r3, [r3, #32]
 800b20e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	69db      	ldr	r3, [r3, #28]
 800b216:	4917      	ldr	r1, [pc, #92]	@ (800b274 <HAL_RCC_ClockConfig+0x358>)
 800b218:	4313      	orrs	r3, r2
 800b21a:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800b21c:	f000 f89e 	bl	800b35c <HAL_RCC_GetSysClockFreq>
 800b220:	4602      	mov	r2, r0
 800b222:	4b14      	ldr	r3, [pc, #80]	@ (800b274 <HAL_RCC_ClockConfig+0x358>)
 800b224:	699b      	ldr	r3, [r3, #24]
 800b226:	0a1b      	lsrs	r3, r3, #8
 800b228:	f003 030f 	and.w	r3, r3, #15
 800b22c:	4912      	ldr	r1, [pc, #72]	@ (800b278 <HAL_RCC_ClockConfig+0x35c>)
 800b22e:	5ccb      	ldrb	r3, [r1, r3]
 800b230:	f003 031f 	and.w	r3, r3, #31
 800b234:	fa22 f303 	lsr.w	r3, r2, r3
 800b238:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b23a:	4b0e      	ldr	r3, [pc, #56]	@ (800b274 <HAL_RCC_ClockConfig+0x358>)
 800b23c:	699b      	ldr	r3, [r3, #24]
 800b23e:	f003 030f 	and.w	r3, r3, #15
 800b242:	4a0d      	ldr	r2, [pc, #52]	@ (800b278 <HAL_RCC_ClockConfig+0x35c>)
 800b244:	5cd3      	ldrb	r3, [r2, r3]
 800b246:	f003 031f 	and.w	r3, r3, #31
 800b24a:	693a      	ldr	r2, [r7, #16]
 800b24c:	fa22 f303 	lsr.w	r3, r2, r3
 800b250:	4a0a      	ldr	r2, [pc, #40]	@ (800b27c <HAL_RCC_ClockConfig+0x360>)
 800b252:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b254:	4a0a      	ldr	r2, [pc, #40]	@ (800b280 <HAL_RCC_ClockConfig+0x364>)
 800b256:	693b      	ldr	r3, [r7, #16]
 800b258:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b25a:	4b0a      	ldr	r3, [pc, #40]	@ (800b284 <HAL_RCC_ClockConfig+0x368>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	4618      	mov	r0, r3
 800b260:	f7f7 fe48 	bl	8002ef4 <HAL_InitTick>
 800b264:	4603      	mov	r3, r0
 800b266:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b268:	7bfb      	ldrb	r3, [r7, #15]
}
 800b26a:	4618      	mov	r0, r3
 800b26c:	3718      	adds	r7, #24
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
 800b272:	bf00      	nop
 800b274:	58024400 	.word	0x58024400
 800b278:	08013710 	.word	0x08013710
 800b27c:	24000008 	.word	0x24000008
 800b280:	24000004 	.word	0x24000004
 800b284:	2400000c 	.word	0x2400000c

0800b288 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b08c      	sub	sp, #48	@ 0x30
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	60f8      	str	r0, [r7, #12]
 800b290:	60b9      	str	r1, [r7, #8]
 800b292:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d12a      	bne.n	800b2f0 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800b29a:	4b2d      	ldr	r3, [pc, #180]	@ (800b350 <HAL_RCC_MCOConfig+0xc8>)
 800b29c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800b2a0:	4a2b      	ldr	r2, [pc, #172]	@ (800b350 <HAL_RCC_MCOConfig+0xc8>)
 800b2a2:	f043 0301 	orr.w	r3, r3, #1
 800b2a6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800b2aa:	4b29      	ldr	r3, [pc, #164]	@ (800b350 <HAL_RCC_MCOConfig+0xc8>)
 800b2ac:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800b2b0:	f003 0301 	and.w	r3, r3, #1
 800b2b4:	61bb      	str	r3, [r7, #24]
 800b2b6:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800b2b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b2bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2be:	2302      	movs	r3, #2
 800b2c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b2c2:	2303      	movs	r3, #3
 800b2c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b2ce:	f107 031c 	add.w	r3, r7, #28
 800b2d2:	4619      	mov	r1, r3
 800b2d4:	481f      	ldr	r0, [pc, #124]	@ (800b354 <HAL_RCC_MCOConfig+0xcc>)
 800b2d6:	f7fc fdb9 	bl	8007e4c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800b2da:	4b1d      	ldr	r3, [pc, #116]	@ (800b350 <HAL_RCC_MCOConfig+0xc8>)
 800b2dc:	691b      	ldr	r3, [r3, #16]
 800b2de:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 800b2e2:	68b9      	ldr	r1, [r7, #8]
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	430b      	orrs	r3, r1
 800b2e8:	4919      	ldr	r1, [pc, #100]	@ (800b350 <HAL_RCC_MCOConfig+0xc8>)
 800b2ea:	4313      	orrs	r3, r2
 800b2ec:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800b2ee:	e02a      	b.n	800b346 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800b2f0:	4b17      	ldr	r3, [pc, #92]	@ (800b350 <HAL_RCC_MCOConfig+0xc8>)
 800b2f2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800b2f6:	4a16      	ldr	r2, [pc, #88]	@ (800b350 <HAL_RCC_MCOConfig+0xc8>)
 800b2f8:	f043 0304 	orr.w	r3, r3, #4
 800b2fc:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800b300:	4b13      	ldr	r3, [pc, #76]	@ (800b350 <HAL_RCC_MCOConfig+0xc8>)
 800b302:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800b306:	f003 0304 	and.w	r3, r3, #4
 800b30a:	617b      	str	r3, [r7, #20]
 800b30c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b30e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b314:	2302      	movs	r3, #2
 800b316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b318:	2303      	movs	r3, #3
 800b31a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b31c:	2300      	movs	r3, #0
 800b31e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b320:	2300      	movs	r3, #0
 800b322:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b324:	f107 031c 	add.w	r3, r7, #28
 800b328:	4619      	mov	r1, r3
 800b32a:	480b      	ldr	r0, [pc, #44]	@ (800b358 <HAL_RCC_MCOConfig+0xd0>)
 800b32c:	f7fc fd8e 	bl	8007e4c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800b330:	4b07      	ldr	r3, [pc, #28]	@ (800b350 <HAL_RCC_MCOConfig+0xc8>)
 800b332:	691b      	ldr	r3, [r3, #16]
 800b334:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	01d9      	lsls	r1, r3, #7
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	430b      	orrs	r3, r1
 800b340:	4903      	ldr	r1, [pc, #12]	@ (800b350 <HAL_RCC_MCOConfig+0xc8>)
 800b342:	4313      	orrs	r3, r2
 800b344:	610b      	str	r3, [r1, #16]
}
 800b346:	bf00      	nop
 800b348:	3730      	adds	r7, #48	@ 0x30
 800b34a:	46bd      	mov	sp, r7
 800b34c:	bd80      	pop	{r7, pc}
 800b34e:	bf00      	nop
 800b350:	58024400 	.word	0x58024400
 800b354:	58020000 	.word	0x58020000
 800b358:	58020800 	.word	0x58020800

0800b35c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b089      	sub	sp, #36	@ 0x24
 800b360:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b362:	4bb3      	ldr	r3, [pc, #716]	@ (800b630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b364:	691b      	ldr	r3, [r3, #16]
 800b366:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b36a:	2b18      	cmp	r3, #24
 800b36c:	f200 8155 	bhi.w	800b61a <HAL_RCC_GetSysClockFreq+0x2be>
 800b370:	a201      	add	r2, pc, #4	@ (adr r2, 800b378 <HAL_RCC_GetSysClockFreq+0x1c>)
 800b372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b376:	bf00      	nop
 800b378:	0800b3dd 	.word	0x0800b3dd
 800b37c:	0800b61b 	.word	0x0800b61b
 800b380:	0800b61b 	.word	0x0800b61b
 800b384:	0800b61b 	.word	0x0800b61b
 800b388:	0800b61b 	.word	0x0800b61b
 800b38c:	0800b61b 	.word	0x0800b61b
 800b390:	0800b61b 	.word	0x0800b61b
 800b394:	0800b61b 	.word	0x0800b61b
 800b398:	0800b403 	.word	0x0800b403
 800b39c:	0800b61b 	.word	0x0800b61b
 800b3a0:	0800b61b 	.word	0x0800b61b
 800b3a4:	0800b61b 	.word	0x0800b61b
 800b3a8:	0800b61b 	.word	0x0800b61b
 800b3ac:	0800b61b 	.word	0x0800b61b
 800b3b0:	0800b61b 	.word	0x0800b61b
 800b3b4:	0800b61b 	.word	0x0800b61b
 800b3b8:	0800b409 	.word	0x0800b409
 800b3bc:	0800b61b 	.word	0x0800b61b
 800b3c0:	0800b61b 	.word	0x0800b61b
 800b3c4:	0800b61b 	.word	0x0800b61b
 800b3c8:	0800b61b 	.word	0x0800b61b
 800b3cc:	0800b61b 	.word	0x0800b61b
 800b3d0:	0800b61b 	.word	0x0800b61b
 800b3d4:	0800b61b 	.word	0x0800b61b
 800b3d8:	0800b40f 	.word	0x0800b40f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b3dc:	4b94      	ldr	r3, [pc, #592]	@ (800b630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f003 0320 	and.w	r3, r3, #32
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d009      	beq.n	800b3fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b3e8:	4b91      	ldr	r3, [pc, #580]	@ (800b630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	08db      	lsrs	r3, r3, #3
 800b3ee:	f003 0303 	and.w	r3, r3, #3
 800b3f2:	4a90      	ldr	r2, [pc, #576]	@ (800b634 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b3f4:	fa22 f303 	lsr.w	r3, r2, r3
 800b3f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b3fa:	e111      	b.n	800b620 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b3fc:	4b8d      	ldr	r3, [pc, #564]	@ (800b634 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b3fe:	61bb      	str	r3, [r7, #24]
      break;
 800b400:	e10e      	b.n	800b620 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b402:	4b8d      	ldr	r3, [pc, #564]	@ (800b638 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b404:	61bb      	str	r3, [r7, #24]
      break;
 800b406:	e10b      	b.n	800b620 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b408:	4b8c      	ldr	r3, [pc, #560]	@ (800b63c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b40a:	61bb      	str	r3, [r7, #24]
      break;
 800b40c:	e108      	b.n	800b620 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b40e:	4b88      	ldr	r3, [pc, #544]	@ (800b630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b412:	f003 0303 	and.w	r3, r3, #3
 800b416:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b418:	4b85      	ldr	r3, [pc, #532]	@ (800b630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b41a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b41c:	091b      	lsrs	r3, r3, #4
 800b41e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b422:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b424:	4b82      	ldr	r3, [pc, #520]	@ (800b630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b428:	f003 0301 	and.w	r3, r3, #1
 800b42c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b42e:	4b80      	ldr	r3, [pc, #512]	@ (800b630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b432:	08db      	lsrs	r3, r3, #3
 800b434:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b438:	68fa      	ldr	r2, [r7, #12]
 800b43a:	fb02 f303 	mul.w	r3, r2, r3
 800b43e:	ee07 3a90 	vmov	s15, r3
 800b442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b446:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b44a:	693b      	ldr	r3, [r7, #16]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	f000 80e1 	beq.w	800b614 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	2b02      	cmp	r3, #2
 800b456:	f000 8083 	beq.w	800b560 <HAL_RCC_GetSysClockFreq+0x204>
 800b45a:	697b      	ldr	r3, [r7, #20]
 800b45c:	2b02      	cmp	r3, #2
 800b45e:	f200 80a1 	bhi.w	800b5a4 <HAL_RCC_GetSysClockFreq+0x248>
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d003      	beq.n	800b470 <HAL_RCC_GetSysClockFreq+0x114>
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	2b01      	cmp	r3, #1
 800b46c:	d056      	beq.n	800b51c <HAL_RCC_GetSysClockFreq+0x1c0>
 800b46e:	e099      	b.n	800b5a4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b470:	4b6f      	ldr	r3, [pc, #444]	@ (800b630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f003 0320 	and.w	r3, r3, #32
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d02d      	beq.n	800b4d8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b47c:	4b6c      	ldr	r3, [pc, #432]	@ (800b630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	08db      	lsrs	r3, r3, #3
 800b482:	f003 0303 	and.w	r3, r3, #3
 800b486:	4a6b      	ldr	r2, [pc, #428]	@ (800b634 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b488:	fa22 f303 	lsr.w	r3, r2, r3
 800b48c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	ee07 3a90 	vmov	s15, r3
 800b494:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b498:	693b      	ldr	r3, [r7, #16]
 800b49a:	ee07 3a90 	vmov	s15, r3
 800b49e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4a6:	4b62      	ldr	r3, [pc, #392]	@ (800b630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4ae:	ee07 3a90 	vmov	s15, r3
 800b4b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4b6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b4ba:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800b640 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b4be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b4ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4d2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b4d6:	e087      	b.n	800b5e8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4d8:	693b      	ldr	r3, [r7, #16]
 800b4da:	ee07 3a90 	vmov	s15, r3
 800b4de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4e2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800b644 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b4e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4ea:	4b51      	ldr	r3, [pc, #324]	@ (800b630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b4ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4f2:	ee07 3a90 	vmov	s15, r3
 800b4f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4fa:	ed97 6a02 	vldr	s12, [r7, #8]
 800b4fe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800b640 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b50a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b50e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b512:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b516:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b51a:	e065      	b.n	800b5e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	ee07 3a90 	vmov	s15, r3
 800b522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b526:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800b648 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b52a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b52e:	4b40      	ldr	r3, [pc, #256]	@ (800b630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b536:	ee07 3a90 	vmov	s15, r3
 800b53a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b53e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b542:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b640 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b54a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b54e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b55a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b55e:	e043      	b.n	800b5e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b560:	693b      	ldr	r3, [r7, #16]
 800b562:	ee07 3a90 	vmov	s15, r3
 800b566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b56a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800b64c <HAL_RCC_GetSysClockFreq+0x2f0>
 800b56e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b572:	4b2f      	ldr	r3, [pc, #188]	@ (800b630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b57a:	ee07 3a90 	vmov	s15, r3
 800b57e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b582:	ed97 6a02 	vldr	s12, [r7, #8]
 800b586:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800b640 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b58a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b58e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b592:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b59a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b59e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b5a2:	e021      	b.n	800b5e8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	ee07 3a90 	vmov	s15, r3
 800b5aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5ae:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800b648 <HAL_RCC_GetSysClockFreq+0x2ec>
 800b5b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b5b6:	4b1e      	ldr	r3, [pc, #120]	@ (800b630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5be:	ee07 3a90 	vmov	s15, r3
 800b5c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b5c6:	ed97 6a02 	vldr	s12, [r7, #8]
 800b5ca:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800b640 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b5ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b5d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b5d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b5da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b5e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b5e6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b5e8:	4b11      	ldr	r3, [pc, #68]	@ (800b630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5ec:	0a5b      	lsrs	r3, r3, #9
 800b5ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b5f2:	3301      	adds	r3, #1
 800b5f4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	ee07 3a90 	vmov	s15, r3
 800b5fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b600:	edd7 6a07 	vldr	s13, [r7, #28]
 800b604:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b608:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b60c:	ee17 3a90 	vmov	r3, s15
 800b610:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b612:	e005      	b.n	800b620 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b614:	2300      	movs	r3, #0
 800b616:	61bb      	str	r3, [r7, #24]
      break;
 800b618:	e002      	b.n	800b620 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b61a:	4b07      	ldr	r3, [pc, #28]	@ (800b638 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b61c:	61bb      	str	r3, [r7, #24]
      break;
 800b61e:	bf00      	nop
  }

  return sysclockfreq;
 800b620:	69bb      	ldr	r3, [r7, #24]
}
 800b622:	4618      	mov	r0, r3
 800b624:	3724      	adds	r7, #36	@ 0x24
 800b626:	46bd      	mov	sp, r7
 800b628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62c:	4770      	bx	lr
 800b62e:	bf00      	nop
 800b630:	58024400 	.word	0x58024400
 800b634:	03d09000 	.word	0x03d09000
 800b638:	003d0900 	.word	0x003d0900
 800b63c:	007a1200 	.word	0x007a1200
 800b640:	46000000 	.word	0x46000000
 800b644:	4c742400 	.word	0x4c742400
 800b648:	4a742400 	.word	0x4a742400
 800b64c:	4af42400 	.word	0x4af42400

0800b650 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b082      	sub	sp, #8
 800b654:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800b656:	f7ff fe81 	bl	800b35c <HAL_RCC_GetSysClockFreq>
 800b65a:	4602      	mov	r2, r0
 800b65c:	4b10      	ldr	r3, [pc, #64]	@ (800b6a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800b65e:	699b      	ldr	r3, [r3, #24]
 800b660:	0a1b      	lsrs	r3, r3, #8
 800b662:	f003 030f 	and.w	r3, r3, #15
 800b666:	490f      	ldr	r1, [pc, #60]	@ (800b6a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800b668:	5ccb      	ldrb	r3, [r1, r3]
 800b66a:	f003 031f 	and.w	r3, r3, #31
 800b66e:	fa22 f303 	lsr.w	r3, r2, r3
 800b672:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b674:	4b0a      	ldr	r3, [pc, #40]	@ (800b6a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800b676:	699b      	ldr	r3, [r3, #24]
 800b678:	f003 030f 	and.w	r3, r3, #15
 800b67c:	4a09      	ldr	r2, [pc, #36]	@ (800b6a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800b67e:	5cd3      	ldrb	r3, [r2, r3]
 800b680:	f003 031f 	and.w	r3, r3, #31
 800b684:	687a      	ldr	r2, [r7, #4]
 800b686:	fa22 f303 	lsr.w	r3, r2, r3
 800b68a:	4a07      	ldr	r2, [pc, #28]	@ (800b6a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800b68c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b68e:	4a07      	ldr	r2, [pc, #28]	@ (800b6ac <HAL_RCC_GetHCLKFreq+0x5c>)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b694:	4b04      	ldr	r3, [pc, #16]	@ (800b6a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800b696:	681b      	ldr	r3, [r3, #0]
}
 800b698:	4618      	mov	r0, r3
 800b69a:	3708      	adds	r7, #8
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}
 800b6a0:	58024400 	.word	0x58024400
 800b6a4:	08013710 	.word	0x08013710
 800b6a8:	24000008 	.word	0x24000008
 800b6ac:	24000004 	.word	0x24000004

0800b6b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800b6b4:	f7ff ffcc 	bl	800b650 <HAL_RCC_GetHCLKFreq>
 800b6b8:	4602      	mov	r2, r0
 800b6ba:	4b06      	ldr	r3, [pc, #24]	@ (800b6d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b6bc:	69db      	ldr	r3, [r3, #28]
 800b6be:	091b      	lsrs	r3, r3, #4
 800b6c0:	f003 0307 	and.w	r3, r3, #7
 800b6c4:	4904      	ldr	r1, [pc, #16]	@ (800b6d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b6c6:	5ccb      	ldrb	r3, [r1, r3]
 800b6c8:	f003 031f 	and.w	r3, r3, #31
 800b6cc:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	bd80      	pop	{r7, pc}
 800b6d4:	58024400 	.word	0x58024400
 800b6d8:	08013710 	.word	0x08013710

0800b6dc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b6dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b6e0:	b0c8      	sub	sp, #288	@ 0x120
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b6f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6fc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800b700:	2500      	movs	r5, #0
 800b702:	ea54 0305 	orrs.w	r3, r4, r5
 800b706:	d049      	beq.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b708:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b70c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b70e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b712:	d02f      	beq.n	800b774 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b714:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b718:	d828      	bhi.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b71a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b71e:	d01a      	beq.n	800b756 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b720:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b724:	d822      	bhi.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b726:	2b00      	cmp	r3, #0
 800b728:	d003      	beq.n	800b732 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b72a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b72e:	d007      	beq.n	800b740 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b730:	e01c      	b.n	800b76c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b732:	4ba7      	ldr	r3, [pc, #668]	@ (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b736:	4aa6      	ldr	r2, [pc, #664]	@ (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b738:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b73c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b73e:	e01a      	b.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b740:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b744:	3308      	adds	r3, #8
 800b746:	2102      	movs	r1, #2
 800b748:	4618      	mov	r0, r3
 800b74a:	f002 fa6d 	bl	800dc28 <RCCEx_PLL2_Config>
 800b74e:	4603      	mov	r3, r0
 800b750:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b754:	e00f      	b.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b756:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b75a:	3328      	adds	r3, #40	@ 0x28
 800b75c:	2102      	movs	r1, #2
 800b75e:	4618      	mov	r0, r3
 800b760:	f002 fb14 	bl	800dd8c <RCCEx_PLL3_Config>
 800b764:	4603      	mov	r3, r0
 800b766:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b76a:	e004      	b.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b76c:	2301      	movs	r3, #1
 800b76e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b772:	e000      	b.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b774:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b776:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d10a      	bne.n	800b794 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b77e:	4b94      	ldr	r3, [pc, #592]	@ (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b780:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b782:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b786:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b78a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b78c:	4a90      	ldr	r2, [pc, #576]	@ (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b78e:	430b      	orrs	r3, r1
 800b790:	6513      	str	r3, [r2, #80]	@ 0x50
 800b792:	e003      	b.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b794:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b798:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b79c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800b7a8:	f04f 0900 	mov.w	r9, #0
 800b7ac:	ea58 0309 	orrs.w	r3, r8, r9
 800b7b0:	d047      	beq.n	800b842 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b7b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b7b8:	2b04      	cmp	r3, #4
 800b7ba:	d82a      	bhi.n	800b812 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b7bc:	a201      	add	r2, pc, #4	@ (adr r2, 800b7c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b7be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7c2:	bf00      	nop
 800b7c4:	0800b7d9 	.word	0x0800b7d9
 800b7c8:	0800b7e7 	.word	0x0800b7e7
 800b7cc:	0800b7fd 	.word	0x0800b7fd
 800b7d0:	0800b81b 	.word	0x0800b81b
 800b7d4:	0800b81b 	.word	0x0800b81b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b7d8:	4b7d      	ldr	r3, [pc, #500]	@ (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b7da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7dc:	4a7c      	ldr	r2, [pc, #496]	@ (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b7de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b7e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b7e4:	e01a      	b.n	800b81c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b7e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b7ea:	3308      	adds	r3, #8
 800b7ec:	2100      	movs	r1, #0
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f002 fa1a 	bl	800dc28 <RCCEx_PLL2_Config>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b7fa:	e00f      	b.n	800b81c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b7fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b800:	3328      	adds	r3, #40	@ 0x28
 800b802:	2100      	movs	r1, #0
 800b804:	4618      	mov	r0, r3
 800b806:	f002 fac1 	bl	800dd8c <RCCEx_PLL3_Config>
 800b80a:	4603      	mov	r3, r0
 800b80c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b810:	e004      	b.n	800b81c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b812:	2301      	movs	r3, #1
 800b814:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b818:	e000      	b.n	800b81c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b81a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b81c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b820:	2b00      	cmp	r3, #0
 800b822:	d10a      	bne.n	800b83a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b824:	4b6a      	ldr	r3, [pc, #424]	@ (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b826:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b828:	f023 0107 	bic.w	r1, r3, #7
 800b82c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b832:	4a67      	ldr	r2, [pc, #412]	@ (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b834:	430b      	orrs	r3, r1
 800b836:	6513      	str	r3, [r2, #80]	@ 0x50
 800b838:	e003      	b.n	800b842 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b83a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b83e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800b842:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800b84e:	f04f 0b00 	mov.w	fp, #0
 800b852:	ea5a 030b 	orrs.w	r3, sl, fp
 800b856:	d054      	beq.n	800b902 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800b858:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b85c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b85e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800b862:	d036      	beq.n	800b8d2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800b864:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800b868:	d82f      	bhi.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b86a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b86e:	d032      	beq.n	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800b870:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b874:	d829      	bhi.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b876:	2bc0      	cmp	r3, #192	@ 0xc0
 800b878:	d02f      	beq.n	800b8da <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800b87a:	2bc0      	cmp	r3, #192	@ 0xc0
 800b87c:	d825      	bhi.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b87e:	2b80      	cmp	r3, #128	@ 0x80
 800b880:	d018      	beq.n	800b8b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800b882:	2b80      	cmp	r3, #128	@ 0x80
 800b884:	d821      	bhi.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b886:	2b00      	cmp	r3, #0
 800b888:	d002      	beq.n	800b890 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800b88a:	2b40      	cmp	r3, #64	@ 0x40
 800b88c:	d007      	beq.n	800b89e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800b88e:	e01c      	b.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b890:	4b4f      	ldr	r3, [pc, #316]	@ (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b894:	4a4e      	ldr	r2, [pc, #312]	@ (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b896:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b89a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b89c:	e01e      	b.n	800b8dc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b89e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8a2:	3308      	adds	r3, #8
 800b8a4:	2100      	movs	r1, #0
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	f002 f9be 	bl	800dc28 <RCCEx_PLL2_Config>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b8b2:	e013      	b.n	800b8dc <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b8b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8b8:	3328      	adds	r3, #40	@ 0x28
 800b8ba:	2100      	movs	r1, #0
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f002 fa65 	bl	800dd8c <RCCEx_PLL3_Config>
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800b8c8:	e008      	b.n	800b8dc <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b8d0:	e004      	b.n	800b8dc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b8d2:	bf00      	nop
 800b8d4:	e002      	b.n	800b8dc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b8d6:	bf00      	nop
 800b8d8:	e000      	b.n	800b8dc <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800b8da:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8dc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d10a      	bne.n	800b8fa <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800b8e4:	4b3a      	ldr	r3, [pc, #232]	@ (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b8e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b8e8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800b8ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b8f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b8f2:	4a37      	ldr	r2, [pc, #220]	@ (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b8f4:	430b      	orrs	r3, r1
 800b8f6:	6513      	str	r3, [r2, #80]	@ 0x50
 800b8f8:	e003      	b.n	800b902 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8fa:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b8fe:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800b902:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b90a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800b90e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800b912:	2300      	movs	r3, #0
 800b914:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800b918:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800b91c:	460b      	mov	r3, r1
 800b91e:	4313      	orrs	r3, r2
 800b920:	d05c      	beq.n	800b9dc <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800b922:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b926:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b928:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800b92c:	d03b      	beq.n	800b9a6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800b92e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800b932:	d834      	bhi.n	800b99e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b934:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b938:	d037      	beq.n	800b9aa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800b93a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b93e:	d82e      	bhi.n	800b99e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b940:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800b944:	d033      	beq.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800b946:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800b94a:	d828      	bhi.n	800b99e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b94c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b950:	d01a      	beq.n	800b988 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800b952:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b956:	d822      	bhi.n	800b99e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d003      	beq.n	800b964 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800b95c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b960:	d007      	beq.n	800b972 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800b962:	e01c      	b.n	800b99e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b964:	4b1a      	ldr	r3, [pc, #104]	@ (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b968:	4a19      	ldr	r2, [pc, #100]	@ (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b96a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b96e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b970:	e01e      	b.n	800b9b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b972:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b976:	3308      	adds	r3, #8
 800b978:	2100      	movs	r1, #0
 800b97a:	4618      	mov	r0, r3
 800b97c:	f002 f954 	bl	800dc28 <RCCEx_PLL2_Config>
 800b980:	4603      	mov	r3, r0
 800b982:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b986:	e013      	b.n	800b9b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b988:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b98c:	3328      	adds	r3, #40	@ 0x28
 800b98e:	2100      	movs	r1, #0
 800b990:	4618      	mov	r0, r3
 800b992:	f002 f9fb 	bl	800dd8c <RCCEx_PLL3_Config>
 800b996:	4603      	mov	r3, r0
 800b998:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800b99c:	e008      	b.n	800b9b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b99e:	2301      	movs	r3, #1
 800b9a0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b9a4:	e004      	b.n	800b9b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b9a6:	bf00      	nop
 800b9a8:	e002      	b.n	800b9b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b9aa:	bf00      	nop
 800b9ac:	e000      	b.n	800b9b0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800b9ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d10d      	bne.n	800b9d4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800b9b8:	4b05      	ldr	r3, [pc, #20]	@ (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b9ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9bc:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800b9c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b9c6:	4a02      	ldr	r2, [pc, #8]	@ (800b9d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b9c8:	430b      	orrs	r3, r1
 800b9ca:	6513      	str	r3, [r2, #80]	@ 0x50
 800b9cc:	e006      	b.n	800b9dc <HAL_RCCEx_PeriphCLKConfig+0x300>
 800b9ce:	bf00      	nop
 800b9d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b9d8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800b9dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800b9e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800b9f2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800b9f6:	460b      	mov	r3, r1
 800b9f8:	4313      	orrs	r3, r2
 800b9fa:	d03a      	beq.n	800ba72 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800b9fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba02:	2b30      	cmp	r3, #48	@ 0x30
 800ba04:	d01f      	beq.n	800ba46 <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800ba06:	2b30      	cmp	r3, #48	@ 0x30
 800ba08:	d819      	bhi.n	800ba3e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800ba0a:	2b20      	cmp	r3, #32
 800ba0c:	d00c      	beq.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800ba0e:	2b20      	cmp	r3, #32
 800ba10:	d815      	bhi.n	800ba3e <HAL_RCCEx_PeriphCLKConfig+0x362>
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d019      	beq.n	800ba4a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800ba16:	2b10      	cmp	r3, #16
 800ba18:	d111      	bne.n	800ba3e <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba1a:	4bae      	ldr	r3, [pc, #696]	@ (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba1e:	4aad      	ldr	r2, [pc, #692]	@ (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ba24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800ba26:	e011      	b.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ba28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba2c:	3308      	adds	r3, #8
 800ba2e:	2102      	movs	r1, #2
 800ba30:	4618      	mov	r0, r3
 800ba32:	f002 f8f9 	bl	800dc28 <RCCEx_PLL2_Config>
 800ba36:	4603      	mov	r3, r0
 800ba38:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800ba3c:	e006      	b.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ba3e:	2301      	movs	r3, #1
 800ba40:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ba44:	e002      	b.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800ba46:	bf00      	nop
 800ba48:	e000      	b.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800ba4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba4c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d10a      	bne.n	800ba6a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800ba54:	4b9f      	ldr	r3, [pc, #636]	@ (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba58:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800ba5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba62:	4a9c      	ldr	r2, [pc, #624]	@ (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800ba64:	430b      	orrs	r3, r1
 800ba66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800ba68:	e003      	b.n	800ba72 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba6a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ba6e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ba72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800ba7e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800ba82:	2300      	movs	r3, #0
 800ba84:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800ba88:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800ba8c:	460b      	mov	r3, r1
 800ba8e:	4313      	orrs	r3, r2
 800ba90:	d051      	beq.n	800bb36 <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ba92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ba98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ba9c:	d035      	beq.n	800bb0a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800ba9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800baa2:	d82e      	bhi.n	800bb02 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800baa4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800baa8:	d031      	beq.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x432>
 800baaa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800baae:	d828      	bhi.n	800bb02 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800bab0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bab4:	d01a      	beq.n	800baec <HAL_RCCEx_PeriphCLKConfig+0x410>
 800bab6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800baba:	d822      	bhi.n	800bb02 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800babc:	2b00      	cmp	r3, #0
 800babe:	d003      	beq.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800bac0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bac4:	d007      	beq.n	800bad6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800bac6:	e01c      	b.n	800bb02 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bac8:	4b82      	ldr	r3, [pc, #520]	@ (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800baca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bacc:	4a81      	ldr	r2, [pc, #516]	@ (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bace:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bad2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bad4:	e01c      	b.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bad6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bada:	3308      	adds	r3, #8
 800badc:	2100      	movs	r1, #0
 800bade:	4618      	mov	r0, r3
 800bae0:	f002 f8a2 	bl	800dc28 <RCCEx_PLL2_Config>
 800bae4:	4603      	mov	r3, r0
 800bae6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800baea:	e011      	b.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800baec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800baf0:	3328      	adds	r3, #40	@ 0x28
 800baf2:	2100      	movs	r1, #0
 800baf4:	4618      	mov	r0, r3
 800baf6:	f002 f949 	bl	800dd8c <RCCEx_PLL3_Config>
 800bafa:	4603      	mov	r3, r0
 800bafc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bb00:	e006      	b.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb02:	2301      	movs	r3, #1
 800bb04:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bb08:	e002      	b.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800bb0a:	bf00      	nop
 800bb0c:	e000      	b.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800bb0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb10:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d10a      	bne.n	800bb2e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bb18:	4b6e      	ldr	r3, [pc, #440]	@ (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb1c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800bb20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bb26:	4a6b      	ldr	r2, [pc, #428]	@ (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bb28:	430b      	orrs	r3, r1
 800bb2a:	6513      	str	r3, [r2, #80]	@ 0x50
 800bb2c:	e003      	b.n	800bb36 <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb2e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bb32:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bb36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb3e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800bb42:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bb46:	2300      	movs	r3, #0
 800bb48:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800bb4c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800bb50:	460b      	mov	r3, r1
 800bb52:	4313      	orrs	r3, r2
 800bb54:	d053      	beq.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800bb56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bb5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bb60:	d033      	beq.n	800bbca <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800bb62:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bb66:	d82c      	bhi.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bb68:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bb6c:	d02f      	beq.n	800bbce <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800bb6e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bb72:	d826      	bhi.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bb74:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bb78:	d02b      	beq.n	800bbd2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bb7a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bb7e:	d820      	bhi.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bb80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bb84:	d012      	beq.n	800bbac <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800bb86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bb8a:	d81a      	bhi.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d022      	beq.n	800bbd6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800bb90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bb94:	d115      	bne.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bb96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb9a:	3308      	adds	r3, #8
 800bb9c:	2101      	movs	r1, #1
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f002 f842 	bl	800dc28 <RCCEx_PLL2_Config>
 800bba4:	4603      	mov	r3, r0
 800bba6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bbaa:	e015      	b.n	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bbac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbb0:	3328      	adds	r3, #40	@ 0x28
 800bbb2:	2101      	movs	r1, #1
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f002 f8e9 	bl	800dd8c <RCCEx_PLL3_Config>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bbc0:	e00a      	b.n	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bbc8:	e006      	b.n	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bbca:	bf00      	nop
 800bbcc:	e004      	b.n	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bbce:	bf00      	nop
 800bbd0:	e002      	b.n	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bbd2:	bf00      	nop
 800bbd4:	e000      	b.n	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bbd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbd8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d10a      	bne.n	800bbf6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bbe0:	4b3c      	ldr	r3, [pc, #240]	@ (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bbe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbe4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800bbe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bbee:	4a39      	ldr	r2, [pc, #228]	@ (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bbf0:	430b      	orrs	r3, r1
 800bbf2:	6513      	str	r3, [r2, #80]	@ 0x50
 800bbf4:	e003      	b.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbf6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bbfa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bbfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc06:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800bc0a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bc0e:	2300      	movs	r3, #0
 800bc10:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800bc14:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800bc18:	460b      	mov	r3, r1
 800bc1a:	4313      	orrs	r3, r2
 800bc1c:	d060      	beq.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800bc1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bc26:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800bc2a:	d039      	beq.n	800bca0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800bc2c:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800bc30:	d832      	bhi.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bc32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bc36:	d035      	beq.n	800bca4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800bc38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bc3c:	d82c      	bhi.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bc3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc42:	d031      	beq.n	800bca8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800bc44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc48:	d826      	bhi.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bc4a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bc4e:	d02d      	beq.n	800bcac <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800bc50:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800bc54:	d820      	bhi.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bc56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc5a:	d012      	beq.n	800bc82 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800bc5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bc60:	d81a      	bhi.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d024      	beq.n	800bcb0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800bc66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bc6a:	d115      	bne.n	800bc98 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc70:	3308      	adds	r3, #8
 800bc72:	2101      	movs	r1, #1
 800bc74:	4618      	mov	r0, r3
 800bc76:	f001 ffd7 	bl	800dc28 <RCCEx_PLL2_Config>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bc80:	e017      	b.n	800bcb2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bc82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc86:	3328      	adds	r3, #40	@ 0x28
 800bc88:	2101      	movs	r1, #1
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f002 f87e 	bl	800dd8c <RCCEx_PLL3_Config>
 800bc90:	4603      	mov	r3, r0
 800bc92:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800bc96:	e00c      	b.n	800bcb2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800bc98:	2301      	movs	r3, #1
 800bc9a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bc9e:	e008      	b.n	800bcb2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bca0:	bf00      	nop
 800bca2:	e006      	b.n	800bcb2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bca4:	bf00      	nop
 800bca6:	e004      	b.n	800bcb2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bca8:	bf00      	nop
 800bcaa:	e002      	b.n	800bcb2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bcac:	bf00      	nop
 800bcae:	e000      	b.n	800bcb2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bcb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcb2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d10e      	bne.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bcba:	4b06      	ldr	r3, [pc, #24]	@ (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bcbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bcbe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800bcc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bcca:	4a02      	ldr	r2, [pc, #8]	@ (800bcd4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bccc:	430b      	orrs	r3, r1
 800bcce:	6593      	str	r3, [r2, #88]	@ 0x58
 800bcd0:	e006      	b.n	800bce0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800bcd2:	bf00      	nop
 800bcd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcd8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bcdc:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800bcec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800bcf6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800bcfa:	460b      	mov	r3, r1
 800bcfc:	4313      	orrs	r3, r2
 800bcfe:	d037      	beq.n	800bd70 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800bd00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bd06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bd0a:	d00e      	beq.n	800bd2a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800bd0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bd10:	d816      	bhi.n	800bd40 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d018      	beq.n	800bd48 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800bd16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bd1a:	d111      	bne.n	800bd40 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd1c:	4bc4      	ldr	r3, [pc, #784]	@ (800c030 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd20:	4ac3      	ldr	r2, [pc, #780]	@ (800c030 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bd26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bd28:	e00f      	b.n	800bd4a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bd2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd2e:	3308      	adds	r3, #8
 800bd30:	2101      	movs	r1, #1
 800bd32:	4618      	mov	r0, r3
 800bd34:	f001 ff78 	bl	800dc28 <RCCEx_PLL2_Config>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bd3e:	e004      	b.n	800bd4a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd40:	2301      	movs	r3, #1
 800bd42:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bd46:	e000      	b.n	800bd4a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800bd48:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd4a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d10a      	bne.n	800bd68 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bd52:	4bb7      	ldr	r3, [pc, #732]	@ (800c030 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd56:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800bd5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bd60:	4ab3      	ldr	r2, [pc, #716]	@ (800c030 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bd62:	430b      	orrs	r3, r1
 800bd64:	6513      	str	r3, [r2, #80]	@ 0x50
 800bd66:	e003      	b.n	800bd70 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd68:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bd6c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bd70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd78:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800bd7c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bd80:	2300      	movs	r3, #0
 800bd82:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bd86:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800bd8a:	460b      	mov	r3, r1
 800bd8c:	4313      	orrs	r3, r2
 800bd8e:	d039      	beq.n	800be04 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800bd90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bd96:	2b03      	cmp	r3, #3
 800bd98:	d81c      	bhi.n	800bdd4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800bd9a:	a201      	add	r2, pc, #4	@ (adr r2, 800bda0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800bd9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bda0:	0800bddd 	.word	0x0800bddd
 800bda4:	0800bdb1 	.word	0x0800bdb1
 800bda8:	0800bdbf 	.word	0x0800bdbf
 800bdac:	0800bddd 	.word	0x0800bddd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bdb0:	4b9f      	ldr	r3, [pc, #636]	@ (800c030 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdb4:	4a9e      	ldr	r2, [pc, #632]	@ (800c030 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bdba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bdbc:	e00f      	b.n	800bdde <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bdbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bdc2:	3308      	adds	r3, #8
 800bdc4:	2102      	movs	r1, #2
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f001 ff2e 	bl	800dc28 <RCCEx_PLL2_Config>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bdd2:	e004      	b.n	800bdde <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bdd4:	2301      	movs	r3, #1
 800bdd6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bdda:	e000      	b.n	800bdde <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800bddc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bdde:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d10a      	bne.n	800bdfc <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bde6:	4b92      	ldr	r3, [pc, #584]	@ (800c030 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bde8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bdea:	f023 0103 	bic.w	r1, r3, #3
 800bdee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bdf2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bdf4:	4a8e      	ldr	r2, [pc, #568]	@ (800c030 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bdf6:	430b      	orrs	r3, r1
 800bdf8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800bdfa:	e003      	b.n	800be04 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdfc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800be00:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800be04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be0c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800be10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800be14:	2300      	movs	r3, #0
 800be16:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800be1a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800be1e:	460b      	mov	r3, r1
 800be20:	4313      	orrs	r3, r2
 800be22:	f000 8099 	beq.w	800bf58 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800be26:	4b83      	ldr	r3, [pc, #524]	@ (800c034 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	4a82      	ldr	r2, [pc, #520]	@ (800c034 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800be2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800be30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800be32:	f7f7 f8a9 	bl	8002f88 <HAL_GetTick>
 800be36:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800be3a:	e00b      	b.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800be3c:	f7f7 f8a4 	bl	8002f88 <HAL_GetTick>
 800be40:	4602      	mov	r2, r0
 800be42:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800be46:	1ad3      	subs	r3, r2, r3
 800be48:	2b64      	cmp	r3, #100	@ 0x64
 800be4a:	d903      	bls.n	800be54 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800be4c:	2303      	movs	r3, #3
 800be4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800be52:	e005      	b.n	800be60 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800be54:	4b77      	ldr	r3, [pc, #476]	@ (800c034 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d0ed      	beq.n	800be3c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800be60:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800be64:	2b00      	cmp	r3, #0
 800be66:	d173      	bne.n	800bf50 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800be68:	4b71      	ldr	r3, [pc, #452]	@ (800c030 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be6a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800be6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800be74:	4053      	eors	r3, r2
 800be76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d015      	beq.n	800beaa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800be7e:	4b6c      	ldr	r3, [pc, #432]	@ (800c030 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800be86:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800be8a:	4b69      	ldr	r3, [pc, #420]	@ (800c030 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be8e:	4a68      	ldr	r2, [pc, #416]	@ (800c030 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800be94:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800be96:	4b66      	ldr	r3, [pc, #408]	@ (800c030 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800be9a:	4a65      	ldr	r2, [pc, #404]	@ (800c030 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800be9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bea0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800bea2:	4a63      	ldr	r2, [pc, #396]	@ (800c030 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800bea8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800beaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800beae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800beb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800beb6:	d118      	bne.n	800beea <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800beb8:	f7f7 f866 	bl	8002f88 <HAL_GetTick>
 800bebc:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bec0:	e00d      	b.n	800bede <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bec2:	f7f7 f861 	bl	8002f88 <HAL_GetTick>
 800bec6:	4602      	mov	r2, r0
 800bec8:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800becc:	1ad2      	subs	r2, r2, r3
 800bece:	f241 3388 	movw	r3, #5000	@ 0x1388
 800bed2:	429a      	cmp	r2, r3
 800bed4:	d903      	bls.n	800bede <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800bed6:	2303      	movs	r3, #3
 800bed8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 800bedc:	e005      	b.n	800beea <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bede:	4b54      	ldr	r3, [pc, #336]	@ (800c030 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bee0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bee2:	f003 0302 	and.w	r3, r3, #2
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d0eb      	beq.n	800bec2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800beea:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d129      	bne.n	800bf46 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bef2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bef6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800befa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800befe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bf02:	d10e      	bne.n	800bf22 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800bf04:	4b4a      	ldr	r3, [pc, #296]	@ (800c030 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf06:	691b      	ldr	r3, [r3, #16]
 800bf08:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800bf0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bf14:	091a      	lsrs	r2, r3, #4
 800bf16:	4b48      	ldr	r3, [pc, #288]	@ (800c038 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800bf18:	4013      	ands	r3, r2
 800bf1a:	4a45      	ldr	r2, [pc, #276]	@ (800c030 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf1c:	430b      	orrs	r3, r1
 800bf1e:	6113      	str	r3, [r2, #16]
 800bf20:	e005      	b.n	800bf2e <HAL_RCCEx_PeriphCLKConfig+0x852>
 800bf22:	4b43      	ldr	r3, [pc, #268]	@ (800c030 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf24:	691b      	ldr	r3, [r3, #16]
 800bf26:	4a42      	ldr	r2, [pc, #264]	@ (800c030 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf28:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800bf2c:	6113      	str	r3, [r2, #16]
 800bf2e:	4b40      	ldr	r3, [pc, #256]	@ (800c030 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf30:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800bf32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800bf3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bf3e:	4a3c      	ldr	r2, [pc, #240]	@ (800c030 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf40:	430b      	orrs	r3, r1
 800bf42:	6713      	str	r3, [r2, #112]	@ 0x70
 800bf44:	e008      	b.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bf46:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bf4a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800bf4e:	e003      	b.n	800bf58 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf50:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bf54:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bf58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf60:	f002 0301 	and.w	r3, r2, #1
 800bf64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800bf68:	2300      	movs	r3, #0
 800bf6a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800bf6e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800bf72:	460b      	mov	r3, r1
 800bf74:	4313      	orrs	r3, r2
 800bf76:	f000 8090 	beq.w	800c09a <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800bf7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bf82:	2b28      	cmp	r3, #40	@ 0x28
 800bf84:	d870      	bhi.n	800c068 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800bf86:	a201      	add	r2, pc, #4	@ (adr r2, 800bf8c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800bf88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf8c:	0800c071 	.word	0x0800c071
 800bf90:	0800c069 	.word	0x0800c069
 800bf94:	0800c069 	.word	0x0800c069
 800bf98:	0800c069 	.word	0x0800c069
 800bf9c:	0800c069 	.word	0x0800c069
 800bfa0:	0800c069 	.word	0x0800c069
 800bfa4:	0800c069 	.word	0x0800c069
 800bfa8:	0800c069 	.word	0x0800c069
 800bfac:	0800c03d 	.word	0x0800c03d
 800bfb0:	0800c069 	.word	0x0800c069
 800bfb4:	0800c069 	.word	0x0800c069
 800bfb8:	0800c069 	.word	0x0800c069
 800bfbc:	0800c069 	.word	0x0800c069
 800bfc0:	0800c069 	.word	0x0800c069
 800bfc4:	0800c069 	.word	0x0800c069
 800bfc8:	0800c069 	.word	0x0800c069
 800bfcc:	0800c053 	.word	0x0800c053
 800bfd0:	0800c069 	.word	0x0800c069
 800bfd4:	0800c069 	.word	0x0800c069
 800bfd8:	0800c069 	.word	0x0800c069
 800bfdc:	0800c069 	.word	0x0800c069
 800bfe0:	0800c069 	.word	0x0800c069
 800bfe4:	0800c069 	.word	0x0800c069
 800bfe8:	0800c069 	.word	0x0800c069
 800bfec:	0800c071 	.word	0x0800c071
 800bff0:	0800c069 	.word	0x0800c069
 800bff4:	0800c069 	.word	0x0800c069
 800bff8:	0800c069 	.word	0x0800c069
 800bffc:	0800c069 	.word	0x0800c069
 800c000:	0800c069 	.word	0x0800c069
 800c004:	0800c069 	.word	0x0800c069
 800c008:	0800c069 	.word	0x0800c069
 800c00c:	0800c071 	.word	0x0800c071
 800c010:	0800c069 	.word	0x0800c069
 800c014:	0800c069 	.word	0x0800c069
 800c018:	0800c069 	.word	0x0800c069
 800c01c:	0800c069 	.word	0x0800c069
 800c020:	0800c069 	.word	0x0800c069
 800c024:	0800c069 	.word	0x0800c069
 800c028:	0800c069 	.word	0x0800c069
 800c02c:	0800c071 	.word	0x0800c071
 800c030:	58024400 	.word	0x58024400
 800c034:	58024800 	.word	0x58024800
 800c038:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c03c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c040:	3308      	adds	r3, #8
 800c042:	2101      	movs	r1, #1
 800c044:	4618      	mov	r0, r3
 800c046:	f001 fdef 	bl	800dc28 <RCCEx_PLL2_Config>
 800c04a:	4603      	mov	r3, r0
 800c04c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c050:	e00f      	b.n	800c072 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c052:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c056:	3328      	adds	r3, #40	@ 0x28
 800c058:	2101      	movs	r1, #1
 800c05a:	4618      	mov	r0, r3
 800c05c:	f001 fe96 	bl	800dd8c <RCCEx_PLL3_Config>
 800c060:	4603      	mov	r3, r0
 800c062:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c066:	e004      	b.n	800c072 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c068:	2301      	movs	r3, #1
 800c06a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c06e:	e000      	b.n	800c072 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800c070:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c072:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c076:	2b00      	cmp	r3, #0
 800c078:	d10b      	bne.n	800c092 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c07a:	4bc0      	ldr	r3, [pc, #768]	@ (800c37c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c07c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c07e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800c082:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c086:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c08a:	4abc      	ldr	r2, [pc, #752]	@ (800c37c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c08c:	430b      	orrs	r3, r1
 800c08e:	6553      	str	r3, [r2, #84]	@ 0x54
 800c090:	e003      	b.n	800c09a <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c092:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c096:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c09a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c09e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a2:	f002 0302 	and.w	r3, r2, #2
 800c0a6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c0b0:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800c0b4:	460b      	mov	r3, r1
 800c0b6:	4313      	orrs	r3, r2
 800c0b8:	d043      	beq.n	800c142 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c0ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c0be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c0c2:	2b05      	cmp	r3, #5
 800c0c4:	d824      	bhi.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800c0c6:	a201      	add	r2, pc, #4	@ (adr r2, 800c0cc <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800c0c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0cc:	0800c119 	.word	0x0800c119
 800c0d0:	0800c0e5 	.word	0x0800c0e5
 800c0d4:	0800c0fb 	.word	0x0800c0fb
 800c0d8:	0800c119 	.word	0x0800c119
 800c0dc:	0800c119 	.word	0x0800c119
 800c0e0:	0800c119 	.word	0x0800c119
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c0e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c0e8:	3308      	adds	r3, #8
 800c0ea:	2101      	movs	r1, #1
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f001 fd9b 	bl	800dc28 <RCCEx_PLL2_Config>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c0f8:	e00f      	b.n	800c11a <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c0fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c0fe:	3328      	adds	r3, #40	@ 0x28
 800c100:	2101      	movs	r1, #1
 800c102:	4618      	mov	r0, r3
 800c104:	f001 fe42 	bl	800dd8c <RCCEx_PLL3_Config>
 800c108:	4603      	mov	r3, r0
 800c10a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c10e:	e004      	b.n	800c11a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c110:	2301      	movs	r3, #1
 800c112:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c116:	e000      	b.n	800c11a <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800c118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c11a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d10b      	bne.n	800c13a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c122:	4b96      	ldr	r3, [pc, #600]	@ (800c37c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c124:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c126:	f023 0107 	bic.w	r1, r3, #7
 800c12a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c12e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c132:	4a92      	ldr	r2, [pc, #584]	@ (800c37c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c134:	430b      	orrs	r3, r1
 800c136:	6553      	str	r3, [r2, #84]	@ 0x54
 800c138:	e003      	b.n	800c142 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c13a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c13e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c142:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c14a:	f002 0304 	and.w	r3, r2, #4
 800c14e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c152:	2300      	movs	r3, #0
 800c154:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c158:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800c15c:	460b      	mov	r3, r1
 800c15e:	4313      	orrs	r3, r2
 800c160:	d043      	beq.n	800c1ea <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c162:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c166:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c16a:	2b05      	cmp	r3, #5
 800c16c:	d824      	bhi.n	800c1b8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800c16e:	a201      	add	r2, pc, #4	@ (adr r2, 800c174 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800c170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c174:	0800c1c1 	.word	0x0800c1c1
 800c178:	0800c18d 	.word	0x0800c18d
 800c17c:	0800c1a3 	.word	0x0800c1a3
 800c180:	0800c1c1 	.word	0x0800c1c1
 800c184:	0800c1c1 	.word	0x0800c1c1
 800c188:	0800c1c1 	.word	0x0800c1c1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c18c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c190:	3308      	adds	r3, #8
 800c192:	2101      	movs	r1, #1
 800c194:	4618      	mov	r0, r3
 800c196:	f001 fd47 	bl	800dc28 <RCCEx_PLL2_Config>
 800c19a:	4603      	mov	r3, r0
 800c19c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c1a0:	e00f      	b.n	800c1c2 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c1a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c1a6:	3328      	adds	r3, #40	@ 0x28
 800c1a8:	2101      	movs	r1, #1
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f001 fdee 	bl	800dd8c <RCCEx_PLL3_Config>
 800c1b0:	4603      	mov	r3, r0
 800c1b2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c1b6:	e004      	b.n	800c1c2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c1be:	e000      	b.n	800c1c2 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800c1c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c1c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d10b      	bne.n	800c1e2 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c1ca:	4b6c      	ldr	r3, [pc, #432]	@ (800c37c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c1cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c1ce:	f023 0107 	bic.w	r1, r3, #7
 800c1d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c1d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c1da:	4a68      	ldr	r2, [pc, #416]	@ (800c37c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c1dc:	430b      	orrs	r3, r1
 800c1de:	6593      	str	r3, [r2, #88]	@ 0x58
 800c1e0:	e003      	b.n	800c1ea <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c1e2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c1e6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c1ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c1ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f2:	f002 0320 	and.w	r3, r2, #32
 800c1f6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c200:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c204:	460b      	mov	r3, r1
 800c206:	4313      	orrs	r3, r2
 800c208:	d055      	beq.n	800c2b6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c20a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c20e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c212:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c216:	d033      	beq.n	800c280 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c218:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c21c:	d82c      	bhi.n	800c278 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c21e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c222:	d02f      	beq.n	800c284 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c224:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c228:	d826      	bhi.n	800c278 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c22a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c22e:	d02b      	beq.n	800c288 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c230:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c234:	d820      	bhi.n	800c278 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c236:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c23a:	d012      	beq.n	800c262 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800c23c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c240:	d81a      	bhi.n	800c278 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c242:	2b00      	cmp	r3, #0
 800c244:	d022      	beq.n	800c28c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800c246:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c24a:	d115      	bne.n	800c278 <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c24c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c250:	3308      	adds	r3, #8
 800c252:	2100      	movs	r1, #0
 800c254:	4618      	mov	r0, r3
 800c256:	f001 fce7 	bl	800dc28 <RCCEx_PLL2_Config>
 800c25a:	4603      	mov	r3, r0
 800c25c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c260:	e015      	b.n	800c28e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c262:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c266:	3328      	adds	r3, #40	@ 0x28
 800c268:	2102      	movs	r1, #2
 800c26a:	4618      	mov	r0, r3
 800c26c:	f001 fd8e 	bl	800dd8c <RCCEx_PLL3_Config>
 800c270:	4603      	mov	r3, r0
 800c272:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c276:	e00a      	b.n	800c28e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c278:	2301      	movs	r3, #1
 800c27a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c27e:	e006      	b.n	800c28e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c280:	bf00      	nop
 800c282:	e004      	b.n	800c28e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c284:	bf00      	nop
 800c286:	e002      	b.n	800c28e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c288:	bf00      	nop
 800c28a:	e000      	b.n	800c28e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c28c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c28e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c292:	2b00      	cmp	r3, #0
 800c294:	d10b      	bne.n	800c2ae <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c296:	4b39      	ldr	r3, [pc, #228]	@ (800c37c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c29a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c29e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c2a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c2a6:	4a35      	ldr	r2, [pc, #212]	@ (800c37c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c2a8:	430b      	orrs	r3, r1
 800c2aa:	6553      	str	r3, [r2, #84]	@ 0x54
 800c2ac:	e003      	b.n	800c2b6 <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2ae:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c2b2:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c2b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2be:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800c2c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c2cc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800c2d0:	460b      	mov	r3, r1
 800c2d2:	4313      	orrs	r3, r2
 800c2d4:	d058      	beq.n	800c388 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c2d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c2da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c2de:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c2e2:	d033      	beq.n	800c34c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c2e4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c2e8:	d82c      	bhi.n	800c344 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c2ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c2ee:	d02f      	beq.n	800c350 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c2f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c2f4:	d826      	bhi.n	800c344 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c2f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c2fa:	d02b      	beq.n	800c354 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c2fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c300:	d820      	bhi.n	800c344 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c302:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c306:	d012      	beq.n	800c32e <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800c308:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c30c:	d81a      	bhi.n	800c344 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d022      	beq.n	800c358 <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800c312:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c316:	d115      	bne.n	800c344 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c318:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c31c:	3308      	adds	r3, #8
 800c31e:	2100      	movs	r1, #0
 800c320:	4618      	mov	r0, r3
 800c322:	f001 fc81 	bl	800dc28 <RCCEx_PLL2_Config>
 800c326:	4603      	mov	r3, r0
 800c328:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c32c:	e015      	b.n	800c35a <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c32e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c332:	3328      	adds	r3, #40	@ 0x28
 800c334:	2102      	movs	r1, #2
 800c336:	4618      	mov	r0, r3
 800c338:	f001 fd28 	bl	800dd8c <RCCEx_PLL3_Config>
 800c33c:	4603      	mov	r3, r0
 800c33e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c342:	e00a      	b.n	800c35a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c344:	2301      	movs	r3, #1
 800c346:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c34a:	e006      	b.n	800c35a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c34c:	bf00      	nop
 800c34e:	e004      	b.n	800c35a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c350:	bf00      	nop
 800c352:	e002      	b.n	800c35a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c354:	bf00      	nop
 800c356:	e000      	b.n	800c35a <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c358:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c35a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d10e      	bne.n	800c380 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c362:	4b06      	ldr	r3, [pc, #24]	@ (800c37c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c364:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c366:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800c36a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c36e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c372:	4a02      	ldr	r2, [pc, #8]	@ (800c37c <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c374:	430b      	orrs	r3, r1
 800c376:	6593      	str	r3, [r2, #88]	@ 0x58
 800c378:	e006      	b.n	800c388 <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800c37a:	bf00      	nop
 800c37c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c380:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c384:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c388:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c390:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800c394:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c398:	2300      	movs	r3, #0
 800c39a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c39e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800c3a2:	460b      	mov	r3, r1
 800c3a4:	4313      	orrs	r3, r2
 800c3a6:	d055      	beq.n	800c454 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c3a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c3b0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c3b4:	d033      	beq.n	800c41e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c3b6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c3ba:	d82c      	bhi.n	800c416 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c3bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c3c0:	d02f      	beq.n	800c422 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c3c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c3c6:	d826      	bhi.n	800c416 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c3c8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c3cc:	d02b      	beq.n	800c426 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c3ce:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c3d2:	d820      	bhi.n	800c416 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c3d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c3d8:	d012      	beq.n	800c400 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800c3da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c3de:	d81a      	bhi.n	800c416 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d022      	beq.n	800c42a <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800c3e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c3e8:	d115      	bne.n	800c416 <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c3ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3ee:	3308      	adds	r3, #8
 800c3f0:	2100      	movs	r1, #0
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f001 fc18 	bl	800dc28 <RCCEx_PLL2_Config>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c3fe:	e015      	b.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c400:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c404:	3328      	adds	r3, #40	@ 0x28
 800c406:	2102      	movs	r1, #2
 800c408:	4618      	mov	r0, r3
 800c40a:	f001 fcbf 	bl	800dd8c <RCCEx_PLL3_Config>
 800c40e:	4603      	mov	r3, r0
 800c410:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c414:	e00a      	b.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c416:	2301      	movs	r3, #1
 800c418:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c41c:	e006      	b.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c41e:	bf00      	nop
 800c420:	e004      	b.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c422:	bf00      	nop
 800c424:	e002      	b.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c426:	bf00      	nop
 800c428:	e000      	b.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c42a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c42c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c430:	2b00      	cmp	r3, #0
 800c432:	d10b      	bne.n	800c44c <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c434:	4ba1      	ldr	r3, [pc, #644]	@ (800c6bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c438:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800c43c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c440:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c444:	4a9d      	ldr	r2, [pc, #628]	@ (800c6bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c446:	430b      	orrs	r3, r1
 800c448:	6593      	str	r3, [r2, #88]	@ 0x58
 800c44a:	e003      	b.n	800c454 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c44c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c450:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c454:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c45c:	f002 0308 	and.w	r3, r2, #8
 800c460:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c464:	2300      	movs	r3, #0
 800c466:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c46a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800c46e:	460b      	mov	r3, r1
 800c470:	4313      	orrs	r3, r2
 800c472:	d01e      	beq.n	800c4b2 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c474:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c478:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c47c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c480:	d10c      	bne.n	800c49c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c482:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c486:	3328      	adds	r3, #40	@ 0x28
 800c488:	2102      	movs	r1, #2
 800c48a:	4618      	mov	r0, r3
 800c48c:	f001 fc7e 	bl	800dd8c <RCCEx_PLL3_Config>
 800c490:	4603      	mov	r3, r0
 800c492:	2b00      	cmp	r3, #0
 800c494:	d002      	beq.n	800c49c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800c496:	2301      	movs	r3, #1
 800c498:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c49c:	4b87      	ldr	r3, [pc, #540]	@ (800c6bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c49e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4a0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c4a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c4ac:	4a83      	ldr	r2, [pc, #524]	@ (800c6bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c4ae:	430b      	orrs	r3, r1
 800c4b0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c4b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ba:	f002 0310 	and.w	r3, r2, #16
 800c4be:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c4c8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800c4cc:	460b      	mov	r3, r1
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	d01e      	beq.n	800c510 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c4d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c4da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c4de:	d10c      	bne.n	800c4fa <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c4e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4e4:	3328      	adds	r3, #40	@ 0x28
 800c4e6:	2102      	movs	r1, #2
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f001 fc4f 	bl	800dd8c <RCCEx_PLL3_Config>
 800c4ee:	4603      	mov	r3, r0
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d002      	beq.n	800c4fa <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c4fa:	4b70      	ldr	r3, [pc, #448]	@ (800c6bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c4fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c502:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c506:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c50a:	4a6c      	ldr	r2, [pc, #432]	@ (800c6bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c50c:	430b      	orrs	r3, r1
 800c50e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c510:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c518:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800c51c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c520:	2300      	movs	r3, #0
 800c522:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c526:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800c52a:	460b      	mov	r3, r1
 800c52c:	4313      	orrs	r3, r2
 800c52e:	d03e      	beq.n	800c5ae <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c530:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c534:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c538:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c53c:	d022      	beq.n	800c584 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800c53e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c542:	d81b      	bhi.n	800c57c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c544:	2b00      	cmp	r3, #0
 800c546:	d003      	beq.n	800c550 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800c548:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c54c:	d00b      	beq.n	800c566 <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800c54e:	e015      	b.n	800c57c <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c550:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c554:	3308      	adds	r3, #8
 800c556:	2100      	movs	r1, #0
 800c558:	4618      	mov	r0, r3
 800c55a:	f001 fb65 	bl	800dc28 <RCCEx_PLL2_Config>
 800c55e:	4603      	mov	r3, r0
 800c560:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c564:	e00f      	b.n	800c586 <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c566:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c56a:	3328      	adds	r3, #40	@ 0x28
 800c56c:	2102      	movs	r1, #2
 800c56e:	4618      	mov	r0, r3
 800c570:	f001 fc0c 	bl	800dd8c <RCCEx_PLL3_Config>
 800c574:	4603      	mov	r3, r0
 800c576:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c57a:	e004      	b.n	800c586 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c57c:	2301      	movs	r3, #1
 800c57e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c582:	e000      	b.n	800c586 <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800c584:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c586:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d10b      	bne.n	800c5a6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c58e:	4b4b      	ldr	r3, [pc, #300]	@ (800c6bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c592:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800c596:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c59a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c59e:	4a47      	ldr	r2, [pc, #284]	@ (800c6bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c5a0:	430b      	orrs	r3, r1
 800c5a2:	6593      	str	r3, [r2, #88]	@ 0x58
 800c5a4:	e003      	b.n	800c5ae <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c5aa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c5ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5b6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800c5ba:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c5bc:	2300      	movs	r3, #0
 800c5be:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c5c0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800c5c4:	460b      	mov	r3, r1
 800c5c6:	4313      	orrs	r3, r2
 800c5c8:	d03b      	beq.n	800c642 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c5ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5d2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c5d6:	d01f      	beq.n	800c618 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800c5d8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c5dc:	d818      	bhi.n	800c610 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c5de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c5e2:	d003      	beq.n	800c5ec <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800c5e4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c5e8:	d007      	beq.n	800c5fa <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800c5ea:	e011      	b.n	800c610 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c5ec:	4b33      	ldr	r3, [pc, #204]	@ (800c6bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c5ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5f0:	4a32      	ldr	r2, [pc, #200]	@ (800c6bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c5f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c5f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c5f8:	e00f      	b.n	800c61a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c5fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5fe:	3328      	adds	r3, #40	@ 0x28
 800c600:	2101      	movs	r1, #1
 800c602:	4618      	mov	r0, r3
 800c604:	f001 fbc2 	bl	800dd8c <RCCEx_PLL3_Config>
 800c608:	4603      	mov	r3, r0
 800c60a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800c60e:	e004      	b.n	800c61a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c610:	2301      	movs	r3, #1
 800c612:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c616:	e000      	b.n	800c61a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800c618:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c61a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d10b      	bne.n	800c63a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c622:	4b26      	ldr	r3, [pc, #152]	@ (800c6bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c624:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c626:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c62a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c62e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c632:	4a22      	ldr	r2, [pc, #136]	@ (800c6bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c634:	430b      	orrs	r3, r1
 800c636:	6553      	str	r3, [r2, #84]	@ 0x54
 800c638:	e003      	b.n	800c642 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c63a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c63e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c642:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c64a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800c64e:	673b      	str	r3, [r7, #112]	@ 0x70
 800c650:	2300      	movs	r3, #0
 800c652:	677b      	str	r3, [r7, #116]	@ 0x74
 800c654:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800c658:	460b      	mov	r3, r1
 800c65a:	4313      	orrs	r3, r2
 800c65c:	d034      	beq.n	800c6c8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c65e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c662:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c664:	2b00      	cmp	r3, #0
 800c666:	d003      	beq.n	800c670 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800c668:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c66c:	d007      	beq.n	800c67e <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800c66e:	e011      	b.n	800c694 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c670:	4b12      	ldr	r3, [pc, #72]	@ (800c6bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c674:	4a11      	ldr	r2, [pc, #68]	@ (800c6bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c676:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c67a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c67c:	e00e      	b.n	800c69c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c67e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c682:	3308      	adds	r3, #8
 800c684:	2102      	movs	r1, #2
 800c686:	4618      	mov	r0, r3
 800c688:	f001 face 	bl	800dc28 <RCCEx_PLL2_Config>
 800c68c:	4603      	mov	r3, r0
 800c68e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c692:	e003      	b.n	800c69c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800c694:	2301      	movs	r3, #1
 800c696:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c69a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c69c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d10d      	bne.n	800c6c0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c6a4:	4b05      	ldr	r3, [pc, #20]	@ (800c6bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c6a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c6a8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c6ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c6b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6b2:	4a02      	ldr	r2, [pc, #8]	@ (800c6bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c6b4:	430b      	orrs	r3, r1
 800c6b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c6b8:	e006      	b.n	800c6c8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800c6ba:	bf00      	nop
 800c6bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6c0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c6c4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c6c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6d0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800c6d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c6da:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800c6de:	460b      	mov	r3, r1
 800c6e0:	4313      	orrs	r3, r2
 800c6e2:	d00c      	beq.n	800c6fe <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c6e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c6e8:	3328      	adds	r3, #40	@ 0x28
 800c6ea:	2102      	movs	r1, #2
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	f001 fb4d 	bl	800dd8c <RCCEx_PLL3_Config>
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d002      	beq.n	800c6fe <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800c6f8:	2301      	movs	r3, #1
 800c6fa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c6fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c706:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800c70a:	663b      	str	r3, [r7, #96]	@ 0x60
 800c70c:	2300      	movs	r3, #0
 800c70e:	667b      	str	r3, [r7, #100]	@ 0x64
 800c710:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800c714:	460b      	mov	r3, r1
 800c716:	4313      	orrs	r3, r2
 800c718:	d038      	beq.n	800c78c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c71a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c71e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c722:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c726:	d018      	beq.n	800c75a <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800c728:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c72c:	d811      	bhi.n	800c752 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c72e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c732:	d014      	beq.n	800c75e <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800c734:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c738:	d80b      	bhi.n	800c752 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d011      	beq.n	800c762 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800c73e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c742:	d106      	bne.n	800c752 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c744:	4bc3      	ldr	r3, [pc, #780]	@ (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c748:	4ac2      	ldr	r2, [pc, #776]	@ (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c74a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c74e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c750:	e008      	b.n	800c764 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c752:	2301      	movs	r3, #1
 800c754:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c758:	e004      	b.n	800c764 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c75a:	bf00      	nop
 800c75c:	e002      	b.n	800c764 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c75e:	bf00      	nop
 800c760:	e000      	b.n	800c764 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c762:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c764:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d10b      	bne.n	800c784 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c76c:	4bb9      	ldr	r3, [pc, #740]	@ (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c76e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c770:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c774:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c77c:	4ab5      	ldr	r2, [pc, #724]	@ (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c77e:	430b      	orrs	r3, r1
 800c780:	6553      	str	r3, [r2, #84]	@ 0x54
 800c782:	e003      	b.n	800c78c <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c784:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c788:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c78c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c794:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800c798:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c79a:	2300      	movs	r3, #0
 800c79c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c79e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800c7a2:	460b      	mov	r3, r1
 800c7a4:	4313      	orrs	r3, r2
 800c7a6:	d009      	beq.n	800c7bc <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c7a8:	4baa      	ldr	r3, [pc, #680]	@ (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c7aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c7ac:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c7b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c7b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c7b6:	4aa7      	ldr	r2, [pc, #668]	@ (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c7b8:	430b      	orrs	r3, r1
 800c7ba:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c7bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800c7c8:	653b      	str	r3, [r7, #80]	@ 0x50
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	657b      	str	r3, [r7, #84]	@ 0x54
 800c7ce:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800c7d2:	460b      	mov	r3, r1
 800c7d4:	4313      	orrs	r3, r2
 800c7d6:	d009      	beq.n	800c7ec <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c7d8:	4b9e      	ldr	r3, [pc, #632]	@ (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c7da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c7dc:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800c7e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c7e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c7e6:	4a9b      	ldr	r2, [pc, #620]	@ (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c7e8:	430b      	orrs	r3, r1
 800c7ea:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800c7ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7f4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800c7f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c7fe:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800c802:	460b      	mov	r3, r1
 800c804:	4313      	orrs	r3, r2
 800c806:	d009      	beq.n	800c81c <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800c808:	4b92      	ldr	r3, [pc, #584]	@ (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c80a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c80c:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800c810:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c814:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c816:	4a8f      	ldr	r2, [pc, #572]	@ (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c818:	430b      	orrs	r3, r1
 800c81a:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c81c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c824:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800c828:	643b      	str	r3, [r7, #64]	@ 0x40
 800c82a:	2300      	movs	r3, #0
 800c82c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c82e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800c832:	460b      	mov	r3, r1
 800c834:	4313      	orrs	r3, r2
 800c836:	d00e      	beq.n	800c856 <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c838:	4b86      	ldr	r3, [pc, #536]	@ (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c83a:	691b      	ldr	r3, [r3, #16]
 800c83c:	4a85      	ldr	r2, [pc, #532]	@ (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c83e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c842:	6113      	str	r3, [r2, #16]
 800c844:	4b83      	ldr	r3, [pc, #524]	@ (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c846:	6919      	ldr	r1, [r3, #16]
 800c848:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c84c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800c850:	4a80      	ldr	r2, [pc, #512]	@ (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c852:	430b      	orrs	r3, r1
 800c854:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c856:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c85e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800c862:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c864:	2300      	movs	r3, #0
 800c866:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c868:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800c86c:	460b      	mov	r3, r1
 800c86e:	4313      	orrs	r3, r2
 800c870:	d009      	beq.n	800c886 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c872:	4b78      	ldr	r3, [pc, #480]	@ (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c874:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c876:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800c87a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c87e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c880:	4a74      	ldr	r2, [pc, #464]	@ (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c882:	430b      	orrs	r3, r1
 800c884:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c886:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800c892:	633b      	str	r3, [r7, #48]	@ 0x30
 800c894:	2300      	movs	r3, #0
 800c896:	637b      	str	r3, [r7, #52]	@ 0x34
 800c898:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800c89c:	460b      	mov	r3, r1
 800c89e:	4313      	orrs	r3, r2
 800c8a0:	d00a      	beq.n	800c8b8 <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c8a2:	4b6c      	ldr	r3, [pc, #432]	@ (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c8a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c8a6:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800c8aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c8ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c8b2:	4a68      	ldr	r2, [pc, #416]	@ (800ca54 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c8b4:	430b      	orrs	r3, r1
 800c8b6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c8b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8c0:	2100      	movs	r1, #0
 800c8c2:	62b9      	str	r1, [r7, #40]	@ 0x28
 800c8c4:	f003 0301 	and.w	r3, r3, #1
 800c8c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c8ca:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800c8ce:	460b      	mov	r3, r1
 800c8d0:	4313      	orrs	r3, r2
 800c8d2:	d011      	beq.n	800c8f8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c8d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c8d8:	3308      	adds	r3, #8
 800c8da:	2100      	movs	r1, #0
 800c8dc:	4618      	mov	r0, r3
 800c8de:	f001 f9a3 	bl	800dc28 <RCCEx_PLL2_Config>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800c8e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d003      	beq.n	800c8f8 <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c8f4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c8f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c900:	2100      	movs	r1, #0
 800c902:	6239      	str	r1, [r7, #32]
 800c904:	f003 0302 	and.w	r3, r3, #2
 800c908:	627b      	str	r3, [r7, #36]	@ 0x24
 800c90a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c90e:	460b      	mov	r3, r1
 800c910:	4313      	orrs	r3, r2
 800c912:	d011      	beq.n	800c938 <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c914:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c918:	3308      	adds	r3, #8
 800c91a:	2101      	movs	r1, #1
 800c91c:	4618      	mov	r0, r3
 800c91e:	f001 f983 	bl	800dc28 <RCCEx_PLL2_Config>
 800c922:	4603      	mov	r3, r0
 800c924:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800c928:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d003      	beq.n	800c938 <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c930:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c934:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c938:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c940:	2100      	movs	r1, #0
 800c942:	61b9      	str	r1, [r7, #24]
 800c944:	f003 0304 	and.w	r3, r3, #4
 800c948:	61fb      	str	r3, [r7, #28]
 800c94a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c94e:	460b      	mov	r3, r1
 800c950:	4313      	orrs	r3, r2
 800c952:	d011      	beq.n	800c978 <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c954:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c958:	3308      	adds	r3, #8
 800c95a:	2102      	movs	r1, #2
 800c95c:	4618      	mov	r0, r3
 800c95e:	f001 f963 	bl	800dc28 <RCCEx_PLL2_Config>
 800c962:	4603      	mov	r3, r0
 800c964:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800c968:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d003      	beq.n	800c978 <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c970:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c974:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c978:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c980:	2100      	movs	r1, #0
 800c982:	6139      	str	r1, [r7, #16]
 800c984:	f003 0308 	and.w	r3, r3, #8
 800c988:	617b      	str	r3, [r7, #20]
 800c98a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c98e:	460b      	mov	r3, r1
 800c990:	4313      	orrs	r3, r2
 800c992:	d011      	beq.n	800c9b8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c994:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c998:	3328      	adds	r3, #40	@ 0x28
 800c99a:	2100      	movs	r1, #0
 800c99c:	4618      	mov	r0, r3
 800c99e:	f001 f9f5 	bl	800dd8c <RCCEx_PLL3_Config>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800c9a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d003      	beq.n	800c9b8 <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c9b4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c9b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c9bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9c0:	2100      	movs	r1, #0
 800c9c2:	60b9      	str	r1, [r7, #8]
 800c9c4:	f003 0310 	and.w	r3, r3, #16
 800c9c8:	60fb      	str	r3, [r7, #12]
 800c9ca:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c9ce:	460b      	mov	r3, r1
 800c9d0:	4313      	orrs	r3, r2
 800c9d2:	d011      	beq.n	800c9f8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c9d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c9d8:	3328      	adds	r3, #40	@ 0x28
 800c9da:	2101      	movs	r1, #1
 800c9dc:	4618      	mov	r0, r3
 800c9de:	f001 f9d5 	bl	800dd8c <RCCEx_PLL3_Config>
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800c9e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d003      	beq.n	800c9f8 <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c9f0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c9f4:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c9f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca00:	2100      	movs	r1, #0
 800ca02:	6039      	str	r1, [r7, #0]
 800ca04:	f003 0320 	and.w	r3, r3, #32
 800ca08:	607b      	str	r3, [r7, #4]
 800ca0a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ca0e:	460b      	mov	r3, r1
 800ca10:	4313      	orrs	r3, r2
 800ca12:	d011      	beq.n	800ca38 <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ca14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ca18:	3328      	adds	r3, #40	@ 0x28
 800ca1a:	2102      	movs	r1, #2
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	f001 f9b5 	bl	800dd8c <RCCEx_PLL3_Config>
 800ca22:	4603      	mov	r3, r0
 800ca24:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800ca28:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d003      	beq.n	800ca38 <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca30:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ca34:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800ca38:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d101      	bne.n	800ca44 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800ca40:	2300      	movs	r3, #0
 800ca42:	e000      	b.n	800ca46 <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800ca44:	2301      	movs	r3, #1
}
 800ca46:	4618      	mov	r0, r3
 800ca48:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ca52:	bf00      	nop
 800ca54:	58024400 	.word	0x58024400

0800ca58 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b090      	sub	sp, #64	@ 0x40
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ca62:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca66:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800ca6a:	430b      	orrs	r3, r1
 800ca6c:	f040 8094 	bne.w	800cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ca70:	4b97      	ldr	r3, [pc, #604]	@ (800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ca72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ca74:	f003 0307 	and.w	r3, r3, #7
 800ca78:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ca7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca7c:	2b04      	cmp	r3, #4
 800ca7e:	f200 8087 	bhi.w	800cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ca82:	a201      	add	r2, pc, #4	@ (adr r2, 800ca88 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ca84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca88:	0800ca9d 	.word	0x0800ca9d
 800ca8c:	0800cac5 	.word	0x0800cac5
 800ca90:	0800caed 	.word	0x0800caed
 800ca94:	0800cb89 	.word	0x0800cb89
 800ca98:	0800cb15 	.word	0x0800cb15
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ca9c:	4b8c      	ldr	r3, [pc, #560]	@ (800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800caa4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800caa8:	d108      	bne.n	800cabc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800caaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800caae:	4618      	mov	r0, r3
 800cab0:	f000 ff68 	bl	800d984 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cab8:	f000 bc97 	b.w	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cabc:	2300      	movs	r3, #0
 800cabe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cac0:	f000 bc93 	b.w	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cac4:	4b82      	ldr	r3, [pc, #520]	@ (800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cacc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cad0:	d108      	bne.n	800cae4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cad2:	f107 0318 	add.w	r3, r7, #24
 800cad6:	4618      	mov	r0, r3
 800cad8:	f000 fcac 	bl	800d434 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cadc:	69bb      	ldr	r3, [r7, #24]
 800cade:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cae0:	f000 bc83 	b.w	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cae4:	2300      	movs	r3, #0
 800cae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cae8:	f000 bc7f 	b.w	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800caec:	4b78      	ldr	r3, [pc, #480]	@ (800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800caf4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800caf8:	d108      	bne.n	800cb0c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cafa:	f107 030c 	add.w	r3, r7, #12
 800cafe:	4618      	mov	r0, r3
 800cb00:	f000 fdec 	bl	800d6dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb08:	f000 bc6f 	b.w	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb10:	f000 bc6b 	b.w	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cb14:	4b6e      	ldr	r3, [pc, #440]	@ (800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cb16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cb18:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cb1c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cb1e:	4b6c      	ldr	r3, [pc, #432]	@ (800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	f003 0304 	and.w	r3, r3, #4
 800cb26:	2b04      	cmp	r3, #4
 800cb28:	d10c      	bne.n	800cb44 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800cb2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d109      	bne.n	800cb44 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb30:	4b67      	ldr	r3, [pc, #412]	@ (800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	08db      	lsrs	r3, r3, #3
 800cb36:	f003 0303 	and.w	r3, r3, #3
 800cb3a:	4a66      	ldr	r2, [pc, #408]	@ (800ccd4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800cb3c:	fa22 f303 	lsr.w	r3, r2, r3
 800cb40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cb42:	e01f      	b.n	800cb84 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cb44:	4b62      	ldr	r3, [pc, #392]	@ (800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cb4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cb50:	d106      	bne.n	800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800cb52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cb58:	d102      	bne.n	800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cb5a:	4b5f      	ldr	r3, [pc, #380]	@ (800ccd8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800cb5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cb5e:	e011      	b.n	800cb84 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cb60:	4b5b      	ldr	r3, [pc, #364]	@ (800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cb68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cb6c:	d106      	bne.n	800cb7c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800cb6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cb74:	d102      	bne.n	800cb7c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cb76:	4b59      	ldr	r3, [pc, #356]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800cb78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cb7a:	e003      	b.n	800cb84 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cb7c:	2300      	movs	r3, #0
 800cb7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800cb80:	f000 bc33 	b.w	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800cb84:	f000 bc31 	b.w	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cb88:	4b55      	ldr	r3, [pc, #340]	@ (800cce0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cb8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb8c:	f000 bc2d 	b.w	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800cb90:	2300      	movs	r3, #0
 800cb92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cb94:	f000 bc29 	b.w	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 800cb98:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb9c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800cba0:	430b      	orrs	r3, r1
 800cba2:	f040 809f 	bne.w	800cce4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 800cba6:	4b4a      	ldr	r3, [pc, #296]	@ (800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cba8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cbaa:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800cbae:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800cbb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cbb6:	d04d      	beq.n	800cc54 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800cbb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cbbe:	f200 8084 	bhi.w	800ccca <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800cbc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbc4:	2bc0      	cmp	r3, #192	@ 0xc0
 800cbc6:	d07d      	beq.n	800ccc4 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 800cbc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbca:	2bc0      	cmp	r3, #192	@ 0xc0
 800cbcc:	d87d      	bhi.n	800ccca <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800cbce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbd0:	2b80      	cmp	r3, #128	@ 0x80
 800cbd2:	d02d      	beq.n	800cc30 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 800cbd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbd6:	2b80      	cmp	r3, #128	@ 0x80
 800cbd8:	d877      	bhi.n	800ccca <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800cbda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d003      	beq.n	800cbe8 <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 800cbe0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbe2:	2b40      	cmp	r3, #64	@ 0x40
 800cbe4:	d012      	beq.n	800cc0c <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800cbe6:	e070      	b.n	800ccca <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cbe8:	4b39      	ldr	r3, [pc, #228]	@ (800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cbf0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cbf4:	d107      	bne.n	800cc06 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cbf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f000 fec2 	bl	800d984 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cc00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc04:	e3f1      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cc06:	2300      	movs	r3, #0
 800cc08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc0a:	e3ee      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cc0c:	4b30      	ldr	r3, [pc, #192]	@ (800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cc14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cc18:	d107      	bne.n	800cc2a <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cc1a:	f107 0318 	add.w	r3, r7, #24
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f000 fc08 	bl	800d434 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cc24:	69bb      	ldr	r3, [r7, #24]
 800cc26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc28:	e3df      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc2e:	e3dc      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cc30:	4b27      	ldr	r3, [pc, #156]	@ (800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cc38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cc3c:	d107      	bne.n	800cc4e <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cc3e:	f107 030c 	add.w	r3, r7, #12
 800cc42:	4618      	mov	r0, r3
 800cc44:	f000 fd4a 	bl	800d6dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc4c:	e3cd      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cc4e:	2300      	movs	r3, #0
 800cc50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cc52:	e3ca      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cc54:	4b1e      	ldr	r3, [pc, #120]	@ (800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cc56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cc58:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cc5c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cc5e:	4b1c      	ldr	r3, [pc, #112]	@ (800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	f003 0304 	and.w	r3, r3, #4
 800cc66:	2b04      	cmp	r3, #4
 800cc68:	d10c      	bne.n	800cc84 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800cc6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d109      	bne.n	800cc84 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc70:	4b17      	ldr	r3, [pc, #92]	@ (800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	08db      	lsrs	r3, r3, #3
 800cc76:	f003 0303 	and.w	r3, r3, #3
 800cc7a:	4a16      	ldr	r2, [pc, #88]	@ (800ccd4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800cc7c:	fa22 f303 	lsr.w	r3, r2, r3
 800cc80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc82:	e01e      	b.n	800ccc2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cc84:	4b12      	ldr	r3, [pc, #72]	@ (800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cc8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cc90:	d106      	bne.n	800cca0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 800cc92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc94:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cc98:	d102      	bne.n	800cca0 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cc9a:	4b0f      	ldr	r3, [pc, #60]	@ (800ccd8 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800cc9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cc9e:	e010      	b.n	800ccc2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cca0:	4b0b      	ldr	r3, [pc, #44]	@ (800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cca8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ccac:	d106      	bne.n	800ccbc <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800ccae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ccb4:	d102      	bne.n	800ccbc <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ccb6:	4b09      	ldr	r3, [pc, #36]	@ (800ccdc <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800ccb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ccba:	e002      	b.n	800ccc2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ccc0:	e393      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800ccc2:	e392      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ccc4:	4b06      	ldr	r3, [pc, #24]	@ (800cce0 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ccc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ccc8:	e38f      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800ccca:	2300      	movs	r3, #0
 800cccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ccce:	e38c      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800ccd0:	58024400 	.word	0x58024400
 800ccd4:	03d09000 	.word	0x03d09000
 800ccd8:	003d0900 	.word	0x003d0900
 800ccdc:	007a1200 	.word	0x007a1200
 800cce0:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 800cce4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cce8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800ccec:	430b      	orrs	r3, r1
 800ccee:	f040 809c 	bne.w	800ce2a <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 800ccf2:	4b9e      	ldr	r3, [pc, #632]	@ (800cf6c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ccf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ccf6:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800ccfa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800ccfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ccfe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cd02:	d054      	beq.n	800cdae <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 800cd04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cd0a:	f200 808b 	bhi.w	800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800cd0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd10:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800cd14:	f000 8083 	beq.w	800ce1e <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 800cd18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd1a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800cd1e:	f200 8081 	bhi.w	800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800cd22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd28:	d02f      	beq.n	800cd8a <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800cd2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cd30:	d878      	bhi.n	800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800cd32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d004      	beq.n	800cd42 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 800cd38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cd3e:	d012      	beq.n	800cd66 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 800cd40:	e070      	b.n	800ce24 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cd42:	4b8a      	ldr	r3, [pc, #552]	@ (800cf6c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cd4a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cd4e:	d107      	bne.n	800cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cd50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cd54:	4618      	mov	r0, r3
 800cd56:	f000 fe15 	bl	800d984 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cd5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd5e:	e344      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cd60:	2300      	movs	r3, #0
 800cd62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd64:	e341      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cd66:	4b81      	ldr	r3, [pc, #516]	@ (800cf6c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cd6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cd72:	d107      	bne.n	800cd84 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd74:	f107 0318 	add.w	r3, r7, #24
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f000 fb5b 	bl	800d434 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cd7e:	69bb      	ldr	r3, [r7, #24]
 800cd80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd82:	e332      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cd84:	2300      	movs	r3, #0
 800cd86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd88:	e32f      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cd8a:	4b78      	ldr	r3, [pc, #480]	@ (800cf6c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cd92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cd96:	d107      	bne.n	800cda8 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd98:	f107 030c 	add.w	r3, r7, #12
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	f000 fc9d 	bl	800d6dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cda6:	e320      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cdac:	e31d      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cdae:	4b6f      	ldr	r3, [pc, #444]	@ (800cf6c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cdb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cdb2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cdb6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cdb8:	4b6c      	ldr	r3, [pc, #432]	@ (800cf6c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	f003 0304 	and.w	r3, r3, #4
 800cdc0:	2b04      	cmp	r3, #4
 800cdc2:	d10c      	bne.n	800cdde <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 800cdc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d109      	bne.n	800cdde <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cdca:	4b68      	ldr	r3, [pc, #416]	@ (800cf6c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	08db      	lsrs	r3, r3, #3
 800cdd0:	f003 0303 	and.w	r3, r3, #3
 800cdd4:	4a66      	ldr	r2, [pc, #408]	@ (800cf70 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800cdd6:	fa22 f303 	lsr.w	r3, r2, r3
 800cdda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cddc:	e01e      	b.n	800ce1c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cdde:	4b63      	ldr	r3, [pc, #396]	@ (800cf6c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cde6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cdea:	d106      	bne.n	800cdfa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800cdec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cdf2:	d102      	bne.n	800cdfa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cdf4:	4b5f      	ldr	r3, [pc, #380]	@ (800cf74 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800cdf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cdf8:	e010      	b.n	800ce1c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cdfa:	4b5c      	ldr	r3, [pc, #368]	@ (800cf6c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ce02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ce06:	d106      	bne.n	800ce16 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800ce08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ce0e:	d102      	bne.n	800ce16 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ce10:	4b59      	ldr	r3, [pc, #356]	@ (800cf78 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800ce12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ce14:	e002      	b.n	800ce1c <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ce16:	2300      	movs	r3, #0
 800ce18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 800ce1a:	e2e6      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800ce1c:	e2e5      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ce1e:	4b57      	ldr	r3, [pc, #348]	@ (800cf7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800ce20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce22:	e2e2      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800ce24:	2300      	movs	r3, #0
 800ce26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce28:	e2df      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800ce2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce2e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800ce32:	430b      	orrs	r3, r1
 800ce34:	f040 80a7 	bne.w	800cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800ce38:	4b4c      	ldr	r3, [pc, #304]	@ (800cf6c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ce3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce3c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800ce40:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ce42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ce48:	d055      	beq.n	800cef6 <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800ce4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce4c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ce50:	f200 8096 	bhi.w	800cf80 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800ce54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce56:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ce5a:	f000 8084 	beq.w	800cf66 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 800ce5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce60:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800ce64:	f200 808c 	bhi.w	800cf80 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800ce68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ce6e:	d030      	beq.n	800ced2 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 800ce70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ce76:	f200 8083 	bhi.w	800cf80 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800ce7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d004      	beq.n	800ce8a <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800ce80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ce86:	d012      	beq.n	800ceae <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 800ce88:	e07a      	b.n	800cf80 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ce8a:	4b38      	ldr	r3, [pc, #224]	@ (800cf6c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ce92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ce96:	d107      	bne.n	800cea8 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ce98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ce9c:	4618      	mov	r0, r3
 800ce9e:	f000 fd71 	bl	800d984 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cea6:	e2a0      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cea8:	2300      	movs	r3, #0
 800ceaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ceac:	e29d      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ceae:	4b2f      	ldr	r3, [pc, #188]	@ (800cf6c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ceb6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ceba:	d107      	bne.n	800cecc <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cebc:	f107 0318 	add.w	r3, r7, #24
 800cec0:	4618      	mov	r0, r3
 800cec2:	f000 fab7 	bl	800d434 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cec6:	69bb      	ldr	r3, [r7, #24]
 800cec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ceca:	e28e      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cecc:	2300      	movs	r3, #0
 800cece:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ced0:	e28b      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ced2:	4b26      	ldr	r3, [pc, #152]	@ (800cf6c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ceda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cede:	d107      	bne.n	800cef0 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cee0:	f107 030c 	add.w	r3, r7, #12
 800cee4:	4618      	mov	r0, r3
 800cee6:	f000 fbf9 	bl	800d6dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ceee:	e27c      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cef0:	2300      	movs	r3, #0
 800cef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cef4:	e279      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cef6:	4b1d      	ldr	r3, [pc, #116]	@ (800cf6c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cefa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cefe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cf00:	4b1a      	ldr	r3, [pc, #104]	@ (800cf6c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	f003 0304 	and.w	r3, r3, #4
 800cf08:	2b04      	cmp	r3, #4
 800cf0a:	d10c      	bne.n	800cf26 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 800cf0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d109      	bne.n	800cf26 <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf12:	4b16      	ldr	r3, [pc, #88]	@ (800cf6c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	08db      	lsrs	r3, r3, #3
 800cf18:	f003 0303 	and.w	r3, r3, #3
 800cf1c:	4a14      	ldr	r2, [pc, #80]	@ (800cf70 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800cf1e:	fa22 f303 	lsr.w	r3, r2, r3
 800cf22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cf24:	e01e      	b.n	800cf64 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cf26:	4b11      	ldr	r3, [pc, #68]	@ (800cf6c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cf2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cf32:	d106      	bne.n	800cf42 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800cf34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cf3a:	d102      	bne.n	800cf42 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cf3c:	4b0d      	ldr	r3, [pc, #52]	@ (800cf74 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800cf3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cf40:	e010      	b.n	800cf64 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cf42:	4b0a      	ldr	r3, [pc, #40]	@ (800cf6c <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cf4a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cf4e:	d106      	bne.n	800cf5e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800cf50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cf52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cf56:	d102      	bne.n	800cf5e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cf58:	4b07      	ldr	r3, [pc, #28]	@ (800cf78 <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800cf5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cf5c:	e002      	b.n	800cf64 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cf5e:	2300      	movs	r3, #0
 800cf60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800cf62:	e242      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800cf64:	e241      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cf66:	4b05      	ldr	r3, [pc, #20]	@ (800cf7c <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800cf68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf6a:	e23e      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800cf6c:	58024400 	.word	0x58024400
 800cf70:	03d09000 	.word	0x03d09000
 800cf74:	003d0900 	.word	0x003d0900
 800cf78:	007a1200 	.word	0x007a1200
 800cf7c:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800cf80:	2300      	movs	r3, #0
 800cf82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf84:	e231      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800cf86:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf8a:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800cf8e:	430b      	orrs	r3, r1
 800cf90:	f040 8085 	bne.w	800d09e <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800cf94:	4b9c      	ldr	r3, [pc, #624]	@ (800d208 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cf96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf98:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800cf9c:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800cf9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cfa4:	d06b      	beq.n	800d07e <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800cfa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfa8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cfac:	d874      	bhi.n	800d098 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800cfae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfb0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cfb4:	d056      	beq.n	800d064 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800cfb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfb8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cfbc:	d86c      	bhi.n	800d098 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800cfbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfc0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cfc4:	d03b      	beq.n	800d03e <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800cfc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfc8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cfcc:	d864      	bhi.n	800d098 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800cfce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfd0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cfd4:	d021      	beq.n	800d01a <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 800cfd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfd8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cfdc:	d85c      	bhi.n	800d098 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800cfde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d004      	beq.n	800cfee <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 800cfe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfe6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cfea:	d004      	beq.n	800cff6 <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 800cfec:	e054      	b.n	800d098 <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800cfee:	f7fe fb5f 	bl	800b6b0 <HAL_RCC_GetPCLK1Freq>
 800cff2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800cff4:	e1f9      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cff6:	4b84      	ldr	r3, [pc, #528]	@ (800d208 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cffe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d002:	d107      	bne.n	800d014 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d004:	f107 0318 	add.w	r3, r7, #24
 800d008:	4618      	mov	r0, r3
 800d00a:	f000 fa13 	bl	800d434 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d00e:	69fb      	ldr	r3, [r7, #28]
 800d010:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d012:	e1ea      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d014:	2300      	movs	r3, #0
 800d016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d018:	e1e7      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d01a:	4b7b      	ldr	r3, [pc, #492]	@ (800d208 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d022:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d026:	d107      	bne.n	800d038 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d028:	f107 030c 	add.w	r3, r7, #12
 800d02c:	4618      	mov	r0, r3
 800d02e:	f000 fb55 	bl	800d6dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d032:	693b      	ldr	r3, [r7, #16]
 800d034:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d036:	e1d8      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d038:	2300      	movs	r3, #0
 800d03a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d03c:	e1d5      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d03e:	4b72      	ldr	r3, [pc, #456]	@ (800d208 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	f003 0304 	and.w	r3, r3, #4
 800d046:	2b04      	cmp	r3, #4
 800d048:	d109      	bne.n	800d05e <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d04a:	4b6f      	ldr	r3, [pc, #444]	@ (800d208 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	08db      	lsrs	r3, r3, #3
 800d050:	f003 0303 	and.w	r3, r3, #3
 800d054:	4a6d      	ldr	r2, [pc, #436]	@ (800d20c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800d056:	fa22 f303 	lsr.w	r3, r2, r3
 800d05a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d05c:	e1c5      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d05e:	2300      	movs	r3, #0
 800d060:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d062:	e1c2      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d064:	4b68      	ldr	r3, [pc, #416]	@ (800d208 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d06c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d070:	d102      	bne.n	800d078 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 800d072:	4b67      	ldr	r3, [pc, #412]	@ (800d210 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800d074:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d076:	e1b8      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d078:	2300      	movs	r3, #0
 800d07a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d07c:	e1b5      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d07e:	4b62      	ldr	r3, [pc, #392]	@ (800d208 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d086:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d08a:	d102      	bne.n	800d092 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 800d08c:	4b61      	ldr	r3, [pc, #388]	@ (800d214 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800d08e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d090:	e1ab      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d092:	2300      	movs	r3, #0
 800d094:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d096:	e1a8      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800d098:	2300      	movs	r3, #0
 800d09a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d09c:	e1a5      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800d09e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0a2:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800d0a6:	430b      	orrs	r3, r1
 800d0a8:	d173      	bne.n	800d192 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800d0aa:	4b57      	ldr	r3, [pc, #348]	@ (800d208 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d0ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d0ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d0b2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d0b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d0ba:	d02f      	beq.n	800d11c <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 800d0bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d0c2:	d863      	bhi.n	800d18c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800d0c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d004      	beq.n	800d0d4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800d0ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d0cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d0d0:	d012      	beq.n	800d0f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 800d0d2:	e05b      	b.n	800d18c <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d0d4:	4b4c      	ldr	r3, [pc, #304]	@ (800d208 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d0dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d0e0:	d107      	bne.n	800d0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0e2:	f107 0318 	add.w	r3, r7, #24
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	f000 f9a4 	bl	800d434 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d0ec:	69bb      	ldr	r3, [r7, #24]
 800d0ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0f0:	e17b      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0f6:	e178      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d0f8:	4b43      	ldr	r3, [pc, #268]	@ (800d208 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d100:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d104:	d107      	bne.n	800d116 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d106:	f107 030c 	add.w	r3, r7, #12
 800d10a:	4618      	mov	r0, r3
 800d10c:	f000 fae6 	bl	800d6dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800d110:	697b      	ldr	r3, [r7, #20]
 800d112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d114:	e169      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d116:	2300      	movs	r3, #0
 800d118:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d11a:	e166      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d11c:	4b3a      	ldr	r3, [pc, #232]	@ (800d208 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d11e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d120:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d124:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d126:	4b38      	ldr	r3, [pc, #224]	@ (800d208 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	f003 0304 	and.w	r3, r3, #4
 800d12e:	2b04      	cmp	r3, #4
 800d130:	d10c      	bne.n	800d14c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800d132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d134:	2b00      	cmp	r3, #0
 800d136:	d109      	bne.n	800d14c <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d138:	4b33      	ldr	r3, [pc, #204]	@ (800d208 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	08db      	lsrs	r3, r3, #3
 800d13e:	f003 0303 	and.w	r3, r3, #3
 800d142:	4a32      	ldr	r2, [pc, #200]	@ (800d20c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800d144:	fa22 f303 	lsr.w	r3, r2, r3
 800d148:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d14a:	e01e      	b.n	800d18a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d14c:	4b2e      	ldr	r3, [pc, #184]	@ (800d208 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d154:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d158:	d106      	bne.n	800d168 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 800d15a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d15c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d160:	d102      	bne.n	800d168 <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d162:	4b2b      	ldr	r3, [pc, #172]	@ (800d210 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800d164:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d166:	e010      	b.n	800d18a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d168:	4b27      	ldr	r3, [pc, #156]	@ (800d208 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d170:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d174:	d106      	bne.n	800d184 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800d176:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d178:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d17c:	d102      	bne.n	800d184 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d17e:	4b25      	ldr	r3, [pc, #148]	@ (800d214 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800d180:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d182:	e002      	b.n	800d18a <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d184:	2300      	movs	r3, #0
 800d186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d188:	e12f      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800d18a:	e12e      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800d18c:	2300      	movs	r3, #0
 800d18e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d190:	e12b      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d192:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d196:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800d19a:	430b      	orrs	r3, r1
 800d19c:	d13c      	bne.n	800d218 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d19e:	4b1a      	ldr	r3, [pc, #104]	@ (800d208 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d1a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d1a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d1a6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d1a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d004      	beq.n	800d1b8 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800d1ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d1b4:	d012      	beq.n	800d1dc <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800d1b6:	e023      	b.n	800d200 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d1b8:	4b13      	ldr	r3, [pc, #76]	@ (800d208 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d1c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d1c4:	d107      	bne.n	800d1d6 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d1c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f000 fbda 	bl	800d984 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d1d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1d4:	e109      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1da:	e106      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d1dc:	4b0a      	ldr	r3, [pc, #40]	@ (800d208 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d1de:	681b      	ldr	r3, [r3, #0]
 800d1e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d1e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d1e8:	d107      	bne.n	800d1fa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d1ea:	f107 0318 	add.w	r3, r7, #24
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f000 f920 	bl	800d434 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d1f4:	6a3b      	ldr	r3, [r7, #32]
 800d1f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d1f8:	e0f7      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d1fe:	e0f4      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800d200:	2300      	movs	r3, #0
 800d202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d204:	e0f1      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800d206:	bf00      	nop
 800d208:	58024400 	.word	0x58024400
 800d20c:	03d09000 	.word	0x03d09000
 800d210:	003d0900 	.word	0x003d0900
 800d214:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d218:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d21c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800d220:	430b      	orrs	r3, r1
 800d222:	f040 8091 	bne.w	800d348 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d226:	4b73      	ldr	r3, [pc, #460]	@ (800d3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d228:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d22a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800d22e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d232:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800d236:	f000 8081 	beq.w	800d33c <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800d23a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d23c:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800d240:	d87f      	bhi.n	800d342 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800d242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d244:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d248:	d06b      	beq.n	800d322 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800d24a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d24c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d250:	d877      	bhi.n	800d342 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800d252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d254:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d258:	d056      	beq.n	800d308 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800d25a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d25c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d260:	d86f      	bhi.n	800d342 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800d262:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d264:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d268:	d03b      	beq.n	800d2e2 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800d26a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d26c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d270:	d867      	bhi.n	800d342 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800d272:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d274:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d278:	d021      	beq.n	800d2be <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800d27a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d27c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d280:	d85f      	bhi.n	800d342 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800d282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d284:	2b00      	cmp	r3, #0
 800d286:	d004      	beq.n	800d292 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800d288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d28a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d28e:	d004      	beq.n	800d29a <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800d290:	e057      	b.n	800d342 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d292:	f000 f8b9 	bl	800d408 <HAL_RCCEx_GetD3PCLK1Freq>
 800d296:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d298:	e0a7      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d29a:	4b56      	ldr	r3, [pc, #344]	@ (800d3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d2a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d2a6:	d107      	bne.n	800d2b8 <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d2a8:	f107 0318 	add.w	r3, r7, #24
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f000 f8c1 	bl	800d434 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d2b2:	69fb      	ldr	r3, [r7, #28]
 800d2b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2b6:	e098      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2bc:	e095      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d2be:	4b4d      	ldr	r3, [pc, #308]	@ (800d3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d2c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d2ca:	d107      	bne.n	800d2dc <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d2cc:	f107 030c 	add.w	r3, r7, #12
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f000 fa03 	bl	800d6dc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d2d6:	693b      	ldr	r3, [r7, #16]
 800d2d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2da:	e086      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d2dc:	2300      	movs	r3, #0
 800d2de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2e0:	e083      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d2e2:	4b44      	ldr	r3, [pc, #272]	@ (800d3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	f003 0304 	and.w	r3, r3, #4
 800d2ea:	2b04      	cmp	r3, #4
 800d2ec:	d109      	bne.n	800d302 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d2ee:	4b41      	ldr	r3, [pc, #260]	@ (800d3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	08db      	lsrs	r3, r3, #3
 800d2f4:	f003 0303 	and.w	r3, r3, #3
 800d2f8:	4a3f      	ldr	r2, [pc, #252]	@ (800d3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d2fa:	fa22 f303 	lsr.w	r3, r2, r3
 800d2fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d300:	e073      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d302:	2300      	movs	r3, #0
 800d304:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d306:	e070      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d308:	4b3a      	ldr	r3, [pc, #232]	@ (800d3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d310:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d314:	d102      	bne.n	800d31c <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 800d316:	4b39      	ldr	r3, [pc, #228]	@ (800d3fc <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 800d318:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d31a:	e066      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d31c:	2300      	movs	r3, #0
 800d31e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d320:	e063      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d322:	4b34      	ldr	r3, [pc, #208]	@ (800d3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d32a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d32e:	d102      	bne.n	800d336 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 800d330:	4b33      	ldr	r3, [pc, #204]	@ (800d400 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800d332:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d334:	e059      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d336:	2300      	movs	r3, #0
 800d338:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d33a:	e056      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d33c:	4b31      	ldr	r3, [pc, #196]	@ (800d404 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 800d33e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d340:	e053      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d342:	2300      	movs	r3, #0
 800d344:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d346:	e050      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d348:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d34c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800d350:	430b      	orrs	r3, r1
 800d352:	d148      	bne.n	800d3e6 <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d354:	4b27      	ldr	r3, [pc, #156]	@ (800d3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d358:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d35c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d35e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d360:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d364:	d02a      	beq.n	800d3bc <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800d366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d368:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d36c:	d838      	bhi.n	800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800d36e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d370:	2b00      	cmp	r3, #0
 800d372:	d004      	beq.n	800d37e <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 800d374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d376:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d37a:	d00d      	beq.n	800d398 <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 800d37c:	e030      	b.n	800d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d37e:	4b1d      	ldr	r3, [pc, #116]	@ (800d3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d386:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d38a:	d102      	bne.n	800d392 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 800d38c:	4b1c      	ldr	r3, [pc, #112]	@ (800d400 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800d38e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d390:	e02b      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d392:	2300      	movs	r3, #0
 800d394:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d396:	e028      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d398:	4b16      	ldr	r3, [pc, #88]	@ (800d3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d3a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d3a4:	d107      	bne.n	800d3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d3a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f000 faea 	bl	800d984 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d3b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d3b4:	e019      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d3ba:	e016      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d3bc:	4b0d      	ldr	r3, [pc, #52]	@ (800d3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d3c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d3c8:	d107      	bne.n	800d3da <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d3ca:	f107 0318 	add.w	r3, r7, #24
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f000 f830 	bl	800d434 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d3d4:	69fb      	ldr	r3, [r7, #28]
 800d3d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d3d8:	e007      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d3de:	e004      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d3e4:	e001      	b.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800d3ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	3740      	adds	r7, #64	@ 0x40
 800d3f0:	46bd      	mov	sp, r7
 800d3f2:	bd80      	pop	{r7, pc}
 800d3f4:	58024400 	.word	0x58024400
 800d3f8:	03d09000 	.word	0x03d09000
 800d3fc:	003d0900 	.word	0x003d0900
 800d400:	007a1200 	.word	0x007a1200
 800d404:	00bb8000 	.word	0x00bb8000

0800d408 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800d40c:	f7fe f920 	bl	800b650 <HAL_RCC_GetHCLKFreq>
 800d410:	4602      	mov	r2, r0
 800d412:	4b06      	ldr	r3, [pc, #24]	@ (800d42c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d414:	6a1b      	ldr	r3, [r3, #32]
 800d416:	091b      	lsrs	r3, r3, #4
 800d418:	f003 0307 	and.w	r3, r3, #7
 800d41c:	4904      	ldr	r1, [pc, #16]	@ (800d430 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d41e:	5ccb      	ldrb	r3, [r1, r3]
 800d420:	f003 031f 	and.w	r3, r3, #31
 800d424:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800d428:	4618      	mov	r0, r3
 800d42a:	bd80      	pop	{r7, pc}
 800d42c:	58024400 	.word	0x58024400
 800d430:	08013710 	.word	0x08013710

0800d434 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d434:	b480      	push	{r7}
 800d436:	b089      	sub	sp, #36	@ 0x24
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d43c:	4ba1      	ldr	r3, [pc, #644]	@ (800d6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d43e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d440:	f003 0303 	and.w	r3, r3, #3
 800d444:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d446:	4b9f      	ldr	r3, [pc, #636]	@ (800d6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d44a:	0b1b      	lsrs	r3, r3, #12
 800d44c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d450:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d452:	4b9c      	ldr	r3, [pc, #624]	@ (800d6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d456:	091b      	lsrs	r3, r3, #4
 800d458:	f003 0301 	and.w	r3, r3, #1
 800d45c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d45e:	4b99      	ldr	r3, [pc, #612]	@ (800d6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d462:	08db      	lsrs	r3, r3, #3
 800d464:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d468:	693a      	ldr	r2, [r7, #16]
 800d46a:	fb02 f303 	mul.w	r3, r2, r3
 800d46e:	ee07 3a90 	vmov	s15, r3
 800d472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d476:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d47a:	697b      	ldr	r3, [r7, #20]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	f000 8111 	beq.w	800d6a4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d482:	69bb      	ldr	r3, [r7, #24]
 800d484:	2b02      	cmp	r3, #2
 800d486:	f000 8083 	beq.w	800d590 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d48a:	69bb      	ldr	r3, [r7, #24]
 800d48c:	2b02      	cmp	r3, #2
 800d48e:	f200 80a1 	bhi.w	800d5d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d492:	69bb      	ldr	r3, [r7, #24]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d003      	beq.n	800d4a0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d498:	69bb      	ldr	r3, [r7, #24]
 800d49a:	2b01      	cmp	r3, #1
 800d49c:	d056      	beq.n	800d54c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d49e:	e099      	b.n	800d5d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d4a0:	4b88      	ldr	r3, [pc, #544]	@ (800d6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	f003 0320 	and.w	r3, r3, #32
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d02d      	beq.n	800d508 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d4ac:	4b85      	ldr	r3, [pc, #532]	@ (800d6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	08db      	lsrs	r3, r3, #3
 800d4b2:	f003 0303 	and.w	r3, r3, #3
 800d4b6:	4a84      	ldr	r2, [pc, #528]	@ (800d6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d4b8:	fa22 f303 	lsr.w	r3, r2, r3
 800d4bc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	ee07 3a90 	vmov	s15, r3
 800d4c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	ee07 3a90 	vmov	s15, r3
 800d4ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4d6:	4b7b      	ldr	r3, [pc, #492]	@ (800d6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d4d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4de:	ee07 3a90 	vmov	s15, r3
 800d4e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4ea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800d6cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d4ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d4fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d502:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d506:	e087      	b.n	800d618 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d508:	697b      	ldr	r3, [r7, #20]
 800d50a:	ee07 3a90 	vmov	s15, r3
 800d50e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d512:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800d6d0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d51a:	4b6a      	ldr	r3, [pc, #424]	@ (800d6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d51c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d51e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d522:	ee07 3a90 	vmov	s15, r3
 800d526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d52a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d52e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800d6cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d53a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d53e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d542:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d546:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d54a:	e065      	b.n	800d618 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d54c:	697b      	ldr	r3, [r7, #20]
 800d54e:	ee07 3a90 	vmov	s15, r3
 800d552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d556:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d6d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d55a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d55e:	4b59      	ldr	r3, [pc, #356]	@ (800d6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d566:	ee07 3a90 	vmov	s15, r3
 800d56a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d56e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d572:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800d6cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d57a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d57e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d58a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d58e:	e043      	b.n	800d618 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	ee07 3a90 	vmov	s15, r3
 800d596:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d59a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800d6d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d59e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5a2:	4b48      	ldr	r3, [pc, #288]	@ (800d6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d5a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5aa:	ee07 3a90 	vmov	s15, r3
 800d5ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5b6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800d6cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d5ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d5c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d5d2:	e021      	b.n	800d618 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d5d4:	697b      	ldr	r3, [r7, #20]
 800d5d6:	ee07 3a90 	vmov	s15, r3
 800d5da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5de:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800d6d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d5e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5e6:	4b37      	ldr	r3, [pc, #220]	@ (800d6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d5e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d5ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5ee:	ee07 3a90 	vmov	s15, r3
 800d5f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5f6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5fa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d6cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d5fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d602:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d606:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d60a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d60e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d612:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d616:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d618:	4b2a      	ldr	r3, [pc, #168]	@ (800d6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d61a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d61c:	0a5b      	lsrs	r3, r3, #9
 800d61e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d622:	ee07 3a90 	vmov	s15, r3
 800d626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d62a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d62e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d632:	edd7 6a07 	vldr	s13, [r7, #28]
 800d636:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d63a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d63e:	ee17 2a90 	vmov	r2, s15
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d646:	4b1f      	ldr	r3, [pc, #124]	@ (800d6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d64a:	0c1b      	lsrs	r3, r3, #16
 800d64c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d650:	ee07 3a90 	vmov	s15, r3
 800d654:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d658:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d65c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d660:	edd7 6a07 	vldr	s13, [r7, #28]
 800d664:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d668:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d66c:	ee17 2a90 	vmov	r2, s15
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d674:	4b13      	ldr	r3, [pc, #76]	@ (800d6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d678:	0e1b      	lsrs	r3, r3, #24
 800d67a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d67e:	ee07 3a90 	vmov	s15, r3
 800d682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d686:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d68a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d68e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d692:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d696:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d69a:	ee17 2a90 	vmov	r2, s15
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d6a2:	e008      	b.n	800d6b6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2200      	movs	r2, #0
 800d6ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	2200      	movs	r2, #0
 800d6b4:	609a      	str	r2, [r3, #8]
}
 800d6b6:	bf00      	nop
 800d6b8:	3724      	adds	r7, #36	@ 0x24
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c0:	4770      	bx	lr
 800d6c2:	bf00      	nop
 800d6c4:	58024400 	.word	0x58024400
 800d6c8:	03d09000 	.word	0x03d09000
 800d6cc:	46000000 	.word	0x46000000
 800d6d0:	4c742400 	.word	0x4c742400
 800d6d4:	4a742400 	.word	0x4a742400
 800d6d8:	4af42400 	.word	0x4af42400

0800d6dc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d6dc:	b480      	push	{r7}
 800d6de:	b089      	sub	sp, #36	@ 0x24
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d6e4:	4ba1      	ldr	r3, [pc, #644]	@ (800d96c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d6e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6e8:	f003 0303 	and.w	r3, r3, #3
 800d6ec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d6ee:	4b9f      	ldr	r3, [pc, #636]	@ (800d96c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d6f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d6f2:	0d1b      	lsrs	r3, r3, #20
 800d6f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d6f8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d6fa:	4b9c      	ldr	r3, [pc, #624]	@ (800d96c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d6fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d6fe:	0a1b      	lsrs	r3, r3, #8
 800d700:	f003 0301 	and.w	r3, r3, #1
 800d704:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d706:	4b99      	ldr	r3, [pc, #612]	@ (800d96c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d70a:	08db      	lsrs	r3, r3, #3
 800d70c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d710:	693a      	ldr	r2, [r7, #16]
 800d712:	fb02 f303 	mul.w	r3, r2, r3
 800d716:	ee07 3a90 	vmov	s15, r3
 800d71a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d71e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d722:	697b      	ldr	r3, [r7, #20]
 800d724:	2b00      	cmp	r3, #0
 800d726:	f000 8111 	beq.w	800d94c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d72a:	69bb      	ldr	r3, [r7, #24]
 800d72c:	2b02      	cmp	r3, #2
 800d72e:	f000 8083 	beq.w	800d838 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d732:	69bb      	ldr	r3, [r7, #24]
 800d734:	2b02      	cmp	r3, #2
 800d736:	f200 80a1 	bhi.w	800d87c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d73a:	69bb      	ldr	r3, [r7, #24]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d003      	beq.n	800d748 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d740:	69bb      	ldr	r3, [r7, #24]
 800d742:	2b01      	cmp	r3, #1
 800d744:	d056      	beq.n	800d7f4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d746:	e099      	b.n	800d87c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d748:	4b88      	ldr	r3, [pc, #544]	@ (800d96c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	f003 0320 	and.w	r3, r3, #32
 800d750:	2b00      	cmp	r3, #0
 800d752:	d02d      	beq.n	800d7b0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d754:	4b85      	ldr	r3, [pc, #532]	@ (800d96c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	08db      	lsrs	r3, r3, #3
 800d75a:	f003 0303 	and.w	r3, r3, #3
 800d75e:	4a84      	ldr	r2, [pc, #528]	@ (800d970 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d760:	fa22 f303 	lsr.w	r3, r2, r3
 800d764:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d766:	68bb      	ldr	r3, [r7, #8]
 800d768:	ee07 3a90 	vmov	s15, r3
 800d76c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d770:	697b      	ldr	r3, [r7, #20]
 800d772:	ee07 3a90 	vmov	s15, r3
 800d776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d77a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d77e:	4b7b      	ldr	r3, [pc, #492]	@ (800d96c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d786:	ee07 3a90 	vmov	s15, r3
 800d78a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d78e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d792:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800d974 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d79a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d79e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d7a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d7ae:	e087      	b.n	800d8c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d7b0:	697b      	ldr	r3, [r7, #20]
 800d7b2:	ee07 3a90 	vmov	s15, r3
 800d7b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7ba:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800d978 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d7be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d7c2:	4b6a      	ldr	r3, [pc, #424]	@ (800d96c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d7c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7ca:	ee07 3a90 	vmov	s15, r3
 800d7ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d7d6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800d974 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d7da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d7de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d7e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d7f2:	e065      	b.n	800d8c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d7f4:	697b      	ldr	r3, [r7, #20]
 800d7f6:	ee07 3a90 	vmov	s15, r3
 800d7fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7fe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d97c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d806:	4b59      	ldr	r3, [pc, #356]	@ (800d96c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d80a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d80e:	ee07 3a90 	vmov	s15, r3
 800d812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d816:	ed97 6a03 	vldr	s12, [r7, #12]
 800d81a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800d974 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d81e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d826:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d82a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d82e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d832:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d836:	e043      	b.n	800d8c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d838:	697b      	ldr	r3, [r7, #20]
 800d83a:	ee07 3a90 	vmov	s15, r3
 800d83e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d842:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800d980 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d84a:	4b48      	ldr	r3, [pc, #288]	@ (800d96c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d84c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d84e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d852:	ee07 3a90 	vmov	s15, r3
 800d856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d85a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d85e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800d974 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d86a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d86e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d872:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d876:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d87a:	e021      	b.n	800d8c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	ee07 3a90 	vmov	s15, r3
 800d882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d886:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800d97c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d88a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d88e:	4b37      	ldr	r3, [pc, #220]	@ (800d96c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d896:	ee07 3a90 	vmov	s15, r3
 800d89a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d89e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d8a2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d974 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d8a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d8aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d8ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d8b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d8b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d8be:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d8c0:	4b2a      	ldr	r3, [pc, #168]	@ (800d96c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d8c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8c4:	0a5b      	lsrs	r3, r3, #9
 800d8c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d8ca:	ee07 3a90 	vmov	s15, r3
 800d8ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d8d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d8d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d8da:	edd7 6a07 	vldr	s13, [r7, #28]
 800d8de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d8e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8e6:	ee17 2a90 	vmov	r2, s15
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d8ee:	4b1f      	ldr	r3, [pc, #124]	@ (800d96c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d8f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8f2:	0c1b      	lsrs	r3, r3, #16
 800d8f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d8f8:	ee07 3a90 	vmov	s15, r3
 800d8fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d900:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d904:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d908:	edd7 6a07 	vldr	s13, [r7, #28]
 800d90c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d910:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d914:	ee17 2a90 	vmov	r2, s15
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d91c:	4b13      	ldr	r3, [pc, #76]	@ (800d96c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d91e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d920:	0e1b      	lsrs	r3, r3, #24
 800d922:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d926:	ee07 3a90 	vmov	s15, r3
 800d92a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d92e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d932:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d936:	edd7 6a07 	vldr	s13, [r7, #28]
 800d93a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d93e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d942:	ee17 2a90 	vmov	r2, s15
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d94a:	e008      	b.n	800d95e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2200      	movs	r2, #0
 800d950:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	2200      	movs	r2, #0
 800d956:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2200      	movs	r2, #0
 800d95c:	609a      	str	r2, [r3, #8]
}
 800d95e:	bf00      	nop
 800d960:	3724      	adds	r7, #36	@ 0x24
 800d962:	46bd      	mov	sp, r7
 800d964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d968:	4770      	bx	lr
 800d96a:	bf00      	nop
 800d96c:	58024400 	.word	0x58024400
 800d970:	03d09000 	.word	0x03d09000
 800d974:	46000000 	.word	0x46000000
 800d978:	4c742400 	.word	0x4c742400
 800d97c:	4a742400 	.word	0x4a742400
 800d980:	4af42400 	.word	0x4af42400

0800d984 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d984:	b480      	push	{r7}
 800d986:	b089      	sub	sp, #36	@ 0x24
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d98c:	4ba0      	ldr	r3, [pc, #640]	@ (800dc10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d98e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d990:	f003 0303 	and.w	r3, r3, #3
 800d994:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d996:	4b9e      	ldr	r3, [pc, #632]	@ (800dc10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d998:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d99a:	091b      	lsrs	r3, r3, #4
 800d99c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d9a0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d9a2:	4b9b      	ldr	r3, [pc, #620]	@ (800dc10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d9a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9a6:	f003 0301 	and.w	r3, r3, #1
 800d9aa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d9ac:	4b98      	ldr	r3, [pc, #608]	@ (800dc10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d9ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d9b0:	08db      	lsrs	r3, r3, #3
 800d9b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d9b6:	693a      	ldr	r2, [r7, #16]
 800d9b8:	fb02 f303 	mul.w	r3, r2, r3
 800d9bc:	ee07 3a90 	vmov	s15, r3
 800d9c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9c4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d9c8:	697b      	ldr	r3, [r7, #20]
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	f000 8111 	beq.w	800dbf2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d9d0:	69bb      	ldr	r3, [r7, #24]
 800d9d2:	2b02      	cmp	r3, #2
 800d9d4:	f000 8083 	beq.w	800dade <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d9d8:	69bb      	ldr	r3, [r7, #24]
 800d9da:	2b02      	cmp	r3, #2
 800d9dc:	f200 80a1 	bhi.w	800db22 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d9e0:	69bb      	ldr	r3, [r7, #24]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d003      	beq.n	800d9ee <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d9e6:	69bb      	ldr	r3, [r7, #24]
 800d9e8:	2b01      	cmp	r3, #1
 800d9ea:	d056      	beq.n	800da9a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d9ec:	e099      	b.n	800db22 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d9ee:	4b88      	ldr	r3, [pc, #544]	@ (800dc10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	f003 0320 	and.w	r3, r3, #32
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d02d      	beq.n	800da56 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d9fa:	4b85      	ldr	r3, [pc, #532]	@ (800dc10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	08db      	lsrs	r3, r3, #3
 800da00:	f003 0303 	and.w	r3, r3, #3
 800da04:	4a83      	ldr	r2, [pc, #524]	@ (800dc14 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800da06:	fa22 f303 	lsr.w	r3, r2, r3
 800da0a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	ee07 3a90 	vmov	s15, r3
 800da12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da16:	697b      	ldr	r3, [r7, #20]
 800da18:	ee07 3a90 	vmov	s15, r3
 800da1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da24:	4b7a      	ldr	r3, [pc, #488]	@ (800dc10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da2c:	ee07 3a90 	vmov	s15, r3
 800da30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da34:	ed97 6a03 	vldr	s12, [r7, #12]
 800da38:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800dc18 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800da3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da44:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800da48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da50:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800da54:	e087      	b.n	800db66 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800da56:	697b      	ldr	r3, [r7, #20]
 800da58:	ee07 3a90 	vmov	s15, r3
 800da5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da60:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800dc1c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800da64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da68:	4b69      	ldr	r3, [pc, #420]	@ (800dc10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800da6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da70:	ee07 3a90 	vmov	s15, r3
 800da74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da78:	ed97 6a03 	vldr	s12, [r7, #12]
 800da7c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800dc18 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800da80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da88:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800da8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da90:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da94:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da98:	e065      	b.n	800db66 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800da9a:	697b      	ldr	r3, [r7, #20]
 800da9c:	ee07 3a90 	vmov	s15, r3
 800daa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800daa4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800dc20 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800daa8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800daac:	4b58      	ldr	r3, [pc, #352]	@ (800dc10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800daae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dab4:	ee07 3a90 	vmov	s15, r3
 800dab8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dabc:	ed97 6a03 	vldr	s12, [r7, #12]
 800dac0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800dc18 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dac4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dac8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dacc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dad0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dad4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dad8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dadc:	e043      	b.n	800db66 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dade:	697b      	ldr	r3, [r7, #20]
 800dae0:	ee07 3a90 	vmov	s15, r3
 800dae4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dae8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800dc24 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800daec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800daf0:	4b47      	ldr	r3, [pc, #284]	@ (800dc10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800daf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800daf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800daf8:	ee07 3a90 	vmov	s15, r3
 800dafc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db00:	ed97 6a03 	vldr	s12, [r7, #12]
 800db04:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800dc18 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800db08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db10:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800db14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db18:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db1c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800db20:	e021      	b.n	800db66 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800db22:	697b      	ldr	r3, [r7, #20]
 800db24:	ee07 3a90 	vmov	s15, r3
 800db28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db2c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800dc1c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800db30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800db34:	4b36      	ldr	r3, [pc, #216]	@ (800dc10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db3c:	ee07 3a90 	vmov	s15, r3
 800db40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800db44:	ed97 6a03 	vldr	s12, [r7, #12]
 800db48:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800dc18 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800db4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800db50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800db54:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800db58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800db5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db60:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800db64:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800db66:	4b2a      	ldr	r3, [pc, #168]	@ (800dc10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db6a:	0a5b      	lsrs	r3, r3, #9
 800db6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db70:	ee07 3a90 	vmov	s15, r3
 800db74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800db7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800db80:	edd7 6a07 	vldr	s13, [r7, #28]
 800db84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db8c:	ee17 2a90 	vmov	r2, s15
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800db94:	4b1e      	ldr	r3, [pc, #120]	@ (800dc10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800db96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db98:	0c1b      	lsrs	r3, r3, #16
 800db9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db9e:	ee07 3a90 	vmov	s15, r3
 800dba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dba6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dbaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dbae:	edd7 6a07 	vldr	s13, [r7, #28]
 800dbb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dbb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dbba:	ee17 2a90 	vmov	r2, s15
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800dbc2:	4b13      	ldr	r3, [pc, #76]	@ (800dc10 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dbc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dbc6:	0e1b      	lsrs	r3, r3, #24
 800dbc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dbcc:	ee07 3a90 	vmov	s15, r3
 800dbd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbd4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dbd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dbdc:	edd7 6a07 	vldr	s13, [r7, #28]
 800dbe0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dbe4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dbe8:	ee17 2a90 	vmov	r2, s15
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800dbf0:	e008      	b.n	800dc04 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	2200      	movs	r2, #0
 800dbf6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2200      	movs	r2, #0
 800dc02:	609a      	str	r2, [r3, #8]
}
 800dc04:	bf00      	nop
 800dc06:	3724      	adds	r7, #36	@ 0x24
 800dc08:	46bd      	mov	sp, r7
 800dc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0e:	4770      	bx	lr
 800dc10:	58024400 	.word	0x58024400
 800dc14:	03d09000 	.word	0x03d09000
 800dc18:	46000000 	.word	0x46000000
 800dc1c:	4c742400 	.word	0x4c742400
 800dc20:	4a742400 	.word	0x4a742400
 800dc24:	4af42400 	.word	0x4af42400

0800dc28 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b084      	sub	sp, #16
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
 800dc30:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dc32:	2300      	movs	r3, #0
 800dc34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dc36:	4b53      	ldr	r3, [pc, #332]	@ (800dd84 <RCCEx_PLL2_Config+0x15c>)
 800dc38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc3a:	f003 0303 	and.w	r3, r3, #3
 800dc3e:	2b03      	cmp	r3, #3
 800dc40:	d101      	bne.n	800dc46 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800dc42:	2301      	movs	r3, #1
 800dc44:	e099      	b.n	800dd7a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800dc46:	4b4f      	ldr	r3, [pc, #316]	@ (800dd84 <RCCEx_PLL2_Config+0x15c>)
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	4a4e      	ldr	r2, [pc, #312]	@ (800dd84 <RCCEx_PLL2_Config+0x15c>)
 800dc4c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800dc50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dc52:	f7f5 f999 	bl	8002f88 <HAL_GetTick>
 800dc56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dc58:	e008      	b.n	800dc6c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dc5a:	f7f5 f995 	bl	8002f88 <HAL_GetTick>
 800dc5e:	4602      	mov	r2, r0
 800dc60:	68bb      	ldr	r3, [r7, #8]
 800dc62:	1ad3      	subs	r3, r2, r3
 800dc64:	2b02      	cmp	r3, #2
 800dc66:	d901      	bls.n	800dc6c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800dc68:	2303      	movs	r3, #3
 800dc6a:	e086      	b.n	800dd7a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800dc6c:	4b45      	ldr	r3, [pc, #276]	@ (800dd84 <RCCEx_PLL2_Config+0x15c>)
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d1f0      	bne.n	800dc5a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800dc78:	4b42      	ldr	r3, [pc, #264]	@ (800dd84 <RCCEx_PLL2_Config+0x15c>)
 800dc7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc7c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	031b      	lsls	r3, r3, #12
 800dc86:	493f      	ldr	r1, [pc, #252]	@ (800dd84 <RCCEx_PLL2_Config+0x15c>)
 800dc88:	4313      	orrs	r3, r2
 800dc8a:	628b      	str	r3, [r1, #40]	@ 0x28
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	685b      	ldr	r3, [r3, #4]
 800dc90:	3b01      	subs	r3, #1
 800dc92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	689b      	ldr	r3, [r3, #8]
 800dc9a:	3b01      	subs	r3, #1
 800dc9c:	025b      	lsls	r3, r3, #9
 800dc9e:	b29b      	uxth	r3, r3
 800dca0:	431a      	orrs	r2, r3
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	68db      	ldr	r3, [r3, #12]
 800dca6:	3b01      	subs	r3, #1
 800dca8:	041b      	lsls	r3, r3, #16
 800dcaa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800dcae:	431a      	orrs	r2, r3
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	691b      	ldr	r3, [r3, #16]
 800dcb4:	3b01      	subs	r3, #1
 800dcb6:	061b      	lsls	r3, r3, #24
 800dcb8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800dcbc:	4931      	ldr	r1, [pc, #196]	@ (800dd84 <RCCEx_PLL2_Config+0x15c>)
 800dcbe:	4313      	orrs	r3, r2
 800dcc0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800dcc2:	4b30      	ldr	r3, [pc, #192]	@ (800dd84 <RCCEx_PLL2_Config+0x15c>)
 800dcc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcc6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	695b      	ldr	r3, [r3, #20]
 800dcce:	492d      	ldr	r1, [pc, #180]	@ (800dd84 <RCCEx_PLL2_Config+0x15c>)
 800dcd0:	4313      	orrs	r3, r2
 800dcd2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800dcd4:	4b2b      	ldr	r3, [pc, #172]	@ (800dd84 <RCCEx_PLL2_Config+0x15c>)
 800dcd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcd8:	f023 0220 	bic.w	r2, r3, #32
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	699b      	ldr	r3, [r3, #24]
 800dce0:	4928      	ldr	r1, [pc, #160]	@ (800dd84 <RCCEx_PLL2_Config+0x15c>)
 800dce2:	4313      	orrs	r3, r2
 800dce4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800dce6:	4b27      	ldr	r3, [pc, #156]	@ (800dd84 <RCCEx_PLL2_Config+0x15c>)
 800dce8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcea:	4a26      	ldr	r2, [pc, #152]	@ (800dd84 <RCCEx_PLL2_Config+0x15c>)
 800dcec:	f023 0310 	bic.w	r3, r3, #16
 800dcf0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800dcf2:	4b24      	ldr	r3, [pc, #144]	@ (800dd84 <RCCEx_PLL2_Config+0x15c>)
 800dcf4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800dcf6:	4b24      	ldr	r3, [pc, #144]	@ (800dd88 <RCCEx_PLL2_Config+0x160>)
 800dcf8:	4013      	ands	r3, r2
 800dcfa:	687a      	ldr	r2, [r7, #4]
 800dcfc:	69d2      	ldr	r2, [r2, #28]
 800dcfe:	00d2      	lsls	r2, r2, #3
 800dd00:	4920      	ldr	r1, [pc, #128]	@ (800dd84 <RCCEx_PLL2_Config+0x15c>)
 800dd02:	4313      	orrs	r3, r2
 800dd04:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800dd06:	4b1f      	ldr	r3, [pc, #124]	@ (800dd84 <RCCEx_PLL2_Config+0x15c>)
 800dd08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd0a:	4a1e      	ldr	r2, [pc, #120]	@ (800dd84 <RCCEx_PLL2_Config+0x15c>)
 800dd0c:	f043 0310 	orr.w	r3, r3, #16
 800dd10:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d106      	bne.n	800dd26 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800dd18:	4b1a      	ldr	r3, [pc, #104]	@ (800dd84 <RCCEx_PLL2_Config+0x15c>)
 800dd1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd1c:	4a19      	ldr	r2, [pc, #100]	@ (800dd84 <RCCEx_PLL2_Config+0x15c>)
 800dd1e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800dd22:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dd24:	e00f      	b.n	800dd46 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	2b01      	cmp	r3, #1
 800dd2a:	d106      	bne.n	800dd3a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800dd2c:	4b15      	ldr	r3, [pc, #84]	@ (800dd84 <RCCEx_PLL2_Config+0x15c>)
 800dd2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd30:	4a14      	ldr	r2, [pc, #80]	@ (800dd84 <RCCEx_PLL2_Config+0x15c>)
 800dd32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dd36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800dd38:	e005      	b.n	800dd46 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800dd3a:	4b12      	ldr	r3, [pc, #72]	@ (800dd84 <RCCEx_PLL2_Config+0x15c>)
 800dd3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd3e:	4a11      	ldr	r2, [pc, #68]	@ (800dd84 <RCCEx_PLL2_Config+0x15c>)
 800dd40:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800dd44:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800dd46:	4b0f      	ldr	r3, [pc, #60]	@ (800dd84 <RCCEx_PLL2_Config+0x15c>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	4a0e      	ldr	r2, [pc, #56]	@ (800dd84 <RCCEx_PLL2_Config+0x15c>)
 800dd4c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800dd50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dd52:	f7f5 f919 	bl	8002f88 <HAL_GetTick>
 800dd56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dd58:	e008      	b.n	800dd6c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800dd5a:	f7f5 f915 	bl	8002f88 <HAL_GetTick>
 800dd5e:	4602      	mov	r2, r0
 800dd60:	68bb      	ldr	r3, [r7, #8]
 800dd62:	1ad3      	subs	r3, r2, r3
 800dd64:	2b02      	cmp	r3, #2
 800dd66:	d901      	bls.n	800dd6c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800dd68:	2303      	movs	r3, #3
 800dd6a:	e006      	b.n	800dd7a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800dd6c:	4b05      	ldr	r3, [pc, #20]	@ (800dd84 <RCCEx_PLL2_Config+0x15c>)
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d0f0      	beq.n	800dd5a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800dd78:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	3710      	adds	r7, #16
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}
 800dd82:	bf00      	nop
 800dd84:	58024400 	.word	0x58024400
 800dd88:	ffff0007 	.word	0xffff0007

0800dd8c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b084      	sub	sp, #16
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
 800dd94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dd96:	2300      	movs	r3, #0
 800dd98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dd9a:	4b53      	ldr	r3, [pc, #332]	@ (800dee8 <RCCEx_PLL3_Config+0x15c>)
 800dd9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd9e:	f003 0303 	and.w	r3, r3, #3
 800dda2:	2b03      	cmp	r3, #3
 800dda4:	d101      	bne.n	800ddaa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800dda6:	2301      	movs	r3, #1
 800dda8:	e099      	b.n	800dede <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800ddaa:	4b4f      	ldr	r3, [pc, #316]	@ (800dee8 <RCCEx_PLL3_Config+0x15c>)
 800ddac:	681b      	ldr	r3, [r3, #0]
 800ddae:	4a4e      	ldr	r2, [pc, #312]	@ (800dee8 <RCCEx_PLL3_Config+0x15c>)
 800ddb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800ddb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ddb6:	f7f5 f8e7 	bl	8002f88 <HAL_GetTick>
 800ddba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ddbc:	e008      	b.n	800ddd0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ddbe:	f7f5 f8e3 	bl	8002f88 <HAL_GetTick>
 800ddc2:	4602      	mov	r2, r0
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	1ad3      	subs	r3, r2, r3
 800ddc8:	2b02      	cmp	r3, #2
 800ddca:	d901      	bls.n	800ddd0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ddcc:	2303      	movs	r3, #3
 800ddce:	e086      	b.n	800dede <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800ddd0:	4b45      	ldr	r3, [pc, #276]	@ (800dee8 <RCCEx_PLL3_Config+0x15c>)
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d1f0      	bne.n	800ddbe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800dddc:	4b42      	ldr	r3, [pc, #264]	@ (800dee8 <RCCEx_PLL3_Config+0x15c>)
 800ddde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dde0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	051b      	lsls	r3, r3, #20
 800ddea:	493f      	ldr	r1, [pc, #252]	@ (800dee8 <RCCEx_PLL3_Config+0x15c>)
 800ddec:	4313      	orrs	r3, r2
 800ddee:	628b      	str	r3, [r1, #40]	@ 0x28
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	685b      	ldr	r3, [r3, #4]
 800ddf4:	3b01      	subs	r3, #1
 800ddf6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	689b      	ldr	r3, [r3, #8]
 800ddfe:	3b01      	subs	r3, #1
 800de00:	025b      	lsls	r3, r3, #9
 800de02:	b29b      	uxth	r3, r3
 800de04:	431a      	orrs	r2, r3
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	68db      	ldr	r3, [r3, #12]
 800de0a:	3b01      	subs	r3, #1
 800de0c:	041b      	lsls	r3, r3, #16
 800de0e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800de12:	431a      	orrs	r2, r3
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	691b      	ldr	r3, [r3, #16]
 800de18:	3b01      	subs	r3, #1
 800de1a:	061b      	lsls	r3, r3, #24
 800de1c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800de20:	4931      	ldr	r1, [pc, #196]	@ (800dee8 <RCCEx_PLL3_Config+0x15c>)
 800de22:	4313      	orrs	r3, r2
 800de24:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800de26:	4b30      	ldr	r3, [pc, #192]	@ (800dee8 <RCCEx_PLL3_Config+0x15c>)
 800de28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de2a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	695b      	ldr	r3, [r3, #20]
 800de32:	492d      	ldr	r1, [pc, #180]	@ (800dee8 <RCCEx_PLL3_Config+0x15c>)
 800de34:	4313      	orrs	r3, r2
 800de36:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800de38:	4b2b      	ldr	r3, [pc, #172]	@ (800dee8 <RCCEx_PLL3_Config+0x15c>)
 800de3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de3c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	699b      	ldr	r3, [r3, #24]
 800de44:	4928      	ldr	r1, [pc, #160]	@ (800dee8 <RCCEx_PLL3_Config+0x15c>)
 800de46:	4313      	orrs	r3, r2
 800de48:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800de4a:	4b27      	ldr	r3, [pc, #156]	@ (800dee8 <RCCEx_PLL3_Config+0x15c>)
 800de4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de4e:	4a26      	ldr	r2, [pc, #152]	@ (800dee8 <RCCEx_PLL3_Config+0x15c>)
 800de50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800de54:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800de56:	4b24      	ldr	r3, [pc, #144]	@ (800dee8 <RCCEx_PLL3_Config+0x15c>)
 800de58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800de5a:	4b24      	ldr	r3, [pc, #144]	@ (800deec <RCCEx_PLL3_Config+0x160>)
 800de5c:	4013      	ands	r3, r2
 800de5e:	687a      	ldr	r2, [r7, #4]
 800de60:	69d2      	ldr	r2, [r2, #28]
 800de62:	00d2      	lsls	r2, r2, #3
 800de64:	4920      	ldr	r1, [pc, #128]	@ (800dee8 <RCCEx_PLL3_Config+0x15c>)
 800de66:	4313      	orrs	r3, r2
 800de68:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800de6a:	4b1f      	ldr	r3, [pc, #124]	@ (800dee8 <RCCEx_PLL3_Config+0x15c>)
 800de6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de6e:	4a1e      	ldr	r2, [pc, #120]	@ (800dee8 <RCCEx_PLL3_Config+0x15c>)
 800de70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800de74:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800de76:	683b      	ldr	r3, [r7, #0]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d106      	bne.n	800de8a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800de7c:	4b1a      	ldr	r3, [pc, #104]	@ (800dee8 <RCCEx_PLL3_Config+0x15c>)
 800de7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de80:	4a19      	ldr	r2, [pc, #100]	@ (800dee8 <RCCEx_PLL3_Config+0x15c>)
 800de82:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800de86:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800de88:	e00f      	b.n	800deaa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800de8a:	683b      	ldr	r3, [r7, #0]
 800de8c:	2b01      	cmp	r3, #1
 800de8e:	d106      	bne.n	800de9e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800de90:	4b15      	ldr	r3, [pc, #84]	@ (800dee8 <RCCEx_PLL3_Config+0x15c>)
 800de92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de94:	4a14      	ldr	r2, [pc, #80]	@ (800dee8 <RCCEx_PLL3_Config+0x15c>)
 800de96:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800de9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800de9c:	e005      	b.n	800deaa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800de9e:	4b12      	ldr	r3, [pc, #72]	@ (800dee8 <RCCEx_PLL3_Config+0x15c>)
 800dea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dea2:	4a11      	ldr	r2, [pc, #68]	@ (800dee8 <RCCEx_PLL3_Config+0x15c>)
 800dea4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800dea8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800deaa:	4b0f      	ldr	r3, [pc, #60]	@ (800dee8 <RCCEx_PLL3_Config+0x15c>)
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	4a0e      	ldr	r2, [pc, #56]	@ (800dee8 <RCCEx_PLL3_Config+0x15c>)
 800deb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800deb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800deb6:	f7f5 f867 	bl	8002f88 <HAL_GetTick>
 800deba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800debc:	e008      	b.n	800ded0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800debe:	f7f5 f863 	bl	8002f88 <HAL_GetTick>
 800dec2:	4602      	mov	r2, r0
 800dec4:	68bb      	ldr	r3, [r7, #8]
 800dec6:	1ad3      	subs	r3, r2, r3
 800dec8:	2b02      	cmp	r3, #2
 800deca:	d901      	bls.n	800ded0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800decc:	2303      	movs	r3, #3
 800dece:	e006      	b.n	800dede <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ded0:	4b05      	ldr	r3, [pc, #20]	@ (800dee8 <RCCEx_PLL3_Config+0x15c>)
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d0f0      	beq.n	800debe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800dedc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dede:	4618      	mov	r0, r3
 800dee0:	3710      	adds	r7, #16
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}
 800dee6:	bf00      	nop
 800dee8:	58024400 	.word	0x58024400
 800deec:	ffff0007 	.word	0xffff0007

0800def0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b084      	sub	sp, #16
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	2b00      	cmp	r3, #0
 800defc:	d101      	bne.n	800df02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800defe:	2301      	movs	r3, #1
 800df00:	e10f      	b.n	800e122 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	2200      	movs	r2, #0
 800df06:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	4a87      	ldr	r2, [pc, #540]	@ (800e12c <HAL_SPI_Init+0x23c>)
 800df0e:	4293      	cmp	r3, r2
 800df10:	d00f      	beq.n	800df32 <HAL_SPI_Init+0x42>
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	4a86      	ldr	r2, [pc, #536]	@ (800e130 <HAL_SPI_Init+0x240>)
 800df18:	4293      	cmp	r3, r2
 800df1a:	d00a      	beq.n	800df32 <HAL_SPI_Init+0x42>
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	4a84      	ldr	r2, [pc, #528]	@ (800e134 <HAL_SPI_Init+0x244>)
 800df22:	4293      	cmp	r3, r2
 800df24:	d005      	beq.n	800df32 <HAL_SPI_Init+0x42>
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	68db      	ldr	r3, [r3, #12]
 800df2a:	2b0f      	cmp	r3, #15
 800df2c:	d901      	bls.n	800df32 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800df2e:	2301      	movs	r3, #1
 800df30:	e0f7      	b.n	800e122 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800df32:	6878      	ldr	r0, [r7, #4]
 800df34:	f001 f8fc 	bl	800f130 <SPI_GetPacketSize>
 800df38:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	4a7b      	ldr	r2, [pc, #492]	@ (800e12c <HAL_SPI_Init+0x23c>)
 800df40:	4293      	cmp	r3, r2
 800df42:	d00c      	beq.n	800df5e <HAL_SPI_Init+0x6e>
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	4a79      	ldr	r2, [pc, #484]	@ (800e130 <HAL_SPI_Init+0x240>)
 800df4a:	4293      	cmp	r3, r2
 800df4c:	d007      	beq.n	800df5e <HAL_SPI_Init+0x6e>
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	4a78      	ldr	r2, [pc, #480]	@ (800e134 <HAL_SPI_Init+0x244>)
 800df54:	4293      	cmp	r3, r2
 800df56:	d002      	beq.n	800df5e <HAL_SPI_Init+0x6e>
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	2b08      	cmp	r3, #8
 800df5c:	d811      	bhi.n	800df82 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800df62:	4a72      	ldr	r2, [pc, #456]	@ (800e12c <HAL_SPI_Init+0x23c>)
 800df64:	4293      	cmp	r3, r2
 800df66:	d009      	beq.n	800df7c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	4a70      	ldr	r2, [pc, #448]	@ (800e130 <HAL_SPI_Init+0x240>)
 800df6e:	4293      	cmp	r3, r2
 800df70:	d004      	beq.n	800df7c <HAL_SPI_Init+0x8c>
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	4a6f      	ldr	r2, [pc, #444]	@ (800e134 <HAL_SPI_Init+0x244>)
 800df78:	4293      	cmp	r3, r2
 800df7a:	d104      	bne.n	800df86 <HAL_SPI_Init+0x96>
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	2b10      	cmp	r3, #16
 800df80:	d901      	bls.n	800df86 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800df82:	2301      	movs	r3, #1
 800df84:	e0cd      	b.n	800e122 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800df8c:	b2db      	uxtb	r3, r3
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d106      	bne.n	800dfa0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	2200      	movs	r2, #0
 800df96:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f7f4 fce2 	bl	8002964 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2202      	movs	r2, #2
 800dfa4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	681a      	ldr	r2, [r3, #0]
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	f022 0201 	bic.w	r2, r2, #1
 800dfb6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	689b      	ldr	r3, [r3, #8]
 800dfbe:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800dfc2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	699b      	ldr	r3, [r3, #24]
 800dfc8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800dfcc:	d119      	bne.n	800e002 <HAL_SPI_Init+0x112>
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	685b      	ldr	r3, [r3, #4]
 800dfd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800dfd6:	d103      	bne.n	800dfe0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d008      	beq.n	800dff2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d10c      	bne.n	800e002 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800dfec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800dff0:	d107      	bne.n	800e002 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	681a      	ldr	r2, [r3, #0]
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e000:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	685b      	ldr	r3, [r3, #4]
 800e006:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d00f      	beq.n	800e02e <HAL_SPI_Init+0x13e>
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	68db      	ldr	r3, [r3, #12]
 800e012:	2b06      	cmp	r3, #6
 800e014:	d90b      	bls.n	800e02e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	430a      	orrs	r2, r1
 800e02a:	601a      	str	r2, [r3, #0]
 800e02c:	e007      	b.n	800e03e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	681a      	ldr	r2, [r3, #0]
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800e03c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	69da      	ldr	r2, [r3, #28]
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e046:	431a      	orrs	r2, r3
 800e048:	68bb      	ldr	r3, [r7, #8]
 800e04a:	431a      	orrs	r2, r3
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e050:	ea42 0103 	orr.w	r1, r2, r3
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	68da      	ldr	r2, [r3, #12]
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	430a      	orrs	r2, r1
 800e05e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e068:	431a      	orrs	r2, r3
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e06e:	431a      	orrs	r2, r3
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	699b      	ldr	r3, [r3, #24]
 800e074:	431a      	orrs	r2, r3
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	691b      	ldr	r3, [r3, #16]
 800e07a:	431a      	orrs	r2, r3
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	695b      	ldr	r3, [r3, #20]
 800e080:	431a      	orrs	r2, r3
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	6a1b      	ldr	r3, [r3, #32]
 800e086:	431a      	orrs	r2, r3
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	685b      	ldr	r3, [r3, #4]
 800e08c:	431a      	orrs	r2, r3
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e092:	431a      	orrs	r2, r3
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	689b      	ldr	r3, [r3, #8]
 800e098:	431a      	orrs	r2, r3
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e09e:	ea42 0103 	orr.w	r1, r2, r3
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	430a      	orrs	r2, r1
 800e0ac:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	685b      	ldr	r3, [r3, #4]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d113      	bne.n	800e0de <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	689b      	ldr	r3, [r3, #8]
 800e0bc:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e0c8:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	689b      	ldr	r3, [r3, #8]
 800e0d0:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e0dc:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	f022 0201 	bic.w	r2, r2, #1
 800e0ec:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	685b      	ldr	r3, [r3, #4]
 800e0f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d00a      	beq.n	800e110 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	68db      	ldr	r3, [r3, #12]
 800e100:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	430a      	orrs	r2, r1
 800e10e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2200      	movs	r2, #0
 800e114:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2201      	movs	r2, #1
 800e11c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800e120:	2300      	movs	r3, #0
}
 800e122:	4618      	mov	r0, r3
 800e124:	3710      	adds	r7, #16
 800e126:	46bd      	mov	sp, r7
 800e128:	bd80      	pop	{r7, pc}
 800e12a:	bf00      	nop
 800e12c:	40013000 	.word	0x40013000
 800e130:	40003800 	.word	0x40003800
 800e134:	40003c00 	.word	0x40003c00

0800e138 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b088      	sub	sp, #32
 800e13c:	af02      	add	r7, sp, #8
 800e13e:	60f8      	str	r0, [r7, #12]
 800e140:	60b9      	str	r1, [r7, #8]
 800e142:	603b      	str	r3, [r7, #0]
 800e144:	4613      	mov	r3, r2
 800e146:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	3320      	adds	r3, #32
 800e14e:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e150:	f7f4 ff1a 	bl	8002f88 <HAL_GetTick>
 800e154:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e15c:	b2db      	uxtb	r3, r3
 800e15e:	2b01      	cmp	r3, #1
 800e160:	d001      	beq.n	800e166 <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800e162:	2302      	movs	r3, #2
 800e164:	e1d1      	b.n	800e50a <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e166:	68bb      	ldr	r3, [r7, #8]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d002      	beq.n	800e172 <HAL_SPI_Transmit+0x3a>
 800e16c:	88fb      	ldrh	r3, [r7, #6]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d101      	bne.n	800e176 <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800e172:	2301      	movs	r3, #1
 800e174:	e1c9      	b.n	800e50a <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800e17c:	2b01      	cmp	r3, #1
 800e17e:	d101      	bne.n	800e184 <HAL_SPI_Transmit+0x4c>
 800e180:	2302      	movs	r3, #2
 800e182:	e1c2      	b.n	800e50a <HAL_SPI_Transmit+0x3d2>
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	2201      	movs	r2, #1
 800e188:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	2203      	movs	r2, #3
 800e190:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	2200      	movs	r2, #0
 800e198:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	68ba      	ldr	r2, [r7, #8]
 800e1a0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	88fa      	ldrh	r2, [r7, #6]
 800e1a6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	88fa      	ldrh	r2, [r7, #6]
 800e1ae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	2200      	movs	r2, #0
 800e1cc:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	2200      	movs	r2, #0
 800e1d2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	689b      	ldr	r3, [r3, #8]
 800e1d8:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800e1dc:	d108      	bne.n	800e1f0 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	681a      	ldr	r2, [r3, #0]
 800e1e4:	68fb      	ldr	r3, [r7, #12]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e1ec:	601a      	str	r2, [r3, #0]
 800e1ee:	e009      	b.n	800e204 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	68db      	ldr	r3, [r3, #12]
 800e1f6:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800e202:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	685a      	ldr	r2, [r3, #4]
 800e20a:	4b96      	ldr	r3, [pc, #600]	@ (800e464 <HAL_SPI_Transmit+0x32c>)
 800e20c:	4013      	ands	r3, r2
 800e20e:	88f9      	ldrh	r1, [r7, #6]
 800e210:	68fa      	ldr	r2, [r7, #12]
 800e212:	6812      	ldr	r2, [r2, #0]
 800e214:	430b      	orrs	r3, r1
 800e216:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	681a      	ldr	r2, [r3, #0]
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	f042 0201 	orr.w	r2, r2, #1
 800e226:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	685b      	ldr	r3, [r3, #4]
 800e22c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e230:	d107      	bne.n	800e242 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	681a      	ldr	r2, [r3, #0]
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e240:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	68db      	ldr	r3, [r3, #12]
 800e246:	2b0f      	cmp	r3, #15
 800e248:	d947      	bls.n	800e2da <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800e24a:	e03f      	b.n	800e2cc <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	695b      	ldr	r3, [r3, #20]
 800e252:	f003 0302 	and.w	r3, r3, #2
 800e256:	2b02      	cmp	r3, #2
 800e258:	d114      	bne.n	800e284 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	6812      	ldr	r2, [r2, #0]
 800e264:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e26a:	1d1a      	adds	r2, r3, #4
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e276:	b29b      	uxth	r3, r3
 800e278:	3b01      	subs	r3, #1
 800e27a:	b29a      	uxth	r2, r3
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800e282:	e023      	b.n	800e2cc <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e284:	f7f4 fe80 	bl	8002f88 <HAL_GetTick>
 800e288:	4602      	mov	r2, r0
 800e28a:	693b      	ldr	r3, [r7, #16]
 800e28c:	1ad3      	subs	r3, r2, r3
 800e28e:	683a      	ldr	r2, [r7, #0]
 800e290:	429a      	cmp	r2, r3
 800e292:	d803      	bhi.n	800e29c <HAL_SPI_Transmit+0x164>
 800e294:	683b      	ldr	r3, [r7, #0]
 800e296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e29a:	d102      	bne.n	800e2a2 <HAL_SPI_Transmit+0x16a>
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d114      	bne.n	800e2cc <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e2a2:	68f8      	ldr	r0, [r7, #12]
 800e2a4:	f000 fe76 	bl	800ef94 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e2ae:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	2201      	movs	r2, #1
 800e2bc:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800e2c8:	2303      	movs	r3, #3
 800e2ca:	e11e      	b.n	800e50a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e2d2:	b29b      	uxth	r3, r3
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d1b9      	bne.n	800e24c <HAL_SPI_Transmit+0x114>
 800e2d8:	e0f1      	b.n	800e4be <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	68db      	ldr	r3, [r3, #12]
 800e2de:	2b07      	cmp	r3, #7
 800e2e0:	f240 80e6 	bls.w	800e4b0 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800e2e4:	e05d      	b.n	800e3a2 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	695b      	ldr	r3, [r3, #20]
 800e2ec:	f003 0302 	and.w	r3, r3, #2
 800e2f0:	2b02      	cmp	r3, #2
 800e2f2:	d132      	bne.n	800e35a <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e2fa:	b29b      	uxth	r3, r3
 800e2fc:	2b01      	cmp	r3, #1
 800e2fe:	d918      	bls.n	800e332 <HAL_SPI_Transmit+0x1fa>
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e304:	2b00      	cmp	r3, #0
 800e306:	d014      	beq.n	800e332 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	6812      	ldr	r2, [r2, #0]
 800e312:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e318:	1d1a      	adds	r2, r3, #4
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e324:	b29b      	uxth	r3, r3
 800e326:	3b02      	subs	r3, #2
 800e328:	b29a      	uxth	r2, r3
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800e330:	e037      	b.n	800e3a2 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e336:	881a      	ldrh	r2, [r3, #0]
 800e338:	697b      	ldr	r3, [r7, #20]
 800e33a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e340:	1c9a      	adds	r2, r3, #2
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e34c:	b29b      	uxth	r3, r3
 800e34e:	3b01      	subs	r3, #1
 800e350:	b29a      	uxth	r2, r3
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800e358:	e023      	b.n	800e3a2 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e35a:	f7f4 fe15 	bl	8002f88 <HAL_GetTick>
 800e35e:	4602      	mov	r2, r0
 800e360:	693b      	ldr	r3, [r7, #16]
 800e362:	1ad3      	subs	r3, r2, r3
 800e364:	683a      	ldr	r2, [r7, #0]
 800e366:	429a      	cmp	r2, r3
 800e368:	d803      	bhi.n	800e372 <HAL_SPI_Transmit+0x23a>
 800e36a:	683b      	ldr	r3, [r7, #0]
 800e36c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e370:	d102      	bne.n	800e378 <HAL_SPI_Transmit+0x240>
 800e372:	683b      	ldr	r3, [r7, #0]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d114      	bne.n	800e3a2 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e378:	68f8      	ldr	r0, [r7, #12]
 800e37a:	f000 fe0b 	bl	800ef94 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e384:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	2201      	movs	r2, #1
 800e392:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	2200      	movs	r2, #0
 800e39a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800e39e:	2303      	movs	r3, #3
 800e3a0:	e0b3      	b.n	800e50a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e3a8:	b29b      	uxth	r3, r3
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d19b      	bne.n	800e2e6 <HAL_SPI_Transmit+0x1ae>
 800e3ae:	e086      	b.n	800e4be <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	695b      	ldr	r3, [r3, #20]
 800e3b6:	f003 0302 	and.w	r3, r3, #2
 800e3ba:	2b02      	cmp	r3, #2
 800e3bc:	d154      	bne.n	800e468 <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e3c4:	b29b      	uxth	r3, r3
 800e3c6:	2b03      	cmp	r3, #3
 800e3c8:	d918      	bls.n	800e3fc <HAL_SPI_Transmit+0x2c4>
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e3ce:	2b40      	cmp	r3, #64	@ 0x40
 800e3d0:	d914      	bls.n	800e3fc <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	6812      	ldr	r2, [r2, #0]
 800e3dc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e3e2:	1d1a      	adds	r2, r3, #4
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e3ee:	b29b      	uxth	r3, r3
 800e3f0:	3b04      	subs	r3, #4
 800e3f2:	b29a      	uxth	r2, r3
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800e3fa:	e059      	b.n	800e4b0 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e402:	b29b      	uxth	r3, r3
 800e404:	2b01      	cmp	r3, #1
 800e406:	d917      	bls.n	800e438 <HAL_SPI_Transmit+0x300>
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d013      	beq.n	800e438 <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e414:	881a      	ldrh	r2, [r3, #0]
 800e416:	697b      	ldr	r3, [r7, #20]
 800e418:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e41e:	1c9a      	adds	r2, r3, #2
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e42a:	b29b      	uxth	r3, r3
 800e42c:	3b02      	subs	r3, #2
 800e42e:	b29a      	uxth	r2, r3
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800e436:	e03b      	b.n	800e4b0 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	3320      	adds	r3, #32
 800e442:	7812      	ldrb	r2, [r2, #0]
 800e444:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e44a:	1c5a      	adds	r2, r3, #1
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e456:	b29b      	uxth	r3, r3
 800e458:	3b01      	subs	r3, #1
 800e45a:	b29a      	uxth	r2, r3
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800e462:	e025      	b.n	800e4b0 <HAL_SPI_Transmit+0x378>
 800e464:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e468:	f7f4 fd8e 	bl	8002f88 <HAL_GetTick>
 800e46c:	4602      	mov	r2, r0
 800e46e:	693b      	ldr	r3, [r7, #16]
 800e470:	1ad3      	subs	r3, r2, r3
 800e472:	683a      	ldr	r2, [r7, #0]
 800e474:	429a      	cmp	r2, r3
 800e476:	d803      	bhi.n	800e480 <HAL_SPI_Transmit+0x348>
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e47e:	d102      	bne.n	800e486 <HAL_SPI_Transmit+0x34e>
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d114      	bne.n	800e4b0 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e486:	68f8      	ldr	r0, [r7, #12]
 800e488:	f000 fd84 	bl	800ef94 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e492:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	2201      	movs	r2, #1
 800e4a0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	2200      	movs	r2, #0
 800e4a8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800e4ac:	2303      	movs	r3, #3
 800e4ae:	e02c      	b.n	800e50a <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e4b6:	b29b      	uxth	r3, r3
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	f47f af79 	bne.w	800e3b0 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800e4be:	693b      	ldr	r3, [r7, #16]
 800e4c0:	9300      	str	r3, [sp, #0]
 800e4c2:	683b      	ldr	r3, [r7, #0]
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	2108      	movs	r1, #8
 800e4c8:	68f8      	ldr	r0, [r7, #12]
 800e4ca:	f000 fe03 	bl	800f0d4 <SPI_WaitOnFlagUntilTimeout>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d007      	beq.n	800e4e4 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e4da:	f043 0220 	orr.w	r2, r3, #32
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e4e4:	68f8      	ldr	r0, [r7, #12]
 800e4e6:	f000 fd55 	bl	800ef94 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	2201      	movs	r2, #1
 800e4ee:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e500:	2b00      	cmp	r3, #0
 800e502:	d001      	beq.n	800e508 <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800e504:	2301      	movs	r3, #1
 800e506:	e000      	b.n	800e50a <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800e508:	2300      	movs	r3, #0
  }
}
 800e50a:	4618      	mov	r0, r3
 800e50c:	3718      	adds	r7, #24
 800e50e:	46bd      	mov	sp, r7
 800e510:	bd80      	pop	{r7, pc}
 800e512:	bf00      	nop

0800e514 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b08e      	sub	sp, #56	@ 0x38
 800e518:	af02      	add	r7, sp, #8
 800e51a:	60f8      	str	r0, [r7, #12]
 800e51c:	60b9      	str	r1, [r7, #8]
 800e51e:	607a      	str	r2, [r7, #4]
 800e520:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	3320      	adds	r3, #32
 800e528:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	3330      	adds	r3, #48	@ 0x30
 800e530:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e536:	095b      	lsrs	r3, r3, #5
 800e538:	b29b      	uxth	r3, r3
 800e53a:	3301      	adds	r3, #1
 800e53c:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e53e:	f7f4 fd23 	bl	8002f88 <HAL_GetTick>
 800e542:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800e544:	887b      	ldrh	r3, [r7, #2]
 800e546:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800e548:	887b      	ldrh	r3, [r7, #2]
 800e54a:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e552:	b2db      	uxtb	r3, r3
 800e554:	2b01      	cmp	r3, #1
 800e556:	d001      	beq.n	800e55c <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800e558:	2302      	movs	r3, #2
 800e55a:	e310      	b.n	800eb7e <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800e55c:	68bb      	ldr	r3, [r7, #8]
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d005      	beq.n	800e56e <HAL_SPI_TransmitReceive+0x5a>
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d002      	beq.n	800e56e <HAL_SPI_TransmitReceive+0x5a>
 800e568:	887b      	ldrh	r3, [r7, #2]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d101      	bne.n	800e572 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800e56e:	2301      	movs	r3, #1
 800e570:	e305      	b.n	800eb7e <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800e578:	2b01      	cmp	r3, #1
 800e57a:	d101      	bne.n	800e580 <HAL_SPI_TransmitReceive+0x6c>
 800e57c:	2302      	movs	r3, #2
 800e57e:	e2fe      	b.n	800eb7e <HAL_SPI_TransmitReceive+0x66a>
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	2201      	movs	r2, #1
 800e584:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	2205      	movs	r2, #5
 800e58c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	2200      	movs	r2, #0
 800e594:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	687a      	ldr	r2, [r7, #4]
 800e59c:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	887a      	ldrh	r2, [r7, #2]
 800e5a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800e5a6:	68fb      	ldr	r3, [r7, #12]
 800e5a8:	887a      	ldrh	r2, [r7, #2]
 800e5aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	68ba      	ldr	r2, [r7, #8]
 800e5b2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	887a      	ldrh	r2, [r7, #2]
 800e5b8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	887a      	ldrh	r2, [r7, #2]
 800e5c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	2200      	movs	r2, #0
 800e5ce:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	68da      	ldr	r2, [r3, #12]
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800e5de:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	4a70      	ldr	r2, [pc, #448]	@ (800e7a8 <HAL_SPI_TransmitReceive+0x294>)
 800e5e6:	4293      	cmp	r3, r2
 800e5e8:	d009      	beq.n	800e5fe <HAL_SPI_TransmitReceive+0xea>
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	4a6f      	ldr	r2, [pc, #444]	@ (800e7ac <HAL_SPI_TransmitReceive+0x298>)
 800e5f0:	4293      	cmp	r3, r2
 800e5f2:	d004      	beq.n	800e5fe <HAL_SPI_TransmitReceive+0xea>
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	4a6d      	ldr	r2, [pc, #436]	@ (800e7b0 <HAL_SPI_TransmitReceive+0x29c>)
 800e5fa:	4293      	cmp	r3, r2
 800e5fc:	d102      	bne.n	800e604 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800e5fe:	2310      	movs	r3, #16
 800e600:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e602:	e001      	b.n	800e608 <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800e604:	2308      	movs	r3, #8
 800e606:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	685a      	ldr	r2, [r3, #4]
 800e60e:	4b69      	ldr	r3, [pc, #420]	@ (800e7b4 <HAL_SPI_TransmitReceive+0x2a0>)
 800e610:	4013      	ands	r3, r2
 800e612:	8879      	ldrh	r1, [r7, #2]
 800e614:	68fa      	ldr	r2, [r7, #12]
 800e616:	6812      	ldr	r2, [r2, #0]
 800e618:	430b      	orrs	r3, r1
 800e61a:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	681a      	ldr	r2, [r3, #0]
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	f042 0201 	orr.w	r2, r2, #1
 800e62a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	685b      	ldr	r3, [r3, #4]
 800e630:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e634:	d107      	bne.n	800e646 <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	681a      	ldr	r2, [r3, #0]
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e644:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	68db      	ldr	r3, [r3, #12]
 800e64a:	2b0f      	cmp	r3, #15
 800e64c:	f240 80a2 	bls.w	800e794 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800e650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e652:	089b      	lsrs	r3, r3, #2
 800e654:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e656:	e094      	b.n	800e782 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	695b      	ldr	r3, [r3, #20]
 800e65e:	f003 0302 	and.w	r3, r3, #2
 800e662:	2b02      	cmp	r3, #2
 800e664:	d120      	bne.n	800e6a8 <HAL_SPI_TransmitReceive+0x194>
 800e666:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d01d      	beq.n	800e6a8 <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800e66c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e66e:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800e670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e672:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e674:	429a      	cmp	r2, r3
 800e676:	d217      	bcs.n	800e6a8 <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	6812      	ldr	r2, [r2, #0]
 800e682:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e688:	1d1a      	adds	r2, r3, #4
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e694:	b29b      	uxth	r3, r3
 800e696:	3b01      	subs	r3, #1
 800e698:	b29a      	uxth	r2, r3
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e6a6:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	695b      	ldr	r3, [r3, #20]
 800e6ae:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800e6b0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d065      	beq.n	800e782 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	695b      	ldr	r3, [r3, #20]
 800e6bc:	f003 0301 	and.w	r3, r3, #1
 800e6c0:	2b01      	cmp	r3, #1
 800e6c2:	d118      	bne.n	800e6f6 <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	681a      	ldr	r2, [r3, #0]
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e6cc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800e6ce:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e6d4:	1d1a      	adds	r2, r3, #4
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e6e0:	b29b      	uxth	r3, r3
 800e6e2:	3b01      	subs	r3, #1
 800e6e4:	b29a      	uxth	r2, r3
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e6f2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e6f4:	e045      	b.n	800e782 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e6f6:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e6f8:	8bfb      	ldrh	r3, [r7, #30]
 800e6fa:	429a      	cmp	r2, r3
 800e6fc:	d21d      	bcs.n	800e73a <HAL_SPI_TransmitReceive+0x226>
 800e6fe:	697b      	ldr	r3, [r7, #20]
 800e700:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e704:	2b00      	cmp	r3, #0
 800e706:	d018      	beq.n	800e73a <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	681a      	ldr	r2, [r3, #0]
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e710:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800e712:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e718:	1d1a      	adds	r2, r3, #4
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e724:	b29b      	uxth	r3, r3
 800e726:	3b01      	subs	r3, #1
 800e728:	b29a      	uxth	r2, r3
 800e72a:	68fb      	ldr	r3, [r7, #12]
 800e72c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e736:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e738:	e023      	b.n	800e782 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e73a:	f7f4 fc25 	bl	8002f88 <HAL_GetTick>
 800e73e:	4602      	mov	r2, r0
 800e740:	69bb      	ldr	r3, [r7, #24]
 800e742:	1ad3      	subs	r3, r2, r3
 800e744:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e746:	429a      	cmp	r2, r3
 800e748:	d803      	bhi.n	800e752 <HAL_SPI_TransmitReceive+0x23e>
 800e74a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e74c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e750:	d102      	bne.n	800e758 <HAL_SPI_TransmitReceive+0x244>
 800e752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e754:	2b00      	cmp	r3, #0
 800e756:	d114      	bne.n	800e782 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800e758:	68f8      	ldr	r0, [r7, #12]
 800e75a:	f000 fc1b 	bl	800ef94 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e764:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	2201      	movs	r2, #1
 800e772:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	2200      	movs	r2, #0
 800e77a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800e77e:	2303      	movs	r3, #3
 800e780:	e1fd      	b.n	800eb7e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e782:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e784:	2b00      	cmp	r3, #0
 800e786:	f47f af67 	bne.w	800e658 <HAL_SPI_TransmitReceive+0x144>
 800e78a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	f47f af63 	bne.w	800e658 <HAL_SPI_TransmitReceive+0x144>
 800e792:	e1ce      	b.n	800eb32 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	68db      	ldr	r3, [r3, #12]
 800e798:	2b07      	cmp	r3, #7
 800e79a:	f240 81c2 	bls.w	800eb22 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800e79e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7a0:	085b      	lsrs	r3, r3, #1
 800e7a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e7a4:	e0c9      	b.n	800e93a <HAL_SPI_TransmitReceive+0x426>
 800e7a6:	bf00      	nop
 800e7a8:	40013000 	.word	0x40013000
 800e7ac:	40003800 	.word	0x40003800
 800e7b0:	40003c00 	.word	0x40003c00
 800e7b4:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	695b      	ldr	r3, [r3, #20]
 800e7be:	f003 0302 	and.w	r3, r3, #2
 800e7c2:	2b02      	cmp	r3, #2
 800e7c4:	d11f      	bne.n	800e806 <HAL_SPI_TransmitReceive+0x2f2>
 800e7c6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d01c      	beq.n	800e806 <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800e7cc:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e7ce:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800e7d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e7d2:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e7d4:	429a      	cmp	r2, r3
 800e7d6:	d216      	bcs.n	800e806 <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e7dc:	881a      	ldrh	r2, [r3, #0]
 800e7de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e7e0:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e7e2:	68fb      	ldr	r3, [r7, #12]
 800e7e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e7e6:	1c9a      	adds	r2, r3, #2
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e7f2:	b29b      	uxth	r3, r3
 800e7f4:	3b01      	subs	r3, #1
 800e7f6:	b29a      	uxth	r2, r3
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e804:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	695b      	ldr	r3, [r3, #20]
 800e80c:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800e80e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e810:	2b00      	cmp	r3, #0
 800e812:	f000 8092 	beq.w	800e93a <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	695b      	ldr	r3, [r3, #20]
 800e81c:	f003 0301 	and.w	r3, r3, #1
 800e820:	2b01      	cmp	r3, #1
 800e822:	d118      	bne.n	800e856 <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e828:	6a3a      	ldr	r2, [r7, #32]
 800e82a:	8812      	ldrh	r2, [r2, #0]
 800e82c:	b292      	uxth	r2, r2
 800e82e:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e834:	1c9a      	adds	r2, r3, #2
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e840:	b29b      	uxth	r3, r3
 800e842:	3b01      	subs	r3, #1
 800e844:	b29a      	uxth	r2, r3
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e852:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e854:	e071      	b.n	800e93a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e856:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e858:	8bfb      	ldrh	r3, [r7, #30]
 800e85a:	429a      	cmp	r2, r3
 800e85c:	d228      	bcs.n	800e8b0 <HAL_SPI_TransmitReceive+0x39c>
 800e85e:	697b      	ldr	r3, [r7, #20]
 800e860:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e864:	2b00      	cmp	r3, #0
 800e866:	d023      	beq.n	800e8b0 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e86c:	6a3a      	ldr	r2, [r7, #32]
 800e86e:	8812      	ldrh	r2, [r2, #0]
 800e870:	b292      	uxth	r2, r2
 800e872:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e878:	1c9a      	adds	r2, r3, #2
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e882:	6a3a      	ldr	r2, [r7, #32]
 800e884:	8812      	ldrh	r2, [r2, #0]
 800e886:	b292      	uxth	r2, r2
 800e888:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e88e:	1c9a      	adds	r2, r3, #2
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e89a:	b29b      	uxth	r3, r3
 800e89c:	3b02      	subs	r3, #2
 800e89e:	b29a      	uxth	r2, r3
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e8ac:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e8ae:	e044      	b.n	800e93a <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800e8b0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e8b2:	2b01      	cmp	r3, #1
 800e8b4:	d11d      	bne.n	800e8f2 <HAL_SPI_TransmitReceive+0x3de>
 800e8b6:	697b      	ldr	r3, [r7, #20]
 800e8b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d018      	beq.n	800e8f2 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e8c4:	6a3a      	ldr	r2, [r7, #32]
 800e8c6:	8812      	ldrh	r2, [r2, #0]
 800e8c8:	b292      	uxth	r2, r2
 800e8ca:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e8d0:	1c9a      	adds	r2, r3, #2
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e8dc:	b29b      	uxth	r3, r3
 800e8de:	3b01      	subs	r3, #1
 800e8e0:	b29a      	uxth	r2, r3
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e8ee:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e8f0:	e023      	b.n	800e93a <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e8f2:	f7f4 fb49 	bl	8002f88 <HAL_GetTick>
 800e8f6:	4602      	mov	r2, r0
 800e8f8:	69bb      	ldr	r3, [r7, #24]
 800e8fa:	1ad3      	subs	r3, r2, r3
 800e8fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e8fe:	429a      	cmp	r2, r3
 800e900:	d803      	bhi.n	800e90a <HAL_SPI_TransmitReceive+0x3f6>
 800e902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e904:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e908:	d102      	bne.n	800e910 <HAL_SPI_TransmitReceive+0x3fc>
 800e90a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d114      	bne.n	800e93a <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800e910:	68f8      	ldr	r0, [r7, #12]
 800e912:	f000 fb3f 	bl	800ef94 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e91c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	2201      	movs	r2, #1
 800e92a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	2200      	movs	r2, #0
 800e932:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800e936:	2303      	movs	r3, #3
 800e938:	e121      	b.n	800eb7e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e93a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	f47f af3b 	bne.w	800e7b8 <HAL_SPI_TransmitReceive+0x2a4>
 800e942:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e944:	2b00      	cmp	r3, #0
 800e946:	f47f af37 	bne.w	800e7b8 <HAL_SPI_TransmitReceive+0x2a4>
 800e94a:	e0f2      	b.n	800eb32 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	695b      	ldr	r3, [r3, #20]
 800e952:	f003 0302 	and.w	r3, r3, #2
 800e956:	2b02      	cmp	r3, #2
 800e958:	d121      	bne.n	800e99e <HAL_SPI_TransmitReceive+0x48a>
 800e95a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d01e      	beq.n	800e99e <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800e960:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e962:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800e964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e966:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e968:	429a      	cmp	r2, r3
 800e96a:	d218      	bcs.n	800e99e <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	3320      	adds	r3, #32
 800e976:	7812      	ldrb	r2, [r2, #0]
 800e978:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e97e:	1c5a      	adds	r2, r3, #1
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e98a:	b29b      	uxth	r3, r3
 800e98c:	3b01      	subs	r3, #1
 800e98e:	b29a      	uxth	r2, r3
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e99c:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	695b      	ldr	r3, [r3, #20]
 800e9a4:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800e9a6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	f000 80ba 	beq.w	800eb22 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	695b      	ldr	r3, [r3, #20]
 800e9b4:	f003 0301 	and.w	r3, r3, #1
 800e9b8:	2b01      	cmp	r3, #1
 800e9ba:	d11b      	bne.n	800e9f4 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e9c8:	7812      	ldrb	r2, [r2, #0]
 800e9ca:	b2d2      	uxtb	r2, r2
 800e9cc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e9d2:	1c5a      	adds	r2, r3, #1
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e9de:	b29b      	uxth	r3, r3
 800e9e0:	3b01      	subs	r3, #1
 800e9e2:	b29a      	uxth	r2, r3
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e9f0:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e9f2:	e096      	b.n	800eb22 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e9f4:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e9f6:	8bfb      	ldrh	r3, [r7, #30]
 800e9f8:	429a      	cmp	r2, r3
 800e9fa:	d24a      	bcs.n	800ea92 <HAL_SPI_TransmitReceive+0x57e>
 800e9fc:	697b      	ldr	r3, [r7, #20]
 800e9fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d045      	beq.n	800ea92 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ea12:	7812      	ldrb	r2, [r2, #0]
 800ea14:	b2d2      	uxtb	r2, r2
 800ea16:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ea1c:	1c5a      	adds	r2, r3, #1
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ea2e:	7812      	ldrb	r2, [r2, #0]
 800ea30:	b2d2      	uxtb	r2, r2
 800ea32:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ea38:	1c5a      	adds	r2, r3, #1
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ea46:	68fb      	ldr	r3, [r7, #12]
 800ea48:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ea4a:	7812      	ldrb	r2, [r2, #0]
 800ea4c:	b2d2      	uxtb	r2, r2
 800ea4e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ea54:	1c5a      	adds	r2, r3, #1
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ea66:	7812      	ldrb	r2, [r2, #0]
 800ea68:	b2d2      	uxtb	r2, r2
 800ea6a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ea70:	1c5a      	adds	r2, r3, #1
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ea7c:	b29b      	uxth	r3, r3
 800ea7e:	3b04      	subs	r3, #4
 800ea80:	b29a      	uxth	r2, r3
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ea8e:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ea90:	e047      	b.n	800eb22 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800ea92:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ea94:	2b03      	cmp	r3, #3
 800ea96:	d820      	bhi.n	800eada <HAL_SPI_TransmitReceive+0x5c6>
 800ea98:	697b      	ldr	r3, [r7, #20]
 800ea9a:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d01b      	beq.n	800eada <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800eaae:	7812      	ldrb	r2, [r2, #0]
 800eab0:	b2d2      	uxtb	r2, r2
 800eab2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800eab8:	1c5a      	adds	r2, r3, #1
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800eac4:	b29b      	uxth	r3, r3
 800eac6:	3b01      	subs	r3, #1
 800eac8:	b29a      	uxth	r2, r3
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ead6:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ead8:	e023      	b.n	800eb22 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eada:	f7f4 fa55 	bl	8002f88 <HAL_GetTick>
 800eade:	4602      	mov	r2, r0
 800eae0:	69bb      	ldr	r3, [r7, #24]
 800eae2:	1ad3      	subs	r3, r2, r3
 800eae4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800eae6:	429a      	cmp	r2, r3
 800eae8:	d803      	bhi.n	800eaf2 <HAL_SPI_TransmitReceive+0x5de>
 800eaea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eaec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaf0:	d102      	bne.n	800eaf8 <HAL_SPI_TransmitReceive+0x5e4>
 800eaf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d114      	bne.n	800eb22 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800eaf8:	68f8      	ldr	r0, [r7, #12]
 800eafa:	f000 fa4b 	bl	800ef94 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eb04:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	2201      	movs	r2, #1
 800eb12:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	2200      	movs	r2, #0
 800eb1a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800eb1e:	2303      	movs	r3, #3
 800eb20:	e02d      	b.n	800eb7e <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800eb22:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	f47f af11 	bne.w	800e94c <HAL_SPI_TransmitReceive+0x438>
 800eb2a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	f47f af0d 	bne.w	800e94c <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800eb32:	69bb      	ldr	r3, [r7, #24]
 800eb34:	9300      	str	r3, [sp, #0]
 800eb36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb38:	2200      	movs	r2, #0
 800eb3a:	2108      	movs	r1, #8
 800eb3c:	68f8      	ldr	r0, [r7, #12]
 800eb3e:	f000 fac9 	bl	800f0d4 <SPI_WaitOnFlagUntilTimeout>
 800eb42:	4603      	mov	r3, r0
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d007      	beq.n	800eb58 <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eb4e:	f043 0220 	orr.w	r2, r3, #32
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800eb58:	68f8      	ldr	r0, [r7, #12]
 800eb5a:	f000 fa1b 	bl	800ef94 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	2201      	movs	r2, #1
 800eb62:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	2200      	movs	r2, #0
 800eb6a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d001      	beq.n	800eb7c <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800eb78:	2301      	movs	r3, #1
 800eb7a:	e000      	b.n	800eb7e <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800eb7c:	2300      	movs	r3, #0
  }
}
 800eb7e:	4618      	mov	r0, r3
 800eb80:	3730      	adds	r7, #48	@ 0x30
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}
 800eb86:	bf00      	nop

0800eb88 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800eb88:	b580      	push	{r7, lr}
 800eb8a:	b08a      	sub	sp, #40	@ 0x28
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	691b      	ldr	r3, [r3, #16]
 800eb96:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	695b      	ldr	r3, [r3, #20]
 800eb9e:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800eba0:	6a3a      	ldr	r2, [r7, #32]
 800eba2:	69fb      	ldr	r3, [r7, #28]
 800eba4:	4013      	ands	r3, r2
 800eba6:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	689b      	ldr	r3, [r3, #8]
 800ebae:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800ebba:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	3330      	adds	r3, #48	@ 0x30
 800ebc2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800ebc4:	69fb      	ldr	r3, [r7, #28]
 800ebc6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d010      	beq.n	800ebf0 <HAL_SPI_IRQHandler+0x68>
 800ebce:	6a3b      	ldr	r3, [r7, #32]
 800ebd0:	f003 0308 	and.w	r3, r3, #8
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d00b      	beq.n	800ebf0 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	699a      	ldr	r2, [r3, #24]
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ebe6:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800ebe8:	6878      	ldr	r0, [r7, #4]
 800ebea:	f000 f9af 	bl	800ef4c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800ebee:	e192      	b.n	800ef16 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800ebf0:	69bb      	ldr	r3, [r7, #24]
 800ebf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d113      	bne.n	800ec22 <HAL_SPI_IRQHandler+0x9a>
 800ebfa:	69bb      	ldr	r3, [r7, #24]
 800ebfc:	f003 0320 	and.w	r3, r3, #32
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d10e      	bne.n	800ec22 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800ec04:	69bb      	ldr	r3, [r7, #24]
 800ec06:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d009      	beq.n	800ec22 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec12:	6878      	ldr	r0, [r7, #4]
 800ec14:	4798      	blx	r3
    hspi->RxISR(hspi);
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec1a:	6878      	ldr	r0, [r7, #4]
 800ec1c:	4798      	blx	r3
    handled = 1UL;
 800ec1e:	2301      	movs	r3, #1
 800ec20:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800ec22:	69bb      	ldr	r3, [r7, #24]
 800ec24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	d10f      	bne.n	800ec4c <HAL_SPI_IRQHandler+0xc4>
 800ec2c:	69bb      	ldr	r3, [r7, #24]
 800ec2e:	f003 0301 	and.w	r3, r3, #1
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d00a      	beq.n	800ec4c <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800ec36:	69bb      	ldr	r3, [r7, #24]
 800ec38:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d105      	bne.n	800ec4c <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ec44:	6878      	ldr	r0, [r7, #4]
 800ec46:	4798      	blx	r3
    handled = 1UL;
 800ec48:	2301      	movs	r3, #1
 800ec4a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800ec4c:	69bb      	ldr	r3, [r7, #24]
 800ec4e:	f003 0320 	and.w	r3, r3, #32
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d10f      	bne.n	800ec76 <HAL_SPI_IRQHandler+0xee>
 800ec56:	69bb      	ldr	r3, [r7, #24]
 800ec58:	f003 0302 	and.w	r3, r3, #2
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d00a      	beq.n	800ec76 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800ec60:	69bb      	ldr	r3, [r7, #24]
 800ec62:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d105      	bne.n	800ec76 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec6e:	6878      	ldr	r0, [r7, #4]
 800ec70:	4798      	blx	r3
    handled = 1UL;
 800ec72:	2301      	movs	r3, #1
 800ec74:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800ec76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	f040 8147 	bne.w	800ef0c <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800ec7e:	69bb      	ldr	r3, [r7, #24]
 800ec80:	f003 0308 	and.w	r3, r3, #8
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	f000 808b 	beq.w	800eda0 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	699a      	ldr	r2, [r3, #24]
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	f042 0208 	orr.w	r2, r2, #8
 800ec98:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	699a      	ldr	r2, [r3, #24]
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	f042 0210 	orr.w	r2, r2, #16
 800eca8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	699a      	ldr	r2, [r3, #24]
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	681b      	ldr	r3, [r3, #0]
 800ecb4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ecb8:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	691a      	ldr	r2, [r3, #16]
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	f022 0208 	bic.w	r2, r2, #8
 800ecc8:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	689b      	ldr	r3, [r3, #8]
 800ecd0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d13d      	bne.n	800ed54 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800ecd8:	e036      	b.n	800ed48 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	68db      	ldr	r3, [r3, #12]
 800ecde:	2b0f      	cmp	r3, #15
 800ece0:	d90b      	bls.n	800ecfa <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681a      	ldr	r2, [r3, #0]
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ecea:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800ecec:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ecf2:	1d1a      	adds	r2, r3, #4
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	665a      	str	r2, [r3, #100]	@ 0x64
 800ecf8:	e01d      	b.n	800ed36 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	68db      	ldr	r3, [r3, #12]
 800ecfe:	2b07      	cmp	r3, #7
 800ed00:	d90b      	bls.n	800ed1a <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ed06:	68fa      	ldr	r2, [r7, #12]
 800ed08:	8812      	ldrh	r2, [r2, #0]
 800ed0a:	b292      	uxth	r2, r2
 800ed0c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ed12:	1c9a      	adds	r2, r3, #2
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	665a      	str	r2, [r3, #100]	@ 0x64
 800ed18:	e00d      	b.n	800ed36 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ed26:	7812      	ldrb	r2, [r2, #0]
 800ed28:	b2d2      	uxtb	r2, r2
 800ed2a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ed30:	1c5a      	adds	r2, r3, #1
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ed3c:	b29b      	uxth	r3, r3
 800ed3e:	3b01      	subs	r3, #1
 800ed40:	b29a      	uxth	r2, r3
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ed4e:	b29b      	uxth	r3, r3
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d1c2      	bne.n	800ecda <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800ed54:	6878      	ldr	r0, [r7, #4]
 800ed56:	f000 f91d 	bl	800ef94 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	2201      	movs	r2, #1
 800ed5e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d003      	beq.n	800ed74 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ed6c:	6878      	ldr	r0, [r7, #4]
 800ed6e:	f000 f8e3 	bl	800ef38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ed72:	e0d0      	b.n	800ef16 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800ed74:	7cfb      	ldrb	r3, [r7, #19]
 800ed76:	2b05      	cmp	r3, #5
 800ed78:	d103      	bne.n	800ed82 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800ed7a:	6878      	ldr	r0, [r7, #4]
 800ed7c:	f7f1 fbba 	bl	80004f4 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800ed80:	e0c6      	b.n	800ef10 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800ed82:	7cfb      	ldrb	r3, [r7, #19]
 800ed84:	2b04      	cmp	r3, #4
 800ed86:	d103      	bne.n	800ed90 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800ed88:	6878      	ldr	r0, [r7, #4]
 800ed8a:	f000 f8cb 	bl	800ef24 <HAL_SPI_RxCpltCallback>
    return;
 800ed8e:	e0bf      	b.n	800ef10 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800ed90:	7cfb      	ldrb	r3, [r7, #19]
 800ed92:	2b03      	cmp	r3, #3
 800ed94:	f040 80bc 	bne.w	800ef10 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800ed98:	6878      	ldr	r0, [r7, #4]
 800ed9a:	f7f1 fb9b 	bl	80004d4 <HAL_SPI_TxCpltCallback>
    return;
 800ed9e:	e0b7      	b.n	800ef10 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800eda0:	69bb      	ldr	r3, [r7, #24]
 800eda2:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	f000 80b5 	beq.w	800ef16 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800edac:	69bb      	ldr	r3, [r7, #24]
 800edae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d00f      	beq.n	800edd6 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800edbc:	f043 0204 	orr.w	r2, r3, #4
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	699a      	ldr	r2, [r3, #24]
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800edd4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800edd6:	69bb      	ldr	r3, [r7, #24]
 800edd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d00f      	beq.n	800ee00 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ede6:	f043 0201 	orr.w	r2, r3, #1
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	699a      	ldr	r2, [r3, #24]
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800edfe:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800ee00:	69bb      	ldr	r3, [r7, #24]
 800ee02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d00f      	beq.n	800ee2a <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ee10:	f043 0208 	orr.w	r2, r3, #8
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	699a      	ldr	r2, [r3, #24]
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ee28:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800ee2a:	69bb      	ldr	r3, [r7, #24]
 800ee2c:	f003 0320 	and.w	r3, r3, #32
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d00f      	beq.n	800ee54 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ee3a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	699a      	ldr	r2, [r3, #24]
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	f042 0220 	orr.w	r2, r2, #32
 800ee52:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d05a      	beq.n	800ef14 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	681a      	ldr	r2, [r3, #0]
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	f022 0201 	bic.w	r2, r2, #1
 800ee6c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	6919      	ldr	r1, [r3, #16]
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	681a      	ldr	r2, [r3, #0]
 800ee78:	4b28      	ldr	r3, [pc, #160]	@ (800ef1c <HAL_SPI_IRQHandler+0x394>)
 800ee7a:	400b      	ands	r3, r1
 800ee7c:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800ee7e:	697b      	ldr	r3, [r7, #20]
 800ee80:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800ee84:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800ee88:	d138      	bne.n	800eefc <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	689a      	ldr	r2, [r3, #8]
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800ee98:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d013      	beq.n	800eeca <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800eea6:	4a1e      	ldr	r2, [pc, #120]	@ (800ef20 <HAL_SPI_IRQHandler+0x398>)
 800eea8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800eeae:	4618      	mov	r0, r3
 800eeb0:	f7f6 fd54 	bl	800595c <HAL_DMA_Abort_IT>
 800eeb4:	4603      	mov	r3, r0
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d007      	beq.n	800eeca <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eec0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d020      	beq.n	800ef14 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800eed6:	4a12      	ldr	r2, [pc, #72]	@ (800ef20 <HAL_SPI_IRQHandler+0x398>)
 800eed8:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800eede:	4618      	mov	r0, r3
 800eee0:	f7f6 fd3c 	bl	800595c <HAL_DMA_Abort_IT>
 800eee4:	4603      	mov	r3, r0
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d014      	beq.n	800ef14 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eef0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800eefa:	e00b      	b.n	800ef14 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	2201      	movs	r2, #1
 800ef00:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800ef04:	6878      	ldr	r0, [r7, #4]
 800ef06:	f000 f817 	bl	800ef38 <HAL_SPI_ErrorCallback>
    return;
 800ef0a:	e003      	b.n	800ef14 <HAL_SPI_IRQHandler+0x38c>
    return;
 800ef0c:	bf00      	nop
 800ef0e:	e002      	b.n	800ef16 <HAL_SPI_IRQHandler+0x38e>
    return;
 800ef10:	bf00      	nop
 800ef12:	e000      	b.n	800ef16 <HAL_SPI_IRQHandler+0x38e>
    return;
 800ef14:	bf00      	nop
  }
}
 800ef16:	3728      	adds	r7, #40	@ 0x28
 800ef18:	46bd      	mov	sp, r7
 800ef1a:	bd80      	pop	{r7, pc}
 800ef1c:	fffffc94 	.word	0xfffffc94
 800ef20:	0800ef61 	.word	0x0800ef61

0800ef24 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ef24:	b480      	push	{r7}
 800ef26:	b083      	sub	sp, #12
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800ef2c:	bf00      	nop
 800ef2e:	370c      	adds	r7, #12
 800ef30:	46bd      	mov	sp, r7
 800ef32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef36:	4770      	bx	lr

0800ef38 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ef38:	b480      	push	{r7}
 800ef3a:	b083      	sub	sp, #12
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800ef40:	bf00      	nop
 800ef42:	370c      	adds	r7, #12
 800ef44:	46bd      	mov	sp, r7
 800ef46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4a:	4770      	bx	lr

0800ef4c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800ef4c:	b480      	push	{r7}
 800ef4e:	b083      	sub	sp, #12
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800ef54:	bf00      	nop
 800ef56:	370c      	adds	r7, #12
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5e:	4770      	bx	lr

0800ef60 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b084      	sub	sp, #16
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ef6c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	2200      	movs	r2, #0
 800ef72:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	2200      	movs	r2, #0
 800ef7a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	2201      	movs	r2, #1
 800ef82:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ef86:	68f8      	ldr	r0, [r7, #12]
 800ef88:	f7ff ffd6 	bl	800ef38 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ef8c:	bf00      	nop
 800ef8e:	3710      	adds	r7, #16
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}

0800ef94 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800ef94:	b480      	push	{r7}
 800ef96:	b085      	sub	sp, #20
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	695b      	ldr	r3, [r3, #20]
 800efa2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	699a      	ldr	r2, [r3, #24]
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	f042 0208 	orr.w	r2, r2, #8
 800efb2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	699a      	ldr	r2, [r3, #24]
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	f042 0210 	orr.w	r2, r2, #16
 800efc2:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	681a      	ldr	r2, [r3, #0]
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	f022 0201 	bic.w	r2, r2, #1
 800efd2:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	6919      	ldr	r1, [r3, #16]
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	681a      	ldr	r2, [r3, #0]
 800efde:	4b3c      	ldr	r3, [pc, #240]	@ (800f0d0 <SPI_CloseTransfer+0x13c>)
 800efe0:	400b      	ands	r3, r1
 800efe2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	689a      	ldr	r2, [r3, #8]
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	681b      	ldr	r3, [r3, #0]
 800efee:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800eff2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800effa:	b2db      	uxtb	r3, r3
 800effc:	2b04      	cmp	r3, #4
 800effe:	d014      	beq.n	800f02a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	f003 0320 	and.w	r3, r3, #32
 800f006:	2b00      	cmp	r3, #0
 800f008:	d00f      	beq.n	800f02a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f010:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	699a      	ldr	r2, [r3, #24]
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	f042 0220 	orr.w	r2, r2, #32
 800f028:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800f030:	b2db      	uxtb	r3, r3
 800f032:	2b03      	cmp	r3, #3
 800f034:	d014      	beq.n	800f060 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d00f      	beq.n	800f060 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f046:	f043 0204 	orr.w	r2, r3, #4
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	699a      	ldr	r2, [r3, #24]
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f05e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f066:	2b00      	cmp	r3, #0
 800f068:	d00f      	beq.n	800f08a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f070:	f043 0201 	orr.w	r2, r3, #1
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	699a      	ldr	r2, [r3, #24]
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f088:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f090:	2b00      	cmp	r3, #0
 800f092:	d00f      	beq.n	800f0b4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f09a:	f043 0208 	orr.w	r2, r3, #8
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	699a      	ldr	r2, [r3, #24]
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f0b2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	2200      	movs	r2, #0
 800f0c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800f0c4:	bf00      	nop
 800f0c6:	3714      	adds	r7, #20
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ce:	4770      	bx	lr
 800f0d0:	fffffc90 	.word	0xfffffc90

0800f0d4 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b084      	sub	sp, #16
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	60f8      	str	r0, [r7, #12]
 800f0dc:	60b9      	str	r1, [r7, #8]
 800f0de:	603b      	str	r3, [r7, #0]
 800f0e0:	4613      	mov	r3, r2
 800f0e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f0e4:	e010      	b.n	800f108 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f0e6:	f7f3 ff4f 	bl	8002f88 <HAL_GetTick>
 800f0ea:	4602      	mov	r2, r0
 800f0ec:	69bb      	ldr	r3, [r7, #24]
 800f0ee:	1ad3      	subs	r3, r2, r3
 800f0f0:	683a      	ldr	r2, [r7, #0]
 800f0f2:	429a      	cmp	r2, r3
 800f0f4:	d803      	bhi.n	800f0fe <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f0f6:	683b      	ldr	r3, [r7, #0]
 800f0f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0fc:	d102      	bne.n	800f104 <SPI_WaitOnFlagUntilTimeout+0x30>
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d101      	bne.n	800f108 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f104:	2303      	movs	r3, #3
 800f106:	e00f      	b.n	800f128 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f108:	68fb      	ldr	r3, [r7, #12]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	695a      	ldr	r2, [r3, #20]
 800f10e:	68bb      	ldr	r3, [r7, #8]
 800f110:	4013      	ands	r3, r2
 800f112:	68ba      	ldr	r2, [r7, #8]
 800f114:	429a      	cmp	r2, r3
 800f116:	bf0c      	ite	eq
 800f118:	2301      	moveq	r3, #1
 800f11a:	2300      	movne	r3, #0
 800f11c:	b2db      	uxtb	r3, r3
 800f11e:	461a      	mov	r2, r3
 800f120:	79fb      	ldrb	r3, [r7, #7]
 800f122:	429a      	cmp	r2, r3
 800f124:	d0df      	beq.n	800f0e6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800f126:	2300      	movs	r3, #0
}
 800f128:	4618      	mov	r0, r3
 800f12a:	3710      	adds	r7, #16
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bd80      	pop	{r7, pc}

0800f130 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800f130:	b480      	push	{r7}
 800f132:	b085      	sub	sp, #20
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f13c:	095b      	lsrs	r3, r3, #5
 800f13e:	3301      	adds	r3, #1
 800f140:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	68db      	ldr	r3, [r3, #12]
 800f146:	3301      	adds	r3, #1
 800f148:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f14a:	68bb      	ldr	r3, [r7, #8]
 800f14c:	3307      	adds	r3, #7
 800f14e:	08db      	lsrs	r3, r3, #3
 800f150:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f152:	68bb      	ldr	r3, [r7, #8]
 800f154:	68fa      	ldr	r2, [r7, #12]
 800f156:	fb02 f303 	mul.w	r3, r2, r3
}
 800f15a:	4618      	mov	r0, r3
 800f15c:	3714      	adds	r7, #20
 800f15e:	46bd      	mov	sp, r7
 800f160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f164:	4770      	bx	lr
	...

0800f168 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f168:	b084      	sub	sp, #16
 800f16a:	b580      	push	{r7, lr}
 800f16c:	b084      	sub	sp, #16
 800f16e:	af00      	add	r7, sp, #0
 800f170:	6078      	str	r0, [r7, #4]
 800f172:	f107 001c 	add.w	r0, r7, #28
 800f176:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f17a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800f17e:	2b01      	cmp	r3, #1
 800f180:	d121      	bne.n	800f1c6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f186:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	68da      	ldr	r2, [r3, #12]
 800f192:	4b2c      	ldr	r3, [pc, #176]	@ (800f244 <USB_CoreInit+0xdc>)
 800f194:	4013      	ands	r3, r2
 800f196:	687a      	ldr	r2, [r7, #4]
 800f198:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	68db      	ldr	r3, [r3, #12]
 800f19e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f1a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f1aa:	2b01      	cmp	r3, #1
 800f1ac:	d105      	bne.n	800f1ba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	68db      	ldr	r3, [r3, #12]
 800f1b2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f1ba:	6878      	ldr	r0, [r7, #4]
 800f1bc:	f001 fafa 	bl	80107b4 <USB_CoreReset>
 800f1c0:	4603      	mov	r3, r0
 800f1c2:	73fb      	strb	r3, [r7, #15]
 800f1c4:	e01b      	b.n	800f1fe <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	68db      	ldr	r3, [r3, #12]
 800f1ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f1d2:	6878      	ldr	r0, [r7, #4]
 800f1d4:	f001 faee 	bl	80107b4 <USB_CoreReset>
 800f1d8:	4603      	mov	r3, r0
 800f1da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f1dc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d106      	bne.n	800f1f2 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f1e8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	639a      	str	r2, [r3, #56]	@ 0x38
 800f1f0:	e005      	b.n	800f1fe <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f1f6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f1fe:	7fbb      	ldrb	r3, [r7, #30]
 800f200:	2b01      	cmp	r3, #1
 800f202:	d116      	bne.n	800f232 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f208:	b29a      	uxth	r2, r3
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f212:	4b0d      	ldr	r3, [pc, #52]	@ (800f248 <USB_CoreInit+0xe0>)
 800f214:	4313      	orrs	r3, r2
 800f216:	687a      	ldr	r2, [r7, #4]
 800f218:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	689b      	ldr	r3, [r3, #8]
 800f21e:	f043 0206 	orr.w	r2, r3, #6
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	689b      	ldr	r3, [r3, #8]
 800f22a:	f043 0220 	orr.w	r2, r3, #32
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f232:	7bfb      	ldrb	r3, [r7, #15]
}
 800f234:	4618      	mov	r0, r3
 800f236:	3710      	adds	r7, #16
 800f238:	46bd      	mov	sp, r7
 800f23a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f23e:	b004      	add	sp, #16
 800f240:	4770      	bx	lr
 800f242:	bf00      	nop
 800f244:	ffbdffbf 	.word	0xffbdffbf
 800f248:	03ee0000 	.word	0x03ee0000

0800f24c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f24c:	b480      	push	{r7}
 800f24e:	b087      	sub	sp, #28
 800f250:	af00      	add	r7, sp, #0
 800f252:	60f8      	str	r0, [r7, #12]
 800f254:	60b9      	str	r1, [r7, #8]
 800f256:	4613      	mov	r3, r2
 800f258:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f25a:	79fb      	ldrb	r3, [r7, #7]
 800f25c:	2b02      	cmp	r3, #2
 800f25e:	d165      	bne.n	800f32c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	4a41      	ldr	r2, [pc, #260]	@ (800f368 <USB_SetTurnaroundTime+0x11c>)
 800f264:	4293      	cmp	r3, r2
 800f266:	d906      	bls.n	800f276 <USB_SetTurnaroundTime+0x2a>
 800f268:	68bb      	ldr	r3, [r7, #8]
 800f26a:	4a40      	ldr	r2, [pc, #256]	@ (800f36c <USB_SetTurnaroundTime+0x120>)
 800f26c:	4293      	cmp	r3, r2
 800f26e:	d202      	bcs.n	800f276 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f270:	230f      	movs	r3, #15
 800f272:	617b      	str	r3, [r7, #20]
 800f274:	e062      	b.n	800f33c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f276:	68bb      	ldr	r3, [r7, #8]
 800f278:	4a3c      	ldr	r2, [pc, #240]	@ (800f36c <USB_SetTurnaroundTime+0x120>)
 800f27a:	4293      	cmp	r3, r2
 800f27c:	d306      	bcc.n	800f28c <USB_SetTurnaroundTime+0x40>
 800f27e:	68bb      	ldr	r3, [r7, #8]
 800f280:	4a3b      	ldr	r2, [pc, #236]	@ (800f370 <USB_SetTurnaroundTime+0x124>)
 800f282:	4293      	cmp	r3, r2
 800f284:	d202      	bcs.n	800f28c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f286:	230e      	movs	r3, #14
 800f288:	617b      	str	r3, [r7, #20]
 800f28a:	e057      	b.n	800f33c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f28c:	68bb      	ldr	r3, [r7, #8]
 800f28e:	4a38      	ldr	r2, [pc, #224]	@ (800f370 <USB_SetTurnaroundTime+0x124>)
 800f290:	4293      	cmp	r3, r2
 800f292:	d306      	bcc.n	800f2a2 <USB_SetTurnaroundTime+0x56>
 800f294:	68bb      	ldr	r3, [r7, #8]
 800f296:	4a37      	ldr	r2, [pc, #220]	@ (800f374 <USB_SetTurnaroundTime+0x128>)
 800f298:	4293      	cmp	r3, r2
 800f29a:	d202      	bcs.n	800f2a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f29c:	230d      	movs	r3, #13
 800f29e:	617b      	str	r3, [r7, #20]
 800f2a0:	e04c      	b.n	800f33c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f2a2:	68bb      	ldr	r3, [r7, #8]
 800f2a4:	4a33      	ldr	r2, [pc, #204]	@ (800f374 <USB_SetTurnaroundTime+0x128>)
 800f2a6:	4293      	cmp	r3, r2
 800f2a8:	d306      	bcc.n	800f2b8 <USB_SetTurnaroundTime+0x6c>
 800f2aa:	68bb      	ldr	r3, [r7, #8]
 800f2ac:	4a32      	ldr	r2, [pc, #200]	@ (800f378 <USB_SetTurnaroundTime+0x12c>)
 800f2ae:	4293      	cmp	r3, r2
 800f2b0:	d802      	bhi.n	800f2b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f2b2:	230c      	movs	r3, #12
 800f2b4:	617b      	str	r3, [r7, #20]
 800f2b6:	e041      	b.n	800f33c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f2b8:	68bb      	ldr	r3, [r7, #8]
 800f2ba:	4a2f      	ldr	r2, [pc, #188]	@ (800f378 <USB_SetTurnaroundTime+0x12c>)
 800f2bc:	4293      	cmp	r3, r2
 800f2be:	d906      	bls.n	800f2ce <USB_SetTurnaroundTime+0x82>
 800f2c0:	68bb      	ldr	r3, [r7, #8]
 800f2c2:	4a2e      	ldr	r2, [pc, #184]	@ (800f37c <USB_SetTurnaroundTime+0x130>)
 800f2c4:	4293      	cmp	r3, r2
 800f2c6:	d802      	bhi.n	800f2ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f2c8:	230b      	movs	r3, #11
 800f2ca:	617b      	str	r3, [r7, #20]
 800f2cc:	e036      	b.n	800f33c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f2ce:	68bb      	ldr	r3, [r7, #8]
 800f2d0:	4a2a      	ldr	r2, [pc, #168]	@ (800f37c <USB_SetTurnaroundTime+0x130>)
 800f2d2:	4293      	cmp	r3, r2
 800f2d4:	d906      	bls.n	800f2e4 <USB_SetTurnaroundTime+0x98>
 800f2d6:	68bb      	ldr	r3, [r7, #8]
 800f2d8:	4a29      	ldr	r2, [pc, #164]	@ (800f380 <USB_SetTurnaroundTime+0x134>)
 800f2da:	4293      	cmp	r3, r2
 800f2dc:	d802      	bhi.n	800f2e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f2de:	230a      	movs	r3, #10
 800f2e0:	617b      	str	r3, [r7, #20]
 800f2e2:	e02b      	b.n	800f33c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f2e4:	68bb      	ldr	r3, [r7, #8]
 800f2e6:	4a26      	ldr	r2, [pc, #152]	@ (800f380 <USB_SetTurnaroundTime+0x134>)
 800f2e8:	4293      	cmp	r3, r2
 800f2ea:	d906      	bls.n	800f2fa <USB_SetTurnaroundTime+0xae>
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	4a25      	ldr	r2, [pc, #148]	@ (800f384 <USB_SetTurnaroundTime+0x138>)
 800f2f0:	4293      	cmp	r3, r2
 800f2f2:	d202      	bcs.n	800f2fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f2f4:	2309      	movs	r3, #9
 800f2f6:	617b      	str	r3, [r7, #20]
 800f2f8:	e020      	b.n	800f33c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f2fa:	68bb      	ldr	r3, [r7, #8]
 800f2fc:	4a21      	ldr	r2, [pc, #132]	@ (800f384 <USB_SetTurnaroundTime+0x138>)
 800f2fe:	4293      	cmp	r3, r2
 800f300:	d306      	bcc.n	800f310 <USB_SetTurnaroundTime+0xc4>
 800f302:	68bb      	ldr	r3, [r7, #8]
 800f304:	4a20      	ldr	r2, [pc, #128]	@ (800f388 <USB_SetTurnaroundTime+0x13c>)
 800f306:	4293      	cmp	r3, r2
 800f308:	d802      	bhi.n	800f310 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f30a:	2308      	movs	r3, #8
 800f30c:	617b      	str	r3, [r7, #20]
 800f30e:	e015      	b.n	800f33c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f310:	68bb      	ldr	r3, [r7, #8]
 800f312:	4a1d      	ldr	r2, [pc, #116]	@ (800f388 <USB_SetTurnaroundTime+0x13c>)
 800f314:	4293      	cmp	r3, r2
 800f316:	d906      	bls.n	800f326 <USB_SetTurnaroundTime+0xda>
 800f318:	68bb      	ldr	r3, [r7, #8]
 800f31a:	4a1c      	ldr	r2, [pc, #112]	@ (800f38c <USB_SetTurnaroundTime+0x140>)
 800f31c:	4293      	cmp	r3, r2
 800f31e:	d202      	bcs.n	800f326 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f320:	2307      	movs	r3, #7
 800f322:	617b      	str	r3, [r7, #20]
 800f324:	e00a      	b.n	800f33c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f326:	2306      	movs	r3, #6
 800f328:	617b      	str	r3, [r7, #20]
 800f32a:	e007      	b.n	800f33c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f32c:	79fb      	ldrb	r3, [r7, #7]
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d102      	bne.n	800f338 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f332:	2309      	movs	r3, #9
 800f334:	617b      	str	r3, [r7, #20]
 800f336:	e001      	b.n	800f33c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f338:	2309      	movs	r3, #9
 800f33a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	68db      	ldr	r3, [r3, #12]
 800f340:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	68da      	ldr	r2, [r3, #12]
 800f34c:	697b      	ldr	r3, [r7, #20]
 800f34e:	029b      	lsls	r3, r3, #10
 800f350:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800f354:	431a      	orrs	r2, r3
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f35a:	2300      	movs	r3, #0
}
 800f35c:	4618      	mov	r0, r3
 800f35e:	371c      	adds	r7, #28
 800f360:	46bd      	mov	sp, r7
 800f362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f366:	4770      	bx	lr
 800f368:	00d8acbf 	.word	0x00d8acbf
 800f36c:	00e4e1c0 	.word	0x00e4e1c0
 800f370:	00f42400 	.word	0x00f42400
 800f374:	01067380 	.word	0x01067380
 800f378:	011a499f 	.word	0x011a499f
 800f37c:	01312cff 	.word	0x01312cff
 800f380:	014ca43f 	.word	0x014ca43f
 800f384:	016e3600 	.word	0x016e3600
 800f388:	01a6ab1f 	.word	0x01a6ab1f
 800f38c:	01e84800 	.word	0x01e84800

0800f390 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f390:	b480      	push	{r7}
 800f392:	b083      	sub	sp, #12
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	689b      	ldr	r3, [r3, #8]
 800f39c:	f043 0201 	orr.w	r2, r3, #1
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f3a4:	2300      	movs	r3, #0
}
 800f3a6:	4618      	mov	r0, r3
 800f3a8:	370c      	adds	r7, #12
 800f3aa:	46bd      	mov	sp, r7
 800f3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b0:	4770      	bx	lr

0800f3b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f3b2:	b480      	push	{r7}
 800f3b4:	b083      	sub	sp, #12
 800f3b6:	af00      	add	r7, sp, #0
 800f3b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	689b      	ldr	r3, [r3, #8]
 800f3be:	f023 0201 	bic.w	r2, r3, #1
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f3c6:	2300      	movs	r3, #0
}
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	370c      	adds	r7, #12
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d2:	4770      	bx	lr

0800f3d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b084      	sub	sp, #16
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
 800f3dc:	460b      	mov	r3, r1
 800f3de:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	68db      	ldr	r3, [r3, #12]
 800f3e8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f3f0:	78fb      	ldrb	r3, [r7, #3]
 800f3f2:	2b01      	cmp	r3, #1
 800f3f4:	d115      	bne.n	800f422 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	68db      	ldr	r3, [r3, #12]
 800f3fa:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800f402:	200a      	movs	r0, #10
 800f404:	f7f3 fdcc 	bl	8002fa0 <HAL_Delay>
      ms += 10U;
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	330a      	adds	r3, #10
 800f40c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800f40e:	6878      	ldr	r0, [r7, #4]
 800f410:	f001 f93f 	bl	8010692 <USB_GetMode>
 800f414:	4603      	mov	r3, r0
 800f416:	2b01      	cmp	r3, #1
 800f418:	d01e      	beq.n	800f458 <USB_SetCurrentMode+0x84>
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	2bc7      	cmp	r3, #199	@ 0xc7
 800f41e:	d9f0      	bls.n	800f402 <USB_SetCurrentMode+0x2e>
 800f420:	e01a      	b.n	800f458 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f422:	78fb      	ldrb	r3, [r7, #3]
 800f424:	2b00      	cmp	r3, #0
 800f426:	d115      	bne.n	800f454 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	68db      	ldr	r3, [r3, #12]
 800f42c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800f434:	200a      	movs	r0, #10
 800f436:	f7f3 fdb3 	bl	8002fa0 <HAL_Delay>
      ms += 10U;
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	330a      	adds	r3, #10
 800f43e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800f440:	6878      	ldr	r0, [r7, #4]
 800f442:	f001 f926 	bl	8010692 <USB_GetMode>
 800f446:	4603      	mov	r3, r0
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d005      	beq.n	800f458 <USB_SetCurrentMode+0x84>
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	2bc7      	cmp	r3, #199	@ 0xc7
 800f450:	d9f0      	bls.n	800f434 <USB_SetCurrentMode+0x60>
 800f452:	e001      	b.n	800f458 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f454:	2301      	movs	r3, #1
 800f456:	e005      	b.n	800f464 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	2bc8      	cmp	r3, #200	@ 0xc8
 800f45c:	d101      	bne.n	800f462 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f45e:	2301      	movs	r3, #1
 800f460:	e000      	b.n	800f464 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f462:	2300      	movs	r3, #0
}
 800f464:	4618      	mov	r0, r3
 800f466:	3710      	adds	r7, #16
 800f468:	46bd      	mov	sp, r7
 800f46a:	bd80      	pop	{r7, pc}

0800f46c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f46c:	b084      	sub	sp, #16
 800f46e:	b580      	push	{r7, lr}
 800f470:	b086      	sub	sp, #24
 800f472:	af00      	add	r7, sp, #0
 800f474:	6078      	str	r0, [r7, #4]
 800f476:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800f47a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f47e:	2300      	movs	r3, #0
 800f480:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f486:	2300      	movs	r3, #0
 800f488:	613b      	str	r3, [r7, #16]
 800f48a:	e009      	b.n	800f4a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f48c:	687a      	ldr	r2, [r7, #4]
 800f48e:	693b      	ldr	r3, [r7, #16]
 800f490:	3340      	adds	r3, #64	@ 0x40
 800f492:	009b      	lsls	r3, r3, #2
 800f494:	4413      	add	r3, r2
 800f496:	2200      	movs	r2, #0
 800f498:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f49a:	693b      	ldr	r3, [r7, #16]
 800f49c:	3301      	adds	r3, #1
 800f49e:	613b      	str	r3, [r7, #16]
 800f4a0:	693b      	ldr	r3, [r7, #16]
 800f4a2:	2b0e      	cmp	r3, #14
 800f4a4:	d9f2      	bls.n	800f48c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f4a6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d11c      	bne.n	800f4e8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f4ae:	68fb      	ldr	r3, [r7, #12]
 800f4b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f4b4:	685b      	ldr	r3, [r3, #4]
 800f4b6:	68fa      	ldr	r2, [r7, #12]
 800f4b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f4bc:	f043 0302 	orr.w	r3, r3, #2
 800f4c0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f4c6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	601a      	str	r2, [r3, #0]
 800f4e6:	e005      	b.n	800f4f4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f4ec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f4fa:	461a      	mov	r2, r3
 800f4fc:	2300      	movs	r3, #0
 800f4fe:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f500:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800f504:	2b01      	cmp	r3, #1
 800f506:	d10d      	bne.n	800f524 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f508:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d104      	bne.n	800f51a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f510:	2100      	movs	r1, #0
 800f512:	6878      	ldr	r0, [r7, #4]
 800f514:	f000 f968 	bl	800f7e8 <USB_SetDevSpeed>
 800f518:	e008      	b.n	800f52c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f51a:	2101      	movs	r1, #1
 800f51c:	6878      	ldr	r0, [r7, #4]
 800f51e:	f000 f963 	bl	800f7e8 <USB_SetDevSpeed>
 800f522:	e003      	b.n	800f52c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f524:	2103      	movs	r1, #3
 800f526:	6878      	ldr	r0, [r7, #4]
 800f528:	f000 f95e 	bl	800f7e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f52c:	2110      	movs	r1, #16
 800f52e:	6878      	ldr	r0, [r7, #4]
 800f530:	f000 f8fa 	bl	800f728 <USB_FlushTxFifo>
 800f534:	4603      	mov	r3, r0
 800f536:	2b00      	cmp	r3, #0
 800f538:	d001      	beq.n	800f53e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800f53a:	2301      	movs	r3, #1
 800f53c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f53e:	6878      	ldr	r0, [r7, #4]
 800f540:	f000 f924 	bl	800f78c <USB_FlushRxFifo>
 800f544:	4603      	mov	r3, r0
 800f546:	2b00      	cmp	r3, #0
 800f548:	d001      	beq.n	800f54e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800f54a:	2301      	movs	r3, #1
 800f54c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f554:	461a      	mov	r2, r3
 800f556:	2300      	movs	r3, #0
 800f558:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f560:	461a      	mov	r2, r3
 800f562:	2300      	movs	r3, #0
 800f564:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f56c:	461a      	mov	r2, r3
 800f56e:	2300      	movs	r3, #0
 800f570:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f572:	2300      	movs	r3, #0
 800f574:	613b      	str	r3, [r7, #16]
 800f576:	e043      	b.n	800f600 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f578:	693b      	ldr	r3, [r7, #16]
 800f57a:	015a      	lsls	r2, r3, #5
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	4413      	add	r3, r2
 800f580:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f58a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f58e:	d118      	bne.n	800f5c2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800f590:	693b      	ldr	r3, [r7, #16]
 800f592:	2b00      	cmp	r3, #0
 800f594:	d10a      	bne.n	800f5ac <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f596:	693b      	ldr	r3, [r7, #16]
 800f598:	015a      	lsls	r2, r3, #5
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	4413      	add	r3, r2
 800f59e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f5a2:	461a      	mov	r2, r3
 800f5a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800f5a8:	6013      	str	r3, [r2, #0]
 800f5aa:	e013      	b.n	800f5d4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f5ac:	693b      	ldr	r3, [r7, #16]
 800f5ae:	015a      	lsls	r2, r3, #5
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	4413      	add	r3, r2
 800f5b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f5b8:	461a      	mov	r2, r3
 800f5ba:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800f5be:	6013      	str	r3, [r2, #0]
 800f5c0:	e008      	b.n	800f5d4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f5c2:	693b      	ldr	r3, [r7, #16]
 800f5c4:	015a      	lsls	r2, r3, #5
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	4413      	add	r3, r2
 800f5ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f5ce:	461a      	mov	r2, r3
 800f5d0:	2300      	movs	r3, #0
 800f5d2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f5d4:	693b      	ldr	r3, [r7, #16]
 800f5d6:	015a      	lsls	r2, r3, #5
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	4413      	add	r3, r2
 800f5dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f5e0:	461a      	mov	r2, r3
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f5e6:	693b      	ldr	r3, [r7, #16]
 800f5e8:	015a      	lsls	r2, r3, #5
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	4413      	add	r3, r2
 800f5ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f5f2:	461a      	mov	r2, r3
 800f5f4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800f5f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f5fa:	693b      	ldr	r3, [r7, #16]
 800f5fc:	3301      	adds	r3, #1
 800f5fe:	613b      	str	r3, [r7, #16]
 800f600:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f604:	461a      	mov	r2, r3
 800f606:	693b      	ldr	r3, [r7, #16]
 800f608:	4293      	cmp	r3, r2
 800f60a:	d3b5      	bcc.n	800f578 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f60c:	2300      	movs	r3, #0
 800f60e:	613b      	str	r3, [r7, #16]
 800f610:	e043      	b.n	800f69a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f612:	693b      	ldr	r3, [r7, #16]
 800f614:	015a      	lsls	r2, r3, #5
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	4413      	add	r3, r2
 800f61a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f624:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f628:	d118      	bne.n	800f65c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800f62a:	693b      	ldr	r3, [r7, #16]
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d10a      	bne.n	800f646 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f630:	693b      	ldr	r3, [r7, #16]
 800f632:	015a      	lsls	r2, r3, #5
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	4413      	add	r3, r2
 800f638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f63c:	461a      	mov	r2, r3
 800f63e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800f642:	6013      	str	r3, [r2, #0]
 800f644:	e013      	b.n	800f66e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f646:	693b      	ldr	r3, [r7, #16]
 800f648:	015a      	lsls	r2, r3, #5
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	4413      	add	r3, r2
 800f64e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f652:	461a      	mov	r2, r3
 800f654:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800f658:	6013      	str	r3, [r2, #0]
 800f65a:	e008      	b.n	800f66e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f65c:	693b      	ldr	r3, [r7, #16]
 800f65e:	015a      	lsls	r2, r3, #5
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	4413      	add	r3, r2
 800f664:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f668:	461a      	mov	r2, r3
 800f66a:	2300      	movs	r3, #0
 800f66c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f66e:	693b      	ldr	r3, [r7, #16]
 800f670:	015a      	lsls	r2, r3, #5
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	4413      	add	r3, r2
 800f676:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f67a:	461a      	mov	r2, r3
 800f67c:	2300      	movs	r3, #0
 800f67e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f680:	693b      	ldr	r3, [r7, #16]
 800f682:	015a      	lsls	r2, r3, #5
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	4413      	add	r3, r2
 800f688:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f68c:	461a      	mov	r2, r3
 800f68e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800f692:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f694:	693b      	ldr	r3, [r7, #16]
 800f696:	3301      	adds	r3, #1
 800f698:	613b      	str	r3, [r7, #16]
 800f69a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f69e:	461a      	mov	r2, r3
 800f6a0:	693b      	ldr	r3, [r7, #16]
 800f6a2:	4293      	cmp	r3, r2
 800f6a4:	d3b5      	bcc.n	800f612 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f6ac:	691b      	ldr	r3, [r3, #16]
 800f6ae:	68fa      	ldr	r2, [r7, #12]
 800f6b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f6b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f6b8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	2200      	movs	r2, #0
 800f6be:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800f6c6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f6c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d105      	bne.n	800f6dc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	699b      	ldr	r3, [r3, #24]
 800f6d4:	f043 0210 	orr.w	r2, r3, #16
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	699a      	ldr	r2, [r3, #24]
 800f6e0:	4b0f      	ldr	r3, [pc, #60]	@ (800f720 <USB_DevInit+0x2b4>)
 800f6e2:	4313      	orrs	r3, r2
 800f6e4:	687a      	ldr	r2, [r7, #4]
 800f6e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f6e8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	d005      	beq.n	800f6fc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	699b      	ldr	r3, [r3, #24]
 800f6f4:	f043 0208 	orr.w	r2, r3, #8
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f6fc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800f700:	2b01      	cmp	r3, #1
 800f702:	d105      	bne.n	800f710 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	699a      	ldr	r2, [r3, #24]
 800f708:	4b06      	ldr	r3, [pc, #24]	@ (800f724 <USB_DevInit+0x2b8>)
 800f70a:	4313      	orrs	r3, r2
 800f70c:	687a      	ldr	r2, [r7, #4]
 800f70e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f710:	7dfb      	ldrb	r3, [r7, #23]
}
 800f712:	4618      	mov	r0, r3
 800f714:	3718      	adds	r7, #24
 800f716:	46bd      	mov	sp, r7
 800f718:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f71c:	b004      	add	sp, #16
 800f71e:	4770      	bx	lr
 800f720:	803c3800 	.word	0x803c3800
 800f724:	40000004 	.word	0x40000004

0800f728 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f728:	b480      	push	{r7}
 800f72a:	b085      	sub	sp, #20
 800f72c:	af00      	add	r7, sp, #0
 800f72e:	6078      	str	r0, [r7, #4]
 800f730:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f732:	2300      	movs	r3, #0
 800f734:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	3301      	adds	r3, #1
 800f73a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f742:	d901      	bls.n	800f748 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800f744:	2303      	movs	r3, #3
 800f746:	e01b      	b.n	800f780 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	691b      	ldr	r3, [r3, #16]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	daf2      	bge.n	800f736 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800f750:	2300      	movs	r3, #0
 800f752:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f754:	683b      	ldr	r3, [r7, #0]
 800f756:	019b      	lsls	r3, r3, #6
 800f758:	f043 0220 	orr.w	r2, r3, #32
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	3301      	adds	r3, #1
 800f764:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f76c:	d901      	bls.n	800f772 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800f76e:	2303      	movs	r3, #3
 800f770:	e006      	b.n	800f780 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f772:	687b      	ldr	r3, [r7, #4]
 800f774:	691b      	ldr	r3, [r3, #16]
 800f776:	f003 0320 	and.w	r3, r3, #32
 800f77a:	2b20      	cmp	r3, #32
 800f77c:	d0f0      	beq.n	800f760 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800f77e:	2300      	movs	r3, #0
}
 800f780:	4618      	mov	r0, r3
 800f782:	3714      	adds	r7, #20
 800f784:	46bd      	mov	sp, r7
 800f786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78a:	4770      	bx	lr

0800f78c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f78c:	b480      	push	{r7}
 800f78e:	b085      	sub	sp, #20
 800f790:	af00      	add	r7, sp, #0
 800f792:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f794:	2300      	movs	r3, #0
 800f796:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	3301      	adds	r3, #1
 800f79c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f7a4:	d901      	bls.n	800f7aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800f7a6:	2303      	movs	r3, #3
 800f7a8:	e018      	b.n	800f7dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	691b      	ldr	r3, [r3, #16]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	daf2      	bge.n	800f798 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800f7b2:	2300      	movs	r3, #0
 800f7b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	2210      	movs	r2, #16
 800f7ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	3301      	adds	r3, #1
 800f7c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f7c8:	d901      	bls.n	800f7ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800f7ca:	2303      	movs	r3, #3
 800f7cc:	e006      	b.n	800f7dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	691b      	ldr	r3, [r3, #16]
 800f7d2:	f003 0310 	and.w	r3, r3, #16
 800f7d6:	2b10      	cmp	r3, #16
 800f7d8:	d0f0      	beq.n	800f7bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800f7da:	2300      	movs	r3, #0
}
 800f7dc:	4618      	mov	r0, r3
 800f7de:	3714      	adds	r7, #20
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e6:	4770      	bx	lr

0800f7e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f7e8:	b480      	push	{r7}
 800f7ea:	b085      	sub	sp, #20
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
 800f7f0:	460b      	mov	r3, r1
 800f7f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f7fe:	681a      	ldr	r2, [r3, #0]
 800f800:	78fb      	ldrb	r3, [r7, #3]
 800f802:	68f9      	ldr	r1, [r7, #12]
 800f804:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f808:	4313      	orrs	r3, r2
 800f80a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f80c:	2300      	movs	r3, #0
}
 800f80e:	4618      	mov	r0, r3
 800f810:	3714      	adds	r7, #20
 800f812:	46bd      	mov	sp, r7
 800f814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f818:	4770      	bx	lr

0800f81a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800f81a:	b480      	push	{r7}
 800f81c:	b087      	sub	sp, #28
 800f81e:	af00      	add	r7, sp, #0
 800f820:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800f826:	693b      	ldr	r3, [r7, #16]
 800f828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f82c:	689b      	ldr	r3, [r3, #8]
 800f82e:	f003 0306 	and.w	r3, r3, #6
 800f832:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d102      	bne.n	800f840 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800f83a:	2300      	movs	r3, #0
 800f83c:	75fb      	strb	r3, [r7, #23]
 800f83e:	e00a      	b.n	800f856 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	2b02      	cmp	r3, #2
 800f844:	d002      	beq.n	800f84c <USB_GetDevSpeed+0x32>
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	2b06      	cmp	r3, #6
 800f84a:	d102      	bne.n	800f852 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800f84c:	2302      	movs	r3, #2
 800f84e:	75fb      	strb	r3, [r7, #23]
 800f850:	e001      	b.n	800f856 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800f852:	230f      	movs	r3, #15
 800f854:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800f856:	7dfb      	ldrb	r3, [r7, #23]
}
 800f858:	4618      	mov	r0, r3
 800f85a:	371c      	adds	r7, #28
 800f85c:	46bd      	mov	sp, r7
 800f85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f862:	4770      	bx	lr

0800f864 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f864:	b480      	push	{r7}
 800f866:	b085      	sub	sp, #20
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
 800f86c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f872:	683b      	ldr	r3, [r7, #0]
 800f874:	781b      	ldrb	r3, [r3, #0]
 800f876:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f878:	683b      	ldr	r3, [r7, #0]
 800f87a:	785b      	ldrb	r3, [r3, #1]
 800f87c:	2b01      	cmp	r3, #1
 800f87e:	d139      	bne.n	800f8f4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f886:	69da      	ldr	r2, [r3, #28]
 800f888:	683b      	ldr	r3, [r7, #0]
 800f88a:	781b      	ldrb	r3, [r3, #0]
 800f88c:	f003 030f 	and.w	r3, r3, #15
 800f890:	2101      	movs	r1, #1
 800f892:	fa01 f303 	lsl.w	r3, r1, r3
 800f896:	b29b      	uxth	r3, r3
 800f898:	68f9      	ldr	r1, [r7, #12]
 800f89a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f89e:	4313      	orrs	r3, r2
 800f8a0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800f8a2:	68bb      	ldr	r3, [r7, #8]
 800f8a4:	015a      	lsls	r2, r3, #5
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	4413      	add	r3, r2
 800f8aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d153      	bne.n	800f960 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f8b8:	68bb      	ldr	r3, [r7, #8]
 800f8ba:	015a      	lsls	r2, r3, #5
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	4413      	add	r3, r2
 800f8c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f8c4:	681a      	ldr	r2, [r3, #0]
 800f8c6:	683b      	ldr	r3, [r7, #0]
 800f8c8:	689b      	ldr	r3, [r3, #8]
 800f8ca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f8ce:	683b      	ldr	r3, [r7, #0]
 800f8d0:	791b      	ldrb	r3, [r3, #4]
 800f8d2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f8d4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f8d6:	68bb      	ldr	r3, [r7, #8]
 800f8d8:	059b      	lsls	r3, r3, #22
 800f8da:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f8dc:	431a      	orrs	r2, r3
 800f8de:	68bb      	ldr	r3, [r7, #8]
 800f8e0:	0159      	lsls	r1, r3, #5
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	440b      	add	r3, r1
 800f8e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f8ea:	4619      	mov	r1, r3
 800f8ec:	4b20      	ldr	r3, [pc, #128]	@ (800f970 <USB_ActivateEndpoint+0x10c>)
 800f8ee:	4313      	orrs	r3, r2
 800f8f0:	600b      	str	r3, [r1, #0]
 800f8f2:	e035      	b.n	800f960 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f8fa:	69da      	ldr	r2, [r3, #28]
 800f8fc:	683b      	ldr	r3, [r7, #0]
 800f8fe:	781b      	ldrb	r3, [r3, #0]
 800f900:	f003 030f 	and.w	r3, r3, #15
 800f904:	2101      	movs	r1, #1
 800f906:	fa01 f303 	lsl.w	r3, r1, r3
 800f90a:	041b      	lsls	r3, r3, #16
 800f90c:	68f9      	ldr	r1, [r7, #12]
 800f90e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f912:	4313      	orrs	r3, r2
 800f914:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f916:	68bb      	ldr	r3, [r7, #8]
 800f918:	015a      	lsls	r2, r3, #5
 800f91a:	68fb      	ldr	r3, [r7, #12]
 800f91c:	4413      	add	r3, r2
 800f91e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d119      	bne.n	800f960 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f92c:	68bb      	ldr	r3, [r7, #8]
 800f92e:	015a      	lsls	r2, r3, #5
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	4413      	add	r3, r2
 800f934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f938:	681a      	ldr	r2, [r3, #0]
 800f93a:	683b      	ldr	r3, [r7, #0]
 800f93c:	689b      	ldr	r3, [r3, #8]
 800f93e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	791b      	ldrb	r3, [r3, #4]
 800f946:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f948:	430b      	orrs	r3, r1
 800f94a:	431a      	orrs	r2, r3
 800f94c:	68bb      	ldr	r3, [r7, #8]
 800f94e:	0159      	lsls	r1, r3, #5
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	440b      	add	r3, r1
 800f954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f958:	4619      	mov	r1, r3
 800f95a:	4b05      	ldr	r3, [pc, #20]	@ (800f970 <USB_ActivateEndpoint+0x10c>)
 800f95c:	4313      	orrs	r3, r2
 800f95e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800f960:	2300      	movs	r3, #0
}
 800f962:	4618      	mov	r0, r3
 800f964:	3714      	adds	r7, #20
 800f966:	46bd      	mov	sp, r7
 800f968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96c:	4770      	bx	lr
 800f96e:	bf00      	nop
 800f970:	10008000 	.word	0x10008000

0800f974 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f974:	b480      	push	{r7}
 800f976:	b085      	sub	sp, #20
 800f978:	af00      	add	r7, sp, #0
 800f97a:	6078      	str	r0, [r7, #4]
 800f97c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f982:	683b      	ldr	r3, [r7, #0]
 800f984:	781b      	ldrb	r3, [r3, #0]
 800f986:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800f988:	683b      	ldr	r3, [r7, #0]
 800f98a:	785b      	ldrb	r3, [r3, #1]
 800f98c:	2b01      	cmp	r3, #1
 800f98e:	d161      	bne.n	800fa54 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f990:	68bb      	ldr	r3, [r7, #8]
 800f992:	015a      	lsls	r2, r3, #5
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	4413      	add	r3, r2
 800f998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f9a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f9a6:	d11f      	bne.n	800f9e8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800f9a8:	68bb      	ldr	r3, [r7, #8]
 800f9aa:	015a      	lsls	r2, r3, #5
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	4413      	add	r3, r2
 800f9b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	68ba      	ldr	r2, [r7, #8]
 800f9b8:	0151      	lsls	r1, r2, #5
 800f9ba:	68fa      	ldr	r2, [r7, #12]
 800f9bc:	440a      	add	r2, r1
 800f9be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f9c2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f9c6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800f9c8:	68bb      	ldr	r3, [r7, #8]
 800f9ca:	015a      	lsls	r2, r3, #5
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	4413      	add	r3, r2
 800f9d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	68ba      	ldr	r2, [r7, #8]
 800f9d8:	0151      	lsls	r1, r2, #5
 800f9da:	68fa      	ldr	r2, [r7, #12]
 800f9dc:	440a      	add	r2, r1
 800f9de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f9e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f9e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f9ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f9f0:	683b      	ldr	r3, [r7, #0]
 800f9f2:	781b      	ldrb	r3, [r3, #0]
 800f9f4:	f003 030f 	and.w	r3, r3, #15
 800f9f8:	2101      	movs	r1, #1
 800f9fa:	fa01 f303 	lsl.w	r3, r1, r3
 800f9fe:	b29b      	uxth	r3, r3
 800fa00:	43db      	mvns	r3, r3
 800fa02:	68f9      	ldr	r1, [r7, #12]
 800fa04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fa08:	4013      	ands	r3, r2
 800fa0a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fa12:	69da      	ldr	r2, [r3, #28]
 800fa14:	683b      	ldr	r3, [r7, #0]
 800fa16:	781b      	ldrb	r3, [r3, #0]
 800fa18:	f003 030f 	and.w	r3, r3, #15
 800fa1c:	2101      	movs	r1, #1
 800fa1e:	fa01 f303 	lsl.w	r3, r1, r3
 800fa22:	b29b      	uxth	r3, r3
 800fa24:	43db      	mvns	r3, r3
 800fa26:	68f9      	ldr	r1, [r7, #12]
 800fa28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fa2c:	4013      	ands	r3, r2
 800fa2e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800fa30:	68bb      	ldr	r3, [r7, #8]
 800fa32:	015a      	lsls	r2, r3, #5
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	4413      	add	r3, r2
 800fa38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fa3c:	681a      	ldr	r2, [r3, #0]
 800fa3e:	68bb      	ldr	r3, [r7, #8]
 800fa40:	0159      	lsls	r1, r3, #5
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	440b      	add	r3, r1
 800fa46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fa4a:	4619      	mov	r1, r3
 800fa4c:	4b35      	ldr	r3, [pc, #212]	@ (800fb24 <USB_DeactivateEndpoint+0x1b0>)
 800fa4e:	4013      	ands	r3, r2
 800fa50:	600b      	str	r3, [r1, #0]
 800fa52:	e060      	b.n	800fb16 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fa54:	68bb      	ldr	r3, [r7, #8]
 800fa56:	015a      	lsls	r2, r3, #5
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	4413      	add	r3, r2
 800fa5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fa66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fa6a:	d11f      	bne.n	800faac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800fa6c:	68bb      	ldr	r3, [r7, #8]
 800fa6e:	015a      	lsls	r2, r3, #5
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	4413      	add	r3, r2
 800fa74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	68ba      	ldr	r2, [r7, #8]
 800fa7c:	0151      	lsls	r1, r2, #5
 800fa7e:	68fa      	ldr	r2, [r7, #12]
 800fa80:	440a      	add	r2, r1
 800fa82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fa86:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800fa8a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800fa8c:	68bb      	ldr	r3, [r7, #8]
 800fa8e:	015a      	lsls	r2, r3, #5
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	4413      	add	r3, r2
 800fa94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fa98:	681b      	ldr	r3, [r3, #0]
 800fa9a:	68ba      	ldr	r2, [r7, #8]
 800fa9c:	0151      	lsls	r1, r2, #5
 800fa9e:	68fa      	ldr	r2, [r7, #12]
 800faa0:	440a      	add	r2, r1
 800faa2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800faa6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800faaa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fab2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fab4:	683b      	ldr	r3, [r7, #0]
 800fab6:	781b      	ldrb	r3, [r3, #0]
 800fab8:	f003 030f 	and.w	r3, r3, #15
 800fabc:	2101      	movs	r1, #1
 800fabe:	fa01 f303 	lsl.w	r3, r1, r3
 800fac2:	041b      	lsls	r3, r3, #16
 800fac4:	43db      	mvns	r3, r3
 800fac6:	68f9      	ldr	r1, [r7, #12]
 800fac8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800facc:	4013      	ands	r3, r2
 800face:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fad6:	69da      	ldr	r2, [r3, #28]
 800fad8:	683b      	ldr	r3, [r7, #0]
 800fada:	781b      	ldrb	r3, [r3, #0]
 800fadc:	f003 030f 	and.w	r3, r3, #15
 800fae0:	2101      	movs	r1, #1
 800fae2:	fa01 f303 	lsl.w	r3, r1, r3
 800fae6:	041b      	lsls	r3, r3, #16
 800fae8:	43db      	mvns	r3, r3
 800faea:	68f9      	ldr	r1, [r7, #12]
 800faec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800faf0:	4013      	ands	r3, r2
 800faf2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800faf4:	68bb      	ldr	r3, [r7, #8]
 800faf6:	015a      	lsls	r2, r3, #5
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	4413      	add	r3, r2
 800fafc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fb00:	681a      	ldr	r2, [r3, #0]
 800fb02:	68bb      	ldr	r3, [r7, #8]
 800fb04:	0159      	lsls	r1, r3, #5
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	440b      	add	r3, r1
 800fb0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fb0e:	4619      	mov	r1, r3
 800fb10:	4b05      	ldr	r3, [pc, #20]	@ (800fb28 <USB_DeactivateEndpoint+0x1b4>)
 800fb12:	4013      	ands	r3, r2
 800fb14:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800fb16:	2300      	movs	r3, #0
}
 800fb18:	4618      	mov	r0, r3
 800fb1a:	3714      	adds	r7, #20
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb22:	4770      	bx	lr
 800fb24:	ec337800 	.word	0xec337800
 800fb28:	eff37800 	.word	0xeff37800

0800fb2c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b08a      	sub	sp, #40	@ 0x28
 800fb30:	af02      	add	r7, sp, #8
 800fb32:	60f8      	str	r0, [r7, #12]
 800fb34:	60b9      	str	r1, [r7, #8]
 800fb36:	4613      	mov	r3, r2
 800fb38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800fb3e:	68bb      	ldr	r3, [r7, #8]
 800fb40:	781b      	ldrb	r3, [r3, #0]
 800fb42:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fb44:	68bb      	ldr	r3, [r7, #8]
 800fb46:	785b      	ldrb	r3, [r3, #1]
 800fb48:	2b01      	cmp	r3, #1
 800fb4a:	f040 8185 	bne.w	800fe58 <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800fb4e:	68bb      	ldr	r3, [r7, #8]
 800fb50:	691b      	ldr	r3, [r3, #16]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d132      	bne.n	800fbbc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fb56:	69bb      	ldr	r3, [r7, #24]
 800fb58:	015a      	lsls	r2, r3, #5
 800fb5a:	69fb      	ldr	r3, [r7, #28]
 800fb5c:	4413      	add	r3, r2
 800fb5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fb62:	691a      	ldr	r2, [r3, #16]
 800fb64:	69bb      	ldr	r3, [r7, #24]
 800fb66:	0159      	lsls	r1, r3, #5
 800fb68:	69fb      	ldr	r3, [r7, #28]
 800fb6a:	440b      	add	r3, r1
 800fb6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fb70:	4619      	mov	r1, r3
 800fb72:	4ba7      	ldr	r3, [pc, #668]	@ (800fe10 <USB_EPStartXfer+0x2e4>)
 800fb74:	4013      	ands	r3, r2
 800fb76:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fb78:	69bb      	ldr	r3, [r7, #24]
 800fb7a:	015a      	lsls	r2, r3, #5
 800fb7c:	69fb      	ldr	r3, [r7, #28]
 800fb7e:	4413      	add	r3, r2
 800fb80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fb84:	691b      	ldr	r3, [r3, #16]
 800fb86:	69ba      	ldr	r2, [r7, #24]
 800fb88:	0151      	lsls	r1, r2, #5
 800fb8a:	69fa      	ldr	r2, [r7, #28]
 800fb8c:	440a      	add	r2, r1
 800fb8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fb92:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800fb96:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fb98:	69bb      	ldr	r3, [r7, #24]
 800fb9a:	015a      	lsls	r2, r3, #5
 800fb9c:	69fb      	ldr	r3, [r7, #28]
 800fb9e:	4413      	add	r3, r2
 800fba0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fba4:	691a      	ldr	r2, [r3, #16]
 800fba6:	69bb      	ldr	r3, [r7, #24]
 800fba8:	0159      	lsls	r1, r3, #5
 800fbaa:	69fb      	ldr	r3, [r7, #28]
 800fbac:	440b      	add	r3, r1
 800fbae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fbb2:	4619      	mov	r1, r3
 800fbb4:	4b97      	ldr	r3, [pc, #604]	@ (800fe14 <USB_EPStartXfer+0x2e8>)
 800fbb6:	4013      	ands	r3, r2
 800fbb8:	610b      	str	r3, [r1, #16]
 800fbba:	e097      	b.n	800fcec <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fbbc:	69bb      	ldr	r3, [r7, #24]
 800fbbe:	015a      	lsls	r2, r3, #5
 800fbc0:	69fb      	ldr	r3, [r7, #28]
 800fbc2:	4413      	add	r3, r2
 800fbc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fbc8:	691a      	ldr	r2, [r3, #16]
 800fbca:	69bb      	ldr	r3, [r7, #24]
 800fbcc:	0159      	lsls	r1, r3, #5
 800fbce:	69fb      	ldr	r3, [r7, #28]
 800fbd0:	440b      	add	r3, r1
 800fbd2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fbd6:	4619      	mov	r1, r3
 800fbd8:	4b8e      	ldr	r3, [pc, #568]	@ (800fe14 <USB_EPStartXfer+0x2e8>)
 800fbda:	4013      	ands	r3, r2
 800fbdc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fbde:	69bb      	ldr	r3, [r7, #24]
 800fbe0:	015a      	lsls	r2, r3, #5
 800fbe2:	69fb      	ldr	r3, [r7, #28]
 800fbe4:	4413      	add	r3, r2
 800fbe6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fbea:	691a      	ldr	r2, [r3, #16]
 800fbec:	69bb      	ldr	r3, [r7, #24]
 800fbee:	0159      	lsls	r1, r3, #5
 800fbf0:	69fb      	ldr	r3, [r7, #28]
 800fbf2:	440b      	add	r3, r1
 800fbf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fbf8:	4619      	mov	r1, r3
 800fbfa:	4b85      	ldr	r3, [pc, #532]	@ (800fe10 <USB_EPStartXfer+0x2e4>)
 800fbfc:	4013      	ands	r3, r2
 800fbfe:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800fc00:	69bb      	ldr	r3, [r7, #24]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d11a      	bne.n	800fc3c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800fc06:	68bb      	ldr	r3, [r7, #8]
 800fc08:	691a      	ldr	r2, [r3, #16]
 800fc0a:	68bb      	ldr	r3, [r7, #8]
 800fc0c:	689b      	ldr	r3, [r3, #8]
 800fc0e:	429a      	cmp	r2, r3
 800fc10:	d903      	bls.n	800fc1a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800fc12:	68bb      	ldr	r3, [r7, #8]
 800fc14:	689a      	ldr	r2, [r3, #8]
 800fc16:	68bb      	ldr	r3, [r7, #8]
 800fc18:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fc1a:	69bb      	ldr	r3, [r7, #24]
 800fc1c:	015a      	lsls	r2, r3, #5
 800fc1e:	69fb      	ldr	r3, [r7, #28]
 800fc20:	4413      	add	r3, r2
 800fc22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fc26:	691b      	ldr	r3, [r3, #16]
 800fc28:	69ba      	ldr	r2, [r7, #24]
 800fc2a:	0151      	lsls	r1, r2, #5
 800fc2c:	69fa      	ldr	r2, [r7, #28]
 800fc2e:	440a      	add	r2, r1
 800fc30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fc34:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800fc38:	6113      	str	r3, [r2, #16]
 800fc3a:	e044      	b.n	800fcc6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800fc3c:	68bb      	ldr	r3, [r7, #8]
 800fc3e:	691a      	ldr	r2, [r3, #16]
 800fc40:	68bb      	ldr	r3, [r7, #8]
 800fc42:	689b      	ldr	r3, [r3, #8]
 800fc44:	4413      	add	r3, r2
 800fc46:	1e5a      	subs	r2, r3, #1
 800fc48:	68bb      	ldr	r3, [r7, #8]
 800fc4a:	689b      	ldr	r3, [r3, #8]
 800fc4c:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc50:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800fc52:	69bb      	ldr	r3, [r7, #24]
 800fc54:	015a      	lsls	r2, r3, #5
 800fc56:	69fb      	ldr	r3, [r7, #28]
 800fc58:	4413      	add	r3, r2
 800fc5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fc5e:	691a      	ldr	r2, [r3, #16]
 800fc60:	8afb      	ldrh	r3, [r7, #22]
 800fc62:	04d9      	lsls	r1, r3, #19
 800fc64:	4b6c      	ldr	r3, [pc, #432]	@ (800fe18 <USB_EPStartXfer+0x2ec>)
 800fc66:	400b      	ands	r3, r1
 800fc68:	69b9      	ldr	r1, [r7, #24]
 800fc6a:	0148      	lsls	r0, r1, #5
 800fc6c:	69f9      	ldr	r1, [r7, #28]
 800fc6e:	4401      	add	r1, r0
 800fc70:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800fc74:	4313      	orrs	r3, r2
 800fc76:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800fc78:	68bb      	ldr	r3, [r7, #8]
 800fc7a:	791b      	ldrb	r3, [r3, #4]
 800fc7c:	2b01      	cmp	r3, #1
 800fc7e:	d122      	bne.n	800fcc6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800fc80:	69bb      	ldr	r3, [r7, #24]
 800fc82:	015a      	lsls	r2, r3, #5
 800fc84:	69fb      	ldr	r3, [r7, #28]
 800fc86:	4413      	add	r3, r2
 800fc88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fc8c:	691b      	ldr	r3, [r3, #16]
 800fc8e:	69ba      	ldr	r2, [r7, #24]
 800fc90:	0151      	lsls	r1, r2, #5
 800fc92:	69fa      	ldr	r2, [r7, #28]
 800fc94:	440a      	add	r2, r1
 800fc96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fc9a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800fc9e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800fca0:	69bb      	ldr	r3, [r7, #24]
 800fca2:	015a      	lsls	r2, r3, #5
 800fca4:	69fb      	ldr	r3, [r7, #28]
 800fca6:	4413      	add	r3, r2
 800fca8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fcac:	691a      	ldr	r2, [r3, #16]
 800fcae:	8afb      	ldrh	r3, [r7, #22]
 800fcb0:	075b      	lsls	r3, r3, #29
 800fcb2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800fcb6:	69b9      	ldr	r1, [r7, #24]
 800fcb8:	0148      	lsls	r0, r1, #5
 800fcba:	69f9      	ldr	r1, [r7, #28]
 800fcbc:	4401      	add	r1, r0
 800fcbe:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800fcc2:	4313      	orrs	r3, r2
 800fcc4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800fcc6:	69bb      	ldr	r3, [r7, #24]
 800fcc8:	015a      	lsls	r2, r3, #5
 800fcca:	69fb      	ldr	r3, [r7, #28]
 800fccc:	4413      	add	r3, r2
 800fcce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fcd2:	691a      	ldr	r2, [r3, #16]
 800fcd4:	68bb      	ldr	r3, [r7, #8]
 800fcd6:	691b      	ldr	r3, [r3, #16]
 800fcd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fcdc:	69b9      	ldr	r1, [r7, #24]
 800fcde:	0148      	lsls	r0, r1, #5
 800fce0:	69f9      	ldr	r1, [r7, #28]
 800fce2:	4401      	add	r1, r0
 800fce4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800fce8:	4313      	orrs	r3, r2
 800fcea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800fcec:	79fb      	ldrb	r3, [r7, #7]
 800fcee:	2b01      	cmp	r3, #1
 800fcf0:	d14b      	bne.n	800fd8a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800fcf2:	68bb      	ldr	r3, [r7, #8]
 800fcf4:	69db      	ldr	r3, [r3, #28]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d009      	beq.n	800fd0e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800fcfa:	69bb      	ldr	r3, [r7, #24]
 800fcfc:	015a      	lsls	r2, r3, #5
 800fcfe:	69fb      	ldr	r3, [r7, #28]
 800fd00:	4413      	add	r3, r2
 800fd02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fd06:	461a      	mov	r2, r3
 800fd08:	68bb      	ldr	r3, [r7, #8]
 800fd0a:	69db      	ldr	r3, [r3, #28]
 800fd0c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800fd0e:	68bb      	ldr	r3, [r7, #8]
 800fd10:	791b      	ldrb	r3, [r3, #4]
 800fd12:	2b01      	cmp	r3, #1
 800fd14:	d128      	bne.n	800fd68 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fd16:	69fb      	ldr	r3, [r7, #28]
 800fd18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fd1c:	689b      	ldr	r3, [r3, #8]
 800fd1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d110      	bne.n	800fd48 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800fd26:	69bb      	ldr	r3, [r7, #24]
 800fd28:	015a      	lsls	r2, r3, #5
 800fd2a:	69fb      	ldr	r3, [r7, #28]
 800fd2c:	4413      	add	r3, r2
 800fd2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fd32:	681b      	ldr	r3, [r3, #0]
 800fd34:	69ba      	ldr	r2, [r7, #24]
 800fd36:	0151      	lsls	r1, r2, #5
 800fd38:	69fa      	ldr	r2, [r7, #28]
 800fd3a:	440a      	add	r2, r1
 800fd3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fd40:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800fd44:	6013      	str	r3, [r2, #0]
 800fd46:	e00f      	b.n	800fd68 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800fd48:	69bb      	ldr	r3, [r7, #24]
 800fd4a:	015a      	lsls	r2, r3, #5
 800fd4c:	69fb      	ldr	r3, [r7, #28]
 800fd4e:	4413      	add	r3, r2
 800fd50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fd54:	681b      	ldr	r3, [r3, #0]
 800fd56:	69ba      	ldr	r2, [r7, #24]
 800fd58:	0151      	lsls	r1, r2, #5
 800fd5a:	69fa      	ldr	r2, [r7, #28]
 800fd5c:	440a      	add	r2, r1
 800fd5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fd62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fd66:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fd68:	69bb      	ldr	r3, [r7, #24]
 800fd6a:	015a      	lsls	r2, r3, #5
 800fd6c:	69fb      	ldr	r3, [r7, #28]
 800fd6e:	4413      	add	r3, r2
 800fd70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fd74:	681b      	ldr	r3, [r3, #0]
 800fd76:	69ba      	ldr	r2, [r7, #24]
 800fd78:	0151      	lsls	r1, r2, #5
 800fd7a:	69fa      	ldr	r2, [r7, #28]
 800fd7c:	440a      	add	r2, r1
 800fd7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fd82:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800fd86:	6013      	str	r3, [r2, #0]
 800fd88:	e169      	b.n	801005e <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fd8a:	69bb      	ldr	r3, [r7, #24]
 800fd8c:	015a      	lsls	r2, r3, #5
 800fd8e:	69fb      	ldr	r3, [r7, #28]
 800fd90:	4413      	add	r3, r2
 800fd92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	69ba      	ldr	r2, [r7, #24]
 800fd9a:	0151      	lsls	r1, r2, #5
 800fd9c:	69fa      	ldr	r2, [r7, #28]
 800fd9e:	440a      	add	r2, r1
 800fda0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fda4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800fda8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800fdaa:	68bb      	ldr	r3, [r7, #8]
 800fdac:	791b      	ldrb	r3, [r3, #4]
 800fdae:	2b01      	cmp	r3, #1
 800fdb0:	d015      	beq.n	800fdde <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800fdb2:	68bb      	ldr	r3, [r7, #8]
 800fdb4:	691b      	ldr	r3, [r3, #16]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	f000 8151 	beq.w	801005e <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800fdbc:	69fb      	ldr	r3, [r7, #28]
 800fdbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fdc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fdc4:	68bb      	ldr	r3, [r7, #8]
 800fdc6:	781b      	ldrb	r3, [r3, #0]
 800fdc8:	f003 030f 	and.w	r3, r3, #15
 800fdcc:	2101      	movs	r1, #1
 800fdce:	fa01 f303 	lsl.w	r3, r1, r3
 800fdd2:	69f9      	ldr	r1, [r7, #28]
 800fdd4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fdd8:	4313      	orrs	r3, r2
 800fdda:	634b      	str	r3, [r1, #52]	@ 0x34
 800fddc:	e13f      	b.n	801005e <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fdde:	69fb      	ldr	r3, [r7, #28]
 800fde0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fde4:	689b      	ldr	r3, [r3, #8]
 800fde6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d116      	bne.n	800fe1c <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800fdee:	69bb      	ldr	r3, [r7, #24]
 800fdf0:	015a      	lsls	r2, r3, #5
 800fdf2:	69fb      	ldr	r3, [r7, #28]
 800fdf4:	4413      	add	r3, r2
 800fdf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	69ba      	ldr	r2, [r7, #24]
 800fdfe:	0151      	lsls	r1, r2, #5
 800fe00:	69fa      	ldr	r2, [r7, #28]
 800fe02:	440a      	add	r2, r1
 800fe04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fe08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800fe0c:	6013      	str	r3, [r2, #0]
 800fe0e:	e015      	b.n	800fe3c <USB_EPStartXfer+0x310>
 800fe10:	e007ffff 	.word	0xe007ffff
 800fe14:	fff80000 	.word	0xfff80000
 800fe18:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800fe1c:	69bb      	ldr	r3, [r7, #24]
 800fe1e:	015a      	lsls	r2, r3, #5
 800fe20:	69fb      	ldr	r3, [r7, #28]
 800fe22:	4413      	add	r3, r2
 800fe24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	69ba      	ldr	r2, [r7, #24]
 800fe2c:	0151      	lsls	r1, r2, #5
 800fe2e:	69fa      	ldr	r2, [r7, #28]
 800fe30:	440a      	add	r2, r1
 800fe32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fe36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800fe3a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800fe3c:	68bb      	ldr	r3, [r7, #8]
 800fe3e:	68d9      	ldr	r1, [r3, #12]
 800fe40:	68bb      	ldr	r3, [r7, #8]
 800fe42:	781a      	ldrb	r2, [r3, #0]
 800fe44:	68bb      	ldr	r3, [r7, #8]
 800fe46:	691b      	ldr	r3, [r3, #16]
 800fe48:	b298      	uxth	r0, r3
 800fe4a:	79fb      	ldrb	r3, [r7, #7]
 800fe4c:	9300      	str	r3, [sp, #0]
 800fe4e:	4603      	mov	r3, r0
 800fe50:	68f8      	ldr	r0, [r7, #12]
 800fe52:	f000 f9b9 	bl	80101c8 <USB_WritePacket>
 800fe56:	e102      	b.n	801005e <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800fe58:	69bb      	ldr	r3, [r7, #24]
 800fe5a:	015a      	lsls	r2, r3, #5
 800fe5c:	69fb      	ldr	r3, [r7, #28]
 800fe5e:	4413      	add	r3, r2
 800fe60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fe64:	691a      	ldr	r2, [r3, #16]
 800fe66:	69bb      	ldr	r3, [r7, #24]
 800fe68:	0159      	lsls	r1, r3, #5
 800fe6a:	69fb      	ldr	r3, [r7, #28]
 800fe6c:	440b      	add	r3, r1
 800fe6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fe72:	4619      	mov	r1, r3
 800fe74:	4b7c      	ldr	r3, [pc, #496]	@ (8010068 <USB_EPStartXfer+0x53c>)
 800fe76:	4013      	ands	r3, r2
 800fe78:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800fe7a:	69bb      	ldr	r3, [r7, #24]
 800fe7c:	015a      	lsls	r2, r3, #5
 800fe7e:	69fb      	ldr	r3, [r7, #28]
 800fe80:	4413      	add	r3, r2
 800fe82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fe86:	691a      	ldr	r2, [r3, #16]
 800fe88:	69bb      	ldr	r3, [r7, #24]
 800fe8a:	0159      	lsls	r1, r3, #5
 800fe8c:	69fb      	ldr	r3, [r7, #28]
 800fe8e:	440b      	add	r3, r1
 800fe90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fe94:	4619      	mov	r1, r3
 800fe96:	4b75      	ldr	r3, [pc, #468]	@ (801006c <USB_EPStartXfer+0x540>)
 800fe98:	4013      	ands	r3, r2
 800fe9a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800fe9c:	69bb      	ldr	r3, [r7, #24]
 800fe9e:	2b00      	cmp	r3, #0
 800fea0:	d12f      	bne.n	800ff02 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 800fea2:	68bb      	ldr	r3, [r7, #8]
 800fea4:	691b      	ldr	r3, [r3, #16]
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d003      	beq.n	800feb2 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 800feaa:	68bb      	ldr	r3, [r7, #8]
 800feac:	689a      	ldr	r2, [r3, #8]
 800feae:	68bb      	ldr	r3, [r7, #8]
 800feb0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800feb2:	68bb      	ldr	r3, [r7, #8]
 800feb4:	689a      	ldr	r2, [r3, #8]
 800feb6:	68bb      	ldr	r3, [r7, #8]
 800feb8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800feba:	69bb      	ldr	r3, [r7, #24]
 800febc:	015a      	lsls	r2, r3, #5
 800febe:	69fb      	ldr	r3, [r7, #28]
 800fec0:	4413      	add	r3, r2
 800fec2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fec6:	691a      	ldr	r2, [r3, #16]
 800fec8:	68bb      	ldr	r3, [r7, #8]
 800feca:	6a1b      	ldr	r3, [r3, #32]
 800fecc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fed0:	69b9      	ldr	r1, [r7, #24]
 800fed2:	0148      	lsls	r0, r1, #5
 800fed4:	69f9      	ldr	r1, [r7, #28]
 800fed6:	4401      	add	r1, r0
 800fed8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800fedc:	4313      	orrs	r3, r2
 800fede:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fee0:	69bb      	ldr	r3, [r7, #24]
 800fee2:	015a      	lsls	r2, r3, #5
 800fee4:	69fb      	ldr	r3, [r7, #28]
 800fee6:	4413      	add	r3, r2
 800fee8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800feec:	691b      	ldr	r3, [r3, #16]
 800feee:	69ba      	ldr	r2, [r7, #24]
 800fef0:	0151      	lsls	r1, r2, #5
 800fef2:	69fa      	ldr	r2, [r7, #28]
 800fef4:	440a      	add	r2, r1
 800fef6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fefa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800fefe:	6113      	str	r3, [r2, #16]
 800ff00:	e05f      	b.n	800ffc2 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800ff02:	68bb      	ldr	r3, [r7, #8]
 800ff04:	691b      	ldr	r3, [r3, #16]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d123      	bne.n	800ff52 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ff0a:	69bb      	ldr	r3, [r7, #24]
 800ff0c:	015a      	lsls	r2, r3, #5
 800ff0e:	69fb      	ldr	r3, [r7, #28]
 800ff10:	4413      	add	r3, r2
 800ff12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ff16:	691a      	ldr	r2, [r3, #16]
 800ff18:	68bb      	ldr	r3, [r7, #8]
 800ff1a:	689b      	ldr	r3, [r3, #8]
 800ff1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ff20:	69b9      	ldr	r1, [r7, #24]
 800ff22:	0148      	lsls	r0, r1, #5
 800ff24:	69f9      	ldr	r1, [r7, #28]
 800ff26:	4401      	add	r1, r0
 800ff28:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ff2c:	4313      	orrs	r3, r2
 800ff2e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ff30:	69bb      	ldr	r3, [r7, #24]
 800ff32:	015a      	lsls	r2, r3, #5
 800ff34:	69fb      	ldr	r3, [r7, #28]
 800ff36:	4413      	add	r3, r2
 800ff38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ff3c:	691b      	ldr	r3, [r3, #16]
 800ff3e:	69ba      	ldr	r2, [r7, #24]
 800ff40:	0151      	lsls	r1, r2, #5
 800ff42:	69fa      	ldr	r2, [r7, #28]
 800ff44:	440a      	add	r2, r1
 800ff46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ff4a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ff4e:	6113      	str	r3, [r2, #16]
 800ff50:	e037      	b.n	800ffc2 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ff52:	68bb      	ldr	r3, [r7, #8]
 800ff54:	691a      	ldr	r2, [r3, #16]
 800ff56:	68bb      	ldr	r3, [r7, #8]
 800ff58:	689b      	ldr	r3, [r3, #8]
 800ff5a:	4413      	add	r3, r2
 800ff5c:	1e5a      	subs	r2, r3, #1
 800ff5e:	68bb      	ldr	r3, [r7, #8]
 800ff60:	689b      	ldr	r3, [r3, #8]
 800ff62:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff66:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800ff68:	68bb      	ldr	r3, [r7, #8]
 800ff6a:	689b      	ldr	r3, [r3, #8]
 800ff6c:	8afa      	ldrh	r2, [r7, #22]
 800ff6e:	fb03 f202 	mul.w	r2, r3, r2
 800ff72:	68bb      	ldr	r3, [r7, #8]
 800ff74:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ff76:	69bb      	ldr	r3, [r7, #24]
 800ff78:	015a      	lsls	r2, r3, #5
 800ff7a:	69fb      	ldr	r3, [r7, #28]
 800ff7c:	4413      	add	r3, r2
 800ff7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ff82:	691a      	ldr	r2, [r3, #16]
 800ff84:	8afb      	ldrh	r3, [r7, #22]
 800ff86:	04d9      	lsls	r1, r3, #19
 800ff88:	4b39      	ldr	r3, [pc, #228]	@ (8010070 <USB_EPStartXfer+0x544>)
 800ff8a:	400b      	ands	r3, r1
 800ff8c:	69b9      	ldr	r1, [r7, #24]
 800ff8e:	0148      	lsls	r0, r1, #5
 800ff90:	69f9      	ldr	r1, [r7, #28]
 800ff92:	4401      	add	r1, r0
 800ff94:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ff98:	4313      	orrs	r3, r2
 800ff9a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ff9c:	69bb      	ldr	r3, [r7, #24]
 800ff9e:	015a      	lsls	r2, r3, #5
 800ffa0:	69fb      	ldr	r3, [r7, #28]
 800ffa2:	4413      	add	r3, r2
 800ffa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ffa8:	691a      	ldr	r2, [r3, #16]
 800ffaa:	68bb      	ldr	r3, [r7, #8]
 800ffac:	6a1b      	ldr	r3, [r3, #32]
 800ffae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ffb2:	69b9      	ldr	r1, [r7, #24]
 800ffb4:	0148      	lsls	r0, r1, #5
 800ffb6:	69f9      	ldr	r1, [r7, #28]
 800ffb8:	4401      	add	r1, r0
 800ffba:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ffbe:	4313      	orrs	r3, r2
 800ffc0:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800ffc2:	79fb      	ldrb	r3, [r7, #7]
 800ffc4:	2b01      	cmp	r3, #1
 800ffc6:	d10d      	bne.n	800ffe4 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ffc8:	68bb      	ldr	r3, [r7, #8]
 800ffca:	68db      	ldr	r3, [r3, #12]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d009      	beq.n	800ffe4 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ffd0:	68bb      	ldr	r3, [r7, #8]
 800ffd2:	68d9      	ldr	r1, [r3, #12]
 800ffd4:	69bb      	ldr	r3, [r7, #24]
 800ffd6:	015a      	lsls	r2, r3, #5
 800ffd8:	69fb      	ldr	r3, [r7, #28]
 800ffda:	4413      	add	r3, r2
 800ffdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ffe0:	460a      	mov	r2, r1
 800ffe2:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ffe4:	68bb      	ldr	r3, [r7, #8]
 800ffe6:	791b      	ldrb	r3, [r3, #4]
 800ffe8:	2b01      	cmp	r3, #1
 800ffea:	d128      	bne.n	801003e <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ffec:	69fb      	ldr	r3, [r7, #28]
 800ffee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fff2:	689b      	ldr	r3, [r3, #8]
 800fff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d110      	bne.n	801001e <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800fffc:	69bb      	ldr	r3, [r7, #24]
 800fffe:	015a      	lsls	r2, r3, #5
 8010000:	69fb      	ldr	r3, [r7, #28]
 8010002:	4413      	add	r3, r2
 8010004:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	69ba      	ldr	r2, [r7, #24]
 801000c:	0151      	lsls	r1, r2, #5
 801000e:	69fa      	ldr	r2, [r7, #28]
 8010010:	440a      	add	r2, r1
 8010012:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010016:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801001a:	6013      	str	r3, [r2, #0]
 801001c:	e00f      	b.n	801003e <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801001e:	69bb      	ldr	r3, [r7, #24]
 8010020:	015a      	lsls	r2, r3, #5
 8010022:	69fb      	ldr	r3, [r7, #28]
 8010024:	4413      	add	r3, r2
 8010026:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	69ba      	ldr	r2, [r7, #24]
 801002e:	0151      	lsls	r1, r2, #5
 8010030:	69fa      	ldr	r2, [r7, #28]
 8010032:	440a      	add	r2, r1
 8010034:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010038:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801003c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801003e:	69bb      	ldr	r3, [r7, #24]
 8010040:	015a      	lsls	r2, r3, #5
 8010042:	69fb      	ldr	r3, [r7, #28]
 8010044:	4413      	add	r3, r2
 8010046:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801004a:	681b      	ldr	r3, [r3, #0]
 801004c:	69ba      	ldr	r2, [r7, #24]
 801004e:	0151      	lsls	r1, r2, #5
 8010050:	69fa      	ldr	r2, [r7, #28]
 8010052:	440a      	add	r2, r1
 8010054:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010058:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 801005c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801005e:	2300      	movs	r3, #0
}
 8010060:	4618      	mov	r0, r3
 8010062:	3720      	adds	r7, #32
 8010064:	46bd      	mov	sp, r7
 8010066:	bd80      	pop	{r7, pc}
 8010068:	fff80000 	.word	0xfff80000
 801006c:	e007ffff 	.word	0xe007ffff
 8010070:	1ff80000 	.word	0x1ff80000

08010074 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010074:	b480      	push	{r7}
 8010076:	b087      	sub	sp, #28
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
 801007c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801007e:	2300      	movs	r3, #0
 8010080:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8010082:	2300      	movs	r3, #0
 8010084:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	785b      	ldrb	r3, [r3, #1]
 801008e:	2b01      	cmp	r3, #1
 8010090:	d14a      	bne.n	8010128 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010092:	683b      	ldr	r3, [r7, #0]
 8010094:	781b      	ldrb	r3, [r3, #0]
 8010096:	015a      	lsls	r2, r3, #5
 8010098:	693b      	ldr	r3, [r7, #16]
 801009a:	4413      	add	r3, r2
 801009c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80100a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80100aa:	f040 8086 	bne.w	80101ba <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80100ae:	683b      	ldr	r3, [r7, #0]
 80100b0:	781b      	ldrb	r3, [r3, #0]
 80100b2:	015a      	lsls	r2, r3, #5
 80100b4:	693b      	ldr	r3, [r7, #16]
 80100b6:	4413      	add	r3, r2
 80100b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80100bc:	681b      	ldr	r3, [r3, #0]
 80100be:	683a      	ldr	r2, [r7, #0]
 80100c0:	7812      	ldrb	r2, [r2, #0]
 80100c2:	0151      	lsls	r1, r2, #5
 80100c4:	693a      	ldr	r2, [r7, #16]
 80100c6:	440a      	add	r2, r1
 80100c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80100cc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80100d0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80100d2:	683b      	ldr	r3, [r7, #0]
 80100d4:	781b      	ldrb	r3, [r3, #0]
 80100d6:	015a      	lsls	r2, r3, #5
 80100d8:	693b      	ldr	r3, [r7, #16]
 80100da:	4413      	add	r3, r2
 80100dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	683a      	ldr	r2, [r7, #0]
 80100e4:	7812      	ldrb	r2, [r2, #0]
 80100e6:	0151      	lsls	r1, r2, #5
 80100e8:	693a      	ldr	r2, [r7, #16]
 80100ea:	440a      	add	r2, r1
 80100ec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80100f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80100f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	3301      	adds	r3, #1
 80100fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8010102:	4293      	cmp	r3, r2
 8010104:	d902      	bls.n	801010c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8010106:	2301      	movs	r3, #1
 8010108:	75fb      	strb	r3, [r7, #23]
          break;
 801010a:	e056      	b.n	80101ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 801010c:	683b      	ldr	r3, [r7, #0]
 801010e:	781b      	ldrb	r3, [r3, #0]
 8010110:	015a      	lsls	r2, r3, #5
 8010112:	693b      	ldr	r3, [r7, #16]
 8010114:	4413      	add	r3, r2
 8010116:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010120:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010124:	d0e7      	beq.n	80100f6 <USB_EPStopXfer+0x82>
 8010126:	e048      	b.n	80101ba <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010128:	683b      	ldr	r3, [r7, #0]
 801012a:	781b      	ldrb	r3, [r3, #0]
 801012c:	015a      	lsls	r2, r3, #5
 801012e:	693b      	ldr	r3, [r7, #16]
 8010130:	4413      	add	r3, r2
 8010132:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801013c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010140:	d13b      	bne.n	80101ba <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8010142:	683b      	ldr	r3, [r7, #0]
 8010144:	781b      	ldrb	r3, [r3, #0]
 8010146:	015a      	lsls	r2, r3, #5
 8010148:	693b      	ldr	r3, [r7, #16]
 801014a:	4413      	add	r3, r2
 801014c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	683a      	ldr	r2, [r7, #0]
 8010154:	7812      	ldrb	r2, [r2, #0]
 8010156:	0151      	lsls	r1, r2, #5
 8010158:	693a      	ldr	r2, [r7, #16]
 801015a:	440a      	add	r2, r1
 801015c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010160:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010164:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8010166:	683b      	ldr	r3, [r7, #0]
 8010168:	781b      	ldrb	r3, [r3, #0]
 801016a:	015a      	lsls	r2, r3, #5
 801016c:	693b      	ldr	r3, [r7, #16]
 801016e:	4413      	add	r3, r2
 8010170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	683a      	ldr	r2, [r7, #0]
 8010178:	7812      	ldrb	r2, [r2, #0]
 801017a:	0151      	lsls	r1, r2, #5
 801017c:	693a      	ldr	r2, [r7, #16]
 801017e:	440a      	add	r2, r1
 8010180:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010184:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010188:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	3301      	adds	r3, #1
 801018e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	f242 7210 	movw	r2, #10000	@ 0x2710
 8010196:	4293      	cmp	r3, r2
 8010198:	d902      	bls.n	80101a0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801019a:	2301      	movs	r3, #1
 801019c:	75fb      	strb	r3, [r7, #23]
          break;
 801019e:	e00c      	b.n	80101ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80101a0:	683b      	ldr	r3, [r7, #0]
 80101a2:	781b      	ldrb	r3, [r3, #0]
 80101a4:	015a      	lsls	r2, r3, #5
 80101a6:	693b      	ldr	r3, [r7, #16]
 80101a8:	4413      	add	r3, r2
 80101aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80101b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80101b8:	d0e7      	beq.n	801018a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80101ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80101bc:	4618      	mov	r0, r3
 80101be:	371c      	adds	r7, #28
 80101c0:	46bd      	mov	sp, r7
 80101c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c6:	4770      	bx	lr

080101c8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80101c8:	b480      	push	{r7}
 80101ca:	b089      	sub	sp, #36	@ 0x24
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	60f8      	str	r0, [r7, #12]
 80101d0:	60b9      	str	r1, [r7, #8]
 80101d2:	4611      	mov	r1, r2
 80101d4:	461a      	mov	r2, r3
 80101d6:	460b      	mov	r3, r1
 80101d8:	71fb      	strb	r3, [r7, #7]
 80101da:	4613      	mov	r3, r2
 80101dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80101e2:	68bb      	ldr	r3, [r7, #8]
 80101e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80101e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d123      	bne.n	8010236 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80101ee:	88bb      	ldrh	r3, [r7, #4]
 80101f0:	3303      	adds	r3, #3
 80101f2:	089b      	lsrs	r3, r3, #2
 80101f4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80101f6:	2300      	movs	r3, #0
 80101f8:	61bb      	str	r3, [r7, #24]
 80101fa:	e018      	b.n	801022e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80101fc:	79fb      	ldrb	r3, [r7, #7]
 80101fe:	031a      	lsls	r2, r3, #12
 8010200:	697b      	ldr	r3, [r7, #20]
 8010202:	4413      	add	r3, r2
 8010204:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010208:	461a      	mov	r2, r3
 801020a:	69fb      	ldr	r3, [r7, #28]
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8010210:	69fb      	ldr	r3, [r7, #28]
 8010212:	3301      	adds	r3, #1
 8010214:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010216:	69fb      	ldr	r3, [r7, #28]
 8010218:	3301      	adds	r3, #1
 801021a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801021c:	69fb      	ldr	r3, [r7, #28]
 801021e:	3301      	adds	r3, #1
 8010220:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010222:	69fb      	ldr	r3, [r7, #28]
 8010224:	3301      	adds	r3, #1
 8010226:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010228:	69bb      	ldr	r3, [r7, #24]
 801022a:	3301      	adds	r3, #1
 801022c:	61bb      	str	r3, [r7, #24]
 801022e:	69ba      	ldr	r2, [r7, #24]
 8010230:	693b      	ldr	r3, [r7, #16]
 8010232:	429a      	cmp	r2, r3
 8010234:	d3e2      	bcc.n	80101fc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010236:	2300      	movs	r3, #0
}
 8010238:	4618      	mov	r0, r3
 801023a:	3724      	adds	r7, #36	@ 0x24
 801023c:	46bd      	mov	sp, r7
 801023e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010242:	4770      	bx	lr

08010244 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010244:	b480      	push	{r7}
 8010246:	b08b      	sub	sp, #44	@ 0x2c
 8010248:	af00      	add	r7, sp, #0
 801024a:	60f8      	str	r0, [r7, #12]
 801024c:	60b9      	str	r1, [r7, #8]
 801024e:	4613      	mov	r3, r2
 8010250:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8010256:	68bb      	ldr	r3, [r7, #8]
 8010258:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801025a:	88fb      	ldrh	r3, [r7, #6]
 801025c:	089b      	lsrs	r3, r3, #2
 801025e:	b29b      	uxth	r3, r3
 8010260:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8010262:	88fb      	ldrh	r3, [r7, #6]
 8010264:	f003 0303 	and.w	r3, r3, #3
 8010268:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801026a:	2300      	movs	r3, #0
 801026c:	623b      	str	r3, [r7, #32]
 801026e:	e014      	b.n	801029a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010270:	69bb      	ldr	r3, [r7, #24]
 8010272:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8010276:	681a      	ldr	r2, [r3, #0]
 8010278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801027a:	601a      	str	r2, [r3, #0]
    pDest++;
 801027c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801027e:	3301      	adds	r3, #1
 8010280:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010284:	3301      	adds	r3, #1
 8010286:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801028a:	3301      	adds	r3, #1
 801028c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801028e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010290:	3301      	adds	r3, #1
 8010292:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8010294:	6a3b      	ldr	r3, [r7, #32]
 8010296:	3301      	adds	r3, #1
 8010298:	623b      	str	r3, [r7, #32]
 801029a:	6a3a      	ldr	r2, [r7, #32]
 801029c:	697b      	ldr	r3, [r7, #20]
 801029e:	429a      	cmp	r2, r3
 80102a0:	d3e6      	bcc.n	8010270 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80102a2:	8bfb      	ldrh	r3, [r7, #30]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d01e      	beq.n	80102e6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80102a8:	2300      	movs	r3, #0
 80102aa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80102ac:	69bb      	ldr	r3, [r7, #24]
 80102ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80102b2:	461a      	mov	r2, r3
 80102b4:	f107 0310 	add.w	r3, r7, #16
 80102b8:	6812      	ldr	r2, [r2, #0]
 80102ba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80102bc:	693a      	ldr	r2, [r7, #16]
 80102be:	6a3b      	ldr	r3, [r7, #32]
 80102c0:	b2db      	uxtb	r3, r3
 80102c2:	00db      	lsls	r3, r3, #3
 80102c4:	fa22 f303 	lsr.w	r3, r2, r3
 80102c8:	b2da      	uxtb	r2, r3
 80102ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102cc:	701a      	strb	r2, [r3, #0]
      i++;
 80102ce:	6a3b      	ldr	r3, [r7, #32]
 80102d0:	3301      	adds	r3, #1
 80102d2:	623b      	str	r3, [r7, #32]
      pDest++;
 80102d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102d6:	3301      	adds	r3, #1
 80102d8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80102da:	8bfb      	ldrh	r3, [r7, #30]
 80102dc:	3b01      	subs	r3, #1
 80102de:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80102e0:	8bfb      	ldrh	r3, [r7, #30]
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d1ea      	bne.n	80102bc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80102e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80102e8:	4618      	mov	r0, r3
 80102ea:	372c      	adds	r7, #44	@ 0x2c
 80102ec:	46bd      	mov	sp, r7
 80102ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f2:	4770      	bx	lr

080102f4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80102f4:	b480      	push	{r7}
 80102f6:	b085      	sub	sp, #20
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
 80102fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010302:	683b      	ldr	r3, [r7, #0]
 8010304:	781b      	ldrb	r3, [r3, #0]
 8010306:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010308:	683b      	ldr	r3, [r7, #0]
 801030a:	785b      	ldrb	r3, [r3, #1]
 801030c:	2b01      	cmp	r3, #1
 801030e:	d12c      	bne.n	801036a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010310:	68bb      	ldr	r3, [r7, #8]
 8010312:	015a      	lsls	r2, r3, #5
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	4413      	add	r3, r2
 8010318:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	2b00      	cmp	r3, #0
 8010320:	db12      	blt.n	8010348 <USB_EPSetStall+0x54>
 8010322:	68bb      	ldr	r3, [r7, #8]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d00f      	beq.n	8010348 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010328:	68bb      	ldr	r3, [r7, #8]
 801032a:	015a      	lsls	r2, r3, #5
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	4413      	add	r3, r2
 8010330:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	68ba      	ldr	r2, [r7, #8]
 8010338:	0151      	lsls	r1, r2, #5
 801033a:	68fa      	ldr	r2, [r7, #12]
 801033c:	440a      	add	r2, r1
 801033e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010342:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8010346:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010348:	68bb      	ldr	r3, [r7, #8]
 801034a:	015a      	lsls	r2, r3, #5
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	4413      	add	r3, r2
 8010350:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	68ba      	ldr	r2, [r7, #8]
 8010358:	0151      	lsls	r1, r2, #5
 801035a:	68fa      	ldr	r2, [r7, #12]
 801035c:	440a      	add	r2, r1
 801035e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010362:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8010366:	6013      	str	r3, [r2, #0]
 8010368:	e02b      	b.n	80103c2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801036a:	68bb      	ldr	r3, [r7, #8]
 801036c:	015a      	lsls	r2, r3, #5
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	4413      	add	r3, r2
 8010372:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	2b00      	cmp	r3, #0
 801037a:	db12      	blt.n	80103a2 <USB_EPSetStall+0xae>
 801037c:	68bb      	ldr	r3, [r7, #8]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d00f      	beq.n	80103a2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010382:	68bb      	ldr	r3, [r7, #8]
 8010384:	015a      	lsls	r2, r3, #5
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	4413      	add	r3, r2
 801038a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	68ba      	ldr	r2, [r7, #8]
 8010392:	0151      	lsls	r1, r2, #5
 8010394:	68fa      	ldr	r2, [r7, #12]
 8010396:	440a      	add	r2, r1
 8010398:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801039c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80103a0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80103a2:	68bb      	ldr	r3, [r7, #8]
 80103a4:	015a      	lsls	r2, r3, #5
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	4413      	add	r3, r2
 80103aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	68ba      	ldr	r2, [r7, #8]
 80103b2:	0151      	lsls	r1, r2, #5
 80103b4:	68fa      	ldr	r2, [r7, #12]
 80103b6:	440a      	add	r2, r1
 80103b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80103bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80103c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80103c2:	2300      	movs	r3, #0
}
 80103c4:	4618      	mov	r0, r3
 80103c6:	3714      	adds	r7, #20
 80103c8:	46bd      	mov	sp, r7
 80103ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103ce:	4770      	bx	lr

080103d0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80103d0:	b480      	push	{r7}
 80103d2:	b085      	sub	sp, #20
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	6078      	str	r0, [r7, #4]
 80103d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80103de:	683b      	ldr	r3, [r7, #0]
 80103e0:	781b      	ldrb	r3, [r3, #0]
 80103e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80103e4:	683b      	ldr	r3, [r7, #0]
 80103e6:	785b      	ldrb	r3, [r3, #1]
 80103e8:	2b01      	cmp	r3, #1
 80103ea:	d128      	bne.n	801043e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80103ec:	68bb      	ldr	r3, [r7, #8]
 80103ee:	015a      	lsls	r2, r3, #5
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	4413      	add	r3, r2
 80103f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	68ba      	ldr	r2, [r7, #8]
 80103fc:	0151      	lsls	r1, r2, #5
 80103fe:	68fa      	ldr	r2, [r7, #12]
 8010400:	440a      	add	r2, r1
 8010402:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010406:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801040a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801040c:	683b      	ldr	r3, [r7, #0]
 801040e:	791b      	ldrb	r3, [r3, #4]
 8010410:	2b03      	cmp	r3, #3
 8010412:	d003      	beq.n	801041c <USB_EPClearStall+0x4c>
 8010414:	683b      	ldr	r3, [r7, #0]
 8010416:	791b      	ldrb	r3, [r3, #4]
 8010418:	2b02      	cmp	r3, #2
 801041a:	d138      	bne.n	801048e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801041c:	68bb      	ldr	r3, [r7, #8]
 801041e:	015a      	lsls	r2, r3, #5
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	4413      	add	r3, r2
 8010424:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	68ba      	ldr	r2, [r7, #8]
 801042c:	0151      	lsls	r1, r2, #5
 801042e:	68fa      	ldr	r2, [r7, #12]
 8010430:	440a      	add	r2, r1
 8010432:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010436:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801043a:	6013      	str	r3, [r2, #0]
 801043c:	e027      	b.n	801048e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801043e:	68bb      	ldr	r3, [r7, #8]
 8010440:	015a      	lsls	r2, r3, #5
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	4413      	add	r3, r2
 8010446:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	68ba      	ldr	r2, [r7, #8]
 801044e:	0151      	lsls	r1, r2, #5
 8010450:	68fa      	ldr	r2, [r7, #12]
 8010452:	440a      	add	r2, r1
 8010454:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010458:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801045c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801045e:	683b      	ldr	r3, [r7, #0]
 8010460:	791b      	ldrb	r3, [r3, #4]
 8010462:	2b03      	cmp	r3, #3
 8010464:	d003      	beq.n	801046e <USB_EPClearStall+0x9e>
 8010466:	683b      	ldr	r3, [r7, #0]
 8010468:	791b      	ldrb	r3, [r3, #4]
 801046a:	2b02      	cmp	r3, #2
 801046c:	d10f      	bne.n	801048e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801046e:	68bb      	ldr	r3, [r7, #8]
 8010470:	015a      	lsls	r2, r3, #5
 8010472:	68fb      	ldr	r3, [r7, #12]
 8010474:	4413      	add	r3, r2
 8010476:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	68ba      	ldr	r2, [r7, #8]
 801047e:	0151      	lsls	r1, r2, #5
 8010480:	68fa      	ldr	r2, [r7, #12]
 8010482:	440a      	add	r2, r1
 8010484:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010488:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801048c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801048e:	2300      	movs	r3, #0
}
 8010490:	4618      	mov	r0, r3
 8010492:	3714      	adds	r7, #20
 8010494:	46bd      	mov	sp, r7
 8010496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801049a:	4770      	bx	lr

0801049c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801049c:	b480      	push	{r7}
 801049e:	b085      	sub	sp, #20
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
 80104a4:	460b      	mov	r3, r1
 80104a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	68fa      	ldr	r2, [r7, #12]
 80104b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80104ba:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80104be:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80104c6:	681a      	ldr	r2, [r3, #0]
 80104c8:	78fb      	ldrb	r3, [r7, #3]
 80104ca:	011b      	lsls	r3, r3, #4
 80104cc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80104d0:	68f9      	ldr	r1, [r7, #12]
 80104d2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80104d6:	4313      	orrs	r3, r2
 80104d8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80104da:	2300      	movs	r3, #0
}
 80104dc:	4618      	mov	r0, r3
 80104de:	3714      	adds	r7, #20
 80104e0:	46bd      	mov	sp, r7
 80104e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e6:	4770      	bx	lr

080104e8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80104e8:	b480      	push	{r7}
 80104ea:	b085      	sub	sp, #20
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80104f4:	68fb      	ldr	r3, [r7, #12]
 80104f6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	68fa      	ldr	r2, [r7, #12]
 80104fe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8010502:	f023 0303 	bic.w	r3, r3, #3
 8010506:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801050e:	685b      	ldr	r3, [r3, #4]
 8010510:	68fa      	ldr	r2, [r7, #12]
 8010512:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010516:	f023 0302 	bic.w	r3, r3, #2
 801051a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801051c:	2300      	movs	r3, #0
}
 801051e:	4618      	mov	r0, r3
 8010520:	3714      	adds	r7, #20
 8010522:	46bd      	mov	sp, r7
 8010524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010528:	4770      	bx	lr

0801052a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801052a:	b480      	push	{r7}
 801052c:	b085      	sub	sp, #20
 801052e:	af00      	add	r7, sp, #0
 8010530:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	68fa      	ldr	r2, [r7, #12]
 8010540:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8010544:	f023 0303 	bic.w	r3, r3, #3
 8010548:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010550:	685b      	ldr	r3, [r3, #4]
 8010552:	68fa      	ldr	r2, [r7, #12]
 8010554:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010558:	f043 0302 	orr.w	r3, r3, #2
 801055c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801055e:	2300      	movs	r3, #0
}
 8010560:	4618      	mov	r0, r3
 8010562:	3714      	adds	r7, #20
 8010564:	46bd      	mov	sp, r7
 8010566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056a:	4770      	bx	lr

0801056c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 801056c:	b480      	push	{r7}
 801056e:	b085      	sub	sp, #20
 8010570:	af00      	add	r7, sp, #0
 8010572:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	695b      	ldr	r3, [r3, #20]
 8010578:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	699b      	ldr	r3, [r3, #24]
 801057e:	68fa      	ldr	r2, [r7, #12]
 8010580:	4013      	ands	r3, r2
 8010582:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010584:	68fb      	ldr	r3, [r7, #12]
}
 8010586:	4618      	mov	r0, r3
 8010588:	3714      	adds	r7, #20
 801058a:	46bd      	mov	sp, r7
 801058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010590:	4770      	bx	lr

08010592 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8010592:	b480      	push	{r7}
 8010594:	b085      	sub	sp, #20
 8010596:	af00      	add	r7, sp, #0
 8010598:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80105a4:	699b      	ldr	r3, [r3, #24]
 80105a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80105ae:	69db      	ldr	r3, [r3, #28]
 80105b0:	68ba      	ldr	r2, [r7, #8]
 80105b2:	4013      	ands	r3, r2
 80105b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80105b6:	68bb      	ldr	r3, [r7, #8]
 80105b8:	0c1b      	lsrs	r3, r3, #16
}
 80105ba:	4618      	mov	r0, r3
 80105bc:	3714      	adds	r7, #20
 80105be:	46bd      	mov	sp, r7
 80105c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105c4:	4770      	bx	lr

080105c6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80105c6:	b480      	push	{r7}
 80105c8:	b085      	sub	sp, #20
 80105ca:	af00      	add	r7, sp, #0
 80105cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80105d8:	699b      	ldr	r3, [r3, #24]
 80105da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80105e2:	69db      	ldr	r3, [r3, #28]
 80105e4:	68ba      	ldr	r2, [r7, #8]
 80105e6:	4013      	ands	r3, r2
 80105e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80105ea:	68bb      	ldr	r3, [r7, #8]
 80105ec:	b29b      	uxth	r3, r3
}
 80105ee:	4618      	mov	r0, r3
 80105f0:	3714      	adds	r7, #20
 80105f2:	46bd      	mov	sp, r7
 80105f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f8:	4770      	bx	lr

080105fa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80105fa:	b480      	push	{r7}
 80105fc:	b085      	sub	sp, #20
 80105fe:	af00      	add	r7, sp, #0
 8010600:	6078      	str	r0, [r7, #4]
 8010602:	460b      	mov	r3, r1
 8010604:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801060a:	78fb      	ldrb	r3, [r7, #3]
 801060c:	015a      	lsls	r2, r3, #5
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	4413      	add	r3, r2
 8010612:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010616:	689b      	ldr	r3, [r3, #8]
 8010618:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010620:	695b      	ldr	r3, [r3, #20]
 8010622:	68ba      	ldr	r2, [r7, #8]
 8010624:	4013      	ands	r3, r2
 8010626:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010628:	68bb      	ldr	r3, [r7, #8]
}
 801062a:	4618      	mov	r0, r3
 801062c:	3714      	adds	r7, #20
 801062e:	46bd      	mov	sp, r7
 8010630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010634:	4770      	bx	lr

08010636 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010636:	b480      	push	{r7}
 8010638:	b087      	sub	sp, #28
 801063a:	af00      	add	r7, sp, #0
 801063c:	6078      	str	r0, [r7, #4]
 801063e:	460b      	mov	r3, r1
 8010640:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010646:	697b      	ldr	r3, [r7, #20]
 8010648:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801064c:	691b      	ldr	r3, [r3, #16]
 801064e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010650:	697b      	ldr	r3, [r7, #20]
 8010652:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010658:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801065a:	78fb      	ldrb	r3, [r7, #3]
 801065c:	f003 030f 	and.w	r3, r3, #15
 8010660:	68fa      	ldr	r2, [r7, #12]
 8010662:	fa22 f303 	lsr.w	r3, r2, r3
 8010666:	01db      	lsls	r3, r3, #7
 8010668:	b2db      	uxtb	r3, r3
 801066a:	693a      	ldr	r2, [r7, #16]
 801066c:	4313      	orrs	r3, r2
 801066e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010670:	78fb      	ldrb	r3, [r7, #3]
 8010672:	015a      	lsls	r2, r3, #5
 8010674:	697b      	ldr	r3, [r7, #20]
 8010676:	4413      	add	r3, r2
 8010678:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801067c:	689b      	ldr	r3, [r3, #8]
 801067e:	693a      	ldr	r2, [r7, #16]
 8010680:	4013      	ands	r3, r2
 8010682:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010684:	68bb      	ldr	r3, [r7, #8]
}
 8010686:	4618      	mov	r0, r3
 8010688:	371c      	adds	r7, #28
 801068a:	46bd      	mov	sp, r7
 801068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010690:	4770      	bx	lr

08010692 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8010692:	b480      	push	{r7}
 8010694:	b083      	sub	sp, #12
 8010696:	af00      	add	r7, sp, #0
 8010698:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	695b      	ldr	r3, [r3, #20]
 801069e:	f003 0301 	and.w	r3, r3, #1
}
 80106a2:	4618      	mov	r0, r3
 80106a4:	370c      	adds	r7, #12
 80106a6:	46bd      	mov	sp, r7
 80106a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ac:	4770      	bx	lr
	...

080106b0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80106b0:	b480      	push	{r7}
 80106b2:	b085      	sub	sp, #20
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80106c2:	681a      	ldr	r2, [r3, #0]
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80106ca:	4619      	mov	r1, r3
 80106cc:	4b09      	ldr	r3, [pc, #36]	@ (80106f4 <USB_ActivateSetup+0x44>)
 80106ce:	4013      	ands	r3, r2
 80106d0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80106d8:	685b      	ldr	r3, [r3, #4]
 80106da:	68fa      	ldr	r2, [r7, #12]
 80106dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80106e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80106e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80106e6:	2300      	movs	r3, #0
}
 80106e8:	4618      	mov	r0, r3
 80106ea:	3714      	adds	r7, #20
 80106ec:	46bd      	mov	sp, r7
 80106ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f2:	4770      	bx	lr
 80106f4:	fffff800 	.word	0xfffff800

080106f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80106f8:	b480      	push	{r7}
 80106fa:	b087      	sub	sp, #28
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	60f8      	str	r0, [r7, #12]
 8010700:	460b      	mov	r3, r1
 8010702:	607a      	str	r2, [r7, #4]
 8010704:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 801070a:	68fb      	ldr	r3, [r7, #12]
 801070c:	333c      	adds	r3, #60	@ 0x3c
 801070e:	3304      	adds	r3, #4
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010714:	693b      	ldr	r3, [r7, #16]
 8010716:	4a26      	ldr	r2, [pc, #152]	@ (80107b0 <USB_EP0_OutStart+0xb8>)
 8010718:	4293      	cmp	r3, r2
 801071a:	d90a      	bls.n	8010732 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801071c:	697b      	ldr	r3, [r7, #20]
 801071e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010728:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801072c:	d101      	bne.n	8010732 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801072e:	2300      	movs	r3, #0
 8010730:	e037      	b.n	80107a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010732:	697b      	ldr	r3, [r7, #20]
 8010734:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010738:	461a      	mov	r2, r3
 801073a:	2300      	movs	r3, #0
 801073c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801073e:	697b      	ldr	r3, [r7, #20]
 8010740:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010744:	691b      	ldr	r3, [r3, #16]
 8010746:	697a      	ldr	r2, [r7, #20]
 8010748:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801074c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010750:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010752:	697b      	ldr	r3, [r7, #20]
 8010754:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010758:	691b      	ldr	r3, [r3, #16]
 801075a:	697a      	ldr	r2, [r7, #20]
 801075c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010760:	f043 0318 	orr.w	r3, r3, #24
 8010764:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010766:	697b      	ldr	r3, [r7, #20]
 8010768:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801076c:	691b      	ldr	r3, [r3, #16]
 801076e:	697a      	ldr	r2, [r7, #20]
 8010770:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010774:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8010778:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801077a:	7afb      	ldrb	r3, [r7, #11]
 801077c:	2b01      	cmp	r3, #1
 801077e:	d10f      	bne.n	80107a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010780:	697b      	ldr	r3, [r7, #20]
 8010782:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010786:	461a      	mov	r2, r3
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801078c:	697b      	ldr	r3, [r7, #20]
 801078e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	697a      	ldr	r2, [r7, #20]
 8010796:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801079a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 801079e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80107a0:	2300      	movs	r3, #0
}
 80107a2:	4618      	mov	r0, r3
 80107a4:	371c      	adds	r7, #28
 80107a6:	46bd      	mov	sp, r7
 80107a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ac:	4770      	bx	lr
 80107ae:	bf00      	nop
 80107b0:	4f54300a 	.word	0x4f54300a

080107b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80107b4:	b480      	push	{r7}
 80107b6:	b085      	sub	sp, #20
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80107bc:	2300      	movs	r3, #0
 80107be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	3301      	adds	r3, #1
 80107c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80107cc:	d901      	bls.n	80107d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80107ce:	2303      	movs	r3, #3
 80107d0:	e01b      	b.n	801080a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	691b      	ldr	r3, [r3, #16]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	daf2      	bge.n	80107c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80107da:	2300      	movs	r3, #0
 80107dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	691b      	ldr	r3, [r3, #16]
 80107e2:	f043 0201 	orr.w	r2, r3, #1
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	3301      	adds	r3, #1
 80107ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80107f6:	d901      	bls.n	80107fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80107f8:	2303      	movs	r3, #3
 80107fa:	e006      	b.n	801080a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	691b      	ldr	r3, [r3, #16]
 8010800:	f003 0301 	and.w	r3, r3, #1
 8010804:	2b01      	cmp	r3, #1
 8010806:	d0f0      	beq.n	80107ea <USB_CoreReset+0x36>

  return HAL_OK;
 8010808:	2300      	movs	r3, #0
}
 801080a:	4618      	mov	r0, r3
 801080c:	3714      	adds	r7, #20
 801080e:	46bd      	mov	sp, r7
 8010810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010814:	4770      	bx	lr
	...

08010818 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010818:	b580      	push	{r7, lr}
 801081a:	b084      	sub	sp, #16
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
 8010820:	460b      	mov	r3, r1
 8010822:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010824:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8010828:	f002 fcc6 	bl	80131b8 <USBD_static_malloc>
 801082c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	2b00      	cmp	r3, #0
 8010832:	d109      	bne.n	8010848 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	32b0      	adds	r2, #176	@ 0xb0
 801083e:	2100      	movs	r1, #0
 8010840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8010844:	2302      	movs	r3, #2
 8010846:	e0d4      	b.n	80109f2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8010848:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 801084c:	2100      	movs	r1, #0
 801084e:	68f8      	ldr	r0, [r7, #12]
 8010850:	f002 fde2 	bl	8013418 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	32b0      	adds	r2, #176	@ 0xb0
 801085e:	68f9      	ldr	r1, [r7, #12]
 8010860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	32b0      	adds	r2, #176	@ 0xb0
 801086e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	7c1b      	ldrb	r3, [r3, #16]
 801087c:	2b00      	cmp	r3, #0
 801087e:	d138      	bne.n	80108f2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8010880:	4b5e      	ldr	r3, [pc, #376]	@ (80109fc <USBD_CDC_Init+0x1e4>)
 8010882:	7819      	ldrb	r1, [r3, #0]
 8010884:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010888:	2202      	movs	r2, #2
 801088a:	6878      	ldr	r0, [r7, #4]
 801088c:	f002 fb71 	bl	8012f72 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010890:	4b5a      	ldr	r3, [pc, #360]	@ (80109fc <USBD_CDC_Init+0x1e4>)
 8010892:	781b      	ldrb	r3, [r3, #0]
 8010894:	f003 020f 	and.w	r2, r3, #15
 8010898:	6879      	ldr	r1, [r7, #4]
 801089a:	4613      	mov	r3, r2
 801089c:	009b      	lsls	r3, r3, #2
 801089e:	4413      	add	r3, r2
 80108a0:	009b      	lsls	r3, r3, #2
 80108a2:	440b      	add	r3, r1
 80108a4:	3324      	adds	r3, #36	@ 0x24
 80108a6:	2201      	movs	r2, #1
 80108a8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80108aa:	4b55      	ldr	r3, [pc, #340]	@ (8010a00 <USBD_CDC_Init+0x1e8>)
 80108ac:	7819      	ldrb	r1, [r3, #0]
 80108ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80108b2:	2202      	movs	r2, #2
 80108b4:	6878      	ldr	r0, [r7, #4]
 80108b6:	f002 fb5c 	bl	8012f72 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80108ba:	4b51      	ldr	r3, [pc, #324]	@ (8010a00 <USBD_CDC_Init+0x1e8>)
 80108bc:	781b      	ldrb	r3, [r3, #0]
 80108be:	f003 020f 	and.w	r2, r3, #15
 80108c2:	6879      	ldr	r1, [r7, #4]
 80108c4:	4613      	mov	r3, r2
 80108c6:	009b      	lsls	r3, r3, #2
 80108c8:	4413      	add	r3, r2
 80108ca:	009b      	lsls	r3, r3, #2
 80108cc:	440b      	add	r3, r1
 80108ce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80108d2:	2201      	movs	r2, #1
 80108d4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80108d6:	4b4b      	ldr	r3, [pc, #300]	@ (8010a04 <USBD_CDC_Init+0x1ec>)
 80108d8:	781b      	ldrb	r3, [r3, #0]
 80108da:	f003 020f 	and.w	r2, r3, #15
 80108de:	6879      	ldr	r1, [r7, #4]
 80108e0:	4613      	mov	r3, r2
 80108e2:	009b      	lsls	r3, r3, #2
 80108e4:	4413      	add	r3, r2
 80108e6:	009b      	lsls	r3, r3, #2
 80108e8:	440b      	add	r3, r1
 80108ea:	3326      	adds	r3, #38	@ 0x26
 80108ec:	2210      	movs	r2, #16
 80108ee:	801a      	strh	r2, [r3, #0]
 80108f0:	e035      	b.n	801095e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80108f2:	4b42      	ldr	r3, [pc, #264]	@ (80109fc <USBD_CDC_Init+0x1e4>)
 80108f4:	7819      	ldrb	r1, [r3, #0]
 80108f6:	2340      	movs	r3, #64	@ 0x40
 80108f8:	2202      	movs	r2, #2
 80108fa:	6878      	ldr	r0, [r7, #4]
 80108fc:	f002 fb39 	bl	8012f72 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010900:	4b3e      	ldr	r3, [pc, #248]	@ (80109fc <USBD_CDC_Init+0x1e4>)
 8010902:	781b      	ldrb	r3, [r3, #0]
 8010904:	f003 020f 	and.w	r2, r3, #15
 8010908:	6879      	ldr	r1, [r7, #4]
 801090a:	4613      	mov	r3, r2
 801090c:	009b      	lsls	r3, r3, #2
 801090e:	4413      	add	r3, r2
 8010910:	009b      	lsls	r3, r3, #2
 8010912:	440b      	add	r3, r1
 8010914:	3324      	adds	r3, #36	@ 0x24
 8010916:	2201      	movs	r2, #1
 8010918:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801091a:	4b39      	ldr	r3, [pc, #228]	@ (8010a00 <USBD_CDC_Init+0x1e8>)
 801091c:	7819      	ldrb	r1, [r3, #0]
 801091e:	2340      	movs	r3, #64	@ 0x40
 8010920:	2202      	movs	r2, #2
 8010922:	6878      	ldr	r0, [r7, #4]
 8010924:	f002 fb25 	bl	8012f72 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8010928:	4b35      	ldr	r3, [pc, #212]	@ (8010a00 <USBD_CDC_Init+0x1e8>)
 801092a:	781b      	ldrb	r3, [r3, #0]
 801092c:	f003 020f 	and.w	r2, r3, #15
 8010930:	6879      	ldr	r1, [r7, #4]
 8010932:	4613      	mov	r3, r2
 8010934:	009b      	lsls	r3, r3, #2
 8010936:	4413      	add	r3, r2
 8010938:	009b      	lsls	r3, r3, #2
 801093a:	440b      	add	r3, r1
 801093c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010940:	2201      	movs	r2, #1
 8010942:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010944:	4b2f      	ldr	r3, [pc, #188]	@ (8010a04 <USBD_CDC_Init+0x1ec>)
 8010946:	781b      	ldrb	r3, [r3, #0]
 8010948:	f003 020f 	and.w	r2, r3, #15
 801094c:	6879      	ldr	r1, [r7, #4]
 801094e:	4613      	mov	r3, r2
 8010950:	009b      	lsls	r3, r3, #2
 8010952:	4413      	add	r3, r2
 8010954:	009b      	lsls	r3, r3, #2
 8010956:	440b      	add	r3, r1
 8010958:	3326      	adds	r3, #38	@ 0x26
 801095a:	2210      	movs	r2, #16
 801095c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801095e:	4b29      	ldr	r3, [pc, #164]	@ (8010a04 <USBD_CDC_Init+0x1ec>)
 8010960:	7819      	ldrb	r1, [r3, #0]
 8010962:	2308      	movs	r3, #8
 8010964:	2203      	movs	r2, #3
 8010966:	6878      	ldr	r0, [r7, #4]
 8010968:	f002 fb03 	bl	8012f72 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 801096c:	4b25      	ldr	r3, [pc, #148]	@ (8010a04 <USBD_CDC_Init+0x1ec>)
 801096e:	781b      	ldrb	r3, [r3, #0]
 8010970:	f003 020f 	and.w	r2, r3, #15
 8010974:	6879      	ldr	r1, [r7, #4]
 8010976:	4613      	mov	r3, r2
 8010978:	009b      	lsls	r3, r3, #2
 801097a:	4413      	add	r3, r2
 801097c:	009b      	lsls	r3, r3, #2
 801097e:	440b      	add	r3, r1
 8010980:	3324      	adds	r3, #36	@ 0x24
 8010982:	2201      	movs	r2, #1
 8010984:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	2200      	movs	r2, #0
 801098a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010994:	687a      	ldr	r2, [r7, #4]
 8010996:	33b0      	adds	r3, #176	@ 0xb0
 8010998:	009b      	lsls	r3, r3, #2
 801099a:	4413      	add	r3, r2
 801099c:	685b      	ldr	r3, [r3, #4]
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	2200      	movs	r2, #0
 80109a6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	2200      	movs	r2, #0
 80109ae:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80109b8:	2b00      	cmp	r3, #0
 80109ba:	d101      	bne.n	80109c0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80109bc:	2302      	movs	r3, #2
 80109be:	e018      	b.n	80109f2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	7c1b      	ldrb	r3, [r3, #16]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d10a      	bne.n	80109de <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80109c8:	4b0d      	ldr	r3, [pc, #52]	@ (8010a00 <USBD_CDC_Init+0x1e8>)
 80109ca:	7819      	ldrb	r1, [r3, #0]
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80109d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80109d6:	6878      	ldr	r0, [r7, #4]
 80109d8:	f002 fbba 	bl	8013150 <USBD_LL_PrepareReceive>
 80109dc:	e008      	b.n	80109f0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80109de:	4b08      	ldr	r3, [pc, #32]	@ (8010a00 <USBD_CDC_Init+0x1e8>)
 80109e0:	7819      	ldrb	r1, [r3, #0]
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80109e8:	2340      	movs	r3, #64	@ 0x40
 80109ea:	6878      	ldr	r0, [r7, #4]
 80109ec:	f002 fbb0 	bl	8013150 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80109f0:	2300      	movs	r3, #0
}
 80109f2:	4618      	mov	r0, r3
 80109f4:	3710      	adds	r7, #16
 80109f6:	46bd      	mov	sp, r7
 80109f8:	bd80      	pop	{r7, pc}
 80109fa:	bf00      	nop
 80109fc:	2400009b 	.word	0x2400009b
 8010a00:	2400009c 	.word	0x2400009c
 8010a04:	2400009d 	.word	0x2400009d

08010a08 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010a08:	b580      	push	{r7, lr}
 8010a0a:	b082      	sub	sp, #8
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	6078      	str	r0, [r7, #4]
 8010a10:	460b      	mov	r3, r1
 8010a12:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8010a14:	4b3a      	ldr	r3, [pc, #232]	@ (8010b00 <USBD_CDC_DeInit+0xf8>)
 8010a16:	781b      	ldrb	r3, [r3, #0]
 8010a18:	4619      	mov	r1, r3
 8010a1a:	6878      	ldr	r0, [r7, #4]
 8010a1c:	f002 facf 	bl	8012fbe <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8010a20:	4b37      	ldr	r3, [pc, #220]	@ (8010b00 <USBD_CDC_DeInit+0xf8>)
 8010a22:	781b      	ldrb	r3, [r3, #0]
 8010a24:	f003 020f 	and.w	r2, r3, #15
 8010a28:	6879      	ldr	r1, [r7, #4]
 8010a2a:	4613      	mov	r3, r2
 8010a2c:	009b      	lsls	r3, r3, #2
 8010a2e:	4413      	add	r3, r2
 8010a30:	009b      	lsls	r3, r3, #2
 8010a32:	440b      	add	r3, r1
 8010a34:	3324      	adds	r3, #36	@ 0x24
 8010a36:	2200      	movs	r2, #0
 8010a38:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8010a3a:	4b32      	ldr	r3, [pc, #200]	@ (8010b04 <USBD_CDC_DeInit+0xfc>)
 8010a3c:	781b      	ldrb	r3, [r3, #0]
 8010a3e:	4619      	mov	r1, r3
 8010a40:	6878      	ldr	r0, [r7, #4]
 8010a42:	f002 fabc 	bl	8012fbe <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8010a46:	4b2f      	ldr	r3, [pc, #188]	@ (8010b04 <USBD_CDC_DeInit+0xfc>)
 8010a48:	781b      	ldrb	r3, [r3, #0]
 8010a4a:	f003 020f 	and.w	r2, r3, #15
 8010a4e:	6879      	ldr	r1, [r7, #4]
 8010a50:	4613      	mov	r3, r2
 8010a52:	009b      	lsls	r3, r3, #2
 8010a54:	4413      	add	r3, r2
 8010a56:	009b      	lsls	r3, r3, #2
 8010a58:	440b      	add	r3, r1
 8010a5a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010a5e:	2200      	movs	r2, #0
 8010a60:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8010a62:	4b29      	ldr	r3, [pc, #164]	@ (8010b08 <USBD_CDC_DeInit+0x100>)
 8010a64:	781b      	ldrb	r3, [r3, #0]
 8010a66:	4619      	mov	r1, r3
 8010a68:	6878      	ldr	r0, [r7, #4]
 8010a6a:	f002 faa8 	bl	8012fbe <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8010a6e:	4b26      	ldr	r3, [pc, #152]	@ (8010b08 <USBD_CDC_DeInit+0x100>)
 8010a70:	781b      	ldrb	r3, [r3, #0]
 8010a72:	f003 020f 	and.w	r2, r3, #15
 8010a76:	6879      	ldr	r1, [r7, #4]
 8010a78:	4613      	mov	r3, r2
 8010a7a:	009b      	lsls	r3, r3, #2
 8010a7c:	4413      	add	r3, r2
 8010a7e:	009b      	lsls	r3, r3, #2
 8010a80:	440b      	add	r3, r1
 8010a82:	3324      	adds	r3, #36	@ 0x24
 8010a84:	2200      	movs	r2, #0
 8010a86:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8010a88:	4b1f      	ldr	r3, [pc, #124]	@ (8010b08 <USBD_CDC_DeInit+0x100>)
 8010a8a:	781b      	ldrb	r3, [r3, #0]
 8010a8c:	f003 020f 	and.w	r2, r3, #15
 8010a90:	6879      	ldr	r1, [r7, #4]
 8010a92:	4613      	mov	r3, r2
 8010a94:	009b      	lsls	r3, r3, #2
 8010a96:	4413      	add	r3, r2
 8010a98:	009b      	lsls	r3, r3, #2
 8010a9a:	440b      	add	r3, r1
 8010a9c:	3326      	adds	r3, #38	@ 0x26
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	32b0      	adds	r2, #176	@ 0xb0
 8010aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d01f      	beq.n	8010af4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010aba:	687a      	ldr	r2, [r7, #4]
 8010abc:	33b0      	adds	r3, #176	@ 0xb0
 8010abe:	009b      	lsls	r3, r3, #2
 8010ac0:	4413      	add	r3, r2
 8010ac2:	685b      	ldr	r3, [r3, #4]
 8010ac4:	685b      	ldr	r3, [r3, #4]
 8010ac6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	32b0      	adds	r2, #176	@ 0xb0
 8010ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	f002 fb7c 	bl	80131d4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	32b0      	adds	r2, #176	@ 0xb0
 8010ae6:	2100      	movs	r1, #0
 8010ae8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	2200      	movs	r2, #0
 8010af0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8010af4:	2300      	movs	r3, #0
}
 8010af6:	4618      	mov	r0, r3
 8010af8:	3708      	adds	r7, #8
 8010afa:	46bd      	mov	sp, r7
 8010afc:	bd80      	pop	{r7, pc}
 8010afe:	bf00      	nop
 8010b00:	2400009b 	.word	0x2400009b
 8010b04:	2400009c 	.word	0x2400009c
 8010b08:	2400009d 	.word	0x2400009d

08010b0c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	b086      	sub	sp, #24
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	6078      	str	r0, [r7, #4]
 8010b14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	32b0      	adds	r2, #176	@ 0xb0
 8010b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010b24:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8010b26:	2300      	movs	r3, #0
 8010b28:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8010b2a:	2300      	movs	r3, #0
 8010b2c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8010b2e:	2300      	movs	r3, #0
 8010b30:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8010b32:	693b      	ldr	r3, [r7, #16]
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d101      	bne.n	8010b3c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8010b38:	2303      	movs	r3, #3
 8010b3a:	e0bf      	b.n	8010cbc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010b3c:	683b      	ldr	r3, [r7, #0]
 8010b3e:	781b      	ldrb	r3, [r3, #0]
 8010b40:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010b44:	2b00      	cmp	r3, #0
 8010b46:	d050      	beq.n	8010bea <USBD_CDC_Setup+0xde>
 8010b48:	2b20      	cmp	r3, #32
 8010b4a:	f040 80af 	bne.w	8010cac <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8010b4e:	683b      	ldr	r3, [r7, #0]
 8010b50:	88db      	ldrh	r3, [r3, #6]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d03a      	beq.n	8010bcc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8010b56:	683b      	ldr	r3, [r7, #0]
 8010b58:	781b      	ldrb	r3, [r3, #0]
 8010b5a:	b25b      	sxtb	r3, r3
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	da1b      	bge.n	8010b98 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010b66:	687a      	ldr	r2, [r7, #4]
 8010b68:	33b0      	adds	r3, #176	@ 0xb0
 8010b6a:	009b      	lsls	r3, r3, #2
 8010b6c:	4413      	add	r3, r2
 8010b6e:	685b      	ldr	r3, [r3, #4]
 8010b70:	689b      	ldr	r3, [r3, #8]
 8010b72:	683a      	ldr	r2, [r7, #0]
 8010b74:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8010b76:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010b78:	683a      	ldr	r2, [r7, #0]
 8010b7a:	88d2      	ldrh	r2, [r2, #6]
 8010b7c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8010b7e:	683b      	ldr	r3, [r7, #0]
 8010b80:	88db      	ldrh	r3, [r3, #6]
 8010b82:	2b07      	cmp	r3, #7
 8010b84:	bf28      	it	cs
 8010b86:	2307      	movcs	r3, #7
 8010b88:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8010b8a:	693b      	ldr	r3, [r7, #16]
 8010b8c:	89fa      	ldrh	r2, [r7, #14]
 8010b8e:	4619      	mov	r1, r3
 8010b90:	6878      	ldr	r0, [r7, #4]
 8010b92:	f001 fd7d 	bl	8012690 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8010b96:	e090      	b.n	8010cba <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8010b98:	683b      	ldr	r3, [r7, #0]
 8010b9a:	785a      	ldrb	r2, [r3, #1]
 8010b9c:	693b      	ldr	r3, [r7, #16]
 8010b9e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8010ba2:	683b      	ldr	r3, [r7, #0]
 8010ba4:	88db      	ldrh	r3, [r3, #6]
 8010ba6:	2b3f      	cmp	r3, #63	@ 0x3f
 8010ba8:	d803      	bhi.n	8010bb2 <USBD_CDC_Setup+0xa6>
 8010baa:	683b      	ldr	r3, [r7, #0]
 8010bac:	88db      	ldrh	r3, [r3, #6]
 8010bae:	b2da      	uxtb	r2, r3
 8010bb0:	e000      	b.n	8010bb4 <USBD_CDC_Setup+0xa8>
 8010bb2:	2240      	movs	r2, #64	@ 0x40
 8010bb4:	693b      	ldr	r3, [r7, #16]
 8010bb6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8010bba:	6939      	ldr	r1, [r7, #16]
 8010bbc:	693b      	ldr	r3, [r7, #16]
 8010bbe:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8010bc2:	461a      	mov	r2, r3
 8010bc4:	6878      	ldr	r0, [r7, #4]
 8010bc6:	f001 fd8f 	bl	80126e8 <USBD_CtlPrepareRx>
      break;
 8010bca:	e076      	b.n	8010cba <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010bd2:	687a      	ldr	r2, [r7, #4]
 8010bd4:	33b0      	adds	r3, #176	@ 0xb0
 8010bd6:	009b      	lsls	r3, r3, #2
 8010bd8:	4413      	add	r3, r2
 8010bda:	685b      	ldr	r3, [r3, #4]
 8010bdc:	689b      	ldr	r3, [r3, #8]
 8010bde:	683a      	ldr	r2, [r7, #0]
 8010be0:	7850      	ldrb	r0, [r2, #1]
 8010be2:	2200      	movs	r2, #0
 8010be4:	6839      	ldr	r1, [r7, #0]
 8010be6:	4798      	blx	r3
      break;
 8010be8:	e067      	b.n	8010cba <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010bea:	683b      	ldr	r3, [r7, #0]
 8010bec:	785b      	ldrb	r3, [r3, #1]
 8010bee:	2b0b      	cmp	r3, #11
 8010bf0:	d851      	bhi.n	8010c96 <USBD_CDC_Setup+0x18a>
 8010bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8010bf8 <USBD_CDC_Setup+0xec>)
 8010bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bf8:	08010c29 	.word	0x08010c29
 8010bfc:	08010ca5 	.word	0x08010ca5
 8010c00:	08010c97 	.word	0x08010c97
 8010c04:	08010c97 	.word	0x08010c97
 8010c08:	08010c97 	.word	0x08010c97
 8010c0c:	08010c97 	.word	0x08010c97
 8010c10:	08010c97 	.word	0x08010c97
 8010c14:	08010c97 	.word	0x08010c97
 8010c18:	08010c97 	.word	0x08010c97
 8010c1c:	08010c97 	.word	0x08010c97
 8010c20:	08010c53 	.word	0x08010c53
 8010c24:	08010c7d 	.word	0x08010c7d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010c2e:	b2db      	uxtb	r3, r3
 8010c30:	2b03      	cmp	r3, #3
 8010c32:	d107      	bne.n	8010c44 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010c34:	f107 030a 	add.w	r3, r7, #10
 8010c38:	2202      	movs	r2, #2
 8010c3a:	4619      	mov	r1, r3
 8010c3c:	6878      	ldr	r0, [r7, #4]
 8010c3e:	f001 fd27 	bl	8012690 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010c42:	e032      	b.n	8010caa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010c44:	6839      	ldr	r1, [r7, #0]
 8010c46:	6878      	ldr	r0, [r7, #4]
 8010c48:	f001 fca5 	bl	8012596 <USBD_CtlError>
            ret = USBD_FAIL;
 8010c4c:	2303      	movs	r3, #3
 8010c4e:	75fb      	strb	r3, [r7, #23]
          break;
 8010c50:	e02b      	b.n	8010caa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010c58:	b2db      	uxtb	r3, r3
 8010c5a:	2b03      	cmp	r3, #3
 8010c5c:	d107      	bne.n	8010c6e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010c5e:	f107 030d 	add.w	r3, r7, #13
 8010c62:	2201      	movs	r2, #1
 8010c64:	4619      	mov	r1, r3
 8010c66:	6878      	ldr	r0, [r7, #4]
 8010c68:	f001 fd12 	bl	8012690 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010c6c:	e01d      	b.n	8010caa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010c6e:	6839      	ldr	r1, [r7, #0]
 8010c70:	6878      	ldr	r0, [r7, #4]
 8010c72:	f001 fc90 	bl	8012596 <USBD_CtlError>
            ret = USBD_FAIL;
 8010c76:	2303      	movs	r3, #3
 8010c78:	75fb      	strb	r3, [r7, #23]
          break;
 8010c7a:	e016      	b.n	8010caa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010c82:	b2db      	uxtb	r3, r3
 8010c84:	2b03      	cmp	r3, #3
 8010c86:	d00f      	beq.n	8010ca8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8010c88:	6839      	ldr	r1, [r7, #0]
 8010c8a:	6878      	ldr	r0, [r7, #4]
 8010c8c:	f001 fc83 	bl	8012596 <USBD_CtlError>
            ret = USBD_FAIL;
 8010c90:	2303      	movs	r3, #3
 8010c92:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010c94:	e008      	b.n	8010ca8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8010c96:	6839      	ldr	r1, [r7, #0]
 8010c98:	6878      	ldr	r0, [r7, #4]
 8010c9a:	f001 fc7c 	bl	8012596 <USBD_CtlError>
          ret = USBD_FAIL;
 8010c9e:	2303      	movs	r3, #3
 8010ca0:	75fb      	strb	r3, [r7, #23]
          break;
 8010ca2:	e002      	b.n	8010caa <USBD_CDC_Setup+0x19e>
          break;
 8010ca4:	bf00      	nop
 8010ca6:	e008      	b.n	8010cba <USBD_CDC_Setup+0x1ae>
          break;
 8010ca8:	bf00      	nop
      }
      break;
 8010caa:	e006      	b.n	8010cba <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8010cac:	6839      	ldr	r1, [r7, #0]
 8010cae:	6878      	ldr	r0, [r7, #4]
 8010cb0:	f001 fc71 	bl	8012596 <USBD_CtlError>
      ret = USBD_FAIL;
 8010cb4:	2303      	movs	r3, #3
 8010cb6:	75fb      	strb	r3, [r7, #23]
      break;
 8010cb8:	bf00      	nop
  }

  return (uint8_t)ret;
 8010cba:	7dfb      	ldrb	r3, [r7, #23]
}
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	3718      	adds	r7, #24
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	bd80      	pop	{r7, pc}

08010cc4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b084      	sub	sp, #16
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	6078      	str	r0, [r7, #4]
 8010ccc:	460b      	mov	r3, r1
 8010cce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010cd6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010cde:	687b      	ldr	r3, [r7, #4]
 8010ce0:	32b0      	adds	r2, #176	@ 0xb0
 8010ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d101      	bne.n	8010cee <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8010cea:	2303      	movs	r3, #3
 8010cec:	e065      	b.n	8010dba <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	32b0      	adds	r2, #176	@ 0xb0
 8010cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010cfc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8010cfe:	78fb      	ldrb	r3, [r7, #3]
 8010d00:	f003 020f 	and.w	r2, r3, #15
 8010d04:	6879      	ldr	r1, [r7, #4]
 8010d06:	4613      	mov	r3, r2
 8010d08:	009b      	lsls	r3, r3, #2
 8010d0a:	4413      	add	r3, r2
 8010d0c:	009b      	lsls	r3, r3, #2
 8010d0e:	440b      	add	r3, r1
 8010d10:	3318      	adds	r3, #24
 8010d12:	681b      	ldr	r3, [r3, #0]
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d02f      	beq.n	8010d78 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8010d18:	78fb      	ldrb	r3, [r7, #3]
 8010d1a:	f003 020f 	and.w	r2, r3, #15
 8010d1e:	6879      	ldr	r1, [r7, #4]
 8010d20:	4613      	mov	r3, r2
 8010d22:	009b      	lsls	r3, r3, #2
 8010d24:	4413      	add	r3, r2
 8010d26:	009b      	lsls	r3, r3, #2
 8010d28:	440b      	add	r3, r1
 8010d2a:	3318      	adds	r3, #24
 8010d2c:	681a      	ldr	r2, [r3, #0]
 8010d2e:	78fb      	ldrb	r3, [r7, #3]
 8010d30:	f003 010f 	and.w	r1, r3, #15
 8010d34:	68f8      	ldr	r0, [r7, #12]
 8010d36:	460b      	mov	r3, r1
 8010d38:	00db      	lsls	r3, r3, #3
 8010d3a:	440b      	add	r3, r1
 8010d3c:	009b      	lsls	r3, r3, #2
 8010d3e:	4403      	add	r3, r0
 8010d40:	331c      	adds	r3, #28
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	fbb2 f1f3 	udiv	r1, r2, r3
 8010d48:	fb01 f303 	mul.w	r3, r1, r3
 8010d4c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d112      	bne.n	8010d78 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8010d52:	78fb      	ldrb	r3, [r7, #3]
 8010d54:	f003 020f 	and.w	r2, r3, #15
 8010d58:	6879      	ldr	r1, [r7, #4]
 8010d5a:	4613      	mov	r3, r2
 8010d5c:	009b      	lsls	r3, r3, #2
 8010d5e:	4413      	add	r3, r2
 8010d60:	009b      	lsls	r3, r3, #2
 8010d62:	440b      	add	r3, r1
 8010d64:	3318      	adds	r3, #24
 8010d66:	2200      	movs	r2, #0
 8010d68:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8010d6a:	78f9      	ldrb	r1, [r7, #3]
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	2200      	movs	r2, #0
 8010d70:	6878      	ldr	r0, [r7, #4]
 8010d72:	f002 f9cc 	bl	801310e <USBD_LL_Transmit>
 8010d76:	e01f      	b.n	8010db8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8010d78:	68bb      	ldr	r3, [r7, #8]
 8010d7a:	2200      	movs	r2, #0
 8010d7c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010d86:	687a      	ldr	r2, [r7, #4]
 8010d88:	33b0      	adds	r3, #176	@ 0xb0
 8010d8a:	009b      	lsls	r3, r3, #2
 8010d8c:	4413      	add	r3, r2
 8010d8e:	685b      	ldr	r3, [r3, #4]
 8010d90:	691b      	ldr	r3, [r3, #16]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d010      	beq.n	8010db8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010d9c:	687a      	ldr	r2, [r7, #4]
 8010d9e:	33b0      	adds	r3, #176	@ 0xb0
 8010da0:	009b      	lsls	r3, r3, #2
 8010da2:	4413      	add	r3, r2
 8010da4:	685b      	ldr	r3, [r3, #4]
 8010da6:	691b      	ldr	r3, [r3, #16]
 8010da8:	68ba      	ldr	r2, [r7, #8]
 8010daa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8010dae:	68ba      	ldr	r2, [r7, #8]
 8010db0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8010db4:	78fa      	ldrb	r2, [r7, #3]
 8010db6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8010db8:	2300      	movs	r3, #0
}
 8010dba:	4618      	mov	r0, r3
 8010dbc:	3710      	adds	r7, #16
 8010dbe:	46bd      	mov	sp, r7
 8010dc0:	bd80      	pop	{r7, pc}

08010dc2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010dc2:	b580      	push	{r7, lr}
 8010dc4:	b084      	sub	sp, #16
 8010dc6:	af00      	add	r7, sp, #0
 8010dc8:	6078      	str	r0, [r7, #4]
 8010dca:	460b      	mov	r3, r1
 8010dcc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	32b0      	adds	r2, #176	@ 0xb0
 8010dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ddc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	32b0      	adds	r2, #176	@ 0xb0
 8010de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d101      	bne.n	8010df4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8010df0:	2303      	movs	r3, #3
 8010df2:	e01a      	b.n	8010e2a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8010df4:	78fb      	ldrb	r3, [r7, #3]
 8010df6:	4619      	mov	r1, r3
 8010df8:	6878      	ldr	r0, [r7, #4]
 8010dfa:	f002 f9ca 	bl	8013192 <USBD_LL_GetRxDataSize>
 8010dfe:	4602      	mov	r2, r0
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010e0c:	687a      	ldr	r2, [r7, #4]
 8010e0e:	33b0      	adds	r3, #176	@ 0xb0
 8010e10:	009b      	lsls	r3, r3, #2
 8010e12:	4413      	add	r3, r2
 8010e14:	685b      	ldr	r3, [r3, #4]
 8010e16:	68db      	ldr	r3, [r3, #12]
 8010e18:	68fa      	ldr	r2, [r7, #12]
 8010e1a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8010e1e:	68fa      	ldr	r2, [r7, #12]
 8010e20:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8010e24:	4611      	mov	r1, r2
 8010e26:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8010e28:	2300      	movs	r3, #0
}
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	3710      	adds	r7, #16
 8010e2e:	46bd      	mov	sp, r7
 8010e30:	bd80      	pop	{r7, pc}

08010e32 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8010e32:	b580      	push	{r7, lr}
 8010e34:	b084      	sub	sp, #16
 8010e36:	af00      	add	r7, sp, #0
 8010e38:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	32b0      	adds	r2, #176	@ 0xb0
 8010e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e48:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	d101      	bne.n	8010e54 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8010e50:	2303      	movs	r3, #3
 8010e52:	e024      	b.n	8010e9e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010e5a:	687a      	ldr	r2, [r7, #4]
 8010e5c:	33b0      	adds	r3, #176	@ 0xb0
 8010e5e:	009b      	lsls	r3, r3, #2
 8010e60:	4413      	add	r3, r2
 8010e62:	685b      	ldr	r3, [r3, #4]
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d019      	beq.n	8010e9c <USBD_CDC_EP0_RxReady+0x6a>
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8010e6e:	2bff      	cmp	r3, #255	@ 0xff
 8010e70:	d014      	beq.n	8010e9c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010e72:	687b      	ldr	r3, [r7, #4]
 8010e74:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010e78:	687a      	ldr	r2, [r7, #4]
 8010e7a:	33b0      	adds	r3, #176	@ 0xb0
 8010e7c:	009b      	lsls	r3, r3, #2
 8010e7e:	4413      	add	r3, r2
 8010e80:	685b      	ldr	r3, [r3, #4]
 8010e82:	689b      	ldr	r3, [r3, #8]
 8010e84:	68fa      	ldr	r2, [r7, #12]
 8010e86:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8010e8a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8010e8c:	68fa      	ldr	r2, [r7, #12]
 8010e8e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8010e92:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	22ff      	movs	r2, #255	@ 0xff
 8010e98:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8010e9c:	2300      	movs	r3, #0
}
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	3710      	adds	r7, #16
 8010ea2:	46bd      	mov	sp, r7
 8010ea4:	bd80      	pop	{r7, pc}
	...

08010ea8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8010ea8:	b580      	push	{r7, lr}
 8010eaa:	b086      	sub	sp, #24
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010eb0:	2182      	movs	r1, #130	@ 0x82
 8010eb2:	4818      	ldr	r0, [pc, #96]	@ (8010f14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010eb4:	f000 fd0f 	bl	80118d6 <USBD_GetEpDesc>
 8010eb8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010eba:	2101      	movs	r1, #1
 8010ebc:	4815      	ldr	r0, [pc, #84]	@ (8010f14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010ebe:	f000 fd0a 	bl	80118d6 <USBD_GetEpDesc>
 8010ec2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010ec4:	2181      	movs	r1, #129	@ 0x81
 8010ec6:	4813      	ldr	r0, [pc, #76]	@ (8010f14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8010ec8:	f000 fd05 	bl	80118d6 <USBD_GetEpDesc>
 8010ecc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010ece:	697b      	ldr	r3, [r7, #20]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d002      	beq.n	8010eda <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010ed4:	697b      	ldr	r3, [r7, #20]
 8010ed6:	2210      	movs	r2, #16
 8010ed8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010eda:	693b      	ldr	r3, [r7, #16]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d006      	beq.n	8010eee <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010ee0:	693b      	ldr	r3, [r7, #16]
 8010ee2:	2200      	movs	r2, #0
 8010ee4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010ee8:	711a      	strb	r2, [r3, #4]
 8010eea:	2200      	movs	r2, #0
 8010eec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	2b00      	cmp	r3, #0
 8010ef2:	d006      	beq.n	8010f02 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	2200      	movs	r2, #0
 8010ef8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010efc:	711a      	strb	r2, [r3, #4]
 8010efe:	2200      	movs	r2, #0
 8010f00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	2243      	movs	r2, #67	@ 0x43
 8010f06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010f08:	4b02      	ldr	r3, [pc, #8]	@ (8010f14 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	3718      	adds	r7, #24
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	bd80      	pop	{r7, pc}
 8010f12:	bf00      	nop
 8010f14:	24000058 	.word	0x24000058

08010f18 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8010f18:	b580      	push	{r7, lr}
 8010f1a:	b086      	sub	sp, #24
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010f20:	2182      	movs	r1, #130	@ 0x82
 8010f22:	4818      	ldr	r0, [pc, #96]	@ (8010f84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010f24:	f000 fcd7 	bl	80118d6 <USBD_GetEpDesc>
 8010f28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010f2a:	2101      	movs	r1, #1
 8010f2c:	4815      	ldr	r0, [pc, #84]	@ (8010f84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010f2e:	f000 fcd2 	bl	80118d6 <USBD_GetEpDesc>
 8010f32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010f34:	2181      	movs	r1, #129	@ 0x81
 8010f36:	4813      	ldr	r0, [pc, #76]	@ (8010f84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8010f38:	f000 fccd 	bl	80118d6 <USBD_GetEpDesc>
 8010f3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010f3e:	697b      	ldr	r3, [r7, #20]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d002      	beq.n	8010f4a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8010f44:	697b      	ldr	r3, [r7, #20]
 8010f46:	2210      	movs	r2, #16
 8010f48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010f4a:	693b      	ldr	r3, [r7, #16]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d006      	beq.n	8010f5e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010f50:	693b      	ldr	r3, [r7, #16]
 8010f52:	2200      	movs	r2, #0
 8010f54:	711a      	strb	r2, [r3, #4]
 8010f56:	2200      	movs	r2, #0
 8010f58:	f042 0202 	orr.w	r2, r2, #2
 8010f5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d006      	beq.n	8010f72 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8010f64:	68fb      	ldr	r3, [r7, #12]
 8010f66:	2200      	movs	r2, #0
 8010f68:	711a      	strb	r2, [r3, #4]
 8010f6a:	2200      	movs	r2, #0
 8010f6c:	f042 0202 	orr.w	r2, r2, #2
 8010f70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	2243      	movs	r2, #67	@ 0x43
 8010f76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010f78:	4b02      	ldr	r3, [pc, #8]	@ (8010f84 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	3718      	adds	r7, #24
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	bd80      	pop	{r7, pc}
 8010f82:	bf00      	nop
 8010f84:	24000058 	.word	0x24000058

08010f88 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8010f88:	b580      	push	{r7, lr}
 8010f8a:	b086      	sub	sp, #24
 8010f8c:	af00      	add	r7, sp, #0
 8010f8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8010f90:	2182      	movs	r1, #130	@ 0x82
 8010f92:	4818      	ldr	r0, [pc, #96]	@ (8010ff4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010f94:	f000 fc9f 	bl	80118d6 <USBD_GetEpDesc>
 8010f98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8010f9a:	2101      	movs	r1, #1
 8010f9c:	4815      	ldr	r0, [pc, #84]	@ (8010ff4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010f9e:	f000 fc9a 	bl	80118d6 <USBD_GetEpDesc>
 8010fa2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8010fa4:	2181      	movs	r1, #129	@ 0x81
 8010fa6:	4813      	ldr	r0, [pc, #76]	@ (8010ff4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8010fa8:	f000 fc95 	bl	80118d6 <USBD_GetEpDesc>
 8010fac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8010fae:	697b      	ldr	r3, [r7, #20]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d002      	beq.n	8010fba <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8010fb4:	697b      	ldr	r3, [r7, #20]
 8010fb6:	2210      	movs	r2, #16
 8010fb8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8010fba:	693b      	ldr	r3, [r7, #16]
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d006      	beq.n	8010fce <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010fc0:	693b      	ldr	r3, [r7, #16]
 8010fc2:	2200      	movs	r2, #0
 8010fc4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010fc8:	711a      	strb	r2, [r3, #4]
 8010fca:	2200      	movs	r2, #0
 8010fcc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d006      	beq.n	8010fe2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010fdc:	711a      	strb	r2, [r3, #4]
 8010fde:	2200      	movs	r2, #0
 8010fe0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	2243      	movs	r2, #67	@ 0x43
 8010fe6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8010fe8:	4b02      	ldr	r3, [pc, #8]	@ (8010ff4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8010fea:	4618      	mov	r0, r3
 8010fec:	3718      	adds	r7, #24
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	bd80      	pop	{r7, pc}
 8010ff2:	bf00      	nop
 8010ff4:	24000058 	.word	0x24000058

08010ff8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8010ff8:	b480      	push	{r7}
 8010ffa:	b083      	sub	sp, #12
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	220a      	movs	r2, #10
 8011004:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8011006:	4b03      	ldr	r3, [pc, #12]	@ (8011014 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011008:	4618      	mov	r0, r3
 801100a:	370c      	adds	r7, #12
 801100c:	46bd      	mov	sp, r7
 801100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011012:	4770      	bx	lr
 8011014:	24000014 	.word	0x24000014

08011018 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011018:	b480      	push	{r7}
 801101a:	b083      	sub	sp, #12
 801101c:	af00      	add	r7, sp, #0
 801101e:	6078      	str	r0, [r7, #4]
 8011020:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8011022:	683b      	ldr	r3, [r7, #0]
 8011024:	2b00      	cmp	r3, #0
 8011026:	d101      	bne.n	801102c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011028:	2303      	movs	r3, #3
 801102a:	e009      	b.n	8011040 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011032:	687a      	ldr	r2, [r7, #4]
 8011034:	33b0      	adds	r3, #176	@ 0xb0
 8011036:	009b      	lsls	r3, r3, #2
 8011038:	4413      	add	r3, r2
 801103a:	683a      	ldr	r2, [r7, #0]
 801103c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 801103e:	2300      	movs	r3, #0
}
 8011040:	4618      	mov	r0, r3
 8011042:	370c      	adds	r7, #12
 8011044:	46bd      	mov	sp, r7
 8011046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104a:	4770      	bx	lr

0801104c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801104c:	b480      	push	{r7}
 801104e:	b087      	sub	sp, #28
 8011050:	af00      	add	r7, sp, #0
 8011052:	60f8      	str	r0, [r7, #12]
 8011054:	60b9      	str	r1, [r7, #8]
 8011056:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	32b0      	adds	r2, #176	@ 0xb0
 8011062:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011066:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8011068:	697b      	ldr	r3, [r7, #20]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d101      	bne.n	8011072 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801106e:	2303      	movs	r3, #3
 8011070:	e008      	b.n	8011084 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8011072:	697b      	ldr	r3, [r7, #20]
 8011074:	68ba      	ldr	r2, [r7, #8]
 8011076:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 801107a:	697b      	ldr	r3, [r7, #20]
 801107c:	687a      	ldr	r2, [r7, #4]
 801107e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8011082:	2300      	movs	r3, #0
}
 8011084:	4618      	mov	r0, r3
 8011086:	371c      	adds	r7, #28
 8011088:	46bd      	mov	sp, r7
 801108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801108e:	4770      	bx	lr

08011090 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8011090:	b480      	push	{r7}
 8011092:	b085      	sub	sp, #20
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
 8011098:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	32b0      	adds	r2, #176	@ 0xb0
 80110a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110a8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80110aa:	68fb      	ldr	r3, [r7, #12]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d101      	bne.n	80110b4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80110b0:	2303      	movs	r3, #3
 80110b2:	e004      	b.n	80110be <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	683a      	ldr	r2, [r7, #0]
 80110b8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80110bc:	2300      	movs	r3, #0
}
 80110be:	4618      	mov	r0, r3
 80110c0:	3714      	adds	r7, #20
 80110c2:	46bd      	mov	sp, r7
 80110c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c8:	4770      	bx	lr
	...

080110cc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80110cc:	b580      	push	{r7, lr}
 80110ce:	b084      	sub	sp, #16
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	32b0      	adds	r2, #176	@ 0xb0
 80110de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110e2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	32b0      	adds	r2, #176	@ 0xb0
 80110ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d101      	bne.n	80110fa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80110f6:	2303      	movs	r3, #3
 80110f8:	e018      	b.n	801112c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	7c1b      	ldrb	r3, [r3, #16]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d10a      	bne.n	8011118 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011102:	4b0c      	ldr	r3, [pc, #48]	@ (8011134 <USBD_CDC_ReceivePacket+0x68>)
 8011104:	7819      	ldrb	r1, [r3, #0]
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801110c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011110:	6878      	ldr	r0, [r7, #4]
 8011112:	f002 f81d 	bl	8013150 <USBD_LL_PrepareReceive>
 8011116:	e008      	b.n	801112a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011118:	4b06      	ldr	r3, [pc, #24]	@ (8011134 <USBD_CDC_ReceivePacket+0x68>)
 801111a:	7819      	ldrb	r1, [r3, #0]
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011122:	2340      	movs	r3, #64	@ 0x40
 8011124:	6878      	ldr	r0, [r7, #4]
 8011126:	f002 f813 	bl	8013150 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801112a:	2300      	movs	r3, #0
}
 801112c:	4618      	mov	r0, r3
 801112e:	3710      	adds	r7, #16
 8011130:	46bd      	mov	sp, r7
 8011132:	bd80      	pop	{r7, pc}
 8011134:	2400009c 	.word	0x2400009c

08011138 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011138:	b580      	push	{r7, lr}
 801113a:	b086      	sub	sp, #24
 801113c:	af00      	add	r7, sp, #0
 801113e:	60f8      	str	r0, [r7, #12]
 8011140:	60b9      	str	r1, [r7, #8]
 8011142:	4613      	mov	r3, r2
 8011144:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011146:	68fb      	ldr	r3, [r7, #12]
 8011148:	2b00      	cmp	r3, #0
 801114a:	d101      	bne.n	8011150 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801114c:	2303      	movs	r3, #3
 801114e:	e01f      	b.n	8011190 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	2200      	movs	r2, #0
 8011154:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	2200      	movs	r2, #0
 801115c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	2200      	movs	r2, #0
 8011164:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011168:	68bb      	ldr	r3, [r7, #8]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d003      	beq.n	8011176 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	68ba      	ldr	r2, [r7, #8]
 8011172:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	2201      	movs	r2, #1
 801117a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	79fa      	ldrb	r2, [r7, #7]
 8011182:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011184:	68f8      	ldr	r0, [r7, #12]
 8011186:	f001 fe87 	bl	8012e98 <USBD_LL_Init>
 801118a:	4603      	mov	r3, r0
 801118c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801118e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011190:	4618      	mov	r0, r3
 8011192:	3718      	adds	r7, #24
 8011194:	46bd      	mov	sp, r7
 8011196:	bd80      	pop	{r7, pc}

08011198 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011198:	b580      	push	{r7, lr}
 801119a:	b084      	sub	sp, #16
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
 80111a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80111a2:	2300      	movs	r3, #0
 80111a4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80111a6:	683b      	ldr	r3, [r7, #0]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d101      	bne.n	80111b0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80111ac:	2303      	movs	r3, #3
 80111ae:	e025      	b.n	80111fc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	683a      	ldr	r2, [r7, #0]
 80111b4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	32ae      	adds	r2, #174	@ 0xae
 80111c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d00f      	beq.n	80111ec <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	32ae      	adds	r2, #174	@ 0xae
 80111d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80111da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111dc:	f107 020e 	add.w	r2, r7, #14
 80111e0:	4610      	mov	r0, r2
 80111e2:	4798      	blx	r3
 80111e4:	4602      	mov	r2, r0
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80111f2:	1c5a      	adds	r2, r3, #1
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80111fa:	2300      	movs	r3, #0
}
 80111fc:	4618      	mov	r0, r3
 80111fe:	3710      	adds	r7, #16
 8011200:	46bd      	mov	sp, r7
 8011202:	bd80      	pop	{r7, pc}

08011204 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011204:	b580      	push	{r7, lr}
 8011206:	b082      	sub	sp, #8
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801120c:	6878      	ldr	r0, [r7, #4]
 801120e:	f001 fe95 	bl	8012f3c <USBD_LL_Start>
 8011212:	4603      	mov	r3, r0
}
 8011214:	4618      	mov	r0, r3
 8011216:	3708      	adds	r7, #8
 8011218:	46bd      	mov	sp, r7
 801121a:	bd80      	pop	{r7, pc}

0801121c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 801121c:	b480      	push	{r7}
 801121e:	b083      	sub	sp, #12
 8011220:	af00      	add	r7, sp, #0
 8011222:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011224:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8011226:	4618      	mov	r0, r3
 8011228:	370c      	adds	r7, #12
 801122a:	46bd      	mov	sp, r7
 801122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011230:	4770      	bx	lr

08011232 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011232:	b580      	push	{r7, lr}
 8011234:	b084      	sub	sp, #16
 8011236:	af00      	add	r7, sp, #0
 8011238:	6078      	str	r0, [r7, #4]
 801123a:	460b      	mov	r3, r1
 801123c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801123e:	2300      	movs	r3, #0
 8011240:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011248:	2b00      	cmp	r3, #0
 801124a:	d009      	beq.n	8011260 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	78fa      	ldrb	r2, [r7, #3]
 8011256:	4611      	mov	r1, r2
 8011258:	6878      	ldr	r0, [r7, #4]
 801125a:	4798      	blx	r3
 801125c:	4603      	mov	r3, r0
 801125e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011260:	7bfb      	ldrb	r3, [r7, #15]
}
 8011262:	4618      	mov	r0, r3
 8011264:	3710      	adds	r7, #16
 8011266:	46bd      	mov	sp, r7
 8011268:	bd80      	pop	{r7, pc}

0801126a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801126a:	b580      	push	{r7, lr}
 801126c:	b084      	sub	sp, #16
 801126e:	af00      	add	r7, sp, #0
 8011270:	6078      	str	r0, [r7, #4]
 8011272:	460b      	mov	r3, r1
 8011274:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011276:	2300      	movs	r3, #0
 8011278:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011280:	685b      	ldr	r3, [r3, #4]
 8011282:	78fa      	ldrb	r2, [r7, #3]
 8011284:	4611      	mov	r1, r2
 8011286:	6878      	ldr	r0, [r7, #4]
 8011288:	4798      	blx	r3
 801128a:	4603      	mov	r3, r0
 801128c:	2b00      	cmp	r3, #0
 801128e:	d001      	beq.n	8011294 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8011290:	2303      	movs	r3, #3
 8011292:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011294:	7bfb      	ldrb	r3, [r7, #15]
}
 8011296:	4618      	mov	r0, r3
 8011298:	3710      	adds	r7, #16
 801129a:	46bd      	mov	sp, r7
 801129c:	bd80      	pop	{r7, pc}

0801129e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801129e:	b580      	push	{r7, lr}
 80112a0:	b084      	sub	sp, #16
 80112a2:	af00      	add	r7, sp, #0
 80112a4:	6078      	str	r0, [r7, #4]
 80112a6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80112ae:	6839      	ldr	r1, [r7, #0]
 80112b0:	4618      	mov	r0, r3
 80112b2:	f001 f936 	bl	8012522 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	2201      	movs	r2, #1
 80112ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80112c4:	461a      	mov	r2, r3
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80112d2:	f003 031f 	and.w	r3, r3, #31
 80112d6:	2b02      	cmp	r3, #2
 80112d8:	d01a      	beq.n	8011310 <USBD_LL_SetupStage+0x72>
 80112da:	2b02      	cmp	r3, #2
 80112dc:	d822      	bhi.n	8011324 <USBD_LL_SetupStage+0x86>
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d002      	beq.n	80112e8 <USBD_LL_SetupStage+0x4a>
 80112e2:	2b01      	cmp	r3, #1
 80112e4:	d00a      	beq.n	80112fc <USBD_LL_SetupStage+0x5e>
 80112e6:	e01d      	b.n	8011324 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80112ee:	4619      	mov	r1, r3
 80112f0:	6878      	ldr	r0, [r7, #4]
 80112f2:	f000 fb63 	bl	80119bc <USBD_StdDevReq>
 80112f6:	4603      	mov	r3, r0
 80112f8:	73fb      	strb	r3, [r7, #15]
      break;
 80112fa:	e020      	b.n	801133e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011302:	4619      	mov	r1, r3
 8011304:	6878      	ldr	r0, [r7, #4]
 8011306:	f000 fbcb 	bl	8011aa0 <USBD_StdItfReq>
 801130a:	4603      	mov	r3, r0
 801130c:	73fb      	strb	r3, [r7, #15]
      break;
 801130e:	e016      	b.n	801133e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011316:	4619      	mov	r1, r3
 8011318:	6878      	ldr	r0, [r7, #4]
 801131a:	f000 fc2d 	bl	8011b78 <USBD_StdEPReq>
 801131e:	4603      	mov	r3, r0
 8011320:	73fb      	strb	r3, [r7, #15]
      break;
 8011322:	e00c      	b.n	801133e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801132a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801132e:	b2db      	uxtb	r3, r3
 8011330:	4619      	mov	r1, r3
 8011332:	6878      	ldr	r0, [r7, #4]
 8011334:	f001 fe62 	bl	8012ffc <USBD_LL_StallEP>
 8011338:	4603      	mov	r3, r0
 801133a:	73fb      	strb	r3, [r7, #15]
      break;
 801133c:	bf00      	nop
  }

  return ret;
 801133e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011340:	4618      	mov	r0, r3
 8011342:	3710      	adds	r7, #16
 8011344:	46bd      	mov	sp, r7
 8011346:	bd80      	pop	{r7, pc}

08011348 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011348:	b580      	push	{r7, lr}
 801134a:	b086      	sub	sp, #24
 801134c:	af00      	add	r7, sp, #0
 801134e:	60f8      	str	r0, [r7, #12]
 8011350:	460b      	mov	r3, r1
 8011352:	607a      	str	r2, [r7, #4]
 8011354:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8011356:	2300      	movs	r3, #0
 8011358:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801135a:	7afb      	ldrb	r3, [r7, #11]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d16e      	bne.n	801143e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8011366:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011368:	68fb      	ldr	r3, [r7, #12]
 801136a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801136e:	2b03      	cmp	r3, #3
 8011370:	f040 8098 	bne.w	80114a4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8011374:	693b      	ldr	r3, [r7, #16]
 8011376:	689a      	ldr	r2, [r3, #8]
 8011378:	693b      	ldr	r3, [r7, #16]
 801137a:	68db      	ldr	r3, [r3, #12]
 801137c:	429a      	cmp	r2, r3
 801137e:	d913      	bls.n	80113a8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8011380:	693b      	ldr	r3, [r7, #16]
 8011382:	689a      	ldr	r2, [r3, #8]
 8011384:	693b      	ldr	r3, [r7, #16]
 8011386:	68db      	ldr	r3, [r3, #12]
 8011388:	1ad2      	subs	r2, r2, r3
 801138a:	693b      	ldr	r3, [r7, #16]
 801138c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801138e:	693b      	ldr	r3, [r7, #16]
 8011390:	68da      	ldr	r2, [r3, #12]
 8011392:	693b      	ldr	r3, [r7, #16]
 8011394:	689b      	ldr	r3, [r3, #8]
 8011396:	4293      	cmp	r3, r2
 8011398:	bf28      	it	cs
 801139a:	4613      	movcs	r3, r2
 801139c:	461a      	mov	r2, r3
 801139e:	6879      	ldr	r1, [r7, #4]
 80113a0:	68f8      	ldr	r0, [r7, #12]
 80113a2:	f001 f9be 	bl	8012722 <USBD_CtlContinueRx>
 80113a6:	e07d      	b.n	80114a4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80113ae:	f003 031f 	and.w	r3, r3, #31
 80113b2:	2b02      	cmp	r3, #2
 80113b4:	d014      	beq.n	80113e0 <USBD_LL_DataOutStage+0x98>
 80113b6:	2b02      	cmp	r3, #2
 80113b8:	d81d      	bhi.n	80113f6 <USBD_LL_DataOutStage+0xae>
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d002      	beq.n	80113c4 <USBD_LL_DataOutStage+0x7c>
 80113be:	2b01      	cmp	r3, #1
 80113c0:	d003      	beq.n	80113ca <USBD_LL_DataOutStage+0x82>
 80113c2:	e018      	b.n	80113f6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80113c4:	2300      	movs	r3, #0
 80113c6:	75bb      	strb	r3, [r7, #22]
            break;
 80113c8:	e018      	b.n	80113fc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80113d0:	b2db      	uxtb	r3, r3
 80113d2:	4619      	mov	r1, r3
 80113d4:	68f8      	ldr	r0, [r7, #12]
 80113d6:	f000 fa64 	bl	80118a2 <USBD_CoreFindIF>
 80113da:	4603      	mov	r3, r0
 80113dc:	75bb      	strb	r3, [r7, #22]
            break;
 80113de:	e00d      	b.n	80113fc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80113e6:	b2db      	uxtb	r3, r3
 80113e8:	4619      	mov	r1, r3
 80113ea:	68f8      	ldr	r0, [r7, #12]
 80113ec:	f000 fa66 	bl	80118bc <USBD_CoreFindEP>
 80113f0:	4603      	mov	r3, r0
 80113f2:	75bb      	strb	r3, [r7, #22]
            break;
 80113f4:	e002      	b.n	80113fc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80113f6:	2300      	movs	r3, #0
 80113f8:	75bb      	strb	r3, [r7, #22]
            break;
 80113fa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80113fc:	7dbb      	ldrb	r3, [r7, #22]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d119      	bne.n	8011436 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011408:	b2db      	uxtb	r3, r3
 801140a:	2b03      	cmp	r3, #3
 801140c:	d113      	bne.n	8011436 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801140e:	7dba      	ldrb	r2, [r7, #22]
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	32ae      	adds	r2, #174	@ 0xae
 8011414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011418:	691b      	ldr	r3, [r3, #16]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d00b      	beq.n	8011436 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 801141e:	7dba      	ldrb	r2, [r7, #22]
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8011426:	7dba      	ldrb	r2, [r7, #22]
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	32ae      	adds	r2, #174	@ 0xae
 801142c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011430:	691b      	ldr	r3, [r3, #16]
 8011432:	68f8      	ldr	r0, [r7, #12]
 8011434:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8011436:	68f8      	ldr	r0, [r7, #12]
 8011438:	f001 f984 	bl	8012744 <USBD_CtlSendStatus>
 801143c:	e032      	b.n	80114a4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 801143e:	7afb      	ldrb	r3, [r7, #11]
 8011440:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011444:	b2db      	uxtb	r3, r3
 8011446:	4619      	mov	r1, r3
 8011448:	68f8      	ldr	r0, [r7, #12]
 801144a:	f000 fa37 	bl	80118bc <USBD_CoreFindEP>
 801144e:	4603      	mov	r3, r0
 8011450:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011452:	7dbb      	ldrb	r3, [r7, #22]
 8011454:	2bff      	cmp	r3, #255	@ 0xff
 8011456:	d025      	beq.n	80114a4 <USBD_LL_DataOutStage+0x15c>
 8011458:	7dbb      	ldrb	r3, [r7, #22]
 801145a:	2b00      	cmp	r3, #0
 801145c:	d122      	bne.n	80114a4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011464:	b2db      	uxtb	r3, r3
 8011466:	2b03      	cmp	r3, #3
 8011468:	d117      	bne.n	801149a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801146a:	7dba      	ldrb	r2, [r7, #22]
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	32ae      	adds	r2, #174	@ 0xae
 8011470:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011474:	699b      	ldr	r3, [r3, #24]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d00f      	beq.n	801149a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801147a:	7dba      	ldrb	r2, [r7, #22]
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8011482:	7dba      	ldrb	r2, [r7, #22]
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	32ae      	adds	r2, #174	@ 0xae
 8011488:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801148c:	699b      	ldr	r3, [r3, #24]
 801148e:	7afa      	ldrb	r2, [r7, #11]
 8011490:	4611      	mov	r1, r2
 8011492:	68f8      	ldr	r0, [r7, #12]
 8011494:	4798      	blx	r3
 8011496:	4603      	mov	r3, r0
 8011498:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801149a:	7dfb      	ldrb	r3, [r7, #23]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d001      	beq.n	80114a4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80114a0:	7dfb      	ldrb	r3, [r7, #23]
 80114a2:	e000      	b.n	80114a6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80114a4:	2300      	movs	r3, #0
}
 80114a6:	4618      	mov	r0, r3
 80114a8:	3718      	adds	r7, #24
 80114aa:	46bd      	mov	sp, r7
 80114ac:	bd80      	pop	{r7, pc}

080114ae <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80114ae:	b580      	push	{r7, lr}
 80114b0:	b086      	sub	sp, #24
 80114b2:	af00      	add	r7, sp, #0
 80114b4:	60f8      	str	r0, [r7, #12]
 80114b6:	460b      	mov	r3, r1
 80114b8:	607a      	str	r2, [r7, #4]
 80114ba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80114bc:	7afb      	ldrb	r3, [r7, #11]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d16f      	bne.n	80115a2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	3314      	adds	r3, #20
 80114c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80114ce:	2b02      	cmp	r3, #2
 80114d0:	d15a      	bne.n	8011588 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80114d2:	693b      	ldr	r3, [r7, #16]
 80114d4:	689a      	ldr	r2, [r3, #8]
 80114d6:	693b      	ldr	r3, [r7, #16]
 80114d8:	68db      	ldr	r3, [r3, #12]
 80114da:	429a      	cmp	r2, r3
 80114dc:	d914      	bls.n	8011508 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80114de:	693b      	ldr	r3, [r7, #16]
 80114e0:	689a      	ldr	r2, [r3, #8]
 80114e2:	693b      	ldr	r3, [r7, #16]
 80114e4:	68db      	ldr	r3, [r3, #12]
 80114e6:	1ad2      	subs	r2, r2, r3
 80114e8:	693b      	ldr	r3, [r7, #16]
 80114ea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80114ec:	693b      	ldr	r3, [r7, #16]
 80114ee:	689b      	ldr	r3, [r3, #8]
 80114f0:	461a      	mov	r2, r3
 80114f2:	6879      	ldr	r1, [r7, #4]
 80114f4:	68f8      	ldr	r0, [r7, #12]
 80114f6:	f001 f8e6 	bl	80126c6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80114fa:	2300      	movs	r3, #0
 80114fc:	2200      	movs	r2, #0
 80114fe:	2100      	movs	r1, #0
 8011500:	68f8      	ldr	r0, [r7, #12]
 8011502:	f001 fe25 	bl	8013150 <USBD_LL_PrepareReceive>
 8011506:	e03f      	b.n	8011588 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011508:	693b      	ldr	r3, [r7, #16]
 801150a:	68da      	ldr	r2, [r3, #12]
 801150c:	693b      	ldr	r3, [r7, #16]
 801150e:	689b      	ldr	r3, [r3, #8]
 8011510:	429a      	cmp	r2, r3
 8011512:	d11c      	bne.n	801154e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011514:	693b      	ldr	r3, [r7, #16]
 8011516:	685a      	ldr	r2, [r3, #4]
 8011518:	693b      	ldr	r3, [r7, #16]
 801151a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801151c:	429a      	cmp	r2, r3
 801151e:	d316      	bcc.n	801154e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011520:	693b      	ldr	r3, [r7, #16]
 8011522:	685a      	ldr	r2, [r3, #4]
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 801152a:	429a      	cmp	r2, r3
 801152c:	d20f      	bcs.n	801154e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801152e:	2200      	movs	r2, #0
 8011530:	2100      	movs	r1, #0
 8011532:	68f8      	ldr	r0, [r7, #12]
 8011534:	f001 f8c7 	bl	80126c6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	2200      	movs	r2, #0
 801153c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011540:	2300      	movs	r3, #0
 8011542:	2200      	movs	r2, #0
 8011544:	2100      	movs	r1, #0
 8011546:	68f8      	ldr	r0, [r7, #12]
 8011548:	f001 fe02 	bl	8013150 <USBD_LL_PrepareReceive>
 801154c:	e01c      	b.n	8011588 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011554:	b2db      	uxtb	r3, r3
 8011556:	2b03      	cmp	r3, #3
 8011558:	d10f      	bne.n	801157a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011560:	68db      	ldr	r3, [r3, #12]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d009      	beq.n	801157a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	2200      	movs	r2, #0
 801156a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011574:	68db      	ldr	r3, [r3, #12]
 8011576:	68f8      	ldr	r0, [r7, #12]
 8011578:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801157a:	2180      	movs	r1, #128	@ 0x80
 801157c:	68f8      	ldr	r0, [r7, #12]
 801157e:	f001 fd3d 	bl	8012ffc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011582:	68f8      	ldr	r0, [r7, #12]
 8011584:	f001 f8f1 	bl	801276a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 801158e:	2b00      	cmp	r3, #0
 8011590:	d03a      	beq.n	8011608 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8011592:	68f8      	ldr	r0, [r7, #12]
 8011594:	f7ff fe42 	bl	801121c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	2200      	movs	r2, #0
 801159c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80115a0:	e032      	b.n	8011608 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80115a2:	7afb      	ldrb	r3, [r7, #11]
 80115a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80115a8:	b2db      	uxtb	r3, r3
 80115aa:	4619      	mov	r1, r3
 80115ac:	68f8      	ldr	r0, [r7, #12]
 80115ae:	f000 f985 	bl	80118bc <USBD_CoreFindEP>
 80115b2:	4603      	mov	r3, r0
 80115b4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80115b6:	7dfb      	ldrb	r3, [r7, #23]
 80115b8:	2bff      	cmp	r3, #255	@ 0xff
 80115ba:	d025      	beq.n	8011608 <USBD_LL_DataInStage+0x15a>
 80115bc:	7dfb      	ldrb	r3, [r7, #23]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d122      	bne.n	8011608 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80115c8:	b2db      	uxtb	r3, r3
 80115ca:	2b03      	cmp	r3, #3
 80115cc:	d11c      	bne.n	8011608 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80115ce:	7dfa      	ldrb	r2, [r7, #23]
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	32ae      	adds	r2, #174	@ 0xae
 80115d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115d8:	695b      	ldr	r3, [r3, #20]
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d014      	beq.n	8011608 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80115de:	7dfa      	ldrb	r2, [r7, #23]
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80115e6:	7dfa      	ldrb	r2, [r7, #23]
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	32ae      	adds	r2, #174	@ 0xae
 80115ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80115f0:	695b      	ldr	r3, [r3, #20]
 80115f2:	7afa      	ldrb	r2, [r7, #11]
 80115f4:	4611      	mov	r1, r2
 80115f6:	68f8      	ldr	r0, [r7, #12]
 80115f8:	4798      	blx	r3
 80115fa:	4603      	mov	r3, r0
 80115fc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80115fe:	7dbb      	ldrb	r3, [r7, #22]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d001      	beq.n	8011608 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8011604:	7dbb      	ldrb	r3, [r7, #22]
 8011606:	e000      	b.n	801160a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8011608:	2300      	movs	r3, #0
}
 801160a:	4618      	mov	r0, r3
 801160c:	3718      	adds	r7, #24
 801160e:	46bd      	mov	sp, r7
 8011610:	bd80      	pop	{r7, pc}

08011612 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011612:	b580      	push	{r7, lr}
 8011614:	b084      	sub	sp, #16
 8011616:	af00      	add	r7, sp, #0
 8011618:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801161a:	2300      	movs	r3, #0
 801161c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	2201      	movs	r2, #1
 8011622:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	2200      	movs	r2, #0
 801162a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	2200      	movs	r2, #0
 8011632:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	2200      	movs	r2, #0
 8011638:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	2200      	movs	r2, #0
 8011640:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801164a:	2b00      	cmp	r3, #0
 801164c:	d014      	beq.n	8011678 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011654:	685b      	ldr	r3, [r3, #4]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d00e      	beq.n	8011678 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011660:	685b      	ldr	r3, [r3, #4]
 8011662:	687a      	ldr	r2, [r7, #4]
 8011664:	6852      	ldr	r2, [r2, #4]
 8011666:	b2d2      	uxtb	r2, r2
 8011668:	4611      	mov	r1, r2
 801166a:	6878      	ldr	r0, [r7, #4]
 801166c:	4798      	blx	r3
 801166e:	4603      	mov	r3, r0
 8011670:	2b00      	cmp	r3, #0
 8011672:	d001      	beq.n	8011678 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8011674:	2303      	movs	r3, #3
 8011676:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011678:	2340      	movs	r3, #64	@ 0x40
 801167a:	2200      	movs	r2, #0
 801167c:	2100      	movs	r1, #0
 801167e:	6878      	ldr	r0, [r7, #4]
 8011680:	f001 fc77 	bl	8012f72 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	2201      	movs	r2, #1
 8011688:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	2240      	movs	r2, #64	@ 0x40
 8011690:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011694:	2340      	movs	r3, #64	@ 0x40
 8011696:	2200      	movs	r2, #0
 8011698:	2180      	movs	r1, #128	@ 0x80
 801169a:	6878      	ldr	r0, [r7, #4]
 801169c:	f001 fc69 	bl	8012f72 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	2201      	movs	r2, #1
 80116a4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	2240      	movs	r2, #64	@ 0x40
 80116aa:	621a      	str	r2, [r3, #32]

  return ret;
 80116ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80116ae:	4618      	mov	r0, r3
 80116b0:	3710      	adds	r7, #16
 80116b2:	46bd      	mov	sp, r7
 80116b4:	bd80      	pop	{r7, pc}

080116b6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80116b6:	b480      	push	{r7}
 80116b8:	b083      	sub	sp, #12
 80116ba:	af00      	add	r7, sp, #0
 80116bc:	6078      	str	r0, [r7, #4]
 80116be:	460b      	mov	r3, r1
 80116c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	78fa      	ldrb	r2, [r7, #3]
 80116c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80116c8:	2300      	movs	r3, #0
}
 80116ca:	4618      	mov	r0, r3
 80116cc:	370c      	adds	r7, #12
 80116ce:	46bd      	mov	sp, r7
 80116d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d4:	4770      	bx	lr

080116d6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80116d6:	b480      	push	{r7}
 80116d8:	b083      	sub	sp, #12
 80116da:	af00      	add	r7, sp, #0
 80116dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80116e4:	b2db      	uxtb	r3, r3
 80116e6:	2b04      	cmp	r3, #4
 80116e8:	d006      	beq.n	80116f8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80116ea:	687b      	ldr	r3, [r7, #4]
 80116ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80116f0:	b2da      	uxtb	r2, r3
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	2204      	movs	r2, #4
 80116fc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8011700:	2300      	movs	r3, #0
}
 8011702:	4618      	mov	r0, r3
 8011704:	370c      	adds	r7, #12
 8011706:	46bd      	mov	sp, r7
 8011708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170c:	4770      	bx	lr

0801170e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801170e:	b480      	push	{r7}
 8011710:	b083      	sub	sp, #12
 8011712:	af00      	add	r7, sp, #0
 8011714:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801171c:	b2db      	uxtb	r3, r3
 801171e:	2b04      	cmp	r3, #4
 8011720:	d106      	bne.n	8011730 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8011728:	b2da      	uxtb	r2, r3
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8011730:	2300      	movs	r3, #0
}
 8011732:	4618      	mov	r0, r3
 8011734:	370c      	adds	r7, #12
 8011736:	46bd      	mov	sp, r7
 8011738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801173c:	4770      	bx	lr

0801173e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801173e:	b580      	push	{r7, lr}
 8011740:	b082      	sub	sp, #8
 8011742:	af00      	add	r7, sp, #0
 8011744:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801174c:	b2db      	uxtb	r3, r3
 801174e:	2b03      	cmp	r3, #3
 8011750:	d110      	bne.n	8011774 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8011752:	687b      	ldr	r3, [r7, #4]
 8011754:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011758:	2b00      	cmp	r3, #0
 801175a:	d00b      	beq.n	8011774 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011762:	69db      	ldr	r3, [r3, #28]
 8011764:	2b00      	cmp	r3, #0
 8011766:	d005      	beq.n	8011774 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801176e:	69db      	ldr	r3, [r3, #28]
 8011770:	6878      	ldr	r0, [r7, #4]
 8011772:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8011774:	2300      	movs	r3, #0
}
 8011776:	4618      	mov	r0, r3
 8011778:	3708      	adds	r7, #8
 801177a:	46bd      	mov	sp, r7
 801177c:	bd80      	pop	{r7, pc}

0801177e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801177e:	b580      	push	{r7, lr}
 8011780:	b082      	sub	sp, #8
 8011782:	af00      	add	r7, sp, #0
 8011784:	6078      	str	r0, [r7, #4]
 8011786:	460b      	mov	r3, r1
 8011788:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	32ae      	adds	r2, #174	@ 0xae
 8011794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d101      	bne.n	80117a0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801179c:	2303      	movs	r3, #3
 801179e:	e01c      	b.n	80117da <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80117a6:	b2db      	uxtb	r3, r3
 80117a8:	2b03      	cmp	r3, #3
 80117aa:	d115      	bne.n	80117d8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	32ae      	adds	r2, #174	@ 0xae
 80117b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117ba:	6a1b      	ldr	r3, [r3, #32]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d00b      	beq.n	80117d8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	32ae      	adds	r2, #174	@ 0xae
 80117ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117ce:	6a1b      	ldr	r3, [r3, #32]
 80117d0:	78fa      	ldrb	r2, [r7, #3]
 80117d2:	4611      	mov	r1, r2
 80117d4:	6878      	ldr	r0, [r7, #4]
 80117d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80117d8:	2300      	movs	r3, #0
}
 80117da:	4618      	mov	r0, r3
 80117dc:	3708      	adds	r7, #8
 80117de:	46bd      	mov	sp, r7
 80117e0:	bd80      	pop	{r7, pc}

080117e2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80117e2:	b580      	push	{r7, lr}
 80117e4:	b082      	sub	sp, #8
 80117e6:	af00      	add	r7, sp, #0
 80117e8:	6078      	str	r0, [r7, #4]
 80117ea:	460b      	mov	r3, r1
 80117ec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	32ae      	adds	r2, #174	@ 0xae
 80117f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d101      	bne.n	8011804 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8011800:	2303      	movs	r3, #3
 8011802:	e01c      	b.n	801183e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801180a:	b2db      	uxtb	r3, r3
 801180c:	2b03      	cmp	r3, #3
 801180e:	d115      	bne.n	801183c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	32ae      	adds	r2, #174	@ 0xae
 801181a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801181e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011820:	2b00      	cmp	r3, #0
 8011822:	d00b      	beq.n	801183c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	32ae      	adds	r2, #174	@ 0xae
 801182e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011834:	78fa      	ldrb	r2, [r7, #3]
 8011836:	4611      	mov	r1, r2
 8011838:	6878      	ldr	r0, [r7, #4]
 801183a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801183c:	2300      	movs	r3, #0
}
 801183e:	4618      	mov	r0, r3
 8011840:	3708      	adds	r7, #8
 8011842:	46bd      	mov	sp, r7
 8011844:	bd80      	pop	{r7, pc}

08011846 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011846:	b480      	push	{r7}
 8011848:	b083      	sub	sp, #12
 801184a:	af00      	add	r7, sp, #0
 801184c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801184e:	2300      	movs	r3, #0
}
 8011850:	4618      	mov	r0, r3
 8011852:	370c      	adds	r7, #12
 8011854:	46bd      	mov	sp, r7
 8011856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801185a:	4770      	bx	lr

0801185c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801185c:	b580      	push	{r7, lr}
 801185e:	b084      	sub	sp, #16
 8011860:	af00      	add	r7, sp, #0
 8011862:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8011864:	2300      	movs	r3, #0
 8011866:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	2201      	movs	r2, #1
 801186c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011876:	2b00      	cmp	r3, #0
 8011878:	d00e      	beq.n	8011898 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011880:	685b      	ldr	r3, [r3, #4]
 8011882:	687a      	ldr	r2, [r7, #4]
 8011884:	6852      	ldr	r2, [r2, #4]
 8011886:	b2d2      	uxtb	r2, r2
 8011888:	4611      	mov	r1, r2
 801188a:	6878      	ldr	r0, [r7, #4]
 801188c:	4798      	blx	r3
 801188e:	4603      	mov	r3, r0
 8011890:	2b00      	cmp	r3, #0
 8011892:	d001      	beq.n	8011898 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8011894:	2303      	movs	r3, #3
 8011896:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011898:	7bfb      	ldrb	r3, [r7, #15]
}
 801189a:	4618      	mov	r0, r3
 801189c:	3710      	adds	r7, #16
 801189e:	46bd      	mov	sp, r7
 80118a0:	bd80      	pop	{r7, pc}

080118a2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80118a2:	b480      	push	{r7}
 80118a4:	b083      	sub	sp, #12
 80118a6:	af00      	add	r7, sp, #0
 80118a8:	6078      	str	r0, [r7, #4]
 80118aa:	460b      	mov	r3, r1
 80118ac:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80118ae:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80118b0:	4618      	mov	r0, r3
 80118b2:	370c      	adds	r7, #12
 80118b4:	46bd      	mov	sp, r7
 80118b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ba:	4770      	bx	lr

080118bc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80118bc:	b480      	push	{r7}
 80118be:	b083      	sub	sp, #12
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	6078      	str	r0, [r7, #4]
 80118c4:	460b      	mov	r3, r1
 80118c6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80118c8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80118ca:	4618      	mov	r0, r3
 80118cc:	370c      	adds	r7, #12
 80118ce:	46bd      	mov	sp, r7
 80118d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d4:	4770      	bx	lr

080118d6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80118d6:	b580      	push	{r7, lr}
 80118d8:	b086      	sub	sp, #24
 80118da:	af00      	add	r7, sp, #0
 80118dc:	6078      	str	r0, [r7, #4]
 80118de:	460b      	mov	r3, r1
 80118e0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80118ea:	2300      	movs	r3, #0
 80118ec:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	885b      	ldrh	r3, [r3, #2]
 80118f2:	b29b      	uxth	r3, r3
 80118f4:	68fa      	ldr	r2, [r7, #12]
 80118f6:	7812      	ldrb	r2, [r2, #0]
 80118f8:	4293      	cmp	r3, r2
 80118fa:	d91f      	bls.n	801193c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	781b      	ldrb	r3, [r3, #0]
 8011900:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8011902:	e013      	b.n	801192c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8011904:	f107 030a 	add.w	r3, r7, #10
 8011908:	4619      	mov	r1, r3
 801190a:	6978      	ldr	r0, [r7, #20]
 801190c:	f000 f81b 	bl	8011946 <USBD_GetNextDesc>
 8011910:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8011912:	697b      	ldr	r3, [r7, #20]
 8011914:	785b      	ldrb	r3, [r3, #1]
 8011916:	2b05      	cmp	r3, #5
 8011918:	d108      	bne.n	801192c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801191a:	697b      	ldr	r3, [r7, #20]
 801191c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801191e:	693b      	ldr	r3, [r7, #16]
 8011920:	789b      	ldrb	r3, [r3, #2]
 8011922:	78fa      	ldrb	r2, [r7, #3]
 8011924:	429a      	cmp	r2, r3
 8011926:	d008      	beq.n	801193a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8011928:	2300      	movs	r3, #0
 801192a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	885b      	ldrh	r3, [r3, #2]
 8011930:	b29a      	uxth	r2, r3
 8011932:	897b      	ldrh	r3, [r7, #10]
 8011934:	429a      	cmp	r2, r3
 8011936:	d8e5      	bhi.n	8011904 <USBD_GetEpDesc+0x2e>
 8011938:	e000      	b.n	801193c <USBD_GetEpDesc+0x66>
          break;
 801193a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 801193c:	693b      	ldr	r3, [r7, #16]
}
 801193e:	4618      	mov	r0, r3
 8011940:	3718      	adds	r7, #24
 8011942:	46bd      	mov	sp, r7
 8011944:	bd80      	pop	{r7, pc}

08011946 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8011946:	b480      	push	{r7}
 8011948:	b085      	sub	sp, #20
 801194a:	af00      	add	r7, sp, #0
 801194c:	6078      	str	r0, [r7, #4]
 801194e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8011954:	683b      	ldr	r3, [r7, #0]
 8011956:	881b      	ldrh	r3, [r3, #0]
 8011958:	68fa      	ldr	r2, [r7, #12]
 801195a:	7812      	ldrb	r2, [r2, #0]
 801195c:	4413      	add	r3, r2
 801195e:	b29a      	uxth	r2, r3
 8011960:	683b      	ldr	r3, [r7, #0]
 8011962:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	781b      	ldrb	r3, [r3, #0]
 8011968:	461a      	mov	r2, r3
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	4413      	add	r3, r2
 801196e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8011970:	68fb      	ldr	r3, [r7, #12]
}
 8011972:	4618      	mov	r0, r3
 8011974:	3714      	adds	r7, #20
 8011976:	46bd      	mov	sp, r7
 8011978:	f85d 7b04 	ldr.w	r7, [sp], #4
 801197c:	4770      	bx	lr

0801197e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801197e:	b480      	push	{r7}
 8011980:	b087      	sub	sp, #28
 8011982:	af00      	add	r7, sp, #0
 8011984:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801198a:	697b      	ldr	r3, [r7, #20]
 801198c:	781b      	ldrb	r3, [r3, #0]
 801198e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011990:	697b      	ldr	r3, [r7, #20]
 8011992:	3301      	adds	r3, #1
 8011994:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011996:	697b      	ldr	r3, [r7, #20]
 8011998:	781b      	ldrb	r3, [r3, #0]
 801199a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801199c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80119a0:	021b      	lsls	r3, r3, #8
 80119a2:	b21a      	sxth	r2, r3
 80119a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80119a8:	4313      	orrs	r3, r2
 80119aa:	b21b      	sxth	r3, r3
 80119ac:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80119ae:	89fb      	ldrh	r3, [r7, #14]
}
 80119b0:	4618      	mov	r0, r3
 80119b2:	371c      	adds	r7, #28
 80119b4:	46bd      	mov	sp, r7
 80119b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ba:	4770      	bx	lr

080119bc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80119bc:	b580      	push	{r7, lr}
 80119be:	b084      	sub	sp, #16
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	6078      	str	r0, [r7, #4]
 80119c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80119c6:	2300      	movs	r3, #0
 80119c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80119ca:	683b      	ldr	r3, [r7, #0]
 80119cc:	781b      	ldrb	r3, [r3, #0]
 80119ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80119d2:	2b40      	cmp	r3, #64	@ 0x40
 80119d4:	d005      	beq.n	80119e2 <USBD_StdDevReq+0x26>
 80119d6:	2b40      	cmp	r3, #64	@ 0x40
 80119d8:	d857      	bhi.n	8011a8a <USBD_StdDevReq+0xce>
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d00f      	beq.n	80119fe <USBD_StdDevReq+0x42>
 80119de:	2b20      	cmp	r3, #32
 80119e0:	d153      	bne.n	8011a8a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	32ae      	adds	r2, #174	@ 0xae
 80119ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80119f0:	689b      	ldr	r3, [r3, #8]
 80119f2:	6839      	ldr	r1, [r7, #0]
 80119f4:	6878      	ldr	r0, [r7, #4]
 80119f6:	4798      	blx	r3
 80119f8:	4603      	mov	r3, r0
 80119fa:	73fb      	strb	r3, [r7, #15]
      break;
 80119fc:	e04a      	b.n	8011a94 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80119fe:	683b      	ldr	r3, [r7, #0]
 8011a00:	785b      	ldrb	r3, [r3, #1]
 8011a02:	2b09      	cmp	r3, #9
 8011a04:	d83b      	bhi.n	8011a7e <USBD_StdDevReq+0xc2>
 8011a06:	a201      	add	r2, pc, #4	@ (adr r2, 8011a0c <USBD_StdDevReq+0x50>)
 8011a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a0c:	08011a61 	.word	0x08011a61
 8011a10:	08011a75 	.word	0x08011a75
 8011a14:	08011a7f 	.word	0x08011a7f
 8011a18:	08011a6b 	.word	0x08011a6b
 8011a1c:	08011a7f 	.word	0x08011a7f
 8011a20:	08011a3f 	.word	0x08011a3f
 8011a24:	08011a35 	.word	0x08011a35
 8011a28:	08011a7f 	.word	0x08011a7f
 8011a2c:	08011a57 	.word	0x08011a57
 8011a30:	08011a49 	.word	0x08011a49
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011a34:	6839      	ldr	r1, [r7, #0]
 8011a36:	6878      	ldr	r0, [r7, #4]
 8011a38:	f000 fa3c 	bl	8011eb4 <USBD_GetDescriptor>
          break;
 8011a3c:	e024      	b.n	8011a88 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011a3e:	6839      	ldr	r1, [r7, #0]
 8011a40:	6878      	ldr	r0, [r7, #4]
 8011a42:	f000 fbcb 	bl	80121dc <USBD_SetAddress>
          break;
 8011a46:	e01f      	b.n	8011a88 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011a48:	6839      	ldr	r1, [r7, #0]
 8011a4a:	6878      	ldr	r0, [r7, #4]
 8011a4c:	f000 fc0a 	bl	8012264 <USBD_SetConfig>
 8011a50:	4603      	mov	r3, r0
 8011a52:	73fb      	strb	r3, [r7, #15]
          break;
 8011a54:	e018      	b.n	8011a88 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8011a56:	6839      	ldr	r1, [r7, #0]
 8011a58:	6878      	ldr	r0, [r7, #4]
 8011a5a:	f000 fcad 	bl	80123b8 <USBD_GetConfig>
          break;
 8011a5e:	e013      	b.n	8011a88 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011a60:	6839      	ldr	r1, [r7, #0]
 8011a62:	6878      	ldr	r0, [r7, #4]
 8011a64:	f000 fcde 	bl	8012424 <USBD_GetStatus>
          break;
 8011a68:	e00e      	b.n	8011a88 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011a6a:	6839      	ldr	r1, [r7, #0]
 8011a6c:	6878      	ldr	r0, [r7, #4]
 8011a6e:	f000 fd0d 	bl	801248c <USBD_SetFeature>
          break;
 8011a72:	e009      	b.n	8011a88 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011a74:	6839      	ldr	r1, [r7, #0]
 8011a76:	6878      	ldr	r0, [r7, #4]
 8011a78:	f000 fd31 	bl	80124de <USBD_ClrFeature>
          break;
 8011a7c:	e004      	b.n	8011a88 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8011a7e:	6839      	ldr	r1, [r7, #0]
 8011a80:	6878      	ldr	r0, [r7, #4]
 8011a82:	f000 fd88 	bl	8012596 <USBD_CtlError>
          break;
 8011a86:	bf00      	nop
      }
      break;
 8011a88:	e004      	b.n	8011a94 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8011a8a:	6839      	ldr	r1, [r7, #0]
 8011a8c:	6878      	ldr	r0, [r7, #4]
 8011a8e:	f000 fd82 	bl	8012596 <USBD_CtlError>
      break;
 8011a92:	bf00      	nop
  }

  return ret;
 8011a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a96:	4618      	mov	r0, r3
 8011a98:	3710      	adds	r7, #16
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	bd80      	pop	{r7, pc}
 8011a9e:	bf00      	nop

08011aa0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	b084      	sub	sp, #16
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
 8011aa8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011aaa:	2300      	movs	r3, #0
 8011aac:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011aae:	683b      	ldr	r3, [r7, #0]
 8011ab0:	781b      	ldrb	r3, [r3, #0]
 8011ab2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011ab6:	2b40      	cmp	r3, #64	@ 0x40
 8011ab8:	d005      	beq.n	8011ac6 <USBD_StdItfReq+0x26>
 8011aba:	2b40      	cmp	r3, #64	@ 0x40
 8011abc:	d852      	bhi.n	8011b64 <USBD_StdItfReq+0xc4>
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d001      	beq.n	8011ac6 <USBD_StdItfReq+0x26>
 8011ac2:	2b20      	cmp	r3, #32
 8011ac4:	d14e      	bne.n	8011b64 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011acc:	b2db      	uxtb	r3, r3
 8011ace:	3b01      	subs	r3, #1
 8011ad0:	2b02      	cmp	r3, #2
 8011ad2:	d840      	bhi.n	8011b56 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011ad4:	683b      	ldr	r3, [r7, #0]
 8011ad6:	889b      	ldrh	r3, [r3, #4]
 8011ad8:	b2db      	uxtb	r3, r3
 8011ada:	2b01      	cmp	r3, #1
 8011adc:	d836      	bhi.n	8011b4c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8011ade:	683b      	ldr	r3, [r7, #0]
 8011ae0:	889b      	ldrh	r3, [r3, #4]
 8011ae2:	b2db      	uxtb	r3, r3
 8011ae4:	4619      	mov	r1, r3
 8011ae6:	6878      	ldr	r0, [r7, #4]
 8011ae8:	f7ff fedb 	bl	80118a2 <USBD_CoreFindIF>
 8011aec:	4603      	mov	r3, r0
 8011aee:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011af0:	7bbb      	ldrb	r3, [r7, #14]
 8011af2:	2bff      	cmp	r3, #255	@ 0xff
 8011af4:	d01d      	beq.n	8011b32 <USBD_StdItfReq+0x92>
 8011af6:	7bbb      	ldrb	r3, [r7, #14]
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d11a      	bne.n	8011b32 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8011afc:	7bba      	ldrb	r2, [r7, #14]
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	32ae      	adds	r2, #174	@ 0xae
 8011b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b06:	689b      	ldr	r3, [r3, #8]
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d00f      	beq.n	8011b2c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8011b0c:	7bba      	ldrb	r2, [r7, #14]
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011b14:	7bba      	ldrb	r2, [r7, #14]
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	32ae      	adds	r2, #174	@ 0xae
 8011b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b1e:	689b      	ldr	r3, [r3, #8]
 8011b20:	6839      	ldr	r1, [r7, #0]
 8011b22:	6878      	ldr	r0, [r7, #4]
 8011b24:	4798      	blx	r3
 8011b26:	4603      	mov	r3, r0
 8011b28:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011b2a:	e004      	b.n	8011b36 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8011b2c:	2303      	movs	r3, #3
 8011b2e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011b30:	e001      	b.n	8011b36 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8011b32:	2303      	movs	r3, #3
 8011b34:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011b36:	683b      	ldr	r3, [r7, #0]
 8011b38:	88db      	ldrh	r3, [r3, #6]
 8011b3a:	2b00      	cmp	r3, #0
 8011b3c:	d110      	bne.n	8011b60 <USBD_StdItfReq+0xc0>
 8011b3e:	7bfb      	ldrb	r3, [r7, #15]
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d10d      	bne.n	8011b60 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011b44:	6878      	ldr	r0, [r7, #4]
 8011b46:	f000 fdfd 	bl	8012744 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011b4a:	e009      	b.n	8011b60 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8011b4c:	6839      	ldr	r1, [r7, #0]
 8011b4e:	6878      	ldr	r0, [r7, #4]
 8011b50:	f000 fd21 	bl	8012596 <USBD_CtlError>
          break;
 8011b54:	e004      	b.n	8011b60 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8011b56:	6839      	ldr	r1, [r7, #0]
 8011b58:	6878      	ldr	r0, [r7, #4]
 8011b5a:	f000 fd1c 	bl	8012596 <USBD_CtlError>
          break;
 8011b5e:	e000      	b.n	8011b62 <USBD_StdItfReq+0xc2>
          break;
 8011b60:	bf00      	nop
      }
      break;
 8011b62:	e004      	b.n	8011b6e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8011b64:	6839      	ldr	r1, [r7, #0]
 8011b66:	6878      	ldr	r0, [r7, #4]
 8011b68:	f000 fd15 	bl	8012596 <USBD_CtlError>
      break;
 8011b6c:	bf00      	nop
  }

  return ret;
 8011b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b70:	4618      	mov	r0, r3
 8011b72:	3710      	adds	r7, #16
 8011b74:	46bd      	mov	sp, r7
 8011b76:	bd80      	pop	{r7, pc}

08011b78 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b084      	sub	sp, #16
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	6078      	str	r0, [r7, #4]
 8011b80:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8011b82:	2300      	movs	r3, #0
 8011b84:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8011b86:	683b      	ldr	r3, [r7, #0]
 8011b88:	889b      	ldrh	r3, [r3, #4]
 8011b8a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011b8c:	683b      	ldr	r3, [r7, #0]
 8011b8e:	781b      	ldrb	r3, [r3, #0]
 8011b90:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011b94:	2b40      	cmp	r3, #64	@ 0x40
 8011b96:	d007      	beq.n	8011ba8 <USBD_StdEPReq+0x30>
 8011b98:	2b40      	cmp	r3, #64	@ 0x40
 8011b9a:	f200 817f 	bhi.w	8011e9c <USBD_StdEPReq+0x324>
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d02a      	beq.n	8011bf8 <USBD_StdEPReq+0x80>
 8011ba2:	2b20      	cmp	r3, #32
 8011ba4:	f040 817a 	bne.w	8011e9c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8011ba8:	7bbb      	ldrb	r3, [r7, #14]
 8011baa:	4619      	mov	r1, r3
 8011bac:	6878      	ldr	r0, [r7, #4]
 8011bae:	f7ff fe85 	bl	80118bc <USBD_CoreFindEP>
 8011bb2:	4603      	mov	r3, r0
 8011bb4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011bb6:	7b7b      	ldrb	r3, [r7, #13]
 8011bb8:	2bff      	cmp	r3, #255	@ 0xff
 8011bba:	f000 8174 	beq.w	8011ea6 <USBD_StdEPReq+0x32e>
 8011bbe:	7b7b      	ldrb	r3, [r7, #13]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	f040 8170 	bne.w	8011ea6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8011bc6:	7b7a      	ldrb	r2, [r7, #13]
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8011bce:	7b7a      	ldrb	r2, [r7, #13]
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	32ae      	adds	r2, #174	@ 0xae
 8011bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011bd8:	689b      	ldr	r3, [r3, #8]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	f000 8163 	beq.w	8011ea6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8011be0:	7b7a      	ldrb	r2, [r7, #13]
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	32ae      	adds	r2, #174	@ 0xae
 8011be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011bea:	689b      	ldr	r3, [r3, #8]
 8011bec:	6839      	ldr	r1, [r7, #0]
 8011bee:	6878      	ldr	r0, [r7, #4]
 8011bf0:	4798      	blx	r3
 8011bf2:	4603      	mov	r3, r0
 8011bf4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8011bf6:	e156      	b.n	8011ea6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011bf8:	683b      	ldr	r3, [r7, #0]
 8011bfa:	785b      	ldrb	r3, [r3, #1]
 8011bfc:	2b03      	cmp	r3, #3
 8011bfe:	d008      	beq.n	8011c12 <USBD_StdEPReq+0x9a>
 8011c00:	2b03      	cmp	r3, #3
 8011c02:	f300 8145 	bgt.w	8011e90 <USBD_StdEPReq+0x318>
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	f000 809b 	beq.w	8011d42 <USBD_StdEPReq+0x1ca>
 8011c0c:	2b01      	cmp	r3, #1
 8011c0e:	d03c      	beq.n	8011c8a <USBD_StdEPReq+0x112>
 8011c10:	e13e      	b.n	8011e90 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011c18:	b2db      	uxtb	r3, r3
 8011c1a:	2b02      	cmp	r3, #2
 8011c1c:	d002      	beq.n	8011c24 <USBD_StdEPReq+0xac>
 8011c1e:	2b03      	cmp	r3, #3
 8011c20:	d016      	beq.n	8011c50 <USBD_StdEPReq+0xd8>
 8011c22:	e02c      	b.n	8011c7e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011c24:	7bbb      	ldrb	r3, [r7, #14]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d00d      	beq.n	8011c46 <USBD_StdEPReq+0xce>
 8011c2a:	7bbb      	ldrb	r3, [r7, #14]
 8011c2c:	2b80      	cmp	r3, #128	@ 0x80
 8011c2e:	d00a      	beq.n	8011c46 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011c30:	7bbb      	ldrb	r3, [r7, #14]
 8011c32:	4619      	mov	r1, r3
 8011c34:	6878      	ldr	r0, [r7, #4]
 8011c36:	f001 f9e1 	bl	8012ffc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011c3a:	2180      	movs	r1, #128	@ 0x80
 8011c3c:	6878      	ldr	r0, [r7, #4]
 8011c3e:	f001 f9dd 	bl	8012ffc <USBD_LL_StallEP>
 8011c42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011c44:	e020      	b.n	8011c88 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8011c46:	6839      	ldr	r1, [r7, #0]
 8011c48:	6878      	ldr	r0, [r7, #4]
 8011c4a:	f000 fca4 	bl	8012596 <USBD_CtlError>
              break;
 8011c4e:	e01b      	b.n	8011c88 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011c50:	683b      	ldr	r3, [r7, #0]
 8011c52:	885b      	ldrh	r3, [r3, #2]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d10e      	bne.n	8011c76 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011c58:	7bbb      	ldrb	r3, [r7, #14]
 8011c5a:	2b00      	cmp	r3, #0
 8011c5c:	d00b      	beq.n	8011c76 <USBD_StdEPReq+0xfe>
 8011c5e:	7bbb      	ldrb	r3, [r7, #14]
 8011c60:	2b80      	cmp	r3, #128	@ 0x80
 8011c62:	d008      	beq.n	8011c76 <USBD_StdEPReq+0xfe>
 8011c64:	683b      	ldr	r3, [r7, #0]
 8011c66:	88db      	ldrh	r3, [r3, #6]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d104      	bne.n	8011c76 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011c6c:	7bbb      	ldrb	r3, [r7, #14]
 8011c6e:	4619      	mov	r1, r3
 8011c70:	6878      	ldr	r0, [r7, #4]
 8011c72:	f001 f9c3 	bl	8012ffc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8011c76:	6878      	ldr	r0, [r7, #4]
 8011c78:	f000 fd64 	bl	8012744 <USBD_CtlSendStatus>

              break;
 8011c7c:	e004      	b.n	8011c88 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8011c7e:	6839      	ldr	r1, [r7, #0]
 8011c80:	6878      	ldr	r0, [r7, #4]
 8011c82:	f000 fc88 	bl	8012596 <USBD_CtlError>
              break;
 8011c86:	bf00      	nop
          }
          break;
 8011c88:	e107      	b.n	8011e9a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011c90:	b2db      	uxtb	r3, r3
 8011c92:	2b02      	cmp	r3, #2
 8011c94:	d002      	beq.n	8011c9c <USBD_StdEPReq+0x124>
 8011c96:	2b03      	cmp	r3, #3
 8011c98:	d016      	beq.n	8011cc8 <USBD_StdEPReq+0x150>
 8011c9a:	e04b      	b.n	8011d34 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011c9c:	7bbb      	ldrb	r3, [r7, #14]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d00d      	beq.n	8011cbe <USBD_StdEPReq+0x146>
 8011ca2:	7bbb      	ldrb	r3, [r7, #14]
 8011ca4:	2b80      	cmp	r3, #128	@ 0x80
 8011ca6:	d00a      	beq.n	8011cbe <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011ca8:	7bbb      	ldrb	r3, [r7, #14]
 8011caa:	4619      	mov	r1, r3
 8011cac:	6878      	ldr	r0, [r7, #4]
 8011cae:	f001 f9a5 	bl	8012ffc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011cb2:	2180      	movs	r1, #128	@ 0x80
 8011cb4:	6878      	ldr	r0, [r7, #4]
 8011cb6:	f001 f9a1 	bl	8012ffc <USBD_LL_StallEP>
 8011cba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011cbc:	e040      	b.n	8011d40 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8011cbe:	6839      	ldr	r1, [r7, #0]
 8011cc0:	6878      	ldr	r0, [r7, #4]
 8011cc2:	f000 fc68 	bl	8012596 <USBD_CtlError>
              break;
 8011cc6:	e03b      	b.n	8011d40 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011cc8:	683b      	ldr	r3, [r7, #0]
 8011cca:	885b      	ldrh	r3, [r3, #2]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d136      	bne.n	8011d3e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011cd0:	7bbb      	ldrb	r3, [r7, #14]
 8011cd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d004      	beq.n	8011ce4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011cda:	7bbb      	ldrb	r3, [r7, #14]
 8011cdc:	4619      	mov	r1, r3
 8011cde:	6878      	ldr	r0, [r7, #4]
 8011ce0:	f001 f9ab 	bl	801303a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8011ce4:	6878      	ldr	r0, [r7, #4]
 8011ce6:	f000 fd2d 	bl	8012744 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8011cea:	7bbb      	ldrb	r3, [r7, #14]
 8011cec:	4619      	mov	r1, r3
 8011cee:	6878      	ldr	r0, [r7, #4]
 8011cf0:	f7ff fde4 	bl	80118bc <USBD_CoreFindEP>
 8011cf4:	4603      	mov	r3, r0
 8011cf6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011cf8:	7b7b      	ldrb	r3, [r7, #13]
 8011cfa:	2bff      	cmp	r3, #255	@ 0xff
 8011cfc:	d01f      	beq.n	8011d3e <USBD_StdEPReq+0x1c6>
 8011cfe:	7b7b      	ldrb	r3, [r7, #13]
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d11c      	bne.n	8011d3e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8011d04:	7b7a      	ldrb	r2, [r7, #13]
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8011d0c:	7b7a      	ldrb	r2, [r7, #13]
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	32ae      	adds	r2, #174	@ 0xae
 8011d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d16:	689b      	ldr	r3, [r3, #8]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d010      	beq.n	8011d3e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011d1c:	7b7a      	ldrb	r2, [r7, #13]
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	32ae      	adds	r2, #174	@ 0xae
 8011d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d26:	689b      	ldr	r3, [r3, #8]
 8011d28:	6839      	ldr	r1, [r7, #0]
 8011d2a:	6878      	ldr	r0, [r7, #4]
 8011d2c:	4798      	blx	r3
 8011d2e:	4603      	mov	r3, r0
 8011d30:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8011d32:	e004      	b.n	8011d3e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8011d34:	6839      	ldr	r1, [r7, #0]
 8011d36:	6878      	ldr	r0, [r7, #4]
 8011d38:	f000 fc2d 	bl	8012596 <USBD_CtlError>
              break;
 8011d3c:	e000      	b.n	8011d40 <USBD_StdEPReq+0x1c8>
              break;
 8011d3e:	bf00      	nop
          }
          break;
 8011d40:	e0ab      	b.n	8011e9a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011d48:	b2db      	uxtb	r3, r3
 8011d4a:	2b02      	cmp	r3, #2
 8011d4c:	d002      	beq.n	8011d54 <USBD_StdEPReq+0x1dc>
 8011d4e:	2b03      	cmp	r3, #3
 8011d50:	d032      	beq.n	8011db8 <USBD_StdEPReq+0x240>
 8011d52:	e097      	b.n	8011e84 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011d54:	7bbb      	ldrb	r3, [r7, #14]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d007      	beq.n	8011d6a <USBD_StdEPReq+0x1f2>
 8011d5a:	7bbb      	ldrb	r3, [r7, #14]
 8011d5c:	2b80      	cmp	r3, #128	@ 0x80
 8011d5e:	d004      	beq.n	8011d6a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8011d60:	6839      	ldr	r1, [r7, #0]
 8011d62:	6878      	ldr	r0, [r7, #4]
 8011d64:	f000 fc17 	bl	8012596 <USBD_CtlError>
                break;
 8011d68:	e091      	b.n	8011e8e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011d6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	da0b      	bge.n	8011d8a <USBD_StdEPReq+0x212>
 8011d72:	7bbb      	ldrb	r3, [r7, #14]
 8011d74:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011d78:	4613      	mov	r3, r2
 8011d7a:	009b      	lsls	r3, r3, #2
 8011d7c:	4413      	add	r3, r2
 8011d7e:	009b      	lsls	r3, r3, #2
 8011d80:	3310      	adds	r3, #16
 8011d82:	687a      	ldr	r2, [r7, #4]
 8011d84:	4413      	add	r3, r2
 8011d86:	3304      	adds	r3, #4
 8011d88:	e00b      	b.n	8011da2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011d8a:	7bbb      	ldrb	r3, [r7, #14]
 8011d8c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011d90:	4613      	mov	r3, r2
 8011d92:	009b      	lsls	r3, r3, #2
 8011d94:	4413      	add	r3, r2
 8011d96:	009b      	lsls	r3, r3, #2
 8011d98:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8011d9c:	687a      	ldr	r2, [r7, #4]
 8011d9e:	4413      	add	r3, r2
 8011da0:	3304      	adds	r3, #4
 8011da2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8011da4:	68bb      	ldr	r3, [r7, #8]
 8011da6:	2200      	movs	r2, #0
 8011da8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011daa:	68bb      	ldr	r3, [r7, #8]
 8011dac:	2202      	movs	r2, #2
 8011dae:	4619      	mov	r1, r3
 8011db0:	6878      	ldr	r0, [r7, #4]
 8011db2:	f000 fc6d 	bl	8012690 <USBD_CtlSendData>
              break;
 8011db6:	e06a      	b.n	8011e8e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8011db8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	da11      	bge.n	8011de4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8011dc0:	7bbb      	ldrb	r3, [r7, #14]
 8011dc2:	f003 020f 	and.w	r2, r3, #15
 8011dc6:	6879      	ldr	r1, [r7, #4]
 8011dc8:	4613      	mov	r3, r2
 8011dca:	009b      	lsls	r3, r3, #2
 8011dcc:	4413      	add	r3, r2
 8011dce:	009b      	lsls	r3, r3, #2
 8011dd0:	440b      	add	r3, r1
 8011dd2:	3324      	adds	r3, #36	@ 0x24
 8011dd4:	881b      	ldrh	r3, [r3, #0]
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d117      	bne.n	8011e0a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011dda:	6839      	ldr	r1, [r7, #0]
 8011ddc:	6878      	ldr	r0, [r7, #4]
 8011dde:	f000 fbda 	bl	8012596 <USBD_CtlError>
                  break;
 8011de2:	e054      	b.n	8011e8e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8011de4:	7bbb      	ldrb	r3, [r7, #14]
 8011de6:	f003 020f 	and.w	r2, r3, #15
 8011dea:	6879      	ldr	r1, [r7, #4]
 8011dec:	4613      	mov	r3, r2
 8011dee:	009b      	lsls	r3, r3, #2
 8011df0:	4413      	add	r3, r2
 8011df2:	009b      	lsls	r3, r3, #2
 8011df4:	440b      	add	r3, r1
 8011df6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011dfa:	881b      	ldrh	r3, [r3, #0]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d104      	bne.n	8011e0a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8011e00:	6839      	ldr	r1, [r7, #0]
 8011e02:	6878      	ldr	r0, [r7, #4]
 8011e04:	f000 fbc7 	bl	8012596 <USBD_CtlError>
                  break;
 8011e08:	e041      	b.n	8011e8e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011e0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	da0b      	bge.n	8011e2a <USBD_StdEPReq+0x2b2>
 8011e12:	7bbb      	ldrb	r3, [r7, #14]
 8011e14:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011e18:	4613      	mov	r3, r2
 8011e1a:	009b      	lsls	r3, r3, #2
 8011e1c:	4413      	add	r3, r2
 8011e1e:	009b      	lsls	r3, r3, #2
 8011e20:	3310      	adds	r3, #16
 8011e22:	687a      	ldr	r2, [r7, #4]
 8011e24:	4413      	add	r3, r2
 8011e26:	3304      	adds	r3, #4
 8011e28:	e00b      	b.n	8011e42 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8011e2a:	7bbb      	ldrb	r3, [r7, #14]
 8011e2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011e30:	4613      	mov	r3, r2
 8011e32:	009b      	lsls	r3, r3, #2
 8011e34:	4413      	add	r3, r2
 8011e36:	009b      	lsls	r3, r3, #2
 8011e38:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8011e3c:	687a      	ldr	r2, [r7, #4]
 8011e3e:	4413      	add	r3, r2
 8011e40:	3304      	adds	r3, #4
 8011e42:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8011e44:	7bbb      	ldrb	r3, [r7, #14]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d002      	beq.n	8011e50 <USBD_StdEPReq+0x2d8>
 8011e4a:	7bbb      	ldrb	r3, [r7, #14]
 8011e4c:	2b80      	cmp	r3, #128	@ 0x80
 8011e4e:	d103      	bne.n	8011e58 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8011e50:	68bb      	ldr	r3, [r7, #8]
 8011e52:	2200      	movs	r2, #0
 8011e54:	601a      	str	r2, [r3, #0]
 8011e56:	e00e      	b.n	8011e76 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8011e58:	7bbb      	ldrb	r3, [r7, #14]
 8011e5a:	4619      	mov	r1, r3
 8011e5c:	6878      	ldr	r0, [r7, #4]
 8011e5e:	f001 f90b 	bl	8013078 <USBD_LL_IsStallEP>
 8011e62:	4603      	mov	r3, r0
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d003      	beq.n	8011e70 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8011e68:	68bb      	ldr	r3, [r7, #8]
 8011e6a:	2201      	movs	r2, #1
 8011e6c:	601a      	str	r2, [r3, #0]
 8011e6e:	e002      	b.n	8011e76 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8011e70:	68bb      	ldr	r3, [r7, #8]
 8011e72:	2200      	movs	r2, #0
 8011e74:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8011e76:	68bb      	ldr	r3, [r7, #8]
 8011e78:	2202      	movs	r2, #2
 8011e7a:	4619      	mov	r1, r3
 8011e7c:	6878      	ldr	r0, [r7, #4]
 8011e7e:	f000 fc07 	bl	8012690 <USBD_CtlSendData>
              break;
 8011e82:	e004      	b.n	8011e8e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8011e84:	6839      	ldr	r1, [r7, #0]
 8011e86:	6878      	ldr	r0, [r7, #4]
 8011e88:	f000 fb85 	bl	8012596 <USBD_CtlError>
              break;
 8011e8c:	bf00      	nop
          }
          break;
 8011e8e:	e004      	b.n	8011e9a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8011e90:	6839      	ldr	r1, [r7, #0]
 8011e92:	6878      	ldr	r0, [r7, #4]
 8011e94:	f000 fb7f 	bl	8012596 <USBD_CtlError>
          break;
 8011e98:	bf00      	nop
      }
      break;
 8011e9a:	e005      	b.n	8011ea8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8011e9c:	6839      	ldr	r1, [r7, #0]
 8011e9e:	6878      	ldr	r0, [r7, #4]
 8011ea0:	f000 fb79 	bl	8012596 <USBD_CtlError>
      break;
 8011ea4:	e000      	b.n	8011ea8 <USBD_StdEPReq+0x330>
      break;
 8011ea6:	bf00      	nop
  }

  return ret;
 8011ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011eaa:	4618      	mov	r0, r3
 8011eac:	3710      	adds	r7, #16
 8011eae:	46bd      	mov	sp, r7
 8011eb0:	bd80      	pop	{r7, pc}
	...

08011eb4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b084      	sub	sp, #16
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	6078      	str	r0, [r7, #4]
 8011ebc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011ebe:	2300      	movs	r3, #0
 8011ec0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8011ec2:	2300      	movs	r3, #0
 8011ec4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8011ec6:	2300      	movs	r3, #0
 8011ec8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8011eca:	683b      	ldr	r3, [r7, #0]
 8011ecc:	885b      	ldrh	r3, [r3, #2]
 8011ece:	0a1b      	lsrs	r3, r3, #8
 8011ed0:	b29b      	uxth	r3, r3
 8011ed2:	3b01      	subs	r3, #1
 8011ed4:	2b0e      	cmp	r3, #14
 8011ed6:	f200 8152 	bhi.w	801217e <USBD_GetDescriptor+0x2ca>
 8011eda:	a201      	add	r2, pc, #4	@ (adr r2, 8011ee0 <USBD_GetDescriptor+0x2c>)
 8011edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ee0:	08011f51 	.word	0x08011f51
 8011ee4:	08011f69 	.word	0x08011f69
 8011ee8:	08011fa9 	.word	0x08011fa9
 8011eec:	0801217f 	.word	0x0801217f
 8011ef0:	0801217f 	.word	0x0801217f
 8011ef4:	0801211f 	.word	0x0801211f
 8011ef8:	0801214b 	.word	0x0801214b
 8011efc:	0801217f 	.word	0x0801217f
 8011f00:	0801217f 	.word	0x0801217f
 8011f04:	0801217f 	.word	0x0801217f
 8011f08:	0801217f 	.word	0x0801217f
 8011f0c:	0801217f 	.word	0x0801217f
 8011f10:	0801217f 	.word	0x0801217f
 8011f14:	0801217f 	.word	0x0801217f
 8011f18:	08011f1d 	.word	0x08011f1d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011f22:	69db      	ldr	r3, [r3, #28]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d00b      	beq.n	8011f40 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011f2e:	69db      	ldr	r3, [r3, #28]
 8011f30:	687a      	ldr	r2, [r7, #4]
 8011f32:	7c12      	ldrb	r2, [r2, #16]
 8011f34:	f107 0108 	add.w	r1, r7, #8
 8011f38:	4610      	mov	r0, r2
 8011f3a:	4798      	blx	r3
 8011f3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011f3e:	e126      	b.n	801218e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011f40:	6839      	ldr	r1, [r7, #0]
 8011f42:	6878      	ldr	r0, [r7, #4]
 8011f44:	f000 fb27 	bl	8012596 <USBD_CtlError>
        err++;
 8011f48:	7afb      	ldrb	r3, [r7, #11]
 8011f4a:	3301      	adds	r3, #1
 8011f4c:	72fb      	strb	r3, [r7, #11]
      break;
 8011f4e:	e11e      	b.n	801218e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	687a      	ldr	r2, [r7, #4]
 8011f5a:	7c12      	ldrb	r2, [r2, #16]
 8011f5c:	f107 0108 	add.w	r1, r7, #8
 8011f60:	4610      	mov	r0, r2
 8011f62:	4798      	blx	r3
 8011f64:	60f8      	str	r0, [r7, #12]
      break;
 8011f66:	e112      	b.n	801218e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	7c1b      	ldrb	r3, [r3, #16]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d10d      	bne.n	8011f8c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011f78:	f107 0208 	add.w	r2, r7, #8
 8011f7c:	4610      	mov	r0, r2
 8011f7e:	4798      	blx	r3
 8011f80:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	3301      	adds	r3, #1
 8011f86:	2202      	movs	r2, #2
 8011f88:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8011f8a:	e100      	b.n	801218e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011f94:	f107 0208 	add.w	r2, r7, #8
 8011f98:	4610      	mov	r0, r2
 8011f9a:	4798      	blx	r3
 8011f9c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	3301      	adds	r3, #1
 8011fa2:	2202      	movs	r2, #2
 8011fa4:	701a      	strb	r2, [r3, #0]
      break;
 8011fa6:	e0f2      	b.n	801218e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8011fa8:	683b      	ldr	r3, [r7, #0]
 8011faa:	885b      	ldrh	r3, [r3, #2]
 8011fac:	b2db      	uxtb	r3, r3
 8011fae:	2b05      	cmp	r3, #5
 8011fb0:	f200 80ac 	bhi.w	801210c <USBD_GetDescriptor+0x258>
 8011fb4:	a201      	add	r2, pc, #4	@ (adr r2, 8011fbc <USBD_GetDescriptor+0x108>)
 8011fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fba:	bf00      	nop
 8011fbc:	08011fd5 	.word	0x08011fd5
 8011fc0:	08012009 	.word	0x08012009
 8011fc4:	0801203d 	.word	0x0801203d
 8011fc8:	08012071 	.word	0x08012071
 8011fcc:	080120a5 	.word	0x080120a5
 8011fd0:	080120d9 	.word	0x080120d9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011fda:	685b      	ldr	r3, [r3, #4]
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d00b      	beq.n	8011ff8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8011fe0:	687b      	ldr	r3, [r7, #4]
 8011fe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011fe6:	685b      	ldr	r3, [r3, #4]
 8011fe8:	687a      	ldr	r2, [r7, #4]
 8011fea:	7c12      	ldrb	r2, [r2, #16]
 8011fec:	f107 0108 	add.w	r1, r7, #8
 8011ff0:	4610      	mov	r0, r2
 8011ff2:	4798      	blx	r3
 8011ff4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011ff6:	e091      	b.n	801211c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011ff8:	6839      	ldr	r1, [r7, #0]
 8011ffa:	6878      	ldr	r0, [r7, #4]
 8011ffc:	f000 facb 	bl	8012596 <USBD_CtlError>
            err++;
 8012000:	7afb      	ldrb	r3, [r7, #11]
 8012002:	3301      	adds	r3, #1
 8012004:	72fb      	strb	r3, [r7, #11]
          break;
 8012006:	e089      	b.n	801211c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801200e:	689b      	ldr	r3, [r3, #8]
 8012010:	2b00      	cmp	r3, #0
 8012012:	d00b      	beq.n	801202c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801201a:	689b      	ldr	r3, [r3, #8]
 801201c:	687a      	ldr	r2, [r7, #4]
 801201e:	7c12      	ldrb	r2, [r2, #16]
 8012020:	f107 0108 	add.w	r1, r7, #8
 8012024:	4610      	mov	r0, r2
 8012026:	4798      	blx	r3
 8012028:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801202a:	e077      	b.n	801211c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801202c:	6839      	ldr	r1, [r7, #0]
 801202e:	6878      	ldr	r0, [r7, #4]
 8012030:	f000 fab1 	bl	8012596 <USBD_CtlError>
            err++;
 8012034:	7afb      	ldrb	r3, [r7, #11]
 8012036:	3301      	adds	r3, #1
 8012038:	72fb      	strb	r3, [r7, #11]
          break;
 801203a:	e06f      	b.n	801211c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012042:	68db      	ldr	r3, [r3, #12]
 8012044:	2b00      	cmp	r3, #0
 8012046:	d00b      	beq.n	8012060 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801204e:	68db      	ldr	r3, [r3, #12]
 8012050:	687a      	ldr	r2, [r7, #4]
 8012052:	7c12      	ldrb	r2, [r2, #16]
 8012054:	f107 0108 	add.w	r1, r7, #8
 8012058:	4610      	mov	r0, r2
 801205a:	4798      	blx	r3
 801205c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801205e:	e05d      	b.n	801211c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012060:	6839      	ldr	r1, [r7, #0]
 8012062:	6878      	ldr	r0, [r7, #4]
 8012064:	f000 fa97 	bl	8012596 <USBD_CtlError>
            err++;
 8012068:	7afb      	ldrb	r3, [r7, #11]
 801206a:	3301      	adds	r3, #1
 801206c:	72fb      	strb	r3, [r7, #11]
          break;
 801206e:	e055      	b.n	801211c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012076:	691b      	ldr	r3, [r3, #16]
 8012078:	2b00      	cmp	r3, #0
 801207a:	d00b      	beq.n	8012094 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012082:	691b      	ldr	r3, [r3, #16]
 8012084:	687a      	ldr	r2, [r7, #4]
 8012086:	7c12      	ldrb	r2, [r2, #16]
 8012088:	f107 0108 	add.w	r1, r7, #8
 801208c:	4610      	mov	r0, r2
 801208e:	4798      	blx	r3
 8012090:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012092:	e043      	b.n	801211c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012094:	6839      	ldr	r1, [r7, #0]
 8012096:	6878      	ldr	r0, [r7, #4]
 8012098:	f000 fa7d 	bl	8012596 <USBD_CtlError>
            err++;
 801209c:	7afb      	ldrb	r3, [r7, #11]
 801209e:	3301      	adds	r3, #1
 80120a0:	72fb      	strb	r3, [r7, #11]
          break;
 80120a2:	e03b      	b.n	801211c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80120aa:	695b      	ldr	r3, [r3, #20]
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	d00b      	beq.n	80120c8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80120b6:	695b      	ldr	r3, [r3, #20]
 80120b8:	687a      	ldr	r2, [r7, #4]
 80120ba:	7c12      	ldrb	r2, [r2, #16]
 80120bc:	f107 0108 	add.w	r1, r7, #8
 80120c0:	4610      	mov	r0, r2
 80120c2:	4798      	blx	r3
 80120c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80120c6:	e029      	b.n	801211c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80120c8:	6839      	ldr	r1, [r7, #0]
 80120ca:	6878      	ldr	r0, [r7, #4]
 80120cc:	f000 fa63 	bl	8012596 <USBD_CtlError>
            err++;
 80120d0:	7afb      	ldrb	r3, [r7, #11]
 80120d2:	3301      	adds	r3, #1
 80120d4:	72fb      	strb	r3, [r7, #11]
          break;
 80120d6:	e021      	b.n	801211c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80120de:	699b      	ldr	r3, [r3, #24]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	d00b      	beq.n	80120fc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80120ea:	699b      	ldr	r3, [r3, #24]
 80120ec:	687a      	ldr	r2, [r7, #4]
 80120ee:	7c12      	ldrb	r2, [r2, #16]
 80120f0:	f107 0108 	add.w	r1, r7, #8
 80120f4:	4610      	mov	r0, r2
 80120f6:	4798      	blx	r3
 80120f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80120fa:	e00f      	b.n	801211c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80120fc:	6839      	ldr	r1, [r7, #0]
 80120fe:	6878      	ldr	r0, [r7, #4]
 8012100:	f000 fa49 	bl	8012596 <USBD_CtlError>
            err++;
 8012104:	7afb      	ldrb	r3, [r7, #11]
 8012106:	3301      	adds	r3, #1
 8012108:	72fb      	strb	r3, [r7, #11]
          break;
 801210a:	e007      	b.n	801211c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 801210c:	6839      	ldr	r1, [r7, #0]
 801210e:	6878      	ldr	r0, [r7, #4]
 8012110:	f000 fa41 	bl	8012596 <USBD_CtlError>
          err++;
 8012114:	7afb      	ldrb	r3, [r7, #11]
 8012116:	3301      	adds	r3, #1
 8012118:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 801211a:	bf00      	nop
      }
      break;
 801211c:	e037      	b.n	801218e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	7c1b      	ldrb	r3, [r3, #16]
 8012122:	2b00      	cmp	r3, #0
 8012124:	d109      	bne.n	801213a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801212c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801212e:	f107 0208 	add.w	r2, r7, #8
 8012132:	4610      	mov	r0, r2
 8012134:	4798      	blx	r3
 8012136:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012138:	e029      	b.n	801218e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801213a:	6839      	ldr	r1, [r7, #0]
 801213c:	6878      	ldr	r0, [r7, #4]
 801213e:	f000 fa2a 	bl	8012596 <USBD_CtlError>
        err++;
 8012142:	7afb      	ldrb	r3, [r7, #11]
 8012144:	3301      	adds	r3, #1
 8012146:	72fb      	strb	r3, [r7, #11]
      break;
 8012148:	e021      	b.n	801218e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	7c1b      	ldrb	r3, [r3, #16]
 801214e:	2b00      	cmp	r3, #0
 8012150:	d10d      	bne.n	801216e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801215a:	f107 0208 	add.w	r2, r7, #8
 801215e:	4610      	mov	r0, r2
 8012160:	4798      	blx	r3
 8012162:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	3301      	adds	r3, #1
 8012168:	2207      	movs	r2, #7
 801216a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801216c:	e00f      	b.n	801218e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801216e:	6839      	ldr	r1, [r7, #0]
 8012170:	6878      	ldr	r0, [r7, #4]
 8012172:	f000 fa10 	bl	8012596 <USBD_CtlError>
        err++;
 8012176:	7afb      	ldrb	r3, [r7, #11]
 8012178:	3301      	adds	r3, #1
 801217a:	72fb      	strb	r3, [r7, #11]
      break;
 801217c:	e007      	b.n	801218e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801217e:	6839      	ldr	r1, [r7, #0]
 8012180:	6878      	ldr	r0, [r7, #4]
 8012182:	f000 fa08 	bl	8012596 <USBD_CtlError>
      err++;
 8012186:	7afb      	ldrb	r3, [r7, #11]
 8012188:	3301      	adds	r3, #1
 801218a:	72fb      	strb	r3, [r7, #11]
      break;
 801218c:	bf00      	nop
  }

  if (err != 0U)
 801218e:	7afb      	ldrb	r3, [r7, #11]
 8012190:	2b00      	cmp	r3, #0
 8012192:	d11e      	bne.n	80121d2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8012194:	683b      	ldr	r3, [r7, #0]
 8012196:	88db      	ldrh	r3, [r3, #6]
 8012198:	2b00      	cmp	r3, #0
 801219a:	d016      	beq.n	80121ca <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 801219c:	893b      	ldrh	r3, [r7, #8]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d00e      	beq.n	80121c0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80121a2:	683b      	ldr	r3, [r7, #0]
 80121a4:	88da      	ldrh	r2, [r3, #6]
 80121a6:	893b      	ldrh	r3, [r7, #8]
 80121a8:	4293      	cmp	r3, r2
 80121aa:	bf28      	it	cs
 80121ac:	4613      	movcs	r3, r2
 80121ae:	b29b      	uxth	r3, r3
 80121b0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80121b2:	893b      	ldrh	r3, [r7, #8]
 80121b4:	461a      	mov	r2, r3
 80121b6:	68f9      	ldr	r1, [r7, #12]
 80121b8:	6878      	ldr	r0, [r7, #4]
 80121ba:	f000 fa69 	bl	8012690 <USBD_CtlSendData>
 80121be:	e009      	b.n	80121d4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80121c0:	6839      	ldr	r1, [r7, #0]
 80121c2:	6878      	ldr	r0, [r7, #4]
 80121c4:	f000 f9e7 	bl	8012596 <USBD_CtlError>
 80121c8:	e004      	b.n	80121d4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80121ca:	6878      	ldr	r0, [r7, #4]
 80121cc:	f000 faba 	bl	8012744 <USBD_CtlSendStatus>
 80121d0:	e000      	b.n	80121d4 <USBD_GetDescriptor+0x320>
    return;
 80121d2:	bf00      	nop
  }
}
 80121d4:	3710      	adds	r7, #16
 80121d6:	46bd      	mov	sp, r7
 80121d8:	bd80      	pop	{r7, pc}
 80121da:	bf00      	nop

080121dc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80121dc:	b580      	push	{r7, lr}
 80121de:	b084      	sub	sp, #16
 80121e0:	af00      	add	r7, sp, #0
 80121e2:	6078      	str	r0, [r7, #4]
 80121e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80121e6:	683b      	ldr	r3, [r7, #0]
 80121e8:	889b      	ldrh	r3, [r3, #4]
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d131      	bne.n	8012252 <USBD_SetAddress+0x76>
 80121ee:	683b      	ldr	r3, [r7, #0]
 80121f0:	88db      	ldrh	r3, [r3, #6]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d12d      	bne.n	8012252 <USBD_SetAddress+0x76>
 80121f6:	683b      	ldr	r3, [r7, #0]
 80121f8:	885b      	ldrh	r3, [r3, #2]
 80121fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80121fc:	d829      	bhi.n	8012252 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80121fe:	683b      	ldr	r3, [r7, #0]
 8012200:	885b      	ldrh	r3, [r3, #2]
 8012202:	b2db      	uxtb	r3, r3
 8012204:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012208:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012210:	b2db      	uxtb	r3, r3
 8012212:	2b03      	cmp	r3, #3
 8012214:	d104      	bne.n	8012220 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8012216:	6839      	ldr	r1, [r7, #0]
 8012218:	6878      	ldr	r0, [r7, #4]
 801221a:	f000 f9bc 	bl	8012596 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801221e:	e01d      	b.n	801225c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	7bfa      	ldrb	r2, [r7, #15]
 8012224:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012228:	7bfb      	ldrb	r3, [r7, #15]
 801222a:	4619      	mov	r1, r3
 801222c:	6878      	ldr	r0, [r7, #4]
 801222e:	f000 ff4f 	bl	80130d0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012232:	6878      	ldr	r0, [r7, #4]
 8012234:	f000 fa86 	bl	8012744 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012238:	7bfb      	ldrb	r3, [r7, #15]
 801223a:	2b00      	cmp	r3, #0
 801223c:	d004      	beq.n	8012248 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	2202      	movs	r2, #2
 8012242:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012246:	e009      	b.n	801225c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	2201      	movs	r2, #1
 801224c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012250:	e004      	b.n	801225c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012252:	6839      	ldr	r1, [r7, #0]
 8012254:	6878      	ldr	r0, [r7, #4]
 8012256:	f000 f99e 	bl	8012596 <USBD_CtlError>
  }
}
 801225a:	bf00      	nop
 801225c:	bf00      	nop
 801225e:	3710      	adds	r7, #16
 8012260:	46bd      	mov	sp, r7
 8012262:	bd80      	pop	{r7, pc}

08012264 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012264:	b580      	push	{r7, lr}
 8012266:	b084      	sub	sp, #16
 8012268:	af00      	add	r7, sp, #0
 801226a:	6078      	str	r0, [r7, #4]
 801226c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801226e:	2300      	movs	r3, #0
 8012270:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012272:	683b      	ldr	r3, [r7, #0]
 8012274:	885b      	ldrh	r3, [r3, #2]
 8012276:	b2da      	uxtb	r2, r3
 8012278:	4b4e      	ldr	r3, [pc, #312]	@ (80123b4 <USBD_SetConfig+0x150>)
 801227a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801227c:	4b4d      	ldr	r3, [pc, #308]	@ (80123b4 <USBD_SetConfig+0x150>)
 801227e:	781b      	ldrb	r3, [r3, #0]
 8012280:	2b01      	cmp	r3, #1
 8012282:	d905      	bls.n	8012290 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012284:	6839      	ldr	r1, [r7, #0]
 8012286:	6878      	ldr	r0, [r7, #4]
 8012288:	f000 f985 	bl	8012596 <USBD_CtlError>
    return USBD_FAIL;
 801228c:	2303      	movs	r3, #3
 801228e:	e08c      	b.n	80123aa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012296:	b2db      	uxtb	r3, r3
 8012298:	2b02      	cmp	r3, #2
 801229a:	d002      	beq.n	80122a2 <USBD_SetConfig+0x3e>
 801229c:	2b03      	cmp	r3, #3
 801229e:	d029      	beq.n	80122f4 <USBD_SetConfig+0x90>
 80122a0:	e075      	b.n	801238e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80122a2:	4b44      	ldr	r3, [pc, #272]	@ (80123b4 <USBD_SetConfig+0x150>)
 80122a4:	781b      	ldrb	r3, [r3, #0]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d020      	beq.n	80122ec <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80122aa:	4b42      	ldr	r3, [pc, #264]	@ (80123b4 <USBD_SetConfig+0x150>)
 80122ac:	781b      	ldrb	r3, [r3, #0]
 80122ae:	461a      	mov	r2, r3
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80122b4:	4b3f      	ldr	r3, [pc, #252]	@ (80123b4 <USBD_SetConfig+0x150>)
 80122b6:	781b      	ldrb	r3, [r3, #0]
 80122b8:	4619      	mov	r1, r3
 80122ba:	6878      	ldr	r0, [r7, #4]
 80122bc:	f7fe ffb9 	bl	8011232 <USBD_SetClassConfig>
 80122c0:	4603      	mov	r3, r0
 80122c2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80122c4:	7bfb      	ldrb	r3, [r7, #15]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d008      	beq.n	80122dc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80122ca:	6839      	ldr	r1, [r7, #0]
 80122cc:	6878      	ldr	r0, [r7, #4]
 80122ce:	f000 f962 	bl	8012596 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80122d2:	687b      	ldr	r3, [r7, #4]
 80122d4:	2202      	movs	r2, #2
 80122d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80122da:	e065      	b.n	80123a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80122dc:	6878      	ldr	r0, [r7, #4]
 80122de:	f000 fa31 	bl	8012744 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80122e2:	687b      	ldr	r3, [r7, #4]
 80122e4:	2203      	movs	r2, #3
 80122e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80122ea:	e05d      	b.n	80123a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80122ec:	6878      	ldr	r0, [r7, #4]
 80122ee:	f000 fa29 	bl	8012744 <USBD_CtlSendStatus>
      break;
 80122f2:	e059      	b.n	80123a8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80122f4:	4b2f      	ldr	r3, [pc, #188]	@ (80123b4 <USBD_SetConfig+0x150>)
 80122f6:	781b      	ldrb	r3, [r3, #0]
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d112      	bne.n	8012322 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	2202      	movs	r2, #2
 8012300:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8012304:	4b2b      	ldr	r3, [pc, #172]	@ (80123b4 <USBD_SetConfig+0x150>)
 8012306:	781b      	ldrb	r3, [r3, #0]
 8012308:	461a      	mov	r2, r3
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801230e:	4b29      	ldr	r3, [pc, #164]	@ (80123b4 <USBD_SetConfig+0x150>)
 8012310:	781b      	ldrb	r3, [r3, #0]
 8012312:	4619      	mov	r1, r3
 8012314:	6878      	ldr	r0, [r7, #4]
 8012316:	f7fe ffa8 	bl	801126a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 801231a:	6878      	ldr	r0, [r7, #4]
 801231c:	f000 fa12 	bl	8012744 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012320:	e042      	b.n	80123a8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8012322:	4b24      	ldr	r3, [pc, #144]	@ (80123b4 <USBD_SetConfig+0x150>)
 8012324:	781b      	ldrb	r3, [r3, #0]
 8012326:	461a      	mov	r2, r3
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	685b      	ldr	r3, [r3, #4]
 801232c:	429a      	cmp	r2, r3
 801232e:	d02a      	beq.n	8012386 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	685b      	ldr	r3, [r3, #4]
 8012334:	b2db      	uxtb	r3, r3
 8012336:	4619      	mov	r1, r3
 8012338:	6878      	ldr	r0, [r7, #4]
 801233a:	f7fe ff96 	bl	801126a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801233e:	4b1d      	ldr	r3, [pc, #116]	@ (80123b4 <USBD_SetConfig+0x150>)
 8012340:	781b      	ldrb	r3, [r3, #0]
 8012342:	461a      	mov	r2, r3
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012348:	4b1a      	ldr	r3, [pc, #104]	@ (80123b4 <USBD_SetConfig+0x150>)
 801234a:	781b      	ldrb	r3, [r3, #0]
 801234c:	4619      	mov	r1, r3
 801234e:	6878      	ldr	r0, [r7, #4]
 8012350:	f7fe ff6f 	bl	8011232 <USBD_SetClassConfig>
 8012354:	4603      	mov	r3, r0
 8012356:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012358:	7bfb      	ldrb	r3, [r7, #15]
 801235a:	2b00      	cmp	r3, #0
 801235c:	d00f      	beq.n	801237e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801235e:	6839      	ldr	r1, [r7, #0]
 8012360:	6878      	ldr	r0, [r7, #4]
 8012362:	f000 f918 	bl	8012596 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012366:	687b      	ldr	r3, [r7, #4]
 8012368:	685b      	ldr	r3, [r3, #4]
 801236a:	b2db      	uxtb	r3, r3
 801236c:	4619      	mov	r1, r3
 801236e:	6878      	ldr	r0, [r7, #4]
 8012370:	f7fe ff7b 	bl	801126a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	2202      	movs	r2, #2
 8012378:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801237c:	e014      	b.n	80123a8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801237e:	6878      	ldr	r0, [r7, #4]
 8012380:	f000 f9e0 	bl	8012744 <USBD_CtlSendStatus>
      break;
 8012384:	e010      	b.n	80123a8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012386:	6878      	ldr	r0, [r7, #4]
 8012388:	f000 f9dc 	bl	8012744 <USBD_CtlSendStatus>
      break;
 801238c:	e00c      	b.n	80123a8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801238e:	6839      	ldr	r1, [r7, #0]
 8012390:	6878      	ldr	r0, [r7, #4]
 8012392:	f000 f900 	bl	8012596 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012396:	4b07      	ldr	r3, [pc, #28]	@ (80123b4 <USBD_SetConfig+0x150>)
 8012398:	781b      	ldrb	r3, [r3, #0]
 801239a:	4619      	mov	r1, r3
 801239c:	6878      	ldr	r0, [r7, #4]
 801239e:	f7fe ff64 	bl	801126a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80123a2:	2303      	movs	r3, #3
 80123a4:	73fb      	strb	r3, [r7, #15]
      break;
 80123a6:	bf00      	nop
  }

  return ret;
 80123a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80123aa:	4618      	mov	r0, r3
 80123ac:	3710      	adds	r7, #16
 80123ae:	46bd      	mov	sp, r7
 80123b0:	bd80      	pop	{r7, pc}
 80123b2:	bf00      	nop
 80123b4:	24000538 	.word	0x24000538

080123b8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b082      	sub	sp, #8
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]
 80123c0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80123c2:	683b      	ldr	r3, [r7, #0]
 80123c4:	88db      	ldrh	r3, [r3, #6]
 80123c6:	2b01      	cmp	r3, #1
 80123c8:	d004      	beq.n	80123d4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80123ca:	6839      	ldr	r1, [r7, #0]
 80123cc:	6878      	ldr	r0, [r7, #4]
 80123ce:	f000 f8e2 	bl	8012596 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80123d2:	e023      	b.n	801241c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80123da:	b2db      	uxtb	r3, r3
 80123dc:	2b02      	cmp	r3, #2
 80123de:	dc02      	bgt.n	80123e6 <USBD_GetConfig+0x2e>
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	dc03      	bgt.n	80123ec <USBD_GetConfig+0x34>
 80123e4:	e015      	b.n	8012412 <USBD_GetConfig+0x5a>
 80123e6:	2b03      	cmp	r3, #3
 80123e8:	d00b      	beq.n	8012402 <USBD_GetConfig+0x4a>
 80123ea:	e012      	b.n	8012412 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	2200      	movs	r2, #0
 80123f0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	3308      	adds	r3, #8
 80123f6:	2201      	movs	r2, #1
 80123f8:	4619      	mov	r1, r3
 80123fa:	6878      	ldr	r0, [r7, #4]
 80123fc:	f000 f948 	bl	8012690 <USBD_CtlSendData>
        break;
 8012400:	e00c      	b.n	801241c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	3304      	adds	r3, #4
 8012406:	2201      	movs	r2, #1
 8012408:	4619      	mov	r1, r3
 801240a:	6878      	ldr	r0, [r7, #4]
 801240c:	f000 f940 	bl	8012690 <USBD_CtlSendData>
        break;
 8012410:	e004      	b.n	801241c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8012412:	6839      	ldr	r1, [r7, #0]
 8012414:	6878      	ldr	r0, [r7, #4]
 8012416:	f000 f8be 	bl	8012596 <USBD_CtlError>
        break;
 801241a:	bf00      	nop
}
 801241c:	bf00      	nop
 801241e:	3708      	adds	r7, #8
 8012420:	46bd      	mov	sp, r7
 8012422:	bd80      	pop	{r7, pc}

08012424 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012424:	b580      	push	{r7, lr}
 8012426:	b082      	sub	sp, #8
 8012428:	af00      	add	r7, sp, #0
 801242a:	6078      	str	r0, [r7, #4]
 801242c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012434:	b2db      	uxtb	r3, r3
 8012436:	3b01      	subs	r3, #1
 8012438:	2b02      	cmp	r3, #2
 801243a:	d81e      	bhi.n	801247a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801243c:	683b      	ldr	r3, [r7, #0]
 801243e:	88db      	ldrh	r3, [r3, #6]
 8012440:	2b02      	cmp	r3, #2
 8012442:	d004      	beq.n	801244e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012444:	6839      	ldr	r1, [r7, #0]
 8012446:	6878      	ldr	r0, [r7, #4]
 8012448:	f000 f8a5 	bl	8012596 <USBD_CtlError>
        break;
 801244c:	e01a      	b.n	8012484 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	2201      	movs	r2, #1
 8012452:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801245a:	2b00      	cmp	r3, #0
 801245c:	d005      	beq.n	801246a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	68db      	ldr	r3, [r3, #12]
 8012462:	f043 0202 	orr.w	r2, r3, #2
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	330c      	adds	r3, #12
 801246e:	2202      	movs	r2, #2
 8012470:	4619      	mov	r1, r3
 8012472:	6878      	ldr	r0, [r7, #4]
 8012474:	f000 f90c 	bl	8012690 <USBD_CtlSendData>
      break;
 8012478:	e004      	b.n	8012484 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801247a:	6839      	ldr	r1, [r7, #0]
 801247c:	6878      	ldr	r0, [r7, #4]
 801247e:	f000 f88a 	bl	8012596 <USBD_CtlError>
      break;
 8012482:	bf00      	nop
  }
}
 8012484:	bf00      	nop
 8012486:	3708      	adds	r7, #8
 8012488:	46bd      	mov	sp, r7
 801248a:	bd80      	pop	{r7, pc}

0801248c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801248c:	b580      	push	{r7, lr}
 801248e:	b082      	sub	sp, #8
 8012490:	af00      	add	r7, sp, #0
 8012492:	6078      	str	r0, [r7, #4]
 8012494:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012496:	683b      	ldr	r3, [r7, #0]
 8012498:	885b      	ldrh	r3, [r3, #2]
 801249a:	2b01      	cmp	r3, #1
 801249c:	d107      	bne.n	80124ae <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	2201      	movs	r2, #1
 80124a2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80124a6:	6878      	ldr	r0, [r7, #4]
 80124a8:	f000 f94c 	bl	8012744 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80124ac:	e013      	b.n	80124d6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80124ae:	683b      	ldr	r3, [r7, #0]
 80124b0:	885b      	ldrh	r3, [r3, #2]
 80124b2:	2b02      	cmp	r3, #2
 80124b4:	d10b      	bne.n	80124ce <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80124b6:	683b      	ldr	r3, [r7, #0]
 80124b8:	889b      	ldrh	r3, [r3, #4]
 80124ba:	0a1b      	lsrs	r3, r3, #8
 80124bc:	b29b      	uxth	r3, r3
 80124be:	b2da      	uxtb	r2, r3
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80124c6:	6878      	ldr	r0, [r7, #4]
 80124c8:	f000 f93c 	bl	8012744 <USBD_CtlSendStatus>
}
 80124cc:	e003      	b.n	80124d6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80124ce:	6839      	ldr	r1, [r7, #0]
 80124d0:	6878      	ldr	r0, [r7, #4]
 80124d2:	f000 f860 	bl	8012596 <USBD_CtlError>
}
 80124d6:	bf00      	nop
 80124d8:	3708      	adds	r7, #8
 80124da:	46bd      	mov	sp, r7
 80124dc:	bd80      	pop	{r7, pc}

080124de <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80124de:	b580      	push	{r7, lr}
 80124e0:	b082      	sub	sp, #8
 80124e2:	af00      	add	r7, sp, #0
 80124e4:	6078      	str	r0, [r7, #4]
 80124e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80124ee:	b2db      	uxtb	r3, r3
 80124f0:	3b01      	subs	r3, #1
 80124f2:	2b02      	cmp	r3, #2
 80124f4:	d80b      	bhi.n	801250e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80124f6:	683b      	ldr	r3, [r7, #0]
 80124f8:	885b      	ldrh	r3, [r3, #2]
 80124fa:	2b01      	cmp	r3, #1
 80124fc:	d10c      	bne.n	8012518 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	2200      	movs	r2, #0
 8012502:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012506:	6878      	ldr	r0, [r7, #4]
 8012508:	f000 f91c 	bl	8012744 <USBD_CtlSendStatus>
      }
      break;
 801250c:	e004      	b.n	8012518 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801250e:	6839      	ldr	r1, [r7, #0]
 8012510:	6878      	ldr	r0, [r7, #4]
 8012512:	f000 f840 	bl	8012596 <USBD_CtlError>
      break;
 8012516:	e000      	b.n	801251a <USBD_ClrFeature+0x3c>
      break;
 8012518:	bf00      	nop
  }
}
 801251a:	bf00      	nop
 801251c:	3708      	adds	r7, #8
 801251e:	46bd      	mov	sp, r7
 8012520:	bd80      	pop	{r7, pc}

08012522 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012522:	b580      	push	{r7, lr}
 8012524:	b084      	sub	sp, #16
 8012526:	af00      	add	r7, sp, #0
 8012528:	6078      	str	r0, [r7, #4]
 801252a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801252c:	683b      	ldr	r3, [r7, #0]
 801252e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	781a      	ldrb	r2, [r3, #0]
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	3301      	adds	r3, #1
 801253c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	781a      	ldrb	r2, [r3, #0]
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	3301      	adds	r3, #1
 801254a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801254c:	68f8      	ldr	r0, [r7, #12]
 801254e:	f7ff fa16 	bl	801197e <SWAPBYTE>
 8012552:	4603      	mov	r3, r0
 8012554:	461a      	mov	r2, r3
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	3301      	adds	r3, #1
 801255e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012560:	68fb      	ldr	r3, [r7, #12]
 8012562:	3301      	adds	r3, #1
 8012564:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012566:	68f8      	ldr	r0, [r7, #12]
 8012568:	f7ff fa09 	bl	801197e <SWAPBYTE>
 801256c:	4603      	mov	r3, r0
 801256e:	461a      	mov	r2, r3
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	3301      	adds	r3, #1
 8012578:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	3301      	adds	r3, #1
 801257e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012580:	68f8      	ldr	r0, [r7, #12]
 8012582:	f7ff f9fc 	bl	801197e <SWAPBYTE>
 8012586:	4603      	mov	r3, r0
 8012588:	461a      	mov	r2, r3
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	80da      	strh	r2, [r3, #6]
}
 801258e:	bf00      	nop
 8012590:	3710      	adds	r7, #16
 8012592:	46bd      	mov	sp, r7
 8012594:	bd80      	pop	{r7, pc}

08012596 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012596:	b580      	push	{r7, lr}
 8012598:	b082      	sub	sp, #8
 801259a:	af00      	add	r7, sp, #0
 801259c:	6078      	str	r0, [r7, #4]
 801259e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80125a0:	2180      	movs	r1, #128	@ 0x80
 80125a2:	6878      	ldr	r0, [r7, #4]
 80125a4:	f000 fd2a 	bl	8012ffc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80125a8:	2100      	movs	r1, #0
 80125aa:	6878      	ldr	r0, [r7, #4]
 80125ac:	f000 fd26 	bl	8012ffc <USBD_LL_StallEP>
}
 80125b0:	bf00      	nop
 80125b2:	3708      	adds	r7, #8
 80125b4:	46bd      	mov	sp, r7
 80125b6:	bd80      	pop	{r7, pc}

080125b8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b086      	sub	sp, #24
 80125bc:	af00      	add	r7, sp, #0
 80125be:	60f8      	str	r0, [r7, #12]
 80125c0:	60b9      	str	r1, [r7, #8]
 80125c2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80125c4:	2300      	movs	r3, #0
 80125c6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d042      	beq.n	8012654 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80125d2:	6938      	ldr	r0, [r7, #16]
 80125d4:	f000 f842 	bl	801265c <USBD_GetLen>
 80125d8:	4603      	mov	r3, r0
 80125da:	3301      	adds	r3, #1
 80125dc:	005b      	lsls	r3, r3, #1
 80125de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80125e2:	d808      	bhi.n	80125f6 <USBD_GetString+0x3e>
 80125e4:	6938      	ldr	r0, [r7, #16]
 80125e6:	f000 f839 	bl	801265c <USBD_GetLen>
 80125ea:	4603      	mov	r3, r0
 80125ec:	3301      	adds	r3, #1
 80125ee:	b29b      	uxth	r3, r3
 80125f0:	005b      	lsls	r3, r3, #1
 80125f2:	b29a      	uxth	r2, r3
 80125f4:	e001      	b.n	80125fa <USBD_GetString+0x42>
 80125f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80125fe:	7dfb      	ldrb	r3, [r7, #23]
 8012600:	68ba      	ldr	r2, [r7, #8]
 8012602:	4413      	add	r3, r2
 8012604:	687a      	ldr	r2, [r7, #4]
 8012606:	7812      	ldrb	r2, [r2, #0]
 8012608:	701a      	strb	r2, [r3, #0]
  idx++;
 801260a:	7dfb      	ldrb	r3, [r7, #23]
 801260c:	3301      	adds	r3, #1
 801260e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012610:	7dfb      	ldrb	r3, [r7, #23]
 8012612:	68ba      	ldr	r2, [r7, #8]
 8012614:	4413      	add	r3, r2
 8012616:	2203      	movs	r2, #3
 8012618:	701a      	strb	r2, [r3, #0]
  idx++;
 801261a:	7dfb      	ldrb	r3, [r7, #23]
 801261c:	3301      	adds	r3, #1
 801261e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012620:	e013      	b.n	801264a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8012622:	7dfb      	ldrb	r3, [r7, #23]
 8012624:	68ba      	ldr	r2, [r7, #8]
 8012626:	4413      	add	r3, r2
 8012628:	693a      	ldr	r2, [r7, #16]
 801262a:	7812      	ldrb	r2, [r2, #0]
 801262c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801262e:	693b      	ldr	r3, [r7, #16]
 8012630:	3301      	adds	r3, #1
 8012632:	613b      	str	r3, [r7, #16]
    idx++;
 8012634:	7dfb      	ldrb	r3, [r7, #23]
 8012636:	3301      	adds	r3, #1
 8012638:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801263a:	7dfb      	ldrb	r3, [r7, #23]
 801263c:	68ba      	ldr	r2, [r7, #8]
 801263e:	4413      	add	r3, r2
 8012640:	2200      	movs	r2, #0
 8012642:	701a      	strb	r2, [r3, #0]
    idx++;
 8012644:	7dfb      	ldrb	r3, [r7, #23]
 8012646:	3301      	adds	r3, #1
 8012648:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801264a:	693b      	ldr	r3, [r7, #16]
 801264c:	781b      	ldrb	r3, [r3, #0]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d1e7      	bne.n	8012622 <USBD_GetString+0x6a>
 8012652:	e000      	b.n	8012656 <USBD_GetString+0x9e>
    return;
 8012654:	bf00      	nop
  }
}
 8012656:	3718      	adds	r7, #24
 8012658:	46bd      	mov	sp, r7
 801265a:	bd80      	pop	{r7, pc}

0801265c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801265c:	b480      	push	{r7}
 801265e:	b085      	sub	sp, #20
 8012660:	af00      	add	r7, sp, #0
 8012662:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012664:	2300      	movs	r3, #0
 8012666:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801266c:	e005      	b.n	801267a <USBD_GetLen+0x1e>
  {
    len++;
 801266e:	7bfb      	ldrb	r3, [r7, #15]
 8012670:	3301      	adds	r3, #1
 8012672:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012674:	68bb      	ldr	r3, [r7, #8]
 8012676:	3301      	adds	r3, #1
 8012678:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801267a:	68bb      	ldr	r3, [r7, #8]
 801267c:	781b      	ldrb	r3, [r3, #0]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d1f5      	bne.n	801266e <USBD_GetLen+0x12>
  }

  return len;
 8012682:	7bfb      	ldrb	r3, [r7, #15]
}
 8012684:	4618      	mov	r0, r3
 8012686:	3714      	adds	r7, #20
 8012688:	46bd      	mov	sp, r7
 801268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801268e:	4770      	bx	lr

08012690 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012690:	b580      	push	{r7, lr}
 8012692:	b084      	sub	sp, #16
 8012694:	af00      	add	r7, sp, #0
 8012696:	60f8      	str	r0, [r7, #12]
 8012698:	60b9      	str	r1, [r7, #8]
 801269a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	2202      	movs	r2, #2
 80126a0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	687a      	ldr	r2, [r7, #4]
 80126a8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	687a      	ldr	r2, [r7, #4]
 80126ae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	68ba      	ldr	r2, [r7, #8]
 80126b4:	2100      	movs	r1, #0
 80126b6:	68f8      	ldr	r0, [r7, #12]
 80126b8:	f000 fd29 	bl	801310e <USBD_LL_Transmit>

  return USBD_OK;
 80126bc:	2300      	movs	r3, #0
}
 80126be:	4618      	mov	r0, r3
 80126c0:	3710      	adds	r7, #16
 80126c2:	46bd      	mov	sp, r7
 80126c4:	bd80      	pop	{r7, pc}

080126c6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80126c6:	b580      	push	{r7, lr}
 80126c8:	b084      	sub	sp, #16
 80126ca:	af00      	add	r7, sp, #0
 80126cc:	60f8      	str	r0, [r7, #12]
 80126ce:	60b9      	str	r1, [r7, #8]
 80126d0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	68ba      	ldr	r2, [r7, #8]
 80126d6:	2100      	movs	r1, #0
 80126d8:	68f8      	ldr	r0, [r7, #12]
 80126da:	f000 fd18 	bl	801310e <USBD_LL_Transmit>

  return USBD_OK;
 80126de:	2300      	movs	r3, #0
}
 80126e0:	4618      	mov	r0, r3
 80126e2:	3710      	adds	r7, #16
 80126e4:	46bd      	mov	sp, r7
 80126e6:	bd80      	pop	{r7, pc}

080126e8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80126e8:	b580      	push	{r7, lr}
 80126ea:	b084      	sub	sp, #16
 80126ec:	af00      	add	r7, sp, #0
 80126ee:	60f8      	str	r0, [r7, #12]
 80126f0:	60b9      	str	r1, [r7, #8]
 80126f2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	2203      	movs	r2, #3
 80126f8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	687a      	ldr	r2, [r7, #4]
 8012700:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	687a      	ldr	r2, [r7, #4]
 8012708:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	68ba      	ldr	r2, [r7, #8]
 8012710:	2100      	movs	r1, #0
 8012712:	68f8      	ldr	r0, [r7, #12]
 8012714:	f000 fd1c 	bl	8013150 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012718:	2300      	movs	r3, #0
}
 801271a:	4618      	mov	r0, r3
 801271c:	3710      	adds	r7, #16
 801271e:	46bd      	mov	sp, r7
 8012720:	bd80      	pop	{r7, pc}

08012722 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012722:	b580      	push	{r7, lr}
 8012724:	b084      	sub	sp, #16
 8012726:	af00      	add	r7, sp, #0
 8012728:	60f8      	str	r0, [r7, #12]
 801272a:	60b9      	str	r1, [r7, #8]
 801272c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801272e:	687b      	ldr	r3, [r7, #4]
 8012730:	68ba      	ldr	r2, [r7, #8]
 8012732:	2100      	movs	r1, #0
 8012734:	68f8      	ldr	r0, [r7, #12]
 8012736:	f000 fd0b 	bl	8013150 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801273a:	2300      	movs	r3, #0
}
 801273c:	4618      	mov	r0, r3
 801273e:	3710      	adds	r7, #16
 8012740:	46bd      	mov	sp, r7
 8012742:	bd80      	pop	{r7, pc}

08012744 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012744:	b580      	push	{r7, lr}
 8012746:	b082      	sub	sp, #8
 8012748:	af00      	add	r7, sp, #0
 801274a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	2204      	movs	r2, #4
 8012750:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012754:	2300      	movs	r3, #0
 8012756:	2200      	movs	r2, #0
 8012758:	2100      	movs	r1, #0
 801275a:	6878      	ldr	r0, [r7, #4]
 801275c:	f000 fcd7 	bl	801310e <USBD_LL_Transmit>

  return USBD_OK;
 8012760:	2300      	movs	r3, #0
}
 8012762:	4618      	mov	r0, r3
 8012764:	3708      	adds	r7, #8
 8012766:	46bd      	mov	sp, r7
 8012768:	bd80      	pop	{r7, pc}

0801276a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801276a:	b580      	push	{r7, lr}
 801276c:	b082      	sub	sp, #8
 801276e:	af00      	add	r7, sp, #0
 8012770:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	2205      	movs	r2, #5
 8012776:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801277a:	2300      	movs	r3, #0
 801277c:	2200      	movs	r2, #0
 801277e:	2100      	movs	r1, #0
 8012780:	6878      	ldr	r0, [r7, #4]
 8012782:	f000 fce5 	bl	8013150 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012786:	2300      	movs	r3, #0
}
 8012788:	4618      	mov	r0, r3
 801278a:	3708      	adds	r7, #8
 801278c:	46bd      	mov	sp, r7
 801278e:	bd80      	pop	{r7, pc}

08012790 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012790:	b580      	push	{r7, lr}
 8012792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8012794:	2201      	movs	r2, #1
 8012796:	4913      	ldr	r1, [pc, #76]	@ (80127e4 <MX_USB_DEVICE_Init+0x54>)
 8012798:	4813      	ldr	r0, [pc, #76]	@ (80127e8 <MX_USB_DEVICE_Init+0x58>)
 801279a:	f7fe fccd 	bl	8011138 <USBD_Init>
 801279e:	4603      	mov	r3, r0
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d001      	beq.n	80127a8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80127a4:	f7ee fc3e 	bl	8001024 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 80127a8:	4910      	ldr	r1, [pc, #64]	@ (80127ec <MX_USB_DEVICE_Init+0x5c>)
 80127aa:	480f      	ldr	r0, [pc, #60]	@ (80127e8 <MX_USB_DEVICE_Init+0x58>)
 80127ac:	f7fe fcf4 	bl	8011198 <USBD_RegisterClass>
 80127b0:	4603      	mov	r3, r0
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d001      	beq.n	80127ba <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80127b6:	f7ee fc35 	bl	8001024 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 80127ba:	490d      	ldr	r1, [pc, #52]	@ (80127f0 <MX_USB_DEVICE_Init+0x60>)
 80127bc:	480a      	ldr	r0, [pc, #40]	@ (80127e8 <MX_USB_DEVICE_Init+0x58>)
 80127be:	f7fe fc2b 	bl	8011018 <USBD_CDC_RegisterInterface>
 80127c2:	4603      	mov	r3, r0
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d001      	beq.n	80127cc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80127c8:	f7ee fc2c 	bl	8001024 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 80127cc:	4806      	ldr	r0, [pc, #24]	@ (80127e8 <MX_USB_DEVICE_Init+0x58>)
 80127ce:	f7fe fd19 	bl	8011204 <USBD_Start>
 80127d2:	4603      	mov	r3, r0
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d001      	beq.n	80127dc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80127d8:	f7ee fc24 	bl	8001024 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80127dc:	f7f7 ff5c 	bl	800a698 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80127e0:	bf00      	nop
 80127e2:	bd80      	pop	{r7, pc}
 80127e4:	240000b4 	.word	0x240000b4
 80127e8:	2400053c 	.word	0x2400053c
 80127ec:	24000020 	.word	0x24000020
 80127f0:	240000a0 	.word	0x240000a0

080127f4 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80127f8:	2200      	movs	r2, #0
 80127fa:	4905      	ldr	r1, [pc, #20]	@ (8012810 <CDC_Init_HS+0x1c>)
 80127fc:	4805      	ldr	r0, [pc, #20]	@ (8012814 <CDC_Init_HS+0x20>)
 80127fe:	f7fe fc25 	bl	801104c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8012802:	4905      	ldr	r1, [pc, #20]	@ (8012818 <CDC_Init_HS+0x24>)
 8012804:	4803      	ldr	r0, [pc, #12]	@ (8012814 <CDC_Init_HS+0x20>)
 8012806:	f7fe fc43 	bl	8011090 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801280a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801280c:	4618      	mov	r0, r3
 801280e:	bd80      	pop	{r7, pc}
 8012810:	24001018 	.word	0x24001018
 8012814:	2400053c 	.word	0x2400053c
 8012818:	24000818 	.word	0x24000818

0801281c <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 801281c:	b480      	push	{r7}
 801281e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8012820:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8012822:	4618      	mov	r0, r3
 8012824:	46bd      	mov	sp, r7
 8012826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801282a:	4770      	bx	lr

0801282c <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801282c:	b480      	push	{r7}
 801282e:	b083      	sub	sp, #12
 8012830:	af00      	add	r7, sp, #0
 8012832:	4603      	mov	r3, r0
 8012834:	6039      	str	r1, [r7, #0]
 8012836:	71fb      	strb	r3, [r7, #7]
 8012838:	4613      	mov	r3, r2
 801283a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 801283c:	79fb      	ldrb	r3, [r7, #7]
 801283e:	2b23      	cmp	r3, #35	@ 0x23
 8012840:	d84a      	bhi.n	80128d8 <CDC_Control_HS+0xac>
 8012842:	a201      	add	r2, pc, #4	@ (adr r2, 8012848 <CDC_Control_HS+0x1c>)
 8012844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012848:	080128d9 	.word	0x080128d9
 801284c:	080128d9 	.word	0x080128d9
 8012850:	080128d9 	.word	0x080128d9
 8012854:	080128d9 	.word	0x080128d9
 8012858:	080128d9 	.word	0x080128d9
 801285c:	080128d9 	.word	0x080128d9
 8012860:	080128d9 	.word	0x080128d9
 8012864:	080128d9 	.word	0x080128d9
 8012868:	080128d9 	.word	0x080128d9
 801286c:	080128d9 	.word	0x080128d9
 8012870:	080128d9 	.word	0x080128d9
 8012874:	080128d9 	.word	0x080128d9
 8012878:	080128d9 	.word	0x080128d9
 801287c:	080128d9 	.word	0x080128d9
 8012880:	080128d9 	.word	0x080128d9
 8012884:	080128d9 	.word	0x080128d9
 8012888:	080128d9 	.word	0x080128d9
 801288c:	080128d9 	.word	0x080128d9
 8012890:	080128d9 	.word	0x080128d9
 8012894:	080128d9 	.word	0x080128d9
 8012898:	080128d9 	.word	0x080128d9
 801289c:	080128d9 	.word	0x080128d9
 80128a0:	080128d9 	.word	0x080128d9
 80128a4:	080128d9 	.word	0x080128d9
 80128a8:	080128d9 	.word	0x080128d9
 80128ac:	080128d9 	.word	0x080128d9
 80128b0:	080128d9 	.word	0x080128d9
 80128b4:	080128d9 	.word	0x080128d9
 80128b8:	080128d9 	.word	0x080128d9
 80128bc:	080128d9 	.word	0x080128d9
 80128c0:	080128d9 	.word	0x080128d9
 80128c4:	080128d9 	.word	0x080128d9
 80128c8:	080128d9 	.word	0x080128d9
 80128cc:	080128d9 	.word	0x080128d9
 80128d0:	080128d9 	.word	0x080128d9
 80128d4:	080128d9 	.word	0x080128d9
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80128d8:	bf00      	nop
  }

  return (USBD_OK);
 80128da:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 80128dc:	4618      	mov	r0, r3
 80128de:	370c      	adds	r7, #12
 80128e0:	46bd      	mov	sp, r7
 80128e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e6:	4770      	bx	lr

080128e8 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 80128e8:	b580      	push	{r7, lr}
 80128ea:	b082      	sub	sp, #8
 80128ec:	af00      	add	r7, sp, #0
 80128ee:	6078      	str	r0, [r7, #4]
 80128f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80128f2:	6879      	ldr	r1, [r7, #4]
 80128f4:	480b      	ldr	r0, [pc, #44]	@ (8012924 <CDC_Receive_HS+0x3c>)
 80128f6:	f7fe fbcb 	bl	8011090 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80128fa:	480a      	ldr	r0, [pc, #40]	@ (8012924 <CDC_Receive_HS+0x3c>)
 80128fc:	f7fe fbe6 	bl	80110cc <USBD_CDC_ReceivePacket>
  USB_CDC_RxHandler(UserRxBufferHS, *Len);
 8012900:	683b      	ldr	r3, [r7, #0]
 8012902:	681b      	ldr	r3, [r3, #0]
 8012904:	4619      	mov	r1, r3
 8012906:	4808      	ldr	r0, [pc, #32]	@ (8012928 <CDC_Receive_HS+0x40>)
 8012908:	f7ed ff4c 	bl	80007a4 <USB_CDC_RxHandler>
  memset(UserRxBufferHS, '\0', *Len);
 801290c:	683b      	ldr	r3, [r7, #0]
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	461a      	mov	r2, r3
 8012912:	2100      	movs	r1, #0
 8012914:	4804      	ldr	r0, [pc, #16]	@ (8012928 <CDC_Receive_HS+0x40>)
 8012916:	f000 fd7f 	bl	8013418 <memset>
  return (USBD_OK);
 801291a:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 801291c:	4618      	mov	r0, r3
 801291e:	3708      	adds	r7, #8
 8012920:	46bd      	mov	sp, r7
 8012922:	bd80      	pop	{r7, pc}
 8012924:	2400053c 	.word	0x2400053c
 8012928:	24000818 	.word	0x24000818

0801292c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801292c:	b480      	push	{r7}
 801292e:	b087      	sub	sp, #28
 8012930:	af00      	add	r7, sp, #0
 8012932:	60f8      	str	r0, [r7, #12]
 8012934:	60b9      	str	r1, [r7, #8]
 8012936:	4613      	mov	r3, r2
 8012938:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801293a:	2300      	movs	r3, #0
 801293c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801293e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012942:	4618      	mov	r0, r3
 8012944:	371c      	adds	r7, #28
 8012946:	46bd      	mov	sp, r7
 8012948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801294c:	4770      	bx	lr
	...

08012950 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012950:	b480      	push	{r7}
 8012952:	b083      	sub	sp, #12
 8012954:	af00      	add	r7, sp, #0
 8012956:	4603      	mov	r3, r0
 8012958:	6039      	str	r1, [r7, #0]
 801295a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 801295c:	683b      	ldr	r3, [r7, #0]
 801295e:	2212      	movs	r2, #18
 8012960:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8012962:	4b03      	ldr	r3, [pc, #12]	@ (8012970 <USBD_HS_DeviceDescriptor+0x20>)
}
 8012964:	4618      	mov	r0, r3
 8012966:	370c      	adds	r7, #12
 8012968:	46bd      	mov	sp, r7
 801296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801296e:	4770      	bx	lr
 8012970:	240000d4 	.word	0x240000d4

08012974 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012974:	b480      	push	{r7}
 8012976:	b083      	sub	sp, #12
 8012978:	af00      	add	r7, sp, #0
 801297a:	4603      	mov	r3, r0
 801297c:	6039      	str	r1, [r7, #0]
 801297e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012980:	683b      	ldr	r3, [r7, #0]
 8012982:	2204      	movs	r2, #4
 8012984:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012986:	4b03      	ldr	r3, [pc, #12]	@ (8012994 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8012988:	4618      	mov	r0, r3
 801298a:	370c      	adds	r7, #12
 801298c:	46bd      	mov	sp, r7
 801298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012992:	4770      	bx	lr
 8012994:	240000e8 	.word	0x240000e8

08012998 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012998:	b580      	push	{r7, lr}
 801299a:	b082      	sub	sp, #8
 801299c:	af00      	add	r7, sp, #0
 801299e:	4603      	mov	r3, r0
 80129a0:	6039      	str	r1, [r7, #0]
 80129a2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80129a4:	79fb      	ldrb	r3, [r7, #7]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d105      	bne.n	80129b6 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80129aa:	683a      	ldr	r2, [r7, #0]
 80129ac:	4907      	ldr	r1, [pc, #28]	@ (80129cc <USBD_HS_ProductStrDescriptor+0x34>)
 80129ae:	4808      	ldr	r0, [pc, #32]	@ (80129d0 <USBD_HS_ProductStrDescriptor+0x38>)
 80129b0:	f7ff fe02 	bl	80125b8 <USBD_GetString>
 80129b4:	e004      	b.n	80129c0 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80129b6:	683a      	ldr	r2, [r7, #0]
 80129b8:	4904      	ldr	r1, [pc, #16]	@ (80129cc <USBD_HS_ProductStrDescriptor+0x34>)
 80129ba:	4805      	ldr	r0, [pc, #20]	@ (80129d0 <USBD_HS_ProductStrDescriptor+0x38>)
 80129bc:	f7ff fdfc 	bl	80125b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80129c0:	4b02      	ldr	r3, [pc, #8]	@ (80129cc <USBD_HS_ProductStrDescriptor+0x34>)
}
 80129c2:	4618      	mov	r0, r3
 80129c4:	3708      	adds	r7, #8
 80129c6:	46bd      	mov	sp, r7
 80129c8:	bd80      	pop	{r7, pc}
 80129ca:	bf00      	nop
 80129cc:	24001818 	.word	0x24001818
 80129d0:	080136c8 	.word	0x080136c8

080129d4 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80129d4:	b580      	push	{r7, lr}
 80129d6:	b082      	sub	sp, #8
 80129d8:	af00      	add	r7, sp, #0
 80129da:	4603      	mov	r3, r0
 80129dc:	6039      	str	r1, [r7, #0]
 80129de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80129e0:	683a      	ldr	r2, [r7, #0]
 80129e2:	4904      	ldr	r1, [pc, #16]	@ (80129f4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80129e4:	4804      	ldr	r0, [pc, #16]	@ (80129f8 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80129e6:	f7ff fde7 	bl	80125b8 <USBD_GetString>
  return USBD_StrDesc;
 80129ea:	4b02      	ldr	r3, [pc, #8]	@ (80129f4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 80129ec:	4618      	mov	r0, r3
 80129ee:	3708      	adds	r7, #8
 80129f0:	46bd      	mov	sp, r7
 80129f2:	bd80      	pop	{r7, pc}
 80129f4:	24001818 	.word	0x24001818
 80129f8:	080136e0 	.word	0x080136e0

080129fc <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80129fc:	b580      	push	{r7, lr}
 80129fe:	b082      	sub	sp, #8
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	4603      	mov	r3, r0
 8012a04:	6039      	str	r1, [r7, #0]
 8012a06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012a08:	683b      	ldr	r3, [r7, #0]
 8012a0a:	221a      	movs	r2, #26
 8012a0c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012a0e:	f000 f843 	bl	8012a98 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8012a12:	4b02      	ldr	r3, [pc, #8]	@ (8012a1c <USBD_HS_SerialStrDescriptor+0x20>)
}
 8012a14:	4618      	mov	r0, r3
 8012a16:	3708      	adds	r7, #8
 8012a18:	46bd      	mov	sp, r7
 8012a1a:	bd80      	pop	{r7, pc}
 8012a1c:	240000ec 	.word	0x240000ec

08012a20 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012a20:	b580      	push	{r7, lr}
 8012a22:	b082      	sub	sp, #8
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	4603      	mov	r3, r0
 8012a28:	6039      	str	r1, [r7, #0]
 8012a2a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012a2c:	79fb      	ldrb	r3, [r7, #7]
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d105      	bne.n	8012a3e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8012a32:	683a      	ldr	r2, [r7, #0]
 8012a34:	4907      	ldr	r1, [pc, #28]	@ (8012a54 <USBD_HS_ConfigStrDescriptor+0x34>)
 8012a36:	4808      	ldr	r0, [pc, #32]	@ (8012a58 <USBD_HS_ConfigStrDescriptor+0x38>)
 8012a38:	f7ff fdbe 	bl	80125b8 <USBD_GetString>
 8012a3c:	e004      	b.n	8012a48 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8012a3e:	683a      	ldr	r2, [r7, #0]
 8012a40:	4904      	ldr	r1, [pc, #16]	@ (8012a54 <USBD_HS_ConfigStrDescriptor+0x34>)
 8012a42:	4805      	ldr	r0, [pc, #20]	@ (8012a58 <USBD_HS_ConfigStrDescriptor+0x38>)
 8012a44:	f7ff fdb8 	bl	80125b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012a48:	4b02      	ldr	r3, [pc, #8]	@ (8012a54 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	3708      	adds	r7, #8
 8012a4e:	46bd      	mov	sp, r7
 8012a50:	bd80      	pop	{r7, pc}
 8012a52:	bf00      	nop
 8012a54:	24001818 	.word	0x24001818
 8012a58:	080136f4 	.word	0x080136f4

08012a5c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012a5c:	b580      	push	{r7, lr}
 8012a5e:	b082      	sub	sp, #8
 8012a60:	af00      	add	r7, sp, #0
 8012a62:	4603      	mov	r3, r0
 8012a64:	6039      	str	r1, [r7, #0]
 8012a66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012a68:	79fb      	ldrb	r3, [r7, #7]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d105      	bne.n	8012a7a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8012a6e:	683a      	ldr	r2, [r7, #0]
 8012a70:	4907      	ldr	r1, [pc, #28]	@ (8012a90 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8012a72:	4808      	ldr	r0, [pc, #32]	@ (8012a94 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8012a74:	f7ff fda0 	bl	80125b8 <USBD_GetString>
 8012a78:	e004      	b.n	8012a84 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8012a7a:	683a      	ldr	r2, [r7, #0]
 8012a7c:	4904      	ldr	r1, [pc, #16]	@ (8012a90 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8012a7e:	4805      	ldr	r0, [pc, #20]	@ (8012a94 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8012a80:	f7ff fd9a 	bl	80125b8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8012a84:	4b02      	ldr	r3, [pc, #8]	@ (8012a90 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8012a86:	4618      	mov	r0, r3
 8012a88:	3708      	adds	r7, #8
 8012a8a:	46bd      	mov	sp, r7
 8012a8c:	bd80      	pop	{r7, pc}
 8012a8e:	bf00      	nop
 8012a90:	24001818 	.word	0x24001818
 8012a94:	08013700 	.word	0x08013700

08012a98 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012a98:	b580      	push	{r7, lr}
 8012a9a:	b084      	sub	sp, #16
 8012a9c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012a9e:	4b0f      	ldr	r3, [pc, #60]	@ (8012adc <Get_SerialNum+0x44>)
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8012ae0 <Get_SerialNum+0x48>)
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8012ae4 <Get_SerialNum+0x4c>)
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012ab0:	68fa      	ldr	r2, [r7, #12]
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	4413      	add	r3, r2
 8012ab6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d009      	beq.n	8012ad2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012abe:	2208      	movs	r2, #8
 8012ac0:	4909      	ldr	r1, [pc, #36]	@ (8012ae8 <Get_SerialNum+0x50>)
 8012ac2:	68f8      	ldr	r0, [r7, #12]
 8012ac4:	f000 f814 	bl	8012af0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012ac8:	2204      	movs	r2, #4
 8012aca:	4908      	ldr	r1, [pc, #32]	@ (8012aec <Get_SerialNum+0x54>)
 8012acc:	68b8      	ldr	r0, [r7, #8]
 8012ace:	f000 f80f 	bl	8012af0 <IntToUnicode>
  }
}
 8012ad2:	bf00      	nop
 8012ad4:	3710      	adds	r7, #16
 8012ad6:	46bd      	mov	sp, r7
 8012ad8:	bd80      	pop	{r7, pc}
 8012ada:	bf00      	nop
 8012adc:	08fff800 	.word	0x08fff800
 8012ae0:	08fff804 	.word	0x08fff804
 8012ae4:	08fff808 	.word	0x08fff808
 8012ae8:	240000ee 	.word	0x240000ee
 8012aec:	240000fe 	.word	0x240000fe

08012af0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012af0:	b480      	push	{r7}
 8012af2:	b087      	sub	sp, #28
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	60f8      	str	r0, [r7, #12]
 8012af8:	60b9      	str	r1, [r7, #8]
 8012afa:	4613      	mov	r3, r2
 8012afc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012afe:	2300      	movs	r3, #0
 8012b00:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012b02:	2300      	movs	r3, #0
 8012b04:	75fb      	strb	r3, [r7, #23]
 8012b06:	e027      	b.n	8012b58 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012b08:	68fb      	ldr	r3, [r7, #12]
 8012b0a:	0f1b      	lsrs	r3, r3, #28
 8012b0c:	2b09      	cmp	r3, #9
 8012b0e:	d80b      	bhi.n	8012b28 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012b10:	68fb      	ldr	r3, [r7, #12]
 8012b12:	0f1b      	lsrs	r3, r3, #28
 8012b14:	b2da      	uxtb	r2, r3
 8012b16:	7dfb      	ldrb	r3, [r7, #23]
 8012b18:	005b      	lsls	r3, r3, #1
 8012b1a:	4619      	mov	r1, r3
 8012b1c:	68bb      	ldr	r3, [r7, #8]
 8012b1e:	440b      	add	r3, r1
 8012b20:	3230      	adds	r2, #48	@ 0x30
 8012b22:	b2d2      	uxtb	r2, r2
 8012b24:	701a      	strb	r2, [r3, #0]
 8012b26:	e00a      	b.n	8012b3e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	0f1b      	lsrs	r3, r3, #28
 8012b2c:	b2da      	uxtb	r2, r3
 8012b2e:	7dfb      	ldrb	r3, [r7, #23]
 8012b30:	005b      	lsls	r3, r3, #1
 8012b32:	4619      	mov	r1, r3
 8012b34:	68bb      	ldr	r3, [r7, #8]
 8012b36:	440b      	add	r3, r1
 8012b38:	3237      	adds	r2, #55	@ 0x37
 8012b3a:	b2d2      	uxtb	r2, r2
 8012b3c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	011b      	lsls	r3, r3, #4
 8012b42:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012b44:	7dfb      	ldrb	r3, [r7, #23]
 8012b46:	005b      	lsls	r3, r3, #1
 8012b48:	3301      	adds	r3, #1
 8012b4a:	68ba      	ldr	r2, [r7, #8]
 8012b4c:	4413      	add	r3, r2
 8012b4e:	2200      	movs	r2, #0
 8012b50:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012b52:	7dfb      	ldrb	r3, [r7, #23]
 8012b54:	3301      	adds	r3, #1
 8012b56:	75fb      	strb	r3, [r7, #23]
 8012b58:	7dfa      	ldrb	r2, [r7, #23]
 8012b5a:	79fb      	ldrb	r3, [r7, #7]
 8012b5c:	429a      	cmp	r2, r3
 8012b5e:	d3d3      	bcc.n	8012b08 <IntToUnicode+0x18>
  }
}
 8012b60:	bf00      	nop
 8012b62:	bf00      	nop
 8012b64:	371c      	adds	r7, #28
 8012b66:	46bd      	mov	sp, r7
 8012b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b6c:	4770      	bx	lr
	...

08012b70 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012b70:	b580      	push	{r7, lr}
 8012b72:	b0ba      	sub	sp, #232	@ 0xe8
 8012b74:	af00      	add	r7, sp, #0
 8012b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012b78:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8012b7c:	2200      	movs	r2, #0
 8012b7e:	601a      	str	r2, [r3, #0]
 8012b80:	605a      	str	r2, [r3, #4]
 8012b82:	609a      	str	r2, [r3, #8]
 8012b84:	60da      	str	r2, [r3, #12]
 8012b86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8012b88:	f107 0310 	add.w	r3, r7, #16
 8012b8c:	22c0      	movs	r2, #192	@ 0xc0
 8012b8e:	2100      	movs	r1, #0
 8012b90:	4618      	mov	r0, r3
 8012b92:	f000 fc41 	bl	8013418 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	681b      	ldr	r3, [r3, #0]
 8012b9a:	4a43      	ldr	r2, [pc, #268]	@ (8012ca8 <HAL_PCD_MspInit+0x138>)
 8012b9c:	4293      	cmp	r3, r2
 8012b9e:	d17f      	bne.n	8012ca0 <HAL_PCD_MspInit+0x130>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8012ba0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8012ba4:	f04f 0300 	mov.w	r3, #0
 8012ba8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8012bac:	2301      	movs	r3, #1
 8012bae:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8012bb0:	2312      	movs	r3, #18
 8012bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8012bb4:	2302      	movs	r3, #2
 8012bb6:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8012bb8:	2303      	movs	r3, #3
 8012bba:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 128;
 8012bbc:	2380      	movs	r3, #128	@ 0x80
 8012bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8012bc0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8012bc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8012bc6:	2300      	movs	r3, #0
 8012bc8:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8012bca:	2300      	movs	r3, #0
 8012bcc:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8012bce:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8012bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012bd6:	f107 0310 	add.w	r3, r7, #16
 8012bda:	4618      	mov	r0, r3
 8012bdc:	f7f8 fd7e 	bl	800b6dc <HAL_RCCEx_PeriphCLKConfig>
 8012be0:	4603      	mov	r3, r0
 8012be2:	2b00      	cmp	r3, #0
 8012be4:	d001      	beq.n	8012bea <HAL_PCD_MspInit+0x7a>
    {
      Error_Handler();
 8012be6:	f7ee fa1d 	bl	8001024 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8012bea:	f7f7 fd55 	bl	800a698 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012bee:	4b2f      	ldr	r3, [pc, #188]	@ (8012cac <HAL_PCD_MspInit+0x13c>)
 8012bf0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8012bf4:	4a2d      	ldr	r2, [pc, #180]	@ (8012cac <HAL_PCD_MspInit+0x13c>)
 8012bf6:	f043 0301 	orr.w	r3, r3, #1
 8012bfa:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8012bfe:	4b2b      	ldr	r3, [pc, #172]	@ (8012cac <HAL_PCD_MspInit+0x13c>)
 8012c00:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8012c04:	f003 0301 	and.w	r3, r3, #1
 8012c08:	60fb      	str	r3, [r7, #12]
 8012c0a:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    PA11     ------> USB_OTG_HS_DM
    PA12     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8012c0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012c10:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012c14:	2300      	movs	r3, #0
 8012c16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012c1a:	2300      	movs	r3, #0
 8012c1c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012c20:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8012c24:	4619      	mov	r1, r3
 8012c26:	4822      	ldr	r0, [pc, #136]	@ (8012cb0 <HAL_PCD_MspInit+0x140>)
 8012c28:	f7f5 f910 	bl	8007e4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012c2c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8012c30:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012c34:	2302      	movs	r3, #2
 8012c36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012c3a:	2300      	movs	r3, #0
 8012c3c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012c40:	2300      	movs	r3, #0
 8012c42:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012c46:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8012c4a:	4619      	mov	r1, r3
 8012c4c:	4818      	ldr	r0, [pc, #96]	@ (8012cb0 <HAL_PCD_MspInit+0x140>)
 8012c4e:	f7f5 f8fd 	bl	8007e4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8012c52:	4b16      	ldr	r3, [pc, #88]	@ (8012cac <HAL_PCD_MspInit+0x13c>)
 8012c54:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8012c58:	4a14      	ldr	r2, [pc, #80]	@ (8012cac <HAL_PCD_MspInit+0x13c>)
 8012c5a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8012c5e:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8012c62:	4b12      	ldr	r3, [pc, #72]	@ (8012cac <HAL_PCD_MspInit+0x13c>)
 8012c64:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8012c68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012c6c:	60bb      	str	r3, [r7, #8]
 8012c6e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_EP1_OUT_IRQn, 0, 0);
 8012c70:	2200      	movs	r2, #0
 8012c72:	2100      	movs	r1, #0
 8012c74:	204a      	movs	r0, #74	@ 0x4a
 8012c76:	f7f1 f9b8 	bl	8003fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_OUT_IRQn);
 8012c7a:	204a      	movs	r0, #74	@ 0x4a
 8012c7c:	f7f1 f9cf 	bl	800401e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_EP1_IN_IRQn, 0, 0);
 8012c80:	2200      	movs	r2, #0
 8012c82:	2100      	movs	r1, #0
 8012c84:	204b      	movs	r0, #75	@ 0x4b
 8012c86:	f7f1 f9b0 	bl	8003fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_IN_IRQn);
 8012c8a:	204b      	movs	r0, #75	@ 0x4b
 8012c8c:	f7f1 f9c7 	bl	800401e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8012c90:	2200      	movs	r2, #0
 8012c92:	2100      	movs	r1, #0
 8012c94:	204d      	movs	r0, #77	@ 0x4d
 8012c96:	f7f1 f9a8 	bl	8003fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8012c9a:	204d      	movs	r0, #77	@ 0x4d
 8012c9c:	f7f1 f9bf 	bl	800401e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8012ca0:	bf00      	nop
 8012ca2:	37e8      	adds	r7, #232	@ 0xe8
 8012ca4:	46bd      	mov	sp, r7
 8012ca6:	bd80      	pop	{r7, pc}
 8012ca8:	40040000 	.word	0x40040000
 8012cac:	58024400 	.word	0x58024400
 8012cb0:	58020000 	.word	0x58020000

08012cb4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012cb4:	b580      	push	{r7, lr}
 8012cb6:	b082      	sub	sp, #8
 8012cb8:	af00      	add	r7, sp, #0
 8012cba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8012cc8:	4619      	mov	r1, r3
 8012cca:	4610      	mov	r0, r2
 8012ccc:	f7fe fae7 	bl	801129e <USBD_LL_SetupStage>
}
 8012cd0:	bf00      	nop
 8012cd2:	3708      	adds	r7, #8
 8012cd4:	46bd      	mov	sp, r7
 8012cd6:	bd80      	pop	{r7, pc}

08012cd8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012cd8:	b580      	push	{r7, lr}
 8012cda:	b082      	sub	sp, #8
 8012cdc:	af00      	add	r7, sp, #0
 8012cde:	6078      	str	r0, [r7, #4]
 8012ce0:	460b      	mov	r3, r1
 8012ce2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8012cea:	78fa      	ldrb	r2, [r7, #3]
 8012cec:	6879      	ldr	r1, [r7, #4]
 8012cee:	4613      	mov	r3, r2
 8012cf0:	00db      	lsls	r3, r3, #3
 8012cf2:	4413      	add	r3, r2
 8012cf4:	009b      	lsls	r3, r3, #2
 8012cf6:	440b      	add	r3, r1
 8012cf8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8012cfc:	681a      	ldr	r2, [r3, #0]
 8012cfe:	78fb      	ldrb	r3, [r7, #3]
 8012d00:	4619      	mov	r1, r3
 8012d02:	f7fe fb21 	bl	8011348 <USBD_LL_DataOutStage>
}
 8012d06:	bf00      	nop
 8012d08:	3708      	adds	r7, #8
 8012d0a:	46bd      	mov	sp, r7
 8012d0c:	bd80      	pop	{r7, pc}

08012d0e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012d0e:	b580      	push	{r7, lr}
 8012d10:	b082      	sub	sp, #8
 8012d12:	af00      	add	r7, sp, #0
 8012d14:	6078      	str	r0, [r7, #4]
 8012d16:	460b      	mov	r3, r1
 8012d18:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8012d20:	78fa      	ldrb	r2, [r7, #3]
 8012d22:	6879      	ldr	r1, [r7, #4]
 8012d24:	4613      	mov	r3, r2
 8012d26:	00db      	lsls	r3, r3, #3
 8012d28:	4413      	add	r3, r2
 8012d2a:	009b      	lsls	r3, r3, #2
 8012d2c:	440b      	add	r3, r1
 8012d2e:	3320      	adds	r3, #32
 8012d30:	681a      	ldr	r2, [r3, #0]
 8012d32:	78fb      	ldrb	r3, [r7, #3]
 8012d34:	4619      	mov	r1, r3
 8012d36:	f7fe fbba 	bl	80114ae <USBD_LL_DataInStage>
}
 8012d3a:	bf00      	nop
 8012d3c:	3708      	adds	r7, #8
 8012d3e:	46bd      	mov	sp, r7
 8012d40:	bd80      	pop	{r7, pc}

08012d42 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012d42:	b580      	push	{r7, lr}
 8012d44:	b082      	sub	sp, #8
 8012d46:	af00      	add	r7, sp, #0
 8012d48:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012d50:	4618      	mov	r0, r3
 8012d52:	f7fe fcf4 	bl	801173e <USBD_LL_SOF>
}
 8012d56:	bf00      	nop
 8012d58:	3708      	adds	r7, #8
 8012d5a:	46bd      	mov	sp, r7
 8012d5c:	bd80      	pop	{r7, pc}

08012d5e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012d5e:	b580      	push	{r7, lr}
 8012d60:	b084      	sub	sp, #16
 8012d62:	af00      	add	r7, sp, #0
 8012d64:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8012d66:	2301      	movs	r3, #1
 8012d68:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	79db      	ldrb	r3, [r3, #7]
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d102      	bne.n	8012d78 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8012d72:	2300      	movs	r3, #0
 8012d74:	73fb      	strb	r3, [r7, #15]
 8012d76:	e008      	b.n	8012d8a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	79db      	ldrb	r3, [r3, #7]
 8012d7c:	2b02      	cmp	r3, #2
 8012d7e:	d102      	bne.n	8012d86 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8012d80:	2301      	movs	r3, #1
 8012d82:	73fb      	strb	r3, [r7, #15]
 8012d84:	e001      	b.n	8012d8a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8012d86:	f7ee f94d 	bl	8001024 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012d90:	7bfa      	ldrb	r2, [r7, #15]
 8012d92:	4611      	mov	r1, r2
 8012d94:	4618      	mov	r0, r3
 8012d96:	f7fe fc8e 	bl	80116b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012da0:	4618      	mov	r0, r3
 8012da2:	f7fe fc36 	bl	8011612 <USBD_LL_Reset>
}
 8012da6:	bf00      	nop
 8012da8:	3710      	adds	r7, #16
 8012daa:	46bd      	mov	sp, r7
 8012dac:	bd80      	pop	{r7, pc}
	...

08012db0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012db0:	b580      	push	{r7, lr}
 8012db2:	b082      	sub	sp, #8
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012dbe:	4618      	mov	r0, r3
 8012dc0:	f7fe fc89 	bl	80116d6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	687a      	ldr	r2, [r7, #4]
 8012dd0:	6812      	ldr	r2, [r2, #0]
 8012dd2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8012dd6:	f043 0301 	orr.w	r3, r3, #1
 8012dda:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	7adb      	ldrb	r3, [r3, #11]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d005      	beq.n	8012df0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012de4:	4b04      	ldr	r3, [pc, #16]	@ (8012df8 <HAL_PCD_SuspendCallback+0x48>)
 8012de6:	691b      	ldr	r3, [r3, #16]
 8012de8:	4a03      	ldr	r2, [pc, #12]	@ (8012df8 <HAL_PCD_SuspendCallback+0x48>)
 8012dea:	f043 0306 	orr.w	r3, r3, #6
 8012dee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8012df0:	bf00      	nop
 8012df2:	3708      	adds	r7, #8
 8012df4:	46bd      	mov	sp, r7
 8012df6:	bd80      	pop	{r7, pc}
 8012df8:	e000ed00 	.word	0xe000ed00

08012dfc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012dfc:	b580      	push	{r7, lr}
 8012dfe:	b082      	sub	sp, #8
 8012e00:	af00      	add	r7, sp, #0
 8012e02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012e0a:	4618      	mov	r0, r3
 8012e0c:	f7fe fc7f 	bl	801170e <USBD_LL_Resume>
}
 8012e10:	bf00      	nop
 8012e12:	3708      	adds	r7, #8
 8012e14:	46bd      	mov	sp, r7
 8012e16:	bd80      	pop	{r7, pc}

08012e18 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e18:	b580      	push	{r7, lr}
 8012e1a:	b082      	sub	sp, #8
 8012e1c:	af00      	add	r7, sp, #0
 8012e1e:	6078      	str	r0, [r7, #4]
 8012e20:	460b      	mov	r3, r1
 8012e22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012e2a:	78fa      	ldrb	r2, [r7, #3]
 8012e2c:	4611      	mov	r1, r2
 8012e2e:	4618      	mov	r0, r3
 8012e30:	f7fe fcd7 	bl	80117e2 <USBD_LL_IsoOUTIncomplete>
}
 8012e34:	bf00      	nop
 8012e36:	3708      	adds	r7, #8
 8012e38:	46bd      	mov	sp, r7
 8012e3a:	bd80      	pop	{r7, pc}

08012e3c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e3c:	b580      	push	{r7, lr}
 8012e3e:	b082      	sub	sp, #8
 8012e40:	af00      	add	r7, sp, #0
 8012e42:	6078      	str	r0, [r7, #4]
 8012e44:	460b      	mov	r3, r1
 8012e46:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012e4e:	78fa      	ldrb	r2, [r7, #3]
 8012e50:	4611      	mov	r1, r2
 8012e52:	4618      	mov	r0, r3
 8012e54:	f7fe fc93 	bl	801177e <USBD_LL_IsoINIncomplete>
}
 8012e58:	bf00      	nop
 8012e5a:	3708      	adds	r7, #8
 8012e5c:	46bd      	mov	sp, r7
 8012e5e:	bd80      	pop	{r7, pc}

08012e60 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e60:	b580      	push	{r7, lr}
 8012e62:	b082      	sub	sp, #8
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012e6e:	4618      	mov	r0, r3
 8012e70:	f7fe fce9 	bl	8011846 <USBD_LL_DevConnected>
}
 8012e74:	bf00      	nop
 8012e76:	3708      	adds	r7, #8
 8012e78:	46bd      	mov	sp, r7
 8012e7a:	bd80      	pop	{r7, pc}

08012e7c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	b082      	sub	sp, #8
 8012e80:	af00      	add	r7, sp, #0
 8012e82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8012e8a:	4618      	mov	r0, r3
 8012e8c:	f7fe fce6 	bl	801185c <USBD_LL_DevDisconnected>
}
 8012e90:	bf00      	nop
 8012e92:	3708      	adds	r7, #8
 8012e94:	46bd      	mov	sp, r7
 8012e96:	bd80      	pop	{r7, pc}

08012e98 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8012e98:	b580      	push	{r7, lr}
 8012e9a:	b082      	sub	sp, #8
 8012e9c:	af00      	add	r7, sp, #0
 8012e9e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	781b      	ldrb	r3, [r3, #0]
 8012ea4:	2b01      	cmp	r3, #1
 8012ea6:	d140      	bne.n	8012f2a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8012ea8:	4a22      	ldr	r2, [pc, #136]	@ (8012f34 <USBD_LL_Init+0x9c>)
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	4a20      	ldr	r2, [pc, #128]	@ (8012f34 <USBD_LL_Init+0x9c>)
 8012eb4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8012eb8:	4b1e      	ldr	r3, [pc, #120]	@ (8012f34 <USBD_LL_Init+0x9c>)
 8012eba:	4a1f      	ldr	r2, [pc, #124]	@ (8012f38 <USBD_LL_Init+0xa0>)
 8012ebc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 8012ebe:	4b1d      	ldr	r3, [pc, #116]	@ (8012f34 <USBD_LL_Init+0x9c>)
 8012ec0:	2209      	movs	r2, #9
 8012ec2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8012ec4:	4b1b      	ldr	r3, [pc, #108]	@ (8012f34 <USBD_LL_Init+0x9c>)
 8012ec6:	2202      	movs	r2, #2
 8012ec8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8012eca:	4b1a      	ldr	r3, [pc, #104]	@ (8012f34 <USBD_LL_Init+0x9c>)
 8012ecc:	2200      	movs	r2, #0
 8012ece:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8012ed0:	4b18      	ldr	r3, [pc, #96]	@ (8012f34 <USBD_LL_Init+0x9c>)
 8012ed2:	2202      	movs	r2, #2
 8012ed4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8012ed6:	4b17      	ldr	r3, [pc, #92]	@ (8012f34 <USBD_LL_Init+0x9c>)
 8012ed8:	2200      	movs	r2, #0
 8012eda:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8012edc:	4b15      	ldr	r3, [pc, #84]	@ (8012f34 <USBD_LL_Init+0x9c>)
 8012ede:	2200      	movs	r2, #0
 8012ee0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8012ee2:	4b14      	ldr	r3, [pc, #80]	@ (8012f34 <USBD_LL_Init+0x9c>)
 8012ee4:	2200      	movs	r2, #0
 8012ee6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 8012ee8:	4b12      	ldr	r3, [pc, #72]	@ (8012f34 <USBD_LL_Init+0x9c>)
 8012eea:	2201      	movs	r2, #1
 8012eec:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8012eee:	4b11      	ldr	r3, [pc, #68]	@ (8012f34 <USBD_LL_Init+0x9c>)
 8012ef0:	2200      	movs	r2, #0
 8012ef2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8012ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8012f34 <USBD_LL_Init+0x9c>)
 8012ef6:	2200      	movs	r2, #0
 8012ef8:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8012efa:	480e      	ldr	r0, [pc, #56]	@ (8012f34 <USBD_LL_Init+0x9c>)
 8012efc:	f7f6 f8f1 	bl	80090e2 <HAL_PCD_Init>
 8012f00:	4603      	mov	r3, r0
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d001      	beq.n	8012f0a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8012f06:	f7ee f88d 	bl	8001024 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8012f0a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8012f0e:	4809      	ldr	r0, [pc, #36]	@ (8012f34 <USBD_LL_Init+0x9c>)
 8012f10:	f7f7 fb47 	bl	800a5a2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8012f14:	2280      	movs	r2, #128	@ 0x80
 8012f16:	2100      	movs	r1, #0
 8012f18:	4806      	ldr	r0, [pc, #24]	@ (8012f34 <USBD_LL_Init+0x9c>)
 8012f1a:	f7f7 fafb 	bl	800a514 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8012f1e:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8012f22:	2101      	movs	r1, #1
 8012f24:	4803      	ldr	r0, [pc, #12]	@ (8012f34 <USBD_LL_Init+0x9c>)
 8012f26:	f7f7 faf5 	bl	800a514 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 8012f2a:	2300      	movs	r3, #0
}
 8012f2c:	4618      	mov	r0, r3
 8012f2e:	3708      	adds	r7, #8
 8012f30:	46bd      	mov	sp, r7
 8012f32:	bd80      	pop	{r7, pc}
 8012f34:	24001a18 	.word	0x24001a18
 8012f38:	40040000 	.word	0x40040000

08012f3c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8012f3c:	b580      	push	{r7, lr}
 8012f3e:	b084      	sub	sp, #16
 8012f40:	af00      	add	r7, sp, #0
 8012f42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012f44:	2300      	movs	r3, #0
 8012f46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012f48:	2300      	movs	r3, #0
 8012f4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012f52:	4618      	mov	r0, r3
 8012f54:	f7f6 f9d1 	bl	80092fa <HAL_PCD_Start>
 8012f58:	4603      	mov	r3, r0
 8012f5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012f5c:	7bfb      	ldrb	r3, [r7, #15]
 8012f5e:	4618      	mov	r0, r3
 8012f60:	f000 f942 	bl	80131e8 <USBD_Get_USB_Status>
 8012f64:	4603      	mov	r3, r0
 8012f66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012f68:	7bbb      	ldrb	r3, [r7, #14]
}
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	3710      	adds	r7, #16
 8012f6e:	46bd      	mov	sp, r7
 8012f70:	bd80      	pop	{r7, pc}

08012f72 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8012f72:	b580      	push	{r7, lr}
 8012f74:	b084      	sub	sp, #16
 8012f76:	af00      	add	r7, sp, #0
 8012f78:	6078      	str	r0, [r7, #4]
 8012f7a:	4608      	mov	r0, r1
 8012f7c:	4611      	mov	r1, r2
 8012f7e:	461a      	mov	r2, r3
 8012f80:	4603      	mov	r3, r0
 8012f82:	70fb      	strb	r3, [r7, #3]
 8012f84:	460b      	mov	r3, r1
 8012f86:	70bb      	strb	r3, [r7, #2]
 8012f88:	4613      	mov	r3, r2
 8012f8a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012f90:	2300      	movs	r3, #0
 8012f92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8012f9a:	78bb      	ldrb	r3, [r7, #2]
 8012f9c:	883a      	ldrh	r2, [r7, #0]
 8012f9e:	78f9      	ldrb	r1, [r7, #3]
 8012fa0:	f7f6 fed2 	bl	8009d48 <HAL_PCD_EP_Open>
 8012fa4:	4603      	mov	r3, r0
 8012fa6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012fa8:	7bfb      	ldrb	r3, [r7, #15]
 8012faa:	4618      	mov	r0, r3
 8012fac:	f000 f91c 	bl	80131e8 <USBD_Get_USB_Status>
 8012fb0:	4603      	mov	r3, r0
 8012fb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012fb4:	7bbb      	ldrb	r3, [r7, #14]
}
 8012fb6:	4618      	mov	r0, r3
 8012fb8:	3710      	adds	r7, #16
 8012fba:	46bd      	mov	sp, r7
 8012fbc:	bd80      	pop	{r7, pc}

08012fbe <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012fbe:	b580      	push	{r7, lr}
 8012fc0:	b084      	sub	sp, #16
 8012fc2:	af00      	add	r7, sp, #0
 8012fc4:	6078      	str	r0, [r7, #4]
 8012fc6:	460b      	mov	r3, r1
 8012fc8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012fca:	2300      	movs	r3, #0
 8012fcc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012fce:	2300      	movs	r3, #0
 8012fd0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012fd8:	78fa      	ldrb	r2, [r7, #3]
 8012fda:	4611      	mov	r1, r2
 8012fdc:	4618      	mov	r0, r3
 8012fde:	f7f6 ff1d 	bl	8009e1c <HAL_PCD_EP_Close>
 8012fe2:	4603      	mov	r3, r0
 8012fe4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012fe6:	7bfb      	ldrb	r3, [r7, #15]
 8012fe8:	4618      	mov	r0, r3
 8012fea:	f000 f8fd 	bl	80131e8 <USBD_Get_USB_Status>
 8012fee:	4603      	mov	r3, r0
 8012ff0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012ff2:	7bbb      	ldrb	r3, [r7, #14]
}
 8012ff4:	4618      	mov	r0, r3
 8012ff6:	3710      	adds	r7, #16
 8012ff8:	46bd      	mov	sp, r7
 8012ffa:	bd80      	pop	{r7, pc}

08012ffc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8012ffc:	b580      	push	{r7, lr}
 8012ffe:	b084      	sub	sp, #16
 8013000:	af00      	add	r7, sp, #0
 8013002:	6078      	str	r0, [r7, #4]
 8013004:	460b      	mov	r3, r1
 8013006:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013008:	2300      	movs	r3, #0
 801300a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801300c:	2300      	movs	r3, #0
 801300e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013016:	78fa      	ldrb	r2, [r7, #3]
 8013018:	4611      	mov	r1, r2
 801301a:	4618      	mov	r0, r3
 801301c:	f7f6 ffd5 	bl	8009fca <HAL_PCD_EP_SetStall>
 8013020:	4603      	mov	r3, r0
 8013022:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013024:	7bfb      	ldrb	r3, [r7, #15]
 8013026:	4618      	mov	r0, r3
 8013028:	f000 f8de 	bl	80131e8 <USBD_Get_USB_Status>
 801302c:	4603      	mov	r3, r0
 801302e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013030:	7bbb      	ldrb	r3, [r7, #14]
}
 8013032:	4618      	mov	r0, r3
 8013034:	3710      	adds	r7, #16
 8013036:	46bd      	mov	sp, r7
 8013038:	bd80      	pop	{r7, pc}

0801303a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801303a:	b580      	push	{r7, lr}
 801303c:	b084      	sub	sp, #16
 801303e:	af00      	add	r7, sp, #0
 8013040:	6078      	str	r0, [r7, #4]
 8013042:	460b      	mov	r3, r1
 8013044:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013046:	2300      	movs	r3, #0
 8013048:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801304a:	2300      	movs	r3, #0
 801304c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013054:	78fa      	ldrb	r2, [r7, #3]
 8013056:	4611      	mov	r1, r2
 8013058:	4618      	mov	r0, r3
 801305a:	f7f7 f819 	bl	800a090 <HAL_PCD_EP_ClrStall>
 801305e:	4603      	mov	r3, r0
 8013060:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013062:	7bfb      	ldrb	r3, [r7, #15]
 8013064:	4618      	mov	r0, r3
 8013066:	f000 f8bf 	bl	80131e8 <USBD_Get_USB_Status>
 801306a:	4603      	mov	r3, r0
 801306c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801306e:	7bbb      	ldrb	r3, [r7, #14]
}
 8013070:	4618      	mov	r0, r3
 8013072:	3710      	adds	r7, #16
 8013074:	46bd      	mov	sp, r7
 8013076:	bd80      	pop	{r7, pc}

08013078 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013078:	b480      	push	{r7}
 801307a:	b085      	sub	sp, #20
 801307c:	af00      	add	r7, sp, #0
 801307e:	6078      	str	r0, [r7, #4]
 8013080:	460b      	mov	r3, r1
 8013082:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801308a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801308c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013090:	2b00      	cmp	r3, #0
 8013092:	da0b      	bge.n	80130ac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013094:	78fb      	ldrb	r3, [r7, #3]
 8013096:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801309a:	68f9      	ldr	r1, [r7, #12]
 801309c:	4613      	mov	r3, r2
 801309e:	00db      	lsls	r3, r3, #3
 80130a0:	4413      	add	r3, r2
 80130a2:	009b      	lsls	r3, r3, #2
 80130a4:	440b      	add	r3, r1
 80130a6:	3316      	adds	r3, #22
 80130a8:	781b      	ldrb	r3, [r3, #0]
 80130aa:	e00b      	b.n	80130c4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80130ac:	78fb      	ldrb	r3, [r7, #3]
 80130ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80130b2:	68f9      	ldr	r1, [r7, #12]
 80130b4:	4613      	mov	r3, r2
 80130b6:	00db      	lsls	r3, r3, #3
 80130b8:	4413      	add	r3, r2
 80130ba:	009b      	lsls	r3, r3, #2
 80130bc:	440b      	add	r3, r1
 80130be:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80130c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80130c4:	4618      	mov	r0, r3
 80130c6:	3714      	adds	r7, #20
 80130c8:	46bd      	mov	sp, r7
 80130ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130ce:	4770      	bx	lr

080130d0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80130d0:	b580      	push	{r7, lr}
 80130d2:	b084      	sub	sp, #16
 80130d4:	af00      	add	r7, sp, #0
 80130d6:	6078      	str	r0, [r7, #4]
 80130d8:	460b      	mov	r3, r1
 80130da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80130dc:	2300      	movs	r3, #0
 80130de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80130e0:	2300      	movs	r3, #0
 80130e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80130ea:	78fa      	ldrb	r2, [r7, #3]
 80130ec:	4611      	mov	r1, r2
 80130ee:	4618      	mov	r0, r3
 80130f0:	f7f6 fe06 	bl	8009d00 <HAL_PCD_SetAddress>
 80130f4:	4603      	mov	r3, r0
 80130f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80130f8:	7bfb      	ldrb	r3, [r7, #15]
 80130fa:	4618      	mov	r0, r3
 80130fc:	f000 f874 	bl	80131e8 <USBD_Get_USB_Status>
 8013100:	4603      	mov	r3, r0
 8013102:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013104:	7bbb      	ldrb	r3, [r7, #14]
}
 8013106:	4618      	mov	r0, r3
 8013108:	3710      	adds	r7, #16
 801310a:	46bd      	mov	sp, r7
 801310c:	bd80      	pop	{r7, pc}

0801310e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801310e:	b580      	push	{r7, lr}
 8013110:	b086      	sub	sp, #24
 8013112:	af00      	add	r7, sp, #0
 8013114:	60f8      	str	r0, [r7, #12]
 8013116:	607a      	str	r2, [r7, #4]
 8013118:	603b      	str	r3, [r7, #0]
 801311a:	460b      	mov	r3, r1
 801311c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801311e:	2300      	movs	r3, #0
 8013120:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013122:	2300      	movs	r3, #0
 8013124:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801312c:	7af9      	ldrb	r1, [r7, #11]
 801312e:	683b      	ldr	r3, [r7, #0]
 8013130:	687a      	ldr	r2, [r7, #4]
 8013132:	f7f6 ff10 	bl	8009f56 <HAL_PCD_EP_Transmit>
 8013136:	4603      	mov	r3, r0
 8013138:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801313a:	7dfb      	ldrb	r3, [r7, #23]
 801313c:	4618      	mov	r0, r3
 801313e:	f000 f853 	bl	80131e8 <USBD_Get_USB_Status>
 8013142:	4603      	mov	r3, r0
 8013144:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013146:	7dbb      	ldrb	r3, [r7, #22]
}
 8013148:	4618      	mov	r0, r3
 801314a:	3718      	adds	r7, #24
 801314c:	46bd      	mov	sp, r7
 801314e:	bd80      	pop	{r7, pc}

08013150 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013150:	b580      	push	{r7, lr}
 8013152:	b086      	sub	sp, #24
 8013154:	af00      	add	r7, sp, #0
 8013156:	60f8      	str	r0, [r7, #12]
 8013158:	607a      	str	r2, [r7, #4]
 801315a:	603b      	str	r3, [r7, #0]
 801315c:	460b      	mov	r3, r1
 801315e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013160:	2300      	movs	r3, #0
 8013162:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013164:	2300      	movs	r3, #0
 8013166:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801316e:	7af9      	ldrb	r1, [r7, #11]
 8013170:	683b      	ldr	r3, [r7, #0]
 8013172:	687a      	ldr	r2, [r7, #4]
 8013174:	f7f6 fe9c 	bl	8009eb0 <HAL_PCD_EP_Receive>
 8013178:	4603      	mov	r3, r0
 801317a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801317c:	7dfb      	ldrb	r3, [r7, #23]
 801317e:	4618      	mov	r0, r3
 8013180:	f000 f832 	bl	80131e8 <USBD_Get_USB_Status>
 8013184:	4603      	mov	r3, r0
 8013186:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013188:	7dbb      	ldrb	r3, [r7, #22]
}
 801318a:	4618      	mov	r0, r3
 801318c:	3718      	adds	r7, #24
 801318e:	46bd      	mov	sp, r7
 8013190:	bd80      	pop	{r7, pc}

08013192 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013192:	b580      	push	{r7, lr}
 8013194:	b082      	sub	sp, #8
 8013196:	af00      	add	r7, sp, #0
 8013198:	6078      	str	r0, [r7, #4]
 801319a:	460b      	mov	r3, r1
 801319c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80131a4:	78fa      	ldrb	r2, [r7, #3]
 80131a6:	4611      	mov	r1, r2
 80131a8:	4618      	mov	r0, r3
 80131aa:	f7f6 febc 	bl	8009f26 <HAL_PCD_EP_GetRxCount>
 80131ae:	4603      	mov	r3, r0
}
 80131b0:	4618      	mov	r0, r3
 80131b2:	3708      	adds	r7, #8
 80131b4:	46bd      	mov	sp, r7
 80131b6:	bd80      	pop	{r7, pc}

080131b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80131b8:	b480      	push	{r7}
 80131ba:	b083      	sub	sp, #12
 80131bc:	af00      	add	r7, sp, #0
 80131be:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80131c0:	4b03      	ldr	r3, [pc, #12]	@ (80131d0 <USBD_static_malloc+0x18>)
}
 80131c2:	4618      	mov	r0, r3
 80131c4:	370c      	adds	r7, #12
 80131c6:	46bd      	mov	sp, r7
 80131c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131cc:	4770      	bx	lr
 80131ce:	bf00      	nop
 80131d0:	24001efc 	.word	0x24001efc

080131d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80131d4:	b480      	push	{r7}
 80131d6:	b083      	sub	sp, #12
 80131d8:	af00      	add	r7, sp, #0
 80131da:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80131dc:	bf00      	nop
 80131de:	370c      	adds	r7, #12
 80131e0:	46bd      	mov	sp, r7
 80131e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131e6:	4770      	bx	lr

080131e8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80131e8:	b480      	push	{r7}
 80131ea:	b085      	sub	sp, #20
 80131ec:	af00      	add	r7, sp, #0
 80131ee:	4603      	mov	r3, r0
 80131f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80131f2:	2300      	movs	r3, #0
 80131f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80131f6:	79fb      	ldrb	r3, [r7, #7]
 80131f8:	2b03      	cmp	r3, #3
 80131fa:	d817      	bhi.n	801322c <USBD_Get_USB_Status+0x44>
 80131fc:	a201      	add	r2, pc, #4	@ (adr r2, 8013204 <USBD_Get_USB_Status+0x1c>)
 80131fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013202:	bf00      	nop
 8013204:	08013215 	.word	0x08013215
 8013208:	0801321b 	.word	0x0801321b
 801320c:	08013221 	.word	0x08013221
 8013210:	08013227 	.word	0x08013227
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013214:	2300      	movs	r3, #0
 8013216:	73fb      	strb	r3, [r7, #15]
    break;
 8013218:	e00b      	b.n	8013232 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801321a:	2303      	movs	r3, #3
 801321c:	73fb      	strb	r3, [r7, #15]
    break;
 801321e:	e008      	b.n	8013232 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013220:	2301      	movs	r3, #1
 8013222:	73fb      	strb	r3, [r7, #15]
    break;
 8013224:	e005      	b.n	8013232 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013226:	2303      	movs	r3, #3
 8013228:	73fb      	strb	r3, [r7, #15]
    break;
 801322a:	e002      	b.n	8013232 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801322c:	2303      	movs	r3, #3
 801322e:	73fb      	strb	r3, [r7, #15]
    break;
 8013230:	bf00      	nop
  }
  return usb_status;
 8013232:	7bfb      	ldrb	r3, [r7, #15]
}
 8013234:	4618      	mov	r0, r3
 8013236:	3714      	adds	r7, #20
 8013238:	46bd      	mov	sp, r7
 801323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801323e:	4770      	bx	lr

08013240 <free>:
 8013240:	4b02      	ldr	r3, [pc, #8]	@ (801324c <free+0xc>)
 8013242:	4601      	mov	r1, r0
 8013244:	6818      	ldr	r0, [r3, #0]
 8013246:	f000 b939 	b.w	80134bc <_free_r>
 801324a:	bf00      	nop
 801324c:	24000108 	.word	0x24000108

08013250 <sbrk_aligned>:
 8013250:	b570      	push	{r4, r5, r6, lr}
 8013252:	4e0f      	ldr	r6, [pc, #60]	@ (8013290 <sbrk_aligned+0x40>)
 8013254:	460c      	mov	r4, r1
 8013256:	6831      	ldr	r1, [r6, #0]
 8013258:	4605      	mov	r5, r0
 801325a:	b911      	cbnz	r1, 8013262 <sbrk_aligned+0x12>
 801325c:	f000 f8e4 	bl	8013428 <_sbrk_r>
 8013260:	6030      	str	r0, [r6, #0]
 8013262:	4621      	mov	r1, r4
 8013264:	4628      	mov	r0, r5
 8013266:	f000 f8df 	bl	8013428 <_sbrk_r>
 801326a:	1c43      	adds	r3, r0, #1
 801326c:	d103      	bne.n	8013276 <sbrk_aligned+0x26>
 801326e:	f04f 34ff 	mov.w	r4, #4294967295
 8013272:	4620      	mov	r0, r4
 8013274:	bd70      	pop	{r4, r5, r6, pc}
 8013276:	1cc4      	adds	r4, r0, #3
 8013278:	f024 0403 	bic.w	r4, r4, #3
 801327c:	42a0      	cmp	r0, r4
 801327e:	d0f8      	beq.n	8013272 <sbrk_aligned+0x22>
 8013280:	1a21      	subs	r1, r4, r0
 8013282:	4628      	mov	r0, r5
 8013284:	f000 f8d0 	bl	8013428 <_sbrk_r>
 8013288:	3001      	adds	r0, #1
 801328a:	d1f2      	bne.n	8013272 <sbrk_aligned+0x22>
 801328c:	e7ef      	b.n	801326e <sbrk_aligned+0x1e>
 801328e:	bf00      	nop
 8013290:	2400211c 	.word	0x2400211c

08013294 <_malloc_r>:
 8013294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013298:	1ccd      	adds	r5, r1, #3
 801329a:	f025 0503 	bic.w	r5, r5, #3
 801329e:	3508      	adds	r5, #8
 80132a0:	2d0c      	cmp	r5, #12
 80132a2:	bf38      	it	cc
 80132a4:	250c      	movcc	r5, #12
 80132a6:	2d00      	cmp	r5, #0
 80132a8:	4606      	mov	r6, r0
 80132aa:	db01      	blt.n	80132b0 <_malloc_r+0x1c>
 80132ac:	42a9      	cmp	r1, r5
 80132ae:	d904      	bls.n	80132ba <_malloc_r+0x26>
 80132b0:	230c      	movs	r3, #12
 80132b2:	6033      	str	r3, [r6, #0]
 80132b4:	2000      	movs	r0, #0
 80132b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80132ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013390 <_malloc_r+0xfc>
 80132be:	f000 f869 	bl	8013394 <__malloc_lock>
 80132c2:	f8d8 3000 	ldr.w	r3, [r8]
 80132c6:	461c      	mov	r4, r3
 80132c8:	bb44      	cbnz	r4, 801331c <_malloc_r+0x88>
 80132ca:	4629      	mov	r1, r5
 80132cc:	4630      	mov	r0, r6
 80132ce:	f7ff ffbf 	bl	8013250 <sbrk_aligned>
 80132d2:	1c43      	adds	r3, r0, #1
 80132d4:	4604      	mov	r4, r0
 80132d6:	d158      	bne.n	801338a <_malloc_r+0xf6>
 80132d8:	f8d8 4000 	ldr.w	r4, [r8]
 80132dc:	4627      	mov	r7, r4
 80132de:	2f00      	cmp	r7, #0
 80132e0:	d143      	bne.n	801336a <_malloc_r+0xd6>
 80132e2:	2c00      	cmp	r4, #0
 80132e4:	d04b      	beq.n	801337e <_malloc_r+0xea>
 80132e6:	6823      	ldr	r3, [r4, #0]
 80132e8:	4639      	mov	r1, r7
 80132ea:	4630      	mov	r0, r6
 80132ec:	eb04 0903 	add.w	r9, r4, r3
 80132f0:	f000 f89a 	bl	8013428 <_sbrk_r>
 80132f4:	4581      	cmp	r9, r0
 80132f6:	d142      	bne.n	801337e <_malloc_r+0xea>
 80132f8:	6821      	ldr	r1, [r4, #0]
 80132fa:	1a6d      	subs	r5, r5, r1
 80132fc:	4629      	mov	r1, r5
 80132fe:	4630      	mov	r0, r6
 8013300:	f7ff ffa6 	bl	8013250 <sbrk_aligned>
 8013304:	3001      	adds	r0, #1
 8013306:	d03a      	beq.n	801337e <_malloc_r+0xea>
 8013308:	6823      	ldr	r3, [r4, #0]
 801330a:	442b      	add	r3, r5
 801330c:	6023      	str	r3, [r4, #0]
 801330e:	f8d8 3000 	ldr.w	r3, [r8]
 8013312:	685a      	ldr	r2, [r3, #4]
 8013314:	bb62      	cbnz	r2, 8013370 <_malloc_r+0xdc>
 8013316:	f8c8 7000 	str.w	r7, [r8]
 801331a:	e00f      	b.n	801333c <_malloc_r+0xa8>
 801331c:	6822      	ldr	r2, [r4, #0]
 801331e:	1b52      	subs	r2, r2, r5
 8013320:	d420      	bmi.n	8013364 <_malloc_r+0xd0>
 8013322:	2a0b      	cmp	r2, #11
 8013324:	d917      	bls.n	8013356 <_malloc_r+0xc2>
 8013326:	1961      	adds	r1, r4, r5
 8013328:	42a3      	cmp	r3, r4
 801332a:	6025      	str	r5, [r4, #0]
 801332c:	bf18      	it	ne
 801332e:	6059      	strne	r1, [r3, #4]
 8013330:	6863      	ldr	r3, [r4, #4]
 8013332:	bf08      	it	eq
 8013334:	f8c8 1000 	streq.w	r1, [r8]
 8013338:	5162      	str	r2, [r4, r5]
 801333a:	604b      	str	r3, [r1, #4]
 801333c:	4630      	mov	r0, r6
 801333e:	f000 f82f 	bl	80133a0 <__malloc_unlock>
 8013342:	f104 000b 	add.w	r0, r4, #11
 8013346:	1d23      	adds	r3, r4, #4
 8013348:	f020 0007 	bic.w	r0, r0, #7
 801334c:	1ac2      	subs	r2, r0, r3
 801334e:	bf1c      	itt	ne
 8013350:	1a1b      	subne	r3, r3, r0
 8013352:	50a3      	strne	r3, [r4, r2]
 8013354:	e7af      	b.n	80132b6 <_malloc_r+0x22>
 8013356:	6862      	ldr	r2, [r4, #4]
 8013358:	42a3      	cmp	r3, r4
 801335a:	bf0c      	ite	eq
 801335c:	f8c8 2000 	streq.w	r2, [r8]
 8013360:	605a      	strne	r2, [r3, #4]
 8013362:	e7eb      	b.n	801333c <_malloc_r+0xa8>
 8013364:	4623      	mov	r3, r4
 8013366:	6864      	ldr	r4, [r4, #4]
 8013368:	e7ae      	b.n	80132c8 <_malloc_r+0x34>
 801336a:	463c      	mov	r4, r7
 801336c:	687f      	ldr	r7, [r7, #4]
 801336e:	e7b6      	b.n	80132de <_malloc_r+0x4a>
 8013370:	461a      	mov	r2, r3
 8013372:	685b      	ldr	r3, [r3, #4]
 8013374:	42a3      	cmp	r3, r4
 8013376:	d1fb      	bne.n	8013370 <_malloc_r+0xdc>
 8013378:	2300      	movs	r3, #0
 801337a:	6053      	str	r3, [r2, #4]
 801337c:	e7de      	b.n	801333c <_malloc_r+0xa8>
 801337e:	230c      	movs	r3, #12
 8013380:	6033      	str	r3, [r6, #0]
 8013382:	4630      	mov	r0, r6
 8013384:	f000 f80c 	bl	80133a0 <__malloc_unlock>
 8013388:	e794      	b.n	80132b4 <_malloc_r+0x20>
 801338a:	6005      	str	r5, [r0, #0]
 801338c:	e7d6      	b.n	801333c <_malloc_r+0xa8>
 801338e:	bf00      	nop
 8013390:	24002120 	.word	0x24002120

08013394 <__malloc_lock>:
 8013394:	4801      	ldr	r0, [pc, #4]	@ (801339c <__malloc_lock+0x8>)
 8013396:	f000 b881 	b.w	801349c <__retarget_lock_acquire_recursive>
 801339a:	bf00      	nop
 801339c:	24002260 	.word	0x24002260

080133a0 <__malloc_unlock>:
 80133a0:	4801      	ldr	r0, [pc, #4]	@ (80133a8 <__malloc_unlock+0x8>)
 80133a2:	f000 b87c 	b.w	801349e <__retarget_lock_release_recursive>
 80133a6:	bf00      	nop
 80133a8:	24002260 	.word	0x24002260

080133ac <realloc>:
 80133ac:	4b02      	ldr	r3, [pc, #8]	@ (80133b8 <realloc+0xc>)
 80133ae:	460a      	mov	r2, r1
 80133b0:	4601      	mov	r1, r0
 80133b2:	6818      	ldr	r0, [r3, #0]
 80133b4:	f000 b802 	b.w	80133bc <_realloc_r>
 80133b8:	24000108 	.word	0x24000108

080133bc <_realloc_r>:
 80133bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133c0:	4607      	mov	r7, r0
 80133c2:	4614      	mov	r4, r2
 80133c4:	460d      	mov	r5, r1
 80133c6:	b921      	cbnz	r1, 80133d2 <_realloc_r+0x16>
 80133c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80133cc:	4611      	mov	r1, r2
 80133ce:	f7ff bf61 	b.w	8013294 <_malloc_r>
 80133d2:	b92a      	cbnz	r2, 80133e0 <_realloc_r+0x24>
 80133d4:	f000 f872 	bl	80134bc <_free_r>
 80133d8:	4625      	mov	r5, r4
 80133da:	4628      	mov	r0, r5
 80133dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133e0:	f000 f8b6 	bl	8013550 <_malloc_usable_size_r>
 80133e4:	4284      	cmp	r4, r0
 80133e6:	4606      	mov	r6, r0
 80133e8:	d802      	bhi.n	80133f0 <_realloc_r+0x34>
 80133ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80133ee:	d8f4      	bhi.n	80133da <_realloc_r+0x1e>
 80133f0:	4621      	mov	r1, r4
 80133f2:	4638      	mov	r0, r7
 80133f4:	f7ff ff4e 	bl	8013294 <_malloc_r>
 80133f8:	4680      	mov	r8, r0
 80133fa:	b908      	cbnz	r0, 8013400 <_realloc_r+0x44>
 80133fc:	4645      	mov	r5, r8
 80133fe:	e7ec      	b.n	80133da <_realloc_r+0x1e>
 8013400:	42b4      	cmp	r4, r6
 8013402:	4622      	mov	r2, r4
 8013404:	4629      	mov	r1, r5
 8013406:	bf28      	it	cs
 8013408:	4632      	movcs	r2, r6
 801340a:	f000 f849 	bl	80134a0 <memcpy>
 801340e:	4629      	mov	r1, r5
 8013410:	4638      	mov	r0, r7
 8013412:	f000 f853 	bl	80134bc <_free_r>
 8013416:	e7f1      	b.n	80133fc <_realloc_r+0x40>

08013418 <memset>:
 8013418:	4402      	add	r2, r0
 801341a:	4603      	mov	r3, r0
 801341c:	4293      	cmp	r3, r2
 801341e:	d100      	bne.n	8013422 <memset+0xa>
 8013420:	4770      	bx	lr
 8013422:	f803 1b01 	strb.w	r1, [r3], #1
 8013426:	e7f9      	b.n	801341c <memset+0x4>

08013428 <_sbrk_r>:
 8013428:	b538      	push	{r3, r4, r5, lr}
 801342a:	4d06      	ldr	r5, [pc, #24]	@ (8013444 <_sbrk_r+0x1c>)
 801342c:	2300      	movs	r3, #0
 801342e:	4604      	mov	r4, r0
 8013430:	4608      	mov	r0, r1
 8013432:	602b      	str	r3, [r5, #0]
 8013434:	f7ef fc18 	bl	8002c68 <_sbrk>
 8013438:	1c43      	adds	r3, r0, #1
 801343a:	d102      	bne.n	8013442 <_sbrk_r+0x1a>
 801343c:	682b      	ldr	r3, [r5, #0]
 801343e:	b103      	cbz	r3, 8013442 <_sbrk_r+0x1a>
 8013440:	6023      	str	r3, [r4, #0]
 8013442:	bd38      	pop	{r3, r4, r5, pc}
 8013444:	2400225c 	.word	0x2400225c

08013448 <__errno>:
 8013448:	4b01      	ldr	r3, [pc, #4]	@ (8013450 <__errno+0x8>)
 801344a:	6818      	ldr	r0, [r3, #0]
 801344c:	4770      	bx	lr
 801344e:	bf00      	nop
 8013450:	24000108 	.word	0x24000108

08013454 <__libc_init_array>:
 8013454:	b570      	push	{r4, r5, r6, lr}
 8013456:	4d0d      	ldr	r5, [pc, #52]	@ (801348c <__libc_init_array+0x38>)
 8013458:	4c0d      	ldr	r4, [pc, #52]	@ (8013490 <__libc_init_array+0x3c>)
 801345a:	1b64      	subs	r4, r4, r5
 801345c:	10a4      	asrs	r4, r4, #2
 801345e:	2600      	movs	r6, #0
 8013460:	42a6      	cmp	r6, r4
 8013462:	d109      	bne.n	8013478 <__libc_init_array+0x24>
 8013464:	4d0b      	ldr	r5, [pc, #44]	@ (8013494 <__libc_init_array+0x40>)
 8013466:	4c0c      	ldr	r4, [pc, #48]	@ (8013498 <__libc_init_array+0x44>)
 8013468:	f000 f87a 	bl	8013560 <_init>
 801346c:	1b64      	subs	r4, r4, r5
 801346e:	10a4      	asrs	r4, r4, #2
 8013470:	2600      	movs	r6, #0
 8013472:	42a6      	cmp	r6, r4
 8013474:	d105      	bne.n	8013482 <__libc_init_array+0x2e>
 8013476:	bd70      	pop	{r4, r5, r6, pc}
 8013478:	f855 3b04 	ldr.w	r3, [r5], #4
 801347c:	4798      	blx	r3
 801347e:	3601      	adds	r6, #1
 8013480:	e7ee      	b.n	8013460 <__libc_init_array+0xc>
 8013482:	f855 3b04 	ldr.w	r3, [r5], #4
 8013486:	4798      	blx	r3
 8013488:	3601      	adds	r6, #1
 801348a:	e7f2      	b.n	8013472 <__libc_init_array+0x1e>
 801348c:	08013728 	.word	0x08013728
 8013490:	08013728 	.word	0x08013728
 8013494:	08013728 	.word	0x08013728
 8013498:	0801372c 	.word	0x0801372c

0801349c <__retarget_lock_acquire_recursive>:
 801349c:	4770      	bx	lr

0801349e <__retarget_lock_release_recursive>:
 801349e:	4770      	bx	lr

080134a0 <memcpy>:
 80134a0:	440a      	add	r2, r1
 80134a2:	4291      	cmp	r1, r2
 80134a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80134a8:	d100      	bne.n	80134ac <memcpy+0xc>
 80134aa:	4770      	bx	lr
 80134ac:	b510      	push	{r4, lr}
 80134ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80134b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80134b6:	4291      	cmp	r1, r2
 80134b8:	d1f9      	bne.n	80134ae <memcpy+0xe>
 80134ba:	bd10      	pop	{r4, pc}

080134bc <_free_r>:
 80134bc:	b538      	push	{r3, r4, r5, lr}
 80134be:	4605      	mov	r5, r0
 80134c0:	2900      	cmp	r1, #0
 80134c2:	d041      	beq.n	8013548 <_free_r+0x8c>
 80134c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80134c8:	1f0c      	subs	r4, r1, #4
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	bfb8      	it	lt
 80134ce:	18e4      	addlt	r4, r4, r3
 80134d0:	f7ff ff60 	bl	8013394 <__malloc_lock>
 80134d4:	4a1d      	ldr	r2, [pc, #116]	@ (801354c <_free_r+0x90>)
 80134d6:	6813      	ldr	r3, [r2, #0]
 80134d8:	b933      	cbnz	r3, 80134e8 <_free_r+0x2c>
 80134da:	6063      	str	r3, [r4, #4]
 80134dc:	6014      	str	r4, [r2, #0]
 80134de:	4628      	mov	r0, r5
 80134e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80134e4:	f7ff bf5c 	b.w	80133a0 <__malloc_unlock>
 80134e8:	42a3      	cmp	r3, r4
 80134ea:	d908      	bls.n	80134fe <_free_r+0x42>
 80134ec:	6820      	ldr	r0, [r4, #0]
 80134ee:	1821      	adds	r1, r4, r0
 80134f0:	428b      	cmp	r3, r1
 80134f2:	bf01      	itttt	eq
 80134f4:	6819      	ldreq	r1, [r3, #0]
 80134f6:	685b      	ldreq	r3, [r3, #4]
 80134f8:	1809      	addeq	r1, r1, r0
 80134fa:	6021      	streq	r1, [r4, #0]
 80134fc:	e7ed      	b.n	80134da <_free_r+0x1e>
 80134fe:	461a      	mov	r2, r3
 8013500:	685b      	ldr	r3, [r3, #4]
 8013502:	b10b      	cbz	r3, 8013508 <_free_r+0x4c>
 8013504:	42a3      	cmp	r3, r4
 8013506:	d9fa      	bls.n	80134fe <_free_r+0x42>
 8013508:	6811      	ldr	r1, [r2, #0]
 801350a:	1850      	adds	r0, r2, r1
 801350c:	42a0      	cmp	r0, r4
 801350e:	d10b      	bne.n	8013528 <_free_r+0x6c>
 8013510:	6820      	ldr	r0, [r4, #0]
 8013512:	4401      	add	r1, r0
 8013514:	1850      	adds	r0, r2, r1
 8013516:	4283      	cmp	r3, r0
 8013518:	6011      	str	r1, [r2, #0]
 801351a:	d1e0      	bne.n	80134de <_free_r+0x22>
 801351c:	6818      	ldr	r0, [r3, #0]
 801351e:	685b      	ldr	r3, [r3, #4]
 8013520:	6053      	str	r3, [r2, #4]
 8013522:	4408      	add	r0, r1
 8013524:	6010      	str	r0, [r2, #0]
 8013526:	e7da      	b.n	80134de <_free_r+0x22>
 8013528:	d902      	bls.n	8013530 <_free_r+0x74>
 801352a:	230c      	movs	r3, #12
 801352c:	602b      	str	r3, [r5, #0]
 801352e:	e7d6      	b.n	80134de <_free_r+0x22>
 8013530:	6820      	ldr	r0, [r4, #0]
 8013532:	1821      	adds	r1, r4, r0
 8013534:	428b      	cmp	r3, r1
 8013536:	bf04      	itt	eq
 8013538:	6819      	ldreq	r1, [r3, #0]
 801353a:	685b      	ldreq	r3, [r3, #4]
 801353c:	6063      	str	r3, [r4, #4]
 801353e:	bf04      	itt	eq
 8013540:	1809      	addeq	r1, r1, r0
 8013542:	6021      	streq	r1, [r4, #0]
 8013544:	6054      	str	r4, [r2, #4]
 8013546:	e7ca      	b.n	80134de <_free_r+0x22>
 8013548:	bd38      	pop	{r3, r4, r5, pc}
 801354a:	bf00      	nop
 801354c:	24002120 	.word	0x24002120

08013550 <_malloc_usable_size_r>:
 8013550:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013554:	1f18      	subs	r0, r3, #4
 8013556:	2b00      	cmp	r3, #0
 8013558:	bfbc      	itt	lt
 801355a:	580b      	ldrlt	r3, [r1, r0]
 801355c:	18c0      	addlt	r0, r0, r3
 801355e:	4770      	bx	lr

08013560 <_init>:
 8013560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013562:	bf00      	nop
 8013564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013566:	bc08      	pop	{r3}
 8013568:	469e      	mov	lr, r3
 801356a:	4770      	bx	lr

0801356c <_fini>:
 801356c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801356e:	bf00      	nop
 8013570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013572:	bc08      	pop	{r3}
 8013574:	469e      	mov	lr, r3
 8013576:	4770      	bx	lr
