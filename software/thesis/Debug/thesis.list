
thesis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013300  080002ac  080002ac  000012ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000570  080135ac  080135ac  000145ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08013b1c  08013b1c  00014b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08013b20  08013b20  00014b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000108  24000000  08013b24  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001fac  24000108  08013c2c  00015108  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  240020b4  08013c2c  000160b4  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00015108  2**0
                  CONTENTS, READONLY
  9 .debug_info   000246e6  00000000  00000000  00015136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00005063  00000000  00000000  0003981c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001c60  00000000  00000000  0003e880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 0000158b  00000000  00000000  000404e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00036b94  00000000  00000000  00041a6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00028422  00000000  00000000  000785ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014e03b  00000000  00000000  000a0a21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001eea5c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000077d8  00000000  00000000  001eeaa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000054  00000000  00000000  001f6278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002ac <__do_global_dtors_aux>:
 80002ac:	b510      	push	{r4, lr}
 80002ae:	4c05      	ldr	r4, [pc, #20]	@ (80002c4 <__do_global_dtors_aux+0x18>)
 80002b0:	7823      	ldrb	r3, [r4, #0]
 80002b2:	b933      	cbnz	r3, 80002c2 <__do_global_dtors_aux+0x16>
 80002b4:	4b04      	ldr	r3, [pc, #16]	@ (80002c8 <__do_global_dtors_aux+0x1c>)
 80002b6:	b113      	cbz	r3, 80002be <__do_global_dtors_aux+0x12>
 80002b8:	4804      	ldr	r0, [pc, #16]	@ (80002cc <__do_global_dtors_aux+0x20>)
 80002ba:	f3af 8000 	nop.w
 80002be:	2301      	movs	r3, #1
 80002c0:	7023      	strb	r3, [r4, #0]
 80002c2:	bd10      	pop	{r4, pc}
 80002c4:	24000108 	.word	0x24000108
 80002c8:	00000000 	.word	0x00000000
 80002cc:	08013594 	.word	0x08013594

080002d0 <frame_dummy>:
 80002d0:	b508      	push	{r3, lr}
 80002d2:	4b03      	ldr	r3, [pc, #12]	@ (80002e0 <frame_dummy+0x10>)
 80002d4:	b11b      	cbz	r3, 80002de <frame_dummy+0xe>
 80002d6:	4903      	ldr	r1, [pc, #12]	@ (80002e4 <frame_dummy+0x14>)
 80002d8:	4803      	ldr	r0, [pc, #12]	@ (80002e8 <frame_dummy+0x18>)
 80002da:	f3af 8000 	nop.w
 80002de:	bd08      	pop	{r3, pc}
 80002e0:	00000000 	.word	0x00000000
 80002e4:	2400010c 	.word	0x2400010c
 80002e8:	08013594 	.word	0x08013594

080002ec <I2C_write>:
#include "comms.h"


// I2C
void I2C_write(HAL_StatusTypeDef* status, DeviceAdress dev_adress, uint8_t reg_adress, uint8_t* data) {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b088      	sub	sp, #32
 80002f0:	af04      	add	r7, sp, #16
 80002f2:	60f8      	str	r0, [r7, #12]
 80002f4:	607b      	str	r3, [r7, #4]
 80002f6:	460b      	mov	r3, r1
 80002f8:	72fb      	strb	r3, [r7, #11]
 80002fa:	4613      	mov	r3, r2
 80002fc:	72bb      	strb	r3, [r7, #10]
	*status = HAL_I2C_Mem_Write(&hi2c2, dev_adress, reg_adress, I2C_MEMADD_SIZE_8BIT, data, 1, 100);
 80002fe:	7afb      	ldrb	r3, [r7, #11]
 8000300:	b299      	uxth	r1, r3
 8000302:	7abb      	ldrb	r3, [r7, #10]
 8000304:	b29a      	uxth	r2, r3
 8000306:	2364      	movs	r3, #100	@ 0x64
 8000308:	9302      	str	r3, [sp, #8]
 800030a:	2301      	movs	r3, #1
 800030c:	9301      	str	r3, [sp, #4]
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	9300      	str	r3, [sp, #0]
 8000312:	2301      	movs	r3, #1
 8000314:	4805      	ldr	r0, [pc, #20]	@ (800032c <I2C_write+0x40>)
 8000316:	f008 fb49 	bl	80089ac <HAL_I2C_Mem_Write>
 800031a:	4603      	mov	r3, r0
 800031c:	461a      	mov	r2, r3
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	701a      	strb	r2, [r3, #0]
}
 8000322:	bf00      	nop
 8000324:	3710      	adds	r7, #16
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	240002f8 	.word	0x240002f8

08000330 <I2C_read>:

void I2C_read(HAL_StatusTypeDef* status, DeviceAdress dev_adress, uint8_t reg_adress, uint8_t* data) {
 8000330:	b580      	push	{r7, lr}
 8000332:	b086      	sub	sp, #24
 8000334:	af02      	add	r7, sp, #8
 8000336:	60f8      	str	r0, [r7, #12]
 8000338:	607b      	str	r3, [r7, #4]
 800033a:	460b      	mov	r3, r1
 800033c:	72fb      	strb	r3, [r7, #11]
 800033e:	4613      	mov	r3, r2
 8000340:	72bb      	strb	r3, [r7, #10]
	dev_adress += 1;
 8000342:	7afb      	ldrb	r3, [r7, #11]
 8000344:	3301      	adds	r3, #1
 8000346:	72fb      	strb	r3, [r7, #11]
	*status = HAL_I2C_Master_Transmit(&hi2c2, dev_adress, &reg_adress, 1, 500);
 8000348:	7afb      	ldrb	r3, [r7, #11]
 800034a:	b299      	uxth	r1, r3
 800034c:	f107 020a 	add.w	r2, r7, #10
 8000350:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	2301      	movs	r3, #1
 8000358:	480d      	ldr	r0, [pc, #52]	@ (8000390 <I2C_read+0x60>)
 800035a:	f008 f919 	bl	8008590 <HAL_I2C_Master_Transmit>
 800035e:	4603      	mov	r3, r0
 8000360:	461a      	mov	r2, r3
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	701a      	strb	r2, [r3, #0]
	*status |= HAL_I2C_Master_Receive(&hi2c2, dev_adress, data, 1, 100);
 8000366:	7afb      	ldrb	r3, [r7, #11]
 8000368:	b299      	uxth	r1, r3
 800036a:	2364      	movs	r3, #100	@ 0x64
 800036c:	9300      	str	r3, [sp, #0]
 800036e:	2301      	movs	r3, #1
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	4807      	ldr	r0, [pc, #28]	@ (8000390 <I2C_read+0x60>)
 8000374:	f008 fa24 	bl	80087c0 <HAL_I2C_Master_Receive>
 8000378:	4603      	mov	r3, r0
 800037a:	461a      	mov	r2, r3
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	4313      	orrs	r3, r2
 8000382:	b2da      	uxtb	r2, r3
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	701a      	strb	r2, [r3, #0]
}
 8000388:	bf00      	nop
 800038a:	3710      	adds	r7, #16
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	240002f8 	.word	0x240002f8

08000394 <close_SPI>:




// SPI
void close_SPI(SPI_HandleTypeDef* hspi) {
 8000394:	b480      	push	{r7}
 8000396:	b085      	sub	sp, #20
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
	uint32_t itflag = hspi->Instance->SR;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	60fb      	str	r3, [r7, #12]

	  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	699a      	ldr	r2, [r3, #24]
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	f042 0208 	orr.w	r2, r2, #8
 80003b2:	619a      	str	r2, [r3, #24]
	  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	699a      	ldr	r2, [r3, #24]
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	f042 0210 	orr.w	r2, r2, #16
 80003c2:	619a      	str	r2, [r3, #24]

	  /* Disable SPI peripheral */
	  __HAL_SPI_DISABLE(hspi);
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	681a      	ldr	r2, [r3, #0]
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	f022 0201 	bic.w	r2, r2, #1
 80003d2:	601a      	str	r2, [r3, #0]

	  /* Disable ITs */
	  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	6919      	ldr	r1, [r3, #16]
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	681a      	ldr	r2, [r3, #0]
 80003de:	4b3c      	ldr	r3, [pc, #240]	@ (80004d0 <close_SPI+0x13c>)
 80003e0:	400b      	ands	r3, r1
 80003e2:	6113      	str	r3, [r2, #16]
	                              SPI_IT_FRE | SPI_IT_MODF));

	  /* Disable Tx DMA Request */
	  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	689a      	ldr	r2, [r3, #8]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80003f2:	609a      	str	r2, [r3, #8]

	  /* Report UnderRun error for non RX Only communication */
	  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 80003fa:	b2db      	uxtb	r3, r3
 80003fc:	2b04      	cmp	r3, #4
 80003fe:	d014      	beq.n	800042a <close_SPI+0x96>
	  {
	    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	f003 0320 	and.w	r3, r3, #32
 8000406:	2b00      	cmp	r3, #0
 8000408:	d00f      	beq.n	800042a <close_SPI+0x96>
	    {
	      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000410:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	699a      	ldr	r2, [r3, #24]
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	f042 0220 	orr.w	r2, r2, #32
 8000428:	619a      	str	r2, [r3, #24]
	    }
	  }

	  /* Report OverRun error for non TX Only communication */
	  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000430:	b2db      	uxtb	r3, r3
 8000432:	2b03      	cmp	r3, #3
 8000434:	d014      	beq.n	8000460 <close_SPI+0xcc>
	  {
	    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800043c:	2b00      	cmp	r3, #0
 800043e:	d00f      	beq.n	8000460 <close_SPI+0xcc>
	    {
	      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000446:	f043 0204 	orr.w	r2, r3, #4
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	699a      	ldr	r2, [r3, #24]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800045e:	619a      	str	r2, [r3, #24]
	    }
	#endif /* USE_SPI_CRC */
	  }

	  /* SPI Mode Fault error interrupt occurred -------------------------------*/
	  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8000460:	68fb      	ldr	r3, [r7, #12]
 8000462:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000466:	2b00      	cmp	r3, #0
 8000468:	d00f      	beq.n	800048a <close_SPI+0xf6>
	  {
	    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8000470:	f043 0201 	orr.w	r2, r3, #1
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	699a      	ldr	r2, [r3, #24]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000488:	619a      	str	r2, [r3, #24]
	  }

	  /* SPI Frame error interrupt occurred ------------------------------------*/
	  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000490:	2b00      	cmp	r3, #0
 8000492:	d00f      	beq.n	80004b4 <close_SPI+0x120>
	  {
	    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800049a:	f043 0208 	orr.w	r2, r3, #8
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	699a      	ldr	r2, [r3, #24]
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80004b2:	619a      	str	r2, [r3, #24]
	  }

	  hspi->TxXferCount = (uint16_t)0UL;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	2200      	movs	r2, #0
 80004b8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
	  hspi->RxXferCount = (uint16_t)0UL;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	2200      	movs	r2, #0
 80004c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 80004c4:	bf00      	nop
 80004c6:	3714      	adds	r7, #20
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr
 80004d0:	fffffc90 	.word	0xfffffc90

080004d4 <HAL_SPI_TxCpltCallback>:

// DMA callbacks, when SPI finishes
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
	dma_flag = DMA_COMPLETED;
 80004dc:	4b04      	ldr	r3, [pc, #16]	@ (80004f0 <HAL_SPI_TxCpltCallback+0x1c>)
 80004de:	2200      	movs	r2, #0
 80004e0:	701a      	strb	r2, [r3, #0]
}
 80004e2:	bf00      	nop
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	24000124 	.word	0x24000124

080004f4 <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	dma_flag = DMA_COMPLETED;
 80004fc:	4b04      	ldr	r3, [pc, #16]	@ (8000510 <HAL_SPI_TxRxCpltCallback+0x1c>)
 80004fe:	2200      	movs	r2, #0
 8000500:	701a      	strb	r2, [r3, #0]
}
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	24000124 	.word	0x24000124

08000514 <SPI_check_CTS>:

void SPI_check_CTS(HAL_StatusTypeDef* status) {
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	uint8_t attempt = 0;
 800051c:	2300      	movs	r3, #0
 800051e:	73fb      	strb	r3, [r7, #15]
	//uint8_t data[] = {0x20, 0, 0, 0}; //GET_INT_STATUS to clear CTS
	// Wait until Clear To Send (CTS) signal appears
	while (!(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9))) {
 8000520:	e00c      	b.n	800053c <SPI_check_CTS+0x28>
		attempt++;
 8000522:	7bfb      	ldrb	r3, [r7, #15]
 8000524:	3301      	adds	r3, #1
 8000526:	73fb      	strb	r3, [r7, #15]
		if (attempt > 100) {
 8000528:	7bfb      	ldrb	r3, [r7, #15]
 800052a:	2b64      	cmp	r3, #100	@ 0x64
 800052c:	d903      	bls.n	8000536 <SPI_check_CTS+0x22>
			*status = 0x3; // Timeout
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	2203      	movs	r2, #3
 8000532:	701a      	strb	r2, [r3, #0]
			return;
 8000534:	e00a      	b.n	800054c <SPI_check_CTS+0x38>
		}
		HAL_Delay(100);
 8000536:	2064      	movs	r0, #100	@ 0x64
 8000538:	f002 fe3c 	bl	80031b4 <HAL_Delay>
	while (!(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9))) {
 800053c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000540:	4804      	ldr	r0, [pc, #16]	@ (8000554 <SPI_check_CTS+0x40>)
 8000542:	f007 ff3d 	bl	80083c0 <HAL_GPIO_ReadPin>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d0ea      	beq.n	8000522 <SPI_check_CTS+0xe>

	//*status |= HAL_SPI_Transmit(&hspi4, data, 4, 100);

	// SI is now ready to receive data

}
 800054c:	3710      	adds	r7, #16
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	58021000 	.word	0x58021000

08000558 <SPI_write>:


void SPI_write(HAL_StatusTypeDef* status, uint8_t* data, uint8_t* size) {
 8000558:	b580      	push	{r7, lr}
 800055a:	b084      	sub	sp, #16
 800055c:	af00      	add	r7, sp, #0
 800055e:	60f8      	str	r0, [r7, #12]
 8000560:	60b9      	str	r1, [r7, #8]
 8000562:	607a      	str	r2, [r7, #4]
	// Transmit data array
	SPI_check_CTS(status);
 8000564:	68f8      	ldr	r0, [r7, #12]
 8000566:	f7ff ffd5 	bl	8000514 <SPI_check_CTS>
	if (*status != 0) {return;}
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d110      	bne.n	8000594 <SPI_write+0x3c>
	*status |= HAL_SPI_Transmit(&hspi4, data, *size, 100);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	461a      	mov	r2, r3
 8000578:	2364      	movs	r3, #100	@ 0x64
 800057a:	68b9      	ldr	r1, [r7, #8]
 800057c:	4807      	ldr	r0, [pc, #28]	@ (800059c <SPI_write+0x44>)
 800057e:	f00d fee5 	bl	800e34c <HAL_SPI_Transmit>
 8000582:	4603      	mov	r3, r0
 8000584:	461a      	mov	r2, r3
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	4313      	orrs	r3, r2
 800058c:	b2da      	uxtb	r2, r3
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	701a      	strb	r2, [r3, #0]
 8000592:	e000      	b.n	8000596 <SPI_write+0x3e>
	if (*status != 0) {return;}
 8000594:	bf00      	nop
}
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	2400034c 	.word	0x2400034c

080005a0 <SPI_read>:

// SPI functions
void SPI_read(HAL_StatusTypeDef* status, uint8_t* data, uint8_t* TxSize, uint8_t* RxSize) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af02      	add	r7, sp, #8
 80005a6:	60f8      	str	r0, [r7, #12]
 80005a8:	60b9      	str	r1, [r7, #8]
 80005aa:	607a      	str	r2, [r7, #4]
 80005ac:	603b      	str	r3, [r7, #0]
	for (uint8_t i = 0; i < *TxSize; i++) {
		data_buffer[i] = data[i];
	}
	*/

	SPI_check_CTS(status);
 80005ae:	68f8      	ldr	r0, [r7, #12]
 80005b0:	f7ff ffb0 	bl	8000514 <SPI_check_CTS>
	if (*status != 0) {return;}
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d14a      	bne.n	8000652 <SPI_read+0xb2>
	// Duplicate data array with command and zeros (use static buffer)
	data_buffer[0] = data[0];
	*/

	// Address of requested register
	*status |= HAL_SPI_Transmit(&hspi4, data, *TxSize, 70);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	461a      	mov	r2, r3
 80005c2:	2346      	movs	r3, #70	@ 0x46
 80005c4:	68b9      	ldr	r1, [r7, #8]
 80005c6:	4826      	ldr	r0, [pc, #152]	@ (8000660 <SPI_read+0xc0>)
 80005c8:	f00d fec0 	bl	800e34c <HAL_SPI_Transmit>
 80005cc:	4603      	mov	r3, r0
 80005ce:	461a      	mov	r2, r3
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4313      	orrs	r3, r2
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	701a      	strb	r2, [r3, #0]

	// Wait for CTS
	SPI_check_CTS(status);
 80005dc:	68f8      	ldr	r0, [r7, #12]
 80005de:	f7ff ff99 	bl	8000514 <SPI_check_CTS>
	if (*status != 0) {return;}
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d135      	bne.n	8000656 <SPI_read+0xb6>


	// Once approved, prepare for reading (READ_CMD_BUFF)
	data[0] = 0x44;
 80005ea:	68bb      	ldr	r3, [r7, #8]
 80005ec:	2244      	movs	r2, #68	@ 0x44
 80005ee:	701a      	strb	r2, [r3, #0]
	data[1] = 0xFF;
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	3301      	adds	r3, #1
 80005f4:	22ff      	movs	r2, #255	@ 0xff
 80005f6:	701a      	strb	r2, [r3, #0]

	// Insert padding (Tx delay + CTS byte)
	*RxSize += 2;
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	3302      	adds	r3, #2
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	701a      	strb	r2, [r3, #0]

	// Issue reading command
	*status |= HAL_SPI_TransmitReceive(&hspi4, data, data_buffer, *RxSize, 100);
 8000604:	683b      	ldr	r3, [r7, #0]
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	461a      	mov	r2, r3
 800060a:	2364      	movs	r3, #100	@ 0x64
 800060c:	9300      	str	r3, [sp, #0]
 800060e:	4613      	mov	r3, r2
 8000610:	4a14      	ldr	r2, [pc, #80]	@ (8000664 <SPI_read+0xc4>)
 8000612:	68b9      	ldr	r1, [r7, #8]
 8000614:	4812      	ldr	r0, [pc, #72]	@ (8000660 <SPI_read+0xc0>)
 8000616:	f00e f887 	bl	800e728 <HAL_SPI_TransmitReceive>
 800061a:	4603      	mov	r3, r0
 800061c:	461a      	mov	r2, r3
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	4313      	orrs	r3, r2
 8000624:	b2da      	uxtb	r2, r3
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	701a      	strb	r2, [r3, #0]


	// Load read data into data array and remove padding at the beginning
	for (uint8_t i = 2; i < *RxSize; i++) {
 800062a:	2302      	movs	r3, #2
 800062c:	75fb      	strb	r3, [r7, #23]
 800062e:	e00a      	b.n	8000646 <SPI_read+0xa6>
		data[i-2] = data_buffer[i];
 8000630:	7dfa      	ldrb	r2, [r7, #23]
 8000632:	7dfb      	ldrb	r3, [r7, #23]
 8000634:	3b02      	subs	r3, #2
 8000636:	68b9      	ldr	r1, [r7, #8]
 8000638:	440b      	add	r3, r1
 800063a:	490a      	ldr	r1, [pc, #40]	@ (8000664 <SPI_read+0xc4>)
 800063c:	5c8a      	ldrb	r2, [r1, r2]
 800063e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 2; i < *RxSize; i++) {
 8000640:	7dfb      	ldrb	r3, [r7, #23]
 8000642:	3301      	adds	r3, #1
 8000644:	75fb      	strb	r3, [r7, #23]
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	7dfa      	ldrb	r2, [r7, #23]
 800064c:	429a      	cmp	r2, r3
 800064e:	d3ef      	bcc.n	8000630 <SPI_read+0x90>
 8000650:	e002      	b.n	8000658 <SPI_read+0xb8>
	if (*status != 0) {return;}
 8000652:	bf00      	nop
 8000654:	e000      	b.n	8000658 <SPI_read+0xb8>
	if (*status != 0) {return;}
 8000656:	bf00      	nop
	}

}
 8000658:	3718      	adds	r7, #24
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	2400034c 	.word	0x2400034c
 8000664:	24000128 	.word	0x24000128

08000668 <PowerReset>:
	}
	strcpy(IDs[1], temp);
	return;
}

void PowerReset(HAL_StatusTypeDef* status) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
	uint8_t reg_val;

	// Reset all registers to default state
	I2C_read(status, USB_C_CONTROLLER, RESET, &reg_val);
 8000670:	f107 030f 	add.w	r3, r7, #15
 8000674:	220c      	movs	r2, #12
 8000676:	2144      	movs	r1, #68	@ 0x44
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f7ff fe59 	bl	8000330 <I2C_read>
	reg_val++;
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	3301      	adds	r3, #1
 8000682:	b2db      	uxtb	r3, r3
 8000684:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, RESET, &reg_val);
 8000686:	f107 030f 	add.w	r3, r7, #15
 800068a:	220c      	movs	r2, #12
 800068c:	2144      	movs	r1, #68	@ 0x44
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f7ff fe2c 	bl	80002ec <I2C_write>
}
 8000694:	bf00      	nop
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}

0800069c <PowerInit>:


void PowerInit(HAL_StatusTypeDef* status) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	uint8_t reg_val;

	// Reset all registers
	PowerReset(status);
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f7ff ffdf 	bl	8000668 <PowerReset>

	// Set device as SINK (Disable SRC/SNK toggle and poll CC lines only)
	// CONTROL2:(MODE, TOGGLE)
	I2C_read(status, USB_C_CONTROLLER, CONTROL2, &reg_val);
 80006aa:	f107 030f 	add.w	r3, r7, #15
 80006ae:	2208      	movs	r2, #8
 80006b0:	2144      	movs	r1, #68	@ 0x44
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	f7ff fe3c 	bl	8000330 <I2C_read>
	reg_val |= ((1<<2) | 1);
 80006b8:	7bfb      	ldrb	r3, [r7, #15]
 80006ba:	f043 0305 	orr.w	r3, r3, #5
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	73fb      	strb	r3, [r7, #15]
	reg_val &= ~(1<<1);
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
 80006c4:	f023 0302 	bic.w	r3, r3, #2
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, CONTROL2, &reg_val);
 80006cc:	f107 030f 	add.w	r3, r7, #15
 80006d0:	2208      	movs	r2, #8
 80006d2:	2144      	movs	r1, #68	@ 0x44
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f7ff fe09 	bl	80002ec <I2C_write>


	// Initially, set current to USB default  (recommended by doc.)
	I2C_read(status, USB_C_CONTROLLER, CONTROL0, &reg_val);
 80006da:	f107 030f 	add.w	r3, r7, #15
 80006de:	2206      	movs	r2, #6
 80006e0:	2144      	movs	r1, #68	@ 0x44
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f7ff fe24 	bl	8000330 <I2C_read>
	reg_val &= ~(1<<3);
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	f023 0308 	bic.w	r3, r3, #8
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	73fb      	strb	r3, [r7, #15]
	reg_val |= (1 << 2);
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	f043 0304 	orr.w	r3, r3, #4
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, CONTROL0, &reg_val);
 80006fc:	f107 030f 	add.w	r3, r7, #15
 8000700:	2206      	movs	r2, #6
 8000702:	2144      	movs	r1, #68	@ 0x44
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	f7ff fdf1 	bl	80002ec <I2C_write>

	// Disable current source(s) at CC lines
	I2C_read(status, USB_C_CONTROLLER, SWITCHES0, &reg_val);
 800070a:	f107 030f 	add.w	r3, r7, #15
 800070e:	2202      	movs	r2, #2
 8000710:	2144      	movs	r1, #68	@ 0x44
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f7ff fe0c 	bl	8000330 <I2C_read>
	reg_val &= ~((1 << 5) | (1 << 4));
 8000718:	7bfb      	ldrb	r3, [r7, #15]
 800071a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800071e:	b2db      	uxtb	r3, r3
 8000720:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, SWITCHES0, &reg_val);
 8000722:	f107 030f 	add.w	r3, r7, #15
 8000726:	2202      	movs	r2, #2
 8000728:	2144      	movs	r1, #68	@ 0x44
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f7ff fdde 	bl	80002ec <I2C_write>

	// Mask interrupt for current level request
	reg_val = 0xFE;
 8000730:	23fe      	movs	r3, #254	@ 0xfe
 8000732:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, MASK, &reg_val);
 8000734:	f107 030f 	add.w	r3, r7, #15
 8000738:	220a      	movs	r2, #10
 800073a:	2144      	movs	r1, #68	@ 0x44
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f7ff fdd5 	bl	80002ec <I2C_write>

	// Mask interrupt for toggle status
	reg_val = 0xBF;
 8000742:	23bf      	movs	r3, #191	@ 0xbf
 8000744:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, MASKA, &reg_val);
 8000746:	f107 030f 	add.w	r3, r7, #15
 800074a:	220e      	movs	r2, #14
 800074c:	2144      	movs	r1, #68	@ 0x44
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f7ff fdcc 	bl	80002ec <I2C_write>

	// Mask interrupt for GoodCRC acknowledge (BMC is not used)
	reg_val = 0x01;
 8000754:	2301      	movs	r3, #1
 8000756:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, MASKB, &reg_val);
 8000758:	f107 030f 	add.w	r3, r7, #15
 800075c:	220f      	movs	r2, #15
 800075e:	2144      	movs	r1, #68	@ 0x44
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff fdc3 	bl	80002ec <I2C_write>
}
 8000766:	bf00      	nop
 8000768:	3710      	adds	r7, #16
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <PowerIncreaseCurrent>:

void PowerIncreaseCurrent(HAL_StatusTypeDef* status) {
 800076e:	b580      	push	{r7, lr}
 8000770:	b084      	sub	sp, #16
 8000772:	af00      	add	r7, sp, #0
 8000774:	6078      	str	r0, [r7, #4]
	uint8_t reg_val;

	I2C_read(status, USB_C_CONTROLLER, CONTROL0, &reg_val);
 8000776:	f107 030f 	add.w	r3, r7, #15
 800077a:	2206      	movs	r2, #6
 800077c:	2144      	movs	r1, #68	@ 0x44
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f7ff fdd6 	bl	8000330 <I2C_read>
	reg_val |= ((1<<3) | (1<<2));
 8000784:	7bfb      	ldrb	r3, [r7, #15]
 8000786:	f043 030c 	orr.w	r3, r3, #12
 800078a:	b2db      	uxtb	r3, r3
 800078c:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, USB_C_CONTROLLER, CONTROL0, &reg_val);
 800078e:	f107 030f 	add.w	r3, r7, #15
 8000792:	2206      	movs	r2, #6
 8000794:	2144      	movs	r1, #68	@ 0x44
 8000796:	6878      	ldr	r0, [r7, #4]
 8000798:	f7ff fda8 	bl	80002ec <I2C_write>

	return;
 800079c:	bf00      	nop
}
 800079e:	3710      	adds	r7, #16
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <USB_CDC_RxHandler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void USB_CDC_RxHandler(uint8_t *buffer, uint32_t size) {
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
	char cmd_temp = buffer[0];
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	73fb      	strb	r3, [r7, #15]
	if (cmd_temp == '\r') {
 80007b4:	7bfb      	ldrb	r3, [r7, #15]
 80007b6:	2b0d      	cmp	r3, #13
 80007b8:	d019      	beq.n	80007ee <USB_CDC_RxHandler+0x4a>
		return;
	}
	else if (size == 1) {
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d104      	bne.n	80007ca <USB_CDC_RxHandler+0x26>
		cmd_index = (char) buffer[0];
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	781a      	ldrb	r2, [r3, #0]
 80007c4:	4b0d      	ldr	r3, [pc, #52]	@ (80007fc <USB_CDC_RxHandler+0x58>)
 80007c6:	701a      	strb	r2, [r3, #0]
 80007c8:	e012      	b.n	80007f0 <USB_CDC_RxHandler+0x4c>
	}
	else {
		uint8_t first = (uint8_t) buffer[0] - '1';
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	3b31      	subs	r3, #49	@ 0x31
 80007d0:	73bb      	strb	r3, [r7, #14]
		uint8_t second = (uint8_t) buffer[1] - '1';
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	3301      	adds	r3, #1
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	3b31      	subs	r3, #49	@ 0x31
 80007da:	737b      	strb	r3, [r7, #13]

		cam_mode_select = first * 16 + second;
 80007dc:	7bbb      	ldrb	r3, [r7, #14]
 80007de:	011b      	lsls	r3, r3, #4
 80007e0:	b2da      	uxtb	r2, r3
 80007e2:	7b7b      	ldrb	r3, [r7, #13]
 80007e4:	4413      	add	r3, r2
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	4b05      	ldr	r3, [pc, #20]	@ (8000800 <USB_CDC_RxHandler+0x5c>)
 80007ea:	701a      	strb	r2, [r3, #0]
 80007ec:	e000      	b.n	80007f0 <USB_CDC_RxHandler+0x4c>
		return;
 80007ee:	bf00      	nop
			default: {
				cam_mode_select = 0xAA; //ERROR
			}
		}*/
	}
}
 80007f0:	3714      	adds	r7, #20
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	24000000 	.word	0x24000000
 8000800:	24000001 	.word	0x24000001

08000804 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000804:	b5b0      	push	{r4, r5, r7, lr}
 8000806:	b09a      	sub	sp, #104	@ 0x68
 8000808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800080a:	f000 fc8f 	bl	800112c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080e:	f002 fc3f 	bl	8003090 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000812:	f000 f8f7 	bl	8000a04 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000816:	f000 f977 	bl	8000b08 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081a:	f000 fb6f 	bl	8000efc <MX_GPIO_Init>
  MX_DMA_Init();
 800081e:	f000 fb3d 	bl	8000e9c <MX_DMA_Init>
  MX_DCMI_Init();
 8000822:	f000 fa71 	bl	8000d08 <MX_DCMI_Init>
  MX_I2C2_Init();
 8000826:	f000 faa3 	bl	8000d70 <MX_I2C2_Init>
  MX_ADC1_Init();
 800082a:	f000 f98d 	bl	8000b48 <MX_ADC1_Init>
  MX_ADC2_Init();
 800082e:	f000 fa05 	bl	8000c3c <MX_ADC2_Init>
  MX_USB_DEVICE_Init();
 8000832:	f012 f8f7 	bl	8012a24 <MX_USB_DEVICE_Init>
  MX_SPI4_Init();
 8000836:	f000 fadb 	bl	8000df0 <MX_SPI4_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  setup(&status, &error_index);
 800083a:	4968      	ldr	r1, [pc, #416]	@ (80009dc <main+0x1d8>)
 800083c:	4868      	ldr	r0, [pc, #416]	@ (80009e0 <main+0x1dc>)
 800083e:	f001 fbdb 	bl	8001ff8 <setup>
  //nirq_handler(&status, &error_index, &ping_in_progress);
#ifdef GROUND_STATION
  cmd_main_win();
 8000842:	f001 fc75 	bl	8002130 <cmd_main_win>
#endif
  //HAL_NVIC_EnableIRQ(nIRQ_EXTI_IRQn);
  while (1) {
	  if (radio_nirq) {
 8000846:	4b67      	ldr	r3, [pc, #412]	@ (80009e4 <main+0x1e0>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d007      	beq.n	800085e <main+0x5a>
		  // Handling of the packet IRQ
		  //HAL_NVIC_DisableIRQ(nIRQ_EXTI_IRQn);
		  nirq_handler(&status, &error_index, &ping_in_progress);
 800084e:	4a66      	ldr	r2, [pc, #408]	@ (80009e8 <main+0x1e4>)
 8000850:	4962      	ldr	r1, [pc, #392]	@ (80009dc <main+0x1d8>)
 8000852:	4863      	ldr	r0, [pc, #396]	@ (80009e0 <main+0x1dc>)
 8000854:	f001 fd70 	bl	8002338 <nirq_handler>
		  //HAL_NVIC_EnableIRQ(nIRQ_EXTI_IRQn);
		  radio_nirq = 0;
 8000858:	4b62      	ldr	r3, [pc, #392]	@ (80009e4 <main+0x1e0>)
 800085a:	2200      	movs	r2, #0
 800085c:	701a      	strb	r2, [r3, #0]
	  }
#ifdef GROUND_STATION
	  if (ping_in_progress == 2) {
 800085e:	4b62      	ldr	r3, [pc, #392]	@ (80009e8 <main+0x1e4>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b02      	cmp	r3, #2
 8000864:	d116      	bne.n	8000894 <main+0x90>
		  ping_in_progress = 0;
 8000866:	4b60      	ldr	r3, [pc, #384]	@ (80009e8 <main+0x1e4>)
 8000868:	2200      	movs	r2, #0
 800086a:	701a      	strb	r2, [r3, #0]
		  uint8_t buffer[] = "Ping received \r\n";
 800086c:	4b5f      	ldr	r3, [pc, #380]	@ (80009ec <main+0x1e8>)
 800086e:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8000872:	461d      	mov	r5, r3
 8000874:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000876:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000878:	682b      	ldr	r3, [r5, #0]
 800087a:	7023      	strb	r3, [r4, #0]
		  uint8_t buffer_size = sizeof(buffer);
 800087c:	2311      	movs	r3, #17
 800087e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		  CDC_Transmit_HS(buffer, buffer_size);
 8000882:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000886:	b29a      	uxth	r2, r3
 8000888:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800088c:	4611      	mov	r1, r2
 800088e:	4618      	mov	r0, r3
 8000890:	f012 f996 	bl	8012bc0 <CDC_Transmit_HS>
	  }
	  switch (cmd_index) {
 8000894:	4b56      	ldr	r3, [pc, #344]	@ (80009f0 <main+0x1ec>)
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	3b30      	subs	r3, #48	@ 0x30
 800089a:	2b05      	cmp	r3, #5
 800089c:	f200 8084 	bhi.w	80009a8 <main+0x1a4>
 80008a0:	a201      	add	r2, pc, #4	@ (adr r2, 80008a8 <main+0xa4>)
 80008a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a6:	bf00      	nop
 80008a8:	080009d7 	.word	0x080009d7
 80008ac:	080008c1 	.word	0x080008c1
 80008b0:	080008f9 	.word	0x080008f9
 80008b4:	08000901 	.word	0x08000901
 80008b8:	08000961 	.word	0x08000961
 80008bc:	0800099b 	.word	0x0800099b
	  		  case '0':
	  			break;

	  		  // Ping
	  		  case '1': {
	  			  ping_in_progress = 1;
 80008c0:	4b49      	ldr	r3, [pc, #292]	@ (80009e8 <main+0x1e4>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	701a      	strb	r2, [r3, #0]
	  			  radio_ping(&status);
 80008c6:	4846      	ldr	r0, [pc, #280]	@ (80009e0 <main+0x1dc>)
 80008c8:	f001 fc76 	bl	80021b8 <radio_ping>
	  			  uint8_t buffer[] = "Ping send \r\n";
 80008cc:	4b49      	ldr	r3, [pc, #292]	@ (80009f4 <main+0x1f0>)
 80008ce:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80008d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008d4:	c407      	stmia	r4!, {r0, r1, r2}
 80008d6:	7023      	strb	r3, [r4, #0]
	  			  uint8_t buffer_size = sizeof(buffer);
 80008d8:	230d      	movs	r3, #13
 80008da:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
	  			  CDC_Transmit_HS(buffer, buffer_size);
 80008de:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 80008e2:	b29a      	uxth	r2, r3
 80008e4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80008e8:	4611      	mov	r1, r2
 80008ea:	4618      	mov	r0, r3
 80008ec:	f012 f968 	bl	8012bc0 <CDC_Transmit_HS>
	  			  cmd_index = '0';
 80008f0:	4b3f      	ldr	r3, [pc, #252]	@ (80009f0 <main+0x1ec>)
 80008f2:	2230      	movs	r2, #48	@ 0x30
 80008f4:	701a      	strb	r2, [r3, #0]
	  			  break;
 80008f6:	e06f      	b.n	80009d8 <main+0x1d4>
	  			}


	  		  // Telemetry
	  		  case '2': {
	  			  cmd_index = '0';
 80008f8:	4b3d      	ldr	r3, [pc, #244]	@ (80009f0 <main+0x1ec>)
 80008fa:	2230      	movs	r2, #48	@ 0x30
 80008fc:	701a      	strb	r2, [r3, #0]
	  			break;
 80008fe:	e06b      	b.n	80009d8 <main+0x1d4>
	  		  }

	  		  // IMG
	  		  case '3': {
	  			  cmd_img_options();
 8000900:	f001 fc38 	bl	8002174 <cmd_img_options>
	  			  while (cam_mode_select == 0xFF) {
 8000904:	e01c      	b.n	8000940 <main+0x13c>
	  				  if (cam_mode_select == 0xAA) {
 8000906:	4b3c      	ldr	r3, [pc, #240]	@ (80009f8 <main+0x1f4>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2baa      	cmp	r3, #170	@ 0xaa
 800090c:	d118      	bne.n	8000940 <main+0x13c>
	  					  uint8_t buffer[] = "Unrecognized command \r\n";
 800090e:	4b3b      	ldr	r3, [pc, #236]	@ (80009fc <main+0x1f8>)
 8000910:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8000914:	461d      	mov	r5, r3
 8000916:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000918:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800091a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800091e:	e884 0003 	stmia.w	r4, {r0, r1}
	  					  uint16_t buffer_size = sizeof(buffer);
 8000922:	2318      	movs	r3, #24
 8000924:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
	  					  CDC_Transmit_HS(buffer, buffer_size);
 8000928:	f8b7 2062 	ldrh.w	r2, [r7, #98]	@ 0x62
 800092c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000930:	4611      	mov	r1, r2
 8000932:	4618      	mov	r0, r3
 8000934:	f012 f944 	bl	8012bc0 <CDC_Transmit_HS>
	  					  cmd_index = '0';
 8000938:	4b2d      	ldr	r3, [pc, #180]	@ (80009f0 <main+0x1ec>)
 800093a:	2230      	movs	r2, #48	@ 0x30
 800093c:	701a      	strb	r2, [r3, #0]
	  					  break;
 800093e:	e003      	b.n	8000948 <main+0x144>
	  			  while (cam_mode_select == 0xFF) {
 8000940:	4b2d      	ldr	r3, [pc, #180]	@ (80009f8 <main+0x1f4>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2bff      	cmp	r3, #255	@ 0xff
 8000946:	d0de      	beq.n	8000906 <main+0x102>
	  				  }
	  			  }
	  			  capture_img(&status, &error_index, &cam_mode_select);
 8000948:	4a2b      	ldr	r2, [pc, #172]	@ (80009f8 <main+0x1f4>)
 800094a:	4924      	ldr	r1, [pc, #144]	@ (80009dc <main+0x1d8>)
 800094c:	4824      	ldr	r0, [pc, #144]	@ (80009e0 <main+0x1dc>)
 800094e:	f001 fc7e 	bl	800224e <capture_img>
	  			  cmd_index = '0';
 8000952:	4b27      	ldr	r3, [pc, #156]	@ (80009f0 <main+0x1ec>)
 8000954:	2230      	movs	r2, #48	@ 0x30
 8000956:	701a      	strb	r2, [r3, #0]
	  			  cam_mode_select = 0xFF; //return to default state
 8000958:	4b27      	ldr	r3, [pc, #156]	@ (80009f8 <main+0x1f4>)
 800095a:	22ff      	movs	r2, #255	@ 0xff
 800095c:	701a      	strb	r2, [r3, #0]
	  			break;
 800095e:	e03b      	b.n	80009d8 <main+0x1d4>
	  		  }
	  		  case '4': {
	  			uint8_t buffer[] = "\e[1;1H\e[2J";
 8000960:	4a27      	ldr	r2, [pc, #156]	@ (8000a00 <main+0x1fc>)
 8000962:	f107 0318 	add.w	r3, r7, #24
 8000966:	ca07      	ldmia	r2, {r0, r1, r2}
 8000968:	c303      	stmia	r3!, {r0, r1}
 800096a:	801a      	strh	r2, [r3, #0]
 800096c:	3302      	adds	r3, #2
 800096e:	0c12      	lsrs	r2, r2, #16
 8000970:	701a      	strb	r2, [r3, #0]
	  			uint16_t buffer_size = sizeof(buffer);
 8000972:	230b      	movs	r3, #11
 8000974:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
	  			CDC_Transmit_HS(buffer, buffer_size);
 8000978:	f8b7 2064 	ldrh.w	r2, [r7, #100]	@ 0x64
 800097c:	f107 0318 	add.w	r3, r7, #24
 8000980:	4611      	mov	r1, r2
 8000982:	4618      	mov	r0, r3
 8000984:	f012 f91c 	bl	8012bc0 <CDC_Transmit_HS>
	  			cmd_index = '0';
 8000988:	4b19      	ldr	r3, [pc, #100]	@ (80009f0 <main+0x1ec>)
 800098a:	2230      	movs	r2, #48	@ 0x30
 800098c:	701a      	strb	r2, [r3, #0]
	  			HAL_Delay(100);
 800098e:	2064      	movs	r0, #100	@ 0x64
 8000990:	f002 fc10 	bl	80031b4 <HAL_Delay>
	  			cmd_main_win();
 8000994:	f001 fbcc 	bl	8002130 <cmd_main_win>
	  			break;
 8000998:	e01e      	b.n	80009d8 <main+0x1d4>
	  		  }
	  		  case '5': {
	  			  get_GS_state(&status);
 800099a:	4811      	ldr	r0, [pc, #68]	@ (80009e0 <main+0x1dc>)
 800099c:	f001 fdd4 	bl	8002548 <get_GS_state>
	  			  cmd_index = '0';
 80009a0:	4b13      	ldr	r3, [pc, #76]	@ (80009f0 <main+0x1ec>)
 80009a2:	2230      	movs	r2, #48	@ 0x30
 80009a4:	701a      	strb	r2, [r3, #0]
	  			  break;
 80009a6:	e017      	b.n	80009d8 <main+0x1d4>
	  		  }
	  		  default: {
	  			uint8_t buffer[] = "Unrecognized command \r\n";
 80009a8:	4b14      	ldr	r3, [pc, #80]	@ (80009fc <main+0x1f8>)
 80009aa:	463c      	mov	r4, r7
 80009ac:	461d      	mov	r5, r3
 80009ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009b2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80009b6:	e884 0003 	stmia.w	r4, {r0, r1}
	  			uint16_t buffer_size = sizeof(buffer);
 80009ba:	2318      	movs	r3, #24
 80009bc:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
	  			CDC_Transmit_HS(buffer, buffer_size);
 80009c0:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 80009c4:	463b      	mov	r3, r7
 80009c6:	4611      	mov	r1, r2
 80009c8:	4618      	mov	r0, r3
 80009ca:	f012 f8f9 	bl	8012bc0 <CDC_Transmit_HS>
	  			cmd_index = '0';
 80009ce:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <main+0x1ec>)
 80009d0:	2230      	movs	r2, #48	@ 0x30
 80009d2:	701a      	strb	r2, [r3, #0]
 80009d4:	e737      	b.n	8000846 <main+0x42>
	  			break;
 80009d6:	bf00      	nop
	  if (radio_nirq) {
 80009d8:	e735      	b.n	8000846 <main+0x42>
 80009da:	bf00      	nop
 80009dc:	240004c5 	.word	0x240004c5
 80009e0:	240004c4 	.word	0x240004c4
 80009e4:	240004c6 	.word	0x240004c6
 80009e8:	240004c7 	.word	0x240004c7
 80009ec:	080135ac 	.word	0x080135ac
 80009f0:	24000000 	.word	0x24000000
 80009f4:	080135c0 	.word	0x080135c0
 80009f8:	24000001 	.word	0x24000001
 80009fc:	080135d0 	.word	0x080135d0
 8000a00:	080135e8 	.word	0x080135e8

08000a04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b09c      	sub	sp, #112	@ 0x70
 8000a08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a0e:	224c      	movs	r2, #76	@ 0x4c
 8000a10:	2100      	movs	r1, #0
 8000a12:	4618      	mov	r0, r3
 8000a14:	f012 fd84 	bl	8013520 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a18:	1d3b      	adds	r3, r7, #4
 8000a1a:	2220      	movs	r2, #32
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f012 fd7e 	bl	8013520 <memset>

  /*AXI clock gating */
  RCC->CKGAENR = 0xFFFFFFFF;
 8000a24:	4b36      	ldr	r3, [pc, #216]	@ (8000b00 <SystemClock_Config+0xfc>)
 8000a26:	f04f 32ff 	mov.w	r2, #4294967295
 8000a2a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a2e:	2002      	movs	r0, #2
 8000a30:	f009 ff02 	bl	800a838 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a34:	2300      	movs	r3, #0
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	4b32      	ldr	r3, [pc, #200]	@ (8000b04 <SystemClock_Config+0x100>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	4a31      	ldr	r2, [pc, #196]	@ (8000b04 <SystemClock_Config+0x100>)
 8000a3e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a42:	6193      	str	r3, [r2, #24]
 8000a44:	4b2f      	ldr	r3, [pc, #188]	@ (8000b04 <SystemClock_Config+0x100>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a4c:	603b      	str	r3, [r7, #0]
 8000a4e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a50:	bf00      	nop
 8000a52:	4b2c      	ldr	r3, [pc, #176]	@ (8000b04 <SystemClock_Config+0x100>)
 8000a54:	699b      	ldr	r3, [r3, #24]
 8000a56:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a5e:	d1f8      	bne.n	8000a52 <SystemClock_Config+0x4e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a60:	2301      	movs	r3, #1
 8000a62:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a64:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000a68:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a72:	2301      	movs	r3, #1
 8000a74:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 70;
 8000a76:	2346      	movs	r3, #70	@ 0x46
 8000a78:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 25;
 8000a7e:	2319      	movs	r3, #25
 8000a80:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 4;
 8000a82:	2304      	movs	r3, #4
 8000a84:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a86:	230c      	movs	r3, #12
 8000a88:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a96:	4618      	mov	r0, r3
 8000a98:	f009 ff18 	bl	800a8cc <HAL_RCC_OscConfig>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000aa2:	f000 fb6f 	bl	8001184 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aa6:	233f      	movs	r3, #63	@ 0x3f
 8000aa8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aaa:	2303      	movs	r3, #3
 8000aac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ab6:	2340      	movs	r3, #64	@ 0x40
 8000ab8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000aba:	2340      	movs	r3, #64	@ 0x40
 8000abc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000abe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ac2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000ac4:	2340      	movs	r3, #64	@ 0x40
 8000ac6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	2106      	movs	r1, #6
 8000acc:	4618      	mov	r0, r3
 8000ace:	f00a fb2f 	bl	800b130 <HAL_RCC_ClockConfig>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8000ad8:	f000 fb54 	bl	8001184 <Error_Handler>
  }
  __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8000adc:	4b08      	ldr	r3, [pc, #32]	@ (8000b00 <SystemClock_Config+0xfc>)
 8000ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ae0:	4a07      	ldr	r2, [pc, #28]	@ (8000b00 <SystemClock_Config+0xfc>)
 8000ae2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ae6:	62d3      	str	r3, [r2, #44]	@ 0x2c
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_PLL1QCLK, RCC_MCODIV_1);
 8000ae8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000aec:	f44f 0140 	mov.w	r1, #12582912	@ 0xc00000
 8000af0:	2000      	movs	r0, #0
 8000af2:	f00a fcd3 	bl	800b49c <HAL_RCC_MCOConfig>
}
 8000af6:	bf00      	nop
 8000af8:	3770      	adds	r7, #112	@ 0x70
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	58024400 	.word	0x58024400
 8000b04:	58024800 	.word	0x58024800

08000b08 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b0b0      	sub	sp, #192	@ 0xc0
 8000b0c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b0e:	463b      	mov	r3, r7
 8000b10:	22c0      	movs	r2, #192	@ 0xc0
 8000b12:	2100      	movs	r1, #0
 8000b14:	4618      	mov	r0, r3
 8000b16:	f012 fd03 	bl	8013520 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 8000b1a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000b1e:	f04f 0300 	mov.w	r3, #0
 8000b22:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSE;
 8000b26:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000b2a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b2c:	463b      	mov	r3, r7
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f00a fede 	bl	800b8f0 <HAL_RCCEx_PeriphCLKConfig>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <PeriphCommonClock_Config+0x36>
  {
    Error_Handler();
 8000b3a:	f000 fb23 	bl	8001184 <Error_Handler>
  }
}
 8000b3e:	bf00      	nop
 8000b40:	37c0      	adds	r7, #192	@ 0xc0
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
	...

08000b48 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	@ 0x28
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b4e:	f107 031c 	add.w	r3, r7, #28
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
 8000b68:	615a      	str	r2, [r3, #20]
 8000b6a:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b6c:	4b30      	ldr	r3, [pc, #192]	@ (8000c30 <MX_ADC1_Init+0xe8>)
 8000b6e:	4a31      	ldr	r2, [pc, #196]	@ (8000c34 <MX_ADC1_Init+0xec>)
 8000b70:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000b72:	4b2f      	ldr	r3, [pc, #188]	@ (8000c30 <MX_ADC1_Init+0xe8>)
 8000b74:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000b78:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000b7a:	4b2d      	ldr	r3, [pc, #180]	@ (8000c30 <MX_ADC1_Init+0xe8>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b80:	4b2b      	ldr	r3, [pc, #172]	@ (8000c30 <MX_ADC1_Init+0xe8>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b86:	4b2a      	ldr	r3, [pc, #168]	@ (8000c30 <MX_ADC1_Init+0xe8>)
 8000b88:	2204      	movs	r2, #4
 8000b8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b8c:	4b28      	ldr	r3, [pc, #160]	@ (8000c30 <MX_ADC1_Init+0xe8>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b92:	4b27      	ldr	r3, [pc, #156]	@ (8000c30 <MX_ADC1_Init+0xe8>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000b98:	4b25      	ldr	r3, [pc, #148]	@ (8000c30 <MX_ADC1_Init+0xe8>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b9e:	4b24      	ldr	r3, [pc, #144]	@ (8000c30 <MX_ADC1_Init+0xe8>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ba4:	4b22      	ldr	r3, [pc, #136]	@ (8000c30 <MX_ADC1_Init+0xe8>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000baa:	4b21      	ldr	r3, [pc, #132]	@ (8000c30 <MX_ADC1_Init+0xe8>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c30 <MX_ADC1_Init+0xe8>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c30 <MX_ADC1_Init+0xe8>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000bbc:	4b1c      	ldr	r3, [pc, #112]	@ (8000c30 <MX_ADC1_Init+0xe8>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000bc2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c30 <MX_ADC1_Init+0xe8>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bca:	4819      	ldr	r0, [pc, #100]	@ (8000c30 <MX_ADC1_Init+0xe8>)
 8000bcc:	f002 fcd4 	bl	8003578 <HAL_ADC_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000bd6:	f000 fad5 	bl	8001184 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	4619      	mov	r1, r3
 8000be4:	4812      	ldr	r0, [pc, #72]	@ (8000c30 <MX_ADC1_Init+0xe8>)
 8000be6:	f003 f993 	bl	8003f10 <HAL_ADCEx_MultiModeConfigChannel>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000bf0:	f000 fac8 	bl	8001184 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000bf4:	4b10      	ldr	r3, [pc, #64]	@ (8000c38 <MX_ADC1_Init+0xf0>)
 8000bf6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bf8:	2306      	movs	r3, #6
 8000bfa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c00:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000c04:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c06:	2304      	movs	r3, #4
 8000c08:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c12:	463b      	mov	r3, r7
 8000c14:	4619      	mov	r1, r3
 8000c16:	4806      	ldr	r0, [pc, #24]	@ (8000c30 <MX_ADC1_Init+0xe8>)
 8000c18:	f002 fe08 	bl	800382c <HAL_ADC_ConfigChannel>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000c22:	f000 faaf 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	3728      	adds	r7, #40	@ 0x28
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	24000168 	.word	0x24000168
 8000c34:	40022000 	.word	0x40022000
 8000c38:	25b00200 	.word	0x25b00200

08000c3c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
 8000c50:	615a      	str	r2, [r3, #20]
 8000c52:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000c54:	4b29      	ldr	r3, [pc, #164]	@ (8000cfc <MX_ADC2_Init+0xc0>)
 8000c56:	4a2a      	ldr	r2, [pc, #168]	@ (8000d00 <MX_ADC2_Init+0xc4>)
 8000c58:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8000c5a:	4b28      	ldr	r3, [pc, #160]	@ (8000cfc <MX_ADC2_Init+0xc0>)
 8000c5c:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000c60:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000c62:	4b26      	ldr	r3, [pc, #152]	@ (8000cfc <MX_ADC2_Init+0xc0>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c68:	4b24      	ldr	r3, [pc, #144]	@ (8000cfc <MX_ADC2_Init+0xc0>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c6e:	4b23      	ldr	r3, [pc, #140]	@ (8000cfc <MX_ADC2_Init+0xc0>)
 8000c70:	2204      	movs	r2, #4
 8000c72:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000c74:	4b21      	ldr	r3, [pc, #132]	@ (8000cfc <MX_ADC2_Init+0xc0>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000c7a:	4b20      	ldr	r3, [pc, #128]	@ (8000cfc <MX_ADC2_Init+0xc0>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000c80:	4b1e      	ldr	r3, [pc, #120]	@ (8000cfc <MX_ADC2_Init+0xc0>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000c86:	4b1d      	ldr	r3, [pc, #116]	@ (8000cfc <MX_ADC2_Init+0xc0>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cfc <MX_ADC2_Init+0xc0>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c92:	4b1a      	ldr	r3, [pc, #104]	@ (8000cfc <MX_ADC2_Init+0xc0>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000c98:	4b18      	ldr	r3, [pc, #96]	@ (8000cfc <MX_ADC2_Init+0xc0>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c9e:	4b17      	ldr	r3, [pc, #92]	@ (8000cfc <MX_ADC2_Init+0xc0>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000ca4:	4b15      	ldr	r3, [pc, #84]	@ (8000cfc <MX_ADC2_Init+0xc0>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000caa:	4b14      	ldr	r3, [pc, #80]	@ (8000cfc <MX_ADC2_Init+0xc0>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000cb2:	4812      	ldr	r0, [pc, #72]	@ (8000cfc <MX_ADC2_Init+0xc0>)
 8000cb4:	f002 fc60 	bl	8003578 <HAL_ADC_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 8000cbe:	f000 fa61 	bl	8001184 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000cc2:	4b10      	ldr	r3, [pc, #64]	@ (8000d04 <MX_ADC2_Init+0xc8>)
 8000cc4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cc6:	2306      	movs	r3, #6
 8000cc8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cce:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000cd2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cd4:	2304      	movs	r3, #4
 8000cd6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4805      	ldr	r0, [pc, #20]	@ (8000cfc <MX_ADC2_Init+0xc0>)
 8000ce6:	f002 fda1 	bl	800382c <HAL_ADC_ConfigChannel>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 8000cf0:	f000 fa48 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000cf4:	bf00      	nop
 8000cf6:	3720      	adds	r7, #32
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	240001cc 	.word	0x240001cc
 8000d00:	40022100 	.word	0x40022100
 8000d04:	21800100 	.word	0x21800100

08000d08 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000d0c:	4b16      	ldr	r3, [pc, #88]	@ (8000d68 <MX_DCMI_Init+0x60>)
 8000d0e:	4a17      	ldr	r2, [pc, #92]	@ (8000d6c <MX_DCMI_Init+0x64>)
 8000d10:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000d12:	4b15      	ldr	r3, [pc, #84]	@ (8000d68 <MX_DCMI_Init+0x60>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000d18:	4b13      	ldr	r3, [pc, #76]	@ (8000d68 <MX_DCMI_Init+0x60>)
 8000d1a:	2220      	movs	r2, #32
 8000d1c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000d1e:	4b12      	ldr	r3, [pc, #72]	@ (8000d68 <MX_DCMI_Init+0x60>)
 8000d20:	2280      	movs	r2, #128	@ 0x80
 8000d22:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000d24:	4b10      	ldr	r3, [pc, #64]	@ (8000d68 <MX_DCMI_Init+0x60>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d68 <MX_DCMI_Init+0x60>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000d30:	4b0d      	ldr	r3, [pc, #52]	@ (8000d68 <MX_DCMI_Init+0x60>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 8000d36:	4b0c      	ldr	r3, [pc, #48]	@ (8000d68 <MX_DCMI_Init+0x60>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8000d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000d68 <MX_DCMI_Init+0x60>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000d42:	4b09      	ldr	r3, [pc, #36]	@ (8000d68 <MX_DCMI_Init+0x60>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	629a      	str	r2, [r3, #40]	@ 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000d48:	4b07      	ldr	r3, [pc, #28]	@ (8000d68 <MX_DCMI_Init+0x60>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8000d4e:	4b06      	ldr	r3, [pc, #24]	@ (8000d68 <MX_DCMI_Init+0x60>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000d54:	4804      	ldr	r0, [pc, #16]	@ (8000d68 <MX_DCMI_Init+0x60>)
 8000d56:	f003 faff 	bl	8004358 <HAL_DCMI_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000d60:	f000 fa10 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000d64:	bf00      	nop
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	24000230 	.word	0x24000230
 8000d6c:	48020000 	.word	0x48020000

08000d70 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d74:	4b1b      	ldr	r3, [pc, #108]	@ (8000de4 <MX_I2C2_Init+0x74>)
 8000d76:	4a1c      	ldr	r2, [pc, #112]	@ (8000de8 <MX_I2C2_Init+0x78>)
 8000d78:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20B0CCFF;
 8000d7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000de4 <MX_I2C2_Init+0x74>)
 8000d7c:	4a1b      	ldr	r2, [pc, #108]	@ (8000dec <MX_I2C2_Init+0x7c>)
 8000d7e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d80:	4b18      	ldr	r3, [pc, #96]	@ (8000de4 <MX_I2C2_Init+0x74>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d86:	4b17      	ldr	r3, [pc, #92]	@ (8000de4 <MX_I2C2_Init+0x74>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d8c:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <MX_I2C2_Init+0x74>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d92:	4b14      	ldr	r3, [pc, #80]	@ (8000de4 <MX_I2C2_Init+0x74>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d98:	4b12      	ldr	r3, [pc, #72]	@ (8000de4 <MX_I2C2_Init+0x74>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d9e:	4b11      	ldr	r3, [pc, #68]	@ (8000de4 <MX_I2C2_Init+0x74>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	@ (8000de4 <MX_I2C2_Init+0x74>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000daa:	480e      	ldr	r0, [pc, #56]	@ (8000de4 <MX_I2C2_Init+0x74>)
 8000dac:	f007 fb54 	bl	8008458 <HAL_I2C_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000db6:	f000 f9e5 	bl	8001184 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dba:	2100      	movs	r1, #0
 8000dbc:	4809      	ldr	r0, [pc, #36]	@ (8000de4 <MX_I2C2_Init+0x74>)
 8000dbe:	f008 fa03 	bl	80091c8 <HAL_I2CEx_ConfigAnalogFilter>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000dc8:	f000 f9dc 	bl	8001184 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4805      	ldr	r0, [pc, #20]	@ (8000de4 <MX_I2C2_Init+0x74>)
 8000dd0:	f008 fa45 	bl	800925e <HAL_I2CEx_ConfigDigitalFilter>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000dda:	f000 f9d3 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	240002f8 	.word	0x240002f8
 8000de8:	40005800 	.word	0x40005800
 8000dec:	20b0ccff 	.word	0x20b0ccff

08000df0 <MX_SPI4_Init>:
  * @brief SPI4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI4_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  /* SPI4 parameter configuration*/
  hspi4.Instance = SPI4;
 8000df4:	4b27      	ldr	r3, [pc, #156]	@ (8000e94 <MX_SPI4_Init+0xa4>)
 8000df6:	4a28      	ldr	r2, [pc, #160]	@ (8000e98 <MX_SPI4_Init+0xa8>)
 8000df8:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8000dfa:	4b26      	ldr	r3, [pc, #152]	@ (8000e94 <MX_SPI4_Init+0xa4>)
 8000dfc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000e00:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8000e02:	4b24      	ldr	r3, [pc, #144]	@ (8000e94 <MX_SPI4_Init+0xa4>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e08:	4b22      	ldr	r3, [pc, #136]	@ (8000e94 <MX_SPI4_Init+0xa4>)
 8000e0a:	2207      	movs	r2, #7
 8000e0c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e0e:	4b21      	ldr	r3, [pc, #132]	@ (8000e94 <MX_SPI4_Init+0xa4>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e14:	4b1f      	ldr	r3, [pc, #124]	@ (8000e94 <MX_SPI4_Init+0xa4>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000e1a:	4b1e      	ldr	r3, [pc, #120]	@ (8000e94 <MX_SPI4_Init+0xa4>)
 8000e1c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000e20:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e22:	4b1c      	ldr	r3, [pc, #112]	@ (8000e94 <MX_SPI4_Init+0xa4>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e28:	4b1a      	ldr	r3, [pc, #104]	@ (8000e94 <MX_SPI4_Init+0xa4>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e2e:	4b19      	ldr	r3, [pc, #100]	@ (8000e94 <MX_SPI4_Init+0xa4>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e34:	4b17      	ldr	r3, [pc, #92]	@ (8000e94 <MX_SPI4_Init+0xa4>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 0x0;
 8000e3a:	4b16      	ldr	r3, [pc, #88]	@ (8000e94 <MX_SPI4_Init+0xa4>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e40:	4b14      	ldr	r3, [pc, #80]	@ (8000e94 <MX_SPI4_Init+0xa4>)
 8000e42:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e46:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi4.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e48:	4b12      	ldr	r3, [pc, #72]	@ (8000e94 <MX_SPI4_Init+0xa4>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi4.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e4e:	4b11      	ldr	r3, [pc, #68]	@ (8000e94 <MX_SPI4_Init+0xa4>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi4.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e54:	4b0f      	ldr	r3, [pc, #60]	@ (8000e94 <MX_SPI4_Init+0xa4>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi4.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <MX_SPI4_Init+0xa4>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi4.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000e60:	4b0c      	ldr	r3, [pc, #48]	@ (8000e94 <MX_SPI4_Init+0xa4>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi4.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000e66:	4b0b      	ldr	r3, [pc, #44]	@ (8000e94 <MX_SPI4_Init+0xa4>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi4.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000e6c:	4b09      	ldr	r3, [pc, #36]	@ (8000e94 <MX_SPI4_Init+0xa4>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi4.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000e72:	4b08      	ldr	r3, [pc, #32]	@ (8000e94 <MX_SPI4_Init+0xa4>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi4.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000e78:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <MX_SPI4_Init+0xa4>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8000e7e:	4805      	ldr	r0, [pc, #20]	@ (8000e94 <MX_SPI4_Init+0xa4>)
 8000e80:	f00d f940 	bl	800e104 <HAL_SPI_Init>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_SPI4_Init+0x9e>
  {
    Error_Handler();
 8000e8a:	f000 f97b 	bl	8001184 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	2400034c 	.word	0x2400034c
 8000e98:	40013400 	.word	0x40013400

08000e9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ea2:	4b15      	ldr	r3, [pc, #84]	@ (8000ef8 <MX_DMA_Init+0x5c>)
 8000ea4:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000ea8:	4a13      	ldr	r2, [pc, #76]	@ (8000ef8 <MX_DMA_Init+0x5c>)
 8000eaa:	f043 0301 	orr.w	r3, r3, #1
 8000eae:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8000eb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <MX_DMA_Init+0x5c>)
 8000eb4:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8000eb8:	f003 0301 	and.w	r3, r3, #1
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	200b      	movs	r0, #11
 8000ec6:	f003 f99a 	bl	80041fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000eca:	200b      	movs	r0, #11
 8000ecc:	f003 f9b1 	bl	8004232 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	200c      	movs	r0, #12
 8000ed6:	f003 f992 	bl	80041fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000eda:	200c      	movs	r0, #12
 8000edc:	f003 f9a9 	bl	8004232 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	200d      	movs	r0, #13
 8000ee6:	f003 f98a 	bl	80041fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000eea:	200d      	movs	r0, #13
 8000eec:	f003 f9a1 	bl	8004232 <HAL_NVIC_EnableIRQ>

}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	58024400 	.word	0x58024400

08000efc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08c      	sub	sp, #48	@ 0x30
 8000f00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f02:	f107 031c 	add.w	r3, r7, #28
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f12:	4b77      	ldr	r3, [pc, #476]	@ (80010f0 <MX_GPIO_Init+0x1f4>)
 8000f14:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f18:	4a75      	ldr	r2, [pc, #468]	@ (80010f0 <MX_GPIO_Init+0x1f4>)
 8000f1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f1e:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f22:	4b73      	ldr	r3, [pc, #460]	@ (80010f0 <MX_GPIO_Init+0x1f4>)
 8000f24:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f2c:	61bb      	str	r3, [r7, #24]
 8000f2e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f30:	4b6f      	ldr	r3, [pc, #444]	@ (80010f0 <MX_GPIO_Init+0x1f4>)
 8000f32:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f36:	4a6e      	ldr	r2, [pc, #440]	@ (80010f0 <MX_GPIO_Init+0x1f4>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f40:	4b6b      	ldr	r3, [pc, #428]	@ (80010f0 <MX_GPIO_Init+0x1f4>)
 8000f42:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f46:	f003 0301 	and.w	r3, r3, #1
 8000f4a:	617b      	str	r3, [r7, #20]
 8000f4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4e:	4b68      	ldr	r3, [pc, #416]	@ (80010f0 <MX_GPIO_Init+0x1f4>)
 8000f50:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f54:	4a66      	ldr	r2, [pc, #408]	@ (80010f0 <MX_GPIO_Init+0x1f4>)
 8000f56:	f043 0304 	orr.w	r3, r3, #4
 8000f5a:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f5e:	4b64      	ldr	r3, [pc, #400]	@ (80010f0 <MX_GPIO_Init+0x1f4>)
 8000f60:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f64:	f003 0304 	and.w	r3, r3, #4
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6c:	4b60      	ldr	r3, [pc, #384]	@ (80010f0 <MX_GPIO_Init+0x1f4>)
 8000f6e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f72:	4a5f      	ldr	r2, [pc, #380]	@ (80010f0 <MX_GPIO_Init+0x1f4>)
 8000f74:	f043 0302 	orr.w	r3, r3, #2
 8000f78:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f7c:	4b5c      	ldr	r3, [pc, #368]	@ (80010f0 <MX_GPIO_Init+0x1f4>)
 8000f7e:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f8a:	4b59      	ldr	r3, [pc, #356]	@ (80010f0 <MX_GPIO_Init+0x1f4>)
 8000f8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000f90:	4a57      	ldr	r2, [pc, #348]	@ (80010f0 <MX_GPIO_Init+0x1f4>)
 8000f92:	f043 0310 	orr.w	r3, r3, #16
 8000f96:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000f9a:	4b55      	ldr	r3, [pc, #340]	@ (80010f0 <MX_GPIO_Init+0x1f4>)
 8000f9c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fa0:	f003 0310 	and.w	r3, r3, #16
 8000fa4:	60bb      	str	r3, [r7, #8]
 8000fa6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fa8:	4b51      	ldr	r3, [pc, #324]	@ (80010f0 <MX_GPIO_Init+0x1f4>)
 8000faa:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fae:	4a50      	ldr	r2, [pc, #320]	@ (80010f0 <MX_GPIO_Init+0x1f4>)
 8000fb0:	f043 0308 	orr.w	r3, r3, #8
 8000fb4:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8000fb8:	4b4d      	ldr	r3, [pc, #308]	@ (80010f0 <MX_GPIO_Init+0x1f4>)
 8000fba:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8000fbe:	f003 0308 	and.w	r3, r3, #8
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_3V3_GPIO_Port, DCMI_3V3_Pin, GPIO_PIN_RESET);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fcc:	4849      	ldr	r0, [pc, #292]	@ (80010f4 <MX_GPIO_Init+0x1f8>)
 8000fce:	f007 fa0f 	bl	80083f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SDN_GPIO_Port, SDN_Pin, GPIO_PIN_RESET);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fd8:	4847      	ldr	r0, [pc, #284]	@ (80010f8 <MX_GPIO_Init+0x1fc>)
 8000fda:	f007 fa09 	bl	80083f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_RST_GPIO_Port, DCMI_RST_Pin, GPIO_PIN_RESET);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000fe4:	4845      	ldr	r0, [pc, #276]	@ (80010fc <MX_GPIO_Init+0x200>)
 8000fe6:	f007 fa03 	bl	80083f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWDN_GPIO_Port, DCMI_PWDN_Pin, GPIO_PIN_SET);
 8000fea:	2201      	movs	r2, #1
 8000fec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ff0:	4842      	ldr	r0, [pc, #264]	@ (80010fc <MX_GPIO_Init+0x200>)
 8000ff2:	f007 f9fd 	bl	80083f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : INT_N_Pin */
  GPIO_InitStruct.Pin = INT_N_Pin;
 8000ff6:	2380      	movs	r3, #128	@ 0x80
 8000ff8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(INT_N_GPIO_Port, &GPIO_InitStruct);
 8001002:	f107 031c 	add.w	r3, r7, #28
 8001006:	4619      	mov	r1, r3
 8001008:	483d      	ldr	r0, [pc, #244]	@ (8001100 <MX_GPIO_Init+0x204>)
 800100a:	f007 f829 	bl	8008060 <HAL_GPIO_Init>

  /*Configure GPIO pin : FLT__Pin */
  GPIO_InitStruct.Pin = FLT__Pin;
 800100e:	2302      	movs	r3, #2
 8001010:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001012:	2300      	movs	r3, #0
 8001014:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(FLT__GPIO_Port, &GPIO_InitStruct);
 800101a:	f107 031c 	add.w	r3, r7, #28
 800101e:	4619      	mov	r1, r3
 8001020:	4835      	ldr	r0, [pc, #212]	@ (80010f8 <MX_GPIO_Init+0x1fc>)
 8001022:	f007 f81d 	bl	8008060 <HAL_GPIO_Init>

  /*Configure GPIO pin : COMMAND_DONE_Pin */
  GPIO_InitStruct.Pin = COMMAND_DONE_Pin;
 8001026:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800102a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800102c:	2300      	movs	r3, #0
 800102e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COMMAND_DONE_GPIO_Port, &GPIO_InitStruct);
 8001034:	f107 031c 	add.w	r3, r7, #28
 8001038:	4619      	mov	r1, r3
 800103a:	482e      	ldr	r0, [pc, #184]	@ (80010f4 <MX_GPIO_Init+0x1f8>)
 800103c:	f007 f810 	bl	8008060 <HAL_GPIO_Init>

  /*Configure GPIO pin : nIRQ_Pin */
  GPIO_InitStruct.Pin = nIRQ_Pin;
 8001040:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001044:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001046:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800104a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(nIRQ_GPIO_Port, &GPIO_InitStruct);
 8001050:	f107 031c 	add.w	r3, r7, #28
 8001054:	4619      	mov	r1, r3
 8001056:	4827      	ldr	r0, [pc, #156]	@ (80010f4 <MX_GPIO_Init+0x1f8>)
 8001058:	f007 f802 	bl	8008060 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_3V3_Pin */
  GPIO_InitStruct.Pin = DCMI_3V3_Pin;
 800105c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001060:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001062:	2301      	movs	r3, #1
 8001064:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106a:	2300      	movs	r3, #0
 800106c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(DCMI_3V3_GPIO_Port, &GPIO_InitStruct);
 800106e:	f107 031c 	add.w	r3, r7, #28
 8001072:	4619      	mov	r1, r3
 8001074:	481f      	ldr	r0, [pc, #124]	@ (80010f4 <MX_GPIO_Init+0x1f8>)
 8001076:	f006 fff3 	bl	8008060 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDN_Pin */
  GPIO_InitStruct.Pin = SDN_Pin;
 800107a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800107e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001080:	2301      	movs	r3, #1
 8001082:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001084:	2302      	movs	r3, #2
 8001086:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001088:	2303      	movs	r3, #3
 800108a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(SDN_GPIO_Port, &GPIO_InitStruct);
 800108c:	f107 031c 	add.w	r3, r7, #28
 8001090:	4619      	mov	r1, r3
 8001092:	4819      	ldr	r0, [pc, #100]	@ (80010f8 <MX_GPIO_Init+0x1fc>)
 8001094:	f006 ffe4 	bl	8008060 <HAL_GPIO_Init>

  /*Configure GPIO pins : DCMI_RST_Pin DCMI_PWDN_Pin */
  GPIO_InitStruct.Pin = DCMI_RST_Pin|DCMI_PWDN_Pin;
 8001098:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800109c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109e:	2301      	movs	r3, #1
 80010a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a6:	2303      	movs	r3, #3
 80010a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010aa:	f107 031c 	add.w	r3, r7, #28
 80010ae:	4619      	mov	r1, r3
 80010b0:	4812      	ldr	r0, [pc, #72]	@ (80010fc <MX_GPIO_Init+0x200>)
 80010b2:	f006 ffd5 	bl	8008060 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_MCLK_Pin */
  GPIO_InitStruct.Pin = DCMI_MCLK_Pin;
 80010b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c4:	2303      	movs	r3, #3
 80010c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80010c8:	2300      	movs	r3, #0
 80010ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(DCMI_MCLK_GPIO_Port, &GPIO_InitStruct);
 80010cc:	f107 031c 	add.w	r3, r7, #28
 80010d0:	4619      	mov	r1, r3
 80010d2:	480b      	ldr	r0, [pc, #44]	@ (8001100 <MX_GPIO_Init+0x204>)
 80010d4:	f006 ffc4 	bl	8008060 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(nIRQ_EXTI_IRQn, 0, 0);
 80010d8:	2200      	movs	r2, #0
 80010da:	2100      	movs	r1, #0
 80010dc:	2028      	movs	r0, #40	@ 0x28
 80010de:	f003 f88e 	bl	80041fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(nIRQ_EXTI_IRQn);
 80010e2:	2028      	movs	r0, #40	@ 0x28
 80010e4:	f003 f8a5 	bl	8004232 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80010e8:	bf00      	nop
 80010ea:	3730      	adds	r7, #48	@ 0x30
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	58024400 	.word	0x58024400
 80010f4:	58021000 	.word	0x58021000
 80010f8:	58020400 	.word	0x58020400
 80010fc:	58020c00 	.word	0x58020c00
 8001100:	58020000 	.word	0x58020000

08001104 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_10) {
 800110e:	88fb      	ldrh	r3, [r7, #6]
 8001110:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001114:	d102      	bne.n	800111c <HAL_GPIO_EXTI_Callback+0x18>
    radio_nirq = 1;
 8001116:	4b04      	ldr	r3, [pc, #16]	@ (8001128 <HAL_GPIO_EXTI_Callback+0x24>)
 8001118:	2201      	movs	r2, #1
 800111a:	701a      	strb	r2, [r3, #0]
  }
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	240004c6 	.word	0x240004c6

0800112c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001132:	463b      	mov	r3, r7
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800113e:	f003 f893 	bl	8004268 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001142:	2301      	movs	r3, #1
 8001144:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8001146:	2300      	movs	r3, #0
 8001148:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800114a:	2300      	movs	r3, #0
 800114c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800114e:	231f      	movs	r3, #31
 8001150:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001152:	2387      	movs	r3, #135	@ 0x87
 8001154:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8001156:	2300      	movs	r3, #0
 8001158:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800115a:	2300      	movs	r3, #0
 800115c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800115e:	2301      	movs	r3, #1
 8001160:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001162:	2301      	movs	r3, #1
 8001164:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001166:	2300      	movs	r3, #0
 8001168:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800116a:	2300      	movs	r3, #0
 800116c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800116e:	463b      	mov	r3, r7
 8001170:	4618      	mov	r0, r3
 8001172:	f003 f8b1 	bl	80042d8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001176:	2004      	movs	r0, #4
 8001178:	f003 f88e 	bl	8004298 <HAL_MPU_Enable>

}
 800117c:	bf00      	nop
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001188:	b672      	cpsid	i
}
 800118a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <Error_Handler+0x8>

08001190 <camera_init>:
	status |= HAL_I2C_Master_Receive(p_I2C, CAM_READ, data, 1, 100);
	return status;
}
*/

void camera_init(HAL_StatusTypeDef* status, uint8_t* mode){
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
	//uint8_t read_value;



	// Power-up camera
	HAL_GPIO_WritePin(CAM_PWR_PORT, CAM_PWR_PIN, GPIO_PIN_SET);
 800119a:	2201      	movs	r2, #1
 800119c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011a0:	48b6      	ldr	r0, [pc, #728]	@ (800147c <camera_init+0x2ec>)
 80011a2:	f007 f925 	bl	80083f0 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 80011a6:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80011aa:	f002 f803 	bl	80031b4 <HAL_Delay>

	// Enable camera
	HAL_GPIO_WritePin(CAM_PWDN_PORT, CAM_PWDN_PIN, GPIO_PIN_RESET);
 80011ae:	2200      	movs	r2, #0
 80011b0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011b4:	48b2      	ldr	r0, [pc, #712]	@ (8001480 <camera_init+0x2f0>)
 80011b6:	f007 f91b 	bl	80083f0 <HAL_GPIO_WritePin>
	HAL_Delay(300);
 80011ba:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80011be:	f001 fff9 	bl	80031b4 <HAL_Delay>

	// Reset camera
	HAL_GPIO_WritePin(CAM_RESET_PORT, CAM_RESET_PIN, GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011c8:	48ad      	ldr	r0, [pc, #692]	@ (8001480 <camera_init+0x2f0>)
 80011ca:	f007 f911 	bl	80083f0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80011ce:	2064      	movs	r0, #100	@ 0x64
 80011d0:	f001 fff0 	bl	80031b4 <HAL_Delay>
	HAL_GPIO_WritePin(CAM_RESET_PORT, CAM_RESET_PIN, GPIO_PIN_SET);
 80011d4:	2201      	movs	r2, #1
 80011d6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011da:	48a9      	ldr	r0, [pc, #676]	@ (8001480 <camera_init+0x2f0>)
 80011dc:	f007 f908 	bl	80083f0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80011e0:	2064      	movs	r0, #100	@ 0x64
 80011e2:	f001 ffe7 	bl	80031b4 <HAL_Delay>


	// Initialization common for all modes
	uint8_t data = 0x80;
 80011e6:	2380      	movs	r3, #128	@ 0x80
 80011e8:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 80011ea:	f107 030f 	add.w	r3, r7, #15
 80011ee:	2212      	movs	r2, #18
 80011f0:	2142      	movs	r1, #66	@ 0x42
 80011f2:	6878      	ldr	r0, [r7, #4]
 80011f4:	f7ff f87a 	bl	80002ec <I2C_write>
	//status = camera_write(CAM_COM7, 0x80);			// Reset all registers
	I2C_read(status, CAM_WRITE, CAM_CLKRC, &data);
 80011f8:	f107 030f 	add.w	r3, r7, #15
 80011fc:	2211      	movs	r2, #17
 80011fe:	2142      	movs	r1, #66	@ 0x42
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f7ff f895 	bl	8000330 <I2C_read>
	data |= 0b1;
 8001206:	7bfb      	ldrb	r3, [r7, #15]
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	b2db      	uxtb	r3, r3
 800120e:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, CAM_WRITE, CAM_CLKRC, &data);
 8001210:	f107 030f 	add.w	r3, r7, #15
 8001214:	2211      	movs	r2, #17
 8001216:	2142      	movs	r1, #66	@ 0x42
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff f867 	bl	80002ec <I2C_write>
	//status |= camera_write(CAM_CLKRC, 0x01);		// Set clock pre-scaler /2, since A/C converter operates up to 12 MHz and input CLK is 24 MHz
	I2C_read(status, CAM_WRITE, CAM_DBLV, &data);
 800121e:	f107 030f 	add.w	r3, r7, #15
 8001222:	226b      	movs	r2, #107	@ 0x6b
 8001224:	2142      	movs	r1, #66	@ 0x42
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff f882 	bl	8000330 <I2C_read>
	data &= ~(1<<7 | 1<<6);
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001232:	b2db      	uxtb	r3, r3
 8001234:	73fb      	strb	r3, [r7, #15]
	//data = 0x0A;
	I2C_write(status, CAM_WRITE, CAM_DBLV, &data);
 8001236:	f107 030f 	add.w	r3, r7, #15
 800123a:	226b      	movs	r2, #107	@ 0x6b
 800123c:	2142      	movs	r1, #66	@ 0x42
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff f854 	bl	80002ec <I2C_write>
	//status |= camera_write(CAM_DBLV, 0x0A);			// Bypass PLL

	// Enable scaling for resolutions smaller than VGA
	if ((*mode != 0x00) && (*mode != 0x01)) {
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d016      	beq.n	800127a <camera_init+0xea>
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b01      	cmp	r3, #1
 8001252:	d012      	beq.n	800127a <camera_init+0xea>
		//status |= camera_write(CAM_COM3, 0x08);
		I2C_read(status, CAM_WRITE, CAM_COM3, &data);
 8001254:	f107 030f 	add.w	r3, r7, #15
 8001258:	220c      	movs	r2, #12
 800125a:	2142      	movs	r1, #66	@ 0x42
 800125c:	6878      	ldr	r0, [r7, #4]
 800125e:	f7ff f867 	bl	8000330 <I2C_read>
		//data = 0x08;
		data |= 1<<3;
 8001262:	7bfb      	ldrb	r3, [r7, #15]
 8001264:	f043 0308 	orr.w	r3, r3, #8
 8001268:	b2db      	uxtb	r3, r3
 800126a:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM3, &data);
 800126c:	f107 030f 	add.w	r3, r7, #15
 8001270:	220c      	movs	r2, #12
 8001272:	2142      	movs	r1, #66	@ 0x42
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff f839 	bl	80002ec <I2C_write>
	}

	// Settings depending on choice of mode
	switch (*mode) {
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b31      	cmp	r3, #49	@ 0x31
 8001280:	f200 80ee 	bhi.w	8001460 <camera_init+0x2d0>
 8001284:	a201      	add	r2, pc, #4	@ (adr r2, 800128c <camera_init+0xfc>)
 8001286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800128a:	bf00      	nop
 800128c:	08001355 	.word	0x08001355
 8001290:	08001369 	.word	0x08001369
 8001294:	08001461 	.word	0x08001461
 8001298:	08001461 	.word	0x08001461
 800129c:	08001461 	.word	0x08001461
 80012a0:	08001461 	.word	0x08001461
 80012a4:	08001461 	.word	0x08001461
 80012a8:	08001461 	.word	0x08001461
 80012ac:	08001461 	.word	0x08001461
 80012b0:	08001461 	.word	0x08001461
 80012b4:	08001461 	.word	0x08001461
 80012b8:	08001461 	.word	0x08001461
 80012bc:	08001461 	.word	0x08001461
 80012c0:	08001461 	.word	0x08001461
 80012c4:	08001461 	.word	0x08001461
 80012c8:	08001461 	.word	0x08001461
 80012cc:	0800138f 	.word	0x0800138f
 80012d0:	080013a3 	.word	0x080013a3
 80012d4:	08001461 	.word	0x08001461
 80012d8:	08001461 	.word	0x08001461
 80012dc:	08001461 	.word	0x08001461
 80012e0:	08001461 	.word	0x08001461
 80012e4:	08001461 	.word	0x08001461
 80012e8:	08001461 	.word	0x08001461
 80012ec:	08001461 	.word	0x08001461
 80012f0:	08001461 	.word	0x08001461
 80012f4:	08001461 	.word	0x08001461
 80012f8:	08001461 	.word	0x08001461
 80012fc:	08001461 	.word	0x08001461
 8001300:	08001461 	.word	0x08001461
 8001304:	08001461 	.word	0x08001461
 8001308:	08001461 	.word	0x08001461
 800130c:	080013c9 	.word	0x080013c9
 8001310:	080013dd 	.word	0x080013dd
 8001314:	08001461 	.word	0x08001461
 8001318:	08001461 	.word	0x08001461
 800131c:	08001461 	.word	0x08001461
 8001320:	08001461 	.word	0x08001461
 8001324:	08001461 	.word	0x08001461
 8001328:	08001461 	.word	0x08001461
 800132c:	08001461 	.word	0x08001461
 8001330:	08001461 	.word	0x08001461
 8001334:	08001461 	.word	0x08001461
 8001338:	08001461 	.word	0x08001461
 800133c:	08001461 	.word	0x08001461
 8001340:	08001461 	.word	0x08001461
 8001344:	08001461 	.word	0x08001461
 8001348:	08001461 	.word	0x08001461
 800134c:	08001403 	.word	0x08001403
 8001350:	08001417 	.word	0x08001417
	// VGA - YUV
	case 0x00: {
		//status |= camera_write(CAM_COM7, 0x00);		// Set output format
		data = 0x00;
 8001354:	2300      	movs	r3, #0
 8001356:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 8001358:	f107 030f 	add.w	r3, r7, #15
 800135c:	2212      	movs	r2, #18
 800135e:	2142      	movs	r1, #66	@ 0x42
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7fe ffc3 	bl	80002ec <I2C_write>
		break;
 8001366:	e07b      	b.n	8001460 <camera_init+0x2d0>
	}
	// VGA - RGB565
	case 0x01: {
		//status |= camera_write(CAM_COM7, 0x04);		// Set output format
		data = 0x04;
 8001368:	2304      	movs	r3, #4
 800136a:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 800136c:	f107 030f 	add.w	r3, r7, #15
 8001370:	2212      	movs	r2, #18
 8001372:	2142      	movs	r1, #66	@ 0x42
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7fe ffb9 	bl	80002ec <I2C_write>
		//status |= camera_write(CAM_COM15, 0xD0);	// Set 565 RGB option
		data = 0xD0;
 800137a:	23d0      	movs	r3, #208	@ 0xd0
 800137c:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM15, &data);
 800137e:	f107 030f 	add.w	r3, r7, #15
 8001382:	2240      	movs	r2, #64	@ 0x40
 8001384:	2142      	movs	r1, #66	@ 0x42
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7fe ffb0 	bl	80002ec <I2C_write>
		break;
 800138c:	e068      	b.n	8001460 <camera_init+0x2d0>
	}
	// CIF - YUV
	case 0x10: {
		//status |= camera_write(CAM_COM7, 0x20);		// Set output format
		data = 0x20;
 800138e:	2320      	movs	r3, #32
 8001390:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 8001392:	f107 030f 	add.w	r3, r7, #15
 8001396:	2212      	movs	r2, #18
 8001398:	2142      	movs	r1, #66	@ 0x42
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7fe ffa6 	bl	80002ec <I2C_write>
		break;
 80013a0:	e05e      	b.n	8001460 <camera_init+0x2d0>
	}
	// CIF - RGB565
	case 0x11: {
		//status |= camera_write(CAM_COM7, 0x24);		// Set output format
		data = 0x24;
 80013a2:	2324      	movs	r3, #36	@ 0x24
 80013a4:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 80013a6:	f107 030f 	add.w	r3, r7, #15
 80013aa:	2212      	movs	r2, #18
 80013ac:	2142      	movs	r1, #66	@ 0x42
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7fe ff9c 	bl	80002ec <I2C_write>
		//status |= camera_write(CAM_COM15, 0xD0);	// Set 565 RGB option
		data = 0xD0;
 80013b4:	23d0      	movs	r3, #208	@ 0xd0
 80013b6:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM15, &data);
 80013b8:	f107 030f 	add.w	r3, r7, #15
 80013bc:	2240      	movs	r2, #64	@ 0x40
 80013be:	2142      	movs	r1, #66	@ 0x42
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7fe ff93 	bl	80002ec <I2C_write>
		break;
 80013c6:	e04b      	b.n	8001460 <camera_init+0x2d0>
	}
	// QVGA - YUV
	case 0x20: {
		//status |= camera_write(CAM_COM7, 0x10);		// Set output format
		data = 0x10;
 80013c8:	2310      	movs	r3, #16
 80013ca:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 80013cc:	f107 030f 	add.w	r3, r7, #15
 80013d0:	2212      	movs	r2, #18
 80013d2:	2142      	movs	r1, #66	@ 0x42
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	f7fe ff89 	bl	80002ec <I2C_write>
		break;
 80013da:	e041      	b.n	8001460 <camera_init+0x2d0>
	}
	// QVGA - RGB565
	case 0x21: {
		//status |= camera_write(CAM_COM7, 0x14);		// Set output format
		data = 0x14;
 80013dc:	2314      	movs	r3, #20
 80013de:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 80013e0:	f107 030f 	add.w	r3, r7, #15
 80013e4:	2212      	movs	r2, #18
 80013e6:	2142      	movs	r1, #66	@ 0x42
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7fe ff7f 	bl	80002ec <I2C_write>
		//status |= camera_write(CAM_COM15, 0xD0);	// Set 565 RGB option
		data = 0xD0;
 80013ee:	23d0      	movs	r3, #208	@ 0xd0
 80013f0:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM15, &data);
 80013f2:	f107 030f 	add.w	r3, r7, #15
 80013f6:	2240      	movs	r2, #64	@ 0x40
 80013f8:	2142      	movs	r1, #66	@ 0x42
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7fe ff76 	bl	80002ec <I2C_write>
		break;
 8001400:	e02e      	b.n	8001460 <camera_init+0x2d0>
	}
	// QCIF - YUV
	case 0x30: {
		//status |= camera_write(CAM_COM7, 0x08);		// Set output format
		data = 0x08;
 8001402:	2308      	movs	r3, #8
 8001404:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 8001406:	f107 030f 	add.w	r3, r7, #15
 800140a:	2212      	movs	r2, #18
 800140c:	2142      	movs	r1, #66	@ 0x42
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7fe ff6c 	bl	80002ec <I2C_write>
		break;
 8001414:	e024      	b.n	8001460 <camera_init+0x2d0>
	}
	// QCIF - RGB565
	case 0x31: {
		//status |= camera_write(CAM_COM7, 0x0C);		// Set output format
		I2C_read(status, CAM_WRITE, CAM_COM7, &data);
 8001416:	f107 030f 	add.w	r3, r7, #15
 800141a:	2212      	movs	r2, #18
 800141c:	2142      	movs	r1, #66	@ 0x42
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7fe ff86 	bl	8000330 <I2C_read>
		//data = 0x0C;
		data |= (1 << 3) | (1 << 2);
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	f043 030c 	orr.w	r3, r3, #12
 800142a:	b2db      	uxtb	r3, r3
 800142c:	73fb      	strb	r3, [r7, #15]

		I2C_write(status, CAM_WRITE, CAM_COM7, &data);
 800142e:	f107 030f 	add.w	r3, r7, #15
 8001432:	2212      	movs	r2, #18
 8001434:	2142      	movs	r1, #66	@ 0x42
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7fe ff58 	bl	80002ec <I2C_write>
		//status |= camera_write(CAM_COM15, 0xD0);	// Set 565 RGB option
		//data = 0xD0;
		data &= ~(1<<5);
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	f023 0320 	bic.w	r3, r3, #32
 8001442:	b2db      	uxtb	r3, r3
 8001444:	73fb      	strb	r3, [r7, #15]
		data |= (1<<4);
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	f043 0310 	orr.w	r3, r3, #16
 800144c:	b2db      	uxtb	r3, r3
 800144e:	73fb      	strb	r3, [r7, #15]
		I2C_write(status, CAM_WRITE, CAM_COM15, &data);
 8001450:	f107 030f 	add.w	r3, r7, #15
 8001454:	2240      	movs	r2, #64	@ 0x40
 8001456:	2142      	movs	r1, #66	@ 0x42
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7fe ff47 	bl	80002ec <I2C_write>
		break;
 800145e:	bf00      	nop
	}


	//status |= camera_write(CAM_COM8, 0x8F);		// Automatic exposure & gain control
	//status |= camera_write(CAM_RSVD, 0x84);			// Colour correction
	data = 0x84;
 8001460:	2384      	movs	r3, #132	@ 0x84
 8001462:	73fb      	strb	r3, [r7, #15]
	I2C_write(status, CAM_WRITE, CAM_RSVD, &data);
 8001464:	f107 030f 	add.w	r3, r7, #15
 8001468:	22b0      	movs	r2, #176	@ 0xb0
 800146a:	2142      	movs	r1, #66	@ 0x42
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	f7fe ff3d 	bl	80002ec <I2C_write>

	//return status;
}
 8001472:	bf00      	nop
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	58021000 	.word	0x58021000
 8001480:	58020c00 	.word	0x58020c00

08001484 <camera_capture_photo>:


void camera_capture_photo(HAL_StatusTypeDef* status, uint8_t* destination_adress, uint32_t* size) {
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
	//HAL_StatusTypeDef status;

	// Begin transmission of data from camera to memory
	*status = HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, destination_adress, *size);
 8001490:	68ba      	ldr	r2, [r7, #8]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2102      	movs	r1, #2
 8001498:	480a      	ldr	r0, [pc, #40]	@ (80014c4 <camera_capture_photo+0x40>)
 800149a:	f002 ffd7 	bl	800444c <HAL_DCMI_Start_DMA>
 800149e:	4603      	mov	r3, r0
 80014a0:	461a      	mov	r2, r3
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	701a      	strb	r2, [r3, #0]
	HAL_Delay(5000);
 80014a6:	f241 3088 	movw	r0, #5000	@ 0x1388
 80014aa:	f001 fe83 	bl	80031b4 <HAL_Delay>

	// End transmission
	*status = HAL_DCMI_Stop(&hdcmi);
 80014ae:	4805      	ldr	r0, [pc, #20]	@ (80014c4 <camera_capture_photo+0x40>)
 80014b0:	f003 f88e 	bl	80045d0 <HAL_DCMI_Stop>
 80014b4:	4603      	mov	r3, r0
 80014b6:	461a      	mov	r2, r3
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	701a      	strb	r2, [r3, #0]

	//return status;
}
 80014bc:	bf00      	nop
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	24000230 	.word	0x24000230

080014c8 <radio_power_up>:
#include "radio.h"

void radio_power_up(HAL_StatusTypeDef *status) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b088      	sub	sp, #32
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, SET);
 80014d0:	2201      	movs	r2, #1
 80014d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014d6:	4890      	ldr	r0, [pc, #576]	@ (8001718 <radio_power_up+0x250>)
 80014d8:	f006 ff8a 	bl	80083f0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80014dc:	2064      	movs	r0, #100	@ 0x64
 80014de:	f001 fe69 	bl	80031b4 <HAL_Delay>
	uint8_t data[] = {RF_POWER_UP};
 80014e2:	4a8e      	ldr	r2, [pc, #568]	@ (800171c <radio_power_up+0x254>)
 80014e4:	f107 0308 	add.w	r3, r7, #8
 80014e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014ec:	6018      	str	r0, [r3, #0]
 80014ee:	3304      	adds	r3, #4
 80014f0:	8019      	strh	r1, [r3, #0]
 80014f2:	3302      	adds	r3, #2
 80014f4:	0c0a      	lsrs	r2, r1, #16
 80014f6:	701a      	strb	r2, [r3, #0]
	//uint8_t data[9] = {0x02, 0x01, 0x01, 0x01, 0xC9, 0xC3, 0x80, 0x44, 0xFF};
	uint8_t size = sizeof(data);
 80014f8:	2307      	movs	r3, #7
 80014fa:	777b      	strb	r3, [r7, #29]
	uint16_t attempt = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	83fb      	strh	r3, [r7, #30]
	//uint8_t NOP = 0x00;
	uint8_t *pData = data;
 8001500:	f107 0308 	add.w	r3, r7, #8
 8001504:	61bb      	str	r3, [r7, #24]
	SPI_HandleTypeDef *hspi = &hspi4;
 8001506:	4b86      	ldr	r3, [pc, #536]	@ (8001720 <radio_power_up+0x258>)
 8001508:	617b      	str	r3, [r7, #20]

#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	3320      	adds	r3, #32
 8001510:	613b      	str	r3, [r7, #16]
#endif /* __GNUC__ */

	// Optimization of HAL_SPI_Transmit

	if (hspi->State != HAL_SPI_STATE_READY) {
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8001518:	b2db      	uxtb	r3, r3
 800151a:	2b01      	cmp	r3, #1
 800151c:	d003      	beq.n	8001526 <radio_power_up+0x5e>
		*status = HAL_BUSY;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2202      	movs	r2, #2
 8001522:	701a      	strb	r2, [r3, #0]
		return;
 8001524:	e0f4      	b.n	8001710 <radio_power_up+0x248>
	}
	/* Lock the process */
	__HAL_LOCK(&hspi4);
 8001526:	4b7e      	ldr	r3, [pc, #504]	@ (8001720 <radio_power_up+0x258>)
 8001528:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800152c:	2b01      	cmp	r3, #1
 800152e:	f000 80ef 	beq.w	8001710 <radio_power_up+0x248>
 8001532:	4b7b      	ldr	r3, [pc, #492]	@ (8001720 <radio_power_up+0x258>)
 8001534:	2201      	movs	r2, #1
 8001536:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

	/* Set the transaction information */
	hspi->State = HAL_SPI_STATE_BUSY_TX;
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	2203      	movs	r2, #3
 800153e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
	hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	2200      	movs	r2, #0
 8001546:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
	hspi->pTxBuffPtr = (const uint8_t*) pData;
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	65da      	str	r2, [r3, #92]	@ 0x5c
	hspi->TxXferSize = size; // One byte
 8001550:	7f7b      	ldrb	r3, [r7, #29]
 8001552:	b29a      	uxth	r2, r3
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
	hspi->TxXferCount = size;
 800155a:	7f7b      	ldrb	r3, [r7, #29]
 800155c:	b29a      	uxth	r2, r3
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

	/*Init field not used in handle to zero */
	hspi->pRxBuffPtr = NULL;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	2200      	movs	r2, #0
 8001568:	665a      	str	r2, [r3, #100]	@ 0x64
	hspi->RxXferSize = (uint16_t) 0UL;
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	2200      	movs	r2, #0
 800156e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
	hspi->RxXferCount = (uint16_t) 0UL;
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	2200      	movs	r2, #0
 8001576:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
	hspi->TxISR = NULL;
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	2200      	movs	r2, #0
 800157e:	675a      	str	r2, [r3, #116]	@ 0x74
	hspi->RxISR = NULL;
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	2200      	movs	r2, #0
 8001584:	671a      	str	r2, [r3, #112]	@ 0x70

	// Communication direction
	SPI_2LINES_TX(hspi);
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001598:	60da      	str	r2, [r3, #12]

	/* Set the number of data at current transfer */
	MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, size);
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	685a      	ldr	r2, [r3, #4]
 80015a0:	4b60      	ldr	r3, [pc, #384]	@ (8001724 <radio_power_up+0x25c>)
 80015a2:	4013      	ands	r3, r2
 80015a4:	7f79      	ldrb	r1, [r7, #29]
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	6812      	ldr	r2, [r2, #0]
 80015aa:	430b      	orrs	r3, r1
 80015ac:	6053      	str	r3, [r2, #4]


	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, RESET);
 80015ae:	2200      	movs	r2, #0
 80015b0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80015b4:	4858      	ldr	r0, [pc, #352]	@ (8001718 <radio_power_up+0x250>)
 80015b6:	f006 ff1b 	bl	80083f0 <HAL_GPIO_WritePin>

	// Wait for CTS to go high
	if (!(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9))) {
 80015ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015be:	485a      	ldr	r0, [pc, #360]	@ (8001728 <radio_power_up+0x260>)
 80015c0:	f006 fefe 	bl	80083c0 <HAL_GPIO_ReadPin>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d11f      	bne.n	800160a <radio_power_up+0x142>
		// Wait until Clear To Send (CTS) signal appears
		while (!(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9))) {
 80015ca:	e016      	b.n	80015fa <radio_power_up+0x132>
			attempt++;
 80015cc:	8bfb      	ldrh	r3, [r7, #30]
 80015ce:	3301      	adds	r3, #1
 80015d0:	83fb      	strh	r3, [r7, #30]
			if (attempt > 10000) {
 80015d2:	8bfb      	ldrh	r3, [r7, #30]
 80015d4:	f242 7210 	movw	r2, #10000	@ 0x2710
 80015d8:	4293      	cmp	r3, r2
 80015da:	d90e      	bls.n	80015fa <radio_power_up+0x132>
				*status = 0x3; // Timeout
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2203      	movs	r2, #3
 80015e0:	701a      	strb	r2, [r3, #0]
				// End process
				close_SPI(hspi);
 80015e2:	6978      	ldr	r0, [r7, #20]
 80015e4:	f7fe fed6 	bl	8000394 <close_SPI>
				hspi->State = HAL_SPI_STATE_READY;
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

				/* Unlock the process */
				__HAL_UNLOCK(hspi);
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
				return;
 80015f8:	e08a      	b.n	8001710 <radio_power_up+0x248>
		while (!(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_9))) {
 80015fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015fe:	484a      	ldr	r0, [pc, #296]	@ (8001728 <radio_power_up+0x260>)
 8001600:	f006 fede 	bl	80083c0 <HAL_GPIO_ReadPin>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0e0      	beq.n	80015cc <radio_power_up+0x104>
			}
		}
	}
	/* Enable SPI peripheral */
	__HAL_SPI_ENABLE(hspi);
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f042 0201 	orr.w	r2, r2, #1
 8001618:	601a      	str	r2, [r3, #0]
	/* Master transfer start */
	SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001628:	601a      	str	r2, [r3, #0]

	// Loop until the byte is sent
	// While this seems unnecessary, it covers 2 requirements - wait until SPI is ready to send and then send only one byte
	while (hspi->TxXferCount > 0UL) {
 800162a:	e058      	b.n	80016de <radio_power_up+0x216>
		/* Wait until TXP flag is set to send data */
		if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) {
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b02      	cmp	r3, #2
 8001638:	d151      	bne.n	80016de <radio_power_up+0x216>
			if ((hspi->TxXferCount > 3UL)
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8001640:	b29b      	uxth	r3, r3
 8001642:	2b03      	cmp	r3, #3
 8001644:	d918      	bls.n	8001678 <radio_power_up+0x1b0>
					&& (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA)) {
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800164a:	2b40      	cmp	r3, #64	@ 0x40
 800164c:	d914      	bls.n	8001678 <radio_power_up+0x1b0>
				*((__IO uint32_t*) &hspi->Instance->TXDR) =
						*((const uint32_t*) hspi->pTxBuffPtr);
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
				*((__IO uint32_t*) &hspi->Instance->TXDR) =
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	681b      	ldr	r3, [r3, #0]
						*((const uint32_t*) hspi->pTxBuffPtr);
 8001656:	6812      	ldr	r2, [r2, #0]
				*((__IO uint32_t*) &hspi->Instance->TXDR) =
 8001658:	621a      	str	r2, [r3, #32]
				hspi->pTxBuffPtr += sizeof(uint32_t);
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800165e:	1d1a      	adds	r2, r3, #4
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	65da      	str	r2, [r3, #92]	@ 0x5c
				hspi->TxXferCount -= (uint16_t) 4UL;
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800166a:	b29b      	uxth	r3, r3
 800166c:	3b04      	subs	r3, #4
 800166e:	b29a      	uxth	r2, r3
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 8001676:	e032      	b.n	80016de <radio_power_up+0x216>
			} else if ((hspi->TxXferCount > 1UL)
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800167e:	b29b      	uxth	r3, r3
 8001680:	2b01      	cmp	r3, #1
 8001682:	d917      	bls.n	80016b4 <radio_power_up+0x1ec>
					&& (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA)) {
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001688:	2b00      	cmp	r3, #0
 800168a:	d013      	beq.n	80016b4 <radio_power_up+0x1ec>
#if defined (__GNUC__)
				*ptxdr_16bits = *((const uint16_t*) hspi->pTxBuffPtr);
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001690:	881a      	ldrh	r2, [r3, #0]
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	801a      	strh	r2, [r3, #0]
#else
		          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
		#endif /* __GNUC__ */
				hspi->pTxBuffPtr += sizeof(uint16_t);
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800169a:	1c9a      	adds	r2, r3, #2
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	65da      	str	r2, [r3, #92]	@ 0x5c
				hspi->TxXferCount -= (uint16_t) 2UL;
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	3b02      	subs	r3, #2
 80016aa:	b29a      	uxth	r2, r3
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 80016b2:	e014      	b.n	80016de <radio_power_up+0x216>
			} else {
				*((__IO uint8_t*) &hspi->Instance->TXDR) =
						*((const uint8_t*) hspi->pTxBuffPtr);
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
				*((__IO uint8_t*) &hspi->Instance->TXDR) =
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	3320      	adds	r3, #32
						*((const uint8_t*) hspi->pTxBuffPtr);
 80016be:	7812      	ldrb	r2, [r2, #0]
				*((__IO uint8_t*) &hspi->Instance->TXDR) =
 80016c0:	701a      	strb	r2, [r3, #0]
				hspi->pTxBuffPtr += sizeof(uint8_t);
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016c6:	1c5a      	adds	r2, r3, #1
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	65da      	str	r2, [r3, #92]	@ 0x5c
				hspi->TxXferCount--;
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	3b01      	subs	r3, #1
 80016d6:	b29a      	uxth	r2, r3
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
	while (hspi->TxXferCount > 0UL) {
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1a0      	bne.n	800162c <radio_power_up+0x164>
		 }
		 */
	}

	// Wait until transfer is completed
	while (!(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_EOT))) {
 80016ea:	bf00      	nop
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	f003 0308 	and.w	r3, r3, #8
 80016f6:	2b08      	cmp	r3, #8
 80016f8:	d1f8      	bne.n	80016ec <radio_power_up+0x224>
	}

	// End process
	close_SPI(hspi);
 80016fa:	6978      	ldr	r0, [r7, #20]
 80016fc:	f7fe fe4a 	bl	8000394 <close_SPI>
	hspi->State = HAL_SPI_STATE_READY;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

	/* Unlock the process */
	__HAL_UNLOCK(hspi);
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

	//*status = HAL_SPI_Transmit(&hspi4, &NOP, 1, 10);
	//*status = HAL_SPI_Transmit(&hspi4, data, size, 50);
	//SPI_write(status, data, &size);
}
 8001710:	3720      	adds	r7, #32
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	58020400 	.word	0x58020400
 800171c:	080135f4 	.word	0x080135f4
 8001720:	2400034c 	.word	0x2400034c
 8001724:	ffff0000 	.word	0xffff0000
 8001728:	58021000 	.word	0x58021000

0800172c <radio_pins>:

void radio_pins(HAL_StatusTypeDef* status) {
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_GPIO_PIN_CFG};
 8001734:	4a0a      	ldr	r2, [pc, #40]	@ (8001760 <radio_pins+0x34>)
 8001736:	f107 0310 	add.w	r3, r7, #16
 800173a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800173e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t size = sizeof(data);
 8001742:	2308      	movs	r3, #8
 8001744:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001746:	f107 020f 	add.w	r2, r7, #15
 800174a:	f107 0310 	add.w	r3, r7, #16
 800174e:	4619      	mov	r1, r3
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7fe ff01 	bl	8000558 <SPI_write>
}
 8001756:	bf00      	nop
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	080135fc 	.word	0x080135fc

08001764 <radio_TCXO>:

void radio_TCXO(HAL_StatusTypeDef* status) {
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_GLOBAL_XO_TUNE_2};
 800176c:	4b08      	ldr	r3, [pc, #32]	@ (8001790 <radio_TCXO+0x2c>)
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	2300      	movs	r3, #0
 8001772:	82bb      	strh	r3, [r7, #20]
	uint8_t size = sizeof(data);
 8001774:	2306      	movs	r3, #6
 8001776:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001778:	f107 020f 	add.w	r2, r7, #15
 800177c:	f107 0310 	add.w	r3, r7, #16
 8001780:	4619      	mov	r1, r3
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7fe fee8 	bl	8000558 <SPI_write>
}
 8001788:	bf00      	nop
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	00020011 	.word	0x00020011

08001794 <radio_global>:

void radio_global(HAL_StatusTypeDef* status) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b086      	sub	sp, #24
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_GLOBAL_CONFIG_1};
 800179c:	4a0a      	ldr	r2, [pc, #40]	@ (80017c8 <radio_global+0x34>)
 800179e:	f107 0310 	add.w	r3, r7, #16
 80017a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017a6:	6018      	str	r0, [r3, #0]
 80017a8:	3304      	adds	r3, #4
 80017aa:	7019      	strb	r1, [r3, #0]
	uint8_t size = sizeof(data);
 80017ac:	2305      	movs	r3, #5
 80017ae:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80017b0:	f107 020f 	add.w	r2, r7, #15
 80017b4:	f107 0310 	add.w	r3, r7, #16
 80017b8:	4619      	mov	r1, r3
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7fe fecc 	bl	8000558 <SPI_write>
}
 80017c0:	bf00      	nop
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	08013604 	.word	0x08013604

080017cc <radio_interrupts>:

void radio_interrupts(HAL_StatusTypeDef* status) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_INT_CTL_ENABLE_2};
 80017d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001800 <radio_interrupts+0x34>)
 80017d6:	f107 0310 	add.w	r3, r7, #16
 80017da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017de:	6018      	str	r0, [r3, #0]
 80017e0:	3304      	adds	r3, #4
 80017e2:	8019      	strh	r1, [r3, #0]
	uint8_t size = sizeof(data);
 80017e4:	2306      	movs	r3, #6
 80017e6:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80017e8:	f107 020f 	add.w	r2, r7, #15
 80017ec:	f107 0310 	add.w	r3, r7, #16
 80017f0:	4619      	mov	r1, r3
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7fe feb0 	bl	8000558 <SPI_write>
}
 80017f8:	bf00      	nop
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	0801360c 	.word	0x0801360c

08001804 <radio_fast_registers>:

void radio_fast_registers(HAL_StatusTypeDef* status) {
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_FRR_CTL_A_MODE_4};
 800180c:	4a0a      	ldr	r2, [pc, #40]	@ (8001838 <radio_fast_registers+0x34>)
 800180e:	f107 0310 	add.w	r3, r7, #16
 8001812:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001816:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t size = sizeof(data);
 800181a:	2308      	movs	r3, #8
 800181c:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 800181e:	f107 020f 	add.w	r2, r7, #15
 8001822:	f107 0310 	add.w	r3, r7, #16
 8001826:	4619      	mov	r1, r3
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	f7fe fe95 	bl	8000558 <SPI_write>
}
 800182e:	bf00      	nop
 8001830:	3718      	adds	r7, #24
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	08013614 	.word	0x08013614

0800183c <radio_Tx>:

void radio_Tx(HAL_StatusTypeDef* status) {
 800183c:	b590      	push	{r4, r7, lr}
 800183e:	b089      	sub	sp, #36	@ 0x24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PREAMBLE_TX_LENGTH_9};
 8001844:	4b09      	ldr	r3, [pc, #36]	@ (800186c <radio_Tx+0x30>)
 8001846:	f107 0410 	add.w	r4, r7, #16
 800184a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800184c:	c407      	stmia	r4!, {r0, r1, r2}
 800184e:	7023      	strb	r3, [r4, #0]
	uint8_t size = sizeof(data);
 8001850:	230d      	movs	r3, #13
 8001852:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001854:	f107 020f 	add.w	r2, r7, #15
 8001858:	f107 0310 	add.w	r3, r7, #16
 800185c:	4619      	mov	r1, r3
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f7fe fe7a 	bl	8000558 <SPI_write>
}
 8001864:	bf00      	nop
 8001866:	3724      	adds	r7, #36	@ 0x24
 8001868:	46bd      	mov	sp, r7
 800186a:	bd90      	pop	{r4, r7, pc}
 800186c:	0801361c 	.word	0x0801361c

08001870 <radio_sync>:

void radio_sync(HAL_StatusTypeDef* status) {
 8001870:	b590      	push	{r4, r7, lr}
 8001872:	b089      	sub	sp, #36	@ 0x24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_SYNC_CONFIG_10};
 8001878:	4b09      	ldr	r3, [pc, #36]	@ (80018a0 <radio_sync+0x30>)
 800187a:	f107 0410 	add.w	r4, r7, #16
 800187e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001880:	c407      	stmia	r4!, {r0, r1, r2}
 8001882:	8023      	strh	r3, [r4, #0]
	uint8_t size = sizeof(data);
 8001884:	230e      	movs	r3, #14
 8001886:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001888:	f107 020f 	add.w	r2, r7, #15
 800188c:	f107 0310 	add.w	r3, r7, #16
 8001890:	4619      	mov	r1, r3
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f7fe fe60 	bl	8000558 <SPI_write>
}
 8001898:	bf00      	nop
 800189a:	3724      	adds	r7, #36	@ 0x24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd90      	pop	{r4, r7, pc}
 80018a0:	0801362c 	.word	0x0801362c

080018a4 <radio_packet_CRC>:

void radio_packet_CRC(HAL_StatusTypeDef* status) {
 80018a4:	b590      	push	{r4, r7, lr}
 80018a6:	b089      	sub	sp, #36	@ 0x24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PKT_CRC_CONFIG_12};
 80018ac:	4b09      	ldr	r3, [pc, #36]	@ (80018d4 <radio_packet_CRC+0x30>)
 80018ae:	f107 0410 	add.w	r4, r7, #16
 80018b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 80018b8:	2310      	movs	r3, #16
 80018ba:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80018bc:	f107 020f 	add.w	r2, r7, #15
 80018c0:	f107 0310 	add.w	r3, r7, #16
 80018c4:	4619      	mov	r1, r3
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f7fe fe46 	bl	8000558 <SPI_write>
}
 80018cc:	bf00      	nop
 80018ce:	3724      	adds	r7, #36	@ 0x24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd90      	pop	{r4, r7, pc}
 80018d4:	0801363c 	.word	0x0801363c

080018d8 <radio_Rx_thr>:

void radio_Rx_thr(HAL_StatusTypeDef* status) {
 80018d8:	b590      	push	{r4, r7, lr}
 80018da:	b089      	sub	sp, #36	@ 0x24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PKT_RX_THRESHOLD_12};
 80018e0:	4b09      	ldr	r3, [pc, #36]	@ (8001908 <radio_Rx_thr+0x30>)
 80018e2:	f107 0410 	add.w	r4, r7, #16
 80018e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 80018ec:	2310      	movs	r3, #16
 80018ee:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80018f0:	f107 020f 	add.w	r2, r7, #15
 80018f4:	f107 0310 	add.w	r3, r7, #16
 80018f8:	4619      	mov	r1, r3
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f7fe fe2c 	bl	8000558 <SPI_write>
}
 8001900:	bf00      	nop
 8001902:	3724      	adds	r7, #36	@ 0x24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd90      	pop	{r4, r7, pc}
 8001908:	0801364c 	.word	0x0801364c

0800190c <radio_Rx_CRC_1>:

void radio_Rx_CRC_1(HAL_StatusTypeDef* status) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b088      	sub	sp, #32
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PKT_FIELD_3_CRC_CONFIG_12};
 8001914:	4b0a      	ldr	r3, [pc, #40]	@ (8001940 <radio_Rx_CRC_1+0x34>)
 8001916:	613b      	str	r3, [r7, #16]
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
	uint8_t size = sizeof(data);
 8001924:	2310      	movs	r3, #16
 8001926:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001928:	f107 020f 	add.w	r2, r7, #15
 800192c:	f107 0310 	add.w	r3, r7, #16
 8001930:	4619      	mov	r1, r3
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f7fe fe10 	bl	8000558 <SPI_write>
}
 8001938:	bf00      	nop
 800193a:	3720      	adds	r7, #32
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	180c1211 	.word	0x180c1211

08001944 <radio_Rx_CRC_2>:

void radio_Rx_CRC_2(HAL_StatusTypeDef* status) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PKT_RX_FIELD_1_CRC_CONFIG_12};
 800194c:	4b0a      	ldr	r3, [pc, #40]	@ (8001978 <radio_Rx_CRC_2+0x34>)
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	f107 0314 	add.w	r3, r7, #20
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
	uint8_t size = sizeof(data);
 800195c:	2310      	movs	r3, #16
 800195e:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001960:	f107 020f 	add.w	r2, r7, #15
 8001964:	f107 0310 	add.w	r3, r7, #16
 8001968:	4619      	mov	r1, r3
 800196a:	6878      	ldr	r0, [r7, #4]
 800196c:	f7fe fdf4 	bl	8000558 <SPI_write>
}
 8001970:	bf00      	nop
 8001972:	3720      	adds	r7, #32
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	240c1211 	.word	0x240c1211

0800197c <radio_Rx_CRC_3>:

void radio_Rx_CRC_3(HAL_StatusTypeDef* status) {
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PKT_RX_FIELD_4_CRC_CONFIG_5};
 8001984:	4b0a      	ldr	r3, [pc, #40]	@ (80019b0 <radio_Rx_CRC_3+0x34>)
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	f107 0310 	add.w	r3, r7, #16
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	711a      	strb	r2, [r3, #4]
	uint8_t size = sizeof(data);
 8001992:	2309      	movs	r3, #9
 8001994:	72fb      	strb	r3, [r7, #11]
	SPI_write(status, data, &size);
 8001996:	f107 020b 	add.w	r2, r7, #11
 800199a:	f107 030c 	add.w	r3, r7, #12
 800199e:	4619      	mov	r1, r3
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7fe fdd9 	bl	8000558 <SPI_write>
}
 80019a6:	bf00      	nop
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	30051211 	.word	0x30051211

080019b4 <radio_Rx_CRC_seed>:

void radio_Rx_CRC_seed(HAL_StatusTypeDef* status) {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PKT_CRC_SEED_31_24_4};
 80019bc:	4b08      	ldr	r3, [pc, #32]	@ (80019e0 <radio_Rx_CRC_seed+0x2c>)
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
	uint8_t size = sizeof(data);
 80019c4:	2308      	movs	r3, #8
 80019c6:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80019c8:	f107 020f 	add.w	r2, r7, #15
 80019cc:	f107 0310 	add.w	r3, r7, #16
 80019d0:	4619      	mov	r1, r3
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7fe fdc0 	bl	8000558 <SPI_write>
}
 80019d8:	bf00      	nop
 80019da:	3718      	adds	r7, #24
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	36041211 	.word	0x36041211

080019e4 <radio_mod>:

void radio_mod(HAL_StatusTypeDef* status) {
 80019e4:	b590      	push	{r4, r7, lr}
 80019e6:	b089      	sub	sp, #36	@ 0x24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_MOD_TYPE_12};
 80019ec:	4b09      	ldr	r3, [pc, #36]	@ (8001a14 <radio_mod+0x30>)
 80019ee:	f107 0410 	add.w	r4, r7, #16
 80019f2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 80019f8:	2310      	movs	r3, #16
 80019fa:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 80019fc:	f107 020f 	add.w	r2, r7, #15
 8001a00:	f107 0310 	add.w	r3, r7, #16
 8001a04:	4619      	mov	r1, r3
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7fe fda6 	bl	8000558 <SPI_write>
}
 8001a0c:	bf00      	nop
 8001a0e:	3724      	adds	r7, #36	@ 0x24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd90      	pop	{r4, r7, pc}
 8001a14:	0801365c 	.word	0x0801365c

08001a18 <radio_freq_dev>:

void radio_freq_dev(HAL_StatusTypeDef* status) {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b086      	sub	sp, #24
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_FREQ_DEV_0_1};
 8001a20:	4a0a      	ldr	r2, [pc, #40]	@ (8001a4c <radio_freq_dev+0x34>)
 8001a22:	f107 0310 	add.w	r3, r7, #16
 8001a26:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a2a:	6018      	str	r0, [r3, #0]
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	7019      	strb	r1, [r3, #0]
	uint8_t size = sizeof(data);
 8001a30:	2305      	movs	r3, #5
 8001a32:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001a34:	f107 020f 	add.w	r2, r7, #15
 8001a38:	f107 0310 	add.w	r3, r7, #16
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7fe fd8a 	bl	8000558 <SPI_write>
}
 8001a44:	bf00      	nop
 8001a46:	3718      	adds	r7, #24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	0801366c 	.word	0x0801366c

08001a50 <radio_Tx_ramp>:

void radio_Tx_ramp(HAL_StatusTypeDef* status) {
 8001a50:	b590      	push	{r4, r7, lr}
 8001a52:	b089      	sub	sp, #36	@ 0x24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_TX_RAMP_DELAY_12};
 8001a58:	4b09      	ldr	r3, [pc, #36]	@ (8001a80 <radio_Tx_ramp+0x30>)
 8001a5a:	f107 0410 	add.w	r4, r7, #16
 8001a5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a60:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 8001a64:	2310      	movs	r3, #16
 8001a66:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001a68:	f107 020f 	add.w	r2, r7, #15
 8001a6c:	f107 0310 	add.w	r3, r7, #16
 8001a70:	4619      	mov	r1, r3
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7fe fd70 	bl	8000558 <SPI_write>
}
 8001a78:	bf00      	nop
 8001a7a:	3724      	adds	r7, #36	@ 0x24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd90      	pop	{r4, r7, pc}
 8001a80:	08013674 	.word	0x08013674

08001a84 <radio_NCO_offset>:

void radio_NCO_offset(HAL_StatusTypeDef* status) {
 8001a84:	b590      	push	{r4, r7, lr}
 8001a86:	b089      	sub	sp, #36	@ 0x24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_BCR_NCO_OFFSET_2_12};
 8001a8c:	4b09      	ldr	r3, [pc, #36]	@ (8001ab4 <radio_NCO_offset+0x30>)
 8001a8e:	f107 0410 	add.w	r4, r7, #16
 8001a92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 8001a98:	2310      	movs	r3, #16
 8001a9a:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001a9c:	f107 020f 	add.w	r2, r7, #15
 8001aa0:	f107 0310 	add.w	r3, r7, #16
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7fe fd56 	bl	8000558 <SPI_write>
}
 8001aac:	bf00      	nop
 8001aae:	3724      	adds	r7, #36	@ 0x24
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd90      	pop	{r4, r7, pc}
 8001ab4:	08013684 	.word	0x08013684

08001ab8 <radio_AFC>:

void radio_AFC(HAL_StatusTypeDef* status) {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_AFC_LIMITER_1_3};
 8001ac0:	4a0c      	ldr	r2, [pc, #48]	@ (8001af4 <radio_AFC+0x3c>)
 8001ac2:	f107 0310 	add.w	r3, r7, #16
 8001ac6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aca:	6018      	str	r0, [r3, #0]
 8001acc:	3304      	adds	r3, #4
 8001ace:	8019      	strh	r1, [r3, #0]
 8001ad0:	3302      	adds	r3, #2
 8001ad2:	0c0a      	lsrs	r2, r1, #16
 8001ad4:	701a      	strb	r2, [r3, #0]
	uint8_t size = sizeof(data);
 8001ad6:	2307      	movs	r3, #7
 8001ad8:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001ada:	f107 020f 	add.w	r2, r7, #15
 8001ade:	f107 0310 	add.w	r3, r7, #16
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7fe fd37 	bl	8000558 <SPI_write>
}
 8001aea:	bf00      	nop
 8001aec:	3718      	adds	r7, #24
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	08013694 	.word	0x08013694

08001af8 <radio_AGC_1>:

void radio_AGC_1(HAL_StatusTypeDef* status) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_AGC_CONTROL_1};
 8001b00:	4a0a      	ldr	r2, [pc, #40]	@ (8001b2c <radio_AGC_1+0x34>)
 8001b02:	f107 0310 	add.w	r3, r7, #16
 8001b06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b0a:	6018      	str	r0, [r3, #0]
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	7019      	strb	r1, [r3, #0]
	uint8_t size = sizeof(data);
 8001b10:	2305      	movs	r3, #5
 8001b12:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001b14:	f107 020f 	add.w	r2, r7, #15
 8001b18:	f107 0310 	add.w	r3, r7, #16
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7fe fd1a 	bl	8000558 <SPI_write>
}
 8001b24:	bf00      	nop
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	0801369c 	.word	0x0801369c

08001b30 <radio_AGC_2>:

void radio_AGC_2(HAL_StatusTypeDef* status) {
 8001b30:	b590      	push	{r4, r7, lr}
 8001b32:	b089      	sub	sp, #36	@ 0x24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_AGC_WINDOW_SIZE_12};
 8001b38:	4b09      	ldr	r3, [pc, #36]	@ (8001b60 <radio_AGC_2+0x30>)
 8001b3a:	f107 0410 	add.w	r4, r7, #16
 8001b3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b40:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 8001b44:	2310      	movs	r3, #16
 8001b46:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001b48:	f107 020f 	add.w	r2, r7, #15
 8001b4c:	f107 0310 	add.w	r3, r7, #16
 8001b50:	4619      	mov	r1, r3
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7fe fd00 	bl	8000558 <SPI_write>
}
 8001b58:	bf00      	nop
 8001b5a:	3724      	adds	r7, #36	@ 0x24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd90      	pop	{r4, r7, pc}
 8001b60:	080136a4 	.word	0x080136a4

08001b64 <radio_RAW>:

void radio_RAW(HAL_StatusTypeDef* status) {
 8001b64:	b590      	push	{r4, r7, lr}
 8001b66:	b089      	sub	sp, #36	@ 0x24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_RAW_CONTROL_10};
 8001b6c:	4b09      	ldr	r3, [pc, #36]	@ (8001b94 <radio_RAW+0x30>)
 8001b6e:	f107 0410 	add.w	r4, r7, #16
 8001b72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b74:	c407      	stmia	r4!, {r0, r1, r2}
 8001b76:	8023      	strh	r3, [r4, #0]
	uint8_t size = sizeof(data);
 8001b78:	230e      	movs	r3, #14
 8001b7a:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001b7c:	f107 020f 	add.w	r2, r7, #15
 8001b80:	f107 0310 	add.w	r3, r7, #16
 8001b84:	4619      	mov	r1, r3
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7fe fce6 	bl	8000558 <SPI_write>
}
 8001b8c:	bf00      	nop
 8001b8e:	3724      	adds	r7, #36	@ 0x24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd90      	pop	{r4, r7, pc}
 8001b94:	080136b4 	.word	0x080136b4

08001b98 <radio_search_period>:

void radio_search_period(HAL_StatusTypeDef* status) {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_RAW_SEARCH2_2};
 8001ba0:	4a0a      	ldr	r2, [pc, #40]	@ (8001bcc <radio_search_period+0x34>)
 8001ba2:	f107 0310 	add.w	r3, r7, #16
 8001ba6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001baa:	6018      	str	r0, [r3, #0]
 8001bac:	3304      	adds	r3, #4
 8001bae:	8019      	strh	r1, [r3, #0]
	uint8_t size = sizeof(data);
 8001bb0:	2306      	movs	r3, #6
 8001bb2:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001bb4:	f107 020f 	add.w	r2, r7, #15
 8001bb8:	f107 0310 	add.w	r3, r7, #16
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7fe fcca 	bl	8000558 <SPI_write>
}
 8001bc4:	bf00      	nop
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	080136c4 	.word	0x080136c4

08001bd0 <radio_GFSK_thr>:

void radio_GFSK_thr(HAL_StatusTypeDef* status) {
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_SPIKE_DET_2};
 8001bd8:	4a0a      	ldr	r2, [pc, #40]	@ (8001c04 <radio_GFSK_thr+0x34>)
 8001bda:	f107 0310 	add.w	r3, r7, #16
 8001bde:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001be2:	6018      	str	r0, [r3, #0]
 8001be4:	3304      	adds	r3, #4
 8001be6:	8019      	strh	r1, [r3, #0]
	uint8_t size = sizeof(data);
 8001be8:	2306      	movs	r3, #6
 8001bea:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001bec:	f107 020f 	add.w	r2, r7, #15
 8001bf0:	f107 0310 	add.w	r3, r7, #16
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7fe fcae 	bl	8000558 <SPI_write>
}
 8001bfc:	bf00      	nop
 8001bfe:	3718      	adds	r7, #24
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	080136cc 	.word	0x080136cc

08001c08 <radio_RSSI_thr>:

void radio_RSSI_thr(HAL_StatusTypeDef* status) {
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_RSSI_MUTE_1};
 8001c10:	4b08      	ldr	r3, [pc, #32]	@ (8001c34 <radio_RSSI_thr+0x2c>)
 8001c12:	613b      	str	r3, [r7, #16]
 8001c14:	2300      	movs	r3, #0
 8001c16:	753b      	strb	r3, [r7, #20]
	uint8_t size = sizeof(data);
 8001c18:	2305      	movs	r3, #5
 8001c1a:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001c1c:	f107 020f 	add.w	r2, r7, #15
 8001c20:	f107 0310 	add.w	r3, r7, #16
 8001c24:	4619      	mov	r1, r3
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f7fe fc96 	bl	8000558 <SPI_write>
}
 8001c2c:	bf00      	nop
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	57012011 	.word	0x57012011

08001c38 <radio_RSSI_att>:

void radio_RSSI_att(HAL_StatusTypeDef* status) {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_DSA_CTRL1_5};
 8001c40:	4a09      	ldr	r2, [pc, #36]	@ (8001c68 <radio_RSSI_att+0x30>)
 8001c42:	f107 030c 	add.w	r3, r7, #12
 8001c46:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c48:	c303      	stmia	r3!, {r0, r1}
 8001c4a:	701a      	strb	r2, [r3, #0]
	uint8_t size = sizeof(data);
 8001c4c:	2309      	movs	r3, #9
 8001c4e:	72fb      	strb	r3, [r7, #11]
	SPI_write(status, data, &size);
 8001c50:	f107 020b 	add.w	r2, r7, #11
 8001c54:	f107 030c 	add.w	r3, r7, #12
 8001c58:	4619      	mov	r1, r3
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f7fe fc7c 	bl	8000558 <SPI_write>
}
 8001c60:	bf00      	nop
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	080136d4 	.word	0x080136d4

08001c6c <radio_Rx_filter_1>:

void radio_Rx_filter_1(HAL_StatusTypeDef* status) {
 8001c6c:	b590      	push	{r4, r7, lr}
 8001c6e:	b089      	sub	sp, #36	@ 0x24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_CHFLT_RX1_CHFLT_COE13_7_0_12};
 8001c74:	4b09      	ldr	r3, [pc, #36]	@ (8001c9c <radio_Rx_filter_1+0x30>)
 8001c76:	f107 0410 	add.w	r4, r7, #16
 8001c7a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 8001c80:	2310      	movs	r3, #16
 8001c82:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001c84:	f107 020f 	add.w	r2, r7, #15
 8001c88:	f107 0310 	add.w	r3, r7, #16
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7fe fc62 	bl	8000558 <SPI_write>
}
 8001c94:	bf00      	nop
 8001c96:	3724      	adds	r7, #36	@ 0x24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd90      	pop	{r4, r7, pc}
 8001c9c:	080136e0 	.word	0x080136e0

08001ca0 <radio_Rx_filter_2>:

void radio_Rx_filter_2(HAL_StatusTypeDef* status) {
 8001ca0:	b590      	push	{r4, r7, lr}
 8001ca2:	b089      	sub	sp, #36	@ 0x24
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_CHFLT_RX1_CHFLT_COE1_7_0_12};
 8001ca8:	4b09      	ldr	r3, [pc, #36]	@ (8001cd0 <radio_Rx_filter_2+0x30>)
 8001caa:	f107 0410 	add.w	r4, r7, #16
 8001cae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001cb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 8001cb4:	2310      	movs	r3, #16
 8001cb6:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001cb8:	f107 020f 	add.w	r2, r7, #15
 8001cbc:	f107 0310 	add.w	r3, r7, #16
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7fe fc48 	bl	8000558 <SPI_write>
}
 8001cc8:	bf00      	nop
 8001cca:	3724      	adds	r7, #36	@ 0x24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd90      	pop	{r4, r7, pc}
 8001cd0:	080136f0 	.word	0x080136f0

08001cd4 <radio_Rx_filter_3>:

void radio_Rx_filter_3(HAL_StatusTypeDef* status) {
 8001cd4:	b590      	push	{r4, r7, lr}
 8001cd6:	b089      	sub	sp, #36	@ 0x24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MODEM_CHFLT_RX2_CHFLT_COE7_7_0_12};
 8001cdc:	4b09      	ldr	r3, [pc, #36]	@ (8001d04 <radio_Rx_filter_3+0x30>)
 8001cde:	f107 0410 	add.w	r4, r7, #16
 8001ce2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ce4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t size = sizeof(data);
 8001ce8:	2310      	movs	r3, #16
 8001cea:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001cec:	f107 020f 	add.w	r2, r7, #15
 8001cf0:	f107 0310 	add.w	r3, r7, #16
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7fe fc2e 	bl	8000558 <SPI_write>
}
 8001cfc:	bf00      	nop
 8001cfe:	3724      	adds	r7, #36	@ 0x24
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd90      	pop	{r4, r7, pc}
 8001d04:	08013700 	.word	0x08013700

08001d08 <radio_PA_1>:

void radio_PA_1(HAL_StatusTypeDef* status) {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_PA_MODE_4};
 8001d10:	4a0a      	ldr	r2, [pc, #40]	@ (8001d3c <radio_PA_1+0x34>)
 8001d12:	f107 0310 	add.w	r3, r7, #16
 8001d16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d1a:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t size = sizeof(data);
 8001d1e:	2308      	movs	r3, #8
 8001d20:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001d22:	f107 020f 	add.w	r2, r7, #15
 8001d26:	f107 0310 	add.w	r3, r7, #16
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7fe fc13 	bl	8000558 <SPI_write>
}
 8001d32:	bf00      	nop
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	08013710 	.word	0x08013710

08001d40 <radio_PA_2>:

void radio_PA_2(HAL_StatusTypeDef* status) {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_SYNTH_PFDCP_CPFF_7};
 8001d48:	4a0b      	ldr	r2, [pc, #44]	@ (8001d78 <radio_PA_2+0x38>)
 8001d4a:	f107 030c 	add.w	r3, r7, #12
 8001d4e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d50:	c303      	stmia	r3!, {r0, r1}
 8001d52:	801a      	strh	r2, [r3, #0]
 8001d54:	3302      	adds	r3, #2
 8001d56:	0c12      	lsrs	r2, r2, #16
 8001d58:	701a      	strb	r2, [r3, #0]
	uint8_t size = sizeof(data);
 8001d5a:	230b      	movs	r3, #11
 8001d5c:	72fb      	strb	r3, [r7, #11]
	SPI_write(status, data, &size);
 8001d5e:	f107 020b 	add.w	r2, r7, #11
 8001d62:	f107 030c 	add.w	r3, r7, #12
 8001d66:	4619      	mov	r1, r3
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f7fe fbf5 	bl	8000558 <SPI_write>
}
 8001d6e:	bf00      	nop
 8001d70:	3718      	adds	r7, #24
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	08013718 	.word	0x08013718

08001d7c <radio_masks>:

void radio_masks(HAL_StatusTypeDef* status) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b088      	sub	sp, #32
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_MATCH_VALUE_1_12};
 8001d84:	4b0a      	ldr	r3, [pc, #40]	@ (8001db0 <radio_masks+0x34>)
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	f107 0314 	add.w	r3, r7, #20
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
	uint8_t size = sizeof(data);
 8001d94:	2310      	movs	r3, #16
 8001d96:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001d98:	f107 020f 	add.w	r2, r7, #15
 8001d9c:	f107 0310 	add.w	r3, r7, #16
 8001da0:	4619      	mov	r1, r3
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7fe fbd8 	bl	8000558 <SPI_write>
}
 8001da8:	bf00      	nop
 8001daa:	3720      	adds	r7, #32
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	000c3011 	.word	0x000c3011

08001db4 <radio_PLL>:

void radio_PLL(HAL_StatusTypeDef* status) {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {RF_FREQ_CONTROL_INTE_8};
 8001dbc:	4a09      	ldr	r2, [pc, #36]	@ (8001de4 <radio_PLL+0x30>)
 8001dbe:	f107 030c 	add.w	r3, r7, #12
 8001dc2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dc4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t size = sizeof(data);
 8001dc8:	230c      	movs	r3, #12
 8001dca:	72fb      	strb	r3, [r7, #11]
	SPI_write(status, data, &size);
 8001dcc:	f107 020b 	add.w	r2, r7, #11
 8001dd0:	f107 030c 	add.w	r3, r7, #12
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7fe fbbe 	bl	8000558 <SPI_write>
}
 8001ddc:	bf00      	nop
 8001dde:	3718      	adds	r7, #24
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	08013724 	.word	0x08013724

08001de8 <radio_mode_Rx>:

// Modes
void radio_mode_Rx(HAL_StatusTypeDef* status) {
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
	// Enable Rx and then enter ready mode
	uint8_t data[] = {0x32, 0, 0, 0, 60, 0, 8, 8, 8};
 8001df0:	4a09      	ldr	r2, [pc, #36]	@ (8001e18 <radio_mode_Rx+0x30>)
 8001df2:	f107 030c 	add.w	r3, r7, #12
 8001df6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001df8:	c303      	stmia	r3!, {r0, r1}
 8001dfa:	701a      	strb	r2, [r3, #0]
	uint8_t size = sizeof(data);
 8001dfc:	2309      	movs	r3, #9
 8001dfe:	72fb      	strb	r3, [r7, #11]
	SPI_write(status, data, &size);
 8001e00:	f107 020b 	add.w	r2, r7, #11
 8001e04:	f107 030c 	add.w	r3, r7, #12
 8001e08:	4619      	mov	r1, r3
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7fe fba4 	bl	8000558 <SPI_write>
}
 8001e10:	bf00      	nop
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	08013730 	.word	0x08013730

08001e1c <radio_write_FIFO>:

void radio_write_FIFO(HAL_StatusTypeDef* status, uint8_t* data, uint8_t* size) {
 8001e1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e20:	b089      	sub	sp, #36	@ 0x24
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	60f8      	str	r0, [r7, #12]
 8001e26:	60b9      	str	r1, [r7, #8]
 8001e28:	607a      	str	r2, [r7, #4]
 8001e2a:	466b      	mov	r3, sp
 8001e2c:	461e      	mov	r6, r3
	(*size)++;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	3301      	adds	r3, #1
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	701a      	strb	r2, [r3, #0]
	uint8_t command[*size];
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	7819      	ldrb	r1, [r3, #0]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	3b01      	subs	r3, #1
 8001e42:	61bb      	str	r3, [r7, #24]
 8001e44:	b2cb      	uxtb	r3, r1
 8001e46:	2200      	movs	r2, #0
 8001e48:	4698      	mov	r8, r3
 8001e4a:	4691      	mov	r9, r2
 8001e4c:	f04f 0200 	mov.w	r2, #0
 8001e50:	f04f 0300 	mov.w	r3, #0
 8001e54:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e58:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e5c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e60:	b2cb      	uxtb	r3, r1
 8001e62:	2200      	movs	r2, #0
 8001e64:	461c      	mov	r4, r3
 8001e66:	4615      	mov	r5, r2
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	f04f 0300 	mov.w	r3, #0
 8001e70:	00eb      	lsls	r3, r5, #3
 8001e72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e76:	00e2      	lsls	r2, r4, #3
 8001e78:	460b      	mov	r3, r1
 8001e7a:	3307      	adds	r3, #7
 8001e7c:	08db      	lsrs	r3, r3, #3
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	ebad 0d03 	sub.w	sp, sp, r3
 8001e84:	466b      	mov	r3, sp
 8001e86:	3300      	adds	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
	command[0] = 0x66;
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	2266      	movs	r2, #102	@ 0x66
 8001e8e:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 1; i < *size; i++) {
 8001e90:	2301      	movs	r3, #1
 8001e92:	77fb      	strb	r3, [r7, #31]
 8001e94:	e00a      	b.n	8001eac <radio_write_FIFO+0x90>
		command[i] = data[i-1];
 8001e96:	7ffb      	ldrb	r3, [r7, #31]
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	68ba      	ldr	r2, [r7, #8]
 8001e9c:	441a      	add	r2, r3
 8001e9e:	7ffb      	ldrb	r3, [r7, #31]
 8001ea0:	7811      	ldrb	r1, [r2, #0]
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 1; i < *size; i++) {
 8001ea6:	7ffb      	ldrb	r3, [r7, #31]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	77fb      	strb	r3, [r7, #31]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	7ffa      	ldrb	r2, [r7, #31]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d3ef      	bcc.n	8001e96 <radio_write_FIFO+0x7a>
	}

	SPI_write(status, command, size);
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6979      	ldr	r1, [r7, #20]
 8001eba:	68f8      	ldr	r0, [r7, #12]
 8001ebc:	f7fe fb4c 	bl	8000558 <SPI_write>
 8001ec0:	46b5      	mov	sp, r6
}
 8001ec2:	bf00      	nop
 8001ec4:	3724      	adds	r7, #36	@ 0x24
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001ecc <radio_mode_Tx>:

void radio_mode_Tx(HAL_StatusTypeDef* status) {
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
	// Enable Tx mode. After transmission switch to Rx
	uint8_t data[] = {0x31, 0, 0x80, 0, 60, 0, 0};
 8001ed4:	4a0c      	ldr	r2, [pc, #48]	@ (8001f08 <radio_mode_Tx+0x3c>)
 8001ed6:	f107 0310 	add.w	r3, r7, #16
 8001eda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ede:	6018      	str	r0, [r3, #0]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	8019      	strh	r1, [r3, #0]
 8001ee4:	3302      	adds	r3, #2
 8001ee6:	0c0a      	lsrs	r2, r1, #16
 8001ee8:	701a      	strb	r2, [r3, #0]
	uint8_t size = sizeof(data);
 8001eea:	2307      	movs	r3, #7
 8001eec:	73fb      	strb	r3, [r7, #15]
	SPI_write(status, data, &size);
 8001eee:	f107 020f 	add.w	r2, r7, #15
 8001ef2:	f107 0310 	add.w	r3, r7, #16
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7fe fb2d 	bl	8000558 <SPI_write>
}
 8001efe:	bf00      	nop
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	0801373c 	.word	0x0801373c

08001f0c <radio_send_packet>:

void radio_send_packet(HAL_StatusTypeDef* status, uint8_t* data, uint8_t* size) {
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	60f8      	str	r0, [r7, #12]
 8001f14:	60b9      	str	r1, [r7, #8]
 8001f16:	607a      	str	r2, [r7, #4]
	// Fill FIFO
	radio_write_FIFO(status, data, size);
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	68b9      	ldr	r1, [r7, #8]
 8001f1c:	68f8      	ldr	r0, [r7, #12]
 8001f1e:	f7ff ff7d 	bl	8001e1c <radio_write_FIFO>
	// Begin transmission
	radio_mode_Tx(status);
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f7ff ffd2 	bl	8001ecc <radio_mode_Tx>
}
 8001f28:	bf00      	nop
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <radio_read_fifo>:

void radio_read_fifo(HAL_StatusTypeDef* status, uint8_t* data) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b094      	sub	sp, #80	@ 0x50
 8001f34:	af02      	add	r7, sp, #8
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
	uint8_t dummy_data[61];
	dummy_data[0] = 0x77;
 8001f3a:	2377      	movs	r3, #119	@ 0x77
 8001f3c:	723b      	strb	r3, [r7, #8]

	HAL_SPI_TransmitReceive(&hspi4, dummy_data, data, 61, 500);
 8001f3e:	f107 0108 	add.w	r1, r7, #8
 8001f42:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	233d      	movs	r3, #61	@ 0x3d
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	4803      	ldr	r0, [pc, #12]	@ (8001f5c <radio_read_fifo+0x2c>)
 8001f4e:	f00c fbeb 	bl	800e728 <HAL_SPI_TransmitReceive>
}
 8001f52:	bf00      	nop
 8001f54:	3748      	adds	r7, #72	@ 0x48
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	2400034c 	.word	0x2400034c

08001f60 <radio_read_PH_status>:

uint8_t radio_read_PH_status(HAL_StatusTypeDef* status) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
	uint8_t data[2] = {0x21, 0xFF}; //Leave all interrupts pending or they will reset themselves
 8001f68:	f64f 7321 	movw	r3, #65313	@ 0xff21
 8001f6c:	81bb      	strh	r3, [r7, #12]
	uint8_t size = 2;
 8001f6e:	2302      	movs	r3, #2
 8001f70:	72fb      	strb	r3, [r7, #11]
	SPI_read(status, data, &size, &size);
 8001f72:	f107 030b 	add.w	r3, r7, #11
 8001f76:	f107 020b 	add.w	r2, r7, #11
 8001f7a:	f107 010c 	add.w	r1, r7, #12
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	f7fe fb0e 	bl	80005a0 <SPI_read>

	uint8_t ph_status = data[0];
 8001f84:	7b3b      	ldrb	r3, [r7, #12]
 8001f86:	73fb      	strb	r3, [r7, #15]
		// Incoming packet matched the filter


	}
	*/
	return ph_status;
 8001f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <radio_clear_PH_status>:

void radio_clear_PH_status(HAL_StatusTypeDef* status) {
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b084      	sub	sp, #16
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
	uint8_t data[2] = {0x21, 0x00}; //Leave all interrupts pending or they will reset themselves
 8001f9a:	2321      	movs	r3, #33	@ 0x21
 8001f9c:	81bb      	strh	r3, [r7, #12]
	uint8_t size = 2;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	72fb      	strb	r3, [r7, #11]
	SPI_write(status, data, &size);
 8001fa2:	f107 020b 	add.w	r2, r7, #11
 8001fa6:	f107 030c 	add.w	r3, r7, #12
 8001faa:	4619      	mov	r1, r3
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7fe fad3 	bl	8000558 <SPI_write>
}
 8001fb2:	bf00      	nop
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <radio_request_repetition>:

void radio_request_repetition(HAL_StatusTypeDef* status) {
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b084      	sub	sp, #16
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
	uint8_t size = 60;
 8001fc2:	233c      	movs	r3, #60	@ 0x3c
 8001fc4:	73fb      	strb	r3, [r7, #15]
	uint8_t data[] = {0};
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	733b      	strb	r3, [r7, #12]
	radio_send_packet(status, data, &size);
 8001fca:	f107 020f 	add.w	r2, r7, #15
 8001fce:	f107 030c 	add.w	r3, r7, #12
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f7ff ff99 	bl	8001f0c <radio_send_packet>
}
 8001fda:	bf00      	nop
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}

08001fe2 <radio_repetition_requested>:
void radio_repetition_requested (HAL_StatusTypeDef* status) {
 8001fe2:	b580      	push	{r7, lr}
 8001fe4:	b082      	sub	sp, #8
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
	radio_mode_Tx(status); // Reuse data in TX FIFO
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff ff6e 	bl	8001ecc <radio_mode_Tx>
}
 8001ff0:	bf00      	nop
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <setup>:
#include <routines.h>

void setup(HAL_StatusTypeDef* status, fault_flag* error_index) {
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	6039      	str	r1, [r7, #0]

	/// Issue POWER_UP command - wake transceiver up
		radio_power_up(status);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff fa60 	bl	80014c8 <radio_power_up>
		if (*status != 0) {
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <setup+0x20>
			*error_index = RADIO_PWUP;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	2204      	movs	r2, #4
 8002014:	701a      	strb	r2, [r3, #0]
			return;
 8002016:	e088      	b.n	800212a <setup+0x132>
		}

	// USB-C
	PowerInit(status);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f7fe fb3f 	bl	800069c <PowerInit>

	/// Check for errors, if non are found -> increase supply current
	if (*status == 0) {
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d107      	bne.n	8002036 <setup+0x3e>
		PowerIncreaseCurrent(status);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7fe fba1 	bl	800076e <PowerIncreaseCurrent>
		*error_index = POWER_INIT;
		return;
	}

	/// Check for error
	if (*status != 0) {
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d008      	beq.n	8002046 <setup+0x4e>
 8002034:	e003      	b.n	800203e <setup+0x46>
		*error_index = POWER_INIT;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	2201      	movs	r2, #1
 800203a:	701a      	strb	r2, [r3, #0]
		return;
 800203c:	e075      	b.n	800212a <setup+0x132>
		*error_index = POWER_INC;
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	2202      	movs	r2, #2
 8002042:	701a      	strb	r2, [r3, #0]
		return;
 8002044:	e071      	b.n	800212a <setup+0x132>

	*/


	/// Issue radio setup
	radio_pins(status);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff fb70 	bl	800172c <radio_pins>
	radio_TCXO(status);
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	f7ff fb89 	bl	8001764 <radio_TCXO>
	radio_global(status);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff fb9e 	bl	8001794 <radio_global>
	radio_interrupts(status);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f7ff fbb7 	bl	80017cc <radio_interrupts>
	radio_fast_registers(status);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7ff fbd0 	bl	8001804 <radio_fast_registers>
	radio_Tx(status);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff fbe9 	bl	800183c <radio_Tx>
	radio_sync(status);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff fc00 	bl	8001870 <radio_sync>
	radio_packet_CRC(status);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff fc17 	bl	80018a4 <radio_packet_CRC>
	radio_Rx_thr(status);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7ff fc2e 	bl	80018d8 <radio_Rx_thr>
	radio_Rx_CRC_1(status);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f7ff fc45 	bl	800190c <radio_Rx_CRC_1>
	radio_Rx_CRC_2(status);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f7ff fc5e 	bl	8001944 <radio_Rx_CRC_2>
	radio_Rx_CRC_3(status);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff fc77 	bl	800197c <radio_Rx_CRC_3>
	radio_Rx_CRC_seed(status);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff fc90 	bl	80019b4 <radio_Rx_CRC_seed>
	radio_mod(status);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7ff fca5 	bl	80019e4 <radio_mod>
	radio_freq_dev(status);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7ff fcbc 	bl	8001a18 <radio_freq_dev>
	radio_Tx_ramp(status);
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f7ff fcd5 	bl	8001a50 <radio_Tx_ramp>
	radio_NCO_offset(status);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7ff fcec 	bl	8001a84 <radio_NCO_offset>
	radio_AFC(status);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff fd03 	bl	8001ab8 <radio_AFC>
	radio_AGC_1(status);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7ff fd20 	bl	8001af8 <radio_AGC_1>
	radio_AGC_2(status);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff fd39 	bl	8001b30 <radio_AGC_2>
	radio_RAW(status);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7ff fd50 	bl	8001b64 <radio_RAW>
	radio_search_period(status);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff fd67 	bl	8001b98 <radio_search_period>
	radio_GFSK_thr(status);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7ff fd80 	bl	8001bd0 <radio_GFSK_thr>
	radio_RSSI_thr(status);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7ff fd99 	bl	8001c08 <radio_RSSI_thr>
	radio_RSSI_att(status);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7ff fdae 	bl	8001c38 <radio_RSSI_att>
	radio_Rx_filter_1(status);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7ff fdc5 	bl	8001c6c <radio_Rx_filter_1>
	radio_Rx_filter_2(status);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff fddc 	bl	8001ca0 <radio_Rx_filter_2>
	radio_Rx_filter_3(status);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f7ff fdf3 	bl	8001cd4 <radio_Rx_filter_3>
	radio_PA_1(status);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7ff fe0a 	bl	8001d08 <radio_PA_1>
	radio_PA_2(status);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7ff fe23 	bl	8001d40 <radio_PA_2>
	radio_masks(status);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7ff fe3e 	bl	8001d7c <radio_masks>
	radio_PLL(status);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7ff fe57 	bl	8001db4 <radio_PLL>

	// Check for errors
	if (*status != 0) {
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <setup+0x11e>
		*error_index = RADIO_SETUP;
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	2205      	movs	r2, #5
 8002112:	701a      	strb	r2, [r3, #0]
		return;
 8002114:	e009      	b.n	800212a <setup+0x132>
	}

	// Init. radio into receive mode
	radio_mode_Rx(status);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff fe66 	bl	8001de8 <radio_mode_Rx>
	if (*status != 0) {
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d002      	beq.n	800212a <setup+0x132>
		*error_index = RADIO_SET_RX;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	2206      	movs	r2, #6
 8002128:	701a      	strb	r2, [r3, #0]
	}

}
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <cmd_main_win>:

void cmd_main_win() {
 8002130:	b580      	push	{r7, lr}
 8002132:	b0d2      	sub	sp, #328	@ 0x148
 8002134:	af00      	add	r7, sp, #0
	uint8_t TxBuffer[] = "==================================================\r\n"
 8002136:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800213a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800213e:	4a0c      	ldr	r2, [pc, #48]	@ (8002170 <cmd_main_win+0x40>)
 8002140:	4618      	mov	r0, r3
 8002142:	4611      	mov	r1, r2
 8002144:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002148:	461a      	mov	r2, r3
 800214a:	f011 fa15 	bl	8013578 <memcpy>
						 "2) Get satellite's telemetry \r\n"
						 "3) Get image \r\n"
						 "4) Clear terminal \r\n"
						 "5) Ground station status \r\n"
						 "==================================================\r\n";
	uint16_t TxBufferLen = sizeof(TxBuffer);
 800214e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002152:	f8a7 3146 	strh.w	r3, [r7, #326]	@ 0x146
	CDC_Transmit_HS(TxBuffer, TxBufferLen);
 8002156:	f8b7 2146 	ldrh.w	r2, [r7, #326]	@ 0x146
 800215a:	1d3b      	adds	r3, r7, #4
 800215c:	4611      	mov	r1, r2
 800215e:	4618      	mov	r0, r3
 8002160:	f010 fd2e 	bl	8012bc0 <CDC_Transmit_HS>
}
 8002164:	bf00      	nop
 8002166:	f507 77a4 	add.w	r7, r7, #328	@ 0x148
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	08013744 	.word	0x08013744

08002174 <cmd_img_options>:

void cmd_img_options() {
 8002174:	b580      	push	{r7, lr}
 8002176:	b0e2      	sub	sp, #392	@ 0x188
 8002178:	af00      	add	r7, sp, #0
	uint8_t TxBuffer[] = "==================================================\r\n"
 800217a:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 800217e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002182:	4a0c      	ldr	r2, [pc, #48]	@ (80021b4 <cmd_img_options+0x40>)
 8002184:	4618      	mov	r0, r3
 8002186:	4611      	mov	r1, r2
 8002188:	f240 1383 	movw	r3, #387	@ 0x183
 800218c:	461a      	mov	r2, r3
 800218e:	f011 f9f3 	bl	8013578 <memcpy>
						 "--------------------------------------------------\r\n"
						 "Y - Colour mode: \r\n"
						 "1) Black & White \r\n"
						 "2) Colourful \r\n"
						 "==================================================\r\n";
	uint16_t TxBufferLen = sizeof(TxBuffer);
 8002192:	f240 1383 	movw	r3, #387	@ 0x183
 8002196:	f8a7 3186 	strh.w	r3, [r7, #390]	@ 0x186
	CDC_Transmit_HS(TxBuffer, TxBufferLen);
 800219a:	f8b7 2186 	ldrh.w	r2, [r7, #390]	@ 0x186
 800219e:	463b      	mov	r3, r7
 80021a0:	4611      	mov	r1, r2
 80021a2:	4618      	mov	r0, r3
 80021a4:	f010 fd0c 	bl	8012bc0 <CDC_Transmit_HS>
}
 80021a8:	bf00      	nop
 80021aa:	f507 77c4 	add.w	r7, r7, #392	@ 0x188
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	08013884 	.word	0x08013884

080021b8 <radio_ping>:

void radio_ping(HAL_StatusTypeDef* status) {
 80021b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80021bc:	b087      	sub	sp, #28
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
 80021c2:	466b      	mov	r3, sp
 80021c4:	461e      	mov	r6, r3
	// Fill 60byte packet with dummy data (all ones)
	uint8_t size = 60;
 80021c6:	233c      	movs	r3, #60	@ 0x3c
 80021c8:	72fb      	strb	r3, [r7, #11]
	uint8_t data[size];
 80021ca:	7af9      	ldrb	r1, [r7, #11]
 80021cc:	460b      	mov	r3, r1
 80021ce:	3b01      	subs	r3, #1
 80021d0:	613b      	str	r3, [r7, #16]
 80021d2:	b2cb      	uxtb	r3, r1
 80021d4:	2200      	movs	r2, #0
 80021d6:	4698      	mov	r8, r3
 80021d8:	4691      	mov	r9, r2
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	f04f 0300 	mov.w	r3, #0
 80021e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80021e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80021ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80021ee:	b2cb      	uxtb	r3, r1
 80021f0:	2200      	movs	r2, #0
 80021f2:	461c      	mov	r4, r3
 80021f4:	4615      	mov	r5, r2
 80021f6:	f04f 0200 	mov.w	r2, #0
 80021fa:	f04f 0300 	mov.w	r3, #0
 80021fe:	00eb      	lsls	r3, r5, #3
 8002200:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002204:	00e2      	lsls	r2, r4, #3
 8002206:	460b      	mov	r3, r1
 8002208:	3307      	adds	r3, #7
 800220a:	08db      	lsrs	r3, r3, #3
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	ebad 0d03 	sub.w	sp, sp, r3
 8002212:	466b      	mov	r3, sp
 8002214:	3300      	adds	r3, #0
 8002216:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < size; i++) {
 8002218:	2300      	movs	r3, #0
 800221a:	75fb      	strb	r3, [r7, #23]
 800221c:	e006      	b.n	800222c <radio_ping+0x74>
		data[i] = 0xFF;
 800221e:	7dfb      	ldrb	r3, [r7, #23]
 8002220:	68fa      	ldr	r2, [r7, #12]
 8002222:	21ff      	movs	r1, #255	@ 0xff
 8002224:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < size; i++) {
 8002226:	7dfb      	ldrb	r3, [r7, #23]
 8002228:	3301      	adds	r3, #1
 800222a:	75fb      	strb	r3, [r7, #23]
 800222c:	7afb      	ldrb	r3, [r7, #11]
 800222e:	7dfa      	ldrb	r2, [r7, #23]
 8002230:	429a      	cmp	r2, r3
 8002232:	d3f4      	bcc.n	800221e <radio_ping+0x66>
	}
	radio_send_packet(status, data, &size);
 8002234:	f107 030b 	add.w	r3, r7, #11
 8002238:	461a      	mov	r2, r3
 800223a:	68f9      	ldr	r1, [r7, #12]
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f7ff fe65 	bl	8001f0c <radio_send_packet>
 8002242:	46b5      	mov	sp, r6
}
 8002244:	bf00      	nop
 8002246:	371c      	adds	r7, #28
 8002248:	46bd      	mov	sp, r7
 800224a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800224e <capture_img>:

void capture_img(HAL_StatusTypeDef* status, fault_flag* error_index, uint8_t* img_mode) {
 800224e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002252:	b089      	sub	sp, #36	@ 0x24
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	607a      	str	r2, [r7, #4]
	/*#define IMG_SIZE 614400 // VGA = 640 * 480 * 2
//#define IMG_SIZE 202752 // CIF = 352 * 288 * 2
//#define IMG_SIZE 153600 // QVGA = 320 * 240 * 2
//#define IMG_SIZE 50688 // QCIF = 176 * 144 * 2*/

	uint8_t res = (*img_mode & 0b11110000);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	f023 030f 	bic.w	r3, r3, #15
 8002264:	77fb      	strb	r3, [r7, #31]
	uint32_t size;
	switch (res) {
 8002266:	7ffb      	ldrb	r3, [r7, #31]
 8002268:	2b30      	cmp	r3, #48	@ 0x30
 800226a:	d016      	beq.n	800229a <capture_img+0x4c>
 800226c:	2b30      	cmp	r3, #48	@ 0x30
 800226e:	dc18      	bgt.n	80022a2 <capture_img+0x54>
 8002270:	2b20      	cmp	r3, #32
 8002272:	d00e      	beq.n	8002292 <capture_img+0x44>
 8002274:	2b20      	cmp	r3, #32
 8002276:	dc14      	bgt.n	80022a2 <capture_img+0x54>
 8002278:	2b00      	cmp	r3, #0
 800227a:	d002      	beq.n	8002282 <capture_img+0x34>
 800227c:	2b10      	cmp	r3, #16
 800227e:	d004      	beq.n	800228a <capture_img+0x3c>
 8002280:	e00f      	b.n	80022a2 <capture_img+0x54>
		case (0x00): {
			size = 614400;
 8002282:	f44f 2316 	mov.w	r3, #614400	@ 0x96000
 8002286:	613b      	str	r3, [r7, #16]
			break;
 8002288:	e012      	b.n	80022b0 <capture_img+0x62>
		}
		case (0x10): {
			size = 202752;
 800228a:	f44f 3346 	mov.w	r3, #202752	@ 0x31800
 800228e:	613b      	str	r3, [r7, #16]
			break;
 8002290:	e00e      	b.n	80022b0 <capture_img+0x62>
		}
		case (0x20): {
			size = 153600;
 8002292:	f44f 3316 	mov.w	r3, #153600	@ 0x25800
 8002296:	613b      	str	r3, [r7, #16]
			break;
 8002298:	e00a      	b.n	80022b0 <capture_img+0x62>
		}
		case (0x30): {
			size = 50688;
 800229a:	f44f 4346 	mov.w	r3, #50688	@ 0xc600
 800229e:	613b      	str	r3, [r7, #16]
			break;
 80022a0:	e006      	b.n	80022b0 <capture_img+0x62>
		}
		default: {
			*status = HAL_ERROR;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2201      	movs	r2, #1
 80022a6:	701a      	strb	r2, [r3, #0]
			*error_index = IMG_DEF;
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	2208      	movs	r2, #8
 80022ac:	701a      	strb	r2, [r3, #0]
 80022ae:	e03f      	b.n	8002330 <capture_img+0xe2>
			return;
		}
	}

	uint8_t buff[size];
 80022b0:	6939      	ldr	r1, [r7, #16]
 80022b2:	466b      	mov	r3, sp
 80022b4:	461e      	mov	r6, r3
 80022b6:	460b      	mov	r3, r1
 80022b8:	3b01      	subs	r3, #1
 80022ba:	61bb      	str	r3, [r7, #24]
 80022bc:	2300      	movs	r3, #0
 80022be:	4688      	mov	r8, r1
 80022c0:	4699      	mov	r9, r3
 80022c2:	f04f 0200 	mov.w	r2, #0
 80022c6:	f04f 0300 	mov.w	r3, #0
 80022ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022d6:	2300      	movs	r3, #0
 80022d8:	460c      	mov	r4, r1
 80022da:	461d      	mov	r5, r3
 80022dc:	f04f 0200 	mov.w	r2, #0
 80022e0:	f04f 0300 	mov.w	r3, #0
 80022e4:	00eb      	lsls	r3, r5, #3
 80022e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80022ea:	00e2      	lsls	r2, r4, #3
 80022ec:	1dcb      	adds	r3, r1, #7
 80022ee:	08db      	lsrs	r3, r3, #3
 80022f0:	00db      	lsls	r3, r3, #3
 80022f2:	ebad 0d03 	sub.w	sp, sp, r3
 80022f6:	466b      	mov	r3, sp
 80022f8:	3300      	adds	r3, #0
 80022fa:	617b      	str	r3, [r7, #20]
	camera_init(status, img_mode);
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f7fe ff46 	bl	8001190 <camera_init>
	if (*status != 0) {
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d002      	beq.n	8002312 <capture_img+0xc4>
		*error_index = CAM_INIT;
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	2209      	movs	r2, #9
 8002310:	701a      	strb	r2, [r3, #0]
	}
	camera_capture_photo(status, buff, &size);
 8002312:	f107 0310 	add.w	r3, r7, #16
 8002316:	461a      	mov	r2, r3
 8002318:	6979      	ldr	r1, [r7, #20]
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f7ff f8b2 	bl	8001484 <camera_capture_photo>

	if (*status != 0) {
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d002      	beq.n	800232e <capture_img+0xe0>
		*error_index = CAM_CAPTURE;
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	220a      	movs	r2, #10
 800232c:	701a      	strb	r2, [r3, #0]
 800232e:	46b5      	mov	sp, r6
	}
}
 8002330:	3724      	adds	r7, #36	@ 0x24
 8002332:	46bd      	mov	sp, r7
 8002334:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002338 <nirq_handler>:

void nirq_handler(HAL_StatusTypeDef* status, fault_flag* error_index, uint8_t* ping) {
 8002338:	b580      	push	{r7, lr}
 800233a:	b096      	sub	sp, #88	@ 0x58
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]

	// Packet handling
	uint8_t pending_interrupts = radio_read_PH_status(status);
 8002344:	68f8      	ldr	r0, [r7, #12]
 8002346:	f7ff fe0b 	bl	8001f60 <radio_read_PH_status>
 800234a:	4603      	mov	r3, r0
 800234c:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
	uint8_t reg = 0;
 8002350:	2300      	movs	r3, #0
 8002352:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
	uint8_t control = 0;
 8002356:	2300      	movs	r3, #0
 8002358:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	reg = pending_interrupts & (1 << 4);
 800235c:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8002360:	f003 0310 	and.w	r3, r3, #16
 8002364:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
	control = (1 << 4);
 8002368:	2310      	movs	r3, #16
 800236a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	// Directly receiving
	if (reg == control) {
 800236e:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8002372:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002376:	429a      	cmp	r2, r3
 8002378:	d158      	bne.n	800242c <nirq_handler+0xf4>
		// Read packet from FIFO
		uint8_t packet[61]; //Ignore the first byte
		uint8_t ones = 0;
 800237a:	2300      	movs	r3, #0
 800237c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		uint8_t zeros = 0;
 8002380:	2300      	movs	r3, #0
 8002382:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
		radio_read_fifo(status, packet);
 8002386:	f107 0310 	add.w	r3, r7, #16
 800238a:	4619      	mov	r1, r3
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f7ff fdcf 	bl	8001f30 <radio_read_fifo>
		if (*status != 0) {
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d002      	beq.n	80023a0 <nirq_handler+0x68>
			*status = HAL_ERROR;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2201      	movs	r2, #1
 800239e:	701a      	strb	r2, [r3, #0]

		}
		for (uint8_t i = 1; i < 61; i++) {
 80023a0:	2301      	movs	r3, #1
 80023a2:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 80023a6:	e01f      	b.n	80023e8 <nirq_handler+0xb0>
			if (packet[i] == 0xFF) {
 80023a8:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80023ac:	3358      	adds	r3, #88	@ 0x58
 80023ae:	443b      	add	r3, r7
 80023b0:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80023b4:	2bff      	cmp	r3, #255	@ 0xff
 80023b6:	d105      	bne.n	80023c4 <nirq_handler+0x8c>
				ones++;
 80023b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80023bc:	3301      	adds	r3, #1
 80023be:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
 80023c2:	e00c      	b.n	80023de <nirq_handler+0xa6>
			} else if (packet[i] == 0) {
 80023c4:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80023c8:	3358      	adds	r3, #88	@ 0x58
 80023ca:	443b      	add	r3, r7
 80023cc:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d104      	bne.n	80023de <nirq_handler+0xa6>
				zeros++;
 80023d4:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 80023d8:	3301      	adds	r3, #1
 80023da:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
		for (uint8_t i = 1; i < 61; i++) {
 80023de:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80023e2:	3301      	adds	r3, #1
 80023e4:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
 80023e8:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 80023ec:	2b3c      	cmp	r3, #60	@ 0x3c
 80023ee:	d9db      	bls.n	80023a8 <nirq_handler+0x70>
			}
		}

		// Data handling logic
		/// PING
		if (ones > 58) {
 80023f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80023f4:	2b3a      	cmp	r3, #58	@ 0x3a
 80023f6:	d90e      	bls.n	8002416 <nirq_handler+0xde>
			if (*ping == 1) { // Response to ping received
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d103      	bne.n	8002408 <nirq_handler+0xd0>
				*ping = 2;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2202      	movs	r2, #2
 8002404:	701a      	strb	r2, [r3, #0]
 8002406:	e00d      	b.n	8002424 <nirq_handler+0xec>

			} else {
				HAL_Delay(100);
 8002408:	2064      	movs	r0, #100	@ 0x64
 800240a:	f000 fed3 	bl	80031b4 <HAL_Delay>
				radio_ping(status); // Send ping response
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f7ff fed2 	bl	80021b8 <radio_ping>
 8002414:	e006      	b.n	8002424 <nirq_handler+0xec>
			}
		}

		// Data retransmission request
		else if (zeros == 60) {
 8002416:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 800241a:	2b3c      	cmp	r3, #60	@ 0x3c
 800241c:	d102      	bne.n	8002424 <nirq_handler+0xec>
			radio_repetition_requested(status);
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f7ff fddf 	bl	8001fe2 <radio_repetition_requested>
		}
		/// TELEMETRY

		/// IMG

		radio_clear_PH_status(status);
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f7ff fdb4 	bl	8001f92 <radio_clear_PH_status>
 800242a:	e08a      	b.n	8002542 <nirq_handler+0x20a>
		return;
	}


	reg = pending_interrupts & (1 << 7);
 800242c:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8002430:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8002434:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
	control = (1 << 7);
 8002438:	2380      	movs	r3, #128	@ 0x80
 800243a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	// Receiving
	if (reg == control) {
 800243e:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8002442:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002446:	429a      	cmp	r2, r3
 8002448:	d175      	bne.n	8002536 <nirq_handler+0x1fe>
		// An incoming packet matched filter, check CRC
		reg = pending_interrupts & ((1 << 3) | (1 << 2));
 800244a:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800244e:	f003 030c 	and.w	r3, r3, #12
 8002452:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
		control = 0;
 8002456:	2300      	movs	r3, #0
 8002458:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		if (reg == control) {
 800245c:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8002460:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8002464:	429a      	cmp	r2, r3
 8002466:	d163      	bne.n	8002530 <nirq_handler+0x1f8>
			// Read packet from FIFO
			uint8_t packet[60];
			uint8_t ones = 0;
 8002468:	2300      	movs	r3, #0
 800246a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
			uint8_t zeros = 0;
 800246e:	2300      	movs	r3, #0
 8002470:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
			uint8_t rs= 60;
 8002474:	233c      	movs	r3, #60	@ 0x3c
 8002476:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
			uint8_t ts = 1;
 800247a:	2301      	movs	r3, #1
 800247c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

			packet[0] = 0x77;
 8002480:	2377      	movs	r3, #119	@ 0x77
 8002482:	743b      	strb	r3, [r7, #16]
			SPI_read(status, packet, &ts, &rs);
 8002484:	f107 034e 	add.w	r3, r7, #78	@ 0x4e
 8002488:	f107 024d 	add.w	r2, r7, #77	@ 0x4d
 800248c:	f107 0110 	add.w	r1, r7, #16
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f7fe f885 	bl	80005a0 <SPI_read>
			if (*status != 0) {
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d002      	beq.n	80024a4 <nirq_handler+0x16c>
				*status = HAL_ERROR;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2201      	movs	r2, #1
 80024a2:	701a      	strb	r2, [r3, #0]

			}
			for (uint8_t i = 0; i < 60; i++) {
 80024a4:	2300      	movs	r3, #0
 80024a6:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 80024aa:	e01f      	b.n	80024ec <nirq_handler+0x1b4>
				if (packet[i] == 0xFF) {
 80024ac:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80024b0:	3358      	adds	r3, #88	@ 0x58
 80024b2:	443b      	add	r3, r7
 80024b4:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80024b8:	2bff      	cmp	r3, #255	@ 0xff
 80024ba:	d105      	bne.n	80024c8 <nirq_handler+0x190>
					ones++;
 80024bc:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80024c0:	3301      	adds	r3, #1
 80024c2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
 80024c6:	e00c      	b.n	80024e2 <nirq_handler+0x1aa>
				}
				else if (packet[i] == 0) {
 80024c8:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80024cc:	3358      	adds	r3, #88	@ 0x58
 80024ce:	443b      	add	r3, r7
 80024d0:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d104      	bne.n	80024e2 <nirq_handler+0x1aa>
					zeros++;
 80024d8:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80024dc:	3301      	adds	r3, #1
 80024de:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
			for (uint8_t i = 0; i < 60; i++) {
 80024e2:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80024e6:	3301      	adds	r3, #1
 80024e8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 80024ec:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80024f0:	2b3b      	cmp	r3, #59	@ 0x3b
 80024f2:	d9db      	bls.n	80024ac <nirq_handler+0x174>
				}
			}

			// Data handling logic
			/// PING
			if (ones == 60) {
 80024f4:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 80024f8:	2b3c      	cmp	r3, #60	@ 0x3c
 80024fa:	d10b      	bne.n	8002514 <nirq_handler+0x1dc>
				if (*ping == 1) { // Response to ping received
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d103      	bne.n	800250c <nirq_handler+0x1d4>
					*ping = 2;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2202      	movs	r2, #2
 8002508:	701a      	strb	r2, [r3, #0]
 800250a:	e00a      	b.n	8002522 <nirq_handler+0x1ea>

				}
				else {
					radio_ping(status); // Send ping response
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f7ff fe53 	bl	80021b8 <radio_ping>
 8002512:	e006      	b.n	8002522 <nirq_handler+0x1ea>
				}
			}

			// Data retransmission request
			else if (zeros == 60) {
 8002514:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8002518:	2b3c      	cmp	r3, #60	@ 0x3c
 800251a:	d102      	bne.n	8002522 <nirq_handler+0x1ea>
				radio_repetition_requested(status);
 800251c:	68f8      	ldr	r0, [r7, #12]
 800251e:	f7ff fd60 	bl	8001fe2 <radio_repetition_requested>
			}
			/// TELEMETRY

			/// IMG

			radio_read_PH_status(status);
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f7ff fd1c 	bl	8001f60 <radio_read_PH_status>
			radio_mode_Rx(status);
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f7ff fc5d 	bl	8001de8 <radio_mode_Rx>
 800252e:	e008      	b.n	8002542 <nirq_handler+0x20a>
			return;
		}

		// Request packet retransmission
		else {
			radio_request_repetition(status);
 8002530:	68f8      	ldr	r0, [r7, #12]
 8002532:	f7ff fd42 	bl	8001fba <radio_request_repetition>
		// Buffer transmitted - switch to RX and listen
		radio_mode_Rx(status);
	}

	*/
	radio_mode_Rx(status);
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f7ff fc56 	bl	8001de8 <radio_mode_Rx>


	radio_clear_PH_status(status);
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f7ff fd28 	bl	8001f92 <radio_clear_PH_status>
}
 8002542:	3758      	adds	r7, #88	@ 0x58
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <get_GS_state>:

void get_GS_state(HAL_StatusTypeDef* status) {
 8002548:	b5b0      	push	{r4, r5, r7, lr}
 800254a:	b090      	sub	sp, #64	@ 0x40
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
	uint8_t rf_state[2] = {0x33, 0};
 8002550:	2333      	movs	r3, #51	@ 0x33
 8002552:	873b      	strh	r3, [r7, #56]	@ 0x38
	uint8_t ts = 1;
 8002554:	2301      	movs	r3, #1
 8002556:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	uint8_t rs = 2;
 800255a:	2302      	movs	r3, #2
 800255c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

	SPI_read(status, rf_state, &ts, &rs);
 8002560:	f107 0336 	add.w	r3, r7, #54	@ 0x36
 8002564:	f107 0237 	add.w	r2, r7, #55	@ 0x37
 8002568:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7fe f817 	bl	80005a0 <SPI_read>

	uint8_t main_state = rf_state[0] & 0b1111;
 8002572:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	uint8_t current_channel = rf_state[1];
 800257e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002582:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	uint8_t state_buffer[24] = "                      \r\n";
 8002586:	4b50      	ldr	r3, [pc, #320]	@ (80026c8 <get_GS_state+0x180>)
 8002588:	f107 041c 	add.w	r4, r7, #28
 800258c:	461d      	mov	r5, r3
 800258e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002590:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002592:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002596:	e884 0003 	stmia.w	r4, {r0, r1}
	switch (main_state) {
 800259a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800259e:	3b02      	subs	r3, #2
 80025a0:	2b06      	cmp	r3, #6
 80025a2:	d84a      	bhi.n	800263a <get_GS_state+0xf2>
 80025a4:	a201      	add	r2, pc, #4	@ (adr r2, 80025ac <get_GS_state+0x64>)
 80025a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025aa:	bf00      	nop
 80025ac:	080025c9 	.word	0x080025c9
 80025b0:	080025dd 	.word	0x080025dd
 80025b4:	080025dd 	.word	0x080025dd
 80025b8:	080025ef 	.word	0x080025ef
 80025bc:	08002607 	.word	0x08002607
 80025c0:	0800261f 	.word	0x0800261f
 80025c4:	0800262d 	.word	0x0800262d
		case 2: {
			strcpy(state_buffer, "State: SPI_ACTIVE");
 80025c8:	f107 031c 	add.w	r3, r7, #28
 80025cc:	4a3f      	ldr	r2, [pc, #252]	@ (80026cc <get_GS_state+0x184>)
 80025ce:	461c      	mov	r4, r3
 80025d0:	4615      	mov	r5, r2
 80025d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025d6:	682b      	ldr	r3, [r5, #0]
 80025d8:	8023      	strh	r3, [r4, #0]
			break;
 80025da:	e03a      	b.n	8002652 <get_GS_state+0x10a>
		}
		case 3:
		case 4: {
			strcpy(state_buffer,"State: READY");
 80025dc:	f107 031c 	add.w	r3, r7, #28
 80025e0:	4a3b      	ldr	r2, [pc, #236]	@ (80026d0 <get_GS_state+0x188>)
 80025e2:	461c      	mov	r4, r3
 80025e4:	4613      	mov	r3, r2
 80025e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025e8:	c407      	stmia	r4!, {r0, r1, r2}
 80025ea:	7023      	strb	r3, [r4, #0]
			break;
 80025ec:	e031      	b.n	8002652 <get_GS_state+0x10a>
		}
		case 5: {
			strcpy(state_buffer,"State: TX_TUNE");
 80025ee:	f107 031c 	add.w	r3, r7, #28
 80025f2:	4a38      	ldr	r2, [pc, #224]	@ (80026d4 <get_GS_state+0x18c>)
 80025f4:	461c      	mov	r4, r3
 80025f6:	4613      	mov	r3, r2
 80025f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025fa:	c407      	stmia	r4!, {r0, r1, r2}
 80025fc:	8023      	strh	r3, [r4, #0]
 80025fe:	3402      	adds	r4, #2
 8002600:	0c1b      	lsrs	r3, r3, #16
 8002602:	7023      	strb	r3, [r4, #0]
			break;
 8002604:	e025      	b.n	8002652 <get_GS_state+0x10a>
		}
		case 6: {
			strcpy(state_buffer,"State: RX_TUNE");
 8002606:	f107 031c 	add.w	r3, r7, #28
 800260a:	4a33      	ldr	r2, [pc, #204]	@ (80026d8 <get_GS_state+0x190>)
 800260c:	461c      	mov	r4, r3
 800260e:	4613      	mov	r3, r2
 8002610:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002612:	c407      	stmia	r4!, {r0, r1, r2}
 8002614:	8023      	strh	r3, [r4, #0]
 8002616:	3402      	adds	r4, #2
 8002618:	0c1b      	lsrs	r3, r3, #16
 800261a:	7023      	strb	r3, [r4, #0]
			break;
 800261c:	e019      	b.n	8002652 <get_GS_state+0x10a>
		}
		case 7: {
			strcpy(state_buffer,"State: TX");
 800261e:	f107 031c 	add.w	r3, r7, #28
 8002622:	4a2e      	ldr	r2, [pc, #184]	@ (80026dc <get_GS_state+0x194>)
 8002624:	ca07      	ldmia	r2, {r0, r1, r2}
 8002626:	c303      	stmia	r3!, {r0, r1}
 8002628:	801a      	strh	r2, [r3, #0]
			break;
 800262a:	e012      	b.n	8002652 <get_GS_state+0x10a>
		}
		case 8: {
			strcpy(state_buffer,"State: RX");
 800262c:	f107 031c 	add.w	r3, r7, #28
 8002630:	4a2b      	ldr	r2, [pc, #172]	@ (80026e0 <get_GS_state+0x198>)
 8002632:	ca07      	ldmia	r2, {r0, r1, r2}
 8002634:	c303      	stmia	r3!, {r0, r1}
 8002636:	801a      	strh	r2, [r3, #0]
			break;
 8002638:	e00b      	b.n	8002652 <get_GS_state+0x10a>
		}
		default: {
			strcpy(state_buffer,"State: not recognized");
 800263a:	f107 031c 	add.w	r3, r7, #28
 800263e:	4a29      	ldr	r2, [pc, #164]	@ (80026e4 <get_GS_state+0x19c>)
 8002640:	461c      	mov	r4, r3
 8002642:	4615      	mov	r5, r2
 8002644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002648:	e895 0003 	ldmia.w	r5, {r0, r1}
 800264c:	6020      	str	r0, [r4, #0]
 800264e:	3404      	adds	r4, #4
 8002650:	8021      	strh	r1, [r4, #0]
		}
	}
	uint16_t state_buffer_len = sizeof(state_buffer);
 8002652:	2318      	movs	r3, #24
 8002654:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	CDC_Transmit_HS(state_buffer, state_buffer_len);
 8002656:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8002658:	f107 031c 	add.w	r3, r7, #28
 800265c:	4611      	mov	r1, r2
 800265e:	4618      	mov	r0, r3
 8002660:	f010 faae 	bl	8012bc0 <CDC_Transmit_HS>


	uint8_t ch_buff[] = "Current channel: ";
 8002664:	4b20      	ldr	r3, [pc, #128]	@ (80026e8 <get_GS_state+0x1a0>)
 8002666:	f107 0408 	add.w	r4, r7, #8
 800266a:	461d      	mov	r5, r3
 800266c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800266e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002670:	682b      	ldr	r3, [r5, #0]
 8002672:	8023      	strh	r3, [r4, #0]
	state_buffer_len = sizeof(ch_buff);
 8002674:	2312      	movs	r3, #18
 8002676:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	CDC_Transmit_HS(ch_buff, state_buffer_len);
 8002678:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800267a:	f107 0308 	add.w	r3, r7, #8
 800267e:	4611      	mov	r1, r2
 8002680:	4618      	mov	r0, r3
 8002682:	f010 fa9d 	bl	8012bc0 <CDC_Transmit_HS>


	current_channel += (uint8_t) '0';
 8002686:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800268a:	3330      	adds	r3, #48	@ 0x30
 800268c:	b2db      	uxtb	r3, r3
 800268e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
	CDC_Transmit_HS(&current_channel, 1);
 8002692:	f107 0335 	add.w	r3, r7, #53	@ 0x35
 8002696:	2101      	movs	r1, #1
 8002698:	4618      	mov	r0, r3
 800269a:	f010 fa91 	bl	8012bc0 <CDC_Transmit_HS>

	strcpy(ch_buff, "               \r\n");
 800269e:	4b13      	ldr	r3, [pc, #76]	@ (80026ec <get_GS_state+0x1a4>)
 80026a0:	f107 0408 	add.w	r4, r7, #8
 80026a4:	461d      	mov	r5, r3
 80026a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026aa:	682b      	ldr	r3, [r5, #0]
 80026ac:	8023      	strh	r3, [r4, #0]
	state_buffer_len = sizeof(ch_buff);
 80026ae:	2312      	movs	r3, #18
 80026b0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	CDC_Transmit_HS(ch_buff, state_buffer_len);
 80026b2:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80026b4:	f107 0308 	add.w	r3, r7, #8
 80026b8:	4611      	mov	r1, r2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f010 fa80 	bl	8012bc0 <CDC_Transmit_HS>

}
 80026c0:	bf00      	nop
 80026c2:	3740      	adds	r7, #64	@ 0x40
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bdb0      	pop	{r4, r5, r7, pc}
 80026c8:	08013a90 	.word	0x08013a90
 80026cc:	08013a08 	.word	0x08013a08
 80026d0:	08013a1c 	.word	0x08013a1c
 80026d4:	08013a2c 	.word	0x08013a2c
 80026d8:	08013a3c 	.word	0x08013a3c
 80026dc:	08013a4c 	.word	0x08013a4c
 80026e0:	08013a58 	.word	0x08013a58
 80026e4:	08013a64 	.word	0x08013a64
 80026e8:	08013aa8 	.word	0x08013aa8
 80026ec:	08013a7c 	.word	0x08013a7c

080026f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002720 <HAL_MspInit+0x30>)
 80026f8:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80026fc:	4a08      	ldr	r2, [pc, #32]	@ (8002720 <HAL_MspInit+0x30>)
 80026fe:	f043 0302 	orr.w	r3, r3, #2
 8002702:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 8002706:	4b06      	ldr	r3, [pc, #24]	@ (8002720 <HAL_MspInit+0x30>)
 8002708:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	607b      	str	r3, [r7, #4]
 8002712:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	58024400 	.word	0x58024400

08002724 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b0be      	sub	sp, #248	@ 0xf8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800272c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	605a      	str	r2, [r3, #4]
 8002736:	609a      	str	r2, [r3, #8]
 8002738:	60da      	str	r2, [r3, #12]
 800273a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800273c:	f107 0320 	add.w	r3, r7, #32
 8002740:	22c0      	movs	r2, #192	@ 0xc0
 8002742:	2100      	movs	r1, #0
 8002744:	4618      	mov	r0, r3
 8002746:	f010 feeb 	bl	8013520 <memset>
  if(hadc->Instance==ADC1)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a6f      	ldr	r2, [pc, #444]	@ (800290c <HAL_ADC_MspInit+0x1e8>)
 8002750:	4293      	cmp	r3, r2
 8002752:	f040 8087 	bne.w	8002864 <HAL_ADC_MspInit+0x140>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002756:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800275a:	f04f 0300 	mov.w	r3, #0
 800275e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8002762:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002766:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800276a:	f107 0320 	add.w	r3, r7, #32
 800276e:	4618      	mov	r0, r3
 8002770:	f009 f8be 	bl	800b8f0 <HAL_RCCEx_PeriphCLKConfig>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d001      	beq.n	800277e <HAL_ADC_MspInit+0x5a>
    {
      Error_Handler();
 800277a:	f7fe fd03 	bl	8001184 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800277e:	4b64      	ldr	r3, [pc, #400]	@ (8002910 <HAL_ADC_MspInit+0x1ec>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	3301      	adds	r3, #1
 8002784:	4a62      	ldr	r2, [pc, #392]	@ (8002910 <HAL_ADC_MspInit+0x1ec>)
 8002786:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002788:	4b61      	ldr	r3, [pc, #388]	@ (8002910 <HAL_ADC_MspInit+0x1ec>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2b01      	cmp	r3, #1
 800278e:	d10e      	bne.n	80027ae <HAL_ADC_MspInit+0x8a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002790:	4b60      	ldr	r3, [pc, #384]	@ (8002914 <HAL_ADC_MspInit+0x1f0>)
 8002792:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8002796:	4a5f      	ldr	r2, [pc, #380]	@ (8002914 <HAL_ADC_MspInit+0x1f0>)
 8002798:	f043 0320 	orr.w	r3, r3, #32
 800279c:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80027a0:	4b5c      	ldr	r3, [pc, #368]	@ (8002914 <HAL_ADC_MspInit+0x1f0>)
 80027a2:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80027a6:	f003 0320 	and.w	r3, r3, #32
 80027aa:	61fb      	str	r3, [r7, #28]
 80027ac:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ae:	4b59      	ldr	r3, [pc, #356]	@ (8002914 <HAL_ADC_MspInit+0x1f0>)
 80027b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80027b4:	4a57      	ldr	r2, [pc, #348]	@ (8002914 <HAL_ADC_MspInit+0x1f0>)
 80027b6:	f043 0301 	orr.w	r3, r3, #1
 80027ba:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80027be:	4b55      	ldr	r3, [pc, #340]	@ (8002914 <HAL_ADC_MspInit+0x1f0>)
 80027c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	61bb      	str	r3, [r7, #24]
 80027ca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027cc:	4b51      	ldr	r3, [pc, #324]	@ (8002914 <HAL_ADC_MspInit+0x1f0>)
 80027ce:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80027d2:	4a50      	ldr	r2, [pc, #320]	@ (8002914 <HAL_ADC_MspInit+0x1f0>)
 80027d4:	f043 0304 	orr.w	r3, r3, #4
 80027d8:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80027dc:	4b4d      	ldr	r3, [pc, #308]	@ (8002914 <HAL_ADC_MspInit+0x1f0>)
 80027de:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	617b      	str	r3, [r7, #20]
 80027e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002914 <HAL_ADC_MspInit+0x1f0>)
 80027ec:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80027f0:	4a48      	ldr	r2, [pc, #288]	@ (8002914 <HAL_ADC_MspInit+0x1f0>)
 80027f2:	f043 0302 	orr.w	r3, r3, #2
 80027f6:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80027fa:	4b46      	ldr	r3, [pc, #280]	@ (8002914 <HAL_ADC_MspInit+0x1f0>)
 80027fc:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	613b      	str	r3, [r7, #16]
 8002806:	693b      	ldr	r3, [r7, #16]
    PA0     ------> ADC1_INP16
    PA1     ------> ADC1_INN16
    PC4     ------> ADC1_INP4
    PB0     ------> ADC1_INP9
    */
    GPIO_InitStruct.Pin = NTC_2__Pin|NTC_2_A1_Pin;
 8002808:	2303      	movs	r3, #3
 800280a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800280e:	2303      	movs	r3, #3
 8002810:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002814:	2300      	movs	r3, #0
 8002816:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800281a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800281e:	4619      	mov	r1, r3
 8002820:	483d      	ldr	r0, [pc, #244]	@ (8002918 <HAL_ADC_MspInit+0x1f4>)
 8002822:	f005 fc1d 	bl	8008060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CC1_Pin;
 8002826:	2310      	movs	r3, #16
 8002828:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800282c:	2303      	movs	r3, #3
 800282e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002832:	2300      	movs	r3, #0
 8002834:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(CC1_GPIO_Port, &GPIO_InitStruct);
 8002838:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800283c:	4619      	mov	r1, r3
 800283e:	4837      	ldr	r0, [pc, #220]	@ (800291c <HAL_ADC_MspInit+0x1f8>)
 8002840:	f005 fc0e 	bl	8008060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_VBUS_Pin;
 8002844:	2301      	movs	r3, #1
 8002846:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800284a:	2303      	movs	r3, #3
 800284c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002850:	2300      	movs	r3, #0
 8002852:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(ADC_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002856:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 800285a:	4619      	mov	r1, r3
 800285c:	4830      	ldr	r0, [pc, #192]	@ (8002920 <HAL_ADC_MspInit+0x1fc>)
 800285e:	f005 fbff 	bl	8008060 <HAL_GPIO_Init>
    /* USER CODE BEGIN ADC2_MspInit 1 */

    /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002862:	e04e      	b.n	8002902 <HAL_ADC_MspInit+0x1de>
  else if(hadc->Instance==ADC2)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a2e      	ldr	r2, [pc, #184]	@ (8002924 <HAL_ADC_MspInit+0x200>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d149      	bne.n	8002902 <HAL_ADC_MspInit+0x1de>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800286e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002872:	f04f 0300 	mov.w	r3, #0
 8002876:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 800287a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800287e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002882:	f107 0320 	add.w	r3, r7, #32
 8002886:	4618      	mov	r0, r3
 8002888:	f009 f832 	bl	800b8f0 <HAL_RCCEx_PeriphCLKConfig>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <HAL_ADC_MspInit+0x172>
      Error_Handler();
 8002892:	f7fe fc77 	bl	8001184 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002896:	4b1e      	ldr	r3, [pc, #120]	@ (8002910 <HAL_ADC_MspInit+0x1ec>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	3301      	adds	r3, #1
 800289c:	4a1c      	ldr	r2, [pc, #112]	@ (8002910 <HAL_ADC_MspInit+0x1ec>)
 800289e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80028a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002910 <HAL_ADC_MspInit+0x1ec>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d10e      	bne.n	80028c6 <HAL_ADC_MspInit+0x1a2>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80028a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002914 <HAL_ADC_MspInit+0x1f0>)
 80028aa:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80028ae:	4a19      	ldr	r2, [pc, #100]	@ (8002914 <HAL_ADC_MspInit+0x1f0>)
 80028b0:	f043 0320 	orr.w	r3, r3, #32
 80028b4:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 80028b8:	4b16      	ldr	r3, [pc, #88]	@ (8002914 <HAL_ADC_MspInit+0x1f0>)
 80028ba:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80028be:	f003 0320 	and.w	r3, r3, #32
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028c6:	4b13      	ldr	r3, [pc, #76]	@ (8002914 <HAL_ADC_MspInit+0x1f0>)
 80028c8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80028cc:	4a11      	ldr	r2, [pc, #68]	@ (8002914 <HAL_ADC_MspInit+0x1f0>)
 80028ce:	f043 0304 	orr.w	r3, r3, #4
 80028d2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80028d6:	4b0f      	ldr	r3, [pc, #60]	@ (8002914 <HAL_ADC_MspInit+0x1f0>)
 80028d8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = CC2_Pin;
 80028e4:	2320      	movs	r3, #32
 80028e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028ea:	2303      	movs	r3, #3
 80028ec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f0:	2300      	movs	r3, #0
 80028f2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(CC2_GPIO_Port, &GPIO_InitStruct);
 80028f6:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80028fa:	4619      	mov	r1, r3
 80028fc:	4807      	ldr	r0, [pc, #28]	@ (800291c <HAL_ADC_MspInit+0x1f8>)
 80028fe:	f005 fbaf 	bl	8008060 <HAL_GPIO_Init>
}
 8002902:	bf00      	nop
 8002904:	37f8      	adds	r7, #248	@ 0xf8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40022000 	.word	0x40022000
 8002910:	240004c8 	.word	0x240004c8
 8002914:	58024400 	.word	0x58024400
 8002918:	58020000 	.word	0x58020000
 800291c:	58020800 	.word	0x58020800
 8002920:	58020400 	.word	0x58020400
 8002924:	40022100 	.word	0x40022100

08002928 <HAL_DCMI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdcmi: DCMI handle pointer
  * @retval None
  */
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08c      	sub	sp, #48	@ 0x30
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002930:	f107 031c 	add.w	r3, r7, #28
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	60da      	str	r2, [r3, #12]
 800293e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a6a      	ldr	r2, [pc, #424]	@ (8002af0 <HAL_DCMI_MspInit+0x1c8>)
 8002946:	4293      	cmp	r3, r2
 8002948:	f040 80ce 	bne.w	8002ae8 <HAL_DCMI_MspInit+0x1c0>
  {
    /* USER CODE BEGIN DCMI_MspInit 0 */

    /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 800294c:	4b69      	ldr	r3, [pc, #420]	@ (8002af4 <HAL_DCMI_MspInit+0x1cc>)
 800294e:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8002952:	4a68      	ldr	r2, [pc, #416]	@ (8002af4 <HAL_DCMI_MspInit+0x1cc>)
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	f8c2 313c 	str.w	r3, [r2, #316]	@ 0x13c
 800295c:	4b65      	ldr	r3, [pc, #404]	@ (8002af4 <HAL_DCMI_MspInit+0x1cc>)
 800295e:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	61bb      	str	r3, [r7, #24]
 8002968:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800296a:	4b62      	ldr	r3, [pc, #392]	@ (8002af4 <HAL_DCMI_MspInit+0x1cc>)
 800296c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002970:	4a60      	ldr	r2, [pc, #384]	@ (8002af4 <HAL_DCMI_MspInit+0x1cc>)
 8002972:	f043 0301 	orr.w	r3, r3, #1
 8002976:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800297a:	4b5e      	ldr	r3, [pc, #376]	@ (8002af4 <HAL_DCMI_MspInit+0x1cc>)
 800297c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	617b      	str	r3, [r7, #20]
 8002986:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002988:	4b5a      	ldr	r3, [pc, #360]	@ (8002af4 <HAL_DCMI_MspInit+0x1cc>)
 800298a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800298e:	4a59      	ldr	r2, [pc, #356]	@ (8002af4 <HAL_DCMI_MspInit+0x1cc>)
 8002990:	f043 0304 	orr.w	r3, r3, #4
 8002994:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002998:	4b56      	ldr	r3, [pc, #344]	@ (8002af4 <HAL_DCMI_MspInit+0x1cc>)
 800299a:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800299e:	f003 0304 	and.w	r3, r3, #4
 80029a2:	613b      	str	r3, [r7, #16]
 80029a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029a6:	4b53      	ldr	r3, [pc, #332]	@ (8002af4 <HAL_DCMI_MspInit+0x1cc>)
 80029a8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80029ac:	4a51      	ldr	r2, [pc, #324]	@ (8002af4 <HAL_DCMI_MspInit+0x1cc>)
 80029ae:	f043 0308 	orr.w	r3, r3, #8
 80029b2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80029b6:	4b4f      	ldr	r3, [pc, #316]	@ (8002af4 <HAL_DCMI_MspInit+0x1cc>)
 80029b8:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029c4:	4b4b      	ldr	r3, [pc, #300]	@ (8002af4 <HAL_DCMI_MspInit+0x1cc>)
 80029c6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80029ca:	4a4a      	ldr	r2, [pc, #296]	@ (8002af4 <HAL_DCMI_MspInit+0x1cc>)
 80029cc:	f043 0302 	orr.w	r3, r3, #2
 80029d0:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 80029d4:	4b47      	ldr	r3, [pc, #284]	@ (8002af4 <HAL_DCMI_MspInit+0x1cc>)
 80029d6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	60bb      	str	r3, [r7, #8]
 80029e0:	68bb      	ldr	r3, [r7, #8]
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PB8     ------> DCMI_D6
    PB9     ------> DCMI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80029e2:	2350      	movs	r3, #80	@ 0x50
 80029e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029e6:	2302      	movs	r3, #2
 80029e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ee:	2303      	movs	r3, #3
 80029f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80029f2:	230d      	movs	r3, #13
 80029f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f6:	f107 031c 	add.w	r3, r7, #28
 80029fa:	4619      	mov	r1, r3
 80029fc:	483e      	ldr	r0, [pc, #248]	@ (8002af8 <HAL_DCMI_MspInit+0x1d0>)
 80029fe:	f005 fb2f 	bl	8008060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8002a02:	f44f 633c 	mov.w	r3, #3008	@ 0xbc0
 8002a06:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a08:	2302      	movs	r3, #2
 8002a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a10:	2303      	movs	r3, #3
 8002a12:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002a14:	230d      	movs	r3, #13
 8002a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a18:	f107 031c 	add.w	r3, r7, #28
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4837      	ldr	r0, [pc, #220]	@ (8002afc <HAL_DCMI_MspInit+0x1d4>)
 8002a20:	f005 fb1e 	bl	8008060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002a24:	2308      	movs	r3, #8
 8002a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a30:	2303      	movs	r3, #3
 8002a32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002a34:	230d      	movs	r3, #13
 8002a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a38:	f107 031c 	add.w	r3, r7, #28
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4830      	ldr	r0, [pc, #192]	@ (8002b00 <HAL_DCMI_MspInit+0x1d8>)
 8002a40:	f005 fb0e 	bl	8008060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002a44:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a52:	2303      	movs	r3, #3
 8002a54:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8002a56:	230d      	movs	r3, #13
 8002a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a5a:	f107 031c 	add.w	r3, r7, #28
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4828      	ldr	r0, [pc, #160]	@ (8002b04 <HAL_DCMI_MspInit+0x1dc>)
 8002a62:	f005 fafd 	bl	8008060 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream0;
 8002a66:	4b28      	ldr	r3, [pc, #160]	@ (8002b08 <HAL_DCMI_MspInit+0x1e0>)
 8002a68:	4a28      	ldr	r2, [pc, #160]	@ (8002b0c <HAL_DCMI_MspInit+0x1e4>)
 8002a6a:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI_PSSI;
 8002a6c:	4b26      	ldr	r3, [pc, #152]	@ (8002b08 <HAL_DCMI_MspInit+0x1e0>)
 8002a6e:	224b      	movs	r2, #75	@ 0x4b
 8002a70:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a72:	4b25      	ldr	r3, [pc, #148]	@ (8002b08 <HAL_DCMI_MspInit+0x1e0>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a78:	4b23      	ldr	r3, [pc, #140]	@ (8002b08 <HAL_DCMI_MspInit+0x1e0>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8002a7e:	4b22      	ldr	r3, [pc, #136]	@ (8002b08 <HAL_DCMI_MspInit+0x1e0>)
 8002a80:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a84:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a86:	4b20      	ldr	r3, [pc, #128]	@ (8002b08 <HAL_DCMI_MspInit+0x1e0>)
 8002a88:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002a8c:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a8e:	4b1e      	ldr	r3, [pc, #120]	@ (8002b08 <HAL_DCMI_MspInit+0x1e0>)
 8002a90:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a94:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8002a96:	4b1c      	ldr	r3, [pc, #112]	@ (8002b08 <HAL_DCMI_MspInit+0x1e0>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002a9c:	4b1a      	ldr	r3, [pc, #104]	@ (8002b08 <HAL_DCMI_MspInit+0x1e0>)
 8002a9e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002aa2:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002aa4:	4b18      	ldr	r3, [pc, #96]	@ (8002b08 <HAL_DCMI_MspInit+0x1e0>)
 8002aa6:	2204      	movs	r2, #4
 8002aa8:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002aaa:	4b17      	ldr	r3, [pc, #92]	@ (8002b08 <HAL_DCMI_MspInit+0x1e0>)
 8002aac:	2203      	movs	r2, #3
 8002aae:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8002ab0:	4b15      	ldr	r3, [pc, #84]	@ (8002b08 <HAL_DCMI_MspInit+0x1e0>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002ab6:	4b14      	ldr	r3, [pc, #80]	@ (8002b08 <HAL_DCMI_MspInit+0x1e0>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8002abc:	4812      	ldr	r0, [pc, #72]	@ (8002b08 <HAL_DCMI_MspInit+0x1e0>)
 8002abe:	f001 ff41 	bl	8004944 <HAL_DMA_Init>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <HAL_DCMI_MspInit+0x1a4>
    {
      Error_Handler();
 8002ac8:	f7fe fb5c 	bl	8001184 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a0e      	ldr	r2, [pc, #56]	@ (8002b08 <HAL_DCMI_MspInit+0x1e0>)
 8002ad0:	649a      	str	r2, [r3, #72]	@ 0x48
 8002ad2:	4a0d      	ldr	r2, [pc, #52]	@ (8002b08 <HAL_DCMI_MspInit+0x1e0>)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_PSSI_IRQn, 0, 0);
 8002ad8:	2200      	movs	r2, #0
 8002ada:	2100      	movs	r1, #0
 8002adc:	204e      	movs	r0, #78	@ 0x4e
 8002ade:	f001 fb8e 	bl	80041fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_PSSI_IRQn);
 8002ae2:	204e      	movs	r0, #78	@ 0x4e
 8002ae4:	f001 fba5 	bl	8004232 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DCMI_MspInit 1 */

  }

}
 8002ae8:	bf00      	nop
 8002aea:	3730      	adds	r7, #48	@ 0x30
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	48020000 	.word	0x48020000
 8002af4:	58024400 	.word	0x58024400
 8002af8:	58020000 	.word	0x58020000
 8002afc:	58020800 	.word	0x58020800
 8002b00:	58020c00 	.word	0x58020c00
 8002b04:	58020400 	.word	0x58020400
 8002b08:	24000280 	.word	0x24000280
 8002b0c:	40020010 	.word	0x40020010

08002b10 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b0ba      	sub	sp, #232	@ 0xe8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b18:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	601a      	str	r2, [r3, #0]
 8002b20:	605a      	str	r2, [r3, #4]
 8002b22:	609a      	str	r2, [r3, #8]
 8002b24:	60da      	str	r2, [r3, #12]
 8002b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b28:	f107 0310 	add.w	r3, r7, #16
 8002b2c:	22c0      	movs	r2, #192	@ 0xc0
 8002b2e:	2100      	movs	r1, #0
 8002b30:	4618      	mov	r0, r3
 8002b32:	f010 fcf5 	bl	8013520 <memset>
  if(hi2c->Instance==I2C2)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a27      	ldr	r2, [pc, #156]	@ (8002bd8 <HAL_I2C_MspInit+0xc8>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d146      	bne.n	8002bce <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002b40:	f04f 0208 	mov.w	r2, #8
 8002b44:	f04f 0300 	mov.w	r3, #0
 8002b48:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b52:	f107 0310 	add.w	r3, r7, #16
 8002b56:	4618      	mov	r0, r3
 8002b58:	f008 feca 	bl	800b8f0 <HAL_RCCEx_PeriphCLKConfig>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d001      	beq.n	8002b66 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002b62:	f7fe fb0f 	bl	8001184 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b66:	4b1d      	ldr	r3, [pc, #116]	@ (8002bdc <HAL_I2C_MspInit+0xcc>)
 8002b68:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002b6c:	4a1b      	ldr	r2, [pc, #108]	@ (8002bdc <HAL_I2C_MspInit+0xcc>)
 8002b6e:	f043 0302 	orr.w	r3, r3, #2
 8002b72:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002b76:	4b19      	ldr	r3, [pc, #100]	@ (8002bdc <HAL_I2C_MspInit+0xcc>)
 8002b78:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002b84:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002b88:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b8c:	2312      	movs	r3, #18
 8002b8e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b92:	2301      	movs	r3, #1
 8002b94:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002b9e:	2304      	movs	r3, #4
 8002ba0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ba4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002ba8:	4619      	mov	r1, r3
 8002baa:	480d      	ldr	r0, [pc, #52]	@ (8002be0 <HAL_I2C_MspInit+0xd0>)
 8002bac:	f005 fa58 	bl	8008060 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8002bdc <HAL_I2C_MspInit+0xcc>)
 8002bb2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002bb6:	4a09      	ldr	r2, [pc, #36]	@ (8002bdc <HAL_I2C_MspInit+0xcc>)
 8002bb8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002bbc:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
 8002bc0:	4b06      	ldr	r3, [pc, #24]	@ (8002bdc <HAL_I2C_MspInit+0xcc>)
 8002bc2:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8002bc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bca:	60bb      	str	r3, [r7, #8]
 8002bcc:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C2_MspInit 1 */

  }

}
 8002bce:	bf00      	nop
 8002bd0:	37e8      	adds	r7, #232	@ 0xe8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40005800 	.word	0x40005800
 8002bdc:	58024400 	.word	0x58024400
 8002be0:	58020400 	.word	0x58020400

08002be4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b0ba      	sub	sp, #232	@ 0xe8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]
 8002bf4:	605a      	str	r2, [r3, #4]
 8002bf6:	609a      	str	r2, [r3, #8]
 8002bf8:	60da      	str	r2, [r3, #12]
 8002bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bfc:	f107 0310 	add.w	r3, r7, #16
 8002c00:	22c0      	movs	r2, #192	@ 0xc0
 8002c02:	2100      	movs	r1, #0
 8002c04:	4618      	mov	r0, r3
 8002c06:	f010 fc8b 	bl	8013520 <memset>
  if(hspi->Instance==SPI4)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a6b      	ldr	r2, [pc, #428]	@ (8002dbc <HAL_SPI_MspInit+0x1d8>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	f040 80cf 	bne.w	8002db4 <HAL_SPI_MspInit+0x1d0>

    /* USER CODE END SPI4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI4;
 8002c16:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c1a:	f04f 0300 	mov.w	r3, #0
 8002c1e:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8002c22:	2301      	movs	r3, #1
 8002c24:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 16;
 8002c26:	2310      	movs	r3, #16
 8002c28:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8002c2a:	2302      	movs	r3, #2
 8002c2c:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 16;
 8002c2e:	2310      	movs	r3, #16
 8002c30:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002c32:	2302      	movs	r3, #2
 8002c34:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8002c36:	23c0      	movs	r3, #192	@ 0xc0
 8002c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_PLL2;
 8002c42:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002c46:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c48:	f107 0310 	add.w	r3, r7, #16
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f008 fe4f 	bl	800b8f0 <HAL_RCCEx_PeriphCLKConfig>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <HAL_SPI_MspInit+0x78>
    {
      Error_Handler();
 8002c58:	f7fe fa94 	bl	8001184 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8002c5c:	4b58      	ldr	r3, [pc, #352]	@ (8002dc0 <HAL_SPI_MspInit+0x1dc>)
 8002c5e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002c62:	4a57      	ldr	r2, [pc, #348]	@ (8002dc0 <HAL_SPI_MspInit+0x1dc>)
 8002c64:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002c68:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
 8002c6c:	4b54      	ldr	r3, [pc, #336]	@ (8002dc0 <HAL_SPI_MspInit+0x1dc>)
 8002c6e:	f8d3 3150 	ldr.w	r3, [r3, #336]	@ 0x150
 8002c72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c7a:	4b51      	ldr	r3, [pc, #324]	@ (8002dc0 <HAL_SPI_MspInit+0x1dc>)
 8002c7c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002c80:	4a4f      	ldr	r2, [pc, #316]	@ (8002dc0 <HAL_SPI_MspInit+0x1dc>)
 8002c82:	f043 0310 	orr.w	r3, r3, #16
 8002c86:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8002c8a:	4b4d      	ldr	r3, [pc, #308]	@ (8002dc0 <HAL_SPI_MspInit+0x1dc>)
 8002c8c:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8002c90:	f003 0310 	and.w	r3, r3, #16
 8002c94:	60bb      	str	r3, [r7, #8]
 8002c96:	68bb      	ldr	r3, [r7, #8]
    PE11     ------> SPI4_NSS
    PE12     ------> SPI4_SCK
    PE13     ------> SPI4_MISO
    PE14     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = SPI4_nSEL_Pin;
 8002c98:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002c9c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cac:	2303      	movs	r3, #3
 8002cae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002cb2:	2305      	movs	r3, #5
 8002cb4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(SPI4_nSEL_GPIO_Port, &GPIO_InitStruct);
 8002cb8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4841      	ldr	r0, [pc, #260]	@ (8002dc4 <HAL_SPI_MspInit+0x1e0>)
 8002cc0:	f005 f9ce 	bl	8008060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002cc4:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8002cc8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ccc:	2302      	movs	r3, #2
 8002cce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8002cde:	2305      	movs	r3, #5
 8002ce0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ce4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4836      	ldr	r0, [pc, #216]	@ (8002dc4 <HAL_SPI_MspInit+0x1e0>)
 8002cec:	f005 f9b8 	bl	8008060 <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA1_Stream1;
 8002cf0:	4b35      	ldr	r3, [pc, #212]	@ (8002dc8 <HAL_SPI_MspInit+0x1e4>)
 8002cf2:	4a36      	ldr	r2, [pc, #216]	@ (8002dcc <HAL_SPI_MspInit+0x1e8>)
 8002cf4:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Request = DMA_REQUEST_SPI4_TX;
 8002cf6:	4b34      	ldr	r3, [pc, #208]	@ (8002dc8 <HAL_SPI_MspInit+0x1e4>)
 8002cf8:	2254      	movs	r2, #84	@ 0x54
 8002cfa:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002cfc:	4b32      	ldr	r3, [pc, #200]	@ (8002dc8 <HAL_SPI_MspInit+0x1e4>)
 8002cfe:	2240      	movs	r2, #64	@ 0x40
 8002d00:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d02:	4b31      	ldr	r3, [pc, #196]	@ (8002dc8 <HAL_SPI_MspInit+0x1e4>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002d08:	4b2f      	ldr	r3, [pc, #188]	@ (8002dc8 <HAL_SPI_MspInit+0x1e4>)
 8002d0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d0e:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d10:	4b2d      	ldr	r3, [pc, #180]	@ (8002dc8 <HAL_SPI_MspInit+0x1e4>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d16:	4b2c      	ldr	r3, [pc, #176]	@ (8002dc8 <HAL_SPI_MspInit+0x1e4>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8002d1c:	4b2a      	ldr	r3, [pc, #168]	@ (8002dc8 <HAL_SPI_MspInit+0x1e4>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002d22:	4b29      	ldr	r3, [pc, #164]	@ (8002dc8 <HAL_SPI_MspInit+0x1e4>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d28:	4b27      	ldr	r3, [pc, #156]	@ (8002dc8 <HAL_SPI_MspInit+0x1e4>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8002d2e:	4826      	ldr	r0, [pc, #152]	@ (8002dc8 <HAL_SPI_MspInit+0x1e4>)
 8002d30:	f001 fe08 	bl	8004944 <HAL_DMA_Init>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d001      	beq.n	8002d3e <HAL_SPI_MspInit+0x15a>
    {
      Error_Handler();
 8002d3a:	f7fe fa23 	bl	8001184 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi4_tx);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a21      	ldr	r2, [pc, #132]	@ (8002dc8 <HAL_SPI_MspInit+0x1e4>)
 8002d42:	679a      	str	r2, [r3, #120]	@ 0x78
 8002d44:	4a20      	ldr	r2, [pc, #128]	@ (8002dc8 <HAL_SPI_MspInit+0x1e4>)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI4_RX Init */
    hdma_spi4_rx.Instance = DMA1_Stream2;
 8002d4a:	4b21      	ldr	r3, [pc, #132]	@ (8002dd0 <HAL_SPI_MspInit+0x1ec>)
 8002d4c:	4a21      	ldr	r2, [pc, #132]	@ (8002dd4 <HAL_SPI_MspInit+0x1f0>)
 8002d4e:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Request = DMA_REQUEST_SPI4_RX;
 8002d50:	4b1f      	ldr	r3, [pc, #124]	@ (8002dd0 <HAL_SPI_MspInit+0x1ec>)
 8002d52:	2253      	movs	r2, #83	@ 0x53
 8002d54:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d56:	4b1e      	ldr	r3, [pc, #120]	@ (8002dd0 <HAL_SPI_MspInit+0x1ec>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d5c:	4b1c      	ldr	r3, [pc, #112]	@ (8002dd0 <HAL_SPI_MspInit+0x1ec>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d62:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd0 <HAL_SPI_MspInit+0x1ec>)
 8002d64:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d68:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d6a:	4b19      	ldr	r3, [pc, #100]	@ (8002dd0 <HAL_SPI_MspInit+0x1ec>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d70:	4b17      	ldr	r3, [pc, #92]	@ (8002dd0 <HAL_SPI_MspInit+0x1ec>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8002d76:	4b16      	ldr	r3, [pc, #88]	@ (8002dd0 <HAL_SPI_MspInit+0x1ec>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d7c:	4b14      	ldr	r3, [pc, #80]	@ (8002dd0 <HAL_SPI_MspInit+0x1ec>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d82:	4b13      	ldr	r3, [pc, #76]	@ (8002dd0 <HAL_SPI_MspInit+0x1ec>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8002d88:	4811      	ldr	r0, [pc, #68]	@ (8002dd0 <HAL_SPI_MspInit+0x1ec>)
 8002d8a:	f001 fddb 	bl	8004944 <HAL_DMA_Init>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <HAL_SPI_MspInit+0x1b4>
    {
      Error_Handler();
 8002d94:	f7fe f9f6 	bl	8001184 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi4_rx);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4a0d      	ldr	r2, [pc, #52]	@ (8002dd0 <HAL_SPI_MspInit+0x1ec>)
 8002d9c:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002d9e:	4a0c      	ldr	r2, [pc, #48]	@ (8002dd0 <HAL_SPI_MspInit+0x1ec>)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 0, 0);
 8002da4:	2200      	movs	r2, #0
 8002da6:	2100      	movs	r1, #0
 8002da8:	2054      	movs	r0, #84	@ 0x54
 8002daa:	f001 fa28 	bl	80041fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8002dae:	2054      	movs	r0, #84	@ 0x54
 8002db0:	f001 fa3f 	bl	8004232 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI4_MspInit 1 */

  }

}
 8002db4:	bf00      	nop
 8002db6:	37e8      	adds	r7, #232	@ 0xe8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40013400 	.word	0x40013400
 8002dc0:	58024400 	.word	0x58024400
 8002dc4:	58021000 	.word	0x58021000
 8002dc8:	240003d4 	.word	0x240003d4
 8002dcc:	40020028 	.word	0x40020028
 8002dd0:	2400044c 	.word	0x2400044c
 8002dd4:	40020040 	.word	0x40020040

08002dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ddc:	bf00      	nop
 8002dde:	e7fd      	b.n	8002ddc <NMI_Handler+0x4>

08002de0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002de4:	bf00      	nop
 8002de6:	e7fd      	b.n	8002de4 <HardFault_Handler+0x4>

08002de8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dec:	bf00      	nop
 8002dee:	e7fd      	b.n	8002dec <MemManage_Handler+0x4>

08002df0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002df4:	bf00      	nop
 8002df6:	e7fd      	b.n	8002df4 <BusFault_Handler+0x4>

08002df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dfc:	bf00      	nop
 8002dfe:	e7fd      	b.n	8002dfc <UsageFault_Handler+0x4>

08002e00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e04:	bf00      	nop
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e12:	bf00      	nop
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e20:	bf00      	nop
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e2e:	f000 f9a1 	bl	8003174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e32:	bf00      	nop
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8002e3c:	4802      	ldr	r0, [pc, #8]	@ (8002e48 <DMA1_Stream0_IRQHandler+0x10>)
 8002e3e:	f003 f8dd 	bl	8005ffc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002e42:	bf00      	nop
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	24000280 	.word	0x24000280

08002e4c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8002e50:	4802      	ldr	r0, [pc, #8]	@ (8002e5c <DMA1_Stream1_IRQHandler+0x10>)
 8002e52:	f003 f8d3 	bl	8005ffc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002e56:	bf00      	nop
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	240003d4 	.word	0x240003d4

08002e60 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8002e64:	4802      	ldr	r0, [pc, #8]	@ (8002e70 <DMA1_Stream2_IRQHandler+0x10>)
 8002e66:	f003 f8c9 	bl	8005ffc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002e6a:	bf00      	nop
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	2400044c 	.word	0x2400044c

08002e74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(nIRQ_Pin);
 8002e78:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002e7c:	f005 fad1 	bl	8008422 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e80:	bf00      	nop
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <OTG_HS_EP1_OUT_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 Out global interrupt.
  */
void OTG_HS_EP1_OUT_IRQHandler(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002e88:	4802      	ldr	r0, [pc, #8]	@ (8002e94 <OTG_HS_EP1_OUT_IRQHandler+0x10>)
 8002e8a:	f006 fb75 	bl	8009578 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_OUT_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_OUT_IRQn 1 */
}
 8002e8e:	bf00      	nop
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	240019b0 	.word	0x240019b0

08002e98 <OTG_HS_EP1_IN_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS End Point 1 In global interrupt.
  */
void OTG_HS_EP1_IN_IRQHandler(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 0 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002e9c:	4802      	ldr	r0, [pc, #8]	@ (8002ea8 <OTG_HS_EP1_IN_IRQHandler+0x10>)
 8002e9e:	f006 fb6b 	bl	8009578 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_EP1_IN_IRQn 1 */

  /* USER CODE END OTG_HS_EP1_IN_IRQn 1 */
}
 8002ea2:	bf00      	nop
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	240019b0 	.word	0x240019b0

08002eac <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002eb0:	4802      	ldr	r0, [pc, #8]	@ (8002ebc <OTG_HS_IRQHandler+0x10>)
 8002eb2:	f006 fb61 	bl	8009578 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002eb6:	bf00      	nop
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	240019b0 	.word	0x240019b0

08002ec0 <DCMI_PSSI_IRQHandler>:

/**
  * @brief This function handles DCMI and PSSI global interrupt.
  */
void DCMI_PSSI_IRQHandler(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_PSSI_IRQn 0 */

  /* USER CODE END DCMI_PSSI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8002ec4:	4802      	ldr	r0, [pc, #8]	@ (8002ed0 <DCMI_PSSI_IRQHandler+0x10>)
 8002ec6:	f001 fbe3 	bl	8004690 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_PSSI_IRQn 1 */

  /* USER CODE END DCMI_PSSI_IRQn 1 */
}
 8002eca:	bf00      	nop
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	24000230 	.word	0x24000230

08002ed4 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8002ed8:	4802      	ldr	r0, [pc, #8]	@ (8002ee4 <SPI4_IRQHandler+0x10>)
 8002eda:	f00b ff5f 	bl	800ed9c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 8002ede:	bf00      	nop
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	2400034c 	.word	0x2400034c

08002ee8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002eec:	4b3e      	ldr	r3, [pc, #248]	@ (8002fe8 <SystemInit+0x100>)
 8002eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef2:	4a3d      	ldr	r2, [pc, #244]	@ (8002fe8 <SystemInit+0x100>)
 8002ef4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ef8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002efc:	4b3b      	ldr	r3, [pc, #236]	@ (8002fec <SystemInit+0x104>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 030f 	and.w	r3, r3, #15
 8002f04:	2b02      	cmp	r3, #2
 8002f06:	d807      	bhi.n	8002f18 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002f08:	4b38      	ldr	r3, [pc, #224]	@ (8002fec <SystemInit+0x104>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f023 030f 	bic.w	r3, r3, #15
 8002f10:	4a36      	ldr	r2, [pc, #216]	@ (8002fec <SystemInit+0x104>)
 8002f12:	f043 0303 	orr.w	r3, r3, #3
 8002f16:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002f18:	4b35      	ldr	r3, [pc, #212]	@ (8002ff0 <SystemInit+0x108>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a34      	ldr	r2, [pc, #208]	@ (8002ff0 <SystemInit+0x108>)
 8002f1e:	f043 0301 	orr.w	r3, r3, #1
 8002f22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002f24:	4b32      	ldr	r3, [pc, #200]	@ (8002ff0 <SystemInit+0x108>)
 8002f26:	2200      	movs	r2, #0
 8002f28:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002f2a:	4b31      	ldr	r3, [pc, #196]	@ (8002ff0 <SystemInit+0x108>)
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	4930      	ldr	r1, [pc, #192]	@ (8002ff0 <SystemInit+0x108>)
 8002f30:	4b30      	ldr	r3, [pc, #192]	@ (8002ff4 <SystemInit+0x10c>)
 8002f32:	4013      	ands	r3, r2
 8002f34:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002f36:	4b2d      	ldr	r3, [pc, #180]	@ (8002fec <SystemInit+0x104>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 030c 	and.w	r3, r3, #12
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d007      	beq.n	8002f52 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002f42:	4b2a      	ldr	r3, [pc, #168]	@ (8002fec <SystemInit+0x104>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f023 030f 	bic.w	r3, r3, #15
 8002f4a:	4a28      	ldr	r2, [pc, #160]	@ (8002fec <SystemInit+0x104>)
 8002f4c:	f043 0303 	orr.w	r3, r3, #3
 8002f50:	6013      	str	r3, [r2, #0]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
#else
  /* Reset CDCFGR1 register */
  RCC->CDCFGR1 = 0x00000000;
 8002f52:	4b27      	ldr	r3, [pc, #156]	@ (8002ff0 <SystemInit+0x108>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	619a      	str	r2, [r3, #24]

  /* Reset CDCFGR2 register */
  RCC->CDCFGR2 = 0x00000000;
 8002f58:	4b25      	ldr	r3, [pc, #148]	@ (8002ff0 <SystemInit+0x108>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	61da      	str	r2, [r3, #28]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
 8002f5e:	4b24      	ldr	r3, [pc, #144]	@ (8002ff0 <SystemInit+0x108>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	621a      	str	r2, [r3, #32]
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002f64:	4b22      	ldr	r3, [pc, #136]	@ (8002ff0 <SystemInit+0x108>)
 8002f66:	4a24      	ldr	r2, [pc, #144]	@ (8002ff8 <SystemInit+0x110>)
 8002f68:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002f6a:	4b21      	ldr	r3, [pc, #132]	@ (8002ff0 <SystemInit+0x108>)
 8002f6c:	4a23      	ldr	r2, [pc, #140]	@ (8002ffc <SystemInit+0x114>)
 8002f6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002f70:	4b1f      	ldr	r3, [pc, #124]	@ (8002ff0 <SystemInit+0x108>)
 8002f72:	4a23      	ldr	r2, [pc, #140]	@ (8003000 <SystemInit+0x118>)
 8002f74:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002f76:	4b1e      	ldr	r3, [pc, #120]	@ (8002ff0 <SystemInit+0x108>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002f7c:	4b1c      	ldr	r3, [pc, #112]	@ (8002ff0 <SystemInit+0x108>)
 8002f7e:	4a20      	ldr	r2, [pc, #128]	@ (8003000 <SystemInit+0x118>)
 8002f80:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002f82:	4b1b      	ldr	r3, [pc, #108]	@ (8002ff0 <SystemInit+0x108>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002f88:	4b19      	ldr	r3, [pc, #100]	@ (8002ff0 <SystemInit+0x108>)
 8002f8a:	4a1d      	ldr	r2, [pc, #116]	@ (8003000 <SystemInit+0x118>)
 8002f8c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002f8e:	4b18      	ldr	r3, [pc, #96]	@ (8002ff0 <SystemInit+0x108>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002f94:	4b16      	ldr	r3, [pc, #88]	@ (8002ff0 <SystemInit+0x108>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a15      	ldr	r2, [pc, #84]	@ (8002ff0 <SystemInit+0x108>)
 8002f9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f9e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002fa0:	4b13      	ldr	r3, [pc, #76]	@ (8002ff0 <SystemInit+0x108>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8002fa6:	4b12      	ldr	r3, [pc, #72]	@ (8002ff0 <SystemInit+0x108>)
 8002fa8:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002fac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d113      	bne.n	8002fdc <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8002ff0 <SystemInit+0x108>)
 8002fb6:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002fba:	4a0d      	ldr	r2, [pc, #52]	@ (8002ff0 <SystemInit+0x108>)
 8002fbc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002fc0:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8003004 <SystemInit+0x11c>)
 8002fc6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002fca:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8002fcc:	4b08      	ldr	r3, [pc, #32]	@ (8002ff0 <SystemInit+0x108>)
 8002fce:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8002fd2:	4a07      	ldr	r2, [pc, #28]	@ (8002ff0 <SystemInit+0x108>)
 8002fd4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002fd8:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002fdc:	bf00      	nop
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	e000ed00 	.word	0xe000ed00
 8002fec:	52002000 	.word	0x52002000
 8002ff0:	58024400 	.word	0x58024400
 8002ff4:	eaf6ed7f 	.word	0xeaf6ed7f
 8002ff8:	02020200 	.word	0x02020200
 8002ffc:	01ff0000 	.word	0x01ff0000
 8003000:	01010280 	.word	0x01010280
 8003004:	52004000 	.word	0x52004000

08003008 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800300c:	4b09      	ldr	r3, [pc, #36]	@ (8003034 <ExitRun0Mode+0x2c>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	4a08      	ldr	r2, [pc, #32]	@ (8003034 <ExitRun0Mode+0x2c>)
 8003012:	f043 0302 	orr.w	r3, r3, #2
 8003016:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8003018:	bf00      	nop
 800301a:	4b06      	ldr	r3, [pc, #24]	@ (8003034 <ExitRun0Mode+0x2c>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0f9      	beq.n	800301a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8003026:	bf00      	nop
 8003028:	bf00      	nop
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	58024800 	.word	0x58024800

08003038 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003038:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8003074 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 800303c:	f7ff ffe4 	bl	8003008 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003040:	f7ff ff52 	bl	8002ee8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003044:	480c      	ldr	r0, [pc, #48]	@ (8003078 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003046:	490d      	ldr	r1, [pc, #52]	@ (800307c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003048:	4a0d      	ldr	r2, [pc, #52]	@ (8003080 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800304a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800304c:	e002      	b.n	8003054 <LoopCopyDataInit>

0800304e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800304e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003052:	3304      	adds	r3, #4

08003054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003058:	d3f9      	bcc.n	800304e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800305a:	4a0a      	ldr	r2, [pc, #40]	@ (8003084 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800305c:	4c0a      	ldr	r4, [pc, #40]	@ (8003088 <LoopFillZerobss+0x22>)
  movs r3, #0
 800305e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003060:	e001      	b.n	8003066 <LoopFillZerobss>

08003062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003064:	3204      	adds	r2, #4

08003066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003068:	d3fb      	bcc.n	8003062 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800306a:	f010 fa61 	bl	8013530 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800306e:	f7fd fbc9 	bl	8000804 <main>
  bx  lr
 8003072:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003074:	24100000 	.word	0x24100000
  ldr r0, =_sdata
 8003078:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800307c:	24000108 	.word	0x24000108
  ldr r2, =_sidata
 8003080:	08013b24 	.word	0x08013b24
  ldr r2, =_sbss
 8003084:	24000108 	.word	0x24000108
  ldr r4, =_ebss
 8003088:	240020b4 	.word	0x240020b4

0800308c <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800308c:	e7fe      	b.n	800308c <ADC_IRQHandler>
	...

08003090 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003096:	2003      	movs	r0, #3
 8003098:	f001 f8a6 	bl	80041e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800309c:	f008 fa68 	bl	800b570 <HAL_RCC_GetSysClockFreq>
 80030a0:	4602      	mov	r2, r0
 80030a2:	4b15      	ldr	r3, [pc, #84]	@ (80030f8 <HAL_Init+0x68>)
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	0a1b      	lsrs	r3, r3, #8
 80030a8:	f003 030f 	and.w	r3, r3, #15
 80030ac:	4913      	ldr	r1, [pc, #76]	@ (80030fc <HAL_Init+0x6c>)
 80030ae:	5ccb      	ldrb	r3, [r1, r3]
 80030b0:	f003 031f 	and.w	r3, r3, #31
 80030b4:	fa22 f303 	lsr.w	r3, r2, r3
 80030b8:	607b      	str	r3, [r7, #4]

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 80030ba:	4b0f      	ldr	r3, [pc, #60]	@ (80030f8 <HAL_Init+0x68>)
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	4a0e      	ldr	r2, [pc, #56]	@ (80030fc <HAL_Init+0x6c>)
 80030c4:	5cd3      	ldrb	r3, [r2, r3]
 80030c6:	f003 031f 	and.w	r3, r3, #31
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	fa22 f303 	lsr.w	r3, r2, r3
 80030d0:	4a0b      	ldr	r2, [pc, #44]	@ (8003100 <HAL_Init+0x70>)
 80030d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030d4:	4a0b      	ldr	r2, [pc, #44]	@ (8003104 <HAL_Init+0x74>)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030da:	200f      	movs	r0, #15
 80030dc:	f000 f814 	bl	8003108 <HAL_InitTick>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e002      	b.n	80030f0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80030ea:	f7ff fb01 	bl	80026f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	58024400 	.word	0x58024400
 80030fc:	08013b04 	.word	0x08013b04
 8003100:	24000008 	.word	0x24000008
 8003104:	24000004 	.word	0x24000004

08003108 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003110:	4b15      	ldr	r3, [pc, #84]	@ (8003168 <HAL_InitTick+0x60>)
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e021      	b.n	8003160 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800311c:	4b13      	ldr	r3, [pc, #76]	@ (800316c <HAL_InitTick+0x64>)
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	4b11      	ldr	r3, [pc, #68]	@ (8003168 <HAL_InitTick+0x60>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	4619      	mov	r1, r3
 8003126:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800312a:	fbb3 f3f1 	udiv	r3, r3, r1
 800312e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003132:	4618      	mov	r0, r3
 8003134:	f001 f88b 	bl	800424e <HAL_SYSTICK_Config>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e00e      	b.n	8003160 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b0f      	cmp	r3, #15
 8003146:	d80a      	bhi.n	800315e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003148:	2200      	movs	r2, #0
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	f04f 30ff 	mov.w	r0, #4294967295
 8003150:	f001 f855 	bl	80041fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003154:	4a06      	ldr	r2, [pc, #24]	@ (8003170 <HAL_InitTick+0x68>)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800315a:	2300      	movs	r3, #0
 800315c:	e000      	b.n	8003160 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
}
 8003160:	4618      	mov	r0, r3
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	24000010 	.word	0x24000010
 800316c:	24000004 	.word	0x24000004
 8003170:	2400000c 	.word	0x2400000c

08003174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003178:	4b06      	ldr	r3, [pc, #24]	@ (8003194 <HAL_IncTick+0x20>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	461a      	mov	r2, r3
 800317e:	4b06      	ldr	r3, [pc, #24]	@ (8003198 <HAL_IncTick+0x24>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4413      	add	r3, r2
 8003184:	4a04      	ldr	r2, [pc, #16]	@ (8003198 <HAL_IncTick+0x24>)
 8003186:	6013      	str	r3, [r2, #0]
}
 8003188:	bf00      	nop
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	24000010 	.word	0x24000010
 8003198:	240004cc 	.word	0x240004cc

0800319c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  return uwTick;
 80031a0:	4b03      	ldr	r3, [pc, #12]	@ (80031b0 <HAL_GetTick+0x14>)
 80031a2:	681b      	ldr	r3, [r3, #0]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	240004cc 	.word	0x240004cc

080031b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031bc:	f7ff ffee 	bl	800319c <HAL_GetTick>
 80031c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031cc:	d005      	beq.n	80031da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031ce:	4b0a      	ldr	r3, [pc, #40]	@ (80031f8 <HAL_Delay+0x44>)
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	461a      	mov	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4413      	add	r3, r2
 80031d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031da:	bf00      	nop
 80031dc:	f7ff ffde 	bl	800319c <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d8f7      	bhi.n	80031dc <HAL_Delay+0x28>
  {
  }
}
 80031ec:	bf00      	nop
 80031ee:	bf00      	nop
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	24000010 	.word	0x24000010

080031fc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
 8003204:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	431a      	orrs	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	609a      	str	r2, [r3, #8]
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
 800322a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	431a      	orrs	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	609a      	str	r2, [r3, #8]
}
 800323c:	bf00      	nop
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8003258:	4618      	mov	r0, r3
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8003264:	b480      	push	{r7}
 8003266:	b087      	sub	sp, #28
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003274:	2b00      	cmp	r3, #0
 8003276:	d107      	bne.n	8003288 <LL_ADC_SetChannelPreselection+0x24>
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	0e9b      	lsrs	r3, r3, #26
 800327c:	f003 031f 	and.w	r3, r3, #31
 8003280:	2201      	movs	r2, #1
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	e015      	b.n	80032b4 <LL_ADC_SetChannelPreselection+0x50>
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	fa93 f3a3 	rbit	r3, r3
 8003292:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 800329e:	2320      	movs	r3, #32
 80032a0:	e003      	b.n	80032aa <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	fab3 f383 	clz	r3, r3
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	f003 031f 	and.w	r3, r3, #31
 80032ae:	2201      	movs	r2, #1
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	69d2      	ldr	r2, [r2, #28]
 80032b8:	431a      	orrs	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 80032be:	bf00      	nop
 80032c0:	371c      	adds	r7, #28
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b087      	sub	sp, #28
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	60f8      	str	r0, [r7, #12]
 80032d2:	60b9      	str	r1, [r7, #8]
 80032d4:	607a      	str	r2, [r7, #4]
 80032d6:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	3360      	adds	r3, #96	@ 0x60
 80032dc:	461a      	mov	r2, r3
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	430b      	orrs	r3, r1
 80032f8:	431a      	orrs	r2, r3
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80032fe:	bf00      	nop
 8003300:	371c      	adds	r7, #28
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800330a:	b480      	push	{r7}
 800330c:	b085      	sub	sp, #20
 800330e:	af00      	add	r7, sp, #0
 8003310:	60f8      	str	r0, [r7, #12]
 8003312:	60b9      	str	r1, [r7, #8]
 8003314:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	f003 031f 	and.w	r3, r3, #31
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	fa01 f303 	lsl.w	r3, r1, r3
 800332a:	431a      	orrs	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	611a      	str	r2, [r3, #16]
}
 8003330:	bf00      	nop
 8003332:	3714      	adds	r7, #20
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800333c:	b480      	push	{r7}
 800333e:	b087      	sub	sp, #28
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	3360      	adds	r3, #96	@ 0x60
 800334c:	461a      	mov	r2, r3
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	4413      	add	r3, r2
 8003354:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	431a      	orrs	r2, r3
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	601a      	str	r2, [r3, #0]
  }
}
 8003366:	bf00      	nop
 8003368:	371c      	adds	r7, #28
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003372:	b480      	push	{r7}
 8003374:	b087      	sub	sp, #28
 8003376:	af00      	add	r7, sp, #0
 8003378:	60f8      	str	r0, [r7, #12]
 800337a:	60b9      	str	r1, [r7, #8]
 800337c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	3330      	adds	r3, #48	@ 0x30
 8003382:	461a      	mov	r2, r3
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	0a1b      	lsrs	r3, r3, #8
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	f003 030c 	and.w	r3, r3, #12
 800338e:	4413      	add	r3, r2
 8003390:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	f003 031f 	and.w	r3, r3, #31
 800339c:	211f      	movs	r1, #31
 800339e:	fa01 f303 	lsl.w	r3, r1, r3
 80033a2:	43db      	mvns	r3, r3
 80033a4:	401a      	ands	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	0e9b      	lsrs	r3, r3, #26
 80033aa:	f003 011f 	and.w	r1, r3, #31
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	f003 031f 	and.w	r3, r3, #31
 80033b4:	fa01 f303 	lsl.w	r3, r1, r3
 80033b8:	431a      	orrs	r2, r3
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80033be:	bf00      	nop
 80033c0:	371c      	adds	r7, #28
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b087      	sub	sp, #28
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	60f8      	str	r0, [r7, #12]
 80033d2:	60b9      	str	r1, [r7, #8]
 80033d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	3314      	adds	r3, #20
 80033da:	461a      	mov	r2, r3
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	0e5b      	lsrs	r3, r3, #25
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	f003 0304 	and.w	r3, r3, #4
 80033e6:	4413      	add	r3, r2
 80033e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	0d1b      	lsrs	r3, r3, #20
 80033f2:	f003 031f 	and.w	r3, r3, #31
 80033f6:	2107      	movs	r1, #7
 80033f8:	fa01 f303 	lsl.w	r3, r1, r3
 80033fc:	43db      	mvns	r3, r3
 80033fe:	401a      	ands	r2, r3
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	0d1b      	lsrs	r3, r3, #20
 8003404:	f003 031f 	and.w	r3, r3, #31
 8003408:	6879      	ldr	r1, [r7, #4]
 800340a:	fa01 f303 	lsl.w	r3, r1, r3
 800340e:	431a      	orrs	r2, r3
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003414:	bf00      	nop
 8003416:	371c      	adds	r7, #28
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003438:	43db      	mvns	r3, r3
 800343a:	401a      	ands	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f003 0318 	and.w	r3, r3, #24
 8003442:	4908      	ldr	r1, [pc, #32]	@ (8003464 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003444:	40d9      	lsrs	r1, r3
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	400b      	ands	r3, r1
 800344a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800344e:	431a      	orrs	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003456:	bf00      	nop
 8003458:	3714      	adds	r7, #20
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	000fffff 	.word	0x000fffff

08003468 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	4b04      	ldr	r3, [pc, #16]	@ (8003488 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003476:	4013      	ands	r3, r2
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	6093      	str	r3, [r2, #8]
}
 800347c:	bf00      	nop
 800347e:	370c      	adds	r7, #12
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	5fffffc0 	.word	0x5fffffc0

0800348c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800349c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034a0:	d101      	bne.n	80034a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80034a2:	2301      	movs	r3, #1
 80034a4:	e000      	b.n	80034a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	689a      	ldr	r2, [r3, #8]
 80034c0:	4b05      	ldr	r3, [pc, #20]	@ (80034d8 <LL_ADC_EnableInternalRegulator+0x24>)
 80034c2:	4013      	ands	r3, r2
 80034c4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80034cc:	bf00      	nop
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr
 80034d8:	6fffffc0 	.word	0x6fffffc0

080034dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689b      	ldr	r3, [r3, #8]
 80034e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034f0:	d101      	bne.n	80034f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80034f2:	2301      	movs	r3, #1
 80034f4:	e000      	b.n	80034f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b01      	cmp	r3, #1
 8003516:	d101      	bne.n	800351c <LL_ADC_IsEnabled+0x18>
 8003518:	2301      	movs	r3, #1
 800351a:	e000      	b.n	800351e <LL_ADC_IsEnabled+0x1a>
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800352a:	b480      	push	{r7}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	f003 0304 	and.w	r3, r3, #4
 800353a:	2b04      	cmp	r3, #4
 800353c:	d101      	bne.n	8003542 <LL_ADC_REG_IsConversionOngoing+0x18>
 800353e:	2301      	movs	r3, #1
 8003540:	e000      	b.n	8003544 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f003 0308 	and.w	r3, r3, #8
 8003560:	2b08      	cmp	r3, #8
 8003562:	d101      	bne.n	8003568 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003564:	2301      	movs	r3, #1
 8003566:	e000      	b.n	800356a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
	...

08003578 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003578:	b590      	push	{r4, r7, lr}
 800357a:	b089      	sub	sp, #36	@ 0x24
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003580:	2300      	movs	r3, #0
 8003582:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003584:	2300      	movs	r3, #0
 8003586:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d101      	bne.n	8003592 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e138      	b.n	8003804 <HAL_ADC_Init+0x28c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800359c:	2b00      	cmp	r3, #0
 800359e:	d109      	bne.n	80035b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7ff f8bf 	bl	8002724 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff ff67 	bl	800348c <LL_ADC_IsDeepPowerDownEnabled>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d004      	beq.n	80035ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff ff4d 	bl	8003468 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff ff82 	bl	80034dc <LL_ADC_IsInternalRegulatorEnabled>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d114      	bne.n	8003608 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff ff66 	bl	80034b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035e8:	4b88      	ldr	r3, [pc, #544]	@ (800380c <HAL_ADC_Init+0x294>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	099b      	lsrs	r3, r3, #6
 80035ee:	4a88      	ldr	r2, [pc, #544]	@ (8003810 <HAL_ADC_Init+0x298>)
 80035f0:	fba2 2303 	umull	r2, r3, r2, r3
 80035f4:	099b      	lsrs	r3, r3, #6
 80035f6:	3301      	adds	r3, #1
 80035f8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80035fa:	e002      	b.n	8003602 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	3b01      	subs	r3, #1
 8003600:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1f9      	bne.n	80035fc <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff ff65 	bl	80034dc <LL_ADC_IsInternalRegulatorEnabled>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d10d      	bne.n	8003634 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800361c:	f043 0210 	orr.w	r2, r3, #16
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003628:	f043 0201 	orr.w	r2, r3, #1
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff ff76 	bl	800352a <LL_ADC_REG_IsConversionOngoing>
 800363e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003644:	f003 0310 	and.w	r3, r3, #16
 8003648:	2b00      	cmp	r3, #0
 800364a:	f040 80d2 	bne.w	80037f2 <HAL_ADC_Init+0x27a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	2b00      	cmp	r3, #0
 8003652:	f040 80ce 	bne.w	80037f2 <HAL_ADC_Init+0x27a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800365a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800365e:	f043 0202 	orr.w	r2, r3, #2
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f7ff ff4a 	bl	8003504 <LL_ADC_IsEnabled>
 8003670:	4603      	mov	r3, r0
 8003672:	2b00      	cmp	r3, #0
 8003674:	d110      	bne.n	8003698 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003676:	4867      	ldr	r0, [pc, #412]	@ (8003814 <HAL_ADC_Init+0x29c>)
 8003678:	f7ff ff44 	bl	8003504 <LL_ADC_IsEnabled>
 800367c:	4604      	mov	r4, r0
 800367e:	4866      	ldr	r0, [pc, #408]	@ (8003818 <HAL_ADC_Init+0x2a0>)
 8003680:	f7ff ff40 	bl	8003504 <LL_ADC_IsEnabled>
 8003684:	4603      	mov	r3, r0
 8003686:	4323      	orrs	r3, r4
 8003688:	2b00      	cmp	r3, #0
 800368a:	d105      	bne.n	8003698 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	4619      	mov	r1, r3
 8003692:	4862      	ldr	r0, [pc, #392]	@ (800381c <HAL_ADC_Init+0x2a4>)
 8003694:	f7ff fdb2 	bl	80031fc <LL_ADC_SetCommonClock>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
#if defined(ADC_VER_V5_3)

    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	7d5b      	ldrb	r3, [r3, #21]
 800369c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                    |
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036a2:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                 |
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
                hadc->Init.Overrun                                                    |
 80036a8:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	7f1b      	ldrb	r3, [r3, #28]
 80036ae:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036b0:	4313      	orrs	r3, r2
 80036b2:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	7f1b      	ldrb	r3, [r3, #28]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d106      	bne.n	80036ca <HAL_ADC_Init+0x152>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	3b01      	subs	r3, #1
 80036c2:	045b      	lsls	r3, r3, #17
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d009      	beq.n	80036e6 <HAL_ADC_Init+0x16e>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d6:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036de:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68da      	ldr	r2, [r3, #12]
 80036ec:	4b4c      	ldr	r3, [pc, #304]	@ (8003820 <HAL_ADC_Init+0x2a8>)
 80036ee:	4013      	ands	r3, r2
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	6812      	ldr	r2, [r2, #0]
 80036f4:	69b9      	ldr	r1, [r7, #24]
 80036f6:	430b      	orrs	r3, r1
 80036f8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4618      	mov	r0, r3
 8003700:	f7ff ff13 	bl	800352a <LL_ADC_REG_IsConversionOngoing>
 8003704:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4618      	mov	r0, r3
 800370c:	f7ff ff20 	bl	8003550 <LL_ADC_INJ_IsConversionOngoing>
 8003710:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d14a      	bne.n	80037ae <HAL_ADC_Init+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d147      	bne.n	80037ae <HAL_ADC_Init+0x236>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	7d1b      	ldrb	r3, [r3, #20]
 8003722:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8003728:	4313      	orrs	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	4b3c      	ldr	r3, [pc, #240]	@ (8003824 <HAL_ADC_Init+0x2ac>)
 8003734:	4013      	ands	r3, r2
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	6812      	ldr	r2, [r2, #0]
 800373a:	69b9      	ldr	r1, [r7, #24]
 800373c:	430b      	orrs	r3, r1
 800373e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003746:	2b01      	cmp	r3, #1
 8003748:	d11b      	bne.n	8003782 <HAL_ADC_Init+0x20a>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800374e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	691a      	ldr	r2, [r3, #16]
 8003756:	4b34      	ldr	r3, [pc, #208]	@ (8003828 <HAL_ADC_Init+0x2b0>)
 8003758:	4013      	ands	r3, r2
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800375e:	3a01      	subs	r2, #1
 8003760:	0411      	lsls	r1, r2, #16
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003766:	4311      	orrs	r1, r2
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800376c:	4311      	orrs	r1, r2
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003772:	430a      	orrs	r2, r1
 8003774:	431a      	orrs	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f042 0201 	orr.w	r2, r2, #1
 800377e:	611a      	str	r2, [r3, #16]
 8003780:	e007      	b.n	8003792 <HAL_ADC_Init+0x21a>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	691a      	ldr	r2, [r3, #16]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 0201 	bic.w	r2, r2, #1
 8003790:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 fabd 	bl	8003d28 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d10c      	bne.n	80037d0 <HAL_ADC_Init+0x258>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037bc:	f023 010f 	bic.w	r1, r3, #15
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	1e5a      	subs	r2, r3, #1
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80037ce:	e007      	b.n	80037e0 <HAL_ADC_Init+0x268>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 020f 	bic.w	r2, r2, #15
 80037de:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037e4:	f023 0303 	bic.w	r3, r3, #3
 80037e8:	f043 0201 	orr.w	r2, r3, #1
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	655a      	str	r2, [r3, #84]	@ 0x54
 80037f0:	e007      	b.n	8003802 <HAL_ADC_Init+0x28a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037f6:	f043 0210 	orr.w	r2, r3, #16
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003802:	7ffb      	ldrb	r3, [r7, #31]
}
 8003804:	4618      	mov	r0, r3
 8003806:	3724      	adds	r7, #36	@ 0x24
 8003808:	46bd      	mov	sp, r7
 800380a:	bd90      	pop	{r4, r7, pc}
 800380c:	24000004 	.word	0x24000004
 8003810:	053e2d63 	.word	0x053e2d63
 8003814:	40022000 	.word	0x40022000
 8003818:	40022100 	.word	0x40022100
 800381c:	40022300 	.word	0x40022300
 8003820:	fff0c003 	.word	0xfff0c003
 8003824:	ffffbffc 	.word	0xffffbffc
 8003828:	fc00f81e 	.word	0xfc00f81e

0800382c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800382c:	b590      	push	{r4, r7, lr}
 800382e:	b08d      	sub	sp, #52	@ 0x34
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800383c:	2300      	movs	r3, #0
 800383e:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	4a5b      	ldr	r2, [pc, #364]	@ (80039b4 <HAL_ADC_ConfigChannel+0x188>)
 8003846:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800384e:	2b01      	cmp	r3, #1
 8003850:	d101      	bne.n	8003856 <HAL_ADC_ConfigChannel+0x2a>
 8003852:	2302      	movs	r3, #2
 8003854:	e263      	b.n	8003d1e <HAL_ADC_ConfigChannel+0x4f2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2201      	movs	r2, #1
 800385a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4618      	mov	r0, r3
 8003864:	f7ff fe61 	bl	800352a <LL_ADC_REG_IsConversionOngoing>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	f040 8248 	bne.w	8003d00 <HAL_ADC_ConfigChannel+0x4d4>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2b00      	cmp	r3, #0
 8003876:	db2c      	blt.n	80038d2 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003880:	2b00      	cmp	r3, #0
 8003882:	d108      	bne.n	8003896 <HAL_ADC_ConfigChannel+0x6a>
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	0e9b      	lsrs	r3, r3, #26
 800388a:	f003 031f 	and.w	r3, r3, #31
 800388e:	2201      	movs	r2, #1
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	e016      	b.n	80038c4 <HAL_ADC_ConfigChannel+0x98>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	fa93 f3a3 	rbit	r3, r3
 80038a2:	613b      	str	r3, [r7, #16]
  return result;
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 80038ae:	2320      	movs	r3, #32
 80038b0:	e003      	b.n	80038ba <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	fab3 f383 	clz	r3, r3
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	f003 031f 	and.w	r3, r3, #31
 80038be:	2201      	movs	r2, #1
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6812      	ldr	r2, [r2, #0]
 80038c8:	69d1      	ldr	r1, [r2, #28]
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6812      	ldr	r2, [r2, #0]
 80038ce:	430b      	orrs	r3, r1
 80038d0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6818      	ldr	r0, [r3, #0]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	6859      	ldr	r1, [r3, #4]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	461a      	mov	r2, r3
 80038e0:	f7ff fd47 	bl	8003372 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff fe1e 	bl	800352a <LL_ADC_REG_IsConversionOngoing>
 80038ee:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff fe2b 	bl	8003550 <LL_ADC_INJ_IsConversionOngoing>
 80038fa:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80038fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f040 80a2 	bne.w	8003a48 <HAL_ADC_ConfigChannel+0x21c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003906:	2b00      	cmp	r3, #0
 8003908:	f040 809e 	bne.w	8003a48 <HAL_ADC_ConfigChannel+0x21c>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6818      	ldr	r0, [r3, #0]
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	6819      	ldr	r1, [r3, #0]
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	461a      	mov	r2, r3
 800391a:	f7ff fd56 	bl	80033ca <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f003 0310 	and.w	r3, r3, #16
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10b      	bne.n	8003944 <HAL_ADC_ConfigChannel+0x118>
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	695a      	ldr	r2, [r3, #20]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	089b      	lsrs	r3, r3, #2
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	fa02 f303 	lsl.w	r3, r2, r3
 8003942:	e00a      	b.n	800395a <HAL_ADC_ConfigChannel+0x12e>
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	695a      	ldr	r2, [r3, #20]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	089b      	lsrs	r3, r3, #2
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	fa02 f303 	lsl.w	r3, r2, r3
 800395a:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	2b04      	cmp	r3, #4
 8003962:	d029      	beq.n	80039b8 <HAL_ADC_ConfigChannel+0x18c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6818      	ldr	r0, [r3, #0]
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	6919      	ldr	r1, [r3, #16]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	6a3b      	ldr	r3, [r7, #32]
 8003972:	f7ff fcaa 	bl	80032ca <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6818      	ldr	r0, [r3, #0]
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	6919      	ldr	r1, [r3, #16]
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	7e5b      	ldrb	r3, [r3, #25]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d102      	bne.n	800398c <HAL_ADC_ConfigChannel+0x160>
 8003986:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800398a:	e000      	b.n	800398e <HAL_ADC_ConfigChannel+0x162>
 800398c:	2300      	movs	r3, #0
 800398e:	461a      	mov	r2, r3
 8003990:	f7ff fcd4 	bl	800333c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6818      	ldr	r0, [r3, #0]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	6919      	ldr	r1, [r3, #16]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	7e1b      	ldrb	r3, [r3, #24]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d102      	bne.n	80039aa <HAL_ADC_ConfigChannel+0x17e>
 80039a4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80039a8:	e000      	b.n	80039ac <HAL_ADC_ConfigChannel+0x180>
 80039aa:	2300      	movs	r3, #0
 80039ac:	461a      	mov	r2, r3
 80039ae:	f7ff fcac 	bl	800330a <LL_ADC_SetDataRightShift>
 80039b2:	e049      	b.n	8003a48 <HAL_ADC_ConfigChannel+0x21c>
 80039b4:	47ff0000 	.word	0x47ff0000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	069b      	lsls	r3, r3, #26
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d107      	bne.n	80039dc <HAL_ADC_ConfigChannel+0x1b0>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80039da:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	069b      	lsls	r3, r3, #26
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d107      	bne.n	8003a00 <HAL_ADC_ConfigChannel+0x1d4>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80039fe:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003a06:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	069b      	lsls	r3, r3, #26
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d107      	bne.n	8003a24 <HAL_ADC_ConfigChannel+0x1f8>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003a22:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a2a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	069b      	lsls	r3, r3, #26
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d107      	bne.n	8003a48 <HAL_ADC_ConfigChannel+0x21c>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003a46:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	f7ff fd59 	bl	8003504 <LL_ADC_IsEnabled>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f040 815c 	bne.w	8003d12 <HAL_ADC_ConfigChannel+0x4e6>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6818      	ldr	r0, [r3, #0]
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	6819      	ldr	r1, [r3, #0]
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	461a      	mov	r2, r3
 8003a68:	f7ff fcda 	bl	8003420 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	4a89      	ldr	r2, [pc, #548]	@ (8003c98 <HAL_ADC_ConfigChannel+0x46c>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	f040 809a 	bne.w	8003bac <HAL_ADC_ConfigChannel+0x380>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4986      	ldr	r1, [pc, #536]	@ (8003c9c <HAL_ADC_ConfigChannel+0x470>)
 8003a82:	428b      	cmp	r3, r1
 8003a84:	d147      	bne.n	8003b16 <HAL_ADC_ConfigChannel+0x2ea>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4985      	ldr	r1, [pc, #532]	@ (8003ca0 <HAL_ADC_ConfigChannel+0x474>)
 8003a8c:	428b      	cmp	r3, r1
 8003a8e:	d040      	beq.n	8003b12 <HAL_ADC_ConfigChannel+0x2e6>
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4983      	ldr	r1, [pc, #524]	@ (8003ca4 <HAL_ADC_ConfigChannel+0x478>)
 8003a96:	428b      	cmp	r3, r1
 8003a98:	d039      	beq.n	8003b0e <HAL_ADC_ConfigChannel+0x2e2>
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4982      	ldr	r1, [pc, #520]	@ (8003ca8 <HAL_ADC_ConfigChannel+0x47c>)
 8003aa0:	428b      	cmp	r3, r1
 8003aa2:	d032      	beq.n	8003b0a <HAL_ADC_ConfigChannel+0x2de>
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4980      	ldr	r1, [pc, #512]	@ (8003cac <HAL_ADC_ConfigChannel+0x480>)
 8003aaa:	428b      	cmp	r3, r1
 8003aac:	d02b      	beq.n	8003b06 <HAL_ADC_ConfigChannel+0x2da>
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	497f      	ldr	r1, [pc, #508]	@ (8003cb0 <HAL_ADC_ConfigChannel+0x484>)
 8003ab4:	428b      	cmp	r3, r1
 8003ab6:	d024      	beq.n	8003b02 <HAL_ADC_ConfigChannel+0x2d6>
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	497d      	ldr	r1, [pc, #500]	@ (8003cb4 <HAL_ADC_ConfigChannel+0x488>)
 8003abe:	428b      	cmp	r3, r1
 8003ac0:	d01d      	beq.n	8003afe <HAL_ADC_ConfigChannel+0x2d2>
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	497c      	ldr	r1, [pc, #496]	@ (8003cb8 <HAL_ADC_ConfigChannel+0x48c>)
 8003ac8:	428b      	cmp	r3, r1
 8003aca:	d016      	beq.n	8003afa <HAL_ADC_ConfigChannel+0x2ce>
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	497a      	ldr	r1, [pc, #488]	@ (8003cbc <HAL_ADC_ConfigChannel+0x490>)
 8003ad2:	428b      	cmp	r3, r1
 8003ad4:	d00f      	beq.n	8003af6 <HAL_ADC_ConfigChannel+0x2ca>
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4979      	ldr	r1, [pc, #484]	@ (8003cc0 <HAL_ADC_ConfigChannel+0x494>)
 8003adc:	428b      	cmp	r3, r1
 8003ade:	d008      	beq.n	8003af2 <HAL_ADC_ConfigChannel+0x2c6>
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4977      	ldr	r1, [pc, #476]	@ (8003cc4 <HAL_ADC_ConfigChannel+0x498>)
 8003ae6:	428b      	cmp	r3, r1
 8003ae8:	d101      	bne.n	8003aee <HAL_ADC_ConfigChannel+0x2c2>
 8003aea:	4b77      	ldr	r3, [pc, #476]	@ (8003cc8 <HAL_ADC_ConfigChannel+0x49c>)
 8003aec:	e05a      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x378>
 8003aee:	2300      	movs	r3, #0
 8003af0:	e058      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x378>
 8003af2:	4b76      	ldr	r3, [pc, #472]	@ (8003ccc <HAL_ADC_ConfigChannel+0x4a0>)
 8003af4:	e056      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x378>
 8003af6:	4b76      	ldr	r3, [pc, #472]	@ (8003cd0 <HAL_ADC_ConfigChannel+0x4a4>)
 8003af8:	e054      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x378>
 8003afa:	4b70      	ldr	r3, [pc, #448]	@ (8003cbc <HAL_ADC_ConfigChannel+0x490>)
 8003afc:	e052      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x378>
 8003afe:	4b6e      	ldr	r3, [pc, #440]	@ (8003cb8 <HAL_ADC_ConfigChannel+0x48c>)
 8003b00:	e050      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x378>
 8003b02:	4b74      	ldr	r3, [pc, #464]	@ (8003cd4 <HAL_ADC_ConfigChannel+0x4a8>)
 8003b04:	e04e      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x378>
 8003b06:	4b74      	ldr	r3, [pc, #464]	@ (8003cd8 <HAL_ADC_ConfigChannel+0x4ac>)
 8003b08:	e04c      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x378>
 8003b0a:	4b74      	ldr	r3, [pc, #464]	@ (8003cdc <HAL_ADC_ConfigChannel+0x4b0>)
 8003b0c:	e04a      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x378>
 8003b0e:	4b74      	ldr	r3, [pc, #464]	@ (8003ce0 <HAL_ADC_ConfigChannel+0x4b4>)
 8003b10:	e048      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x378>
 8003b12:	2301      	movs	r3, #1
 8003b14:	e046      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x378>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4972      	ldr	r1, [pc, #456]	@ (8003ce4 <HAL_ADC_ConfigChannel+0x4b8>)
 8003b1c:	428b      	cmp	r3, r1
 8003b1e:	d140      	bne.n	8003ba2 <HAL_ADC_ConfigChannel+0x376>
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	495e      	ldr	r1, [pc, #376]	@ (8003ca0 <HAL_ADC_ConfigChannel+0x474>)
 8003b26:	428b      	cmp	r3, r1
 8003b28:	d039      	beq.n	8003b9e <HAL_ADC_ConfigChannel+0x372>
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	495d      	ldr	r1, [pc, #372]	@ (8003ca4 <HAL_ADC_ConfigChannel+0x478>)
 8003b30:	428b      	cmp	r3, r1
 8003b32:	d032      	beq.n	8003b9a <HAL_ADC_ConfigChannel+0x36e>
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	495b      	ldr	r1, [pc, #364]	@ (8003ca8 <HAL_ADC_ConfigChannel+0x47c>)
 8003b3a:	428b      	cmp	r3, r1
 8003b3c:	d02b      	beq.n	8003b96 <HAL_ADC_ConfigChannel+0x36a>
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	495a      	ldr	r1, [pc, #360]	@ (8003cac <HAL_ADC_ConfigChannel+0x480>)
 8003b44:	428b      	cmp	r3, r1
 8003b46:	d024      	beq.n	8003b92 <HAL_ADC_ConfigChannel+0x366>
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4958      	ldr	r1, [pc, #352]	@ (8003cb0 <HAL_ADC_ConfigChannel+0x484>)
 8003b4e:	428b      	cmp	r3, r1
 8003b50:	d01d      	beq.n	8003b8e <HAL_ADC_ConfigChannel+0x362>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4957      	ldr	r1, [pc, #348]	@ (8003cb4 <HAL_ADC_ConfigChannel+0x488>)
 8003b58:	428b      	cmp	r3, r1
 8003b5a:	d016      	beq.n	8003b8a <HAL_ADC_ConfigChannel+0x35e>
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4955      	ldr	r1, [pc, #340]	@ (8003cb8 <HAL_ADC_ConfigChannel+0x48c>)
 8003b62:	428b      	cmp	r3, r1
 8003b64:	d00f      	beq.n	8003b86 <HAL_ADC_ConfigChannel+0x35a>
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4954      	ldr	r1, [pc, #336]	@ (8003cbc <HAL_ADC_ConfigChannel+0x490>)
 8003b6c:	428b      	cmp	r3, r1
 8003b6e:	d008      	beq.n	8003b82 <HAL_ADC_ConfigChannel+0x356>
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4953      	ldr	r1, [pc, #332]	@ (8003cc4 <HAL_ADC_ConfigChannel+0x498>)
 8003b76:	428b      	cmp	r3, r1
 8003b78:	d101      	bne.n	8003b7e <HAL_ADC_ConfigChannel+0x352>
 8003b7a:	4b53      	ldr	r3, [pc, #332]	@ (8003cc8 <HAL_ADC_ConfigChannel+0x49c>)
 8003b7c:	e012      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x378>
 8003b7e:	2300      	movs	r3, #0
 8003b80:	e010      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x378>
 8003b82:	4b53      	ldr	r3, [pc, #332]	@ (8003cd0 <HAL_ADC_ConfigChannel+0x4a4>)
 8003b84:	e00e      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x378>
 8003b86:	4b4d      	ldr	r3, [pc, #308]	@ (8003cbc <HAL_ADC_ConfigChannel+0x490>)
 8003b88:	e00c      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x378>
 8003b8a:	4b4b      	ldr	r3, [pc, #300]	@ (8003cb8 <HAL_ADC_ConfigChannel+0x48c>)
 8003b8c:	e00a      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x378>
 8003b8e:	4b51      	ldr	r3, [pc, #324]	@ (8003cd4 <HAL_ADC_ConfigChannel+0x4a8>)
 8003b90:	e008      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x378>
 8003b92:	4b51      	ldr	r3, [pc, #324]	@ (8003cd8 <HAL_ADC_ConfigChannel+0x4ac>)
 8003b94:	e006      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x378>
 8003b96:	4b51      	ldr	r3, [pc, #324]	@ (8003cdc <HAL_ADC_ConfigChannel+0x4b0>)
 8003b98:	e004      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x378>
 8003b9a:	4b51      	ldr	r3, [pc, #324]	@ (8003ce0 <HAL_ADC_ConfigChannel+0x4b4>)
 8003b9c:	e002      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x378>
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e000      	b.n	8003ba4 <HAL_ADC_ConfigChannel+0x378>
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	4610      	mov	r0, r2
 8003ba8:	f7ff fb5c 	bl	8003264 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f280 80ae 	bge.w	8003d12 <HAL_ADC_ConfigChannel+0x4e6>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bb6:	484c      	ldr	r0, [pc, #304]	@ (8003ce8 <HAL_ADC_ConfigChannel+0x4bc>)
 8003bb8:	f7ff fb46 	bl	8003248 <LL_ADC_GetCommonPathInternalCh>
 8003bbc:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bbe:	4837      	ldr	r0, [pc, #220]	@ (8003c9c <HAL_ADC_ConfigChannel+0x470>)
 8003bc0:	f7ff fca0 	bl	8003504 <LL_ADC_IsEnabled>
 8003bc4:	4604      	mov	r4, r0
 8003bc6:	4847      	ldr	r0, [pc, #284]	@ (8003ce4 <HAL_ADC_ConfigChannel+0x4b8>)
 8003bc8:	f7ff fc9c 	bl	8003504 <LL_ADC_IsEnabled>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	4323      	orrs	r3, r4
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d156      	bne.n	8003c82 <HAL_ADC_ConfigChannel+0x456>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a44      	ldr	r2, [pc, #272]	@ (8003cec <HAL_ADC_ConfigChannel+0x4c0>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d123      	bne.n	8003c26 <HAL_ADC_ConfigChannel+0x3fa>
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d11e      	bne.n	8003c26 <HAL_ADC_ConfigChannel+0x3fa>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a3d      	ldr	r2, [pc, #244]	@ (8003ce4 <HAL_ADC_ConfigChannel+0x4b8>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	f040 808f 	bne.w	8003d12 <HAL_ADC_ConfigChannel+0x4e6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	483a      	ldr	r0, [pc, #232]	@ (8003ce8 <HAL_ADC_ConfigChannel+0x4bc>)
 8003bfe:	f7ff fb10 	bl	8003222 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c02:	4b3b      	ldr	r3, [pc, #236]	@ (8003cf0 <HAL_ADC_ConfigChannel+0x4c4>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	099b      	lsrs	r3, r3, #6
 8003c08:	4a3a      	ldr	r2, [pc, #232]	@ (8003cf4 <HAL_ADC_ConfigChannel+0x4c8>)
 8003c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0e:	099b      	lsrs	r3, r3, #6
 8003c10:	3301      	adds	r3, #1
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003c16:	e002      	b.n	8003c1e <HAL_ADC_ConfigChannel+0x3f2>
              {
                wait_loop_index--;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1f9      	bne.n	8003c18 <HAL_ADC_ConfigChannel+0x3ec>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c24:	e075      	b.n	8003d12 <HAL_ADC_ConfigChannel+0x4e6>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a33      	ldr	r2, [pc, #204]	@ (8003cf8 <HAL_ADC_ConfigChannel+0x4cc>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d111      	bne.n	8003c54 <HAL_ADC_ConfigChannel+0x428>
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10c      	bne.n	8003c54 <HAL_ADC_ConfigChannel+0x428>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a29      	ldr	r2, [pc, #164]	@ (8003ce4 <HAL_ADC_ConfigChannel+0x4b8>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d166      	bne.n	8003d12 <HAL_ADC_ConfigChannel+0x4e6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	4826      	ldr	r0, [pc, #152]	@ (8003ce8 <HAL_ADC_ConfigChannel+0x4bc>)
 8003c4e:	f7ff fae8 	bl	8003222 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c52:	e05e      	b.n	8003d12 <HAL_ADC_ConfigChannel+0x4e6>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a28      	ldr	r2, [pc, #160]	@ (8003cfc <HAL_ADC_ConfigChannel+0x4d0>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d159      	bne.n	8003d12 <HAL_ADC_ConfigChannel+0x4e6>
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d154      	bne.n	8003d12 <HAL_ADC_ConfigChannel+0x4e6>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a1d      	ldr	r2, [pc, #116]	@ (8003ce4 <HAL_ADC_ConfigChannel+0x4b8>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d14f      	bne.n	8003d12 <HAL_ADC_ConfigChannel+0x4e6>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003c78:	4619      	mov	r1, r3
 8003c7a:	481b      	ldr	r0, [pc, #108]	@ (8003ce8 <HAL_ADC_ConfigChannel+0x4bc>)
 8003c7c:	f7ff fad1 	bl	8003222 <LL_ADC_SetCommonPathInternalCh>
 8003c80:	e047      	b.n	8003d12 <HAL_ADC_ConfigChannel+0x4e6>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c86:	f043 0220 	orr.w	r2, r3, #32
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003c94:	e03d      	b.n	8003d12 <HAL_ADC_ConfigChannel+0x4e6>
 8003c96:	bf00      	nop
 8003c98:	47ff0000 	.word	0x47ff0000
 8003c9c:	40022000 	.word	0x40022000
 8003ca0:	04300002 	.word	0x04300002
 8003ca4:	08600004 	.word	0x08600004
 8003ca8:	0c900008 	.word	0x0c900008
 8003cac:	10c00010 	.word	0x10c00010
 8003cb0:	14f00020 	.word	0x14f00020
 8003cb4:	2a000400 	.word	0x2a000400
 8003cb8:	2e300800 	.word	0x2e300800
 8003cbc:	32601000 	.word	0x32601000
 8003cc0:	43210000 	.word	0x43210000
 8003cc4:	4b840000 	.word	0x4b840000
 8003cc8:	4fb80000 	.word	0x4fb80000
 8003ccc:	47520000 	.word	0x47520000
 8003cd0:	36902000 	.word	0x36902000
 8003cd4:	25b00200 	.word	0x25b00200
 8003cd8:	21800100 	.word	0x21800100
 8003cdc:	1d500080 	.word	0x1d500080
 8003ce0:	19200040 	.word	0x19200040
 8003ce4:	40022100 	.word	0x40022100
 8003ce8:	40022300 	.word	0x40022300
 8003cec:	cb840000 	.word	0xcb840000
 8003cf0:	24000004 	.word	0x24000004
 8003cf4:	053e2d63 	.word	0x053e2d63
 8003cf8:	bac04000 	.word	0xbac04000
 8003cfc:	cfb80000 	.word	0xcfb80000
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d04:	f043 0220 	orr.w	r2, r3, #32
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003d1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3734      	adds	r7, #52	@ 0x34
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd90      	pop	{r4, r7, pc}
 8003d26:	bf00      	nop

08003d28 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003d30:	4b60      	ldr	r3, [pc, #384]	@ (8003eb4 <ADC_ConfigureBoostMode+0x18c>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d01c      	beq.n	8003d76 <ADC_ConfigureBoostMode+0x4e>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003d3c:	f007 fd92 	bl	800b864 <HAL_RCC_GetHCLKFreq>
 8003d40:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d4a:	d010      	beq.n	8003d6e <ADC_ConfigureBoostMode+0x46>
 8003d4c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003d50:	d873      	bhi.n	8003e3a <ADC_ConfigureBoostMode+0x112>
 8003d52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d56:	d002      	beq.n	8003d5e <ADC_ConfigureBoostMode+0x36>
 8003d58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003d5c:	d16d      	bne.n	8003e3a <ADC_ConfigureBoostMode+0x112>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	0c1b      	lsrs	r3, r3, #16
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d6a:	60fb      	str	r3, [r7, #12]
        break;
 8003d6c:	e068      	b.n	8003e40 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	089b      	lsrs	r3, r3, #2
 8003d72:	60fb      	str	r3, [r7, #12]
        break;
 8003d74:	e064      	b.n	8003e40 <ADC_ConfigureBoostMode+0x118>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003d76:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003d7a:	f04f 0100 	mov.w	r1, #0
 8003d7e:	f008 ff75 	bl	800cc6c <HAL_RCCEx_GetPeriphCLKFreq>
 8003d82:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003d8c:	d051      	beq.n	8003e32 <ADC_ConfigureBoostMode+0x10a>
 8003d8e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003d92:	d854      	bhi.n	8003e3e <ADC_ConfigureBoostMode+0x116>
 8003d94:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003d98:	d047      	beq.n	8003e2a <ADC_ConfigureBoostMode+0x102>
 8003d9a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003d9e:	d84e      	bhi.n	8003e3e <ADC_ConfigureBoostMode+0x116>
 8003da0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003da4:	d03d      	beq.n	8003e22 <ADC_ConfigureBoostMode+0xfa>
 8003da6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003daa:	d848      	bhi.n	8003e3e <ADC_ConfigureBoostMode+0x116>
 8003dac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003db0:	d033      	beq.n	8003e1a <ADC_ConfigureBoostMode+0xf2>
 8003db2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003db6:	d842      	bhi.n	8003e3e <ADC_ConfigureBoostMode+0x116>
 8003db8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003dbc:	d029      	beq.n	8003e12 <ADC_ConfigureBoostMode+0xea>
 8003dbe:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003dc2:	d83c      	bhi.n	8003e3e <ADC_ConfigureBoostMode+0x116>
 8003dc4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003dc8:	d01a      	beq.n	8003e00 <ADC_ConfigureBoostMode+0xd8>
 8003dca:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003dce:	d836      	bhi.n	8003e3e <ADC_ConfigureBoostMode+0x116>
 8003dd0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003dd4:	d014      	beq.n	8003e00 <ADC_ConfigureBoostMode+0xd8>
 8003dd6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003dda:	d830      	bhi.n	8003e3e <ADC_ConfigureBoostMode+0x116>
 8003ddc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003de0:	d00e      	beq.n	8003e00 <ADC_ConfigureBoostMode+0xd8>
 8003de2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003de6:	d82a      	bhi.n	8003e3e <ADC_ConfigureBoostMode+0x116>
 8003de8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003dec:	d008      	beq.n	8003e00 <ADC_ConfigureBoostMode+0xd8>
 8003dee:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003df2:	d824      	bhi.n	8003e3e <ADC_ConfigureBoostMode+0x116>
 8003df4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003df8:	d002      	beq.n	8003e00 <ADC_ConfigureBoostMode+0xd8>
 8003dfa:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003dfe:	d11e      	bne.n	8003e3e <ADC_ConfigureBoostMode+0x116>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	0c9b      	lsrs	r3, r3, #18
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0e:	60fb      	str	r3, [r7, #12]
        break;
 8003e10:	e016      	b.n	8003e40 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	091b      	lsrs	r3, r3, #4
 8003e16:	60fb      	str	r3, [r7, #12]
        break;
 8003e18:	e012      	b.n	8003e40 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	095b      	lsrs	r3, r3, #5
 8003e1e:	60fb      	str	r3, [r7, #12]
        break;
 8003e20:	e00e      	b.n	8003e40 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	099b      	lsrs	r3, r3, #6
 8003e26:	60fb      	str	r3, [r7, #12]
        break;
 8003e28:	e00a      	b.n	8003e40 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	09db      	lsrs	r3, r3, #7
 8003e2e:	60fb      	str	r3, [r7, #12]
        break;
 8003e30:	e006      	b.n	8003e40 <ADC_ConfigureBoostMode+0x118>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	0a1b      	lsrs	r3, r3, #8
 8003e36:	60fb      	str	r3, [r7, #12]
        break;
 8003e38:	e002      	b.n	8003e40 <ADC_ConfigureBoostMode+0x118>
        break;
 8003e3a:	bf00      	nop
 8003e3c:	e000      	b.n	8003e40 <ADC_ConfigureBoostMode+0x118>
      default:
        break;
 8003e3e:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	085b      	lsrs	r3, r3, #1
 8003e44:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	4a1b      	ldr	r2, [pc, #108]	@ (8003eb8 <ADC_ConfigureBoostMode+0x190>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d808      	bhi.n	8003e60 <ADC_ConfigureBoostMode+0x138>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	689a      	ldr	r2, [r3, #8]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003e5c:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003e5e:	e025      	b.n	8003eac <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 12500000UL)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	4a16      	ldr	r2, [pc, #88]	@ (8003ebc <ADC_ConfigureBoostMode+0x194>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d80a      	bhi.n	8003e7e <ADC_ConfigureBoostMode+0x156>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e7a:	609a      	str	r2, [r3, #8]
}
 8003e7c:	e016      	b.n	8003eac <ADC_ConfigureBoostMode+0x184>
  else if (freq <= 25000000UL)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	4a0f      	ldr	r2, [pc, #60]	@ (8003ec0 <ADC_ConfigureBoostMode+0x198>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d80a      	bhi.n	8003e9c <ADC_ConfigureBoostMode+0x174>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e98:	609a      	str	r2, [r3, #8]
}
 8003e9a:	e007      	b.n	8003eac <ADC_ConfigureBoostMode+0x184>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689a      	ldr	r2, [r3, #8]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003eaa:	609a      	str	r2, [r3, #8]
}
 8003eac:	bf00      	nop
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	40022300 	.word	0x40022300
 8003eb8:	005f5e10 	.word	0x005f5e10
 8003ebc:	00bebc20 	.word	0x00bebc20
 8003ec0:	017d7840 	.word	0x017d7840

08003ec4 <LL_ADC_IsEnabled>:
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f003 0301 	and.w	r3, r3, #1
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d101      	bne.n	8003edc <LL_ADC_IsEnabled+0x18>
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e000      	b.n	8003ede <LL_ADC_IsEnabled+0x1a>
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <LL_ADC_REG_IsConversionOngoing>:
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f003 0304 	and.w	r3, r3, #4
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	d101      	bne.n	8003f02 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003efe:	2301      	movs	r3, #1
 8003f00:	e000      	b.n	8003f04 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003f10:	b590      	push	{r4, r7, lr}
 8003f12:	b09f      	sub	sp, #124	@ 0x7c
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d101      	bne.n	8003f2e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003f2a:	2302      	movs	r3, #2
 8003f2c:	e080      	b.n	8004030 <HAL_ADCEx_MultiModeConfigChannel+0x120>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2201      	movs	r2, #1
 8003f32:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003f36:	2300      	movs	r3, #0
 8003f38:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a3d      	ldr	r2, [pc, #244]	@ (8004038 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d102      	bne.n	8003f4e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003f48:	4b3c      	ldr	r3, [pc, #240]	@ (800403c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003f4a:	60bb      	str	r3, [r7, #8]
 8003f4c:	e001      	b.n	8003f52 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10b      	bne.n	8003f70 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f5c:	f043 0220 	orr.w	r2, r3, #32
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e05f      	b.n	8004030 <HAL_ADCEx_MultiModeConfigChannel+0x120>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7ff ffb9 	bl	8003eea <LL_ADC_REG_IsConversionOngoing>
 8003f78:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7ff ffb3 	bl	8003eea <LL_ADC_REG_IsConversionOngoing>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d141      	bne.n	800400e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003f8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d13e      	bne.n	800400e <HAL_ADCEx_MultiModeConfigChannel+0xfe>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003f90:	4b2b      	ldr	r3, [pc, #172]	@ (8004040 <HAL_ADCEx_MultiModeConfigChannel+0x130>)
 8003f92:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d020      	beq.n	8003fde <HAL_ADCEx_MultiModeConfigChannel+0xce>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003f9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fac:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fae:	4822      	ldr	r0, [pc, #136]	@ (8004038 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003fb0:	f7ff ff88 	bl	8003ec4 <LL_ADC_IsEnabled>
 8003fb4:	4604      	mov	r4, r0
 8003fb6:	4821      	ldr	r0, [pc, #132]	@ (800403c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003fb8:	f7ff ff84 	bl	8003ec4 <LL_ADC_IsEnabled>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	4323      	orrs	r3, r4
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d12e      	bne.n	8004022 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003fc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fc6:	689a      	ldr	r2, [r3, #8]
 8003fc8:	4b1e      	ldr	r3, [pc, #120]	@ (8004044 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8003fca:	4013      	ands	r3, r2
 8003fcc:	683a      	ldr	r2, [r7, #0]
 8003fce:	6811      	ldr	r1, [r2, #0]
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	6892      	ldr	r2, [r2, #8]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fda:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003fdc:	e021      	b.n	8004022 <HAL_ADCEx_MultiModeConfigChannel+0x112>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003fde:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003fe6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fe8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fea:	4813      	ldr	r0, [pc, #76]	@ (8004038 <HAL_ADCEx_MultiModeConfigChannel+0x128>)
 8003fec:	f7ff ff6a 	bl	8003ec4 <LL_ADC_IsEnabled>
 8003ff0:	4604      	mov	r4, r0
 8003ff2:	4812      	ldr	r0, [pc, #72]	@ (800403c <HAL_ADCEx_MultiModeConfigChannel+0x12c>)
 8003ff4:	f7ff ff66 	bl	8003ec4 <LL_ADC_IsEnabled>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	4323      	orrs	r3, r4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d110      	bne.n	8004022 <HAL_ADCEx_MultiModeConfigChannel+0x112>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004000:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	4b0f      	ldr	r3, [pc, #60]	@ (8004044 <HAL_ADCEx_MultiModeConfigChannel+0x134>)
 8004006:	4013      	ands	r3, r2
 8004008:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800400a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800400c:	e009      	b.n	8004022 <HAL_ADCEx_MultiModeConfigChannel+0x112>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004012:	f043 0220 	orr.w	r2, r3, #32
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8004020:	e000      	b.n	8004024 <HAL_ADCEx_MultiModeConfigChannel+0x114>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004022:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800402c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8004030:	4618      	mov	r0, r3
 8004032:	377c      	adds	r7, #124	@ 0x7c
 8004034:	46bd      	mov	sp, r7
 8004036:	bd90      	pop	{r4, r7, pc}
 8004038:	40022000 	.word	0x40022000
 800403c:	40022100 	.word	0x40022100
 8004040:	40022300 	.word	0x40022300
 8004044:	fffff0e0 	.word	0xfffff0e0

08004048 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f003 0307 	and.w	r3, r3, #7
 8004056:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004058:	4b0b      	ldr	r3, [pc, #44]	@ (8004088 <__NVIC_SetPriorityGrouping+0x40>)
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004064:	4013      	ands	r3, r2
 8004066:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004070:	4b06      	ldr	r3, [pc, #24]	@ (800408c <__NVIC_SetPriorityGrouping+0x44>)
 8004072:	4313      	orrs	r3, r2
 8004074:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004076:	4a04      	ldr	r2, [pc, #16]	@ (8004088 <__NVIC_SetPriorityGrouping+0x40>)
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	60d3      	str	r3, [r2, #12]
}
 800407c:	bf00      	nop
 800407e:	3714      	adds	r7, #20
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr
 8004088:	e000ed00 	.word	0xe000ed00
 800408c:	05fa0000 	.word	0x05fa0000

08004090 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004094:	4b04      	ldr	r3, [pc, #16]	@ (80040a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	0a1b      	lsrs	r3, r3, #8
 800409a:	f003 0307 	and.w	r3, r3, #7
}
 800409e:	4618      	mov	r0, r3
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	e000ed00 	.word	0xe000ed00

080040ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	4603      	mov	r3, r0
 80040b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80040b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	db0b      	blt.n	80040d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040be:	88fb      	ldrh	r3, [r7, #6]
 80040c0:	f003 021f 	and.w	r2, r3, #31
 80040c4:	4907      	ldr	r1, [pc, #28]	@ (80040e4 <__NVIC_EnableIRQ+0x38>)
 80040c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040ca:	095b      	lsrs	r3, r3, #5
 80040cc:	2001      	movs	r0, #1
 80040ce:	fa00 f202 	lsl.w	r2, r0, r2
 80040d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	e000e100 	.word	0xe000e100

080040e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	4603      	mov	r3, r0
 80040f0:	6039      	str	r1, [r7, #0]
 80040f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80040f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	db0a      	blt.n	8004112 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	490c      	ldr	r1, [pc, #48]	@ (8004134 <__NVIC_SetPriority+0x4c>)
 8004102:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004106:	0112      	lsls	r2, r2, #4
 8004108:	b2d2      	uxtb	r2, r2
 800410a:	440b      	add	r3, r1
 800410c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004110:	e00a      	b.n	8004128 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	b2da      	uxtb	r2, r3
 8004116:	4908      	ldr	r1, [pc, #32]	@ (8004138 <__NVIC_SetPriority+0x50>)
 8004118:	88fb      	ldrh	r3, [r7, #6]
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	3b04      	subs	r3, #4
 8004120:	0112      	lsls	r2, r2, #4
 8004122:	b2d2      	uxtb	r2, r2
 8004124:	440b      	add	r3, r1
 8004126:	761a      	strb	r2, [r3, #24]
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr
 8004134:	e000e100 	.word	0xe000e100
 8004138:	e000ed00 	.word	0xe000ed00

0800413c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800413c:	b480      	push	{r7}
 800413e:	b089      	sub	sp, #36	@ 0x24
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f003 0307 	and.w	r3, r3, #7
 800414e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004150:	69fb      	ldr	r3, [r7, #28]
 8004152:	f1c3 0307 	rsb	r3, r3, #7
 8004156:	2b04      	cmp	r3, #4
 8004158:	bf28      	it	cs
 800415a:	2304      	movcs	r3, #4
 800415c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	3304      	adds	r3, #4
 8004162:	2b06      	cmp	r3, #6
 8004164:	d902      	bls.n	800416c <NVIC_EncodePriority+0x30>
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	3b03      	subs	r3, #3
 800416a:	e000      	b.n	800416e <NVIC_EncodePriority+0x32>
 800416c:	2300      	movs	r3, #0
 800416e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004170:	f04f 32ff 	mov.w	r2, #4294967295
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	43da      	mvns	r2, r3
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	401a      	ands	r2, r3
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004184:	f04f 31ff 	mov.w	r1, #4294967295
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	fa01 f303 	lsl.w	r3, r1, r3
 800418e:	43d9      	mvns	r1, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004194:	4313      	orrs	r3, r2
         );
}
 8004196:	4618      	mov	r0, r3
 8004198:	3724      	adds	r7, #36	@ 0x24
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
	...

080041a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3b01      	subs	r3, #1
 80041b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041b4:	d301      	bcc.n	80041ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80041b6:	2301      	movs	r3, #1
 80041b8:	e00f      	b.n	80041da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041ba:	4a0a      	ldr	r2, [pc, #40]	@ (80041e4 <SysTick_Config+0x40>)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	3b01      	subs	r3, #1
 80041c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041c2:	210f      	movs	r1, #15
 80041c4:	f04f 30ff 	mov.w	r0, #4294967295
 80041c8:	f7ff ff8e 	bl	80040e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041cc:	4b05      	ldr	r3, [pc, #20]	@ (80041e4 <SysTick_Config+0x40>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041d2:	4b04      	ldr	r3, [pc, #16]	@ (80041e4 <SysTick_Config+0x40>)
 80041d4:	2207      	movs	r2, #7
 80041d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	e000e010 	.word	0xe000e010

080041e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f7ff ff29 	bl	8004048 <__NVIC_SetPriorityGrouping>
}
 80041f6:	bf00      	nop
 80041f8:	3708      	adds	r7, #8
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b086      	sub	sp, #24
 8004202:	af00      	add	r7, sp, #0
 8004204:	4603      	mov	r3, r0
 8004206:	60b9      	str	r1, [r7, #8]
 8004208:	607a      	str	r2, [r7, #4]
 800420a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800420c:	f7ff ff40 	bl	8004090 <__NVIC_GetPriorityGrouping>
 8004210:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	68b9      	ldr	r1, [r7, #8]
 8004216:	6978      	ldr	r0, [r7, #20]
 8004218:	f7ff ff90 	bl	800413c <NVIC_EncodePriority>
 800421c:	4602      	mov	r2, r0
 800421e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004222:	4611      	mov	r1, r2
 8004224:	4618      	mov	r0, r3
 8004226:	f7ff ff5f 	bl	80040e8 <__NVIC_SetPriority>
}
 800422a:	bf00      	nop
 800422c:	3718      	adds	r7, #24
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b082      	sub	sp, #8
 8004236:	af00      	add	r7, sp, #0
 8004238:	4603      	mov	r3, r0
 800423a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800423c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff ff33 	bl	80040ac <__NVIC_EnableIRQ>
}
 8004246:	bf00      	nop
 8004248:	3708      	adds	r7, #8
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b082      	sub	sp, #8
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7ff ffa4 	bl	80041a4 <SysTick_Config>
 800425c:	4603      	mov	r3, r0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
	...

08004268 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8004268:	b480      	push	{r7}
 800426a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 800426c:	f3bf 8f5f 	dmb	sy
}
 8004270:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8004272:	4b07      	ldr	r3, [pc, #28]	@ (8004290 <HAL_MPU_Disable+0x28>)
 8004274:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004276:	4a06      	ldr	r2, [pc, #24]	@ (8004290 <HAL_MPU_Disable+0x28>)
 8004278:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800427c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800427e:	4b05      	ldr	r3, [pc, #20]	@ (8004294 <HAL_MPU_Disable+0x2c>)
 8004280:	2200      	movs	r2, #0
 8004282:	605a      	str	r2, [r3, #4]
}
 8004284:	bf00      	nop
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	e000ed00 	.word	0xe000ed00
 8004294:	e000ed90 	.word	0xe000ed90

08004298 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80042a0:	4a0b      	ldr	r2, [pc, #44]	@ (80042d0 <HAL_MPU_Enable+0x38>)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f043 0301 	orr.w	r3, r3, #1
 80042a8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80042aa:	4b0a      	ldr	r3, [pc, #40]	@ (80042d4 <HAL_MPU_Enable+0x3c>)
 80042ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ae:	4a09      	ldr	r2, [pc, #36]	@ (80042d4 <HAL_MPU_Enable+0x3c>)
 80042b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042b4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80042b6:	f3bf 8f4f 	dsb	sy
}
 80042ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80042bc:	f3bf 8f6f 	isb	sy
}
 80042c0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	e000ed90 	.word	0xe000ed90
 80042d4:	e000ed00 	.word	0xe000ed00

080042d8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	785a      	ldrb	r2, [r3, #1]
 80042e4:	4b1b      	ldr	r3, [pc, #108]	@ (8004354 <HAL_MPU_ConfigRegion+0x7c>)
 80042e6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80042e8:	4b1a      	ldr	r3, [pc, #104]	@ (8004354 <HAL_MPU_ConfigRegion+0x7c>)
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	4a19      	ldr	r2, [pc, #100]	@ (8004354 <HAL_MPU_ConfigRegion+0x7c>)
 80042ee:	f023 0301 	bic.w	r3, r3, #1
 80042f2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80042f4:	4a17      	ldr	r2, [pc, #92]	@ (8004354 <HAL_MPU_ConfigRegion+0x7c>)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	7b1b      	ldrb	r3, [r3, #12]
 8004300:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	7adb      	ldrb	r3, [r3, #11]
 8004306:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004308:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	7a9b      	ldrb	r3, [r3, #10]
 800430e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8004310:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	7b5b      	ldrb	r3, [r3, #13]
 8004316:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004318:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	7b9b      	ldrb	r3, [r3, #14]
 800431e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004320:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	7bdb      	ldrb	r3, [r3, #15]
 8004326:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8004328:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	7a5b      	ldrb	r3, [r3, #9]
 800432e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004330:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	7a1b      	ldrb	r3, [r3, #8]
 8004336:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8004338:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	7812      	ldrb	r2, [r2, #0]
 800433e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004340:	4a04      	ldr	r2, [pc, #16]	@ (8004354 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004342:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8004344:	6113      	str	r3, [r2, #16]
}
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	e000ed90 	.word	0xe000ed90

08004358 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e069      	b.n	800443e <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d102      	bne.n	800437c <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7fe fad6 	bl	8002928 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2202      	movs	r2, #2
 8004380:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d002      	beq.n	8004392 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	6819      	ldr	r1, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	4b2a      	ldr	r3, [pc, #168]	@ (8004448 <HAL_DCMI_Init+0xf0>)
 800439e:	400b      	ands	r3, r1
 80043a0:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	6819      	ldr	r1, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	685a      	ldr	r2, [r3, #4]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	695b      	ldr	r3, [r3, #20]
 80043b0:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80043b6:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 80043c2:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80043ce:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d4:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80043da:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e0:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80043e6:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	430a      	orrs	r2, r1
 80043ee:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	2b10      	cmp	r3, #16
 80043f6:	d112      	bne.n	800441e <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	7f1b      	ldrb	r3, [r3, #28]
 80043fc:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	7f5b      	ldrb	r3, [r3, #29]
 8004402:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004404:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	7f9b      	ldrb	r3, [r3, #30]
 800440a:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 800440c:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	7fdb      	ldrb	r3, [r3, #31]
 8004414:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 800441a:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 800441c:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68da      	ldr	r2, [r3, #12]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f042 021e 	orr.w	r2, r2, #30
 800442c:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	ffe0f007 	.word	0xffe0f007

0800444c <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b088      	sub	sp, #32
 8004450:	af02      	add	r7, sp, #8
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
 8004458:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004460:	2b01      	cmp	r3, #1
 8004462:	d101      	bne.n	8004468 <HAL_DCMI_Start_DMA+0x1c>
 8004464:	2302      	movs	r3, #2
 8004466:	e0ab      	b.n	80045c0 <HAL_DCMI_Start_DMA+0x174>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2202      	movs	r2, #2
 8004474:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004486:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 0202 	bic.w	r2, r2, #2
 8004496:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6819      	ldr	r1, [r3, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68ba      	ldr	r2, [r7, #8]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044ac:	4a46      	ldr	r2, [pc, #280]	@ (80045c8 <HAL_DCMI_Start_DMA+0x17c>)
 80044ae:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044b4:	4a45      	ldr	r2, [pc, #276]	@ (80045cc <HAL_DCMI_Start_DMA+0x180>)
 80044b6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044bc:	2200      	movs	r2, #0
 80044be:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	641a      	str	r2, [r3, #64]	@ 0x40
  hdcmi->XferSize = 0;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdcmi->pBuffPtr = 0;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	645a      	str	r2, [r3, #68]	@ 0x44

  if (Length <= 0xFFFFU)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044de:	d219      	bcs.n	8004514 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	3328      	adds	r3, #40	@ 0x28
 80044ea:	4619      	mov	r1, r3
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	f000 fdb6 	bl	8005060 <HAL_DMA_Start_IT>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d055      	beq.n	80045a6 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2240      	movs	r2, #64	@ 0x40
 80044fe:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e055      	b.n	80045c0 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004518:	4a2b      	ldr	r2, [pc, #172]	@ (80045c8 <HAL_DCMI_Start_DMA+0x17c>)
 800451a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2201      	movs	r2, #1
 8004520:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferSize = Length;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	683a      	ldr	r2, [r7, #0]
 8004526:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdcmi->pBuffPtr = pData;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 800452e:	e009      	b.n	8004544 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004534:	085a      	lsrs	r2, r3, #1
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800453e:	005a      	lsls	r2, r3, #1
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	639a      	str	r2, [r3, #56]	@ 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004548:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800454c:	d2f0      	bcs.n	8004530 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004552:	1e9a      	subs	r2, r3, #2
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	4413      	add	r3, r2
 800456a:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	3328      	adds	r3, #40	@ 0x28
 8004576:	4619      	mov	r1, r3
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	f003 f8bd 	bl	8007700 <HAL_DMAEx_MultiBufferStart_IT>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d00c      	beq.n	80045a6 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2240      	movs	r2, #64	@ 0x40
 8004590:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e00c      	b.n	80045c0 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f042 0201 	orr.w	r2, r2, #1
 80045b4:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3718      	adds	r7, #24
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	080047e5 	.word	0x080047e5
 80045cc:	0800490b 	.word	0x0800490b

080045d0 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 80045d8:	4b2b      	ldr	r3, [pc, #172]	@ (8004688 <HAL_DCMI_Stop+0xb8>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a2b      	ldr	r2, [pc, #172]	@ (800468c <HAL_DCMI_Stop+0xbc>)
 80045de:	fba2 2303 	umull	r2, r3, r2, r3
 80045e2:	0a5b      	lsrs	r3, r3, #9
 80045e4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80045e8:	fb02 f303 	mul.w	r3, r2, r3
 80045ec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80045ee:	2300      	movs	r3, #0
 80045f0:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d101      	bne.n	8004600 <HAL_DCMI_Stop+0x30>
 80045fc:	2302      	movs	r3, #2
 80045fe:	e03f      	b.n	8004680 <HAL_DCMI_Stop+0xb0>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 0201 	bic.w	r2, r2, #1
 800461e:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	3b01      	subs	r3, #1
 8004624:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d108      	bne.n	800463e <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004630:	f043 0220 	orr.w	r2, r3, #32
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	64da      	str	r2, [r3, #76]	@ 0x4c

      status = HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	72fb      	strb	r3, [r7, #11]
      break;
 800463c:	e006      	b.n	800464c <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1e9      	bne.n	8004620 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800465a:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004660:	4618      	mov	r0, r3
 8004662:	f000 ff67 	bl	8005534 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return status;
 800467e:	7afb      	ldrb	r3, [r7, #11]
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	24000004 	.word	0x24000004
 800468c:	10624dd3 	.word	0x10624dd3

08004690 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f003 0304 	and.w	r3, r3, #4
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d016      	beq.n	80046d8 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2204      	movs	r2, #4
 80046b0:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046b6:	f043 0202 	orr.w	r2, r3, #2
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2204      	movs	r2, #4
 80046c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046ca:	4a31      	ldr	r2, [pc, #196]	@ (8004790 <HAL_DCMI_IRQHandler+0x100>)
 80046cc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80046d2:	4618      	mov	r0, r3
 80046d4:	f001 fa4c 	bl	8005b70 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d016      	beq.n	8004710 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2202      	movs	r2, #2
 80046e8:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046ee:	f043 0201 	orr.w	r2, r3, #1
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2204      	movs	r2, #4
 80046fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004702:	4a23      	ldr	r2, [pc, #140]	@ (8004790 <HAL_DCMI_IRQHandler+0x100>)
 8004704:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800470a:	4618      	mov	r0, r3
 800470c:	f001 fa30 	bl	8005b70 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f003 0310 	and.w	r3, r3, #16
 8004716:	2b00      	cmp	r3, #0
 8004718:	d006      	beq.n	8004728 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	2210      	movs	r2, #16
 8004720:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f840 	bl	80047a8 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f003 0308 	and.w	r3, r3, #8
 800472e:	2b00      	cmp	r3, #0
 8004730:	d006      	beq.n	8004740 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2208      	movs	r2, #8
 8004738:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f83e 	bl	80047bc <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b00      	cmp	r3, #0
 8004748:	d01d      	beq.n	8004786 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b02      	cmp	r3, #2
 8004756:	d107      	bne.n	8004768 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68da      	ldr	r2, [r3, #12]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f022 021e 	bic.w	r2, r2, #30
 8004766:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 0201 	bic.w	r2, r2, #1
 8004776:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2201      	movs	r2, #1
 800477e:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 f825 	bl	80047d0 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8004786:	bf00      	nop
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	0800490b 	.word	0x0800490b

08004794 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 80047c4:	bf00      	nop
 80047c6:	370c      	adds	r7, #12
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr

080047d0 <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f0:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d043      	beq.n	8004882 <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004806:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800480c:	f003 0301 	and.w	r3, r3, #1
 8004810:	2b00      	cmp	r3, #0
 8004812:	d118      	bne.n	8004846 <DCMI_DMAXferCplt+0x62>
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d015      	beq.n	8004846 <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800482c:	00da      	lsls	r2, r3, #3
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	4413      	add	r3, r2
 8004832:	2200      	movs	r2, #0
 8004834:	4619      	mov	r1, r3
 8004836:	f003 fac1 	bl	8007dbc <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800483e:	1e5a      	subs	r2, r3, #1
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	639a      	str	r2, [r3, #56]	@ 0x38
 8004844:	e044      	b.n	80048d0 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d13c      	bne.n	80048d0 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004868:	00da      	lsls	r2, r3, #3
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	4413      	add	r3, r2
 800486e:	2201      	movs	r2, #1
 8004870:	4619      	mov	r1, r3
 8004872:	f003 faa3 	bl	8007dbc <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800487a:	1e5a      	subs	r2, r3, #1
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	639a      	str	r2, [r3, #56]	@ 0x38
 8004880:	e026      	b.n	80048d0 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d006      	beq.n	80048a0 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800489c:	60da      	str	r2, [r3, #12]
 800489e:	e017      	b.n	80048d0 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10f      	bne.n	80048d0 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b4:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ba:	0099      	lsls	r1, r3, #2
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68ba      	ldr	r2, [r7, #8]
 80048c4:	440a      	add	r2, r1
 80048c6:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	639a      	str	r2, [r3, #56]	@ 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d8:	429a      	cmp	r2, r3
 80048da:	d112      	bne.n	8004902 <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f042 0201 	orr.w	r2, r2, #1
 80048ea:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d103      	bne.n	8004902 <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2201      	movs	r2, #1
 80048fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
  }
}
 8004902:	bf00      	nop
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b084      	sub	sp, #16
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004916:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800491c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800491e:	2b02      	cmp	r3, #2
 8004920:	d009      	beq.n	8004936 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800492e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8004936:	68f8      	ldr	r0, [r7, #12]
 8004938:	f7ff ff2c 	bl	8004794 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 800493c:	bf00      	nop
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800494c:	f7fe fc26 	bl	800319c <HAL_GetTick>
 8004950:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d101      	bne.n	800495c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e37d      	b.n	8005058 <HAL_DMA_Init+0x714>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a66      	ldr	r2, [pc, #408]	@ (8004afc <HAL_DMA_Init+0x1b8>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d04a      	beq.n	80049fc <HAL_DMA_Init+0xb8>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a65      	ldr	r2, [pc, #404]	@ (8004b00 <HAL_DMA_Init+0x1bc>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d045      	beq.n	80049fc <HAL_DMA_Init+0xb8>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a63      	ldr	r2, [pc, #396]	@ (8004b04 <HAL_DMA_Init+0x1c0>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d040      	beq.n	80049fc <HAL_DMA_Init+0xb8>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a62      	ldr	r2, [pc, #392]	@ (8004b08 <HAL_DMA_Init+0x1c4>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d03b      	beq.n	80049fc <HAL_DMA_Init+0xb8>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a60      	ldr	r2, [pc, #384]	@ (8004b0c <HAL_DMA_Init+0x1c8>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d036      	beq.n	80049fc <HAL_DMA_Init+0xb8>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a5f      	ldr	r2, [pc, #380]	@ (8004b10 <HAL_DMA_Init+0x1cc>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d031      	beq.n	80049fc <HAL_DMA_Init+0xb8>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a5d      	ldr	r2, [pc, #372]	@ (8004b14 <HAL_DMA_Init+0x1d0>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d02c      	beq.n	80049fc <HAL_DMA_Init+0xb8>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a5c      	ldr	r2, [pc, #368]	@ (8004b18 <HAL_DMA_Init+0x1d4>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d027      	beq.n	80049fc <HAL_DMA_Init+0xb8>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a5a      	ldr	r2, [pc, #360]	@ (8004b1c <HAL_DMA_Init+0x1d8>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d022      	beq.n	80049fc <HAL_DMA_Init+0xb8>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a59      	ldr	r2, [pc, #356]	@ (8004b20 <HAL_DMA_Init+0x1dc>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d01d      	beq.n	80049fc <HAL_DMA_Init+0xb8>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a57      	ldr	r2, [pc, #348]	@ (8004b24 <HAL_DMA_Init+0x1e0>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d018      	beq.n	80049fc <HAL_DMA_Init+0xb8>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a56      	ldr	r2, [pc, #344]	@ (8004b28 <HAL_DMA_Init+0x1e4>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d013      	beq.n	80049fc <HAL_DMA_Init+0xb8>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a54      	ldr	r2, [pc, #336]	@ (8004b2c <HAL_DMA_Init+0x1e8>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d00e      	beq.n	80049fc <HAL_DMA_Init+0xb8>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a53      	ldr	r2, [pc, #332]	@ (8004b30 <HAL_DMA_Init+0x1ec>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d009      	beq.n	80049fc <HAL_DMA_Init+0xb8>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a51      	ldr	r2, [pc, #324]	@ (8004b34 <HAL_DMA_Init+0x1f0>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d004      	beq.n	80049fc <HAL_DMA_Init+0xb8>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a50      	ldr	r2, [pc, #320]	@ (8004b38 <HAL_DMA_Init+0x1f4>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d101      	bne.n	8004a00 <HAL_DMA_Init+0xbc>
 80049fc:	2301      	movs	r3, #1
 80049fe:	e000      	b.n	8004a02 <HAL_DMA_Init+0xbe>
 8004a00:	2300      	movs	r3, #0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	f000 813c 	beq.w	8004c80 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a37      	ldr	r2, [pc, #220]	@ (8004afc <HAL_DMA_Init+0x1b8>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d04a      	beq.n	8004ab8 <HAL_DMA_Init+0x174>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a36      	ldr	r2, [pc, #216]	@ (8004b00 <HAL_DMA_Init+0x1bc>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d045      	beq.n	8004ab8 <HAL_DMA_Init+0x174>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a34      	ldr	r2, [pc, #208]	@ (8004b04 <HAL_DMA_Init+0x1c0>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d040      	beq.n	8004ab8 <HAL_DMA_Init+0x174>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a33      	ldr	r2, [pc, #204]	@ (8004b08 <HAL_DMA_Init+0x1c4>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d03b      	beq.n	8004ab8 <HAL_DMA_Init+0x174>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a31      	ldr	r2, [pc, #196]	@ (8004b0c <HAL_DMA_Init+0x1c8>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d036      	beq.n	8004ab8 <HAL_DMA_Init+0x174>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a30      	ldr	r2, [pc, #192]	@ (8004b10 <HAL_DMA_Init+0x1cc>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d031      	beq.n	8004ab8 <HAL_DMA_Init+0x174>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a2e      	ldr	r2, [pc, #184]	@ (8004b14 <HAL_DMA_Init+0x1d0>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d02c      	beq.n	8004ab8 <HAL_DMA_Init+0x174>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a2d      	ldr	r2, [pc, #180]	@ (8004b18 <HAL_DMA_Init+0x1d4>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d027      	beq.n	8004ab8 <HAL_DMA_Init+0x174>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a2b      	ldr	r2, [pc, #172]	@ (8004b1c <HAL_DMA_Init+0x1d8>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d022      	beq.n	8004ab8 <HAL_DMA_Init+0x174>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a2a      	ldr	r2, [pc, #168]	@ (8004b20 <HAL_DMA_Init+0x1dc>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d01d      	beq.n	8004ab8 <HAL_DMA_Init+0x174>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a28      	ldr	r2, [pc, #160]	@ (8004b24 <HAL_DMA_Init+0x1e0>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d018      	beq.n	8004ab8 <HAL_DMA_Init+0x174>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a27      	ldr	r2, [pc, #156]	@ (8004b28 <HAL_DMA_Init+0x1e4>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d013      	beq.n	8004ab8 <HAL_DMA_Init+0x174>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a25      	ldr	r2, [pc, #148]	@ (8004b2c <HAL_DMA_Init+0x1e8>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d00e      	beq.n	8004ab8 <HAL_DMA_Init+0x174>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a24      	ldr	r2, [pc, #144]	@ (8004b30 <HAL_DMA_Init+0x1ec>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d009      	beq.n	8004ab8 <HAL_DMA_Init+0x174>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a22      	ldr	r2, [pc, #136]	@ (8004b34 <HAL_DMA_Init+0x1f0>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d004      	beq.n	8004ab8 <HAL_DMA_Init+0x174>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a21      	ldr	r2, [pc, #132]	@ (8004b38 <HAL_DMA_Init+0x1f4>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d108      	bne.n	8004aca <HAL_DMA_Init+0x186>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f022 0201 	bic.w	r2, r2, #1
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	e007      	b.n	8004ada <HAL_DMA_Init+0x196>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f022 0201 	bic.w	r2, r2, #1
 8004ad8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ada:	e02f      	b.n	8004b3c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004adc:	f7fe fb5e 	bl	800319c <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b05      	cmp	r3, #5
 8004ae8:	d928      	bls.n	8004b3c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2220      	movs	r2, #32
 8004aee:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2203      	movs	r2, #3
 8004af4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e2ad      	b.n	8005058 <HAL_DMA_Init+0x714>
 8004afc:	40020010 	.word	0x40020010
 8004b00:	40020028 	.word	0x40020028
 8004b04:	40020040 	.word	0x40020040
 8004b08:	40020058 	.word	0x40020058
 8004b0c:	40020070 	.word	0x40020070
 8004b10:	40020088 	.word	0x40020088
 8004b14:	400200a0 	.word	0x400200a0
 8004b18:	400200b8 	.word	0x400200b8
 8004b1c:	40020410 	.word	0x40020410
 8004b20:	40020428 	.word	0x40020428
 8004b24:	40020440 	.word	0x40020440
 8004b28:	40020458 	.word	0x40020458
 8004b2c:	40020470 	.word	0x40020470
 8004b30:	40020488 	.word	0x40020488
 8004b34:	400204a0 	.word	0x400204a0
 8004b38:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1c8      	bne.n	8004adc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	4b73      	ldr	r3, [pc, #460]	@ (8004d24 <HAL_DMA_Init+0x3e0>)
 8004b56:	4013      	ands	r3, r2
 8004b58:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004b62:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b6e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b7a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a1b      	ldr	r3, [r3, #32]
 8004b80:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	4313      	orrs	r3, r2
 8004b86:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b8c:	2b04      	cmp	r3, #4
 8004b8e:	d107      	bne.n	8004ba0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	697a      	ldr	r2, [r7, #20]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b28      	cmp	r3, #40	@ 0x28
 8004ba6:	d903      	bls.n	8004bb0 <HAL_DMA_Init+0x26c>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	2b2e      	cmp	r3, #46	@ 0x2e
 8004bae:	d91f      	bls.n	8004bf0 <HAL_DMA_Init+0x2ac>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	2b3e      	cmp	r3, #62	@ 0x3e
 8004bb6:	d903      	bls.n	8004bc0 <HAL_DMA_Init+0x27c>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	2b42      	cmp	r3, #66	@ 0x42
 8004bbe:	d917      	bls.n	8004bf0 <HAL_DMA_Init+0x2ac>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	2b46      	cmp	r3, #70	@ 0x46
 8004bc6:	d903      	bls.n	8004bd0 <HAL_DMA_Init+0x28c>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	2b48      	cmp	r3, #72	@ 0x48
 8004bce:	d90f      	bls.n	8004bf0 <HAL_DMA_Init+0x2ac>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	2b4e      	cmp	r3, #78	@ 0x4e
 8004bd6:	d903      	bls.n	8004be0 <HAL_DMA_Init+0x29c>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	2b52      	cmp	r3, #82	@ 0x52
 8004bde:	d907      	bls.n	8004bf0 <HAL_DMA_Init+0x2ac>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	2b73      	cmp	r3, #115	@ 0x73
 8004be6:	d905      	bls.n	8004bf4 <HAL_DMA_Init+0x2b0>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	2b77      	cmp	r3, #119	@ 0x77
 8004bee:	d801      	bhi.n	8004bf4 <HAL_DMA_Init+0x2b0>
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e000      	b.n	8004bf6 <HAL_DMA_Init+0x2b2>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c00:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f023 0307 	bic.w	r3, r3, #7
 8004c18:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c28:	2b04      	cmp	r3, #4
 8004c2a:	d117      	bne.n	8004c5c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00e      	beq.n	8004c5c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f002 fbd4 	bl	80073ec <DMA_CheckFifoParam>
 8004c44:	4603      	mov	r3, r0
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d008      	beq.n	8004c5c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2240      	movs	r2, #64	@ 0x40
 8004c4e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2201      	movs	r2, #1
 8004c54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	e1fd      	b.n	8005058 <HAL_DMA_Init+0x714>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f002 fb0f 	bl	8007288 <DMA_CalcBaseAndBitshift>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c72:	f003 031f 	and.w	r3, r3, #31
 8004c76:	223f      	movs	r2, #63	@ 0x3f
 8004c78:	409a      	lsls	r2, r3
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	609a      	str	r2, [r3, #8]
 8004c7e:	e0fd      	b.n	8004e7c <HAL_DMA_Init+0x538>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a28      	ldr	r2, [pc, #160]	@ (8004d28 <HAL_DMA_Init+0x3e4>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d04a      	beq.n	8004d20 <HAL_DMA_Init+0x3dc>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a27      	ldr	r2, [pc, #156]	@ (8004d2c <HAL_DMA_Init+0x3e8>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d045      	beq.n	8004d20 <HAL_DMA_Init+0x3dc>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a25      	ldr	r2, [pc, #148]	@ (8004d30 <HAL_DMA_Init+0x3ec>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d040      	beq.n	8004d20 <HAL_DMA_Init+0x3dc>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a24      	ldr	r2, [pc, #144]	@ (8004d34 <HAL_DMA_Init+0x3f0>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d03b      	beq.n	8004d20 <HAL_DMA_Init+0x3dc>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a22      	ldr	r2, [pc, #136]	@ (8004d38 <HAL_DMA_Init+0x3f4>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d036      	beq.n	8004d20 <HAL_DMA_Init+0x3dc>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a21      	ldr	r2, [pc, #132]	@ (8004d3c <HAL_DMA_Init+0x3f8>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d031      	beq.n	8004d20 <HAL_DMA_Init+0x3dc>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a1f      	ldr	r2, [pc, #124]	@ (8004d40 <HAL_DMA_Init+0x3fc>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d02c      	beq.n	8004d20 <HAL_DMA_Init+0x3dc>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a1e      	ldr	r2, [pc, #120]	@ (8004d44 <HAL_DMA_Init+0x400>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d027      	beq.n	8004d20 <HAL_DMA_Init+0x3dc>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a1c      	ldr	r2, [pc, #112]	@ (8004d48 <HAL_DMA_Init+0x404>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d022      	beq.n	8004d20 <HAL_DMA_Init+0x3dc>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a1b      	ldr	r2, [pc, #108]	@ (8004d4c <HAL_DMA_Init+0x408>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d01d      	beq.n	8004d20 <HAL_DMA_Init+0x3dc>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a19      	ldr	r2, [pc, #100]	@ (8004d50 <HAL_DMA_Init+0x40c>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d018      	beq.n	8004d20 <HAL_DMA_Init+0x3dc>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a18      	ldr	r2, [pc, #96]	@ (8004d54 <HAL_DMA_Init+0x410>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d013      	beq.n	8004d20 <HAL_DMA_Init+0x3dc>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a16      	ldr	r2, [pc, #88]	@ (8004d58 <HAL_DMA_Init+0x414>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d00e      	beq.n	8004d20 <HAL_DMA_Init+0x3dc>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a15      	ldr	r2, [pc, #84]	@ (8004d5c <HAL_DMA_Init+0x418>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d009      	beq.n	8004d20 <HAL_DMA_Init+0x3dc>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a13      	ldr	r2, [pc, #76]	@ (8004d60 <HAL_DMA_Init+0x41c>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d004      	beq.n	8004d20 <HAL_DMA_Init+0x3dc>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a12      	ldr	r2, [pc, #72]	@ (8004d64 <HAL_DMA_Init+0x420>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d123      	bne.n	8004d68 <HAL_DMA_Init+0x424>
 8004d20:	2301      	movs	r3, #1
 8004d22:	e022      	b.n	8004d6a <HAL_DMA_Init+0x426>
 8004d24:	fe10803f 	.word	0xfe10803f
 8004d28:	48022c08 	.word	0x48022c08
 8004d2c:	48022c1c 	.word	0x48022c1c
 8004d30:	48022c30 	.word	0x48022c30
 8004d34:	48022c44 	.word	0x48022c44
 8004d38:	48022c58 	.word	0x48022c58
 8004d3c:	48022c6c 	.word	0x48022c6c
 8004d40:	48022c80 	.word	0x48022c80
 8004d44:	48022c94 	.word	0x48022c94
 8004d48:	58025408 	.word	0x58025408
 8004d4c:	5802541c 	.word	0x5802541c
 8004d50:	58025430 	.word	0x58025430
 8004d54:	58025444 	.word	0x58025444
 8004d58:	58025458 	.word	0x58025458
 8004d5c:	5802546c 	.word	0x5802546c
 8004d60:	58025480 	.word	0x58025480
 8004d64:	58025494 	.word	0x58025494
 8004d68:	2300      	movs	r3, #0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d07d      	beq.n	8004e6a <HAL_DMA_Init+0x526>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a7f      	ldr	r2, [pc, #508]	@ (8004f70 <HAL_DMA_Init+0x62c>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d021      	beq.n	8004dbc <HAL_DMA_Init+0x478>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a7d      	ldr	r2, [pc, #500]	@ (8004f74 <HAL_DMA_Init+0x630>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d01c      	beq.n	8004dbc <HAL_DMA_Init+0x478>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a7c      	ldr	r2, [pc, #496]	@ (8004f78 <HAL_DMA_Init+0x634>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d017      	beq.n	8004dbc <HAL_DMA_Init+0x478>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a7a      	ldr	r2, [pc, #488]	@ (8004f7c <HAL_DMA_Init+0x638>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d012      	beq.n	8004dbc <HAL_DMA_Init+0x478>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a79      	ldr	r2, [pc, #484]	@ (8004f80 <HAL_DMA_Init+0x63c>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d00d      	beq.n	8004dbc <HAL_DMA_Init+0x478>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a77      	ldr	r2, [pc, #476]	@ (8004f84 <HAL_DMA_Init+0x640>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d008      	beq.n	8004dbc <HAL_DMA_Init+0x478>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a76      	ldr	r2, [pc, #472]	@ (8004f88 <HAL_DMA_Init+0x644>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d003      	beq.n	8004dbc <HAL_DMA_Init+0x478>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a74      	ldr	r2, [pc, #464]	@ (8004f8c <HAL_DMA_Init+0x648>)
 8004dba:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	4b6e      	ldr	r3, [pc, #440]	@ (8004f90 <HAL_DMA_Init+0x64c>)
 8004dd8:	4013      	ands	r3, r2
 8004dda:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	2b40      	cmp	r3, #64	@ 0x40
 8004de2:	d008      	beq.n	8004df6 <HAL_DMA_Init+0x4b2>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	2b80      	cmp	r3, #128	@ 0x80
 8004dea:	d102      	bne.n	8004df2 <HAL_DMA_Init+0x4ae>
 8004dec:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004df0:	e002      	b.n	8004df8 <HAL_DMA_Init+0x4b4>
 8004df2:	2300      	movs	r3, #0
 8004df4:	e000      	b.n	8004df8 <HAL_DMA_Init+0x4b4>
 8004df6:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	68d2      	ldr	r2, [r2, #12]
 8004dfc:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004dfe:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004e06:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004e0e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004e16:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	69db      	ldr	r3, [r3, #28]
 8004e1c:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004e1e:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004e26:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	4b55      	ldr	r3, [pc, #340]	@ (8004f94 <HAL_DMA_Init+0x650>)
 8004e3e:	4413      	add	r3, r2
 8004e40:	4a55      	ldr	r2, [pc, #340]	@ (8004f98 <HAL_DMA_Init+0x654>)
 8004e42:	fba2 2303 	umull	r2, r3, r2, r3
 8004e46:	091b      	lsrs	r3, r3, #4
 8004e48:	009a      	lsls	r2, r3, #2
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f002 fa1a 	bl	8007288 <DMA_CalcBaseAndBitshift>
 8004e54:	4603      	mov	r3, r0
 8004e56:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e5c:	f003 031f 	and.w	r3, r3, #31
 8004e60:	2201      	movs	r2, #1
 8004e62:	409a      	lsls	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	605a      	str	r2, [r3, #4]
 8004e68:	e008      	b.n	8004e7c <HAL_DMA_Init+0x538>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2240      	movs	r2, #64	@ 0x40
 8004e6e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2203      	movs	r2, #3
 8004e74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e0ed      	b.n	8005058 <HAL_DMA_Init+0x714>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a46      	ldr	r2, [pc, #280]	@ (8004f9c <HAL_DMA_Init+0x658>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d072      	beq.n	8004f6c <HAL_DMA_Init+0x628>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a45      	ldr	r2, [pc, #276]	@ (8004fa0 <HAL_DMA_Init+0x65c>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d06d      	beq.n	8004f6c <HAL_DMA_Init+0x628>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a43      	ldr	r2, [pc, #268]	@ (8004fa4 <HAL_DMA_Init+0x660>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d068      	beq.n	8004f6c <HAL_DMA_Init+0x628>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a42      	ldr	r2, [pc, #264]	@ (8004fa8 <HAL_DMA_Init+0x664>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d063      	beq.n	8004f6c <HAL_DMA_Init+0x628>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a40      	ldr	r2, [pc, #256]	@ (8004fac <HAL_DMA_Init+0x668>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d05e      	beq.n	8004f6c <HAL_DMA_Init+0x628>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a3f      	ldr	r2, [pc, #252]	@ (8004fb0 <HAL_DMA_Init+0x66c>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d059      	beq.n	8004f6c <HAL_DMA_Init+0x628>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a3d      	ldr	r2, [pc, #244]	@ (8004fb4 <HAL_DMA_Init+0x670>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d054      	beq.n	8004f6c <HAL_DMA_Init+0x628>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a3c      	ldr	r2, [pc, #240]	@ (8004fb8 <HAL_DMA_Init+0x674>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d04f      	beq.n	8004f6c <HAL_DMA_Init+0x628>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a3a      	ldr	r2, [pc, #232]	@ (8004fbc <HAL_DMA_Init+0x678>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d04a      	beq.n	8004f6c <HAL_DMA_Init+0x628>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a39      	ldr	r2, [pc, #228]	@ (8004fc0 <HAL_DMA_Init+0x67c>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d045      	beq.n	8004f6c <HAL_DMA_Init+0x628>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a37      	ldr	r2, [pc, #220]	@ (8004fc4 <HAL_DMA_Init+0x680>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d040      	beq.n	8004f6c <HAL_DMA_Init+0x628>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a36      	ldr	r2, [pc, #216]	@ (8004fc8 <HAL_DMA_Init+0x684>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d03b      	beq.n	8004f6c <HAL_DMA_Init+0x628>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a34      	ldr	r2, [pc, #208]	@ (8004fcc <HAL_DMA_Init+0x688>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d036      	beq.n	8004f6c <HAL_DMA_Init+0x628>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a33      	ldr	r2, [pc, #204]	@ (8004fd0 <HAL_DMA_Init+0x68c>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d031      	beq.n	8004f6c <HAL_DMA_Init+0x628>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a31      	ldr	r2, [pc, #196]	@ (8004fd4 <HAL_DMA_Init+0x690>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d02c      	beq.n	8004f6c <HAL_DMA_Init+0x628>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a30      	ldr	r2, [pc, #192]	@ (8004fd8 <HAL_DMA_Init+0x694>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d027      	beq.n	8004f6c <HAL_DMA_Init+0x628>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a13      	ldr	r2, [pc, #76]	@ (8004f70 <HAL_DMA_Init+0x62c>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d022      	beq.n	8004f6c <HAL_DMA_Init+0x628>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a12      	ldr	r2, [pc, #72]	@ (8004f74 <HAL_DMA_Init+0x630>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d01d      	beq.n	8004f6c <HAL_DMA_Init+0x628>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a10      	ldr	r2, [pc, #64]	@ (8004f78 <HAL_DMA_Init+0x634>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d018      	beq.n	8004f6c <HAL_DMA_Init+0x628>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a0f      	ldr	r2, [pc, #60]	@ (8004f7c <HAL_DMA_Init+0x638>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d013      	beq.n	8004f6c <HAL_DMA_Init+0x628>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a0d      	ldr	r2, [pc, #52]	@ (8004f80 <HAL_DMA_Init+0x63c>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d00e      	beq.n	8004f6c <HAL_DMA_Init+0x628>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a0c      	ldr	r2, [pc, #48]	@ (8004f84 <HAL_DMA_Init+0x640>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d009      	beq.n	8004f6c <HAL_DMA_Init+0x628>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a0a      	ldr	r2, [pc, #40]	@ (8004f88 <HAL_DMA_Init+0x644>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d004      	beq.n	8004f6c <HAL_DMA_Init+0x628>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a09      	ldr	r2, [pc, #36]	@ (8004f8c <HAL_DMA_Init+0x648>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d137      	bne.n	8004fdc <HAL_DMA_Init+0x698>
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e036      	b.n	8004fde <HAL_DMA_Init+0x69a>
 8004f70:	58025408 	.word	0x58025408
 8004f74:	5802541c 	.word	0x5802541c
 8004f78:	58025430 	.word	0x58025430
 8004f7c:	58025444 	.word	0x58025444
 8004f80:	58025458 	.word	0x58025458
 8004f84:	5802546c 	.word	0x5802546c
 8004f88:	58025480 	.word	0x58025480
 8004f8c:	58025494 	.word	0x58025494
 8004f90:	fffe000f 	.word	0xfffe000f
 8004f94:	a7fdabf8 	.word	0xa7fdabf8
 8004f98:	cccccccd 	.word	0xcccccccd
 8004f9c:	40020010 	.word	0x40020010
 8004fa0:	40020028 	.word	0x40020028
 8004fa4:	40020040 	.word	0x40020040
 8004fa8:	40020058 	.word	0x40020058
 8004fac:	40020070 	.word	0x40020070
 8004fb0:	40020088 	.word	0x40020088
 8004fb4:	400200a0 	.word	0x400200a0
 8004fb8:	400200b8 	.word	0x400200b8
 8004fbc:	40020410 	.word	0x40020410
 8004fc0:	40020428 	.word	0x40020428
 8004fc4:	40020440 	.word	0x40020440
 8004fc8:	40020458 	.word	0x40020458
 8004fcc:	40020470 	.word	0x40020470
 8004fd0:	40020488 	.word	0x40020488
 8004fd4:	400204a0 	.word	0x400204a0
 8004fd8:	400204b8 	.word	0x400204b8
 8004fdc:	2300      	movs	r3, #0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d032      	beq.n	8005048 <HAL_DMA_Init+0x704>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f002 fa7e 	bl	80074e4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	2b80      	cmp	r3, #128	@ 0x80
 8004fee:	d102      	bne.n	8004ff6 <HAL_DMA_Init+0x6b2>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685a      	ldr	r2, [r3, #4]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ffe:	b2d2      	uxtb	r2, r2
 8005000:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800500a:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d010      	beq.n	8005036 <HAL_DMA_Init+0x6f2>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	2b08      	cmp	r3, #8
 800501a:	d80c      	bhi.n	8005036 <HAL_DMA_Init+0x6f2>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f002 fafb 	bl	8007618 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005026:	2200      	movs	r2, #0
 8005028:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005032:	605a      	str	r2, [r3, #4]
 8005034:	e008      	b.n	8005048 <HAL_DMA_Init+0x704>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3718      	adds	r7, #24
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
 800506c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800506e:	2300      	movs	r3, #0
 8005070:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d101      	bne.n	800507c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e226      	b.n	80054ca <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005082:	2b01      	cmp	r3, #1
 8005084:	d101      	bne.n	800508a <HAL_DMA_Start_IT+0x2a>
 8005086:	2302      	movs	r3, #2
 8005088:	e21f      	b.n	80054ca <HAL_DMA_Start_IT+0x46a>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2201      	movs	r2, #1
 800508e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b01      	cmp	r3, #1
 800509c:	f040 820a 	bne.w	80054b4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2202      	movs	r2, #2
 80050a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a68      	ldr	r2, [pc, #416]	@ (8005254 <HAL_DMA_Start_IT+0x1f4>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d04a      	beq.n	800514e <HAL_DMA_Start_IT+0xee>
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a66      	ldr	r2, [pc, #408]	@ (8005258 <HAL_DMA_Start_IT+0x1f8>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d045      	beq.n	800514e <HAL_DMA_Start_IT+0xee>
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a65      	ldr	r2, [pc, #404]	@ (800525c <HAL_DMA_Start_IT+0x1fc>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d040      	beq.n	800514e <HAL_DMA_Start_IT+0xee>
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a63      	ldr	r2, [pc, #396]	@ (8005260 <HAL_DMA_Start_IT+0x200>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d03b      	beq.n	800514e <HAL_DMA_Start_IT+0xee>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a62      	ldr	r2, [pc, #392]	@ (8005264 <HAL_DMA_Start_IT+0x204>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d036      	beq.n	800514e <HAL_DMA_Start_IT+0xee>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a60      	ldr	r2, [pc, #384]	@ (8005268 <HAL_DMA_Start_IT+0x208>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d031      	beq.n	800514e <HAL_DMA_Start_IT+0xee>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a5f      	ldr	r2, [pc, #380]	@ (800526c <HAL_DMA_Start_IT+0x20c>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d02c      	beq.n	800514e <HAL_DMA_Start_IT+0xee>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a5d      	ldr	r2, [pc, #372]	@ (8005270 <HAL_DMA_Start_IT+0x210>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d027      	beq.n	800514e <HAL_DMA_Start_IT+0xee>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a5c      	ldr	r2, [pc, #368]	@ (8005274 <HAL_DMA_Start_IT+0x214>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d022      	beq.n	800514e <HAL_DMA_Start_IT+0xee>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a5a      	ldr	r2, [pc, #360]	@ (8005278 <HAL_DMA_Start_IT+0x218>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d01d      	beq.n	800514e <HAL_DMA_Start_IT+0xee>
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a59      	ldr	r2, [pc, #356]	@ (800527c <HAL_DMA_Start_IT+0x21c>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d018      	beq.n	800514e <HAL_DMA_Start_IT+0xee>
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a57      	ldr	r2, [pc, #348]	@ (8005280 <HAL_DMA_Start_IT+0x220>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d013      	beq.n	800514e <HAL_DMA_Start_IT+0xee>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a56      	ldr	r2, [pc, #344]	@ (8005284 <HAL_DMA_Start_IT+0x224>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d00e      	beq.n	800514e <HAL_DMA_Start_IT+0xee>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a54      	ldr	r2, [pc, #336]	@ (8005288 <HAL_DMA_Start_IT+0x228>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d009      	beq.n	800514e <HAL_DMA_Start_IT+0xee>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a53      	ldr	r2, [pc, #332]	@ (800528c <HAL_DMA_Start_IT+0x22c>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d004      	beq.n	800514e <HAL_DMA_Start_IT+0xee>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a51      	ldr	r2, [pc, #324]	@ (8005290 <HAL_DMA_Start_IT+0x230>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d108      	bne.n	8005160 <HAL_DMA_Start_IT+0x100>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f022 0201 	bic.w	r2, r2, #1
 800515c:	601a      	str	r2, [r3, #0]
 800515e:	e007      	b.n	8005170 <HAL_DMA_Start_IT+0x110>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f022 0201 	bic.w	r2, r2, #1
 800516e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	68b9      	ldr	r1, [r7, #8]
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f001 fea2 	bl	8006ec0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a34      	ldr	r2, [pc, #208]	@ (8005254 <HAL_DMA_Start_IT+0x1f4>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d04a      	beq.n	800521c <HAL_DMA_Start_IT+0x1bc>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a33      	ldr	r2, [pc, #204]	@ (8005258 <HAL_DMA_Start_IT+0x1f8>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d045      	beq.n	800521c <HAL_DMA_Start_IT+0x1bc>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a31      	ldr	r2, [pc, #196]	@ (800525c <HAL_DMA_Start_IT+0x1fc>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d040      	beq.n	800521c <HAL_DMA_Start_IT+0x1bc>
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a30      	ldr	r2, [pc, #192]	@ (8005260 <HAL_DMA_Start_IT+0x200>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d03b      	beq.n	800521c <HAL_DMA_Start_IT+0x1bc>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a2e      	ldr	r2, [pc, #184]	@ (8005264 <HAL_DMA_Start_IT+0x204>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d036      	beq.n	800521c <HAL_DMA_Start_IT+0x1bc>
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a2d      	ldr	r2, [pc, #180]	@ (8005268 <HAL_DMA_Start_IT+0x208>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d031      	beq.n	800521c <HAL_DMA_Start_IT+0x1bc>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a2b      	ldr	r2, [pc, #172]	@ (800526c <HAL_DMA_Start_IT+0x20c>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d02c      	beq.n	800521c <HAL_DMA_Start_IT+0x1bc>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a2a      	ldr	r2, [pc, #168]	@ (8005270 <HAL_DMA_Start_IT+0x210>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d027      	beq.n	800521c <HAL_DMA_Start_IT+0x1bc>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a28      	ldr	r2, [pc, #160]	@ (8005274 <HAL_DMA_Start_IT+0x214>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d022      	beq.n	800521c <HAL_DMA_Start_IT+0x1bc>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a27      	ldr	r2, [pc, #156]	@ (8005278 <HAL_DMA_Start_IT+0x218>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d01d      	beq.n	800521c <HAL_DMA_Start_IT+0x1bc>
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a25      	ldr	r2, [pc, #148]	@ (800527c <HAL_DMA_Start_IT+0x21c>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d018      	beq.n	800521c <HAL_DMA_Start_IT+0x1bc>
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a24      	ldr	r2, [pc, #144]	@ (8005280 <HAL_DMA_Start_IT+0x220>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d013      	beq.n	800521c <HAL_DMA_Start_IT+0x1bc>
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a22      	ldr	r2, [pc, #136]	@ (8005284 <HAL_DMA_Start_IT+0x224>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d00e      	beq.n	800521c <HAL_DMA_Start_IT+0x1bc>
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a21      	ldr	r2, [pc, #132]	@ (8005288 <HAL_DMA_Start_IT+0x228>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d009      	beq.n	800521c <HAL_DMA_Start_IT+0x1bc>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a1f      	ldr	r2, [pc, #124]	@ (800528c <HAL_DMA_Start_IT+0x22c>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d004      	beq.n	800521c <HAL_DMA_Start_IT+0x1bc>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a1e      	ldr	r2, [pc, #120]	@ (8005290 <HAL_DMA_Start_IT+0x230>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d101      	bne.n	8005220 <HAL_DMA_Start_IT+0x1c0>
 800521c:	2301      	movs	r3, #1
 800521e:	e000      	b.n	8005222 <HAL_DMA_Start_IT+0x1c2>
 8005220:	2300      	movs	r3, #0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d036      	beq.n	8005294 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f023 021e 	bic.w	r2, r3, #30
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f042 0216 	orr.w	r2, r2, #22
 8005238:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800523e:	2b00      	cmp	r3, #0
 8005240:	d03e      	beq.n	80052c0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f042 0208 	orr.w	r2, r2, #8
 8005250:	601a      	str	r2, [r3, #0]
 8005252:	e035      	b.n	80052c0 <HAL_DMA_Start_IT+0x260>
 8005254:	40020010 	.word	0x40020010
 8005258:	40020028 	.word	0x40020028
 800525c:	40020040 	.word	0x40020040
 8005260:	40020058 	.word	0x40020058
 8005264:	40020070 	.word	0x40020070
 8005268:	40020088 	.word	0x40020088
 800526c:	400200a0 	.word	0x400200a0
 8005270:	400200b8 	.word	0x400200b8
 8005274:	40020410 	.word	0x40020410
 8005278:	40020428 	.word	0x40020428
 800527c:	40020440 	.word	0x40020440
 8005280:	40020458 	.word	0x40020458
 8005284:	40020470 	.word	0x40020470
 8005288:	40020488 	.word	0x40020488
 800528c:	400204a0 	.word	0x400204a0
 8005290:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f023 020e 	bic.w	r2, r3, #14
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f042 020a 	orr.w	r2, r2, #10
 80052a6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d007      	beq.n	80052c0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f042 0204 	orr.w	r2, r2, #4
 80052be:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a83      	ldr	r2, [pc, #524]	@ (80054d4 <HAL_DMA_Start_IT+0x474>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d072      	beq.n	80053b0 <HAL_DMA_Start_IT+0x350>
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a82      	ldr	r2, [pc, #520]	@ (80054d8 <HAL_DMA_Start_IT+0x478>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d06d      	beq.n	80053b0 <HAL_DMA_Start_IT+0x350>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a80      	ldr	r2, [pc, #512]	@ (80054dc <HAL_DMA_Start_IT+0x47c>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d068      	beq.n	80053b0 <HAL_DMA_Start_IT+0x350>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a7f      	ldr	r2, [pc, #508]	@ (80054e0 <HAL_DMA_Start_IT+0x480>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d063      	beq.n	80053b0 <HAL_DMA_Start_IT+0x350>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a7d      	ldr	r2, [pc, #500]	@ (80054e4 <HAL_DMA_Start_IT+0x484>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d05e      	beq.n	80053b0 <HAL_DMA_Start_IT+0x350>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a7c      	ldr	r2, [pc, #496]	@ (80054e8 <HAL_DMA_Start_IT+0x488>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d059      	beq.n	80053b0 <HAL_DMA_Start_IT+0x350>
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a7a      	ldr	r2, [pc, #488]	@ (80054ec <HAL_DMA_Start_IT+0x48c>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d054      	beq.n	80053b0 <HAL_DMA_Start_IT+0x350>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a79      	ldr	r2, [pc, #484]	@ (80054f0 <HAL_DMA_Start_IT+0x490>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d04f      	beq.n	80053b0 <HAL_DMA_Start_IT+0x350>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a77      	ldr	r2, [pc, #476]	@ (80054f4 <HAL_DMA_Start_IT+0x494>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d04a      	beq.n	80053b0 <HAL_DMA_Start_IT+0x350>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a76      	ldr	r2, [pc, #472]	@ (80054f8 <HAL_DMA_Start_IT+0x498>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d045      	beq.n	80053b0 <HAL_DMA_Start_IT+0x350>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a74      	ldr	r2, [pc, #464]	@ (80054fc <HAL_DMA_Start_IT+0x49c>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d040      	beq.n	80053b0 <HAL_DMA_Start_IT+0x350>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4a73      	ldr	r2, [pc, #460]	@ (8005500 <HAL_DMA_Start_IT+0x4a0>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d03b      	beq.n	80053b0 <HAL_DMA_Start_IT+0x350>
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4a71      	ldr	r2, [pc, #452]	@ (8005504 <HAL_DMA_Start_IT+0x4a4>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d036      	beq.n	80053b0 <HAL_DMA_Start_IT+0x350>
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a70      	ldr	r2, [pc, #448]	@ (8005508 <HAL_DMA_Start_IT+0x4a8>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d031      	beq.n	80053b0 <HAL_DMA_Start_IT+0x350>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a6e      	ldr	r2, [pc, #440]	@ (800550c <HAL_DMA_Start_IT+0x4ac>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d02c      	beq.n	80053b0 <HAL_DMA_Start_IT+0x350>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a6d      	ldr	r2, [pc, #436]	@ (8005510 <HAL_DMA_Start_IT+0x4b0>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d027      	beq.n	80053b0 <HAL_DMA_Start_IT+0x350>
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a6b      	ldr	r2, [pc, #428]	@ (8005514 <HAL_DMA_Start_IT+0x4b4>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d022      	beq.n	80053b0 <HAL_DMA_Start_IT+0x350>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	4a6a      	ldr	r2, [pc, #424]	@ (8005518 <HAL_DMA_Start_IT+0x4b8>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d01d      	beq.n	80053b0 <HAL_DMA_Start_IT+0x350>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4a68      	ldr	r2, [pc, #416]	@ (800551c <HAL_DMA_Start_IT+0x4bc>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d018      	beq.n	80053b0 <HAL_DMA_Start_IT+0x350>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a67      	ldr	r2, [pc, #412]	@ (8005520 <HAL_DMA_Start_IT+0x4c0>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d013      	beq.n	80053b0 <HAL_DMA_Start_IT+0x350>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a65      	ldr	r2, [pc, #404]	@ (8005524 <HAL_DMA_Start_IT+0x4c4>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d00e      	beq.n	80053b0 <HAL_DMA_Start_IT+0x350>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a64      	ldr	r2, [pc, #400]	@ (8005528 <HAL_DMA_Start_IT+0x4c8>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d009      	beq.n	80053b0 <HAL_DMA_Start_IT+0x350>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a62      	ldr	r2, [pc, #392]	@ (800552c <HAL_DMA_Start_IT+0x4cc>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d004      	beq.n	80053b0 <HAL_DMA_Start_IT+0x350>
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4a61      	ldr	r2, [pc, #388]	@ (8005530 <HAL_DMA_Start_IT+0x4d0>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d101      	bne.n	80053b4 <HAL_DMA_Start_IT+0x354>
 80053b0:	2301      	movs	r3, #1
 80053b2:	e000      	b.n	80053b6 <HAL_DMA_Start_IT+0x356>
 80053b4:	2300      	movs	r3, #0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d01a      	beq.n	80053f0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d007      	beq.n	80053d8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053d6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d007      	beq.n	80053f0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80053ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053ee:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a37      	ldr	r2, [pc, #220]	@ (80054d4 <HAL_DMA_Start_IT+0x474>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d04a      	beq.n	8005490 <HAL_DMA_Start_IT+0x430>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a36      	ldr	r2, [pc, #216]	@ (80054d8 <HAL_DMA_Start_IT+0x478>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d045      	beq.n	8005490 <HAL_DMA_Start_IT+0x430>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a34      	ldr	r2, [pc, #208]	@ (80054dc <HAL_DMA_Start_IT+0x47c>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d040      	beq.n	8005490 <HAL_DMA_Start_IT+0x430>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a33      	ldr	r2, [pc, #204]	@ (80054e0 <HAL_DMA_Start_IT+0x480>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d03b      	beq.n	8005490 <HAL_DMA_Start_IT+0x430>
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a31      	ldr	r2, [pc, #196]	@ (80054e4 <HAL_DMA_Start_IT+0x484>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d036      	beq.n	8005490 <HAL_DMA_Start_IT+0x430>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a30      	ldr	r2, [pc, #192]	@ (80054e8 <HAL_DMA_Start_IT+0x488>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d031      	beq.n	8005490 <HAL_DMA_Start_IT+0x430>
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a2e      	ldr	r2, [pc, #184]	@ (80054ec <HAL_DMA_Start_IT+0x48c>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d02c      	beq.n	8005490 <HAL_DMA_Start_IT+0x430>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a2d      	ldr	r2, [pc, #180]	@ (80054f0 <HAL_DMA_Start_IT+0x490>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d027      	beq.n	8005490 <HAL_DMA_Start_IT+0x430>
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a2b      	ldr	r2, [pc, #172]	@ (80054f4 <HAL_DMA_Start_IT+0x494>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d022      	beq.n	8005490 <HAL_DMA_Start_IT+0x430>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a2a      	ldr	r2, [pc, #168]	@ (80054f8 <HAL_DMA_Start_IT+0x498>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d01d      	beq.n	8005490 <HAL_DMA_Start_IT+0x430>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a28      	ldr	r2, [pc, #160]	@ (80054fc <HAL_DMA_Start_IT+0x49c>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d018      	beq.n	8005490 <HAL_DMA_Start_IT+0x430>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a27      	ldr	r2, [pc, #156]	@ (8005500 <HAL_DMA_Start_IT+0x4a0>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d013      	beq.n	8005490 <HAL_DMA_Start_IT+0x430>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a25      	ldr	r2, [pc, #148]	@ (8005504 <HAL_DMA_Start_IT+0x4a4>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d00e      	beq.n	8005490 <HAL_DMA_Start_IT+0x430>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a24      	ldr	r2, [pc, #144]	@ (8005508 <HAL_DMA_Start_IT+0x4a8>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d009      	beq.n	8005490 <HAL_DMA_Start_IT+0x430>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a22      	ldr	r2, [pc, #136]	@ (800550c <HAL_DMA_Start_IT+0x4ac>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d004      	beq.n	8005490 <HAL_DMA_Start_IT+0x430>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a21      	ldr	r2, [pc, #132]	@ (8005510 <HAL_DMA_Start_IT+0x4b0>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d108      	bne.n	80054a2 <HAL_DMA_Start_IT+0x442>
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	681a      	ldr	r2, [r3, #0]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f042 0201 	orr.w	r2, r2, #1
 800549e:	601a      	str	r2, [r3, #0]
 80054a0:	e012      	b.n	80054c8 <HAL_DMA_Start_IT+0x468>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f042 0201 	orr.w	r2, r2, #1
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	e009      	b.n	80054c8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80054ba:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80054c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3718      	adds	r7, #24
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	40020010 	.word	0x40020010
 80054d8:	40020028 	.word	0x40020028
 80054dc:	40020040 	.word	0x40020040
 80054e0:	40020058 	.word	0x40020058
 80054e4:	40020070 	.word	0x40020070
 80054e8:	40020088 	.word	0x40020088
 80054ec:	400200a0 	.word	0x400200a0
 80054f0:	400200b8 	.word	0x400200b8
 80054f4:	40020410 	.word	0x40020410
 80054f8:	40020428 	.word	0x40020428
 80054fc:	40020440 	.word	0x40020440
 8005500:	40020458 	.word	0x40020458
 8005504:	40020470 	.word	0x40020470
 8005508:	40020488 	.word	0x40020488
 800550c:	400204a0 	.word	0x400204a0
 8005510:	400204b8 	.word	0x400204b8
 8005514:	58025408 	.word	0x58025408
 8005518:	5802541c 	.word	0x5802541c
 800551c:	58025430 	.word	0x58025430
 8005520:	58025444 	.word	0x58025444
 8005524:	58025458 	.word	0x58025458
 8005528:	5802546c 	.word	0x5802546c
 800552c:	58025480 	.word	0x58025480
 8005530:	58025494 	.word	0x58025494

08005534 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800553c:	f7fd fe2e 	bl	800319c <HAL_GetTick>
 8005540:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d101      	bne.n	800554c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e2dc      	b.n	8005b06 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005552:	b2db      	uxtb	r3, r3
 8005554:	2b02      	cmp	r3, #2
 8005556:	d008      	beq.n	800556a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2280      	movs	r2, #128	@ 0x80
 800555c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e2cd      	b.n	8005b06 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a76      	ldr	r2, [pc, #472]	@ (8005748 <HAL_DMA_Abort+0x214>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d04a      	beq.n	800560a <HAL_DMA_Abort+0xd6>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a74      	ldr	r2, [pc, #464]	@ (800574c <HAL_DMA_Abort+0x218>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d045      	beq.n	800560a <HAL_DMA_Abort+0xd6>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a73      	ldr	r2, [pc, #460]	@ (8005750 <HAL_DMA_Abort+0x21c>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d040      	beq.n	800560a <HAL_DMA_Abort+0xd6>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a71      	ldr	r2, [pc, #452]	@ (8005754 <HAL_DMA_Abort+0x220>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d03b      	beq.n	800560a <HAL_DMA_Abort+0xd6>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a70      	ldr	r2, [pc, #448]	@ (8005758 <HAL_DMA_Abort+0x224>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d036      	beq.n	800560a <HAL_DMA_Abort+0xd6>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a6e      	ldr	r2, [pc, #440]	@ (800575c <HAL_DMA_Abort+0x228>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d031      	beq.n	800560a <HAL_DMA_Abort+0xd6>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a6d      	ldr	r2, [pc, #436]	@ (8005760 <HAL_DMA_Abort+0x22c>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d02c      	beq.n	800560a <HAL_DMA_Abort+0xd6>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a6b      	ldr	r2, [pc, #428]	@ (8005764 <HAL_DMA_Abort+0x230>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d027      	beq.n	800560a <HAL_DMA_Abort+0xd6>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a6a      	ldr	r2, [pc, #424]	@ (8005768 <HAL_DMA_Abort+0x234>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d022      	beq.n	800560a <HAL_DMA_Abort+0xd6>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a68      	ldr	r2, [pc, #416]	@ (800576c <HAL_DMA_Abort+0x238>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d01d      	beq.n	800560a <HAL_DMA_Abort+0xd6>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a67      	ldr	r2, [pc, #412]	@ (8005770 <HAL_DMA_Abort+0x23c>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d018      	beq.n	800560a <HAL_DMA_Abort+0xd6>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a65      	ldr	r2, [pc, #404]	@ (8005774 <HAL_DMA_Abort+0x240>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d013      	beq.n	800560a <HAL_DMA_Abort+0xd6>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a64      	ldr	r2, [pc, #400]	@ (8005778 <HAL_DMA_Abort+0x244>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d00e      	beq.n	800560a <HAL_DMA_Abort+0xd6>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a62      	ldr	r2, [pc, #392]	@ (800577c <HAL_DMA_Abort+0x248>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d009      	beq.n	800560a <HAL_DMA_Abort+0xd6>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a61      	ldr	r2, [pc, #388]	@ (8005780 <HAL_DMA_Abort+0x24c>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d004      	beq.n	800560a <HAL_DMA_Abort+0xd6>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a5f      	ldr	r2, [pc, #380]	@ (8005784 <HAL_DMA_Abort+0x250>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d101      	bne.n	800560e <HAL_DMA_Abort+0xda>
 800560a:	2301      	movs	r3, #1
 800560c:	e000      	b.n	8005610 <HAL_DMA_Abort+0xdc>
 800560e:	2300      	movs	r3, #0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d013      	beq.n	800563c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f022 021e 	bic.w	r2, r2, #30
 8005622:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	695a      	ldr	r2, [r3, #20]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005632:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	617b      	str	r3, [r7, #20]
 800563a:	e00a      	b.n	8005652 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f022 020e 	bic.w	r2, r2, #14
 800564a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a3c      	ldr	r2, [pc, #240]	@ (8005748 <HAL_DMA_Abort+0x214>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d072      	beq.n	8005742 <HAL_DMA_Abort+0x20e>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a3a      	ldr	r2, [pc, #232]	@ (800574c <HAL_DMA_Abort+0x218>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d06d      	beq.n	8005742 <HAL_DMA_Abort+0x20e>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a39      	ldr	r2, [pc, #228]	@ (8005750 <HAL_DMA_Abort+0x21c>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d068      	beq.n	8005742 <HAL_DMA_Abort+0x20e>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a37      	ldr	r2, [pc, #220]	@ (8005754 <HAL_DMA_Abort+0x220>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d063      	beq.n	8005742 <HAL_DMA_Abort+0x20e>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a36      	ldr	r2, [pc, #216]	@ (8005758 <HAL_DMA_Abort+0x224>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d05e      	beq.n	8005742 <HAL_DMA_Abort+0x20e>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a34      	ldr	r2, [pc, #208]	@ (800575c <HAL_DMA_Abort+0x228>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d059      	beq.n	8005742 <HAL_DMA_Abort+0x20e>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a33      	ldr	r2, [pc, #204]	@ (8005760 <HAL_DMA_Abort+0x22c>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d054      	beq.n	8005742 <HAL_DMA_Abort+0x20e>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a31      	ldr	r2, [pc, #196]	@ (8005764 <HAL_DMA_Abort+0x230>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d04f      	beq.n	8005742 <HAL_DMA_Abort+0x20e>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a30      	ldr	r2, [pc, #192]	@ (8005768 <HAL_DMA_Abort+0x234>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d04a      	beq.n	8005742 <HAL_DMA_Abort+0x20e>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a2e      	ldr	r2, [pc, #184]	@ (800576c <HAL_DMA_Abort+0x238>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d045      	beq.n	8005742 <HAL_DMA_Abort+0x20e>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a2d      	ldr	r2, [pc, #180]	@ (8005770 <HAL_DMA_Abort+0x23c>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d040      	beq.n	8005742 <HAL_DMA_Abort+0x20e>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a2b      	ldr	r2, [pc, #172]	@ (8005774 <HAL_DMA_Abort+0x240>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d03b      	beq.n	8005742 <HAL_DMA_Abort+0x20e>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a2a      	ldr	r2, [pc, #168]	@ (8005778 <HAL_DMA_Abort+0x244>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d036      	beq.n	8005742 <HAL_DMA_Abort+0x20e>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a28      	ldr	r2, [pc, #160]	@ (800577c <HAL_DMA_Abort+0x248>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d031      	beq.n	8005742 <HAL_DMA_Abort+0x20e>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a27      	ldr	r2, [pc, #156]	@ (8005780 <HAL_DMA_Abort+0x24c>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d02c      	beq.n	8005742 <HAL_DMA_Abort+0x20e>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a25      	ldr	r2, [pc, #148]	@ (8005784 <HAL_DMA_Abort+0x250>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d027      	beq.n	8005742 <HAL_DMA_Abort+0x20e>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a24      	ldr	r2, [pc, #144]	@ (8005788 <HAL_DMA_Abort+0x254>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d022      	beq.n	8005742 <HAL_DMA_Abort+0x20e>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a22      	ldr	r2, [pc, #136]	@ (800578c <HAL_DMA_Abort+0x258>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d01d      	beq.n	8005742 <HAL_DMA_Abort+0x20e>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a21      	ldr	r2, [pc, #132]	@ (8005790 <HAL_DMA_Abort+0x25c>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d018      	beq.n	8005742 <HAL_DMA_Abort+0x20e>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a1f      	ldr	r2, [pc, #124]	@ (8005794 <HAL_DMA_Abort+0x260>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d013      	beq.n	8005742 <HAL_DMA_Abort+0x20e>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a1e      	ldr	r2, [pc, #120]	@ (8005798 <HAL_DMA_Abort+0x264>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d00e      	beq.n	8005742 <HAL_DMA_Abort+0x20e>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a1c      	ldr	r2, [pc, #112]	@ (800579c <HAL_DMA_Abort+0x268>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d009      	beq.n	8005742 <HAL_DMA_Abort+0x20e>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a1b      	ldr	r2, [pc, #108]	@ (80057a0 <HAL_DMA_Abort+0x26c>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d004      	beq.n	8005742 <HAL_DMA_Abort+0x20e>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a19      	ldr	r2, [pc, #100]	@ (80057a4 <HAL_DMA_Abort+0x270>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d132      	bne.n	80057a8 <HAL_DMA_Abort+0x274>
 8005742:	2301      	movs	r3, #1
 8005744:	e031      	b.n	80057aa <HAL_DMA_Abort+0x276>
 8005746:	bf00      	nop
 8005748:	40020010 	.word	0x40020010
 800574c:	40020028 	.word	0x40020028
 8005750:	40020040 	.word	0x40020040
 8005754:	40020058 	.word	0x40020058
 8005758:	40020070 	.word	0x40020070
 800575c:	40020088 	.word	0x40020088
 8005760:	400200a0 	.word	0x400200a0
 8005764:	400200b8 	.word	0x400200b8
 8005768:	40020410 	.word	0x40020410
 800576c:	40020428 	.word	0x40020428
 8005770:	40020440 	.word	0x40020440
 8005774:	40020458 	.word	0x40020458
 8005778:	40020470 	.word	0x40020470
 800577c:	40020488 	.word	0x40020488
 8005780:	400204a0 	.word	0x400204a0
 8005784:	400204b8 	.word	0x400204b8
 8005788:	58025408 	.word	0x58025408
 800578c:	5802541c 	.word	0x5802541c
 8005790:	58025430 	.word	0x58025430
 8005794:	58025444 	.word	0x58025444
 8005798:	58025458 	.word	0x58025458
 800579c:	5802546c 	.word	0x5802546c
 80057a0:	58025480 	.word	0x58025480
 80057a4:	58025494 	.word	0x58025494
 80057a8:	2300      	movs	r3, #0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d007      	beq.n	80057be <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80057bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a6d      	ldr	r2, [pc, #436]	@ (8005978 <HAL_DMA_Abort+0x444>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d04a      	beq.n	800585e <HAL_DMA_Abort+0x32a>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a6b      	ldr	r2, [pc, #428]	@ (800597c <HAL_DMA_Abort+0x448>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d045      	beq.n	800585e <HAL_DMA_Abort+0x32a>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a6a      	ldr	r2, [pc, #424]	@ (8005980 <HAL_DMA_Abort+0x44c>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d040      	beq.n	800585e <HAL_DMA_Abort+0x32a>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a68      	ldr	r2, [pc, #416]	@ (8005984 <HAL_DMA_Abort+0x450>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d03b      	beq.n	800585e <HAL_DMA_Abort+0x32a>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a67      	ldr	r2, [pc, #412]	@ (8005988 <HAL_DMA_Abort+0x454>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d036      	beq.n	800585e <HAL_DMA_Abort+0x32a>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a65      	ldr	r2, [pc, #404]	@ (800598c <HAL_DMA_Abort+0x458>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d031      	beq.n	800585e <HAL_DMA_Abort+0x32a>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a64      	ldr	r2, [pc, #400]	@ (8005990 <HAL_DMA_Abort+0x45c>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d02c      	beq.n	800585e <HAL_DMA_Abort+0x32a>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a62      	ldr	r2, [pc, #392]	@ (8005994 <HAL_DMA_Abort+0x460>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d027      	beq.n	800585e <HAL_DMA_Abort+0x32a>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a61      	ldr	r2, [pc, #388]	@ (8005998 <HAL_DMA_Abort+0x464>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d022      	beq.n	800585e <HAL_DMA_Abort+0x32a>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a5f      	ldr	r2, [pc, #380]	@ (800599c <HAL_DMA_Abort+0x468>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d01d      	beq.n	800585e <HAL_DMA_Abort+0x32a>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a5e      	ldr	r2, [pc, #376]	@ (80059a0 <HAL_DMA_Abort+0x46c>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d018      	beq.n	800585e <HAL_DMA_Abort+0x32a>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a5c      	ldr	r2, [pc, #368]	@ (80059a4 <HAL_DMA_Abort+0x470>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d013      	beq.n	800585e <HAL_DMA_Abort+0x32a>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a5b      	ldr	r2, [pc, #364]	@ (80059a8 <HAL_DMA_Abort+0x474>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d00e      	beq.n	800585e <HAL_DMA_Abort+0x32a>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a59      	ldr	r2, [pc, #356]	@ (80059ac <HAL_DMA_Abort+0x478>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d009      	beq.n	800585e <HAL_DMA_Abort+0x32a>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a58      	ldr	r2, [pc, #352]	@ (80059b0 <HAL_DMA_Abort+0x47c>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d004      	beq.n	800585e <HAL_DMA_Abort+0x32a>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a56      	ldr	r2, [pc, #344]	@ (80059b4 <HAL_DMA_Abort+0x480>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d108      	bne.n	8005870 <HAL_DMA_Abort+0x33c>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f022 0201 	bic.w	r2, r2, #1
 800586c:	601a      	str	r2, [r3, #0]
 800586e:	e007      	b.n	8005880 <HAL_DMA_Abort+0x34c>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f022 0201 	bic.w	r2, r2, #1
 800587e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005880:	e013      	b.n	80058aa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005882:	f7fd fc8b 	bl	800319c <HAL_GetTick>
 8005886:	4602      	mov	r2, r0
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	1ad3      	subs	r3, r2, r3
 800588c:	2b05      	cmp	r3, #5
 800588e:	d90c      	bls.n	80058aa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2220      	movs	r2, #32
 8005894:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2203      	movs	r2, #3
 800589a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2200      	movs	r2, #0
 80058a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e12d      	b.n	8005b06 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 0301 	and.w	r3, r3, #1
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1e5      	bne.n	8005882 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a2f      	ldr	r2, [pc, #188]	@ (8005978 <HAL_DMA_Abort+0x444>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d04a      	beq.n	8005956 <HAL_DMA_Abort+0x422>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a2d      	ldr	r2, [pc, #180]	@ (800597c <HAL_DMA_Abort+0x448>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d045      	beq.n	8005956 <HAL_DMA_Abort+0x422>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a2c      	ldr	r2, [pc, #176]	@ (8005980 <HAL_DMA_Abort+0x44c>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d040      	beq.n	8005956 <HAL_DMA_Abort+0x422>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a2a      	ldr	r2, [pc, #168]	@ (8005984 <HAL_DMA_Abort+0x450>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d03b      	beq.n	8005956 <HAL_DMA_Abort+0x422>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a29      	ldr	r2, [pc, #164]	@ (8005988 <HAL_DMA_Abort+0x454>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d036      	beq.n	8005956 <HAL_DMA_Abort+0x422>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a27      	ldr	r2, [pc, #156]	@ (800598c <HAL_DMA_Abort+0x458>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d031      	beq.n	8005956 <HAL_DMA_Abort+0x422>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a26      	ldr	r2, [pc, #152]	@ (8005990 <HAL_DMA_Abort+0x45c>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d02c      	beq.n	8005956 <HAL_DMA_Abort+0x422>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a24      	ldr	r2, [pc, #144]	@ (8005994 <HAL_DMA_Abort+0x460>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d027      	beq.n	8005956 <HAL_DMA_Abort+0x422>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a23      	ldr	r2, [pc, #140]	@ (8005998 <HAL_DMA_Abort+0x464>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d022      	beq.n	8005956 <HAL_DMA_Abort+0x422>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a21      	ldr	r2, [pc, #132]	@ (800599c <HAL_DMA_Abort+0x468>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d01d      	beq.n	8005956 <HAL_DMA_Abort+0x422>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4a20      	ldr	r2, [pc, #128]	@ (80059a0 <HAL_DMA_Abort+0x46c>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d018      	beq.n	8005956 <HAL_DMA_Abort+0x422>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a1e      	ldr	r2, [pc, #120]	@ (80059a4 <HAL_DMA_Abort+0x470>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d013      	beq.n	8005956 <HAL_DMA_Abort+0x422>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a1d      	ldr	r2, [pc, #116]	@ (80059a8 <HAL_DMA_Abort+0x474>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d00e      	beq.n	8005956 <HAL_DMA_Abort+0x422>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a1b      	ldr	r2, [pc, #108]	@ (80059ac <HAL_DMA_Abort+0x478>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d009      	beq.n	8005956 <HAL_DMA_Abort+0x422>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a1a      	ldr	r2, [pc, #104]	@ (80059b0 <HAL_DMA_Abort+0x47c>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d004      	beq.n	8005956 <HAL_DMA_Abort+0x422>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a18      	ldr	r2, [pc, #96]	@ (80059b4 <HAL_DMA_Abort+0x480>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d101      	bne.n	800595a <HAL_DMA_Abort+0x426>
 8005956:	2301      	movs	r3, #1
 8005958:	e000      	b.n	800595c <HAL_DMA_Abort+0x428>
 800595a:	2300      	movs	r3, #0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d02b      	beq.n	80059b8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005964:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800596a:	f003 031f 	and.w	r3, r3, #31
 800596e:	223f      	movs	r2, #63	@ 0x3f
 8005970:	409a      	lsls	r2, r3
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	609a      	str	r2, [r3, #8]
 8005976:	e02a      	b.n	80059ce <HAL_DMA_Abort+0x49a>
 8005978:	40020010 	.word	0x40020010
 800597c:	40020028 	.word	0x40020028
 8005980:	40020040 	.word	0x40020040
 8005984:	40020058 	.word	0x40020058
 8005988:	40020070 	.word	0x40020070
 800598c:	40020088 	.word	0x40020088
 8005990:	400200a0 	.word	0x400200a0
 8005994:	400200b8 	.word	0x400200b8
 8005998:	40020410 	.word	0x40020410
 800599c:	40020428 	.word	0x40020428
 80059a0:	40020440 	.word	0x40020440
 80059a4:	40020458 	.word	0x40020458
 80059a8:	40020470 	.word	0x40020470
 80059ac:	40020488 	.word	0x40020488
 80059b0:	400204a0 	.word	0x400204a0
 80059b4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059bc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059c2:	f003 031f 	and.w	r3, r3, #31
 80059c6:	2201      	movs	r2, #1
 80059c8:	409a      	lsls	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4a4f      	ldr	r2, [pc, #316]	@ (8005b10 <HAL_DMA_Abort+0x5dc>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d072      	beq.n	8005abe <HAL_DMA_Abort+0x58a>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a4d      	ldr	r2, [pc, #308]	@ (8005b14 <HAL_DMA_Abort+0x5e0>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d06d      	beq.n	8005abe <HAL_DMA_Abort+0x58a>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4a4c      	ldr	r2, [pc, #304]	@ (8005b18 <HAL_DMA_Abort+0x5e4>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d068      	beq.n	8005abe <HAL_DMA_Abort+0x58a>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a4a      	ldr	r2, [pc, #296]	@ (8005b1c <HAL_DMA_Abort+0x5e8>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d063      	beq.n	8005abe <HAL_DMA_Abort+0x58a>
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a49      	ldr	r2, [pc, #292]	@ (8005b20 <HAL_DMA_Abort+0x5ec>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d05e      	beq.n	8005abe <HAL_DMA_Abort+0x58a>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a47      	ldr	r2, [pc, #284]	@ (8005b24 <HAL_DMA_Abort+0x5f0>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d059      	beq.n	8005abe <HAL_DMA_Abort+0x58a>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	4a46      	ldr	r2, [pc, #280]	@ (8005b28 <HAL_DMA_Abort+0x5f4>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d054      	beq.n	8005abe <HAL_DMA_Abort+0x58a>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a44      	ldr	r2, [pc, #272]	@ (8005b2c <HAL_DMA_Abort+0x5f8>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d04f      	beq.n	8005abe <HAL_DMA_Abort+0x58a>
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4a43      	ldr	r2, [pc, #268]	@ (8005b30 <HAL_DMA_Abort+0x5fc>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d04a      	beq.n	8005abe <HAL_DMA_Abort+0x58a>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a41      	ldr	r2, [pc, #260]	@ (8005b34 <HAL_DMA_Abort+0x600>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d045      	beq.n	8005abe <HAL_DMA_Abort+0x58a>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a40      	ldr	r2, [pc, #256]	@ (8005b38 <HAL_DMA_Abort+0x604>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d040      	beq.n	8005abe <HAL_DMA_Abort+0x58a>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a3e      	ldr	r2, [pc, #248]	@ (8005b3c <HAL_DMA_Abort+0x608>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d03b      	beq.n	8005abe <HAL_DMA_Abort+0x58a>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a3d      	ldr	r2, [pc, #244]	@ (8005b40 <HAL_DMA_Abort+0x60c>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d036      	beq.n	8005abe <HAL_DMA_Abort+0x58a>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a3b      	ldr	r2, [pc, #236]	@ (8005b44 <HAL_DMA_Abort+0x610>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d031      	beq.n	8005abe <HAL_DMA_Abort+0x58a>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a3a      	ldr	r2, [pc, #232]	@ (8005b48 <HAL_DMA_Abort+0x614>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d02c      	beq.n	8005abe <HAL_DMA_Abort+0x58a>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a38      	ldr	r2, [pc, #224]	@ (8005b4c <HAL_DMA_Abort+0x618>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d027      	beq.n	8005abe <HAL_DMA_Abort+0x58a>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a37      	ldr	r2, [pc, #220]	@ (8005b50 <HAL_DMA_Abort+0x61c>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d022      	beq.n	8005abe <HAL_DMA_Abort+0x58a>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a35      	ldr	r2, [pc, #212]	@ (8005b54 <HAL_DMA_Abort+0x620>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d01d      	beq.n	8005abe <HAL_DMA_Abort+0x58a>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a34      	ldr	r2, [pc, #208]	@ (8005b58 <HAL_DMA_Abort+0x624>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d018      	beq.n	8005abe <HAL_DMA_Abort+0x58a>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a32      	ldr	r2, [pc, #200]	@ (8005b5c <HAL_DMA_Abort+0x628>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d013      	beq.n	8005abe <HAL_DMA_Abort+0x58a>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a31      	ldr	r2, [pc, #196]	@ (8005b60 <HAL_DMA_Abort+0x62c>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d00e      	beq.n	8005abe <HAL_DMA_Abort+0x58a>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a2f      	ldr	r2, [pc, #188]	@ (8005b64 <HAL_DMA_Abort+0x630>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d009      	beq.n	8005abe <HAL_DMA_Abort+0x58a>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a2e      	ldr	r2, [pc, #184]	@ (8005b68 <HAL_DMA_Abort+0x634>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d004      	beq.n	8005abe <HAL_DMA_Abort+0x58a>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a2c      	ldr	r2, [pc, #176]	@ (8005b6c <HAL_DMA_Abort+0x638>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d101      	bne.n	8005ac2 <HAL_DMA_Abort+0x58e>
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e000      	b.n	8005ac4 <HAL_DMA_Abort+0x590>
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d015      	beq.n	8005af4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005ad0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00c      	beq.n	8005af4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ae4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005ae8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aee:	687a      	ldr	r2, [r7, #4]
 8005af0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005af2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3718      	adds	r7, #24
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	40020010 	.word	0x40020010
 8005b14:	40020028 	.word	0x40020028
 8005b18:	40020040 	.word	0x40020040
 8005b1c:	40020058 	.word	0x40020058
 8005b20:	40020070 	.word	0x40020070
 8005b24:	40020088 	.word	0x40020088
 8005b28:	400200a0 	.word	0x400200a0
 8005b2c:	400200b8 	.word	0x400200b8
 8005b30:	40020410 	.word	0x40020410
 8005b34:	40020428 	.word	0x40020428
 8005b38:	40020440 	.word	0x40020440
 8005b3c:	40020458 	.word	0x40020458
 8005b40:	40020470 	.word	0x40020470
 8005b44:	40020488 	.word	0x40020488
 8005b48:	400204a0 	.word	0x400204a0
 8005b4c:	400204b8 	.word	0x400204b8
 8005b50:	58025408 	.word	0x58025408
 8005b54:	5802541c 	.word	0x5802541c
 8005b58:	58025430 	.word	0x58025430
 8005b5c:	58025444 	.word	0x58025444
 8005b60:	58025458 	.word	0x58025458
 8005b64:	5802546c 	.word	0x5802546c
 8005b68:	58025480 	.word	0x58025480
 8005b6c:	58025494 	.word	0x58025494

08005b70 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d101      	bne.n	8005b82 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e237      	b.n	8005ff2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d004      	beq.n	8005b98 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2280      	movs	r2, #128	@ 0x80
 8005b92:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e22c      	b.n	8005ff2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a5c      	ldr	r2, [pc, #368]	@ (8005d10 <HAL_DMA_Abort_IT+0x1a0>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d04a      	beq.n	8005c38 <HAL_DMA_Abort_IT+0xc8>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a5b      	ldr	r2, [pc, #364]	@ (8005d14 <HAL_DMA_Abort_IT+0x1a4>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d045      	beq.n	8005c38 <HAL_DMA_Abort_IT+0xc8>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a59      	ldr	r2, [pc, #356]	@ (8005d18 <HAL_DMA_Abort_IT+0x1a8>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d040      	beq.n	8005c38 <HAL_DMA_Abort_IT+0xc8>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a58      	ldr	r2, [pc, #352]	@ (8005d1c <HAL_DMA_Abort_IT+0x1ac>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d03b      	beq.n	8005c38 <HAL_DMA_Abort_IT+0xc8>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a56      	ldr	r2, [pc, #344]	@ (8005d20 <HAL_DMA_Abort_IT+0x1b0>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d036      	beq.n	8005c38 <HAL_DMA_Abort_IT+0xc8>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	4a55      	ldr	r2, [pc, #340]	@ (8005d24 <HAL_DMA_Abort_IT+0x1b4>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d031      	beq.n	8005c38 <HAL_DMA_Abort_IT+0xc8>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a53      	ldr	r2, [pc, #332]	@ (8005d28 <HAL_DMA_Abort_IT+0x1b8>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d02c      	beq.n	8005c38 <HAL_DMA_Abort_IT+0xc8>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4a52      	ldr	r2, [pc, #328]	@ (8005d2c <HAL_DMA_Abort_IT+0x1bc>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d027      	beq.n	8005c38 <HAL_DMA_Abort_IT+0xc8>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a50      	ldr	r2, [pc, #320]	@ (8005d30 <HAL_DMA_Abort_IT+0x1c0>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d022      	beq.n	8005c38 <HAL_DMA_Abort_IT+0xc8>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a4f      	ldr	r2, [pc, #316]	@ (8005d34 <HAL_DMA_Abort_IT+0x1c4>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d01d      	beq.n	8005c38 <HAL_DMA_Abort_IT+0xc8>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a4d      	ldr	r2, [pc, #308]	@ (8005d38 <HAL_DMA_Abort_IT+0x1c8>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d018      	beq.n	8005c38 <HAL_DMA_Abort_IT+0xc8>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a4c      	ldr	r2, [pc, #304]	@ (8005d3c <HAL_DMA_Abort_IT+0x1cc>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d013      	beq.n	8005c38 <HAL_DMA_Abort_IT+0xc8>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a4a      	ldr	r2, [pc, #296]	@ (8005d40 <HAL_DMA_Abort_IT+0x1d0>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d00e      	beq.n	8005c38 <HAL_DMA_Abort_IT+0xc8>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a49      	ldr	r2, [pc, #292]	@ (8005d44 <HAL_DMA_Abort_IT+0x1d4>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d009      	beq.n	8005c38 <HAL_DMA_Abort_IT+0xc8>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a47      	ldr	r2, [pc, #284]	@ (8005d48 <HAL_DMA_Abort_IT+0x1d8>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d004      	beq.n	8005c38 <HAL_DMA_Abort_IT+0xc8>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a46      	ldr	r2, [pc, #280]	@ (8005d4c <HAL_DMA_Abort_IT+0x1dc>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d101      	bne.n	8005c3c <HAL_DMA_Abort_IT+0xcc>
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e000      	b.n	8005c3e <HAL_DMA_Abort_IT+0xce>
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f000 8086 	beq.w	8005d50 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2204      	movs	r2, #4
 8005c48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4a2f      	ldr	r2, [pc, #188]	@ (8005d10 <HAL_DMA_Abort_IT+0x1a0>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d04a      	beq.n	8005cec <HAL_DMA_Abort_IT+0x17c>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4a2e      	ldr	r2, [pc, #184]	@ (8005d14 <HAL_DMA_Abort_IT+0x1a4>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d045      	beq.n	8005cec <HAL_DMA_Abort_IT+0x17c>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a2c      	ldr	r2, [pc, #176]	@ (8005d18 <HAL_DMA_Abort_IT+0x1a8>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d040      	beq.n	8005cec <HAL_DMA_Abort_IT+0x17c>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a2b      	ldr	r2, [pc, #172]	@ (8005d1c <HAL_DMA_Abort_IT+0x1ac>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d03b      	beq.n	8005cec <HAL_DMA_Abort_IT+0x17c>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a29      	ldr	r2, [pc, #164]	@ (8005d20 <HAL_DMA_Abort_IT+0x1b0>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d036      	beq.n	8005cec <HAL_DMA_Abort_IT+0x17c>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a28      	ldr	r2, [pc, #160]	@ (8005d24 <HAL_DMA_Abort_IT+0x1b4>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d031      	beq.n	8005cec <HAL_DMA_Abort_IT+0x17c>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a26      	ldr	r2, [pc, #152]	@ (8005d28 <HAL_DMA_Abort_IT+0x1b8>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d02c      	beq.n	8005cec <HAL_DMA_Abort_IT+0x17c>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a25      	ldr	r2, [pc, #148]	@ (8005d2c <HAL_DMA_Abort_IT+0x1bc>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d027      	beq.n	8005cec <HAL_DMA_Abort_IT+0x17c>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	4a23      	ldr	r2, [pc, #140]	@ (8005d30 <HAL_DMA_Abort_IT+0x1c0>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d022      	beq.n	8005cec <HAL_DMA_Abort_IT+0x17c>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a22      	ldr	r2, [pc, #136]	@ (8005d34 <HAL_DMA_Abort_IT+0x1c4>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d01d      	beq.n	8005cec <HAL_DMA_Abort_IT+0x17c>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a20      	ldr	r2, [pc, #128]	@ (8005d38 <HAL_DMA_Abort_IT+0x1c8>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d018      	beq.n	8005cec <HAL_DMA_Abort_IT+0x17c>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a1f      	ldr	r2, [pc, #124]	@ (8005d3c <HAL_DMA_Abort_IT+0x1cc>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d013      	beq.n	8005cec <HAL_DMA_Abort_IT+0x17c>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a1d      	ldr	r2, [pc, #116]	@ (8005d40 <HAL_DMA_Abort_IT+0x1d0>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d00e      	beq.n	8005cec <HAL_DMA_Abort_IT+0x17c>
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	4a1c      	ldr	r2, [pc, #112]	@ (8005d44 <HAL_DMA_Abort_IT+0x1d4>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	d009      	beq.n	8005cec <HAL_DMA_Abort_IT+0x17c>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a1a      	ldr	r2, [pc, #104]	@ (8005d48 <HAL_DMA_Abort_IT+0x1d8>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d004      	beq.n	8005cec <HAL_DMA_Abort_IT+0x17c>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a19      	ldr	r2, [pc, #100]	@ (8005d4c <HAL_DMA_Abort_IT+0x1dc>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d108      	bne.n	8005cfe <HAL_DMA_Abort_IT+0x18e>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f022 0201 	bic.w	r2, r2, #1
 8005cfa:	601a      	str	r2, [r3, #0]
 8005cfc:	e178      	b.n	8005ff0 <HAL_DMA_Abort_IT+0x480>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f022 0201 	bic.w	r2, r2, #1
 8005d0c:	601a      	str	r2, [r3, #0]
 8005d0e:	e16f      	b.n	8005ff0 <HAL_DMA_Abort_IT+0x480>
 8005d10:	40020010 	.word	0x40020010
 8005d14:	40020028 	.word	0x40020028
 8005d18:	40020040 	.word	0x40020040
 8005d1c:	40020058 	.word	0x40020058
 8005d20:	40020070 	.word	0x40020070
 8005d24:	40020088 	.word	0x40020088
 8005d28:	400200a0 	.word	0x400200a0
 8005d2c:	400200b8 	.word	0x400200b8
 8005d30:	40020410 	.word	0x40020410
 8005d34:	40020428 	.word	0x40020428
 8005d38:	40020440 	.word	0x40020440
 8005d3c:	40020458 	.word	0x40020458
 8005d40:	40020470 	.word	0x40020470
 8005d44:	40020488 	.word	0x40020488
 8005d48:	400204a0 	.word	0x400204a0
 8005d4c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f022 020e 	bic.w	r2, r2, #14
 8005d5e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a6c      	ldr	r2, [pc, #432]	@ (8005f18 <HAL_DMA_Abort_IT+0x3a8>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d04a      	beq.n	8005e00 <HAL_DMA_Abort_IT+0x290>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a6b      	ldr	r2, [pc, #428]	@ (8005f1c <HAL_DMA_Abort_IT+0x3ac>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d045      	beq.n	8005e00 <HAL_DMA_Abort_IT+0x290>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a69      	ldr	r2, [pc, #420]	@ (8005f20 <HAL_DMA_Abort_IT+0x3b0>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d040      	beq.n	8005e00 <HAL_DMA_Abort_IT+0x290>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a68      	ldr	r2, [pc, #416]	@ (8005f24 <HAL_DMA_Abort_IT+0x3b4>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d03b      	beq.n	8005e00 <HAL_DMA_Abort_IT+0x290>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	4a66      	ldr	r2, [pc, #408]	@ (8005f28 <HAL_DMA_Abort_IT+0x3b8>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d036      	beq.n	8005e00 <HAL_DMA_Abort_IT+0x290>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a65      	ldr	r2, [pc, #404]	@ (8005f2c <HAL_DMA_Abort_IT+0x3bc>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d031      	beq.n	8005e00 <HAL_DMA_Abort_IT+0x290>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a63      	ldr	r2, [pc, #396]	@ (8005f30 <HAL_DMA_Abort_IT+0x3c0>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d02c      	beq.n	8005e00 <HAL_DMA_Abort_IT+0x290>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a62      	ldr	r2, [pc, #392]	@ (8005f34 <HAL_DMA_Abort_IT+0x3c4>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d027      	beq.n	8005e00 <HAL_DMA_Abort_IT+0x290>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a60      	ldr	r2, [pc, #384]	@ (8005f38 <HAL_DMA_Abort_IT+0x3c8>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d022      	beq.n	8005e00 <HAL_DMA_Abort_IT+0x290>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a5f      	ldr	r2, [pc, #380]	@ (8005f3c <HAL_DMA_Abort_IT+0x3cc>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d01d      	beq.n	8005e00 <HAL_DMA_Abort_IT+0x290>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a5d      	ldr	r2, [pc, #372]	@ (8005f40 <HAL_DMA_Abort_IT+0x3d0>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d018      	beq.n	8005e00 <HAL_DMA_Abort_IT+0x290>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a5c      	ldr	r2, [pc, #368]	@ (8005f44 <HAL_DMA_Abort_IT+0x3d4>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d013      	beq.n	8005e00 <HAL_DMA_Abort_IT+0x290>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a5a      	ldr	r2, [pc, #360]	@ (8005f48 <HAL_DMA_Abort_IT+0x3d8>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d00e      	beq.n	8005e00 <HAL_DMA_Abort_IT+0x290>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a59      	ldr	r2, [pc, #356]	@ (8005f4c <HAL_DMA_Abort_IT+0x3dc>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d009      	beq.n	8005e00 <HAL_DMA_Abort_IT+0x290>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a57      	ldr	r2, [pc, #348]	@ (8005f50 <HAL_DMA_Abort_IT+0x3e0>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d004      	beq.n	8005e00 <HAL_DMA_Abort_IT+0x290>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a56      	ldr	r2, [pc, #344]	@ (8005f54 <HAL_DMA_Abort_IT+0x3e4>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d108      	bne.n	8005e12 <HAL_DMA_Abort_IT+0x2a2>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f022 0201 	bic.w	r2, r2, #1
 8005e0e:	601a      	str	r2, [r3, #0]
 8005e10:	e007      	b.n	8005e22 <HAL_DMA_Abort_IT+0x2b2>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f022 0201 	bic.w	r2, r2, #1
 8005e20:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a3c      	ldr	r2, [pc, #240]	@ (8005f18 <HAL_DMA_Abort_IT+0x3a8>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d072      	beq.n	8005f12 <HAL_DMA_Abort_IT+0x3a2>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a3a      	ldr	r2, [pc, #232]	@ (8005f1c <HAL_DMA_Abort_IT+0x3ac>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d06d      	beq.n	8005f12 <HAL_DMA_Abort_IT+0x3a2>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a39      	ldr	r2, [pc, #228]	@ (8005f20 <HAL_DMA_Abort_IT+0x3b0>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d068      	beq.n	8005f12 <HAL_DMA_Abort_IT+0x3a2>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	4a37      	ldr	r2, [pc, #220]	@ (8005f24 <HAL_DMA_Abort_IT+0x3b4>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d063      	beq.n	8005f12 <HAL_DMA_Abort_IT+0x3a2>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a36      	ldr	r2, [pc, #216]	@ (8005f28 <HAL_DMA_Abort_IT+0x3b8>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d05e      	beq.n	8005f12 <HAL_DMA_Abort_IT+0x3a2>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a34      	ldr	r2, [pc, #208]	@ (8005f2c <HAL_DMA_Abort_IT+0x3bc>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d059      	beq.n	8005f12 <HAL_DMA_Abort_IT+0x3a2>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a33      	ldr	r2, [pc, #204]	@ (8005f30 <HAL_DMA_Abort_IT+0x3c0>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d054      	beq.n	8005f12 <HAL_DMA_Abort_IT+0x3a2>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a31      	ldr	r2, [pc, #196]	@ (8005f34 <HAL_DMA_Abort_IT+0x3c4>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d04f      	beq.n	8005f12 <HAL_DMA_Abort_IT+0x3a2>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a30      	ldr	r2, [pc, #192]	@ (8005f38 <HAL_DMA_Abort_IT+0x3c8>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d04a      	beq.n	8005f12 <HAL_DMA_Abort_IT+0x3a2>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a2e      	ldr	r2, [pc, #184]	@ (8005f3c <HAL_DMA_Abort_IT+0x3cc>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d045      	beq.n	8005f12 <HAL_DMA_Abort_IT+0x3a2>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a2d      	ldr	r2, [pc, #180]	@ (8005f40 <HAL_DMA_Abort_IT+0x3d0>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d040      	beq.n	8005f12 <HAL_DMA_Abort_IT+0x3a2>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a2b      	ldr	r2, [pc, #172]	@ (8005f44 <HAL_DMA_Abort_IT+0x3d4>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d03b      	beq.n	8005f12 <HAL_DMA_Abort_IT+0x3a2>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a2a      	ldr	r2, [pc, #168]	@ (8005f48 <HAL_DMA_Abort_IT+0x3d8>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d036      	beq.n	8005f12 <HAL_DMA_Abort_IT+0x3a2>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a28      	ldr	r2, [pc, #160]	@ (8005f4c <HAL_DMA_Abort_IT+0x3dc>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d031      	beq.n	8005f12 <HAL_DMA_Abort_IT+0x3a2>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a27      	ldr	r2, [pc, #156]	@ (8005f50 <HAL_DMA_Abort_IT+0x3e0>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d02c      	beq.n	8005f12 <HAL_DMA_Abort_IT+0x3a2>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a25      	ldr	r2, [pc, #148]	@ (8005f54 <HAL_DMA_Abort_IT+0x3e4>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d027      	beq.n	8005f12 <HAL_DMA_Abort_IT+0x3a2>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a24      	ldr	r2, [pc, #144]	@ (8005f58 <HAL_DMA_Abort_IT+0x3e8>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d022      	beq.n	8005f12 <HAL_DMA_Abort_IT+0x3a2>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a22      	ldr	r2, [pc, #136]	@ (8005f5c <HAL_DMA_Abort_IT+0x3ec>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d01d      	beq.n	8005f12 <HAL_DMA_Abort_IT+0x3a2>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a21      	ldr	r2, [pc, #132]	@ (8005f60 <HAL_DMA_Abort_IT+0x3f0>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d018      	beq.n	8005f12 <HAL_DMA_Abort_IT+0x3a2>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	4a1f      	ldr	r2, [pc, #124]	@ (8005f64 <HAL_DMA_Abort_IT+0x3f4>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d013      	beq.n	8005f12 <HAL_DMA_Abort_IT+0x3a2>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	4a1e      	ldr	r2, [pc, #120]	@ (8005f68 <HAL_DMA_Abort_IT+0x3f8>)
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d00e      	beq.n	8005f12 <HAL_DMA_Abort_IT+0x3a2>
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a1c      	ldr	r2, [pc, #112]	@ (8005f6c <HAL_DMA_Abort_IT+0x3fc>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d009      	beq.n	8005f12 <HAL_DMA_Abort_IT+0x3a2>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a1b      	ldr	r2, [pc, #108]	@ (8005f70 <HAL_DMA_Abort_IT+0x400>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d004      	beq.n	8005f12 <HAL_DMA_Abort_IT+0x3a2>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a19      	ldr	r2, [pc, #100]	@ (8005f74 <HAL_DMA_Abort_IT+0x404>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d132      	bne.n	8005f78 <HAL_DMA_Abort_IT+0x408>
 8005f12:	2301      	movs	r3, #1
 8005f14:	e031      	b.n	8005f7a <HAL_DMA_Abort_IT+0x40a>
 8005f16:	bf00      	nop
 8005f18:	40020010 	.word	0x40020010
 8005f1c:	40020028 	.word	0x40020028
 8005f20:	40020040 	.word	0x40020040
 8005f24:	40020058 	.word	0x40020058
 8005f28:	40020070 	.word	0x40020070
 8005f2c:	40020088 	.word	0x40020088
 8005f30:	400200a0 	.word	0x400200a0
 8005f34:	400200b8 	.word	0x400200b8
 8005f38:	40020410 	.word	0x40020410
 8005f3c:	40020428 	.word	0x40020428
 8005f40:	40020440 	.word	0x40020440
 8005f44:	40020458 	.word	0x40020458
 8005f48:	40020470 	.word	0x40020470
 8005f4c:	40020488 	.word	0x40020488
 8005f50:	400204a0 	.word	0x400204a0
 8005f54:	400204b8 	.word	0x400204b8
 8005f58:	58025408 	.word	0x58025408
 8005f5c:	5802541c 	.word	0x5802541c
 8005f60:	58025430 	.word	0x58025430
 8005f64:	58025444 	.word	0x58025444
 8005f68:	58025458 	.word	0x58025458
 8005f6c:	5802546c 	.word	0x5802546c
 8005f70:	58025480 	.word	0x58025480
 8005f74:	58025494 	.word	0x58025494
 8005f78:	2300      	movs	r3, #0
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d028      	beq.n	8005fd0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005f88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005f8c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f92:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f98:	f003 031f 	and.w	r3, r3, #31
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	409a      	lsls	r2, r3
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005fac:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00c      	beq.n	8005fd0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fc0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005fc4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005fce:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d003      	beq.n	8005ff0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop

08005ffc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b08a      	sub	sp, #40	@ 0x28
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8006004:	2300      	movs	r3, #0
 8006006:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006008:	4b67      	ldr	r3, [pc, #412]	@ (80061a8 <HAL_DMA_IRQHandler+0x1ac>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a67      	ldr	r2, [pc, #412]	@ (80061ac <HAL_DMA_IRQHandler+0x1b0>)
 800600e:	fba2 2303 	umull	r2, r3, r2, r3
 8006012:	0a9b      	lsrs	r3, r3, #10
 8006014:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800601a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006020:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8006022:	6a3b      	ldr	r3, [r7, #32]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a5f      	ldr	r2, [pc, #380]	@ (80061b0 <HAL_DMA_IRQHandler+0x1b4>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d04a      	beq.n	80060ce <HAL_DMA_IRQHandler+0xd2>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a5d      	ldr	r2, [pc, #372]	@ (80061b4 <HAL_DMA_IRQHandler+0x1b8>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d045      	beq.n	80060ce <HAL_DMA_IRQHandler+0xd2>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a5c      	ldr	r2, [pc, #368]	@ (80061b8 <HAL_DMA_IRQHandler+0x1bc>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d040      	beq.n	80060ce <HAL_DMA_IRQHandler+0xd2>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a5a      	ldr	r2, [pc, #360]	@ (80061bc <HAL_DMA_IRQHandler+0x1c0>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d03b      	beq.n	80060ce <HAL_DMA_IRQHandler+0xd2>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a59      	ldr	r2, [pc, #356]	@ (80061c0 <HAL_DMA_IRQHandler+0x1c4>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d036      	beq.n	80060ce <HAL_DMA_IRQHandler+0xd2>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a57      	ldr	r2, [pc, #348]	@ (80061c4 <HAL_DMA_IRQHandler+0x1c8>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d031      	beq.n	80060ce <HAL_DMA_IRQHandler+0xd2>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a56      	ldr	r2, [pc, #344]	@ (80061c8 <HAL_DMA_IRQHandler+0x1cc>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d02c      	beq.n	80060ce <HAL_DMA_IRQHandler+0xd2>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a54      	ldr	r2, [pc, #336]	@ (80061cc <HAL_DMA_IRQHandler+0x1d0>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d027      	beq.n	80060ce <HAL_DMA_IRQHandler+0xd2>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a53      	ldr	r2, [pc, #332]	@ (80061d0 <HAL_DMA_IRQHandler+0x1d4>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d022      	beq.n	80060ce <HAL_DMA_IRQHandler+0xd2>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a51      	ldr	r2, [pc, #324]	@ (80061d4 <HAL_DMA_IRQHandler+0x1d8>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d01d      	beq.n	80060ce <HAL_DMA_IRQHandler+0xd2>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a50      	ldr	r2, [pc, #320]	@ (80061d8 <HAL_DMA_IRQHandler+0x1dc>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d018      	beq.n	80060ce <HAL_DMA_IRQHandler+0xd2>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a4e      	ldr	r2, [pc, #312]	@ (80061dc <HAL_DMA_IRQHandler+0x1e0>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d013      	beq.n	80060ce <HAL_DMA_IRQHandler+0xd2>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a4d      	ldr	r2, [pc, #308]	@ (80061e0 <HAL_DMA_IRQHandler+0x1e4>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d00e      	beq.n	80060ce <HAL_DMA_IRQHandler+0xd2>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a4b      	ldr	r2, [pc, #300]	@ (80061e4 <HAL_DMA_IRQHandler+0x1e8>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d009      	beq.n	80060ce <HAL_DMA_IRQHandler+0xd2>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a4a      	ldr	r2, [pc, #296]	@ (80061e8 <HAL_DMA_IRQHandler+0x1ec>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d004      	beq.n	80060ce <HAL_DMA_IRQHandler+0xd2>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a48      	ldr	r2, [pc, #288]	@ (80061ec <HAL_DMA_IRQHandler+0x1f0>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d101      	bne.n	80060d2 <HAL_DMA_IRQHandler+0xd6>
 80060ce:	2301      	movs	r3, #1
 80060d0:	e000      	b.n	80060d4 <HAL_DMA_IRQHandler+0xd8>
 80060d2:	2300      	movs	r3, #0
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	f000 842b 	beq.w	8006930 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060de:	f003 031f 	and.w	r3, r3, #31
 80060e2:	2208      	movs	r2, #8
 80060e4:	409a      	lsls	r2, r3
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	4013      	ands	r3, r2
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	f000 80a2 	beq.w	8006234 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a2e      	ldr	r2, [pc, #184]	@ (80061b0 <HAL_DMA_IRQHandler+0x1b4>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d04a      	beq.n	8006190 <HAL_DMA_IRQHandler+0x194>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a2d      	ldr	r2, [pc, #180]	@ (80061b4 <HAL_DMA_IRQHandler+0x1b8>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d045      	beq.n	8006190 <HAL_DMA_IRQHandler+0x194>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a2b      	ldr	r2, [pc, #172]	@ (80061b8 <HAL_DMA_IRQHandler+0x1bc>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d040      	beq.n	8006190 <HAL_DMA_IRQHandler+0x194>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a2a      	ldr	r2, [pc, #168]	@ (80061bc <HAL_DMA_IRQHandler+0x1c0>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d03b      	beq.n	8006190 <HAL_DMA_IRQHandler+0x194>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a28      	ldr	r2, [pc, #160]	@ (80061c0 <HAL_DMA_IRQHandler+0x1c4>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d036      	beq.n	8006190 <HAL_DMA_IRQHandler+0x194>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a27      	ldr	r2, [pc, #156]	@ (80061c4 <HAL_DMA_IRQHandler+0x1c8>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d031      	beq.n	8006190 <HAL_DMA_IRQHandler+0x194>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a25      	ldr	r2, [pc, #148]	@ (80061c8 <HAL_DMA_IRQHandler+0x1cc>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d02c      	beq.n	8006190 <HAL_DMA_IRQHandler+0x194>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a24      	ldr	r2, [pc, #144]	@ (80061cc <HAL_DMA_IRQHandler+0x1d0>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d027      	beq.n	8006190 <HAL_DMA_IRQHandler+0x194>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4a22      	ldr	r2, [pc, #136]	@ (80061d0 <HAL_DMA_IRQHandler+0x1d4>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d022      	beq.n	8006190 <HAL_DMA_IRQHandler+0x194>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a21      	ldr	r2, [pc, #132]	@ (80061d4 <HAL_DMA_IRQHandler+0x1d8>)
 8006150:	4293      	cmp	r3, r2
 8006152:	d01d      	beq.n	8006190 <HAL_DMA_IRQHandler+0x194>
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a1f      	ldr	r2, [pc, #124]	@ (80061d8 <HAL_DMA_IRQHandler+0x1dc>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d018      	beq.n	8006190 <HAL_DMA_IRQHandler+0x194>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4a1e      	ldr	r2, [pc, #120]	@ (80061dc <HAL_DMA_IRQHandler+0x1e0>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d013      	beq.n	8006190 <HAL_DMA_IRQHandler+0x194>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a1c      	ldr	r2, [pc, #112]	@ (80061e0 <HAL_DMA_IRQHandler+0x1e4>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d00e      	beq.n	8006190 <HAL_DMA_IRQHandler+0x194>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a1b      	ldr	r2, [pc, #108]	@ (80061e4 <HAL_DMA_IRQHandler+0x1e8>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d009      	beq.n	8006190 <HAL_DMA_IRQHandler+0x194>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a19      	ldr	r2, [pc, #100]	@ (80061e8 <HAL_DMA_IRQHandler+0x1ec>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d004      	beq.n	8006190 <HAL_DMA_IRQHandler+0x194>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a18      	ldr	r2, [pc, #96]	@ (80061ec <HAL_DMA_IRQHandler+0x1f0>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d12f      	bne.n	80061f0 <HAL_DMA_IRQHandler+0x1f4>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0304 	and.w	r3, r3, #4
 800619a:	2b00      	cmp	r3, #0
 800619c:	bf14      	ite	ne
 800619e:	2301      	movne	r3, #1
 80061a0:	2300      	moveq	r3, #0
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	e02e      	b.n	8006204 <HAL_DMA_IRQHandler+0x208>
 80061a6:	bf00      	nop
 80061a8:	24000004 	.word	0x24000004
 80061ac:	1b4e81b5 	.word	0x1b4e81b5
 80061b0:	40020010 	.word	0x40020010
 80061b4:	40020028 	.word	0x40020028
 80061b8:	40020040 	.word	0x40020040
 80061bc:	40020058 	.word	0x40020058
 80061c0:	40020070 	.word	0x40020070
 80061c4:	40020088 	.word	0x40020088
 80061c8:	400200a0 	.word	0x400200a0
 80061cc:	400200b8 	.word	0x400200b8
 80061d0:	40020410 	.word	0x40020410
 80061d4:	40020428 	.word	0x40020428
 80061d8:	40020440 	.word	0x40020440
 80061dc:	40020458 	.word	0x40020458
 80061e0:	40020470 	.word	0x40020470
 80061e4:	40020488 	.word	0x40020488
 80061e8:	400204a0 	.word	0x400204a0
 80061ec:	400204b8 	.word	0x400204b8
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f003 0308 	and.w	r3, r3, #8
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	bf14      	ite	ne
 80061fe:	2301      	movne	r3, #1
 8006200:	2300      	moveq	r3, #0
 8006202:	b2db      	uxtb	r3, r3
 8006204:	2b00      	cmp	r3, #0
 8006206:	d015      	beq.n	8006234 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f022 0204 	bic.w	r2, r2, #4
 8006216:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800621c:	f003 031f 	and.w	r3, r3, #31
 8006220:	2208      	movs	r2, #8
 8006222:	409a      	lsls	r2, r3
 8006224:	6a3b      	ldr	r3, [r7, #32]
 8006226:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800622c:	f043 0201 	orr.w	r2, r3, #1
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006238:	f003 031f 	and.w	r3, r3, #31
 800623c:	69ba      	ldr	r2, [r7, #24]
 800623e:	fa22 f303 	lsr.w	r3, r2, r3
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	2b00      	cmp	r3, #0
 8006248:	d06e      	beq.n	8006328 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a69      	ldr	r2, [pc, #420]	@ (80063f4 <HAL_DMA_IRQHandler+0x3f8>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d04a      	beq.n	80062ea <HAL_DMA_IRQHandler+0x2ee>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a67      	ldr	r2, [pc, #412]	@ (80063f8 <HAL_DMA_IRQHandler+0x3fc>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d045      	beq.n	80062ea <HAL_DMA_IRQHandler+0x2ee>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a66      	ldr	r2, [pc, #408]	@ (80063fc <HAL_DMA_IRQHandler+0x400>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d040      	beq.n	80062ea <HAL_DMA_IRQHandler+0x2ee>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a64      	ldr	r2, [pc, #400]	@ (8006400 <HAL_DMA_IRQHandler+0x404>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d03b      	beq.n	80062ea <HAL_DMA_IRQHandler+0x2ee>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a63      	ldr	r2, [pc, #396]	@ (8006404 <HAL_DMA_IRQHandler+0x408>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d036      	beq.n	80062ea <HAL_DMA_IRQHandler+0x2ee>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a61      	ldr	r2, [pc, #388]	@ (8006408 <HAL_DMA_IRQHandler+0x40c>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d031      	beq.n	80062ea <HAL_DMA_IRQHandler+0x2ee>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a60      	ldr	r2, [pc, #384]	@ (800640c <HAL_DMA_IRQHandler+0x410>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d02c      	beq.n	80062ea <HAL_DMA_IRQHandler+0x2ee>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a5e      	ldr	r2, [pc, #376]	@ (8006410 <HAL_DMA_IRQHandler+0x414>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d027      	beq.n	80062ea <HAL_DMA_IRQHandler+0x2ee>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a5d      	ldr	r2, [pc, #372]	@ (8006414 <HAL_DMA_IRQHandler+0x418>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d022      	beq.n	80062ea <HAL_DMA_IRQHandler+0x2ee>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a5b      	ldr	r2, [pc, #364]	@ (8006418 <HAL_DMA_IRQHandler+0x41c>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d01d      	beq.n	80062ea <HAL_DMA_IRQHandler+0x2ee>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a5a      	ldr	r2, [pc, #360]	@ (800641c <HAL_DMA_IRQHandler+0x420>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d018      	beq.n	80062ea <HAL_DMA_IRQHandler+0x2ee>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a58      	ldr	r2, [pc, #352]	@ (8006420 <HAL_DMA_IRQHandler+0x424>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d013      	beq.n	80062ea <HAL_DMA_IRQHandler+0x2ee>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a57      	ldr	r2, [pc, #348]	@ (8006424 <HAL_DMA_IRQHandler+0x428>)
 80062c8:	4293      	cmp	r3, r2
 80062ca:	d00e      	beq.n	80062ea <HAL_DMA_IRQHandler+0x2ee>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a55      	ldr	r2, [pc, #340]	@ (8006428 <HAL_DMA_IRQHandler+0x42c>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d009      	beq.n	80062ea <HAL_DMA_IRQHandler+0x2ee>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a54      	ldr	r2, [pc, #336]	@ (800642c <HAL_DMA_IRQHandler+0x430>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d004      	beq.n	80062ea <HAL_DMA_IRQHandler+0x2ee>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a52      	ldr	r2, [pc, #328]	@ (8006430 <HAL_DMA_IRQHandler+0x434>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d10a      	bne.n	8006300 <HAL_DMA_IRQHandler+0x304>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	695b      	ldr	r3, [r3, #20]
 80062f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	bf14      	ite	ne
 80062f8:	2301      	movne	r3, #1
 80062fa:	2300      	moveq	r3, #0
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	e003      	b.n	8006308 <HAL_DMA_IRQHandler+0x30c>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2300      	movs	r3, #0
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00d      	beq.n	8006328 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006310:	f003 031f 	and.w	r3, r3, #31
 8006314:	2201      	movs	r2, #1
 8006316:	409a      	lsls	r2, r3
 8006318:	6a3b      	ldr	r3, [r7, #32]
 800631a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006320:	f043 0202 	orr.w	r2, r3, #2
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800632c:	f003 031f 	and.w	r3, r3, #31
 8006330:	2204      	movs	r2, #4
 8006332:	409a      	lsls	r2, r3
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	4013      	ands	r3, r2
 8006338:	2b00      	cmp	r3, #0
 800633a:	f000 808f 	beq.w	800645c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a2c      	ldr	r2, [pc, #176]	@ (80063f4 <HAL_DMA_IRQHandler+0x3f8>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d04a      	beq.n	80063de <HAL_DMA_IRQHandler+0x3e2>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a2a      	ldr	r2, [pc, #168]	@ (80063f8 <HAL_DMA_IRQHandler+0x3fc>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d045      	beq.n	80063de <HAL_DMA_IRQHandler+0x3e2>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a29      	ldr	r2, [pc, #164]	@ (80063fc <HAL_DMA_IRQHandler+0x400>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d040      	beq.n	80063de <HAL_DMA_IRQHandler+0x3e2>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a27      	ldr	r2, [pc, #156]	@ (8006400 <HAL_DMA_IRQHandler+0x404>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d03b      	beq.n	80063de <HAL_DMA_IRQHandler+0x3e2>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a26      	ldr	r2, [pc, #152]	@ (8006404 <HAL_DMA_IRQHandler+0x408>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d036      	beq.n	80063de <HAL_DMA_IRQHandler+0x3e2>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a24      	ldr	r2, [pc, #144]	@ (8006408 <HAL_DMA_IRQHandler+0x40c>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d031      	beq.n	80063de <HAL_DMA_IRQHandler+0x3e2>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a23      	ldr	r2, [pc, #140]	@ (800640c <HAL_DMA_IRQHandler+0x410>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d02c      	beq.n	80063de <HAL_DMA_IRQHandler+0x3e2>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a21      	ldr	r2, [pc, #132]	@ (8006410 <HAL_DMA_IRQHandler+0x414>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d027      	beq.n	80063de <HAL_DMA_IRQHandler+0x3e2>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a20      	ldr	r2, [pc, #128]	@ (8006414 <HAL_DMA_IRQHandler+0x418>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d022      	beq.n	80063de <HAL_DMA_IRQHandler+0x3e2>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a1e      	ldr	r2, [pc, #120]	@ (8006418 <HAL_DMA_IRQHandler+0x41c>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d01d      	beq.n	80063de <HAL_DMA_IRQHandler+0x3e2>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a1d      	ldr	r2, [pc, #116]	@ (800641c <HAL_DMA_IRQHandler+0x420>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d018      	beq.n	80063de <HAL_DMA_IRQHandler+0x3e2>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a1b      	ldr	r2, [pc, #108]	@ (8006420 <HAL_DMA_IRQHandler+0x424>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d013      	beq.n	80063de <HAL_DMA_IRQHandler+0x3e2>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a1a      	ldr	r2, [pc, #104]	@ (8006424 <HAL_DMA_IRQHandler+0x428>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d00e      	beq.n	80063de <HAL_DMA_IRQHandler+0x3e2>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4a18      	ldr	r2, [pc, #96]	@ (8006428 <HAL_DMA_IRQHandler+0x42c>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d009      	beq.n	80063de <HAL_DMA_IRQHandler+0x3e2>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4a17      	ldr	r2, [pc, #92]	@ (800642c <HAL_DMA_IRQHandler+0x430>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d004      	beq.n	80063de <HAL_DMA_IRQHandler+0x3e2>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a15      	ldr	r2, [pc, #84]	@ (8006430 <HAL_DMA_IRQHandler+0x434>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d12a      	bne.n	8006434 <HAL_DMA_IRQHandler+0x438>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0302 	and.w	r3, r3, #2
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	bf14      	ite	ne
 80063ec:	2301      	movne	r3, #1
 80063ee:	2300      	moveq	r3, #0
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	e023      	b.n	800643c <HAL_DMA_IRQHandler+0x440>
 80063f4:	40020010 	.word	0x40020010
 80063f8:	40020028 	.word	0x40020028
 80063fc:	40020040 	.word	0x40020040
 8006400:	40020058 	.word	0x40020058
 8006404:	40020070 	.word	0x40020070
 8006408:	40020088 	.word	0x40020088
 800640c:	400200a0 	.word	0x400200a0
 8006410:	400200b8 	.word	0x400200b8
 8006414:	40020410 	.word	0x40020410
 8006418:	40020428 	.word	0x40020428
 800641c:	40020440 	.word	0x40020440
 8006420:	40020458 	.word	0x40020458
 8006424:	40020470 	.word	0x40020470
 8006428:	40020488 	.word	0x40020488
 800642c:	400204a0 	.word	0x400204a0
 8006430:	400204b8 	.word	0x400204b8
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	2300      	movs	r3, #0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00d      	beq.n	800645c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006444:	f003 031f 	and.w	r3, r3, #31
 8006448:	2204      	movs	r2, #4
 800644a:	409a      	lsls	r2, r3
 800644c:	6a3b      	ldr	r3, [r7, #32]
 800644e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006454:	f043 0204 	orr.w	r2, r3, #4
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006460:	f003 031f 	and.w	r3, r3, #31
 8006464:	2210      	movs	r2, #16
 8006466:	409a      	lsls	r2, r3
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	4013      	ands	r3, r2
 800646c:	2b00      	cmp	r3, #0
 800646e:	f000 80a6 	beq.w	80065be <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a85      	ldr	r2, [pc, #532]	@ (800668c <HAL_DMA_IRQHandler+0x690>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d04a      	beq.n	8006512 <HAL_DMA_IRQHandler+0x516>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a83      	ldr	r2, [pc, #524]	@ (8006690 <HAL_DMA_IRQHandler+0x694>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d045      	beq.n	8006512 <HAL_DMA_IRQHandler+0x516>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a82      	ldr	r2, [pc, #520]	@ (8006694 <HAL_DMA_IRQHandler+0x698>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d040      	beq.n	8006512 <HAL_DMA_IRQHandler+0x516>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a80      	ldr	r2, [pc, #512]	@ (8006698 <HAL_DMA_IRQHandler+0x69c>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d03b      	beq.n	8006512 <HAL_DMA_IRQHandler+0x516>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a7f      	ldr	r2, [pc, #508]	@ (800669c <HAL_DMA_IRQHandler+0x6a0>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d036      	beq.n	8006512 <HAL_DMA_IRQHandler+0x516>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a7d      	ldr	r2, [pc, #500]	@ (80066a0 <HAL_DMA_IRQHandler+0x6a4>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d031      	beq.n	8006512 <HAL_DMA_IRQHandler+0x516>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a7c      	ldr	r2, [pc, #496]	@ (80066a4 <HAL_DMA_IRQHandler+0x6a8>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d02c      	beq.n	8006512 <HAL_DMA_IRQHandler+0x516>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a7a      	ldr	r2, [pc, #488]	@ (80066a8 <HAL_DMA_IRQHandler+0x6ac>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d027      	beq.n	8006512 <HAL_DMA_IRQHandler+0x516>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	4a79      	ldr	r2, [pc, #484]	@ (80066ac <HAL_DMA_IRQHandler+0x6b0>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d022      	beq.n	8006512 <HAL_DMA_IRQHandler+0x516>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4a77      	ldr	r2, [pc, #476]	@ (80066b0 <HAL_DMA_IRQHandler+0x6b4>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d01d      	beq.n	8006512 <HAL_DMA_IRQHandler+0x516>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a76      	ldr	r2, [pc, #472]	@ (80066b4 <HAL_DMA_IRQHandler+0x6b8>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d018      	beq.n	8006512 <HAL_DMA_IRQHandler+0x516>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a74      	ldr	r2, [pc, #464]	@ (80066b8 <HAL_DMA_IRQHandler+0x6bc>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d013      	beq.n	8006512 <HAL_DMA_IRQHandler+0x516>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a73      	ldr	r2, [pc, #460]	@ (80066bc <HAL_DMA_IRQHandler+0x6c0>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d00e      	beq.n	8006512 <HAL_DMA_IRQHandler+0x516>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a71      	ldr	r2, [pc, #452]	@ (80066c0 <HAL_DMA_IRQHandler+0x6c4>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d009      	beq.n	8006512 <HAL_DMA_IRQHandler+0x516>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	4a70      	ldr	r2, [pc, #448]	@ (80066c4 <HAL_DMA_IRQHandler+0x6c8>)
 8006504:	4293      	cmp	r3, r2
 8006506:	d004      	beq.n	8006512 <HAL_DMA_IRQHandler+0x516>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a6e      	ldr	r2, [pc, #440]	@ (80066c8 <HAL_DMA_IRQHandler+0x6cc>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d10a      	bne.n	8006528 <HAL_DMA_IRQHandler+0x52c>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f003 0308 	and.w	r3, r3, #8
 800651c:	2b00      	cmp	r3, #0
 800651e:	bf14      	ite	ne
 8006520:	2301      	movne	r3, #1
 8006522:	2300      	moveq	r3, #0
 8006524:	b2db      	uxtb	r3, r3
 8006526:	e009      	b.n	800653c <HAL_DMA_IRQHandler+0x540>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0304 	and.w	r3, r3, #4
 8006532:	2b00      	cmp	r3, #0
 8006534:	bf14      	ite	ne
 8006536:	2301      	movne	r3, #1
 8006538:	2300      	moveq	r3, #0
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b00      	cmp	r3, #0
 800653e:	d03e      	beq.n	80065be <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006544:	f003 031f 	and.w	r3, r3, #31
 8006548:	2210      	movs	r2, #16
 800654a:	409a      	lsls	r2, r3
 800654c:	6a3b      	ldr	r3, [r7, #32]
 800654e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d018      	beq.n	8006590 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d108      	bne.n	800657e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006570:	2b00      	cmp	r3, #0
 8006572:	d024      	beq.n	80065be <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	4798      	blx	r3
 800657c:	e01f      	b.n	80065be <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006582:	2b00      	cmp	r3, #0
 8006584:	d01b      	beq.n	80065be <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	4798      	blx	r3
 800658e:	e016      	b.n	80065be <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800659a:	2b00      	cmp	r3, #0
 800659c:	d107      	bne.n	80065ae <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f022 0208 	bic.w	r2, r2, #8
 80065ac:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d003      	beq.n	80065be <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80065c2:	f003 031f 	and.w	r3, r3, #31
 80065c6:	2220      	movs	r2, #32
 80065c8:	409a      	lsls	r2, r3
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	4013      	ands	r3, r2
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	f000 8110 	beq.w	80067f4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a2c      	ldr	r2, [pc, #176]	@ (800668c <HAL_DMA_IRQHandler+0x690>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d04a      	beq.n	8006674 <HAL_DMA_IRQHandler+0x678>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a2b      	ldr	r2, [pc, #172]	@ (8006690 <HAL_DMA_IRQHandler+0x694>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d045      	beq.n	8006674 <HAL_DMA_IRQHandler+0x678>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a29      	ldr	r2, [pc, #164]	@ (8006694 <HAL_DMA_IRQHandler+0x698>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d040      	beq.n	8006674 <HAL_DMA_IRQHandler+0x678>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a28      	ldr	r2, [pc, #160]	@ (8006698 <HAL_DMA_IRQHandler+0x69c>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d03b      	beq.n	8006674 <HAL_DMA_IRQHandler+0x678>
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a26      	ldr	r2, [pc, #152]	@ (800669c <HAL_DMA_IRQHandler+0x6a0>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d036      	beq.n	8006674 <HAL_DMA_IRQHandler+0x678>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a25      	ldr	r2, [pc, #148]	@ (80066a0 <HAL_DMA_IRQHandler+0x6a4>)
 800660c:	4293      	cmp	r3, r2
 800660e:	d031      	beq.n	8006674 <HAL_DMA_IRQHandler+0x678>
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a23      	ldr	r2, [pc, #140]	@ (80066a4 <HAL_DMA_IRQHandler+0x6a8>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d02c      	beq.n	8006674 <HAL_DMA_IRQHandler+0x678>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a22      	ldr	r2, [pc, #136]	@ (80066a8 <HAL_DMA_IRQHandler+0x6ac>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d027      	beq.n	8006674 <HAL_DMA_IRQHandler+0x678>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4a20      	ldr	r2, [pc, #128]	@ (80066ac <HAL_DMA_IRQHandler+0x6b0>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d022      	beq.n	8006674 <HAL_DMA_IRQHandler+0x678>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a1f      	ldr	r2, [pc, #124]	@ (80066b0 <HAL_DMA_IRQHandler+0x6b4>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d01d      	beq.n	8006674 <HAL_DMA_IRQHandler+0x678>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a1d      	ldr	r2, [pc, #116]	@ (80066b4 <HAL_DMA_IRQHandler+0x6b8>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d018      	beq.n	8006674 <HAL_DMA_IRQHandler+0x678>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a1c      	ldr	r2, [pc, #112]	@ (80066b8 <HAL_DMA_IRQHandler+0x6bc>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d013      	beq.n	8006674 <HAL_DMA_IRQHandler+0x678>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a1a      	ldr	r2, [pc, #104]	@ (80066bc <HAL_DMA_IRQHandler+0x6c0>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d00e      	beq.n	8006674 <HAL_DMA_IRQHandler+0x678>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a19      	ldr	r2, [pc, #100]	@ (80066c0 <HAL_DMA_IRQHandler+0x6c4>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d009      	beq.n	8006674 <HAL_DMA_IRQHandler+0x678>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a17      	ldr	r2, [pc, #92]	@ (80066c4 <HAL_DMA_IRQHandler+0x6c8>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d004      	beq.n	8006674 <HAL_DMA_IRQHandler+0x678>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a16      	ldr	r2, [pc, #88]	@ (80066c8 <HAL_DMA_IRQHandler+0x6cc>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d12b      	bne.n	80066cc <HAL_DMA_IRQHandler+0x6d0>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0310 	and.w	r3, r3, #16
 800667e:	2b00      	cmp	r3, #0
 8006680:	bf14      	ite	ne
 8006682:	2301      	movne	r3, #1
 8006684:	2300      	moveq	r3, #0
 8006686:	b2db      	uxtb	r3, r3
 8006688:	e02a      	b.n	80066e0 <HAL_DMA_IRQHandler+0x6e4>
 800668a:	bf00      	nop
 800668c:	40020010 	.word	0x40020010
 8006690:	40020028 	.word	0x40020028
 8006694:	40020040 	.word	0x40020040
 8006698:	40020058 	.word	0x40020058
 800669c:	40020070 	.word	0x40020070
 80066a0:	40020088 	.word	0x40020088
 80066a4:	400200a0 	.word	0x400200a0
 80066a8:	400200b8 	.word	0x400200b8
 80066ac:	40020410 	.word	0x40020410
 80066b0:	40020428 	.word	0x40020428
 80066b4:	40020440 	.word	0x40020440
 80066b8:	40020458 	.word	0x40020458
 80066bc:	40020470 	.word	0x40020470
 80066c0:	40020488 	.word	0x40020488
 80066c4:	400204a0 	.word	0x400204a0
 80066c8:	400204b8 	.word	0x400204b8
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0302 	and.w	r3, r3, #2
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	bf14      	ite	ne
 80066da:	2301      	movne	r3, #1
 80066dc:	2300      	moveq	r3, #0
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f000 8087 	beq.w	80067f4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066ea:	f003 031f 	and.w	r3, r3, #31
 80066ee:	2220      	movs	r2, #32
 80066f0:	409a      	lsls	r2, r3
 80066f2:	6a3b      	ldr	r3, [r7, #32]
 80066f4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b04      	cmp	r3, #4
 8006700:	d139      	bne.n	8006776 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f022 0216 	bic.w	r2, r2, #22
 8006710:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	695a      	ldr	r2, [r3, #20]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006720:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006726:	2b00      	cmp	r3, #0
 8006728:	d103      	bne.n	8006732 <HAL_DMA_IRQHandler+0x736>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800672e:	2b00      	cmp	r3, #0
 8006730:	d007      	beq.n	8006742 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f022 0208 	bic.w	r2, r2, #8
 8006740:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006746:	f003 031f 	and.w	r3, r3, #31
 800674a:	223f      	movs	r2, #63	@ 0x3f
 800674c:	409a      	lsls	r2, r3
 800674e:	6a3b      	ldr	r3, [r7, #32]
 8006750:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006766:	2b00      	cmp	r3, #0
 8006768:	f000 8382 	beq.w	8006e70 <HAL_DMA_IRQHandler+0xe74>
          {
            hdma->XferAbortCallback(hdma);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	4798      	blx	r3
          }
          return;
 8006774:	e37c      	b.n	8006e70 <HAL_DMA_IRQHandler+0xe74>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d018      	beq.n	80067b6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800678e:	2b00      	cmp	r3, #0
 8006790:	d108      	bne.n	80067a4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006796:	2b00      	cmp	r3, #0
 8006798:	d02c      	beq.n	80067f4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	4798      	blx	r3
 80067a2:	e027      	b.n	80067f4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d023      	beq.n	80067f4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	4798      	blx	r3
 80067b4:	e01e      	b.n	80067f4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d10f      	bne.n	80067e4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f022 0210 	bic.w	r2, r2, #16
 80067d2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d003      	beq.n	80067f4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f000 833e 	beq.w	8006e7a <HAL_DMA_IRQHandler+0xe7e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006802:	f003 0301 	and.w	r3, r3, #1
 8006806:	2b00      	cmp	r3, #0
 8006808:	f000 8088 	beq.w	800691c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2204      	movs	r2, #4
 8006810:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a89      	ldr	r2, [pc, #548]	@ (8006a40 <HAL_DMA_IRQHandler+0xa44>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d04a      	beq.n	80068b4 <HAL_DMA_IRQHandler+0x8b8>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a88      	ldr	r2, [pc, #544]	@ (8006a44 <HAL_DMA_IRQHandler+0xa48>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d045      	beq.n	80068b4 <HAL_DMA_IRQHandler+0x8b8>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a86      	ldr	r2, [pc, #536]	@ (8006a48 <HAL_DMA_IRQHandler+0xa4c>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d040      	beq.n	80068b4 <HAL_DMA_IRQHandler+0x8b8>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a85      	ldr	r2, [pc, #532]	@ (8006a4c <HAL_DMA_IRQHandler+0xa50>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d03b      	beq.n	80068b4 <HAL_DMA_IRQHandler+0x8b8>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a83      	ldr	r2, [pc, #524]	@ (8006a50 <HAL_DMA_IRQHandler+0xa54>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d036      	beq.n	80068b4 <HAL_DMA_IRQHandler+0x8b8>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a82      	ldr	r2, [pc, #520]	@ (8006a54 <HAL_DMA_IRQHandler+0xa58>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d031      	beq.n	80068b4 <HAL_DMA_IRQHandler+0x8b8>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a80      	ldr	r2, [pc, #512]	@ (8006a58 <HAL_DMA_IRQHandler+0xa5c>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d02c      	beq.n	80068b4 <HAL_DMA_IRQHandler+0x8b8>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a7f      	ldr	r2, [pc, #508]	@ (8006a5c <HAL_DMA_IRQHandler+0xa60>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d027      	beq.n	80068b4 <HAL_DMA_IRQHandler+0x8b8>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a7d      	ldr	r2, [pc, #500]	@ (8006a60 <HAL_DMA_IRQHandler+0xa64>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d022      	beq.n	80068b4 <HAL_DMA_IRQHandler+0x8b8>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a7c      	ldr	r2, [pc, #496]	@ (8006a64 <HAL_DMA_IRQHandler+0xa68>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d01d      	beq.n	80068b4 <HAL_DMA_IRQHandler+0x8b8>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a7a      	ldr	r2, [pc, #488]	@ (8006a68 <HAL_DMA_IRQHandler+0xa6c>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d018      	beq.n	80068b4 <HAL_DMA_IRQHandler+0x8b8>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a79      	ldr	r2, [pc, #484]	@ (8006a6c <HAL_DMA_IRQHandler+0xa70>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d013      	beq.n	80068b4 <HAL_DMA_IRQHandler+0x8b8>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a77      	ldr	r2, [pc, #476]	@ (8006a70 <HAL_DMA_IRQHandler+0xa74>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d00e      	beq.n	80068b4 <HAL_DMA_IRQHandler+0x8b8>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a76      	ldr	r2, [pc, #472]	@ (8006a74 <HAL_DMA_IRQHandler+0xa78>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d009      	beq.n	80068b4 <HAL_DMA_IRQHandler+0x8b8>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a74      	ldr	r2, [pc, #464]	@ (8006a78 <HAL_DMA_IRQHandler+0xa7c>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d004      	beq.n	80068b4 <HAL_DMA_IRQHandler+0x8b8>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a73      	ldr	r2, [pc, #460]	@ (8006a7c <HAL_DMA_IRQHandler+0xa80>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d108      	bne.n	80068c6 <HAL_DMA_IRQHandler+0x8ca>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f022 0201 	bic.w	r2, r2, #1
 80068c2:	601a      	str	r2, [r3, #0]
 80068c4:	e007      	b.n	80068d6 <HAL_DMA_IRQHandler+0x8da>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f022 0201 	bic.w	r2, r2, #1
 80068d4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	3301      	adds	r3, #1
 80068da:	60fb      	str	r3, [r7, #12]
 80068dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068de:	429a      	cmp	r2, r3
 80068e0:	d307      	bcc.n	80068f2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f003 0301 	and.w	r3, r3, #1
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1f2      	bne.n	80068d6 <HAL_DMA_IRQHandler+0x8da>
 80068f0:	e000      	b.n	80068f4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80068f2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f003 0301 	and.w	r3, r3, #1
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d004      	beq.n	800690c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2203      	movs	r2, #3
 8006906:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800690a:	e003      	b.n	8006914 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2201      	movs	r2, #1
 8006910:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006920:	2b00      	cmp	r3, #0
 8006922:	f000 82aa 	beq.w	8006e7a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	4798      	blx	r3
 800692e:	e2a4      	b.n	8006e7a <HAL_DMA_IRQHandler+0xe7e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a52      	ldr	r2, [pc, #328]	@ (8006a80 <HAL_DMA_IRQHandler+0xa84>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d04a      	beq.n	80069d0 <HAL_DMA_IRQHandler+0x9d4>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a51      	ldr	r2, [pc, #324]	@ (8006a84 <HAL_DMA_IRQHandler+0xa88>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d045      	beq.n	80069d0 <HAL_DMA_IRQHandler+0x9d4>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a4f      	ldr	r2, [pc, #316]	@ (8006a88 <HAL_DMA_IRQHandler+0xa8c>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d040      	beq.n	80069d0 <HAL_DMA_IRQHandler+0x9d4>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a4e      	ldr	r2, [pc, #312]	@ (8006a8c <HAL_DMA_IRQHandler+0xa90>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d03b      	beq.n	80069d0 <HAL_DMA_IRQHandler+0x9d4>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a4c      	ldr	r2, [pc, #304]	@ (8006a90 <HAL_DMA_IRQHandler+0xa94>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d036      	beq.n	80069d0 <HAL_DMA_IRQHandler+0x9d4>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a4b      	ldr	r2, [pc, #300]	@ (8006a94 <HAL_DMA_IRQHandler+0xa98>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d031      	beq.n	80069d0 <HAL_DMA_IRQHandler+0x9d4>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a49      	ldr	r2, [pc, #292]	@ (8006a98 <HAL_DMA_IRQHandler+0xa9c>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d02c      	beq.n	80069d0 <HAL_DMA_IRQHandler+0x9d4>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a48      	ldr	r2, [pc, #288]	@ (8006a9c <HAL_DMA_IRQHandler+0xaa0>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d027      	beq.n	80069d0 <HAL_DMA_IRQHandler+0x9d4>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a46      	ldr	r2, [pc, #280]	@ (8006aa0 <HAL_DMA_IRQHandler+0xaa4>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d022      	beq.n	80069d0 <HAL_DMA_IRQHandler+0x9d4>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a45      	ldr	r2, [pc, #276]	@ (8006aa4 <HAL_DMA_IRQHandler+0xaa8>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d01d      	beq.n	80069d0 <HAL_DMA_IRQHandler+0x9d4>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a43      	ldr	r2, [pc, #268]	@ (8006aa8 <HAL_DMA_IRQHandler+0xaac>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d018      	beq.n	80069d0 <HAL_DMA_IRQHandler+0x9d4>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a42      	ldr	r2, [pc, #264]	@ (8006aac <HAL_DMA_IRQHandler+0xab0>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d013      	beq.n	80069d0 <HAL_DMA_IRQHandler+0x9d4>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a40      	ldr	r2, [pc, #256]	@ (8006ab0 <HAL_DMA_IRQHandler+0xab4>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d00e      	beq.n	80069d0 <HAL_DMA_IRQHandler+0x9d4>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a3f      	ldr	r2, [pc, #252]	@ (8006ab4 <HAL_DMA_IRQHandler+0xab8>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d009      	beq.n	80069d0 <HAL_DMA_IRQHandler+0x9d4>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a3d      	ldr	r2, [pc, #244]	@ (8006ab8 <HAL_DMA_IRQHandler+0xabc>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d004      	beq.n	80069d0 <HAL_DMA_IRQHandler+0x9d4>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a3c      	ldr	r2, [pc, #240]	@ (8006abc <HAL_DMA_IRQHandler+0xac0>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d101      	bne.n	80069d4 <HAL_DMA_IRQHandler+0x9d8>
 80069d0:	2301      	movs	r3, #1
 80069d2:	e000      	b.n	80069d6 <HAL_DMA_IRQHandler+0x9da>
 80069d4:	2300      	movs	r3, #0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	f000 824f 	beq.w	8006e7a <HAL_DMA_IRQHandler+0xe7e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069e8:	f003 031f 	and.w	r3, r3, #31
 80069ec:	2204      	movs	r2, #4
 80069ee:	409a      	lsls	r2, r3
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	4013      	ands	r3, r2
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f000 80dd 	beq.w	8006bb4 <HAL_DMA_IRQHandler+0xbb8>
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	f003 0304 	and.w	r3, r3, #4
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f000 80d7 	beq.w	8006bb4 <HAL_DMA_IRQHandler+0xbb8>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a0a:	f003 031f 	and.w	r3, r3, #31
 8006a0e:	2204      	movs	r2, #4
 8006a10:	409a      	lsls	r2, r3
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d059      	beq.n	8006ad4 <HAL_DMA_IRQHandler+0xad8>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d14a      	bne.n	8006ac0 <HAL_DMA_IRQHandler+0xac4>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	f000 8220 	beq.w	8006e74 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a3c:	e21a      	b.n	8006e74 <HAL_DMA_IRQHandler+0xe78>
 8006a3e:	bf00      	nop
 8006a40:	40020010 	.word	0x40020010
 8006a44:	40020028 	.word	0x40020028
 8006a48:	40020040 	.word	0x40020040
 8006a4c:	40020058 	.word	0x40020058
 8006a50:	40020070 	.word	0x40020070
 8006a54:	40020088 	.word	0x40020088
 8006a58:	400200a0 	.word	0x400200a0
 8006a5c:	400200b8 	.word	0x400200b8
 8006a60:	40020410 	.word	0x40020410
 8006a64:	40020428 	.word	0x40020428
 8006a68:	40020440 	.word	0x40020440
 8006a6c:	40020458 	.word	0x40020458
 8006a70:	40020470 	.word	0x40020470
 8006a74:	40020488 	.word	0x40020488
 8006a78:	400204a0 	.word	0x400204a0
 8006a7c:	400204b8 	.word	0x400204b8
 8006a80:	48022c08 	.word	0x48022c08
 8006a84:	48022c1c 	.word	0x48022c1c
 8006a88:	48022c30 	.word	0x48022c30
 8006a8c:	48022c44 	.word	0x48022c44
 8006a90:	48022c58 	.word	0x48022c58
 8006a94:	48022c6c 	.word	0x48022c6c
 8006a98:	48022c80 	.word	0x48022c80
 8006a9c:	48022c94 	.word	0x48022c94
 8006aa0:	58025408 	.word	0x58025408
 8006aa4:	5802541c 	.word	0x5802541c
 8006aa8:	58025430 	.word	0x58025430
 8006aac:	58025444 	.word	0x58025444
 8006ab0:	58025458 	.word	0x58025458
 8006ab4:	5802546c 	.word	0x5802546c
 8006ab8:	58025480 	.word	0x58025480
 8006abc:	58025494 	.word	0x58025494
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f000 81d5 	beq.w	8006e74 <HAL_DMA_IRQHandler+0xe78>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ad2:	e1cf      	b.n	8006e74 <HAL_DMA_IRQHandler+0xe78>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	f003 0320 	and.w	r3, r3, #32
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d160      	bne.n	8006ba0 <HAL_DMA_IRQHandler+0xba4>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a7f      	ldr	r2, [pc, #508]	@ (8006ce0 <HAL_DMA_IRQHandler+0xce4>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d04a      	beq.n	8006b7e <HAL_DMA_IRQHandler+0xb82>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a7d      	ldr	r2, [pc, #500]	@ (8006ce4 <HAL_DMA_IRQHandler+0xce8>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d045      	beq.n	8006b7e <HAL_DMA_IRQHandler+0xb82>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a7c      	ldr	r2, [pc, #496]	@ (8006ce8 <HAL_DMA_IRQHandler+0xcec>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d040      	beq.n	8006b7e <HAL_DMA_IRQHandler+0xb82>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a7a      	ldr	r2, [pc, #488]	@ (8006cec <HAL_DMA_IRQHandler+0xcf0>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d03b      	beq.n	8006b7e <HAL_DMA_IRQHandler+0xb82>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a79      	ldr	r2, [pc, #484]	@ (8006cf0 <HAL_DMA_IRQHandler+0xcf4>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d036      	beq.n	8006b7e <HAL_DMA_IRQHandler+0xb82>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a77      	ldr	r2, [pc, #476]	@ (8006cf4 <HAL_DMA_IRQHandler+0xcf8>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d031      	beq.n	8006b7e <HAL_DMA_IRQHandler+0xb82>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a76      	ldr	r2, [pc, #472]	@ (8006cf8 <HAL_DMA_IRQHandler+0xcfc>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d02c      	beq.n	8006b7e <HAL_DMA_IRQHandler+0xb82>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a74      	ldr	r2, [pc, #464]	@ (8006cfc <HAL_DMA_IRQHandler+0xd00>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d027      	beq.n	8006b7e <HAL_DMA_IRQHandler+0xb82>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a73      	ldr	r2, [pc, #460]	@ (8006d00 <HAL_DMA_IRQHandler+0xd04>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d022      	beq.n	8006b7e <HAL_DMA_IRQHandler+0xb82>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a71      	ldr	r2, [pc, #452]	@ (8006d04 <HAL_DMA_IRQHandler+0xd08>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d01d      	beq.n	8006b7e <HAL_DMA_IRQHandler+0xb82>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a70      	ldr	r2, [pc, #448]	@ (8006d08 <HAL_DMA_IRQHandler+0xd0c>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d018      	beq.n	8006b7e <HAL_DMA_IRQHandler+0xb82>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a6e      	ldr	r2, [pc, #440]	@ (8006d0c <HAL_DMA_IRQHandler+0xd10>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d013      	beq.n	8006b7e <HAL_DMA_IRQHandler+0xb82>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a6d      	ldr	r2, [pc, #436]	@ (8006d10 <HAL_DMA_IRQHandler+0xd14>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d00e      	beq.n	8006b7e <HAL_DMA_IRQHandler+0xb82>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a6b      	ldr	r2, [pc, #428]	@ (8006d14 <HAL_DMA_IRQHandler+0xd18>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d009      	beq.n	8006b7e <HAL_DMA_IRQHandler+0xb82>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	4a6a      	ldr	r2, [pc, #424]	@ (8006d18 <HAL_DMA_IRQHandler+0xd1c>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d004      	beq.n	8006b7e <HAL_DMA_IRQHandler+0xb82>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4a68      	ldr	r2, [pc, #416]	@ (8006d1c <HAL_DMA_IRQHandler+0xd20>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d108      	bne.n	8006b90 <HAL_DMA_IRQHandler+0xb94>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f022 0208 	bic.w	r2, r2, #8
 8006b8c:	601a      	str	r2, [r3, #0]
 8006b8e:	e007      	b.n	8006ba0 <HAL_DMA_IRQHandler+0xba4>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f022 0204 	bic.w	r2, r2, #4
 8006b9e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f000 8165 	beq.w	8006e74 <HAL_DMA_IRQHandler+0xe78>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006bb2:	e15f      	b.n	8006e74 <HAL_DMA_IRQHandler+0xe78>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bb8:	f003 031f 	and.w	r3, r3, #31
 8006bbc:	2202      	movs	r2, #2
 8006bbe:	409a      	lsls	r2, r3
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f000 80c5 	beq.w	8006d54 <HAL_DMA_IRQHandler+0xd58>
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	f003 0302 	and.w	r3, r3, #2
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f000 80bf 	beq.w	8006d54 <HAL_DMA_IRQHandler+0xd58>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006bda:	f003 031f 	and.w	r3, r3, #31
 8006bde:	2202      	movs	r2, #2
 8006be0:	409a      	lsls	r2, r3
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d018      	beq.n	8006c22 <HAL_DMA_IRQHandler+0xc26>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d109      	bne.n	8006c0e <HAL_DMA_IRQHandler+0xc12>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f000 813a 	beq.w	8006e78 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c0c:	e134      	b.n	8006e78 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	f000 8130 	beq.w	8006e78 <HAL_DMA_IRQHandler+0xe7c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006c20:	e12a      	b.n	8006e78 <HAL_DMA_IRQHandler+0xe7c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	f003 0320 	and.w	r3, r3, #32
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f040 8089 	bne.w	8006d40 <HAL_DMA_IRQHandler+0xd44>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a2b      	ldr	r2, [pc, #172]	@ (8006ce0 <HAL_DMA_IRQHandler+0xce4>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d04a      	beq.n	8006cce <HAL_DMA_IRQHandler+0xcd2>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a29      	ldr	r2, [pc, #164]	@ (8006ce4 <HAL_DMA_IRQHandler+0xce8>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d045      	beq.n	8006cce <HAL_DMA_IRQHandler+0xcd2>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a28      	ldr	r2, [pc, #160]	@ (8006ce8 <HAL_DMA_IRQHandler+0xcec>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d040      	beq.n	8006cce <HAL_DMA_IRQHandler+0xcd2>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a26      	ldr	r2, [pc, #152]	@ (8006cec <HAL_DMA_IRQHandler+0xcf0>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d03b      	beq.n	8006cce <HAL_DMA_IRQHandler+0xcd2>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a25      	ldr	r2, [pc, #148]	@ (8006cf0 <HAL_DMA_IRQHandler+0xcf4>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d036      	beq.n	8006cce <HAL_DMA_IRQHandler+0xcd2>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a23      	ldr	r2, [pc, #140]	@ (8006cf4 <HAL_DMA_IRQHandler+0xcf8>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d031      	beq.n	8006cce <HAL_DMA_IRQHandler+0xcd2>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4a22      	ldr	r2, [pc, #136]	@ (8006cf8 <HAL_DMA_IRQHandler+0xcfc>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d02c      	beq.n	8006cce <HAL_DMA_IRQHandler+0xcd2>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a20      	ldr	r2, [pc, #128]	@ (8006cfc <HAL_DMA_IRQHandler+0xd00>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d027      	beq.n	8006cce <HAL_DMA_IRQHandler+0xcd2>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	4a1f      	ldr	r2, [pc, #124]	@ (8006d00 <HAL_DMA_IRQHandler+0xd04>)
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d022      	beq.n	8006cce <HAL_DMA_IRQHandler+0xcd2>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a1d      	ldr	r2, [pc, #116]	@ (8006d04 <HAL_DMA_IRQHandler+0xd08>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d01d      	beq.n	8006cce <HAL_DMA_IRQHandler+0xcd2>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	4a1c      	ldr	r2, [pc, #112]	@ (8006d08 <HAL_DMA_IRQHandler+0xd0c>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d018      	beq.n	8006cce <HAL_DMA_IRQHandler+0xcd2>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a1a      	ldr	r2, [pc, #104]	@ (8006d0c <HAL_DMA_IRQHandler+0xd10>)
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d013      	beq.n	8006cce <HAL_DMA_IRQHandler+0xcd2>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	4a19      	ldr	r2, [pc, #100]	@ (8006d10 <HAL_DMA_IRQHandler+0xd14>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d00e      	beq.n	8006cce <HAL_DMA_IRQHandler+0xcd2>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a17      	ldr	r2, [pc, #92]	@ (8006d14 <HAL_DMA_IRQHandler+0xd18>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d009      	beq.n	8006cce <HAL_DMA_IRQHandler+0xcd2>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a16      	ldr	r2, [pc, #88]	@ (8006d18 <HAL_DMA_IRQHandler+0xd1c>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d004      	beq.n	8006cce <HAL_DMA_IRQHandler+0xcd2>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a14      	ldr	r2, [pc, #80]	@ (8006d1c <HAL_DMA_IRQHandler+0xd20>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d128      	bne.n	8006d20 <HAL_DMA_IRQHandler+0xd24>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f022 0214 	bic.w	r2, r2, #20
 8006cdc:	601a      	str	r2, [r3, #0]
 8006cde:	e027      	b.n	8006d30 <HAL_DMA_IRQHandler+0xd34>
 8006ce0:	40020010 	.word	0x40020010
 8006ce4:	40020028 	.word	0x40020028
 8006ce8:	40020040 	.word	0x40020040
 8006cec:	40020058 	.word	0x40020058
 8006cf0:	40020070 	.word	0x40020070
 8006cf4:	40020088 	.word	0x40020088
 8006cf8:	400200a0 	.word	0x400200a0
 8006cfc:	400200b8 	.word	0x400200b8
 8006d00:	40020410 	.word	0x40020410
 8006d04:	40020428 	.word	0x40020428
 8006d08:	40020440 	.word	0x40020440
 8006d0c:	40020458 	.word	0x40020458
 8006d10:	40020470 	.word	0x40020470
 8006d14:	40020488 	.word	0x40020488
 8006d18:	400204a0 	.word	0x400204a0
 8006d1c:	400204b8 	.word	0x400204b8
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f022 020a 	bic.w	r2, r2, #10
 8006d2e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f000 8097 	beq.w	8006e78 <HAL_DMA_IRQHandler+0xe7c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d52:	e091      	b.n	8006e78 <HAL_DMA_IRQHandler+0xe7c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d58:	f003 031f 	and.w	r3, r3, #31
 8006d5c:	2208      	movs	r2, #8
 8006d5e:	409a      	lsls	r2, r3
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	4013      	ands	r3, r2
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f000 8088 	beq.w	8006e7a <HAL_DMA_IRQHandler+0xe7e>
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	f003 0308 	and.w	r3, r3, #8
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	f000 8082 	beq.w	8006e7a <HAL_DMA_IRQHandler+0xe7e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a41      	ldr	r2, [pc, #260]	@ (8006e80 <HAL_DMA_IRQHandler+0xe84>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d04a      	beq.n	8006e16 <HAL_DMA_IRQHandler+0xe1a>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4a3f      	ldr	r2, [pc, #252]	@ (8006e84 <HAL_DMA_IRQHandler+0xe88>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d045      	beq.n	8006e16 <HAL_DMA_IRQHandler+0xe1a>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a3e      	ldr	r2, [pc, #248]	@ (8006e88 <HAL_DMA_IRQHandler+0xe8c>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d040      	beq.n	8006e16 <HAL_DMA_IRQHandler+0xe1a>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	4a3c      	ldr	r2, [pc, #240]	@ (8006e8c <HAL_DMA_IRQHandler+0xe90>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d03b      	beq.n	8006e16 <HAL_DMA_IRQHandler+0xe1a>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a3b      	ldr	r2, [pc, #236]	@ (8006e90 <HAL_DMA_IRQHandler+0xe94>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d036      	beq.n	8006e16 <HAL_DMA_IRQHandler+0xe1a>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a39      	ldr	r2, [pc, #228]	@ (8006e94 <HAL_DMA_IRQHandler+0xe98>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d031      	beq.n	8006e16 <HAL_DMA_IRQHandler+0xe1a>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a38      	ldr	r2, [pc, #224]	@ (8006e98 <HAL_DMA_IRQHandler+0xe9c>)
 8006db8:	4293      	cmp	r3, r2
 8006dba:	d02c      	beq.n	8006e16 <HAL_DMA_IRQHandler+0xe1a>
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a36      	ldr	r2, [pc, #216]	@ (8006e9c <HAL_DMA_IRQHandler+0xea0>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d027      	beq.n	8006e16 <HAL_DMA_IRQHandler+0xe1a>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4a35      	ldr	r2, [pc, #212]	@ (8006ea0 <HAL_DMA_IRQHandler+0xea4>)
 8006dcc:	4293      	cmp	r3, r2
 8006dce:	d022      	beq.n	8006e16 <HAL_DMA_IRQHandler+0xe1a>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4a33      	ldr	r2, [pc, #204]	@ (8006ea4 <HAL_DMA_IRQHandler+0xea8>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d01d      	beq.n	8006e16 <HAL_DMA_IRQHandler+0xe1a>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a32      	ldr	r2, [pc, #200]	@ (8006ea8 <HAL_DMA_IRQHandler+0xeac>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d018      	beq.n	8006e16 <HAL_DMA_IRQHandler+0xe1a>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a30      	ldr	r2, [pc, #192]	@ (8006eac <HAL_DMA_IRQHandler+0xeb0>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d013      	beq.n	8006e16 <HAL_DMA_IRQHandler+0xe1a>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a2f      	ldr	r2, [pc, #188]	@ (8006eb0 <HAL_DMA_IRQHandler+0xeb4>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d00e      	beq.n	8006e16 <HAL_DMA_IRQHandler+0xe1a>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a2d      	ldr	r2, [pc, #180]	@ (8006eb4 <HAL_DMA_IRQHandler+0xeb8>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d009      	beq.n	8006e16 <HAL_DMA_IRQHandler+0xe1a>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a2c      	ldr	r2, [pc, #176]	@ (8006eb8 <HAL_DMA_IRQHandler+0xebc>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d004      	beq.n	8006e16 <HAL_DMA_IRQHandler+0xe1a>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a2a      	ldr	r2, [pc, #168]	@ (8006ebc <HAL_DMA_IRQHandler+0xec0>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d108      	bne.n	8006e28 <HAL_DMA_IRQHandler+0xe2c>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f022 021c 	bic.w	r2, r2, #28
 8006e24:	601a      	str	r2, [r3, #0]
 8006e26:	e007      	b.n	8006e38 <HAL_DMA_IRQHandler+0xe3c>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f022 020e 	bic.w	r2, r2, #14
 8006e36:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e3c:	f003 031f 	and.w	r3, r3, #31
 8006e40:	2201      	movs	r2, #1
 8006e42:	409a      	lsls	r2, r3
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d009      	beq.n	8006e7a <HAL_DMA_IRQHandler+0xe7e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	4798      	blx	r3
 8006e6e:	e004      	b.n	8006e7a <HAL_DMA_IRQHandler+0xe7e>
          return;
 8006e70:	bf00      	nop
 8006e72:	e002      	b.n	8006e7a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e74:	bf00      	nop
 8006e76:	e000      	b.n	8006e7a <HAL_DMA_IRQHandler+0xe7e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006e78:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006e7a:	3728      	adds	r7, #40	@ 0x28
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	40020010 	.word	0x40020010
 8006e84:	40020028 	.word	0x40020028
 8006e88:	40020040 	.word	0x40020040
 8006e8c:	40020058 	.word	0x40020058
 8006e90:	40020070 	.word	0x40020070
 8006e94:	40020088 	.word	0x40020088
 8006e98:	400200a0 	.word	0x400200a0
 8006e9c:	400200b8 	.word	0x400200b8
 8006ea0:	40020410 	.word	0x40020410
 8006ea4:	40020428 	.word	0x40020428
 8006ea8:	40020440 	.word	0x40020440
 8006eac:	40020458 	.word	0x40020458
 8006eb0:	40020470 	.word	0x40020470
 8006eb4:	40020488 	.word	0x40020488
 8006eb8:	400204a0 	.word	0x400204a0
 8006ebc:	400204b8 	.word	0x400204b8

08006ec0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b087      	sub	sp, #28
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	60f8      	str	r0, [r7, #12]
 8006ec8:	60b9      	str	r1, [r7, #8]
 8006eca:	607a      	str	r2, [r7, #4]
 8006ecc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ed2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ed8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a7f      	ldr	r2, [pc, #508]	@ (80070dc <DMA_SetConfig+0x21c>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d072      	beq.n	8006fca <DMA_SetConfig+0x10a>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a7d      	ldr	r2, [pc, #500]	@ (80070e0 <DMA_SetConfig+0x220>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d06d      	beq.n	8006fca <DMA_SetConfig+0x10a>
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a7c      	ldr	r2, [pc, #496]	@ (80070e4 <DMA_SetConfig+0x224>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d068      	beq.n	8006fca <DMA_SetConfig+0x10a>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a7a      	ldr	r2, [pc, #488]	@ (80070e8 <DMA_SetConfig+0x228>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d063      	beq.n	8006fca <DMA_SetConfig+0x10a>
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a79      	ldr	r2, [pc, #484]	@ (80070ec <DMA_SetConfig+0x22c>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d05e      	beq.n	8006fca <DMA_SetConfig+0x10a>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a77      	ldr	r2, [pc, #476]	@ (80070f0 <DMA_SetConfig+0x230>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d059      	beq.n	8006fca <DMA_SetConfig+0x10a>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a76      	ldr	r2, [pc, #472]	@ (80070f4 <DMA_SetConfig+0x234>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d054      	beq.n	8006fca <DMA_SetConfig+0x10a>
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a74      	ldr	r2, [pc, #464]	@ (80070f8 <DMA_SetConfig+0x238>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d04f      	beq.n	8006fca <DMA_SetConfig+0x10a>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a73      	ldr	r2, [pc, #460]	@ (80070fc <DMA_SetConfig+0x23c>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d04a      	beq.n	8006fca <DMA_SetConfig+0x10a>
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a71      	ldr	r2, [pc, #452]	@ (8007100 <DMA_SetConfig+0x240>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d045      	beq.n	8006fca <DMA_SetConfig+0x10a>
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a70      	ldr	r2, [pc, #448]	@ (8007104 <DMA_SetConfig+0x244>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d040      	beq.n	8006fca <DMA_SetConfig+0x10a>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a6e      	ldr	r2, [pc, #440]	@ (8007108 <DMA_SetConfig+0x248>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d03b      	beq.n	8006fca <DMA_SetConfig+0x10a>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a6d      	ldr	r2, [pc, #436]	@ (800710c <DMA_SetConfig+0x24c>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d036      	beq.n	8006fca <DMA_SetConfig+0x10a>
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a6b      	ldr	r2, [pc, #428]	@ (8007110 <DMA_SetConfig+0x250>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d031      	beq.n	8006fca <DMA_SetConfig+0x10a>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a6a      	ldr	r2, [pc, #424]	@ (8007114 <DMA_SetConfig+0x254>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d02c      	beq.n	8006fca <DMA_SetConfig+0x10a>
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a68      	ldr	r2, [pc, #416]	@ (8007118 <DMA_SetConfig+0x258>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d027      	beq.n	8006fca <DMA_SetConfig+0x10a>
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a67      	ldr	r2, [pc, #412]	@ (800711c <DMA_SetConfig+0x25c>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d022      	beq.n	8006fca <DMA_SetConfig+0x10a>
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a65      	ldr	r2, [pc, #404]	@ (8007120 <DMA_SetConfig+0x260>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d01d      	beq.n	8006fca <DMA_SetConfig+0x10a>
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a64      	ldr	r2, [pc, #400]	@ (8007124 <DMA_SetConfig+0x264>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d018      	beq.n	8006fca <DMA_SetConfig+0x10a>
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a62      	ldr	r2, [pc, #392]	@ (8007128 <DMA_SetConfig+0x268>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d013      	beq.n	8006fca <DMA_SetConfig+0x10a>
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a61      	ldr	r2, [pc, #388]	@ (800712c <DMA_SetConfig+0x26c>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d00e      	beq.n	8006fca <DMA_SetConfig+0x10a>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a5f      	ldr	r2, [pc, #380]	@ (8007130 <DMA_SetConfig+0x270>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d009      	beq.n	8006fca <DMA_SetConfig+0x10a>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a5e      	ldr	r2, [pc, #376]	@ (8007134 <DMA_SetConfig+0x274>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d004      	beq.n	8006fca <DMA_SetConfig+0x10a>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a5c      	ldr	r2, [pc, #368]	@ (8007138 <DMA_SetConfig+0x278>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d101      	bne.n	8006fce <DMA_SetConfig+0x10e>
 8006fca:	2301      	movs	r3, #1
 8006fcc:	e000      	b.n	8006fd0 <DMA_SetConfig+0x110>
 8006fce:	2300      	movs	r3, #0
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d00d      	beq.n	8006ff0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006fd8:	68fa      	ldr	r2, [r7, #12]
 8006fda:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006fdc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d004      	beq.n	8006ff0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fea:	68fa      	ldr	r2, [r7, #12]
 8006fec:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006fee:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a39      	ldr	r2, [pc, #228]	@ (80070dc <DMA_SetConfig+0x21c>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d04a      	beq.n	8007090 <DMA_SetConfig+0x1d0>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a38      	ldr	r2, [pc, #224]	@ (80070e0 <DMA_SetConfig+0x220>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d045      	beq.n	8007090 <DMA_SetConfig+0x1d0>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a36      	ldr	r2, [pc, #216]	@ (80070e4 <DMA_SetConfig+0x224>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d040      	beq.n	8007090 <DMA_SetConfig+0x1d0>
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a35      	ldr	r2, [pc, #212]	@ (80070e8 <DMA_SetConfig+0x228>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d03b      	beq.n	8007090 <DMA_SetConfig+0x1d0>
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a33      	ldr	r2, [pc, #204]	@ (80070ec <DMA_SetConfig+0x22c>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d036      	beq.n	8007090 <DMA_SetConfig+0x1d0>
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a32      	ldr	r2, [pc, #200]	@ (80070f0 <DMA_SetConfig+0x230>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d031      	beq.n	8007090 <DMA_SetConfig+0x1d0>
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a30      	ldr	r2, [pc, #192]	@ (80070f4 <DMA_SetConfig+0x234>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d02c      	beq.n	8007090 <DMA_SetConfig+0x1d0>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a2f      	ldr	r2, [pc, #188]	@ (80070f8 <DMA_SetConfig+0x238>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d027      	beq.n	8007090 <DMA_SetConfig+0x1d0>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a2d      	ldr	r2, [pc, #180]	@ (80070fc <DMA_SetConfig+0x23c>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d022      	beq.n	8007090 <DMA_SetConfig+0x1d0>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a2c      	ldr	r2, [pc, #176]	@ (8007100 <DMA_SetConfig+0x240>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d01d      	beq.n	8007090 <DMA_SetConfig+0x1d0>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a2a      	ldr	r2, [pc, #168]	@ (8007104 <DMA_SetConfig+0x244>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d018      	beq.n	8007090 <DMA_SetConfig+0x1d0>
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4a29      	ldr	r2, [pc, #164]	@ (8007108 <DMA_SetConfig+0x248>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d013      	beq.n	8007090 <DMA_SetConfig+0x1d0>
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a27      	ldr	r2, [pc, #156]	@ (800710c <DMA_SetConfig+0x24c>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d00e      	beq.n	8007090 <DMA_SetConfig+0x1d0>
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a26      	ldr	r2, [pc, #152]	@ (8007110 <DMA_SetConfig+0x250>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d009      	beq.n	8007090 <DMA_SetConfig+0x1d0>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a24      	ldr	r2, [pc, #144]	@ (8007114 <DMA_SetConfig+0x254>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d004      	beq.n	8007090 <DMA_SetConfig+0x1d0>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a23      	ldr	r2, [pc, #140]	@ (8007118 <DMA_SetConfig+0x258>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d101      	bne.n	8007094 <DMA_SetConfig+0x1d4>
 8007090:	2301      	movs	r3, #1
 8007092:	e000      	b.n	8007096 <DMA_SetConfig+0x1d6>
 8007094:	2300      	movs	r3, #0
 8007096:	2b00      	cmp	r3, #0
 8007098:	d059      	beq.n	800714e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800709e:	f003 031f 	and.w	r3, r3, #31
 80070a2:	223f      	movs	r2, #63	@ 0x3f
 80070a4:	409a      	lsls	r2, r3
 80070a6:	697b      	ldr	r3, [r7, #20]
 80070a8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	681a      	ldr	r2, [r3, #0]
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80070b8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	683a      	ldr	r2, [r7, #0]
 80070c0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	2b40      	cmp	r3, #64	@ 0x40
 80070c8:	d138      	bne.n	800713c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	68ba      	ldr	r2, [r7, #8]
 80070d8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80070da:	e0ae      	b.n	800723a <DMA_SetConfig+0x37a>
 80070dc:	40020010 	.word	0x40020010
 80070e0:	40020028 	.word	0x40020028
 80070e4:	40020040 	.word	0x40020040
 80070e8:	40020058 	.word	0x40020058
 80070ec:	40020070 	.word	0x40020070
 80070f0:	40020088 	.word	0x40020088
 80070f4:	400200a0 	.word	0x400200a0
 80070f8:	400200b8 	.word	0x400200b8
 80070fc:	40020410 	.word	0x40020410
 8007100:	40020428 	.word	0x40020428
 8007104:	40020440 	.word	0x40020440
 8007108:	40020458 	.word	0x40020458
 800710c:	40020470 	.word	0x40020470
 8007110:	40020488 	.word	0x40020488
 8007114:	400204a0 	.word	0x400204a0
 8007118:	400204b8 	.word	0x400204b8
 800711c:	58025408 	.word	0x58025408
 8007120:	5802541c 	.word	0x5802541c
 8007124:	58025430 	.word	0x58025430
 8007128:	58025444 	.word	0x58025444
 800712c:	58025458 	.word	0x58025458
 8007130:	5802546c 	.word	0x5802546c
 8007134:	58025480 	.word	0x58025480
 8007138:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	68ba      	ldr	r2, [r7, #8]
 8007142:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	60da      	str	r2, [r3, #12]
}
 800714c:	e075      	b.n	800723a <DMA_SetConfig+0x37a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a3d      	ldr	r2, [pc, #244]	@ (8007248 <DMA_SetConfig+0x388>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d04a      	beq.n	80071ee <DMA_SetConfig+0x32e>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a3b      	ldr	r2, [pc, #236]	@ (800724c <DMA_SetConfig+0x38c>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d045      	beq.n	80071ee <DMA_SetConfig+0x32e>
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a3a      	ldr	r2, [pc, #232]	@ (8007250 <DMA_SetConfig+0x390>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d040      	beq.n	80071ee <DMA_SetConfig+0x32e>
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a38      	ldr	r2, [pc, #224]	@ (8007254 <DMA_SetConfig+0x394>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d03b      	beq.n	80071ee <DMA_SetConfig+0x32e>
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a37      	ldr	r2, [pc, #220]	@ (8007258 <DMA_SetConfig+0x398>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d036      	beq.n	80071ee <DMA_SetConfig+0x32e>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a35      	ldr	r2, [pc, #212]	@ (800725c <DMA_SetConfig+0x39c>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d031      	beq.n	80071ee <DMA_SetConfig+0x32e>
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a34      	ldr	r2, [pc, #208]	@ (8007260 <DMA_SetConfig+0x3a0>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d02c      	beq.n	80071ee <DMA_SetConfig+0x32e>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a32      	ldr	r2, [pc, #200]	@ (8007264 <DMA_SetConfig+0x3a4>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d027      	beq.n	80071ee <DMA_SetConfig+0x32e>
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a31      	ldr	r2, [pc, #196]	@ (8007268 <DMA_SetConfig+0x3a8>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d022      	beq.n	80071ee <DMA_SetConfig+0x32e>
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a2f      	ldr	r2, [pc, #188]	@ (800726c <DMA_SetConfig+0x3ac>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d01d      	beq.n	80071ee <DMA_SetConfig+0x32e>
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a2e      	ldr	r2, [pc, #184]	@ (8007270 <DMA_SetConfig+0x3b0>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d018      	beq.n	80071ee <DMA_SetConfig+0x32e>
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a2c      	ldr	r2, [pc, #176]	@ (8007274 <DMA_SetConfig+0x3b4>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d013      	beq.n	80071ee <DMA_SetConfig+0x32e>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a2b      	ldr	r2, [pc, #172]	@ (8007278 <DMA_SetConfig+0x3b8>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d00e      	beq.n	80071ee <DMA_SetConfig+0x32e>
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a29      	ldr	r2, [pc, #164]	@ (800727c <DMA_SetConfig+0x3bc>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d009      	beq.n	80071ee <DMA_SetConfig+0x32e>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a28      	ldr	r2, [pc, #160]	@ (8007280 <DMA_SetConfig+0x3c0>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d004      	beq.n	80071ee <DMA_SetConfig+0x32e>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a26      	ldr	r2, [pc, #152]	@ (8007284 <DMA_SetConfig+0x3c4>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d101      	bne.n	80071f2 <DMA_SetConfig+0x332>
 80071ee:	2301      	movs	r3, #1
 80071f0:	e000      	b.n	80071f4 <DMA_SetConfig+0x334>
 80071f2:	2300      	movs	r3, #0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d020      	beq.n	800723a <DMA_SetConfig+0x37a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80071fc:	f003 031f 	and.w	r3, r3, #31
 8007200:	2201      	movs	r2, #1
 8007202:	409a      	lsls	r2, r3
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	683a      	ldr	r2, [r7, #0]
 800720e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	689b      	ldr	r3, [r3, #8]
 8007214:	2b40      	cmp	r3, #64	@ 0x40
 8007216:	d108      	bne.n	800722a <DMA_SetConfig+0x36a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	687a      	ldr	r2, [r7, #4]
 800721e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	68ba      	ldr	r2, [r7, #8]
 8007226:	60da      	str	r2, [r3, #12]
}
 8007228:	e007      	b.n	800723a <DMA_SetConfig+0x37a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	68ba      	ldr	r2, [r7, #8]
 8007230:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	60da      	str	r2, [r3, #12]
}
 800723a:	bf00      	nop
 800723c:	371c      	adds	r7, #28
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	48022c08 	.word	0x48022c08
 800724c:	48022c1c 	.word	0x48022c1c
 8007250:	48022c30 	.word	0x48022c30
 8007254:	48022c44 	.word	0x48022c44
 8007258:	48022c58 	.word	0x48022c58
 800725c:	48022c6c 	.word	0x48022c6c
 8007260:	48022c80 	.word	0x48022c80
 8007264:	48022c94 	.word	0x48022c94
 8007268:	58025408 	.word	0x58025408
 800726c:	5802541c 	.word	0x5802541c
 8007270:	58025430 	.word	0x58025430
 8007274:	58025444 	.word	0x58025444
 8007278:	58025458 	.word	0x58025458
 800727c:	5802546c 	.word	0x5802546c
 8007280:	58025480 	.word	0x58025480
 8007284:	58025494 	.word	0x58025494

08007288 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a42      	ldr	r2, [pc, #264]	@ (80073a0 <DMA_CalcBaseAndBitshift+0x118>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d04a      	beq.n	8007330 <DMA_CalcBaseAndBitshift+0xa8>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a41      	ldr	r2, [pc, #260]	@ (80073a4 <DMA_CalcBaseAndBitshift+0x11c>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d045      	beq.n	8007330 <DMA_CalcBaseAndBitshift+0xa8>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a3f      	ldr	r2, [pc, #252]	@ (80073a8 <DMA_CalcBaseAndBitshift+0x120>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d040      	beq.n	8007330 <DMA_CalcBaseAndBitshift+0xa8>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a3e      	ldr	r2, [pc, #248]	@ (80073ac <DMA_CalcBaseAndBitshift+0x124>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d03b      	beq.n	8007330 <DMA_CalcBaseAndBitshift+0xa8>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a3c      	ldr	r2, [pc, #240]	@ (80073b0 <DMA_CalcBaseAndBitshift+0x128>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d036      	beq.n	8007330 <DMA_CalcBaseAndBitshift+0xa8>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a3b      	ldr	r2, [pc, #236]	@ (80073b4 <DMA_CalcBaseAndBitshift+0x12c>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d031      	beq.n	8007330 <DMA_CalcBaseAndBitshift+0xa8>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a39      	ldr	r2, [pc, #228]	@ (80073b8 <DMA_CalcBaseAndBitshift+0x130>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d02c      	beq.n	8007330 <DMA_CalcBaseAndBitshift+0xa8>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a38      	ldr	r2, [pc, #224]	@ (80073bc <DMA_CalcBaseAndBitshift+0x134>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d027      	beq.n	8007330 <DMA_CalcBaseAndBitshift+0xa8>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a36      	ldr	r2, [pc, #216]	@ (80073c0 <DMA_CalcBaseAndBitshift+0x138>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d022      	beq.n	8007330 <DMA_CalcBaseAndBitshift+0xa8>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a35      	ldr	r2, [pc, #212]	@ (80073c4 <DMA_CalcBaseAndBitshift+0x13c>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d01d      	beq.n	8007330 <DMA_CalcBaseAndBitshift+0xa8>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	4a33      	ldr	r2, [pc, #204]	@ (80073c8 <DMA_CalcBaseAndBitshift+0x140>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d018      	beq.n	8007330 <DMA_CalcBaseAndBitshift+0xa8>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a32      	ldr	r2, [pc, #200]	@ (80073cc <DMA_CalcBaseAndBitshift+0x144>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d013      	beq.n	8007330 <DMA_CalcBaseAndBitshift+0xa8>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a30      	ldr	r2, [pc, #192]	@ (80073d0 <DMA_CalcBaseAndBitshift+0x148>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d00e      	beq.n	8007330 <DMA_CalcBaseAndBitshift+0xa8>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a2f      	ldr	r2, [pc, #188]	@ (80073d4 <DMA_CalcBaseAndBitshift+0x14c>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d009      	beq.n	8007330 <DMA_CalcBaseAndBitshift+0xa8>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a2d      	ldr	r2, [pc, #180]	@ (80073d8 <DMA_CalcBaseAndBitshift+0x150>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d004      	beq.n	8007330 <DMA_CalcBaseAndBitshift+0xa8>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a2c      	ldr	r2, [pc, #176]	@ (80073dc <DMA_CalcBaseAndBitshift+0x154>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d101      	bne.n	8007334 <DMA_CalcBaseAndBitshift+0xac>
 8007330:	2301      	movs	r3, #1
 8007332:	e000      	b.n	8007336 <DMA_CalcBaseAndBitshift+0xae>
 8007334:	2300      	movs	r3, #0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d024      	beq.n	8007384 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	b2db      	uxtb	r3, r3
 8007340:	3b10      	subs	r3, #16
 8007342:	4a27      	ldr	r2, [pc, #156]	@ (80073e0 <DMA_CalcBaseAndBitshift+0x158>)
 8007344:	fba2 2303 	umull	r2, r3, r2, r3
 8007348:	091b      	lsrs	r3, r3, #4
 800734a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f003 0307 	and.w	r3, r3, #7
 8007352:	4a24      	ldr	r2, [pc, #144]	@ (80073e4 <DMA_CalcBaseAndBitshift+0x15c>)
 8007354:	5cd3      	ldrb	r3, [r2, r3]
 8007356:	461a      	mov	r2, r3
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2b03      	cmp	r3, #3
 8007360:	d908      	bls.n	8007374 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	461a      	mov	r2, r3
 8007368:	4b1f      	ldr	r3, [pc, #124]	@ (80073e8 <DMA_CalcBaseAndBitshift+0x160>)
 800736a:	4013      	ands	r3, r2
 800736c:	1d1a      	adds	r2, r3, #4
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	659a      	str	r2, [r3, #88]	@ 0x58
 8007372:	e00d      	b.n	8007390 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	461a      	mov	r2, r3
 800737a:	4b1b      	ldr	r3, [pc, #108]	@ (80073e8 <DMA_CalcBaseAndBitshift+0x160>)
 800737c:	4013      	ands	r3, r2
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	6593      	str	r3, [r2, #88]	@ 0x58
 8007382:	e005      	b.n	8007390 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8007394:	4618      	mov	r0, r3
 8007396:	3714      	adds	r7, #20
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr
 80073a0:	40020010 	.word	0x40020010
 80073a4:	40020028 	.word	0x40020028
 80073a8:	40020040 	.word	0x40020040
 80073ac:	40020058 	.word	0x40020058
 80073b0:	40020070 	.word	0x40020070
 80073b4:	40020088 	.word	0x40020088
 80073b8:	400200a0 	.word	0x400200a0
 80073bc:	400200b8 	.word	0x400200b8
 80073c0:	40020410 	.word	0x40020410
 80073c4:	40020428 	.word	0x40020428
 80073c8:	40020440 	.word	0x40020440
 80073cc:	40020458 	.word	0x40020458
 80073d0:	40020470 	.word	0x40020470
 80073d4:	40020488 	.word	0x40020488
 80073d8:	400204a0 	.word	0x400204a0
 80073dc:	400204b8 	.word	0x400204b8
 80073e0:	aaaaaaab 	.word	0xaaaaaaab
 80073e4:	08013b14 	.word	0x08013b14
 80073e8:	fffffc00 	.word	0xfffffc00

080073ec <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b085      	sub	sp, #20
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80073f4:	2300      	movs	r3, #0
 80073f6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	699b      	ldr	r3, [r3, #24]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d120      	bne.n	8007442 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007404:	2b03      	cmp	r3, #3
 8007406:	d858      	bhi.n	80074ba <DMA_CheckFifoParam+0xce>
 8007408:	a201      	add	r2, pc, #4	@ (adr r2, 8007410 <DMA_CheckFifoParam+0x24>)
 800740a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800740e:	bf00      	nop
 8007410:	08007421 	.word	0x08007421
 8007414:	08007433 	.word	0x08007433
 8007418:	08007421 	.word	0x08007421
 800741c:	080074bb 	.word	0x080074bb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007424:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007428:	2b00      	cmp	r3, #0
 800742a:	d048      	beq.n	80074be <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007430:	e045      	b.n	80074be <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007436:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800743a:	d142      	bne.n	80074c2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007440:	e03f      	b.n	80074c2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800744a:	d123      	bne.n	8007494 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007450:	2b03      	cmp	r3, #3
 8007452:	d838      	bhi.n	80074c6 <DMA_CheckFifoParam+0xda>
 8007454:	a201      	add	r2, pc, #4	@ (adr r2, 800745c <DMA_CheckFifoParam+0x70>)
 8007456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745a:	bf00      	nop
 800745c:	0800746d 	.word	0x0800746d
 8007460:	08007473 	.word	0x08007473
 8007464:	0800746d 	.word	0x0800746d
 8007468:	08007485 	.word	0x08007485
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	73fb      	strb	r3, [r7, #15]
        break;
 8007470:	e030      	b.n	80074d4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007476:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800747a:	2b00      	cmp	r3, #0
 800747c:	d025      	beq.n	80074ca <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007482:	e022      	b.n	80074ca <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007488:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800748c:	d11f      	bne.n	80074ce <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800748e:	2301      	movs	r3, #1
 8007490:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007492:	e01c      	b.n	80074ce <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007498:	2b02      	cmp	r3, #2
 800749a:	d902      	bls.n	80074a2 <DMA_CheckFifoParam+0xb6>
 800749c:	2b03      	cmp	r3, #3
 800749e:	d003      	beq.n	80074a8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80074a0:	e018      	b.n	80074d4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	73fb      	strb	r3, [r7, #15]
        break;
 80074a6:	e015      	b.n	80074d4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00e      	beq.n	80074d2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	73fb      	strb	r3, [r7, #15]
    break;
 80074b8:	e00b      	b.n	80074d2 <DMA_CheckFifoParam+0xe6>
        break;
 80074ba:	bf00      	nop
 80074bc:	e00a      	b.n	80074d4 <DMA_CheckFifoParam+0xe8>
        break;
 80074be:	bf00      	nop
 80074c0:	e008      	b.n	80074d4 <DMA_CheckFifoParam+0xe8>
        break;
 80074c2:	bf00      	nop
 80074c4:	e006      	b.n	80074d4 <DMA_CheckFifoParam+0xe8>
        break;
 80074c6:	bf00      	nop
 80074c8:	e004      	b.n	80074d4 <DMA_CheckFifoParam+0xe8>
        break;
 80074ca:	bf00      	nop
 80074cc:	e002      	b.n	80074d4 <DMA_CheckFifoParam+0xe8>
        break;
 80074ce:	bf00      	nop
 80074d0:	e000      	b.n	80074d4 <DMA_CheckFifoParam+0xe8>
    break;
 80074d2:	bf00      	nop
    }
  }

  return status;
 80074d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3714      	adds	r7, #20
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop

080074e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a38      	ldr	r2, [pc, #224]	@ (80075d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d022      	beq.n	8007542 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a36      	ldr	r2, [pc, #216]	@ (80075dc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d01d      	beq.n	8007542 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a35      	ldr	r2, [pc, #212]	@ (80075e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d018      	beq.n	8007542 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a33      	ldr	r2, [pc, #204]	@ (80075e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d013      	beq.n	8007542 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a32      	ldr	r2, [pc, #200]	@ (80075e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d00e      	beq.n	8007542 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a30      	ldr	r2, [pc, #192]	@ (80075ec <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d009      	beq.n	8007542 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a2f      	ldr	r2, [pc, #188]	@ (80075f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d004      	beq.n	8007542 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a2d      	ldr	r2, [pc, #180]	@ (80075f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d101      	bne.n	8007546 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007542:	2301      	movs	r3, #1
 8007544:	e000      	b.n	8007548 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007546:	2300      	movs	r3, #0
 8007548:	2b00      	cmp	r3, #0
 800754a:	d01a      	beq.n	8007582 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	b2db      	uxtb	r3, r3
 8007552:	3b08      	subs	r3, #8
 8007554:	4a28      	ldr	r2, [pc, #160]	@ (80075f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007556:	fba2 2303 	umull	r2, r3, r2, r3
 800755a:	091b      	lsrs	r3, r3, #4
 800755c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800755e:	68fa      	ldr	r2, [r7, #12]
 8007560:	4b26      	ldr	r3, [pc, #152]	@ (80075fc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007562:	4413      	add	r3, r2
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	461a      	mov	r2, r3
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	4a24      	ldr	r2, [pc, #144]	@ (8007600 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8007570:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f003 031f 	and.w	r3, r3, #31
 8007578:	2201      	movs	r2, #1
 800757a:	409a      	lsls	r2, r3
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007580:	e024      	b.n	80075cc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	b2db      	uxtb	r3, r3
 8007588:	3b10      	subs	r3, #16
 800758a:	4a1e      	ldr	r2, [pc, #120]	@ (8007604 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800758c:	fba2 2303 	umull	r2, r3, r2, r3
 8007590:	091b      	lsrs	r3, r3, #4
 8007592:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	4a1c      	ldr	r2, [pc, #112]	@ (8007608 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d806      	bhi.n	80075aa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	4a1b      	ldr	r2, [pc, #108]	@ (800760c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d902      	bls.n	80075aa <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	3308      	adds	r3, #8
 80075a8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	4b18      	ldr	r3, [pc, #96]	@ (8007610 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80075ae:	4413      	add	r3, r2
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	461a      	mov	r2, r3
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4a16      	ldr	r2, [pc, #88]	@ (8007614 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80075bc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	f003 031f 	and.w	r3, r3, #31
 80075c4:	2201      	movs	r2, #1
 80075c6:	409a      	lsls	r2, r3
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80075cc:	bf00      	nop
 80075ce:	3714      	adds	r7, #20
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr
 80075d8:	58025408 	.word	0x58025408
 80075dc:	5802541c 	.word	0x5802541c
 80075e0:	58025430 	.word	0x58025430
 80075e4:	58025444 	.word	0x58025444
 80075e8:	58025458 	.word	0x58025458
 80075ec:	5802546c 	.word	0x5802546c
 80075f0:	58025480 	.word	0x58025480
 80075f4:	58025494 	.word	0x58025494
 80075f8:	cccccccd 	.word	0xcccccccd
 80075fc:	16009600 	.word	0x16009600
 8007600:	58025880 	.word	0x58025880
 8007604:	aaaaaaab 	.word	0xaaaaaaab
 8007608:	400204b8 	.word	0x400204b8
 800760c:	4002040f 	.word	0x4002040f
 8007610:	10008200 	.word	0x10008200
 8007614:	40020880 	.word	0x40020880

08007618 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007618:	b480      	push	{r7}
 800761a:	b085      	sub	sp, #20
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	b2db      	uxtb	r3, r3
 8007626:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d04a      	beq.n	80076c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2b08      	cmp	r3, #8
 8007632:	d847      	bhi.n	80076c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a25      	ldr	r2, [pc, #148]	@ (80076d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d022      	beq.n	8007684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a24      	ldr	r2, [pc, #144]	@ (80076d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007644:	4293      	cmp	r3, r2
 8007646:	d01d      	beq.n	8007684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4a22      	ldr	r2, [pc, #136]	@ (80076d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d018      	beq.n	8007684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a21      	ldr	r2, [pc, #132]	@ (80076dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d013      	beq.n	8007684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a1f      	ldr	r2, [pc, #124]	@ (80076e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d00e      	beq.n	8007684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a1e      	ldr	r2, [pc, #120]	@ (80076e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d009      	beq.n	8007684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a1c      	ldr	r2, [pc, #112]	@ (80076e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d004      	beq.n	8007684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a1b      	ldr	r2, [pc, #108]	@ (80076ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d101      	bne.n	8007688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8007684:	2301      	movs	r3, #1
 8007686:	e000      	b.n	800768a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007688:	2300      	movs	r3, #0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00a      	beq.n	80076a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	4b17      	ldr	r3, [pc, #92]	@ (80076f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8007692:	4413      	add	r3, r2
 8007694:	009b      	lsls	r3, r3, #2
 8007696:	461a      	mov	r2, r3
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	4a15      	ldr	r2, [pc, #84]	@ (80076f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80076a0:	671a      	str	r2, [r3, #112]	@ 0x70
 80076a2:	e009      	b.n	80076b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80076a4:	68fa      	ldr	r2, [r7, #12]
 80076a6:	4b14      	ldr	r3, [pc, #80]	@ (80076f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80076a8:	4413      	add	r3, r2
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	461a      	mov	r2, r3
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	4a11      	ldr	r2, [pc, #68]	@ (80076fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80076b6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	3b01      	subs	r3, #1
 80076bc:	2201      	movs	r2, #1
 80076be:	409a      	lsls	r2, r3
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80076c4:	bf00      	nop
 80076c6:	3714      	adds	r7, #20
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr
 80076d0:	58025408 	.word	0x58025408
 80076d4:	5802541c 	.word	0x5802541c
 80076d8:	58025430 	.word	0x58025430
 80076dc:	58025444 	.word	0x58025444
 80076e0:	58025458 	.word	0x58025458
 80076e4:	5802546c 	.word	0x5802546c
 80076e8:	58025480 	.word	0x58025480
 80076ec:	58025494 	.word	0x58025494
 80076f0:	1600963f 	.word	0x1600963f
 80076f4:	58025940 	.word	0x58025940
 80076f8:	1000823f 	.word	0x1000823f
 80076fc:	40020940 	.word	0x40020940

08007700 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b086      	sub	sp, #24
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	607a      	str	r2, [r7, #4]
 800770c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800770e:	2300      	movs	r3, #0
 8007710:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	689b      	ldr	r3, [r3, #8]
 8007716:	2b80      	cmp	r3, #128	@ 0x80
 8007718:	d105      	bne.n	8007726 <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007720:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e315      	b.n	8007d52 <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800772c:	2b01      	cmp	r3, #1
 800772e:	d101      	bne.n	8007734 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8007730:	2302      	movs	r3, #2
 8007732:	e30e      	b.n	8007d52 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2201      	movs	r2, #1
 8007738:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8007742:	b2db      	uxtb	r3, r3
 8007744:	2b01      	cmp	r3, #1
 8007746:	f040 82fd 	bne.w	8007d44 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2202      	movs	r2, #2
 800774e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2200      	movs	r2, #0
 8007756:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a82      	ldr	r2, [pc, #520]	@ (8007968 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d04a      	beq.n	80077f8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a81      	ldr	r2, [pc, #516]	@ (800796c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d045      	beq.n	80077f8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a7f      	ldr	r2, [pc, #508]	@ (8007970 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d040      	beq.n	80077f8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a7e      	ldr	r2, [pc, #504]	@ (8007974 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d03b      	beq.n	80077f8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	4a7c      	ldr	r2, [pc, #496]	@ (8007978 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8007786:	4293      	cmp	r3, r2
 8007788:	d036      	beq.n	80077f8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a7b      	ldr	r2, [pc, #492]	@ (800797c <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d031      	beq.n	80077f8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a79      	ldr	r2, [pc, #484]	@ (8007980 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d02c      	beq.n	80077f8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a78      	ldr	r2, [pc, #480]	@ (8007984 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d027      	beq.n	80077f8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a76      	ldr	r2, [pc, #472]	@ (8007988 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d022      	beq.n	80077f8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a75      	ldr	r2, [pc, #468]	@ (800798c <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d01d      	beq.n	80077f8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a73      	ldr	r2, [pc, #460]	@ (8007990 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d018      	beq.n	80077f8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a72      	ldr	r2, [pc, #456]	@ (8007994 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d013      	beq.n	80077f8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a70      	ldr	r2, [pc, #448]	@ (8007998 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d00e      	beq.n	80077f8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a6f      	ldr	r2, [pc, #444]	@ (800799c <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d009      	beq.n	80077f8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a6d      	ldr	r2, [pc, #436]	@ (80079a0 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d004      	beq.n	80077f8 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a6c      	ldr	r2, [pc, #432]	@ (80079a4 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d101      	bne.n	80077fc <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 80077f8:	2301      	movs	r3, #1
 80077fa:	e000      	b.n	80077fe <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 80077fc:	2300      	movs	r3, #0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d018      	beq.n	8007834 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8007810:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	683a      	ldr	r2, [r7, #0]
 8007818:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800781e:	3308      	adds	r3, #8
 8007820:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007826:	f003 031f 	and.w	r3, r3, #31
 800782a:	223f      	movs	r2, #63	@ 0x3f
 800782c:	409a      	lsls	r2, r3
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	601a      	str	r2, [r3, #0]
 8007832:	e018      	b.n	8007866 <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	6819      	ldr	r1, [r3, #0]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681a      	ldr	r2, [r3, #0]
 800783e:	f248 0320 	movw	r3, #32800	@ 0x8020
 8007842:	430b      	orrs	r3, r1
 8007844:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	683a      	ldr	r2, [r7, #0]
 800784c:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007852:	3304      	adds	r3, #4
 8007854:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800785a:	f003 031f 	and.w	r3, r3, #31
 800785e:	2201      	movs	r2, #1
 8007860:	409a      	lsls	r2, r3
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007866:	6a3b      	ldr	r3, [r7, #32]
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	68b9      	ldr	r1, [r7, #8]
 800786c:	68f8      	ldr	r0, [r7, #12]
 800786e:	f000 fb41 	bl	8007ef4 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a3c      	ldr	r2, [pc, #240]	@ (8007968 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d072      	beq.n	8007962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a3a      	ldr	r2, [pc, #232]	@ (800796c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d06d      	beq.n	8007962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a39      	ldr	r2, [pc, #228]	@ (8007970 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d068      	beq.n	8007962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a37      	ldr	r2, [pc, #220]	@ (8007974 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d063      	beq.n	8007962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a36      	ldr	r2, [pc, #216]	@ (8007978 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d05e      	beq.n	8007962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a34      	ldr	r2, [pc, #208]	@ (800797c <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d059      	beq.n	8007962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a33      	ldr	r2, [pc, #204]	@ (8007980 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d054      	beq.n	8007962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a31      	ldr	r2, [pc, #196]	@ (8007984 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d04f      	beq.n	8007962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a30      	ldr	r2, [pc, #192]	@ (8007988 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d04a      	beq.n	8007962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a2e      	ldr	r2, [pc, #184]	@ (800798c <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d045      	beq.n	8007962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a2d      	ldr	r2, [pc, #180]	@ (8007990 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d040      	beq.n	8007962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a2b      	ldr	r2, [pc, #172]	@ (8007994 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d03b      	beq.n	8007962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a2a      	ldr	r2, [pc, #168]	@ (8007998 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d036      	beq.n	8007962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a28      	ldr	r2, [pc, #160]	@ (800799c <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d031      	beq.n	8007962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a27      	ldr	r2, [pc, #156]	@ (80079a0 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d02c      	beq.n	8007962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a25      	ldr	r2, [pc, #148]	@ (80079a4 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d027      	beq.n	8007962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a24      	ldr	r2, [pc, #144]	@ (80079a8 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d022      	beq.n	8007962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a22      	ldr	r2, [pc, #136]	@ (80079ac <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d01d      	beq.n	8007962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a21      	ldr	r2, [pc, #132]	@ (80079b0 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d018      	beq.n	8007962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a1f      	ldr	r2, [pc, #124]	@ (80079b4 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d013      	beq.n	8007962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a1e      	ldr	r2, [pc, #120]	@ (80079b8 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d00e      	beq.n	8007962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a1c      	ldr	r2, [pc, #112]	@ (80079bc <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d009      	beq.n	8007962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a1b      	ldr	r2, [pc, #108]	@ (80079c0 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d004      	beq.n	8007962 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a19      	ldr	r2, [pc, #100]	@ (80079c4 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d132      	bne.n	80079c8 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8007962:	2301      	movs	r3, #1
 8007964:	e031      	b.n	80079ca <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 8007966:	bf00      	nop
 8007968:	40020010 	.word	0x40020010
 800796c:	40020028 	.word	0x40020028
 8007970:	40020040 	.word	0x40020040
 8007974:	40020058 	.word	0x40020058
 8007978:	40020070 	.word	0x40020070
 800797c:	40020088 	.word	0x40020088
 8007980:	400200a0 	.word	0x400200a0
 8007984:	400200b8 	.word	0x400200b8
 8007988:	40020410 	.word	0x40020410
 800798c:	40020428 	.word	0x40020428
 8007990:	40020440 	.word	0x40020440
 8007994:	40020458 	.word	0x40020458
 8007998:	40020470 	.word	0x40020470
 800799c:	40020488 	.word	0x40020488
 80079a0:	400204a0 	.word	0x400204a0
 80079a4:	400204b8 	.word	0x400204b8
 80079a8:	58025408 	.word	0x58025408
 80079ac:	5802541c 	.word	0x5802541c
 80079b0:	58025430 	.word	0x58025430
 80079b4:	58025444 	.word	0x58025444
 80079b8:	58025458 	.word	0x58025458
 80079bc:	5802546c 	.word	0x5802546c
 80079c0:	58025480 	.word	0x58025480
 80079c4:	58025494 	.word	0x58025494
 80079c8:	2300      	movs	r3, #0
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00d      	beq.n	80079ea <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80079d6:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d004      	beq.n	80079ea <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80079e8:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a3b      	ldr	r2, [pc, #236]	@ (8007adc <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d04a      	beq.n	8007a8a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a39      	ldr	r2, [pc, #228]	@ (8007ae0 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d045      	beq.n	8007a8a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a38      	ldr	r2, [pc, #224]	@ (8007ae4 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d040      	beq.n	8007a8a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a36      	ldr	r2, [pc, #216]	@ (8007ae8 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d03b      	beq.n	8007a8a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4a35      	ldr	r2, [pc, #212]	@ (8007aec <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d036      	beq.n	8007a8a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a33      	ldr	r2, [pc, #204]	@ (8007af0 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d031      	beq.n	8007a8a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	4a32      	ldr	r2, [pc, #200]	@ (8007af4 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 8007a2c:	4293      	cmp	r3, r2
 8007a2e:	d02c      	beq.n	8007a8a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4a30      	ldr	r2, [pc, #192]	@ (8007af8 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d027      	beq.n	8007a8a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a2f      	ldr	r2, [pc, #188]	@ (8007afc <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d022      	beq.n	8007a8a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a2d      	ldr	r2, [pc, #180]	@ (8007b00 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d01d      	beq.n	8007a8a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a2c      	ldr	r2, [pc, #176]	@ (8007b04 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d018      	beq.n	8007a8a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a2a      	ldr	r2, [pc, #168]	@ (8007b08 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d013      	beq.n	8007a8a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a29      	ldr	r2, [pc, #164]	@ (8007b0c <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d00e      	beq.n	8007a8a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a27      	ldr	r2, [pc, #156]	@ (8007b10 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d009      	beq.n	8007a8a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a26      	ldr	r2, [pc, #152]	@ (8007b14 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d004      	beq.n	8007a8a <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a24      	ldr	r2, [pc, #144]	@ (8007b18 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d101      	bne.n	8007a8e <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e000      	b.n	8007a90 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8007a8e:	2300      	movs	r3, #0
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d043      	beq.n	8007b1c <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f023 021e 	bic.w	r2, r3, #30
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f042 0216 	orr.w	r2, r2, #22
 8007aa6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	695a      	ldr	r2, [r3, #20]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007ab6:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d103      	bne.n	8007ac8 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d043      	beq.n	8007b50 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f042 0208 	orr.w	r2, r2, #8
 8007ad6:	601a      	str	r2, [r3, #0]
 8007ad8:	e03a      	b.n	8007b50 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8007ada:	bf00      	nop
 8007adc:	40020010 	.word	0x40020010
 8007ae0:	40020028 	.word	0x40020028
 8007ae4:	40020040 	.word	0x40020040
 8007ae8:	40020058 	.word	0x40020058
 8007aec:	40020070 	.word	0x40020070
 8007af0:	40020088 	.word	0x40020088
 8007af4:	400200a0 	.word	0x400200a0
 8007af8:	400200b8 	.word	0x400200b8
 8007afc:	40020410 	.word	0x40020410
 8007b00:	40020428 	.word	0x40020428
 8007b04:	40020440 	.word	0x40020440
 8007b08:	40020458 	.word	0x40020458
 8007b0c:	40020470 	.word	0x40020470
 8007b10:	40020488 	.word	0x40020488
 8007b14:	400204a0 	.word	0x400204a0
 8007b18:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f023 020e 	bic.w	r2, r3, #14
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f042 020a 	orr.w	r2, r2, #10
 8007b2e:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d103      	bne.n	8007b40 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d007      	beq.n	8007b50 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f042 0204 	orr.w	r2, r2, #4
 8007b4e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a81      	ldr	r2, [pc, #516]	@ (8007d5c <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d072      	beq.n	8007c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a80      	ldr	r2, [pc, #512]	@ (8007d60 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d06d      	beq.n	8007c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a7e      	ldr	r2, [pc, #504]	@ (8007d64 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d068      	beq.n	8007c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a7d      	ldr	r2, [pc, #500]	@ (8007d68 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d063      	beq.n	8007c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a7b      	ldr	r2, [pc, #492]	@ (8007d6c <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d05e      	beq.n	8007c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a7a      	ldr	r2, [pc, #488]	@ (8007d70 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d059      	beq.n	8007c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a78      	ldr	r2, [pc, #480]	@ (8007d74 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d054      	beq.n	8007c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a77      	ldr	r2, [pc, #476]	@ (8007d78 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d04f      	beq.n	8007c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a75      	ldr	r2, [pc, #468]	@ (8007d7c <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d04a      	beq.n	8007c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a74      	ldr	r2, [pc, #464]	@ (8007d80 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d045      	beq.n	8007c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a72      	ldr	r2, [pc, #456]	@ (8007d84 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d040      	beq.n	8007c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	4a71      	ldr	r2, [pc, #452]	@ (8007d88 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8007bc4:	4293      	cmp	r3, r2
 8007bc6:	d03b      	beq.n	8007c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a6f      	ldr	r2, [pc, #444]	@ (8007d8c <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d036      	beq.n	8007c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4a6e      	ldr	r2, [pc, #440]	@ (8007d90 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d031      	beq.n	8007c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a6c      	ldr	r2, [pc, #432]	@ (8007d94 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d02c      	beq.n	8007c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a6b      	ldr	r2, [pc, #428]	@ (8007d98 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8007bec:	4293      	cmp	r3, r2
 8007bee:	d027      	beq.n	8007c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	4a69      	ldr	r2, [pc, #420]	@ (8007d9c <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d022      	beq.n	8007c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a68      	ldr	r2, [pc, #416]	@ (8007da0 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d01d      	beq.n	8007c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a66      	ldr	r2, [pc, #408]	@ (8007da4 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d018      	beq.n	8007c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a65      	ldr	r2, [pc, #404]	@ (8007da8 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d013      	beq.n	8007c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a63      	ldr	r2, [pc, #396]	@ (8007dac <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d00e      	beq.n	8007c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a62      	ldr	r2, [pc, #392]	@ (8007db0 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d009      	beq.n	8007c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a60      	ldr	r2, [pc, #384]	@ (8007db4 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d004      	beq.n	8007c40 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a5f      	ldr	r2, [pc, #380]	@ (8007db8 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d101      	bne.n	8007c44 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 8007c40:	2301      	movs	r3, #1
 8007c42:	e000      	b.n	8007c46 <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8007c44:	2300      	movs	r3, #0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d01a      	beq.n	8007c80 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d007      	beq.n	8007c68 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c5c:	681a      	ldr	r2, [r3, #0]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007c62:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c66:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d007      	beq.n	8007c80 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007c7e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a35      	ldr	r2, [pc, #212]	@ (8007d5c <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d04a      	beq.n	8007d20 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a34      	ldr	r2, [pc, #208]	@ (8007d60 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d045      	beq.n	8007d20 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4a32      	ldr	r2, [pc, #200]	@ (8007d64 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d040      	beq.n	8007d20 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4a31      	ldr	r2, [pc, #196]	@ (8007d68 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d03b      	beq.n	8007d20 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	4a2f      	ldr	r2, [pc, #188]	@ (8007d6c <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d036      	beq.n	8007d20 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a2e      	ldr	r2, [pc, #184]	@ (8007d70 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d031      	beq.n	8007d20 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4a2c      	ldr	r2, [pc, #176]	@ (8007d74 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d02c      	beq.n	8007d20 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a2b      	ldr	r2, [pc, #172]	@ (8007d78 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d027      	beq.n	8007d20 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a29      	ldr	r2, [pc, #164]	@ (8007d7c <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d022      	beq.n	8007d20 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a28      	ldr	r2, [pc, #160]	@ (8007d80 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d01d      	beq.n	8007d20 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a26      	ldr	r2, [pc, #152]	@ (8007d84 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d018      	beq.n	8007d20 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a25      	ldr	r2, [pc, #148]	@ (8007d88 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d013      	beq.n	8007d20 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a23      	ldr	r2, [pc, #140]	@ (8007d8c <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d00e      	beq.n	8007d20 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a22      	ldr	r2, [pc, #136]	@ (8007d90 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d009      	beq.n	8007d20 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a20      	ldr	r2, [pc, #128]	@ (8007d94 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d004      	beq.n	8007d20 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a1f      	ldr	r2, [pc, #124]	@ (8007d98 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d108      	bne.n	8007d32 <HAL_DMAEx_MultiBufferStart_IT+0x632>
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f042 0201 	orr.w	r2, r2, #1
 8007d2e:	601a      	str	r2, [r3, #0]
 8007d30:	e00e      	b.n	8007d50 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f042 0201 	orr.w	r2, r2, #1
 8007d40:	601a      	str	r2, [r3, #0]
 8007d42:	e005      	b.n	8007d50 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007d4a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007d50:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3718      	adds	r7, #24
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	40020010 	.word	0x40020010
 8007d60:	40020028 	.word	0x40020028
 8007d64:	40020040 	.word	0x40020040
 8007d68:	40020058 	.word	0x40020058
 8007d6c:	40020070 	.word	0x40020070
 8007d70:	40020088 	.word	0x40020088
 8007d74:	400200a0 	.word	0x400200a0
 8007d78:	400200b8 	.word	0x400200b8
 8007d7c:	40020410 	.word	0x40020410
 8007d80:	40020428 	.word	0x40020428
 8007d84:	40020440 	.word	0x40020440
 8007d88:	40020458 	.word	0x40020458
 8007d8c:	40020470 	.word	0x40020470
 8007d90:	40020488 	.word	0x40020488
 8007d94:	400204a0 	.word	0x400204a0
 8007d98:	400204b8 	.word	0x400204b8
 8007d9c:	58025408 	.word	0x58025408
 8007da0:	5802541c 	.word	0x5802541c
 8007da4:	58025430 	.word	0x58025430
 8007da8:	58025444 	.word	0x58025444
 8007dac:	58025458 	.word	0x58025458
 8007db0:	5802546c 	.word	0x5802546c
 8007db4:	58025480 	.word	0x58025480
 8007db8:	58025494 	.word	0x58025494

08007dbc <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	60f8      	str	r0, [r7, #12]
 8007dc4:	60b9      	str	r1, [r7, #8]
 8007dc6:	4613      	mov	r3, r2
 8007dc8:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	4a39      	ldr	r2, [pc, #228]	@ (8007eb4 <HAL_DMAEx_ChangeMemory+0xf8>)
 8007dd0:	4293      	cmp	r3, r2
 8007dd2:	d04a      	beq.n	8007e6a <HAL_DMAEx_ChangeMemory+0xae>
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4a37      	ldr	r2, [pc, #220]	@ (8007eb8 <HAL_DMAEx_ChangeMemory+0xfc>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d045      	beq.n	8007e6a <HAL_DMAEx_ChangeMemory+0xae>
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4a36      	ldr	r2, [pc, #216]	@ (8007ebc <HAL_DMAEx_ChangeMemory+0x100>)
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d040      	beq.n	8007e6a <HAL_DMAEx_ChangeMemory+0xae>
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4a34      	ldr	r2, [pc, #208]	@ (8007ec0 <HAL_DMAEx_ChangeMemory+0x104>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d03b      	beq.n	8007e6a <HAL_DMAEx_ChangeMemory+0xae>
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	4a33      	ldr	r2, [pc, #204]	@ (8007ec4 <HAL_DMAEx_ChangeMemory+0x108>)
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d036      	beq.n	8007e6a <HAL_DMAEx_ChangeMemory+0xae>
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4a31      	ldr	r2, [pc, #196]	@ (8007ec8 <HAL_DMAEx_ChangeMemory+0x10c>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d031      	beq.n	8007e6a <HAL_DMAEx_ChangeMemory+0xae>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a30      	ldr	r2, [pc, #192]	@ (8007ecc <HAL_DMAEx_ChangeMemory+0x110>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d02c      	beq.n	8007e6a <HAL_DMAEx_ChangeMemory+0xae>
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a2e      	ldr	r2, [pc, #184]	@ (8007ed0 <HAL_DMAEx_ChangeMemory+0x114>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d027      	beq.n	8007e6a <HAL_DMAEx_ChangeMemory+0xae>
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	4a2d      	ldr	r2, [pc, #180]	@ (8007ed4 <HAL_DMAEx_ChangeMemory+0x118>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d022      	beq.n	8007e6a <HAL_DMAEx_ChangeMemory+0xae>
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4a2b      	ldr	r2, [pc, #172]	@ (8007ed8 <HAL_DMAEx_ChangeMemory+0x11c>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d01d      	beq.n	8007e6a <HAL_DMAEx_ChangeMemory+0xae>
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a2a      	ldr	r2, [pc, #168]	@ (8007edc <HAL_DMAEx_ChangeMemory+0x120>)
 8007e34:	4293      	cmp	r3, r2
 8007e36:	d018      	beq.n	8007e6a <HAL_DMAEx_ChangeMemory+0xae>
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	4a28      	ldr	r2, [pc, #160]	@ (8007ee0 <HAL_DMAEx_ChangeMemory+0x124>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d013      	beq.n	8007e6a <HAL_DMAEx_ChangeMemory+0xae>
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4a27      	ldr	r2, [pc, #156]	@ (8007ee4 <HAL_DMAEx_ChangeMemory+0x128>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d00e      	beq.n	8007e6a <HAL_DMAEx_ChangeMemory+0xae>
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a25      	ldr	r2, [pc, #148]	@ (8007ee8 <HAL_DMAEx_ChangeMemory+0x12c>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d009      	beq.n	8007e6a <HAL_DMAEx_ChangeMemory+0xae>
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4a24      	ldr	r2, [pc, #144]	@ (8007eec <HAL_DMAEx_ChangeMemory+0x130>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d004      	beq.n	8007e6a <HAL_DMAEx_ChangeMemory+0xae>
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a22      	ldr	r2, [pc, #136]	@ (8007ef0 <HAL_DMAEx_ChangeMemory+0x134>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d101      	bne.n	8007e6e <HAL_DMAEx_ChangeMemory+0xb2>
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	e000      	b.n	8007e70 <HAL_DMAEx_ChangeMemory+0xb4>
 8007e6e:	2300      	movs	r3, #0
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00c      	beq.n	8007e8e <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 8007e74:	79fb      	ldrb	r3, [r7, #7]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d104      	bne.n	8007e84 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	60da      	str	r2, [r3, #12]
 8007e82:	e010      	b.n	8007ea6 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	68ba      	ldr	r2, [r7, #8]
 8007e8a:	611a      	str	r2, [r3, #16]
 8007e8c:	e00b      	b.n	8007ea6 <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 8007e8e:	79fb      	ldrb	r3, [r7, #7]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d104      	bne.n	8007e9e <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68ba      	ldr	r2, [r7, #8]
 8007e9a:	60da      	str	r2, [r3, #12]
 8007e9c:	e003      	b.n	8007ea6 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	68ba      	ldr	r2, [r7, #8]
 8007ea4:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3714      	adds	r7, #20
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr
 8007eb4:	40020010 	.word	0x40020010
 8007eb8:	40020028 	.word	0x40020028
 8007ebc:	40020040 	.word	0x40020040
 8007ec0:	40020058 	.word	0x40020058
 8007ec4:	40020070 	.word	0x40020070
 8007ec8:	40020088 	.word	0x40020088
 8007ecc:	400200a0 	.word	0x400200a0
 8007ed0:	400200b8 	.word	0x400200b8
 8007ed4:	40020410 	.word	0x40020410
 8007ed8:	40020428 	.word	0x40020428
 8007edc:	40020440 	.word	0x40020440
 8007ee0:	40020458 	.word	0x40020458
 8007ee4:	40020470 	.word	0x40020470
 8007ee8:	40020488 	.word	0x40020488
 8007eec:	400204a0 	.word	0x400204a0
 8007ef0:	400204b8 	.word	0x400204b8

08007ef4 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007ef4:	b480      	push	{r7}
 8007ef6:	b085      	sub	sp, #20
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	60f8      	str	r0, [r7, #12]
 8007efc:	60b9      	str	r1, [r7, #8]
 8007efe:	607a      	str	r2, [r7, #4]
 8007f00:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a46      	ldr	r2, [pc, #280]	@ (8008020 <DMA_MultiBufferSetConfig+0x12c>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d04a      	beq.n	8007fa2 <DMA_MultiBufferSetConfig+0xae>
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a44      	ldr	r2, [pc, #272]	@ (8008024 <DMA_MultiBufferSetConfig+0x130>)
 8007f12:	4293      	cmp	r3, r2
 8007f14:	d045      	beq.n	8007fa2 <DMA_MultiBufferSetConfig+0xae>
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a43      	ldr	r2, [pc, #268]	@ (8008028 <DMA_MultiBufferSetConfig+0x134>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d040      	beq.n	8007fa2 <DMA_MultiBufferSetConfig+0xae>
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a41      	ldr	r2, [pc, #260]	@ (800802c <DMA_MultiBufferSetConfig+0x138>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d03b      	beq.n	8007fa2 <DMA_MultiBufferSetConfig+0xae>
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a40      	ldr	r2, [pc, #256]	@ (8008030 <DMA_MultiBufferSetConfig+0x13c>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d036      	beq.n	8007fa2 <DMA_MultiBufferSetConfig+0xae>
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a3e      	ldr	r2, [pc, #248]	@ (8008034 <DMA_MultiBufferSetConfig+0x140>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d031      	beq.n	8007fa2 <DMA_MultiBufferSetConfig+0xae>
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a3d      	ldr	r2, [pc, #244]	@ (8008038 <DMA_MultiBufferSetConfig+0x144>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d02c      	beq.n	8007fa2 <DMA_MultiBufferSetConfig+0xae>
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a3b      	ldr	r2, [pc, #236]	@ (800803c <DMA_MultiBufferSetConfig+0x148>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d027      	beq.n	8007fa2 <DMA_MultiBufferSetConfig+0xae>
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a3a      	ldr	r2, [pc, #232]	@ (8008040 <DMA_MultiBufferSetConfig+0x14c>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d022      	beq.n	8007fa2 <DMA_MultiBufferSetConfig+0xae>
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a38      	ldr	r2, [pc, #224]	@ (8008044 <DMA_MultiBufferSetConfig+0x150>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d01d      	beq.n	8007fa2 <DMA_MultiBufferSetConfig+0xae>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a37      	ldr	r2, [pc, #220]	@ (8008048 <DMA_MultiBufferSetConfig+0x154>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d018      	beq.n	8007fa2 <DMA_MultiBufferSetConfig+0xae>
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a35      	ldr	r2, [pc, #212]	@ (800804c <DMA_MultiBufferSetConfig+0x158>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d013      	beq.n	8007fa2 <DMA_MultiBufferSetConfig+0xae>
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a34      	ldr	r2, [pc, #208]	@ (8008050 <DMA_MultiBufferSetConfig+0x15c>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d00e      	beq.n	8007fa2 <DMA_MultiBufferSetConfig+0xae>
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a32      	ldr	r2, [pc, #200]	@ (8008054 <DMA_MultiBufferSetConfig+0x160>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d009      	beq.n	8007fa2 <DMA_MultiBufferSetConfig+0xae>
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a31      	ldr	r2, [pc, #196]	@ (8008058 <DMA_MultiBufferSetConfig+0x164>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d004      	beq.n	8007fa2 <DMA_MultiBufferSetConfig+0xae>
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a2f      	ldr	r2, [pc, #188]	@ (800805c <DMA_MultiBufferSetConfig+0x168>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d101      	bne.n	8007fa6 <DMA_MultiBufferSetConfig+0xb2>
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e000      	b.n	8007fa8 <DMA_MultiBufferSetConfig+0xb4>
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d019      	beq.n	8007fe0 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	683a      	ldr	r2, [r7, #0]
 8007fb2:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	689b      	ldr	r3, [r3, #8]
 8007fb8:	2b40      	cmp	r3, #64	@ 0x40
 8007fba:	d108      	bne.n	8007fce <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68ba      	ldr	r2, [r7, #8]
 8007fca:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8007fcc:	e021      	b.n	8008012 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	68ba      	ldr	r2, [r7, #8]
 8007fd4:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	60da      	str	r2, [r3, #12]
}
 8007fde:	e018      	b.n	8008012 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	683a      	ldr	r2, [r7, #0]
 8007fe6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	2b40      	cmp	r3, #64	@ 0x40
 8007fee:	d108      	bne.n	8008002 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	68ba      	ldr	r2, [r7, #8]
 8007ffe:	60da      	str	r2, [r3, #12]
}
 8008000:	e007      	b.n	8008012 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	68ba      	ldr	r2, [r7, #8]
 8008008:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	60da      	str	r2, [r3, #12]
}
 8008012:	bf00      	nop
 8008014:	3714      	adds	r7, #20
 8008016:	46bd      	mov	sp, r7
 8008018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801c:	4770      	bx	lr
 800801e:	bf00      	nop
 8008020:	40020010 	.word	0x40020010
 8008024:	40020028 	.word	0x40020028
 8008028:	40020040 	.word	0x40020040
 800802c:	40020058 	.word	0x40020058
 8008030:	40020070 	.word	0x40020070
 8008034:	40020088 	.word	0x40020088
 8008038:	400200a0 	.word	0x400200a0
 800803c:	400200b8 	.word	0x400200b8
 8008040:	40020410 	.word	0x40020410
 8008044:	40020428 	.word	0x40020428
 8008048:	40020440 	.word	0x40020440
 800804c:	40020458 	.word	0x40020458
 8008050:	40020470 	.word	0x40020470
 8008054:	40020488 	.word	0x40020488
 8008058:	400204a0 	.word	0x400204a0
 800805c:	400204b8 	.word	0x400204b8

08008060 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8008060:	b480      	push	{r7}
 8008062:	b089      	sub	sp, #36	@ 0x24
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800806a:	2300      	movs	r3, #0
 800806c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800806e:	4b89      	ldr	r3, [pc, #548]	@ (8008294 <HAL_GPIO_Init+0x234>)
 8008070:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008072:	e194      	b.n	800839e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	2101      	movs	r1, #1
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	fa01 f303 	lsl.w	r3, r1, r3
 8008080:	4013      	ands	r3, r2
 8008082:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	2b00      	cmp	r3, #0
 8008088:	f000 8186 	beq.w	8008398 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	685b      	ldr	r3, [r3, #4]
 8008090:	f003 0303 	and.w	r3, r3, #3
 8008094:	2b01      	cmp	r3, #1
 8008096:	d005      	beq.n	80080a4 <HAL_GPIO_Init+0x44>
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	f003 0303 	and.w	r3, r3, #3
 80080a0:	2b02      	cmp	r3, #2
 80080a2:	d130      	bne.n	8008106 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80080aa:	69fb      	ldr	r3, [r7, #28]
 80080ac:	005b      	lsls	r3, r3, #1
 80080ae:	2203      	movs	r2, #3
 80080b0:	fa02 f303 	lsl.w	r3, r2, r3
 80080b4:	43db      	mvns	r3, r3
 80080b6:	69ba      	ldr	r2, [r7, #24]
 80080b8:	4013      	ands	r3, r2
 80080ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	68da      	ldr	r2, [r3, #12]
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	005b      	lsls	r3, r3, #1
 80080c4:	fa02 f303 	lsl.w	r3, r2, r3
 80080c8:	69ba      	ldr	r2, [r7, #24]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	69ba      	ldr	r2, [r7, #24]
 80080d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80080da:	2201      	movs	r2, #1
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	fa02 f303 	lsl.w	r3, r2, r3
 80080e2:	43db      	mvns	r3, r3
 80080e4:	69ba      	ldr	r2, [r7, #24]
 80080e6:	4013      	ands	r3, r2
 80080e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	091b      	lsrs	r3, r3, #4
 80080f0:	f003 0201 	and.w	r2, r3, #1
 80080f4:	69fb      	ldr	r3, [r7, #28]
 80080f6:	fa02 f303 	lsl.w	r3, r2, r3
 80080fa:	69ba      	ldr	r2, [r7, #24]
 80080fc:	4313      	orrs	r3, r2
 80080fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	69ba      	ldr	r2, [r7, #24]
 8008104:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	685b      	ldr	r3, [r3, #4]
 800810a:	f003 0303 	and.w	r3, r3, #3
 800810e:	2b03      	cmp	r3, #3
 8008110:	d017      	beq.n	8008142 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	68db      	ldr	r3, [r3, #12]
 8008116:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	005b      	lsls	r3, r3, #1
 800811c:	2203      	movs	r2, #3
 800811e:	fa02 f303 	lsl.w	r3, r2, r3
 8008122:	43db      	mvns	r3, r3
 8008124:	69ba      	ldr	r2, [r7, #24]
 8008126:	4013      	ands	r3, r2
 8008128:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	689a      	ldr	r2, [r3, #8]
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	005b      	lsls	r3, r3, #1
 8008132:	fa02 f303 	lsl.w	r3, r2, r3
 8008136:	69ba      	ldr	r2, [r7, #24]
 8008138:	4313      	orrs	r3, r2
 800813a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	69ba      	ldr	r2, [r7, #24]
 8008140:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008142:	683b      	ldr	r3, [r7, #0]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	f003 0303 	and.w	r3, r3, #3
 800814a:	2b02      	cmp	r3, #2
 800814c:	d123      	bne.n	8008196 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	08da      	lsrs	r2, r3, #3
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	3208      	adds	r2, #8
 8008156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800815a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	f003 0307 	and.w	r3, r3, #7
 8008162:	009b      	lsls	r3, r3, #2
 8008164:	220f      	movs	r2, #15
 8008166:	fa02 f303 	lsl.w	r3, r2, r3
 800816a:	43db      	mvns	r3, r3
 800816c:	69ba      	ldr	r2, [r7, #24]
 800816e:	4013      	ands	r3, r2
 8008170:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	691a      	ldr	r2, [r3, #16]
 8008176:	69fb      	ldr	r3, [r7, #28]
 8008178:	f003 0307 	and.w	r3, r3, #7
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	fa02 f303 	lsl.w	r3, r2, r3
 8008182:	69ba      	ldr	r2, [r7, #24]
 8008184:	4313      	orrs	r3, r2
 8008186:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	08da      	lsrs	r2, r3, #3
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	3208      	adds	r2, #8
 8008190:	69b9      	ldr	r1, [r7, #24]
 8008192:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800819c:	69fb      	ldr	r3, [r7, #28]
 800819e:	005b      	lsls	r3, r3, #1
 80081a0:	2203      	movs	r2, #3
 80081a2:	fa02 f303 	lsl.w	r3, r2, r3
 80081a6:	43db      	mvns	r3, r3
 80081a8:	69ba      	ldr	r2, [r7, #24]
 80081aa:	4013      	ands	r3, r2
 80081ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	f003 0203 	and.w	r2, r3, #3
 80081b6:	69fb      	ldr	r3, [r7, #28]
 80081b8:	005b      	lsls	r3, r3, #1
 80081ba:	fa02 f303 	lsl.w	r3, r2, r3
 80081be:	69ba      	ldr	r2, [r7, #24]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	69ba      	ldr	r2, [r7, #24]
 80081c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f000 80e0 	beq.w	8008398 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80081d8:	4b2f      	ldr	r3, [pc, #188]	@ (8008298 <HAL_GPIO_Init+0x238>)
 80081da:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80081de:	4a2e      	ldr	r2, [pc, #184]	@ (8008298 <HAL_GPIO_Init+0x238>)
 80081e0:	f043 0302 	orr.w	r3, r3, #2
 80081e4:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
 80081e8:	4b2b      	ldr	r3, [pc, #172]	@ (8008298 <HAL_GPIO_Init+0x238>)
 80081ea:	f8d3 3154 	ldr.w	r3, [r3, #340]	@ 0x154
 80081ee:	f003 0302 	and.w	r3, r3, #2
 80081f2:	60fb      	str	r3, [r7, #12]
 80081f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80081f6:	4a29      	ldr	r2, [pc, #164]	@ (800829c <HAL_GPIO_Init+0x23c>)
 80081f8:	69fb      	ldr	r3, [r7, #28]
 80081fa:	089b      	lsrs	r3, r3, #2
 80081fc:	3302      	adds	r3, #2
 80081fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008202:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	f003 0303 	and.w	r3, r3, #3
 800820a:	009b      	lsls	r3, r3, #2
 800820c:	220f      	movs	r2, #15
 800820e:	fa02 f303 	lsl.w	r3, r2, r3
 8008212:	43db      	mvns	r3, r3
 8008214:	69ba      	ldr	r2, [r7, #24]
 8008216:	4013      	ands	r3, r2
 8008218:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4a20      	ldr	r2, [pc, #128]	@ (80082a0 <HAL_GPIO_Init+0x240>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d052      	beq.n	80082c8 <HAL_GPIO_Init+0x268>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	4a1f      	ldr	r2, [pc, #124]	@ (80082a4 <HAL_GPIO_Init+0x244>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d031      	beq.n	800828e <HAL_GPIO_Init+0x22e>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4a1e      	ldr	r2, [pc, #120]	@ (80082a8 <HAL_GPIO_Init+0x248>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d02b      	beq.n	800828a <HAL_GPIO_Init+0x22a>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4a1d      	ldr	r2, [pc, #116]	@ (80082ac <HAL_GPIO_Init+0x24c>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d025      	beq.n	8008286 <HAL_GPIO_Init+0x226>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4a1c      	ldr	r2, [pc, #112]	@ (80082b0 <HAL_GPIO_Init+0x250>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d01f      	beq.n	8008282 <HAL_GPIO_Init+0x222>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4a1b      	ldr	r2, [pc, #108]	@ (80082b4 <HAL_GPIO_Init+0x254>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d019      	beq.n	800827e <HAL_GPIO_Init+0x21e>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4a1a      	ldr	r2, [pc, #104]	@ (80082b8 <HAL_GPIO_Init+0x258>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d013      	beq.n	800827a <HAL_GPIO_Init+0x21a>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	4a19      	ldr	r2, [pc, #100]	@ (80082bc <HAL_GPIO_Init+0x25c>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d00d      	beq.n	8008276 <HAL_GPIO_Init+0x216>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	4a18      	ldr	r2, [pc, #96]	@ (80082c0 <HAL_GPIO_Init+0x260>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d007      	beq.n	8008272 <HAL_GPIO_Init+0x212>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	4a17      	ldr	r2, [pc, #92]	@ (80082c4 <HAL_GPIO_Init+0x264>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d101      	bne.n	800826e <HAL_GPIO_Init+0x20e>
 800826a:	2309      	movs	r3, #9
 800826c:	e02d      	b.n	80082ca <HAL_GPIO_Init+0x26a>
 800826e:	230a      	movs	r3, #10
 8008270:	e02b      	b.n	80082ca <HAL_GPIO_Init+0x26a>
 8008272:	2308      	movs	r3, #8
 8008274:	e029      	b.n	80082ca <HAL_GPIO_Init+0x26a>
 8008276:	2307      	movs	r3, #7
 8008278:	e027      	b.n	80082ca <HAL_GPIO_Init+0x26a>
 800827a:	2306      	movs	r3, #6
 800827c:	e025      	b.n	80082ca <HAL_GPIO_Init+0x26a>
 800827e:	2305      	movs	r3, #5
 8008280:	e023      	b.n	80082ca <HAL_GPIO_Init+0x26a>
 8008282:	2304      	movs	r3, #4
 8008284:	e021      	b.n	80082ca <HAL_GPIO_Init+0x26a>
 8008286:	2303      	movs	r3, #3
 8008288:	e01f      	b.n	80082ca <HAL_GPIO_Init+0x26a>
 800828a:	2302      	movs	r3, #2
 800828c:	e01d      	b.n	80082ca <HAL_GPIO_Init+0x26a>
 800828e:	2301      	movs	r3, #1
 8008290:	e01b      	b.n	80082ca <HAL_GPIO_Init+0x26a>
 8008292:	bf00      	nop
 8008294:	58000080 	.word	0x58000080
 8008298:	58024400 	.word	0x58024400
 800829c:	58000400 	.word	0x58000400
 80082a0:	58020000 	.word	0x58020000
 80082a4:	58020400 	.word	0x58020400
 80082a8:	58020800 	.word	0x58020800
 80082ac:	58020c00 	.word	0x58020c00
 80082b0:	58021000 	.word	0x58021000
 80082b4:	58021400 	.word	0x58021400
 80082b8:	58021800 	.word	0x58021800
 80082bc:	58021c00 	.word	0x58021c00
 80082c0:	58022000 	.word	0x58022000
 80082c4:	58022400 	.word	0x58022400
 80082c8:	2300      	movs	r3, #0
 80082ca:	69fa      	ldr	r2, [r7, #28]
 80082cc:	f002 0203 	and.w	r2, r2, #3
 80082d0:	0092      	lsls	r2, r2, #2
 80082d2:	4093      	lsls	r3, r2
 80082d4:	69ba      	ldr	r2, [r7, #24]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80082da:	4938      	ldr	r1, [pc, #224]	@ (80083bc <HAL_GPIO_Init+0x35c>)
 80082dc:	69fb      	ldr	r3, [r7, #28]
 80082de:	089b      	lsrs	r3, r3, #2
 80082e0:	3302      	adds	r3, #2
 80082e2:	69ba      	ldr	r2, [r7, #24]
 80082e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80082e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	43db      	mvns	r3, r3
 80082f4:	69ba      	ldr	r2, [r7, #24]
 80082f6:	4013      	ands	r3, r2
 80082f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008302:	2b00      	cmp	r3, #0
 8008304:	d003      	beq.n	800830e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008306:	69ba      	ldr	r2, [r7, #24]
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	4313      	orrs	r3, r2
 800830c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800830e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008312:	69bb      	ldr	r3, [r7, #24]
 8008314:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008316:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800831a:	685b      	ldr	r3, [r3, #4]
 800831c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	43db      	mvns	r3, r3
 8008322:	69ba      	ldr	r2, [r7, #24]
 8008324:	4013      	ands	r3, r2
 8008326:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008330:	2b00      	cmp	r3, #0
 8008332:	d003      	beq.n	800833c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008334:	69ba      	ldr	r2, [r7, #24]
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	4313      	orrs	r3, r2
 800833a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800833c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008340:	69bb      	ldr	r3, [r7, #24]
 8008342:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	43db      	mvns	r3, r3
 800834e:	69ba      	ldr	r2, [r7, #24]
 8008350:	4013      	ands	r3, r2
 8008352:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800835c:	2b00      	cmp	r3, #0
 800835e:	d003      	beq.n	8008368 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008360:	69ba      	ldr	r2, [r7, #24]
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	4313      	orrs	r3, r2
 8008366:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008368:	697b      	ldr	r3, [r7, #20]
 800836a:	69ba      	ldr	r2, [r7, #24]
 800836c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	43db      	mvns	r3, r3
 8008378:	69ba      	ldr	r2, [r7, #24]
 800837a:	4013      	ands	r3, r2
 800837c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008386:	2b00      	cmp	r3, #0
 8008388:	d003      	beq.n	8008392 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800838a:	69ba      	ldr	r2, [r7, #24]
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	4313      	orrs	r3, r2
 8008390:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	69ba      	ldr	r2, [r7, #24]
 8008396:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	3301      	adds	r3, #1
 800839c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	fa22 f303 	lsr.w	r3, r2, r3
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f47f ae63 	bne.w	8008074 <HAL_GPIO_Init+0x14>
  }
}
 80083ae:	bf00      	nop
 80083b0:	bf00      	nop
 80083b2:	3724      	adds	r7, #36	@ 0x24
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr
 80083bc:	58000400 	.word	0x58000400

080083c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b085      	sub	sp, #20
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	460b      	mov	r3, r1
 80083ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	691a      	ldr	r2, [r3, #16]
 80083d0:	887b      	ldrh	r3, [r7, #2]
 80083d2:	4013      	ands	r3, r2
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d002      	beq.n	80083de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80083d8:	2301      	movs	r3, #1
 80083da:	73fb      	strb	r3, [r7, #15]
 80083dc:	e001      	b.n	80083e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80083de:	2300      	movs	r3, #0
 80083e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80083e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3714      	adds	r7, #20
 80083e8:	46bd      	mov	sp, r7
 80083ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ee:	4770      	bx	lr

080083f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b083      	sub	sp, #12
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	460b      	mov	r3, r1
 80083fa:	807b      	strh	r3, [r7, #2]
 80083fc:	4613      	mov	r3, r2
 80083fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008400:	787b      	ldrb	r3, [r7, #1]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d003      	beq.n	800840e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008406:	887a      	ldrh	r2, [r7, #2]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800840c:	e003      	b.n	8008416 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800840e:	887b      	ldrh	r3, [r7, #2]
 8008410:	041a      	lsls	r2, r3, #16
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	619a      	str	r2, [r3, #24]
}
 8008416:	bf00      	nop
 8008418:	370c      	adds	r7, #12
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr

08008422 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b082      	sub	sp, #8
 8008426:	af00      	add	r7, sp, #0
 8008428:	4603      	mov	r3, r0
 800842a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800842c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008430:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008434:	88fb      	ldrh	r3, [r7, #6]
 8008436:	4013      	ands	r3, r2
 8008438:	2b00      	cmp	r3, #0
 800843a:	d008      	beq.n	800844e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800843c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008440:	88fb      	ldrh	r3, [r7, #6]
 8008442:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8008446:	88fb      	ldrh	r3, [r7, #6]
 8008448:	4618      	mov	r0, r3
 800844a:	f7f8 fe5b 	bl	8001104 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800844e:	bf00      	nop
 8008450:	3708      	adds	r7, #8
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
	...

08008458 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d101      	bne.n	800846a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	e08b      	b.n	8008582 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008470:	b2db      	uxtb	r3, r3
 8008472:	2b00      	cmp	r3, #0
 8008474:	d106      	bne.n	8008484 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f7fa fb46 	bl	8002b10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2224      	movs	r2, #36	@ 0x24
 8008488:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	681a      	ldr	r2, [r3, #0]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f022 0201 	bic.w	r2, r2, #1
 800849a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	685a      	ldr	r2, [r3, #4]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80084a8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	689a      	ldr	r2, [r3, #8]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80084b8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	68db      	ldr	r3, [r3, #12]
 80084be:	2b01      	cmp	r3, #1
 80084c0:	d107      	bne.n	80084d2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	689a      	ldr	r2, [r3, #8]
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80084ce:	609a      	str	r2, [r3, #8]
 80084d0:	e006      	b.n	80084e0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	689a      	ldr	r2, [r3, #8]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80084de:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	2b02      	cmp	r3, #2
 80084e6:	d108      	bne.n	80084fa <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	685a      	ldr	r2, [r3, #4]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80084f6:	605a      	str	r2, [r3, #4]
 80084f8:	e007      	b.n	800850a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	685a      	ldr	r2, [r3, #4]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008508:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	6859      	ldr	r1, [r3, #4]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	4b1d      	ldr	r3, [pc, #116]	@ (800858c <HAL_I2C_Init+0x134>)
 8008516:	430b      	orrs	r3, r1
 8008518:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	68da      	ldr	r2, [r3, #12]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008528:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	691a      	ldr	r2, [r3, #16]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	695b      	ldr	r3, [r3, #20]
 8008532:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	699b      	ldr	r3, [r3, #24]
 800853a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	430a      	orrs	r2, r1
 8008542:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	69d9      	ldr	r1, [r3, #28]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6a1a      	ldr	r2, [r3, #32]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	430a      	orrs	r2, r1
 8008552:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f042 0201 	orr.w	r2, r2, #1
 8008562:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2220      	movs	r2, #32
 800856e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8008580:	2300      	movs	r3, #0
}
 8008582:	4618      	mov	r0, r3
 8008584:	3708      	adds	r7, #8
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	02008000 	.word	0x02008000

08008590 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b088      	sub	sp, #32
 8008594:	af02      	add	r7, sp, #8
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	607a      	str	r2, [r7, #4]
 800859a:	461a      	mov	r2, r3
 800859c:	460b      	mov	r3, r1
 800859e:	817b      	strh	r3, [r7, #10]
 80085a0:	4613      	mov	r3, r2
 80085a2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	2b20      	cmp	r3, #32
 80085ae:	f040 80fd 	bne.w	80087ac <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80085b8:	2b01      	cmp	r3, #1
 80085ba:	d101      	bne.n	80085c0 <HAL_I2C_Master_Transmit+0x30>
 80085bc:	2302      	movs	r3, #2
 80085be:	e0f6      	b.n	80087ae <HAL_I2C_Master_Transmit+0x21e>
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2201      	movs	r2, #1
 80085c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80085c8:	f7fa fde8 	bl	800319c <HAL_GetTick>
 80085cc:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	9300      	str	r3, [sp, #0]
 80085d2:	2319      	movs	r3, #25
 80085d4:	2201      	movs	r2, #1
 80085d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80085da:	68f8      	ldr	r0, [r7, #12]
 80085dc:	f000 fb72 	bl	8008cc4 <I2C_WaitOnFlagUntilTimeout>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d001      	beq.n	80085ea <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80085e6:	2301      	movs	r3, #1
 80085e8:	e0e1      	b.n	80087ae <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2221      	movs	r2, #33	@ 0x21
 80085ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2210      	movs	r2, #16
 80085f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2200      	movs	r2, #0
 80085fe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	893a      	ldrh	r2, [r7, #8]
 800860a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2200      	movs	r2, #0
 8008610:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008616:	b29b      	uxth	r3, r3
 8008618:	2bff      	cmp	r3, #255	@ 0xff
 800861a:	d906      	bls.n	800862a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	22ff      	movs	r2, #255	@ 0xff
 8008620:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8008622:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008626:	617b      	str	r3, [r7, #20]
 8008628:	e007      	b.n	800863a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800862e:	b29a      	uxth	r2, r3
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008634:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008638:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800863e:	2b00      	cmp	r3, #0
 8008640:	d024      	beq.n	800868c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008646:	781a      	ldrb	r2, [r3, #0]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008652:	1c5a      	adds	r2, r3, #1
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800865c:	b29b      	uxth	r3, r3
 800865e:	3b01      	subs	r3, #1
 8008660:	b29a      	uxth	r2, r3
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800866a:	3b01      	subs	r3, #1
 800866c:	b29a      	uxth	r2, r3
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008676:	b2db      	uxtb	r3, r3
 8008678:	3301      	adds	r3, #1
 800867a:	b2da      	uxtb	r2, r3
 800867c:	8979      	ldrh	r1, [r7, #10]
 800867e:	4b4e      	ldr	r3, [pc, #312]	@ (80087b8 <HAL_I2C_Master_Transmit+0x228>)
 8008680:	9300      	str	r3, [sp, #0]
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	68f8      	ldr	r0, [r7, #12]
 8008686:	f000 fd6d 	bl	8009164 <I2C_TransferConfig>
 800868a:	e066      	b.n	800875a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008690:	b2da      	uxtb	r2, r3
 8008692:	8979      	ldrh	r1, [r7, #10]
 8008694:	4b48      	ldr	r3, [pc, #288]	@ (80087b8 <HAL_I2C_Master_Transmit+0x228>)
 8008696:	9300      	str	r3, [sp, #0]
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	68f8      	ldr	r0, [r7, #12]
 800869c:	f000 fd62 	bl	8009164 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80086a0:	e05b      	b.n	800875a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80086a2:	693a      	ldr	r2, [r7, #16]
 80086a4:	6a39      	ldr	r1, [r7, #32]
 80086a6:	68f8      	ldr	r0, [r7, #12]
 80086a8:	f000 fb65 	bl	8008d76 <I2C_WaitOnTXISFlagUntilTimeout>
 80086ac:	4603      	mov	r3, r0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d001      	beq.n	80086b6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e07b      	b.n	80087ae <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ba:	781a      	ldrb	r2, [r3, #0]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086c6:	1c5a      	adds	r2, r3, #1
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086d0:	b29b      	uxth	r3, r3
 80086d2:	3b01      	subs	r3, #1
 80086d4:	b29a      	uxth	r2, r3
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086de:	3b01      	subs	r3, #1
 80086e0:	b29a      	uxth	r2, r3
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d034      	beq.n	800875a <HAL_I2C_Master_Transmit+0x1ca>
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d130      	bne.n	800875a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80086f8:	693b      	ldr	r3, [r7, #16]
 80086fa:	9300      	str	r3, [sp, #0]
 80086fc:	6a3b      	ldr	r3, [r7, #32]
 80086fe:	2200      	movs	r2, #0
 8008700:	2180      	movs	r1, #128	@ 0x80
 8008702:	68f8      	ldr	r0, [r7, #12]
 8008704:	f000 fade 	bl	8008cc4 <I2C_WaitOnFlagUntilTimeout>
 8008708:	4603      	mov	r3, r0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d001      	beq.n	8008712 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	e04d      	b.n	80087ae <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008716:	b29b      	uxth	r3, r3
 8008718:	2bff      	cmp	r3, #255	@ 0xff
 800871a:	d90e      	bls.n	800873a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	22ff      	movs	r2, #255	@ 0xff
 8008720:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008726:	b2da      	uxtb	r2, r3
 8008728:	8979      	ldrh	r1, [r7, #10]
 800872a:	2300      	movs	r3, #0
 800872c:	9300      	str	r3, [sp, #0]
 800872e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008732:	68f8      	ldr	r0, [r7, #12]
 8008734:	f000 fd16 	bl	8009164 <I2C_TransferConfig>
 8008738:	e00f      	b.n	800875a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800873e:	b29a      	uxth	r2, r3
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008748:	b2da      	uxtb	r2, r3
 800874a:	8979      	ldrh	r1, [r7, #10]
 800874c:	2300      	movs	r3, #0
 800874e:	9300      	str	r3, [sp, #0]
 8008750:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008754:	68f8      	ldr	r0, [r7, #12]
 8008756:	f000 fd05 	bl	8009164 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800875e:	b29b      	uxth	r3, r3
 8008760:	2b00      	cmp	r3, #0
 8008762:	d19e      	bne.n	80086a2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008764:	693a      	ldr	r2, [r7, #16]
 8008766:	6a39      	ldr	r1, [r7, #32]
 8008768:	68f8      	ldr	r0, [r7, #12]
 800876a:	f000 fb4b 	bl	8008e04 <I2C_WaitOnSTOPFlagUntilTimeout>
 800876e:	4603      	mov	r3, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	d001      	beq.n	8008778 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8008774:	2301      	movs	r3, #1
 8008776:	e01a      	b.n	80087ae <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	2220      	movs	r2, #32
 800877e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	6859      	ldr	r1, [r3, #4]
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	4b0c      	ldr	r3, [pc, #48]	@ (80087bc <HAL_I2C_Master_Transmit+0x22c>)
 800878c:	400b      	ands	r3, r1
 800878e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2220      	movs	r2, #32
 8008794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2200      	movs	r2, #0
 800879c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2200      	movs	r2, #0
 80087a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80087a8:	2300      	movs	r3, #0
 80087aa:	e000      	b.n	80087ae <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80087ac:	2302      	movs	r3, #2
  }
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3718      	adds	r7, #24
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	80002000 	.word	0x80002000
 80087bc:	fe00e800 	.word	0xfe00e800

080087c0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b088      	sub	sp, #32
 80087c4:	af02      	add	r7, sp, #8
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	607a      	str	r2, [r7, #4]
 80087ca:	461a      	mov	r2, r3
 80087cc:	460b      	mov	r3, r1
 80087ce:	817b      	strh	r3, [r7, #10]
 80087d0:	4613      	mov	r3, r2
 80087d2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	2b20      	cmp	r3, #32
 80087de:	f040 80db 	bne.w	8008998 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80087e8:	2b01      	cmp	r3, #1
 80087ea:	d101      	bne.n	80087f0 <HAL_I2C_Master_Receive+0x30>
 80087ec:	2302      	movs	r3, #2
 80087ee:	e0d4      	b.n	800899a <HAL_I2C_Master_Receive+0x1da>
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80087f8:	f7fa fcd0 	bl	800319c <HAL_GetTick>
 80087fc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	9300      	str	r3, [sp, #0]
 8008802:	2319      	movs	r3, #25
 8008804:	2201      	movs	r2, #1
 8008806:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800880a:	68f8      	ldr	r0, [r7, #12]
 800880c:	f000 fa5a 	bl	8008cc4 <I2C_WaitOnFlagUntilTimeout>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d001      	beq.n	800881a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8008816:	2301      	movs	r3, #1
 8008818:	e0bf      	b.n	800899a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2222      	movs	r2, #34	@ 0x22
 800881e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2210      	movs	r2, #16
 8008826:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2200      	movs	r2, #0
 800882e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	893a      	ldrh	r2, [r7, #8]
 800883a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2200      	movs	r2, #0
 8008840:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008846:	b29b      	uxth	r3, r3
 8008848:	2bff      	cmp	r3, #255	@ 0xff
 800884a:	d90e      	bls.n	800886a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	22ff      	movs	r2, #255	@ 0xff
 8008850:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008856:	b2da      	uxtb	r2, r3
 8008858:	8979      	ldrh	r1, [r7, #10]
 800885a:	4b52      	ldr	r3, [pc, #328]	@ (80089a4 <HAL_I2C_Master_Receive+0x1e4>)
 800885c:	9300      	str	r3, [sp, #0]
 800885e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008862:	68f8      	ldr	r0, [r7, #12]
 8008864:	f000 fc7e 	bl	8009164 <I2C_TransferConfig>
 8008868:	e06d      	b.n	8008946 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800886e:	b29a      	uxth	r2, r3
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008878:	b2da      	uxtb	r2, r3
 800887a:	8979      	ldrh	r1, [r7, #10]
 800887c:	4b49      	ldr	r3, [pc, #292]	@ (80089a4 <HAL_I2C_Master_Receive+0x1e4>)
 800887e:	9300      	str	r3, [sp, #0]
 8008880:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	f000 fc6d 	bl	8009164 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800888a:	e05c      	b.n	8008946 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800888c:	697a      	ldr	r2, [r7, #20]
 800888e:	6a39      	ldr	r1, [r7, #32]
 8008890:	68f8      	ldr	r0, [r7, #12]
 8008892:	f000 fafb 	bl	8008e8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8008896:	4603      	mov	r3, r0
 8008898:	2b00      	cmp	r3, #0
 800889a:	d001      	beq.n	80088a0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	e07c      	b.n	800899a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088aa:	b2d2      	uxtb	r2, r2
 80088ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088b2:	1c5a      	adds	r2, r3, #1
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088bc:	3b01      	subs	r3, #1
 80088be:	b29a      	uxth	r2, r3
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	3b01      	subs	r3, #1
 80088cc:	b29a      	uxth	r2, r3
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d034      	beq.n	8008946 <HAL_I2C_Master_Receive+0x186>
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d130      	bne.n	8008946 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80088e4:	697b      	ldr	r3, [r7, #20]
 80088e6:	9300      	str	r3, [sp, #0]
 80088e8:	6a3b      	ldr	r3, [r7, #32]
 80088ea:	2200      	movs	r2, #0
 80088ec:	2180      	movs	r1, #128	@ 0x80
 80088ee:	68f8      	ldr	r0, [r7, #12]
 80088f0:	f000 f9e8 	bl	8008cc4 <I2C_WaitOnFlagUntilTimeout>
 80088f4:	4603      	mov	r3, r0
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d001      	beq.n	80088fe <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e04d      	b.n	800899a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008902:	b29b      	uxth	r3, r3
 8008904:	2bff      	cmp	r3, #255	@ 0xff
 8008906:	d90e      	bls.n	8008926 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	22ff      	movs	r2, #255	@ 0xff
 800890c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008912:	b2da      	uxtb	r2, r3
 8008914:	8979      	ldrh	r1, [r7, #10]
 8008916:	2300      	movs	r3, #0
 8008918:	9300      	str	r3, [sp, #0]
 800891a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800891e:	68f8      	ldr	r0, [r7, #12]
 8008920:	f000 fc20 	bl	8009164 <I2C_TransferConfig>
 8008924:	e00f      	b.n	8008946 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800892a:	b29a      	uxth	r2, r3
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008934:	b2da      	uxtb	r2, r3
 8008936:	8979      	ldrh	r1, [r7, #10]
 8008938:	2300      	movs	r3, #0
 800893a:	9300      	str	r3, [sp, #0]
 800893c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008940:	68f8      	ldr	r0, [r7, #12]
 8008942:	f000 fc0f 	bl	8009164 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800894a:	b29b      	uxth	r3, r3
 800894c:	2b00      	cmp	r3, #0
 800894e:	d19d      	bne.n	800888c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008950:	697a      	ldr	r2, [r7, #20]
 8008952:	6a39      	ldr	r1, [r7, #32]
 8008954:	68f8      	ldr	r0, [r7, #12]
 8008956:	f000 fa55 	bl	8008e04 <I2C_WaitOnSTOPFlagUntilTimeout>
 800895a:	4603      	mov	r3, r0
 800895c:	2b00      	cmp	r3, #0
 800895e:	d001      	beq.n	8008964 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	e01a      	b.n	800899a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	2220      	movs	r2, #32
 800896a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	6859      	ldr	r1, [r3, #4]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681a      	ldr	r2, [r3, #0]
 8008976:	4b0c      	ldr	r3, [pc, #48]	@ (80089a8 <HAL_I2C_Master_Receive+0x1e8>)
 8008978:	400b      	ands	r3, r1
 800897a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2220      	movs	r2, #32
 8008980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	2200      	movs	r2, #0
 8008988:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2200      	movs	r2, #0
 8008990:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008994:	2300      	movs	r3, #0
 8008996:	e000      	b.n	800899a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8008998:	2302      	movs	r3, #2
  }
}
 800899a:	4618      	mov	r0, r3
 800899c:	3718      	adds	r7, #24
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	bf00      	nop
 80089a4:	80002400 	.word	0x80002400
 80089a8:	fe00e800 	.word	0xfe00e800

080089ac <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b088      	sub	sp, #32
 80089b0:	af02      	add	r7, sp, #8
 80089b2:	60f8      	str	r0, [r7, #12]
 80089b4:	4608      	mov	r0, r1
 80089b6:	4611      	mov	r1, r2
 80089b8:	461a      	mov	r2, r3
 80089ba:	4603      	mov	r3, r0
 80089bc:	817b      	strh	r3, [r7, #10]
 80089be:	460b      	mov	r3, r1
 80089c0:	813b      	strh	r3, [r7, #8]
 80089c2:	4613      	mov	r3, r2
 80089c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089cc:	b2db      	uxtb	r3, r3
 80089ce:	2b20      	cmp	r3, #32
 80089d0:	f040 80f9 	bne.w	8008bc6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80089d4:	6a3b      	ldr	r3, [r7, #32]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d002      	beq.n	80089e0 <HAL_I2C_Mem_Write+0x34>
 80089da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d105      	bne.n	80089ec <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80089e6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80089e8:	2301      	movs	r3, #1
 80089ea:	e0ed      	b.n	8008bc8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d101      	bne.n	80089fa <HAL_I2C_Mem_Write+0x4e>
 80089f6:	2302      	movs	r3, #2
 80089f8:	e0e6      	b.n	8008bc8 <HAL_I2C_Mem_Write+0x21c>
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2201      	movs	r2, #1
 80089fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008a02:	f7fa fbcb 	bl	800319c <HAL_GetTick>
 8008a06:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	9300      	str	r3, [sp, #0]
 8008a0c:	2319      	movs	r3, #25
 8008a0e:	2201      	movs	r2, #1
 8008a10:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008a14:	68f8      	ldr	r0, [r7, #12]
 8008a16:	f000 f955 	bl	8008cc4 <I2C_WaitOnFlagUntilTimeout>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d001      	beq.n	8008a24 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8008a20:	2301      	movs	r3, #1
 8008a22:	e0d1      	b.n	8008bc8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	2221      	movs	r2, #33	@ 0x21
 8008a28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2240      	movs	r2, #64	@ 0x40
 8008a30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2200      	movs	r2, #0
 8008a38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	6a3a      	ldr	r2, [r7, #32]
 8008a3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008a44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008a4c:	88f8      	ldrh	r0, [r7, #6]
 8008a4e:	893a      	ldrh	r2, [r7, #8]
 8008a50:	8979      	ldrh	r1, [r7, #10]
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	9301      	str	r3, [sp, #4]
 8008a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a58:	9300      	str	r3, [sp, #0]
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	68f8      	ldr	r0, [r7, #12]
 8008a5e:	f000 f8b9 	bl	8008bd4 <I2C_RequestMemoryWrite>
 8008a62:	4603      	mov	r3, r0
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d005      	beq.n	8008a74 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8008a70:	2301      	movs	r3, #1
 8008a72:	e0a9      	b.n	8008bc8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008a78:	b29b      	uxth	r3, r3
 8008a7a:	2bff      	cmp	r3, #255	@ 0xff
 8008a7c:	d90e      	bls.n	8008a9c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	22ff      	movs	r2, #255	@ 0xff
 8008a82:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008a88:	b2da      	uxtb	r2, r3
 8008a8a:	8979      	ldrh	r1, [r7, #10]
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	9300      	str	r3, [sp, #0]
 8008a90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008a94:	68f8      	ldr	r0, [r7, #12]
 8008a96:	f000 fb65 	bl	8009164 <I2C_TransferConfig>
 8008a9a:	e00f      	b.n	8008abc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008aa0:	b29a      	uxth	r2, r3
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008aaa:	b2da      	uxtb	r2, r3
 8008aac:	8979      	ldrh	r1, [r7, #10]
 8008aae:	2300      	movs	r3, #0
 8008ab0:	9300      	str	r3, [sp, #0]
 8008ab2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008ab6:	68f8      	ldr	r0, [r7, #12]
 8008ab8:	f000 fb54 	bl	8009164 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008abc:	697a      	ldr	r2, [r7, #20]
 8008abe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ac0:	68f8      	ldr	r0, [r7, #12]
 8008ac2:	f000 f958 	bl	8008d76 <I2C_WaitOnTXISFlagUntilTimeout>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d001      	beq.n	8008ad0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8008acc:	2301      	movs	r3, #1
 8008ace:	e07b      	b.n	8008bc8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ad4:	781a      	ldrb	r2, [r3, #0]
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ae0:	1c5a      	adds	r2, r3, #1
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	3b01      	subs	r3, #1
 8008aee:	b29a      	uxth	r2, r3
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008af8:	3b01      	subs	r3, #1
 8008afa:	b29a      	uxth	r2, r3
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d034      	beq.n	8008b74 <HAL_I2C_Mem_Write+0x1c8>
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d130      	bne.n	8008b74 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	9300      	str	r3, [sp, #0]
 8008b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b18:	2200      	movs	r2, #0
 8008b1a:	2180      	movs	r1, #128	@ 0x80
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	f000 f8d1 	bl	8008cc4 <I2C_WaitOnFlagUntilTimeout>
 8008b22:	4603      	mov	r3, r0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d001      	beq.n	8008b2c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	e04d      	b.n	8008bc8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b30:	b29b      	uxth	r3, r3
 8008b32:	2bff      	cmp	r3, #255	@ 0xff
 8008b34:	d90e      	bls.n	8008b54 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	22ff      	movs	r2, #255	@ 0xff
 8008b3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b40:	b2da      	uxtb	r2, r3
 8008b42:	8979      	ldrh	r1, [r7, #10]
 8008b44:	2300      	movs	r3, #0
 8008b46:	9300      	str	r3, [sp, #0]
 8008b48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008b4c:	68f8      	ldr	r0, [r7, #12]
 8008b4e:	f000 fb09 	bl	8009164 <I2C_TransferConfig>
 8008b52:	e00f      	b.n	8008b74 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b58:	b29a      	uxth	r2, r3
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008b62:	b2da      	uxtb	r2, r3
 8008b64:	8979      	ldrh	r1, [r7, #10]
 8008b66:	2300      	movs	r3, #0
 8008b68:	9300      	str	r3, [sp, #0]
 8008b6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008b6e:	68f8      	ldr	r0, [r7, #12]
 8008b70:	f000 faf8 	bl	8009164 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d19e      	bne.n	8008abc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008b7e:	697a      	ldr	r2, [r7, #20]
 8008b80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b82:	68f8      	ldr	r0, [r7, #12]
 8008b84:	f000 f93e 	bl	8008e04 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d001      	beq.n	8008b92 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	e01a      	b.n	8008bc8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2220      	movs	r2, #32
 8008b98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	6859      	ldr	r1, [r3, #4]
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	681a      	ldr	r2, [r3, #0]
 8008ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8008bd0 <HAL_I2C_Mem_Write+0x224>)
 8008ba6:	400b      	ands	r3, r1
 8008ba8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2220      	movs	r2, #32
 8008bae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	e000      	b.n	8008bc8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8008bc6:	2302      	movs	r3, #2
  }
}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3718      	adds	r7, #24
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	fe00e800 	.word	0xfe00e800

08008bd4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b086      	sub	sp, #24
 8008bd8:	af02      	add	r7, sp, #8
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	4608      	mov	r0, r1
 8008bde:	4611      	mov	r1, r2
 8008be0:	461a      	mov	r2, r3
 8008be2:	4603      	mov	r3, r0
 8008be4:	817b      	strh	r3, [r7, #10]
 8008be6:	460b      	mov	r3, r1
 8008be8:	813b      	strh	r3, [r7, #8]
 8008bea:	4613      	mov	r3, r2
 8008bec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008bee:	88fb      	ldrh	r3, [r7, #6]
 8008bf0:	b2da      	uxtb	r2, r3
 8008bf2:	8979      	ldrh	r1, [r7, #10]
 8008bf4:	4b20      	ldr	r3, [pc, #128]	@ (8008c78 <I2C_RequestMemoryWrite+0xa4>)
 8008bf6:	9300      	str	r3, [sp, #0]
 8008bf8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008bfc:	68f8      	ldr	r0, [r7, #12]
 8008bfe:	f000 fab1 	bl	8009164 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c02:	69fa      	ldr	r2, [r7, #28]
 8008c04:	69b9      	ldr	r1, [r7, #24]
 8008c06:	68f8      	ldr	r0, [r7, #12]
 8008c08:	f000 f8b5 	bl	8008d76 <I2C_WaitOnTXISFlagUntilTimeout>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d001      	beq.n	8008c16 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	e02c      	b.n	8008c70 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008c16:	88fb      	ldrh	r3, [r7, #6]
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d105      	bne.n	8008c28 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008c1c:	893b      	ldrh	r3, [r7, #8]
 8008c1e:	b2da      	uxtb	r2, r3
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	629a      	str	r2, [r3, #40]	@ 0x28
 8008c26:	e015      	b.n	8008c54 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008c28:	893b      	ldrh	r3, [r7, #8]
 8008c2a:	0a1b      	lsrs	r3, r3, #8
 8008c2c:	b29b      	uxth	r3, r3
 8008c2e:	b2da      	uxtb	r2, r3
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008c36:	69fa      	ldr	r2, [r7, #28]
 8008c38:	69b9      	ldr	r1, [r7, #24]
 8008c3a:	68f8      	ldr	r0, [r7, #12]
 8008c3c:	f000 f89b 	bl	8008d76 <I2C_WaitOnTXISFlagUntilTimeout>
 8008c40:	4603      	mov	r3, r0
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d001      	beq.n	8008c4a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8008c46:	2301      	movs	r3, #1
 8008c48:	e012      	b.n	8008c70 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008c4a:	893b      	ldrh	r3, [r7, #8]
 8008c4c:	b2da      	uxtb	r2, r3
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	9300      	str	r3, [sp, #0]
 8008c58:	69bb      	ldr	r3, [r7, #24]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	2180      	movs	r1, #128	@ 0x80
 8008c5e:	68f8      	ldr	r0, [r7, #12]
 8008c60:	f000 f830 	bl	8008cc4 <I2C_WaitOnFlagUntilTimeout>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d001      	beq.n	8008c6e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	e000      	b.n	8008c70 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8008c6e:	2300      	movs	r3, #0
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3710      	adds	r7, #16
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}
 8008c78:	80002000 	.word	0x80002000

08008c7c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	699b      	ldr	r3, [r3, #24]
 8008c8a:	f003 0302 	and.w	r3, r3, #2
 8008c8e:	2b02      	cmp	r3, #2
 8008c90:	d103      	bne.n	8008c9a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	2200      	movs	r2, #0
 8008c98:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	699b      	ldr	r3, [r3, #24]
 8008ca0:	f003 0301 	and.w	r3, r3, #1
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d007      	beq.n	8008cb8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	699a      	ldr	r2, [r3, #24]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f042 0201 	orr.w	r2, r2, #1
 8008cb6:	619a      	str	r2, [r3, #24]
  }
}
 8008cb8:	bf00      	nop
 8008cba:	370c      	adds	r7, #12
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	60f8      	str	r0, [r7, #12]
 8008ccc:	60b9      	str	r1, [r7, #8]
 8008cce:	603b      	str	r3, [r7, #0]
 8008cd0:	4613      	mov	r3, r2
 8008cd2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008cd4:	e03b      	b.n	8008d4e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008cd6:	69ba      	ldr	r2, [r7, #24]
 8008cd8:	6839      	ldr	r1, [r7, #0]
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	f000 f962 	bl	8008fa4 <I2C_IsErrorOccurred>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d001      	beq.n	8008cea <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e041      	b.n	8008d6e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cf0:	d02d      	beq.n	8008d4e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008cf2:	f7fa fa53 	bl	800319c <HAL_GetTick>
 8008cf6:	4602      	mov	r2, r0
 8008cf8:	69bb      	ldr	r3, [r7, #24]
 8008cfa:	1ad3      	subs	r3, r2, r3
 8008cfc:	683a      	ldr	r2, [r7, #0]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d302      	bcc.n	8008d08 <I2C_WaitOnFlagUntilTimeout+0x44>
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d122      	bne.n	8008d4e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	699a      	ldr	r2, [r3, #24]
 8008d0e:	68bb      	ldr	r3, [r7, #8]
 8008d10:	4013      	ands	r3, r2
 8008d12:	68ba      	ldr	r2, [r7, #8]
 8008d14:	429a      	cmp	r2, r3
 8008d16:	bf0c      	ite	eq
 8008d18:	2301      	moveq	r3, #1
 8008d1a:	2300      	movne	r3, #0
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	461a      	mov	r2, r3
 8008d20:	79fb      	ldrb	r3, [r7, #7]
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d113      	bne.n	8008d4e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d2a:	f043 0220 	orr.w	r2, r3, #32
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2220      	movs	r2, #32
 8008d36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	2200      	movs	r2, #0
 8008d46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	e00f      	b.n	8008d6e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	699a      	ldr	r2, [r3, #24]
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	4013      	ands	r3, r2
 8008d58:	68ba      	ldr	r2, [r7, #8]
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	bf0c      	ite	eq
 8008d5e:	2301      	moveq	r3, #1
 8008d60:	2300      	movne	r3, #0
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	461a      	mov	r2, r3
 8008d66:	79fb      	ldrb	r3, [r7, #7]
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d0b4      	beq.n	8008cd6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d6c:	2300      	movs	r3, #0
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3710      	adds	r7, #16
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}

08008d76 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008d76:	b580      	push	{r7, lr}
 8008d78:	b084      	sub	sp, #16
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	60f8      	str	r0, [r7, #12]
 8008d7e:	60b9      	str	r1, [r7, #8]
 8008d80:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008d82:	e033      	b.n	8008dec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	68b9      	ldr	r1, [r7, #8]
 8008d88:	68f8      	ldr	r0, [r7, #12]
 8008d8a:	f000 f90b 	bl	8008fa4 <I2C_IsErrorOccurred>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d001      	beq.n	8008d98 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008d94:	2301      	movs	r3, #1
 8008d96:	e031      	b.n	8008dfc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d9e:	d025      	beq.n	8008dec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008da0:	f7fa f9fc 	bl	800319c <HAL_GetTick>
 8008da4:	4602      	mov	r2, r0
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	1ad3      	subs	r3, r2, r3
 8008daa:	68ba      	ldr	r2, [r7, #8]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d302      	bcc.n	8008db6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d11a      	bne.n	8008dec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	699b      	ldr	r3, [r3, #24]
 8008dbc:	f003 0302 	and.w	r3, r3, #2
 8008dc0:	2b02      	cmp	r3, #2
 8008dc2:	d013      	beq.n	8008dec <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dc8:	f043 0220 	orr.w	r2, r3, #32
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2220      	movs	r2, #32
 8008dd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2200      	movs	r2, #0
 8008de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008de8:	2301      	movs	r3, #1
 8008dea:	e007      	b.n	8008dfc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	699b      	ldr	r3, [r3, #24]
 8008df2:	f003 0302 	and.w	r3, r3, #2
 8008df6:	2b02      	cmp	r3, #2
 8008df8:	d1c4      	bne.n	8008d84 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8008dfa:	2300      	movs	r3, #0
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	3710      	adds	r7, #16
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b084      	sub	sp, #16
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008e10:	e02f      	b.n	8008e72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	68b9      	ldr	r1, [r7, #8]
 8008e16:	68f8      	ldr	r0, [r7, #12]
 8008e18:	f000 f8c4 	bl	8008fa4 <I2C_IsErrorOccurred>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d001      	beq.n	8008e26 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8008e22:	2301      	movs	r3, #1
 8008e24:	e02d      	b.n	8008e82 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e26:	f7fa f9b9 	bl	800319c <HAL_GetTick>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	1ad3      	subs	r3, r2, r3
 8008e30:	68ba      	ldr	r2, [r7, #8]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d302      	bcc.n	8008e3c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d11a      	bne.n	8008e72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	699b      	ldr	r3, [r3, #24]
 8008e42:	f003 0320 	and.w	r3, r3, #32
 8008e46:	2b20      	cmp	r3, #32
 8008e48:	d013      	beq.n	8008e72 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e4e:	f043 0220 	orr.w	r2, r3, #32
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2220      	movs	r2, #32
 8008e5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	2200      	movs	r2, #0
 8008e62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e007      	b.n	8008e82 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	699b      	ldr	r3, [r3, #24]
 8008e78:	f003 0320 	and.w	r3, r3, #32
 8008e7c:	2b20      	cmp	r3, #32
 8008e7e:	d1c8      	bne.n	8008e12 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3710      	adds	r7, #16
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
	...

08008e8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b086      	sub	sp, #24
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008e9c:	e071      	b.n	8008f82 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	68b9      	ldr	r1, [r7, #8]
 8008ea2:	68f8      	ldr	r0, [r7, #12]
 8008ea4:	f000 f87e 	bl	8008fa4 <I2C_IsErrorOccurred>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d001      	beq.n	8008eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8008eae:	2301      	movs	r3, #1
 8008eb0:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	699b      	ldr	r3, [r3, #24]
 8008eb8:	f003 0320 	and.w	r3, r3, #32
 8008ebc:	2b20      	cmp	r3, #32
 8008ebe:	d13b      	bne.n	8008f38 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8008ec0:	7dfb      	ldrb	r3, [r7, #23]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d138      	bne.n	8008f38 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	699b      	ldr	r3, [r3, #24]
 8008ecc:	f003 0304 	and.w	r3, r3, #4
 8008ed0:	2b04      	cmp	r3, #4
 8008ed2:	d105      	bne.n	8008ee0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d001      	beq.n	8008ee0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8008edc:	2300      	movs	r3, #0
 8008ede:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	699b      	ldr	r3, [r3, #24]
 8008ee6:	f003 0310 	and.w	r3, r3, #16
 8008eea:	2b10      	cmp	r3, #16
 8008eec:	d121      	bne.n	8008f32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	2210      	movs	r2, #16
 8008ef4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2204      	movs	r2, #4
 8008efa:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	2220      	movs	r2, #32
 8008f02:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	6859      	ldr	r1, [r3, #4]
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	4b24      	ldr	r3, [pc, #144]	@ (8008fa0 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8008f10:	400b      	ands	r3, r1
 8008f12:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2220      	movs	r2, #32
 8008f18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2200      	movs	r2, #0
 8008f28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	75fb      	strb	r3, [r7, #23]
 8008f30:	e002      	b.n	8008f38 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	2200      	movs	r2, #0
 8008f36:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8008f38:	f7fa f930 	bl	800319c <HAL_GetTick>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	1ad3      	subs	r3, r2, r3
 8008f42:	68ba      	ldr	r2, [r7, #8]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d302      	bcc.n	8008f4e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d119      	bne.n	8008f82 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8008f4e:	7dfb      	ldrb	r3, [r7, #23]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d116      	bne.n	8008f82 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	699b      	ldr	r3, [r3, #24]
 8008f5a:	f003 0304 	and.w	r3, r3, #4
 8008f5e:	2b04      	cmp	r3, #4
 8008f60:	d00f      	beq.n	8008f82 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008f66:	f043 0220 	orr.w	r2, r3, #32
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2220      	movs	r2, #32
 8008f72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	699b      	ldr	r3, [r3, #24]
 8008f88:	f003 0304 	and.w	r3, r3, #4
 8008f8c:	2b04      	cmp	r3, #4
 8008f8e:	d002      	beq.n	8008f96 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8008f90:	7dfb      	ldrb	r3, [r7, #23]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d083      	beq.n	8008e9e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8008f96:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f98:	4618      	mov	r0, r3
 8008f9a:	3718      	adds	r7, #24
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	bd80      	pop	{r7, pc}
 8008fa0:	fe00e800 	.word	0xfe00e800

08008fa4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b08a      	sub	sp, #40	@ 0x28
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	60b9      	str	r1, [r7, #8]
 8008fae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	699b      	ldr	r3, [r3, #24]
 8008fbc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	f003 0310 	and.w	r3, r3, #16
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d068      	beq.n	80090a2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	2210      	movs	r2, #16
 8008fd6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008fd8:	e049      	b.n	800906e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fe0:	d045      	beq.n	800906e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008fe2:	f7fa f8db 	bl	800319c <HAL_GetTick>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	69fb      	ldr	r3, [r7, #28]
 8008fea:	1ad3      	subs	r3, r2, r3
 8008fec:	68ba      	ldr	r2, [r7, #8]
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d302      	bcc.n	8008ff8 <I2C_IsErrorOccurred+0x54>
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d13a      	bne.n	800906e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009002:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800900a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	699b      	ldr	r3, [r3, #24]
 8009012:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009016:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800901a:	d121      	bne.n	8009060 <I2C_IsErrorOccurred+0xbc>
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009022:	d01d      	beq.n	8009060 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8009024:	7cfb      	ldrb	r3, [r7, #19]
 8009026:	2b20      	cmp	r3, #32
 8009028:	d01a      	beq.n	8009060 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	685a      	ldr	r2, [r3, #4]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009038:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800903a:	f7fa f8af 	bl	800319c <HAL_GetTick>
 800903e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009040:	e00e      	b.n	8009060 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009042:	f7fa f8ab 	bl	800319c <HAL_GetTick>
 8009046:	4602      	mov	r2, r0
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	1ad3      	subs	r3, r2, r3
 800904c:	2b19      	cmp	r3, #25
 800904e:	d907      	bls.n	8009060 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009050:	6a3b      	ldr	r3, [r7, #32]
 8009052:	f043 0320 	orr.w	r3, r3, #32
 8009056:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009058:	2301      	movs	r3, #1
 800905a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800905e:	e006      	b.n	800906e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	699b      	ldr	r3, [r3, #24]
 8009066:	f003 0320 	and.w	r3, r3, #32
 800906a:	2b20      	cmp	r3, #32
 800906c:	d1e9      	bne.n	8009042 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	699b      	ldr	r3, [r3, #24]
 8009074:	f003 0320 	and.w	r3, r3, #32
 8009078:	2b20      	cmp	r3, #32
 800907a:	d003      	beq.n	8009084 <I2C_IsErrorOccurred+0xe0>
 800907c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009080:	2b00      	cmp	r3, #0
 8009082:	d0aa      	beq.n	8008fda <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009084:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009088:	2b00      	cmp	r3, #0
 800908a:	d103      	bne.n	8009094 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	2220      	movs	r2, #32
 8009092:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009094:	6a3b      	ldr	r3, [r7, #32]
 8009096:	f043 0304 	orr.w	r3, r3, #4
 800909a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800909c:	2301      	movs	r3, #1
 800909e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	699b      	ldr	r3, [r3, #24]
 80090a8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80090aa:	69bb      	ldr	r3, [r7, #24]
 80090ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d00b      	beq.n	80090cc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80090b4:	6a3b      	ldr	r3, [r7, #32]
 80090b6:	f043 0301 	orr.w	r3, r3, #1
 80090ba:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80090c4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80090c6:	2301      	movs	r3, #1
 80090c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80090cc:	69bb      	ldr	r3, [r7, #24]
 80090ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d00b      	beq.n	80090ee <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80090d6:	6a3b      	ldr	r3, [r7, #32]
 80090d8:	f043 0308 	orr.w	r3, r3, #8
 80090dc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80090e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d00b      	beq.n	8009110 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80090f8:	6a3b      	ldr	r3, [r7, #32]
 80090fa:	f043 0302 	orr.w	r3, r3, #2
 80090fe:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009108:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8009110:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009114:	2b00      	cmp	r3, #0
 8009116:	d01c      	beq.n	8009152 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f7ff fdaf 	bl	8008c7c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	6859      	ldr	r1, [r3, #4]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	4b0d      	ldr	r3, [pc, #52]	@ (8009160 <I2C_IsErrorOccurred+0x1bc>)
 800912a:	400b      	ands	r3, r1
 800912c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009132:	6a3b      	ldr	r3, [r7, #32]
 8009134:	431a      	orrs	r2, r3
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2220      	movs	r2, #32
 800913e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2200      	movs	r2, #0
 8009146:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2200      	movs	r2, #0
 800914e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8009152:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009156:	4618      	mov	r0, r3
 8009158:	3728      	adds	r7, #40	@ 0x28
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
 800915e:	bf00      	nop
 8009160:	fe00e800 	.word	0xfe00e800

08009164 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009164:	b480      	push	{r7}
 8009166:	b087      	sub	sp, #28
 8009168:	af00      	add	r7, sp, #0
 800916a:	60f8      	str	r0, [r7, #12]
 800916c:	607b      	str	r3, [r7, #4]
 800916e:	460b      	mov	r3, r1
 8009170:	817b      	strh	r3, [r7, #10]
 8009172:	4613      	mov	r3, r2
 8009174:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009176:	897b      	ldrh	r3, [r7, #10]
 8009178:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800917c:	7a7b      	ldrb	r3, [r7, #9]
 800917e:	041b      	lsls	r3, r3, #16
 8009180:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009184:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800918a:	6a3b      	ldr	r3, [r7, #32]
 800918c:	4313      	orrs	r3, r2
 800918e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009192:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	685a      	ldr	r2, [r3, #4]
 800919a:	6a3b      	ldr	r3, [r7, #32]
 800919c:	0d5b      	lsrs	r3, r3, #21
 800919e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80091a2:	4b08      	ldr	r3, [pc, #32]	@ (80091c4 <I2C_TransferConfig+0x60>)
 80091a4:	430b      	orrs	r3, r1
 80091a6:	43db      	mvns	r3, r3
 80091a8:	ea02 0103 	and.w	r1, r2, r3
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	697a      	ldr	r2, [r7, #20]
 80091b2:	430a      	orrs	r2, r1
 80091b4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80091b6:	bf00      	nop
 80091b8:	371c      	adds	r7, #28
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	03ff63ff 	.word	0x03ff63ff

080091c8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b083      	sub	sp, #12
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	2b20      	cmp	r3, #32
 80091dc:	d138      	bne.n	8009250 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d101      	bne.n	80091ec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80091e8:	2302      	movs	r3, #2
 80091ea:	e032      	b.n	8009252 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2201      	movs	r2, #1
 80091f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2224      	movs	r2, #36	@ 0x24
 80091f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f022 0201 	bic.w	r2, r2, #1
 800920a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	681a      	ldr	r2, [r3, #0]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800921a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	6819      	ldr	r1, [r3, #0]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	683a      	ldr	r2, [r7, #0]
 8009228:	430a      	orrs	r2, r1
 800922a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f042 0201 	orr.w	r2, r2, #1
 800923a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2220      	movs	r2, #32
 8009240:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2200      	movs	r2, #0
 8009248:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800924c:	2300      	movs	r3, #0
 800924e:	e000      	b.n	8009252 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009250:	2302      	movs	r3, #2
  }
}
 8009252:	4618      	mov	r0, r3
 8009254:	370c      	adds	r7, #12
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr

0800925e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800925e:	b480      	push	{r7}
 8009260:	b085      	sub	sp, #20
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
 8009266:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800926e:	b2db      	uxtb	r3, r3
 8009270:	2b20      	cmp	r3, #32
 8009272:	d139      	bne.n	80092e8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800927a:	2b01      	cmp	r3, #1
 800927c:	d101      	bne.n	8009282 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800927e:	2302      	movs	r3, #2
 8009280:	e033      	b.n	80092ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2201      	movs	r2, #1
 8009286:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2224      	movs	r2, #36	@ 0x24
 800928e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	681a      	ldr	r2, [r3, #0]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	f022 0201 	bic.w	r2, r2, #1
 80092a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80092b0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	021b      	lsls	r3, r3, #8
 80092b6:	68fa      	ldr	r2, [r7, #12]
 80092b8:	4313      	orrs	r3, r2
 80092ba:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	68fa      	ldr	r2, [r7, #12]
 80092c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f042 0201 	orr.w	r2, r2, #1
 80092d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2220      	movs	r2, #32
 80092d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80092e4:	2300      	movs	r3, #0
 80092e6:	e000      	b.n	80092ea <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80092e8:	2302      	movs	r3, #2
  }
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3714      	adds	r7, #20
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr

080092f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80092f6:	b580      	push	{r7, lr}
 80092f8:	b086      	sub	sp, #24
 80092fa:	af02      	add	r7, sp, #8
 80092fc:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d101      	bne.n	8009308 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009304:	2301      	movs	r3, #1
 8009306:	e0fe      	b.n	8009506 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800930e:	b2db      	uxtb	r3, r3
 8009310:	2b00      	cmp	r3, #0
 8009312:	d106      	bne.n	8009322 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2200      	movs	r2, #0
 8009318:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f009 fd97 	bl	8012e50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2203      	movs	r2, #3
 8009326:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	4618      	mov	r0, r3
 8009330:	f006 f949 	bl	800f5c6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6818      	ldr	r0, [r3, #0]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	7c1a      	ldrb	r2, [r3, #16]
 800933c:	f88d 2000 	strb.w	r2, [sp]
 8009340:	3304      	adds	r3, #4
 8009342:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009344:	f006 f81a 	bl	800f37c <USB_CoreInit>
 8009348:	4603      	mov	r3, r0
 800934a:	2b00      	cmp	r3, #0
 800934c:	d005      	beq.n	800935a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2202      	movs	r2, #2
 8009352:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009356:	2301      	movs	r3, #1
 8009358:	e0d5      	b.n	8009506 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	2100      	movs	r1, #0
 8009360:	4618      	mov	r0, r3
 8009362:	f006 f941 	bl	800f5e8 <USB_SetCurrentMode>
 8009366:	4603      	mov	r3, r0
 8009368:	2b00      	cmp	r3, #0
 800936a:	d005      	beq.n	8009378 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2202      	movs	r2, #2
 8009370:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8009374:	2301      	movs	r3, #1
 8009376:	e0c6      	b.n	8009506 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009378:	2300      	movs	r3, #0
 800937a:	73fb      	strb	r3, [r7, #15]
 800937c:	e04a      	b.n	8009414 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800937e:	7bfa      	ldrb	r2, [r7, #15]
 8009380:	6879      	ldr	r1, [r7, #4]
 8009382:	4613      	mov	r3, r2
 8009384:	00db      	lsls	r3, r3, #3
 8009386:	4413      	add	r3, r2
 8009388:	009b      	lsls	r3, r3, #2
 800938a:	440b      	add	r3, r1
 800938c:	3315      	adds	r3, #21
 800938e:	2201      	movs	r2, #1
 8009390:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009392:	7bfa      	ldrb	r2, [r7, #15]
 8009394:	6879      	ldr	r1, [r7, #4]
 8009396:	4613      	mov	r3, r2
 8009398:	00db      	lsls	r3, r3, #3
 800939a:	4413      	add	r3, r2
 800939c:	009b      	lsls	r3, r3, #2
 800939e:	440b      	add	r3, r1
 80093a0:	3314      	adds	r3, #20
 80093a2:	7bfa      	ldrb	r2, [r7, #15]
 80093a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80093a6:	7bfa      	ldrb	r2, [r7, #15]
 80093a8:	7bfb      	ldrb	r3, [r7, #15]
 80093aa:	b298      	uxth	r0, r3
 80093ac:	6879      	ldr	r1, [r7, #4]
 80093ae:	4613      	mov	r3, r2
 80093b0:	00db      	lsls	r3, r3, #3
 80093b2:	4413      	add	r3, r2
 80093b4:	009b      	lsls	r3, r3, #2
 80093b6:	440b      	add	r3, r1
 80093b8:	332e      	adds	r3, #46	@ 0x2e
 80093ba:	4602      	mov	r2, r0
 80093bc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80093be:	7bfa      	ldrb	r2, [r7, #15]
 80093c0:	6879      	ldr	r1, [r7, #4]
 80093c2:	4613      	mov	r3, r2
 80093c4:	00db      	lsls	r3, r3, #3
 80093c6:	4413      	add	r3, r2
 80093c8:	009b      	lsls	r3, r3, #2
 80093ca:	440b      	add	r3, r1
 80093cc:	3318      	adds	r3, #24
 80093ce:	2200      	movs	r2, #0
 80093d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80093d2:	7bfa      	ldrb	r2, [r7, #15]
 80093d4:	6879      	ldr	r1, [r7, #4]
 80093d6:	4613      	mov	r3, r2
 80093d8:	00db      	lsls	r3, r3, #3
 80093da:	4413      	add	r3, r2
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	440b      	add	r3, r1
 80093e0:	331c      	adds	r3, #28
 80093e2:	2200      	movs	r2, #0
 80093e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80093e6:	7bfa      	ldrb	r2, [r7, #15]
 80093e8:	6879      	ldr	r1, [r7, #4]
 80093ea:	4613      	mov	r3, r2
 80093ec:	00db      	lsls	r3, r3, #3
 80093ee:	4413      	add	r3, r2
 80093f0:	009b      	lsls	r3, r3, #2
 80093f2:	440b      	add	r3, r1
 80093f4:	3320      	adds	r3, #32
 80093f6:	2200      	movs	r2, #0
 80093f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80093fa:	7bfa      	ldrb	r2, [r7, #15]
 80093fc:	6879      	ldr	r1, [r7, #4]
 80093fe:	4613      	mov	r3, r2
 8009400:	00db      	lsls	r3, r3, #3
 8009402:	4413      	add	r3, r2
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	440b      	add	r3, r1
 8009408:	3324      	adds	r3, #36	@ 0x24
 800940a:	2200      	movs	r2, #0
 800940c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800940e:	7bfb      	ldrb	r3, [r7, #15]
 8009410:	3301      	adds	r3, #1
 8009412:	73fb      	strb	r3, [r7, #15]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	791b      	ldrb	r3, [r3, #4]
 8009418:	7bfa      	ldrb	r2, [r7, #15]
 800941a:	429a      	cmp	r2, r3
 800941c:	d3af      	bcc.n	800937e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800941e:	2300      	movs	r3, #0
 8009420:	73fb      	strb	r3, [r7, #15]
 8009422:	e044      	b.n	80094ae <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009424:	7bfa      	ldrb	r2, [r7, #15]
 8009426:	6879      	ldr	r1, [r7, #4]
 8009428:	4613      	mov	r3, r2
 800942a:	00db      	lsls	r3, r3, #3
 800942c:	4413      	add	r3, r2
 800942e:	009b      	lsls	r3, r3, #2
 8009430:	440b      	add	r3, r1
 8009432:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8009436:	2200      	movs	r2, #0
 8009438:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800943a:	7bfa      	ldrb	r2, [r7, #15]
 800943c:	6879      	ldr	r1, [r7, #4]
 800943e:	4613      	mov	r3, r2
 8009440:	00db      	lsls	r3, r3, #3
 8009442:	4413      	add	r3, r2
 8009444:	009b      	lsls	r3, r3, #2
 8009446:	440b      	add	r3, r1
 8009448:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800944c:	7bfa      	ldrb	r2, [r7, #15]
 800944e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009450:	7bfa      	ldrb	r2, [r7, #15]
 8009452:	6879      	ldr	r1, [r7, #4]
 8009454:	4613      	mov	r3, r2
 8009456:	00db      	lsls	r3, r3, #3
 8009458:	4413      	add	r3, r2
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	440b      	add	r3, r1
 800945e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8009462:	2200      	movs	r2, #0
 8009464:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009466:	7bfa      	ldrb	r2, [r7, #15]
 8009468:	6879      	ldr	r1, [r7, #4]
 800946a:	4613      	mov	r3, r2
 800946c:	00db      	lsls	r3, r3, #3
 800946e:	4413      	add	r3, r2
 8009470:	009b      	lsls	r3, r3, #2
 8009472:	440b      	add	r3, r1
 8009474:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8009478:	2200      	movs	r2, #0
 800947a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800947c:	7bfa      	ldrb	r2, [r7, #15]
 800947e:	6879      	ldr	r1, [r7, #4]
 8009480:	4613      	mov	r3, r2
 8009482:	00db      	lsls	r3, r3, #3
 8009484:	4413      	add	r3, r2
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	440b      	add	r3, r1
 800948a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800948e:	2200      	movs	r2, #0
 8009490:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009492:	7bfa      	ldrb	r2, [r7, #15]
 8009494:	6879      	ldr	r1, [r7, #4]
 8009496:	4613      	mov	r3, r2
 8009498:	00db      	lsls	r3, r3, #3
 800949a:	4413      	add	r3, r2
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	440b      	add	r3, r1
 80094a0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80094a4:	2200      	movs	r2, #0
 80094a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80094a8:	7bfb      	ldrb	r3, [r7, #15]
 80094aa:	3301      	adds	r3, #1
 80094ac:	73fb      	strb	r3, [r7, #15]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	791b      	ldrb	r3, [r3, #4]
 80094b2:	7bfa      	ldrb	r2, [r7, #15]
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d3b5      	bcc.n	8009424 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6818      	ldr	r0, [r3, #0]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	7c1a      	ldrb	r2, [r3, #16]
 80094c0:	f88d 2000 	strb.w	r2, [sp]
 80094c4:	3304      	adds	r3, #4
 80094c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80094c8:	f006 f8da 	bl	800f680 <USB_DevInit>
 80094cc:	4603      	mov	r3, r0
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d005      	beq.n	80094de <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2202      	movs	r2, #2
 80094d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80094da:	2301      	movs	r3, #1
 80094dc:	e013      	b.n	8009506 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2201      	movs	r2, #1
 80094e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	7b1b      	ldrb	r3, [r3, #12]
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d102      	bne.n	80094fa <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f001 f96f 	bl	800a7d8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4618      	mov	r0, r3
 8009500:	f007 f91d 	bl	801073e <USB_DevDisconnect>

  return HAL_OK;
 8009504:	2300      	movs	r3, #0
}
 8009506:	4618      	mov	r0, r3
 8009508:	3710      	adds	r7, #16
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}

0800950e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800950e:	b580      	push	{r7, lr}
 8009510:	b084      	sub	sp, #16
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009522:	2b01      	cmp	r3, #1
 8009524:	d101      	bne.n	800952a <HAL_PCD_Start+0x1c>
 8009526:	2302      	movs	r3, #2
 8009528:	e022      	b.n	8009570 <HAL_PCD_Start+0x62>
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2201      	movs	r2, #1
 800952e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	68db      	ldr	r3, [r3, #12]
 8009536:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800953a:	2b00      	cmp	r3, #0
 800953c:	d009      	beq.n	8009552 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8009542:	2b01      	cmp	r3, #1
 8009544:	d105      	bne.n	8009552 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800954a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4618      	mov	r0, r3
 8009558:	f006 f824 	bl	800f5a4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4618      	mov	r0, r3
 8009562:	f007 f8cb 	bl	80106fc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2200      	movs	r2, #0
 800956a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800956e:	2300      	movs	r3, #0
}
 8009570:	4618      	mov	r0, r3
 8009572:	3710      	adds	r7, #16
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009578:	b590      	push	{r4, r7, lr}
 800957a:	b08d      	sub	sp, #52	@ 0x34
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009586:	6a3b      	ldr	r3, [r7, #32]
 8009588:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4618      	mov	r0, r3
 8009590:	f007 f989 	bl	80108a6 <USB_GetMode>
 8009594:	4603      	mov	r3, r0
 8009596:	2b00      	cmp	r3, #0
 8009598:	f040 84b9 	bne.w	8009f0e <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4618      	mov	r0, r3
 80095a2:	f007 f8ed 	bl	8010780 <USB_ReadInterrupts>
 80095a6:	4603      	mov	r3, r0
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	f000 84af 	beq.w	8009f0c <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80095ae:	69fb      	ldr	r3, [r7, #28]
 80095b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	0a1b      	lsrs	r3, r3, #8
 80095b8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4618      	mov	r0, r3
 80095c8:	f007 f8da 	bl	8010780 <USB_ReadInterrupts>
 80095cc:	4603      	mov	r3, r0
 80095ce:	f003 0302 	and.w	r3, r3, #2
 80095d2:	2b02      	cmp	r3, #2
 80095d4:	d107      	bne.n	80095e6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	695a      	ldr	r2, [r3, #20]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f002 0202 	and.w	r2, r2, #2
 80095e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4618      	mov	r0, r3
 80095ec:	f007 f8c8 	bl	8010780 <USB_ReadInterrupts>
 80095f0:	4603      	mov	r3, r0
 80095f2:	f003 0310 	and.w	r3, r3, #16
 80095f6:	2b10      	cmp	r3, #16
 80095f8:	d161      	bne.n	80096be <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	699a      	ldr	r2, [r3, #24]
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f022 0210 	bic.w	r2, r2, #16
 8009608:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800960a:	6a3b      	ldr	r3, [r7, #32]
 800960c:	6a1b      	ldr	r3, [r3, #32]
 800960e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8009610:	69bb      	ldr	r3, [r7, #24]
 8009612:	f003 020f 	and.w	r2, r3, #15
 8009616:	4613      	mov	r3, r2
 8009618:	00db      	lsls	r3, r3, #3
 800961a:	4413      	add	r3, r2
 800961c:	009b      	lsls	r3, r3, #2
 800961e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	4413      	add	r3, r2
 8009626:	3304      	adds	r3, #4
 8009628:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800962a:	69bb      	ldr	r3, [r7, #24]
 800962c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8009630:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009634:	d124      	bne.n	8009680 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009636:	69ba      	ldr	r2, [r7, #24]
 8009638:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800963c:	4013      	ands	r3, r2
 800963e:	2b00      	cmp	r3, #0
 8009640:	d035      	beq.n	80096ae <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009646:	69bb      	ldr	r3, [r7, #24]
 8009648:	091b      	lsrs	r3, r3, #4
 800964a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800964c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009650:	b29b      	uxth	r3, r3
 8009652:	461a      	mov	r2, r3
 8009654:	6a38      	ldr	r0, [r7, #32]
 8009656:	f006 feff 	bl	8010458 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	68da      	ldr	r2, [r3, #12]
 800965e:	69bb      	ldr	r3, [r7, #24]
 8009660:	091b      	lsrs	r3, r3, #4
 8009662:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009666:	441a      	add	r2, r3
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	695a      	ldr	r2, [r3, #20]
 8009670:	69bb      	ldr	r3, [r7, #24]
 8009672:	091b      	lsrs	r3, r3, #4
 8009674:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009678:	441a      	add	r2, r3
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	615a      	str	r2, [r3, #20]
 800967e:	e016      	b.n	80096ae <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8009680:	69bb      	ldr	r3, [r7, #24]
 8009682:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8009686:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800968a:	d110      	bne.n	80096ae <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009692:	2208      	movs	r2, #8
 8009694:	4619      	mov	r1, r3
 8009696:	6a38      	ldr	r0, [r7, #32]
 8009698:	f006 fede 	bl	8010458 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	695a      	ldr	r2, [r3, #20]
 80096a0:	69bb      	ldr	r3, [r7, #24]
 80096a2:	091b      	lsrs	r3, r3, #4
 80096a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80096a8:	441a      	add	r2, r3
 80096aa:	697b      	ldr	r3, [r7, #20]
 80096ac:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	699a      	ldr	r2, [r3, #24]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f042 0210 	orr.w	r2, r2, #16
 80096bc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4618      	mov	r0, r3
 80096c4:	f007 f85c 	bl	8010780 <USB_ReadInterrupts>
 80096c8:	4603      	mov	r3, r0
 80096ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80096ce:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80096d2:	f040 80a7 	bne.w	8009824 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80096d6:	2300      	movs	r3, #0
 80096d8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4618      	mov	r0, r3
 80096e0:	f007 f861 	bl	80107a6 <USB_ReadDevAllOutEpInterrupt>
 80096e4:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80096e6:	e099      	b.n	800981c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80096e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80096ea:	f003 0301 	and.w	r3, r3, #1
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	f000 808e 	beq.w	8009810 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096fa:	b2d2      	uxtb	r2, r2
 80096fc:	4611      	mov	r1, r2
 80096fe:	4618      	mov	r0, r3
 8009700:	f007 f885 	bl	801080e <USB_ReadDevOutEPInterrupt>
 8009704:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	f003 0301 	and.w	r3, r3, #1
 800970c:	2b00      	cmp	r3, #0
 800970e:	d00c      	beq.n	800972a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009712:	015a      	lsls	r2, r3, #5
 8009714:	69fb      	ldr	r3, [r7, #28]
 8009716:	4413      	add	r3, r2
 8009718:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800971c:	461a      	mov	r2, r3
 800971e:	2301      	movs	r3, #1
 8009720:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009722:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 fed1 	bl	800a4cc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800972a:	693b      	ldr	r3, [r7, #16]
 800972c:	f003 0308 	and.w	r3, r3, #8
 8009730:	2b00      	cmp	r3, #0
 8009732:	d00c      	beq.n	800974e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8009734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009736:	015a      	lsls	r2, r3, #5
 8009738:	69fb      	ldr	r3, [r7, #28]
 800973a:	4413      	add	r3, r2
 800973c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009740:	461a      	mov	r2, r3
 8009742:	2308      	movs	r3, #8
 8009744:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009746:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009748:	6878      	ldr	r0, [r7, #4]
 800974a:	f000 ffa7 	bl	800a69c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	f003 0310 	and.w	r3, r3, #16
 8009754:	2b00      	cmp	r3, #0
 8009756:	d008      	beq.n	800976a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800975a:	015a      	lsls	r2, r3, #5
 800975c:	69fb      	ldr	r3, [r7, #28]
 800975e:	4413      	add	r3, r2
 8009760:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009764:	461a      	mov	r2, r3
 8009766:	2310      	movs	r3, #16
 8009768:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	f003 0302 	and.w	r3, r3, #2
 8009770:	2b00      	cmp	r3, #0
 8009772:	d030      	beq.n	80097d6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8009774:	6a3b      	ldr	r3, [r7, #32]
 8009776:	695b      	ldr	r3, [r3, #20]
 8009778:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800977c:	2b80      	cmp	r3, #128	@ 0x80
 800977e:	d109      	bne.n	8009794 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8009780:	69fb      	ldr	r3, [r7, #28]
 8009782:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	69fa      	ldr	r2, [r7, #28]
 800978a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800978e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8009792:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8009794:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009796:	4613      	mov	r3, r2
 8009798:	00db      	lsls	r3, r3, #3
 800979a:	4413      	add	r3, r2
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	4413      	add	r3, r2
 80097a6:	3304      	adds	r3, #4
 80097a8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	78db      	ldrb	r3, [r3, #3]
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d108      	bne.n	80097c4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80097b2:	697b      	ldr	r3, [r7, #20]
 80097b4:	2200      	movs	r2, #0
 80097b6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80097b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ba:	b2db      	uxtb	r3, r3
 80097bc:	4619      	mov	r1, r3
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f009 fc9a 	bl	80130f8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80097c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097c6:	015a      	lsls	r2, r3, #5
 80097c8:	69fb      	ldr	r3, [r7, #28]
 80097ca:	4413      	add	r3, r2
 80097cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097d0:	461a      	mov	r2, r3
 80097d2:	2302      	movs	r3, #2
 80097d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	f003 0320 	and.w	r3, r3, #32
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d008      	beq.n	80097f2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80097e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097e2:	015a      	lsls	r2, r3, #5
 80097e4:	69fb      	ldr	r3, [r7, #28]
 80097e6:	4413      	add	r3, r2
 80097e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097ec:	461a      	mov	r2, r3
 80097ee:	2320      	movs	r3, #32
 80097f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d009      	beq.n	8009810 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80097fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097fe:	015a      	lsls	r2, r3, #5
 8009800:	69fb      	ldr	r3, [r7, #28]
 8009802:	4413      	add	r3, r2
 8009804:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009808:	461a      	mov	r2, r3
 800980a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800980e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8009810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009812:	3301      	adds	r3, #1
 8009814:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8009816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009818:	085b      	lsrs	r3, r3, #1
 800981a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800981c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800981e:	2b00      	cmp	r3, #0
 8009820:	f47f af62 	bne.w	80096e8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4618      	mov	r0, r3
 800982a:	f006 ffa9 	bl	8010780 <USB_ReadInterrupts>
 800982e:	4603      	mov	r3, r0
 8009830:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009834:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009838:	f040 80db 	bne.w	80099f2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4618      	mov	r0, r3
 8009842:	f006 ffca 	bl	80107da <USB_ReadDevAllInEpInterrupt>
 8009846:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8009848:	2300      	movs	r3, #0
 800984a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800984c:	e0cd      	b.n	80099ea <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800984e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009850:	f003 0301 	and.w	r3, r3, #1
 8009854:	2b00      	cmp	r3, #0
 8009856:	f000 80c2 	beq.w	80099de <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009860:	b2d2      	uxtb	r2, r2
 8009862:	4611      	mov	r1, r2
 8009864:	4618      	mov	r0, r3
 8009866:	f006 fff0 	bl	801084a <USB_ReadDevInEPInterrupt>
 800986a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	f003 0301 	and.w	r3, r3, #1
 8009872:	2b00      	cmp	r3, #0
 8009874:	d057      	beq.n	8009926 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009878:	f003 030f 	and.w	r3, r3, #15
 800987c:	2201      	movs	r2, #1
 800987e:	fa02 f303 	lsl.w	r3, r2, r3
 8009882:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800988a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	43db      	mvns	r3, r3
 8009890:	69f9      	ldr	r1, [r7, #28]
 8009892:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009896:	4013      	ands	r3, r2
 8009898:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800989a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800989c:	015a      	lsls	r2, r3, #5
 800989e:	69fb      	ldr	r3, [r7, #28]
 80098a0:	4413      	add	r3, r2
 80098a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098a6:	461a      	mov	r2, r3
 80098a8:	2301      	movs	r3, #1
 80098aa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	799b      	ldrb	r3, [r3, #6]
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d132      	bne.n	800991a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80098b4:	6879      	ldr	r1, [r7, #4]
 80098b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098b8:	4613      	mov	r3, r2
 80098ba:	00db      	lsls	r3, r3, #3
 80098bc:	4413      	add	r3, r2
 80098be:	009b      	lsls	r3, r3, #2
 80098c0:	440b      	add	r3, r1
 80098c2:	3320      	adds	r3, #32
 80098c4:	6819      	ldr	r1, [r3, #0]
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098ca:	4613      	mov	r3, r2
 80098cc:	00db      	lsls	r3, r3, #3
 80098ce:	4413      	add	r3, r2
 80098d0:	009b      	lsls	r3, r3, #2
 80098d2:	4403      	add	r3, r0
 80098d4:	331c      	adds	r3, #28
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4419      	add	r1, r3
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098de:	4613      	mov	r3, r2
 80098e0:	00db      	lsls	r3, r3, #3
 80098e2:	4413      	add	r3, r2
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	4403      	add	r3, r0
 80098e8:	3320      	adds	r3, #32
 80098ea:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80098ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d113      	bne.n	800991a <HAL_PCD_IRQHandler+0x3a2>
 80098f2:	6879      	ldr	r1, [r7, #4]
 80098f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098f6:	4613      	mov	r3, r2
 80098f8:	00db      	lsls	r3, r3, #3
 80098fa:	4413      	add	r3, r2
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	440b      	add	r3, r1
 8009900:	3324      	adds	r3, #36	@ 0x24
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d108      	bne.n	800991a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6818      	ldr	r0, [r3, #0]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009912:	461a      	mov	r2, r3
 8009914:	2101      	movs	r1, #1
 8009916:	f006 fff9 	bl	801090c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800991a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800991c:	b2db      	uxtb	r3, r3
 800991e:	4619      	mov	r1, r3
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f009 fb64 	bl	8012fee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009926:	693b      	ldr	r3, [r7, #16]
 8009928:	f003 0308 	and.w	r3, r3, #8
 800992c:	2b00      	cmp	r3, #0
 800992e:	d008      	beq.n	8009942 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009932:	015a      	lsls	r2, r3, #5
 8009934:	69fb      	ldr	r3, [r7, #28]
 8009936:	4413      	add	r3, r2
 8009938:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800993c:	461a      	mov	r2, r3
 800993e:	2308      	movs	r3, #8
 8009940:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	f003 0310 	and.w	r3, r3, #16
 8009948:	2b00      	cmp	r3, #0
 800994a:	d008      	beq.n	800995e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800994c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800994e:	015a      	lsls	r2, r3, #5
 8009950:	69fb      	ldr	r3, [r7, #28]
 8009952:	4413      	add	r3, r2
 8009954:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009958:	461a      	mov	r2, r3
 800995a:	2310      	movs	r3, #16
 800995c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009964:	2b00      	cmp	r3, #0
 8009966:	d008      	beq.n	800997a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800996a:	015a      	lsls	r2, r3, #5
 800996c:	69fb      	ldr	r3, [r7, #28]
 800996e:	4413      	add	r3, r2
 8009970:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009974:	461a      	mov	r2, r3
 8009976:	2340      	movs	r3, #64	@ 0x40
 8009978:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	f003 0302 	and.w	r3, r3, #2
 8009980:	2b00      	cmp	r3, #0
 8009982:	d023      	beq.n	80099cc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8009984:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009986:	6a38      	ldr	r0, [r7, #32]
 8009988:	f005 ffd8 	bl	800f93c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800998c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800998e:	4613      	mov	r3, r2
 8009990:	00db      	lsls	r3, r3, #3
 8009992:	4413      	add	r3, r2
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	3310      	adds	r3, #16
 8009998:	687a      	ldr	r2, [r7, #4]
 800999a:	4413      	add	r3, r2
 800999c:	3304      	adds	r3, #4
 800999e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	78db      	ldrb	r3, [r3, #3]
 80099a4:	2b01      	cmp	r3, #1
 80099a6:	d108      	bne.n	80099ba <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	2200      	movs	r2, #0
 80099ac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80099ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099b0:	b2db      	uxtb	r3, r3
 80099b2:	4619      	mov	r1, r3
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f009 fbb1 	bl	801311c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80099ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099bc:	015a      	lsls	r2, r3, #5
 80099be:	69fb      	ldr	r3, [r7, #28]
 80099c0:	4413      	add	r3, r2
 80099c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099c6:	461a      	mov	r2, r3
 80099c8:	2302      	movs	r3, #2
 80099ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d003      	beq.n	80099de <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80099d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 fcea 	bl	800a3b2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80099de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099e0:	3301      	adds	r3, #1
 80099e2:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80099e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099e6:	085b      	lsrs	r3, r3, #1
 80099e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80099ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	f47f af2e 	bne.w	800984e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4618      	mov	r0, r3
 80099f8:	f006 fec2 	bl	8010780 <USB_ReadInterrupts>
 80099fc:	4603      	mov	r3, r0
 80099fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a06:	d122      	bne.n	8009a4e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009a08:	69fb      	ldr	r3, [r7, #28]
 8009a0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	69fa      	ldr	r2, [r7, #28]
 8009a12:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a16:	f023 0301 	bic.w	r3, r3, #1
 8009a1a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	d108      	bne.n	8009a38 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009a2e:	2100      	movs	r1, #0
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 fef5 	bl	800a820 <HAL_PCDEx_LPM_Callback>
 8009a36:	e002      	b.n	8009a3e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8009a38:	6878      	ldr	r0, [r7, #4]
 8009a3a:	f009 fb4f 	bl	80130dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	695a      	ldr	r2, [r3, #20]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8009a4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4618      	mov	r0, r3
 8009a54:	f006 fe94 	bl	8010780 <USB_ReadInterrupts>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009a5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009a62:	d112      	bne.n	8009a8a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009a64:	69fb      	ldr	r3, [r7, #28]
 8009a66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a6a:	689b      	ldr	r3, [r3, #8]
 8009a6c:	f003 0301 	and.w	r3, r3, #1
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	d102      	bne.n	8009a7a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f009 fb0b 	bl	8013090 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	695a      	ldr	r2, [r3, #20]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8009a88:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4618      	mov	r0, r3
 8009a90:	f006 fe76 	bl	8010780 <USB_ReadInterrupts>
 8009a94:	4603      	mov	r3, r0
 8009a96:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009a9a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a9e:	d121      	bne.n	8009ae4 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	695a      	ldr	r2, [r3, #20]
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8009aae:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d111      	bne.n	8009ade <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2201      	movs	r2, #1
 8009abe:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ac8:	089b      	lsrs	r3, r3, #2
 8009aca:	f003 020f 	and.w	r2, r3, #15
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009ad4:	2101      	movs	r1, #1
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 fea2 	bl	800a820 <HAL_PCDEx_LPM_Callback>
 8009adc:	e002      	b.n	8009ae4 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f009 fad6 	bl	8013090 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f006 fe49 	bl	8010780 <USB_ReadInterrupts>
 8009aee:	4603      	mov	r3, r0
 8009af0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009af4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009af8:	f040 80b7 	bne.w	8009c6a <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009afc:	69fb      	ldr	r3, [r7, #28]
 8009afe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	69fa      	ldr	r2, [r7, #28]
 8009b06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009b0a:	f023 0301 	bic.w	r3, r3, #1
 8009b0e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	2110      	movs	r1, #16
 8009b16:	4618      	mov	r0, r3
 8009b18:	f005 ff10 	bl	800f93c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b20:	e046      	b.n	8009bb0 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b24:	015a      	lsls	r2, r3, #5
 8009b26:	69fb      	ldr	r3, [r7, #28]
 8009b28:	4413      	add	r3, r2
 8009b2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b2e:	461a      	mov	r2, r3
 8009b30:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009b34:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009b36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b38:	015a      	lsls	r2, r3, #5
 8009b3a:	69fb      	ldr	r3, [r7, #28]
 8009b3c:	4413      	add	r3, r2
 8009b3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b46:	0151      	lsls	r1, r2, #5
 8009b48:	69fa      	ldr	r2, [r7, #28]
 8009b4a:	440a      	add	r2, r1
 8009b4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b50:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009b54:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b58:	015a      	lsls	r2, r3, #5
 8009b5a:	69fb      	ldr	r3, [r7, #28]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b62:	461a      	mov	r2, r3
 8009b64:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009b68:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b6c:	015a      	lsls	r2, r3, #5
 8009b6e:	69fb      	ldr	r3, [r7, #28]
 8009b70:	4413      	add	r3, r2
 8009b72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b7a:	0151      	lsls	r1, r2, #5
 8009b7c:	69fa      	ldr	r2, [r7, #28]
 8009b7e:	440a      	add	r2, r1
 8009b80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b84:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009b88:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009b8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b8c:	015a      	lsls	r2, r3, #5
 8009b8e:	69fb      	ldr	r3, [r7, #28]
 8009b90:	4413      	add	r3, r2
 8009b92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b9a:	0151      	lsls	r1, r2, #5
 8009b9c:	69fa      	ldr	r2, [r7, #28]
 8009b9e:	440a      	add	r2, r1
 8009ba0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ba4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009ba8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bac:	3301      	adds	r3, #1
 8009bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	791b      	ldrb	r3, [r3, #4]
 8009bb4:	461a      	mov	r2, r3
 8009bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d3b2      	bcc.n	8009b22 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009bbc:	69fb      	ldr	r3, [r7, #28]
 8009bbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bc2:	69db      	ldr	r3, [r3, #28]
 8009bc4:	69fa      	ldr	r2, [r7, #28]
 8009bc6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009bca:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8009bce:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	7bdb      	ldrb	r3, [r3, #15]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d016      	beq.n	8009c06 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009bd8:	69fb      	ldr	r3, [r7, #28]
 8009bda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bde:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009be2:	69fa      	ldr	r2, [r7, #28]
 8009be4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009be8:	f043 030b 	orr.w	r3, r3, #11
 8009bec:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009bf0:	69fb      	ldr	r3, [r7, #28]
 8009bf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009bf8:	69fa      	ldr	r2, [r7, #28]
 8009bfa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009bfe:	f043 030b 	orr.w	r3, r3, #11
 8009c02:	6453      	str	r3, [r2, #68]	@ 0x44
 8009c04:	e015      	b.n	8009c32 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009c06:	69fb      	ldr	r3, [r7, #28]
 8009c08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c0c:	695a      	ldr	r2, [r3, #20]
 8009c0e:	69fb      	ldr	r3, [r7, #28]
 8009c10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c14:	4619      	mov	r1, r3
 8009c16:	f242 032b 	movw	r3, #8235	@ 0x202b
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009c1e:	69fb      	ldr	r3, [r7, #28]
 8009c20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c24:	691b      	ldr	r3, [r3, #16]
 8009c26:	69fa      	ldr	r2, [r7, #28]
 8009c28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009c2c:	f043 030b 	orr.w	r3, r3, #11
 8009c30:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009c32:	69fb      	ldr	r3, [r7, #28]
 8009c34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	69fa      	ldr	r2, [r7, #28]
 8009c3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009c40:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009c44:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6818      	ldr	r0, [r3, #0]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009c54:	461a      	mov	r2, r3
 8009c56:	f006 fe59 	bl	801090c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	695a      	ldr	r2, [r3, #20]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8009c68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f006 fd86 	bl	8010780 <USB_ReadInterrupts>
 8009c74:	4603      	mov	r3, r0
 8009c76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009c7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009c7e:	d123      	bne.n	8009cc8 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4618      	mov	r0, r3
 8009c86:	f006 fe1d 	bl	80108c4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f005 fecd 	bl	800fa2e <USB_GetDevSpeed>
 8009c94:	4603      	mov	r3, r0
 8009c96:	461a      	mov	r2, r3
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681c      	ldr	r4, [r3, #0]
 8009ca0:	f001 fde0 	bl	800b864 <HAL_RCC_GetHCLKFreq>
 8009ca4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009caa:	461a      	mov	r2, r3
 8009cac:	4620      	mov	r0, r4
 8009cae:	f005 fbd7 	bl	800f460 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009cb2:	6878      	ldr	r0, [r7, #4]
 8009cb4:	f009 f9c3 	bl	801303e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	695a      	ldr	r2, [r3, #20]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8009cc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f006 fd57 	bl	8010780 <USB_ReadInterrupts>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	f003 0308 	and.w	r3, r3, #8
 8009cd8:	2b08      	cmp	r3, #8
 8009cda:	d10a      	bne.n	8009cf2 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f009 f9a0 	bl	8013022 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	695a      	ldr	r2, [r3, #20]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f002 0208 	and.w	r2, r2, #8
 8009cf0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	f006 fd42 	bl	8010780 <USB_ReadInterrupts>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d02:	2b80      	cmp	r3, #128	@ 0x80
 8009d04:	d123      	bne.n	8009d4e <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8009d06:	6a3b      	ldr	r3, [r7, #32]
 8009d08:	699b      	ldr	r3, [r3, #24]
 8009d0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009d0e:	6a3b      	ldr	r3, [r7, #32]
 8009d10:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009d12:	2301      	movs	r3, #1
 8009d14:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d16:	e014      	b.n	8009d42 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8009d18:	6879      	ldr	r1, [r7, #4]
 8009d1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d1c:	4613      	mov	r3, r2
 8009d1e:	00db      	lsls	r3, r3, #3
 8009d20:	4413      	add	r3, r2
 8009d22:	009b      	lsls	r3, r3, #2
 8009d24:	440b      	add	r3, r1
 8009d26:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	2b01      	cmp	r3, #1
 8009d2e:	d105      	bne.n	8009d3c <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8009d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d32:	b2db      	uxtb	r3, r3
 8009d34:	4619      	mov	r1, r3
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 fb0a 	bl	800a350 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d3e:	3301      	adds	r3, #1
 8009d40:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	791b      	ldrb	r3, [r3, #4]
 8009d46:	461a      	mov	r2, r3
 8009d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d3e4      	bcc.n	8009d18 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	4618      	mov	r0, r3
 8009d54:	f006 fd14 	bl	8010780 <USB_ReadInterrupts>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009d5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d62:	d13c      	bne.n	8009dde <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009d64:	2301      	movs	r3, #1
 8009d66:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d68:	e02b      	b.n	8009dc2 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8009d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d6c:	015a      	lsls	r2, r3, #5
 8009d6e:	69fb      	ldr	r3, [r7, #28]
 8009d70:	4413      	add	r3, r2
 8009d72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009d7a:	6879      	ldr	r1, [r7, #4]
 8009d7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d7e:	4613      	mov	r3, r2
 8009d80:	00db      	lsls	r3, r3, #3
 8009d82:	4413      	add	r3, r2
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	440b      	add	r3, r1
 8009d88:	3318      	adds	r3, #24
 8009d8a:	781b      	ldrb	r3, [r3, #0]
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d115      	bne.n	8009dbc <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8009d90:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	da12      	bge.n	8009dbc <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8009d96:	6879      	ldr	r1, [r7, #4]
 8009d98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	00db      	lsls	r3, r3, #3
 8009d9e:	4413      	add	r3, r2
 8009da0:	009b      	lsls	r3, r3, #2
 8009da2:	440b      	add	r3, r1
 8009da4:	3317      	adds	r3, #23
 8009da6:	2201      	movs	r2, #1
 8009da8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8009daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	4619      	mov	r1, r3
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 faca 	bl	800a350 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dbe:	3301      	adds	r3, #1
 8009dc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	791b      	ldrb	r3, [r3, #4]
 8009dc6:	461a      	mov	r2, r3
 8009dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d3cd      	bcc.n	8009d6a <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	695a      	ldr	r2, [r3, #20]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8009ddc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4618      	mov	r0, r3
 8009de4:	f006 fccc 	bl	8010780 <USB_ReadInterrupts>
 8009de8:	4603      	mov	r3, r0
 8009dea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009dee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009df2:	d156      	bne.n	8009ea2 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009df4:	2301      	movs	r3, #1
 8009df6:	627b      	str	r3, [r7, #36]	@ 0x24
 8009df8:	e045      	b.n	8009e86 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8009dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009dfc:	015a      	lsls	r2, r3, #5
 8009dfe:	69fb      	ldr	r3, [r7, #28]
 8009e00:	4413      	add	r3, r2
 8009e02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009e0a:	6879      	ldr	r1, [r7, #4]
 8009e0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e0e:	4613      	mov	r3, r2
 8009e10:	00db      	lsls	r3, r3, #3
 8009e12:	4413      	add	r3, r2
 8009e14:	009b      	lsls	r3, r3, #2
 8009e16:	440b      	add	r3, r1
 8009e18:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	2b01      	cmp	r3, #1
 8009e20:	d12e      	bne.n	8009e80 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009e22:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	da2b      	bge.n	8009e80 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8009e28:	69bb      	ldr	r3, [r7, #24]
 8009e2a:	0c1a      	lsrs	r2, r3, #16
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8009e32:	4053      	eors	r3, r2
 8009e34:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d121      	bne.n	8009e80 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8009e3c:	6879      	ldr	r1, [r7, #4]
 8009e3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e40:	4613      	mov	r3, r2
 8009e42:	00db      	lsls	r3, r3, #3
 8009e44:	4413      	add	r3, r2
 8009e46:	009b      	lsls	r3, r3, #2
 8009e48:	440b      	add	r3, r1
 8009e4a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8009e4e:	2201      	movs	r2, #1
 8009e50:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8009e52:	6a3b      	ldr	r3, [r7, #32]
 8009e54:	699b      	ldr	r3, [r3, #24]
 8009e56:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8009e5a:	6a3b      	ldr	r3, [r7, #32]
 8009e5c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8009e5e:	6a3b      	ldr	r3, [r7, #32]
 8009e60:	695b      	ldr	r3, [r3, #20]
 8009e62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d10a      	bne.n	8009e80 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8009e6a:	69fb      	ldr	r3, [r7, #28]
 8009e6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	69fa      	ldr	r2, [r7, #28]
 8009e74:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009e78:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8009e7c:	6053      	str	r3, [r2, #4]
            break;
 8009e7e:	e008      	b.n	8009e92 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8009e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e82:	3301      	adds	r3, #1
 8009e84:	627b      	str	r3, [r7, #36]	@ 0x24
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	791b      	ldrb	r3, [r3, #4]
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d3b3      	bcc.n	8009dfa <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	695a      	ldr	r2, [r3, #20]
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8009ea0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f006 fc6a 	bl	8010780 <USB_ReadInterrupts>
 8009eac:	4603      	mov	r3, r0
 8009eae:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009eb6:	d10a      	bne.n	8009ece <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f009 f941 	bl	8013140 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	695a      	ldr	r2, [r3, #20]
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8009ecc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	f006 fc54 	bl	8010780 <USB_ReadInterrupts>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	f003 0304 	and.w	r3, r3, #4
 8009ede:	2b04      	cmp	r3, #4
 8009ee0:	d115      	bne.n	8009f0e <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009eea:	69bb      	ldr	r3, [r7, #24]
 8009eec:	f003 0304 	and.w	r3, r3, #4
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d002      	beq.n	8009efa <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f009 f931 	bl	801315c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	6859      	ldr	r1, [r3, #4]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	69ba      	ldr	r2, [r7, #24]
 8009f06:	430a      	orrs	r2, r1
 8009f08:	605a      	str	r2, [r3, #4]
 8009f0a:	e000      	b.n	8009f0e <HAL_PCD_IRQHandler+0x996>
      return;
 8009f0c:	bf00      	nop
    }
  }
}
 8009f0e:	3734      	adds	r7, #52	@ 0x34
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd90      	pop	{r4, r7, pc}

08009f14 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b082      	sub	sp, #8
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8009f26:	2b01      	cmp	r3, #1
 8009f28:	d101      	bne.n	8009f2e <HAL_PCD_SetAddress+0x1a>
 8009f2a:	2302      	movs	r3, #2
 8009f2c:	e012      	b.n	8009f54 <HAL_PCD_SetAddress+0x40>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2201      	movs	r2, #1
 8009f32:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	78fa      	ldrb	r2, [r7, #3]
 8009f3a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	78fa      	ldrb	r2, [r7, #3]
 8009f42:	4611      	mov	r1, r2
 8009f44:	4618      	mov	r0, r3
 8009f46:	f006 fbb3 	bl	80106b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8009f52:	2300      	movs	r3, #0
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3708      	adds	r7, #8
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	4608      	mov	r0, r1
 8009f66:	4611      	mov	r1, r2
 8009f68:	461a      	mov	r2, r3
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	70fb      	strb	r3, [r7, #3]
 8009f6e:	460b      	mov	r3, r1
 8009f70:	803b      	strh	r3, [r7, #0]
 8009f72:	4613      	mov	r3, r2
 8009f74:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8009f76:	2300      	movs	r3, #0
 8009f78:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009f7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	da0f      	bge.n	8009fa2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009f82:	78fb      	ldrb	r3, [r7, #3]
 8009f84:	f003 020f 	and.w	r2, r3, #15
 8009f88:	4613      	mov	r3, r2
 8009f8a:	00db      	lsls	r3, r3, #3
 8009f8c:	4413      	add	r3, r2
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	3310      	adds	r3, #16
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	4413      	add	r3, r2
 8009f96:	3304      	adds	r3, #4
 8009f98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	705a      	strb	r2, [r3, #1]
 8009fa0:	e00f      	b.n	8009fc2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009fa2:	78fb      	ldrb	r3, [r7, #3]
 8009fa4:	f003 020f 	and.w	r2, r3, #15
 8009fa8:	4613      	mov	r3, r2
 8009faa:	00db      	lsls	r3, r3, #3
 8009fac:	4413      	add	r3, r2
 8009fae:	009b      	lsls	r3, r3, #2
 8009fb0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	4413      	add	r3, r2
 8009fb8:	3304      	adds	r3, #4
 8009fba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009fc2:	78fb      	ldrb	r3, [r7, #3]
 8009fc4:	f003 030f 	and.w	r3, r3, #15
 8009fc8:	b2da      	uxtb	r2, r3
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8009fce:	883b      	ldrh	r3, [r7, #0]
 8009fd0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	78ba      	ldrb	r2, [r7, #2]
 8009fdc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	785b      	ldrb	r3, [r3, #1]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d004      	beq.n	8009ff0 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	461a      	mov	r2, r3
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009ff0:	78bb      	ldrb	r3, [r7, #2]
 8009ff2:	2b02      	cmp	r3, #2
 8009ff4:	d102      	bne.n	8009ffc <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800a002:	2b01      	cmp	r3, #1
 800a004:	d101      	bne.n	800a00a <HAL_PCD_EP_Open+0xae>
 800a006:	2302      	movs	r3, #2
 800a008:	e00e      	b.n	800a028 <HAL_PCD_EP_Open+0xcc>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2201      	movs	r2, #1
 800a00e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	68f9      	ldr	r1, [r7, #12]
 800a018:	4618      	mov	r0, r3
 800a01a:	f005 fd2d 	bl	800fa78 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2200      	movs	r2, #0
 800a022:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800a026:	7afb      	ldrb	r3, [r7, #11]
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3710      	adds	r7, #16
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b084      	sub	sp, #16
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	460b      	mov	r3, r1
 800a03a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a03c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a040:	2b00      	cmp	r3, #0
 800a042:	da0f      	bge.n	800a064 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a044:	78fb      	ldrb	r3, [r7, #3]
 800a046:	f003 020f 	and.w	r2, r3, #15
 800a04a:	4613      	mov	r3, r2
 800a04c:	00db      	lsls	r3, r3, #3
 800a04e:	4413      	add	r3, r2
 800a050:	009b      	lsls	r3, r3, #2
 800a052:	3310      	adds	r3, #16
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	4413      	add	r3, r2
 800a058:	3304      	adds	r3, #4
 800a05a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2201      	movs	r2, #1
 800a060:	705a      	strb	r2, [r3, #1]
 800a062:	e00f      	b.n	800a084 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a064:	78fb      	ldrb	r3, [r7, #3]
 800a066:	f003 020f 	and.w	r2, r3, #15
 800a06a:	4613      	mov	r3, r2
 800a06c:	00db      	lsls	r3, r3, #3
 800a06e:	4413      	add	r3, r2
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a076:	687a      	ldr	r2, [r7, #4]
 800a078:	4413      	add	r3, r2
 800a07a:	3304      	adds	r3, #4
 800a07c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	2200      	movs	r2, #0
 800a082:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800a084:	78fb      	ldrb	r3, [r7, #3]
 800a086:	f003 030f 	and.w	r3, r3, #15
 800a08a:	b2da      	uxtb	r2, r3
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800a096:	2b01      	cmp	r3, #1
 800a098:	d101      	bne.n	800a09e <HAL_PCD_EP_Close+0x6e>
 800a09a:	2302      	movs	r3, #2
 800a09c:	e00e      	b.n	800a0bc <HAL_PCD_EP_Close+0x8c>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2201      	movs	r2, #1
 800a0a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	68f9      	ldr	r1, [r7, #12]
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f005 fd6b 	bl	800fb88 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800a0ba:	2300      	movs	r3, #0
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3710      	adds	r7, #16
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}

0800a0c4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a0c4:	b580      	push	{r7, lr}
 800a0c6:	b086      	sub	sp, #24
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	60f8      	str	r0, [r7, #12]
 800a0cc:	607a      	str	r2, [r7, #4]
 800a0ce:	603b      	str	r3, [r7, #0]
 800a0d0:	460b      	mov	r3, r1
 800a0d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a0d4:	7afb      	ldrb	r3, [r7, #11]
 800a0d6:	f003 020f 	and.w	r2, r3, #15
 800a0da:	4613      	mov	r3, r2
 800a0dc:	00db      	lsls	r3, r3, #3
 800a0de:	4413      	add	r3, r2
 800a0e0:	009b      	lsls	r3, r3, #2
 800a0e2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a0e6:	68fa      	ldr	r2, [r7, #12]
 800a0e8:	4413      	add	r3, r2
 800a0ea:	3304      	adds	r3, #4
 800a0ec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	683a      	ldr	r2, [r7, #0]
 800a0f8:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	2200      	movs	r2, #0
 800a104:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a106:	7afb      	ldrb	r3, [r7, #11]
 800a108:	f003 030f 	and.w	r3, r3, #15
 800a10c:	b2da      	uxtb	r2, r3
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	799b      	ldrb	r3, [r3, #6]
 800a116:	2b01      	cmp	r3, #1
 800a118:	d102      	bne.n	800a120 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a11a:	687a      	ldr	r2, [r7, #4]
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	6818      	ldr	r0, [r3, #0]
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	799b      	ldrb	r3, [r3, #6]
 800a128:	461a      	mov	r2, r3
 800a12a:	6979      	ldr	r1, [r7, #20]
 800a12c:	f005 fe08 	bl	800fd40 <USB_EPStartXfer>

  return HAL_OK;
 800a130:	2300      	movs	r3, #0
}
 800a132:	4618      	mov	r0, r3
 800a134:	3718      	adds	r7, #24
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}

0800a13a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800a13a:	b480      	push	{r7}
 800a13c:	b083      	sub	sp, #12
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
 800a142:	460b      	mov	r3, r1
 800a144:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a146:	78fb      	ldrb	r3, [r7, #3]
 800a148:	f003 020f 	and.w	r2, r3, #15
 800a14c:	6879      	ldr	r1, [r7, #4]
 800a14e:	4613      	mov	r3, r2
 800a150:	00db      	lsls	r3, r3, #3
 800a152:	4413      	add	r3, r2
 800a154:	009b      	lsls	r3, r3, #2
 800a156:	440b      	add	r3, r1
 800a158:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800a15c:	681b      	ldr	r3, [r3, #0]
}
 800a15e:	4618      	mov	r0, r3
 800a160:	370c      	adds	r7, #12
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr

0800a16a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b086      	sub	sp, #24
 800a16e:	af00      	add	r7, sp, #0
 800a170:	60f8      	str	r0, [r7, #12]
 800a172:	607a      	str	r2, [r7, #4]
 800a174:	603b      	str	r3, [r7, #0]
 800a176:	460b      	mov	r3, r1
 800a178:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a17a:	7afb      	ldrb	r3, [r7, #11]
 800a17c:	f003 020f 	and.w	r2, r3, #15
 800a180:	4613      	mov	r3, r2
 800a182:	00db      	lsls	r3, r3, #3
 800a184:	4413      	add	r3, r2
 800a186:	009b      	lsls	r3, r3, #2
 800a188:	3310      	adds	r3, #16
 800a18a:	68fa      	ldr	r2, [r7, #12]
 800a18c:	4413      	add	r3, r2
 800a18e:	3304      	adds	r3, #4
 800a190:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	687a      	ldr	r2, [r7, #4]
 800a196:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	683a      	ldr	r2, [r7, #0]
 800a19c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a1aa:	7afb      	ldrb	r3, [r7, #11]
 800a1ac:	f003 030f 	and.w	r3, r3, #15
 800a1b0:	b2da      	uxtb	r2, r3
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	799b      	ldrb	r3, [r3, #6]
 800a1ba:	2b01      	cmp	r3, #1
 800a1bc:	d102      	bne.n	800a1c4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	6818      	ldr	r0, [r3, #0]
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	799b      	ldrb	r3, [r3, #6]
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	6979      	ldr	r1, [r7, #20]
 800a1d0:	f005 fdb6 	bl	800fd40 <USB_EPStartXfer>

  return HAL_OK;
 800a1d4:	2300      	movs	r3, #0
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3718      	adds	r7, #24
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}

0800a1de <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a1de:	b580      	push	{r7, lr}
 800a1e0:	b084      	sub	sp, #16
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	6078      	str	r0, [r7, #4]
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a1ea:	78fb      	ldrb	r3, [r7, #3]
 800a1ec:	f003 030f 	and.w	r3, r3, #15
 800a1f0:	687a      	ldr	r2, [r7, #4]
 800a1f2:	7912      	ldrb	r2, [r2, #4]
 800a1f4:	4293      	cmp	r3, r2
 800a1f6:	d901      	bls.n	800a1fc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	e04f      	b.n	800a29c <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a1fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a200:	2b00      	cmp	r3, #0
 800a202:	da0f      	bge.n	800a224 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a204:	78fb      	ldrb	r3, [r7, #3]
 800a206:	f003 020f 	and.w	r2, r3, #15
 800a20a:	4613      	mov	r3, r2
 800a20c:	00db      	lsls	r3, r3, #3
 800a20e:	4413      	add	r3, r2
 800a210:	009b      	lsls	r3, r3, #2
 800a212:	3310      	adds	r3, #16
 800a214:	687a      	ldr	r2, [r7, #4]
 800a216:	4413      	add	r3, r2
 800a218:	3304      	adds	r3, #4
 800a21a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2201      	movs	r2, #1
 800a220:	705a      	strb	r2, [r3, #1]
 800a222:	e00d      	b.n	800a240 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a224:	78fa      	ldrb	r2, [r7, #3]
 800a226:	4613      	mov	r3, r2
 800a228:	00db      	lsls	r3, r3, #3
 800a22a:	4413      	add	r3, r2
 800a22c:	009b      	lsls	r3, r3, #2
 800a22e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a232:	687a      	ldr	r2, [r7, #4]
 800a234:	4413      	add	r3, r2
 800a236:	3304      	adds	r3, #4
 800a238:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2200      	movs	r2, #0
 800a23e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2201      	movs	r2, #1
 800a244:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a246:	78fb      	ldrb	r3, [r7, #3]
 800a248:	f003 030f 	and.w	r3, r3, #15
 800a24c:	b2da      	uxtb	r2, r3
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800a258:	2b01      	cmp	r3, #1
 800a25a:	d101      	bne.n	800a260 <HAL_PCD_EP_SetStall+0x82>
 800a25c:	2302      	movs	r3, #2
 800a25e:	e01d      	b.n	800a29c <HAL_PCD_EP_SetStall+0xbe>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2201      	movs	r2, #1
 800a264:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	68f9      	ldr	r1, [r7, #12]
 800a26e:	4618      	mov	r0, r3
 800a270:	f006 f94a 	bl	8010508 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800a274:	78fb      	ldrb	r3, [r7, #3]
 800a276:	f003 030f 	and.w	r3, r3, #15
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d109      	bne.n	800a292 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6818      	ldr	r0, [r3, #0]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	7999      	ldrb	r1, [r3, #6]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a28c:	461a      	mov	r2, r3
 800a28e:	f006 fb3d 	bl	801090c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2200      	movs	r2, #0
 800a296:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800a29a:	2300      	movs	r3, #0
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3710      	adds	r7, #16
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}

0800a2a4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a2a4:	b580      	push	{r7, lr}
 800a2a6:	b084      	sub	sp, #16
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	460b      	mov	r3, r1
 800a2ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a2b0:	78fb      	ldrb	r3, [r7, #3]
 800a2b2:	f003 030f 	and.w	r3, r3, #15
 800a2b6:	687a      	ldr	r2, [r7, #4]
 800a2b8:	7912      	ldrb	r2, [r2, #4]
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d901      	bls.n	800a2c2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	e042      	b.n	800a348 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a2c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	da0f      	bge.n	800a2ea <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a2ca:	78fb      	ldrb	r3, [r7, #3]
 800a2cc:	f003 020f 	and.w	r2, r3, #15
 800a2d0:	4613      	mov	r3, r2
 800a2d2:	00db      	lsls	r3, r3, #3
 800a2d4:	4413      	add	r3, r2
 800a2d6:	009b      	lsls	r3, r3, #2
 800a2d8:	3310      	adds	r3, #16
 800a2da:	687a      	ldr	r2, [r7, #4]
 800a2dc:	4413      	add	r3, r2
 800a2de:	3304      	adds	r3, #4
 800a2e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	705a      	strb	r2, [r3, #1]
 800a2e8:	e00f      	b.n	800a30a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a2ea:	78fb      	ldrb	r3, [r7, #3]
 800a2ec:	f003 020f 	and.w	r2, r3, #15
 800a2f0:	4613      	mov	r3, r2
 800a2f2:	00db      	lsls	r3, r3, #3
 800a2f4:	4413      	add	r3, r2
 800a2f6:	009b      	lsls	r3, r3, #2
 800a2f8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a2fc:	687a      	ldr	r2, [r7, #4]
 800a2fe:	4413      	add	r3, r2
 800a300:	3304      	adds	r3, #4
 800a302:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2200      	movs	r2, #0
 800a308:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2200      	movs	r2, #0
 800a30e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a310:	78fb      	ldrb	r3, [r7, #3]
 800a312:	f003 030f 	and.w	r3, r3, #15
 800a316:	b2da      	uxtb	r2, r3
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800a322:	2b01      	cmp	r3, #1
 800a324:	d101      	bne.n	800a32a <HAL_PCD_EP_ClrStall+0x86>
 800a326:	2302      	movs	r3, #2
 800a328:	e00e      	b.n	800a348 <HAL_PCD_EP_ClrStall+0xa4>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2201      	movs	r2, #1
 800a32e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	68f9      	ldr	r1, [r7, #12]
 800a338:	4618      	mov	r0, r3
 800a33a:	f006 f953 	bl	80105e4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2200      	movs	r2, #0
 800a342:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800a346:	2300      	movs	r3, #0
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3710      	adds	r7, #16
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	460b      	mov	r3, r1
 800a35a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800a35c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a360:	2b00      	cmp	r3, #0
 800a362:	da0c      	bge.n	800a37e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a364:	78fb      	ldrb	r3, [r7, #3]
 800a366:	f003 020f 	and.w	r2, r3, #15
 800a36a:	4613      	mov	r3, r2
 800a36c:	00db      	lsls	r3, r3, #3
 800a36e:	4413      	add	r3, r2
 800a370:	009b      	lsls	r3, r3, #2
 800a372:	3310      	adds	r3, #16
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	4413      	add	r3, r2
 800a378:	3304      	adds	r3, #4
 800a37a:	60fb      	str	r3, [r7, #12]
 800a37c:	e00c      	b.n	800a398 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a37e:	78fb      	ldrb	r3, [r7, #3]
 800a380:	f003 020f 	and.w	r2, r3, #15
 800a384:	4613      	mov	r3, r2
 800a386:	00db      	lsls	r3, r3, #3
 800a388:	4413      	add	r3, r2
 800a38a:	009b      	lsls	r3, r3, #2
 800a38c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a390:	687a      	ldr	r2, [r7, #4]
 800a392:	4413      	add	r3, r2
 800a394:	3304      	adds	r3, #4
 800a396:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	68f9      	ldr	r1, [r7, #12]
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f005 ff72 	bl	8010288 <USB_EPStopXfer>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	72fb      	strb	r3, [r7, #11]

  return ret;
 800a3a8:	7afb      	ldrb	r3, [r7, #11]
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3710      	adds	r7, #16
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}

0800a3b2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a3b2:	b580      	push	{r7, lr}
 800a3b4:	b08a      	sub	sp, #40	@ 0x28
 800a3b6:	af02      	add	r7, sp, #8
 800a3b8:	6078      	str	r0, [r7, #4]
 800a3ba:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800a3c6:	683a      	ldr	r2, [r7, #0]
 800a3c8:	4613      	mov	r3, r2
 800a3ca:	00db      	lsls	r3, r3, #3
 800a3cc:	4413      	add	r3, r2
 800a3ce:	009b      	lsls	r3, r3, #2
 800a3d0:	3310      	adds	r3, #16
 800a3d2:	687a      	ldr	r2, [r7, #4]
 800a3d4:	4413      	add	r3, r2
 800a3d6:	3304      	adds	r3, #4
 800a3d8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	695a      	ldr	r2, [r3, #20]
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	691b      	ldr	r3, [r3, #16]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d901      	bls.n	800a3ea <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	e06b      	b.n	800a4c2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	691a      	ldr	r2, [r3, #16]
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	695b      	ldr	r3, [r3, #20]
 800a3f2:	1ad3      	subs	r3, r2, r3
 800a3f4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	689b      	ldr	r3, [r3, #8]
 800a3fa:	69fa      	ldr	r2, [r7, #28]
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d902      	bls.n	800a406 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	689b      	ldr	r3, [r3, #8]
 800a404:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800a406:	69fb      	ldr	r3, [r7, #28]
 800a408:	3303      	adds	r3, #3
 800a40a:	089b      	lsrs	r3, r3, #2
 800a40c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a40e:	e02a      	b.n	800a466 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	691a      	ldr	r2, [r3, #16]
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	695b      	ldr	r3, [r3, #20]
 800a418:	1ad3      	subs	r3, r2, r3
 800a41a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	689b      	ldr	r3, [r3, #8]
 800a420:	69fa      	ldr	r2, [r7, #28]
 800a422:	429a      	cmp	r2, r3
 800a424:	d902      	bls.n	800a42c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	689b      	ldr	r3, [r3, #8]
 800a42a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800a42c:	69fb      	ldr	r3, [r7, #28]
 800a42e:	3303      	adds	r3, #3
 800a430:	089b      	lsrs	r3, r3, #2
 800a432:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	68d9      	ldr	r1, [r3, #12]
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	b2da      	uxtb	r2, r3
 800a43c:	69fb      	ldr	r3, [r7, #28]
 800a43e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800a444:	9300      	str	r3, [sp, #0]
 800a446:	4603      	mov	r3, r0
 800a448:	6978      	ldr	r0, [r7, #20]
 800a44a:	f005 ffc7 	bl	80103dc <USB_WritePacket>

    ep->xfer_buff  += len;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	68da      	ldr	r2, [r3, #12]
 800a452:	69fb      	ldr	r3, [r7, #28]
 800a454:	441a      	add	r2, r3
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	695a      	ldr	r2, [r3, #20]
 800a45e:	69fb      	ldr	r3, [r7, #28]
 800a460:	441a      	add	r2, r3
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	015a      	lsls	r2, r3, #5
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	4413      	add	r3, r2
 800a46e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a472:	699b      	ldr	r3, [r3, #24]
 800a474:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a476:	69ba      	ldr	r2, [r7, #24]
 800a478:	429a      	cmp	r2, r3
 800a47a:	d809      	bhi.n	800a490 <PCD_WriteEmptyTxFifo+0xde>
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	695a      	ldr	r2, [r3, #20]
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800a484:	429a      	cmp	r2, r3
 800a486:	d203      	bcs.n	800a490 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	691b      	ldr	r3, [r3, #16]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d1bf      	bne.n	800a410 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	691a      	ldr	r2, [r3, #16]
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	695b      	ldr	r3, [r3, #20]
 800a498:	429a      	cmp	r2, r3
 800a49a:	d811      	bhi.n	800a4c0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	f003 030f 	and.w	r3, r3, #15
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	fa02 f303 	lsl.w	r3, r2, r3
 800a4a8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a4b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a4b2:	68bb      	ldr	r3, [r7, #8]
 800a4b4:	43db      	mvns	r3, r3
 800a4b6:	6939      	ldr	r1, [r7, #16]
 800a4b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a4bc:	4013      	ands	r3, r2
 800a4be:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800a4c0:	2300      	movs	r3, #0
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3720      	adds	r7, #32
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}
	...

0800a4cc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b088      	sub	sp, #32
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4dc:	69fb      	ldr	r3, [r7, #28]
 800a4de:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a4e0:	69fb      	ldr	r3, [r7, #28]
 800a4e2:	333c      	adds	r3, #60	@ 0x3c
 800a4e4:	3304      	adds	r3, #4
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	015a      	lsls	r2, r3, #5
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4f6:	689b      	ldr	r3, [r3, #8]
 800a4f8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	799b      	ldrb	r3, [r3, #6]
 800a4fe:	2b01      	cmp	r3, #1
 800a500:	d17b      	bne.n	800a5fa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800a502:	693b      	ldr	r3, [r7, #16]
 800a504:	f003 0308 	and.w	r3, r3, #8
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d015      	beq.n	800a538 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a50c:	697b      	ldr	r3, [r7, #20]
 800a50e:	4a61      	ldr	r2, [pc, #388]	@ (800a694 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a510:	4293      	cmp	r3, r2
 800a512:	f240 80b9 	bls.w	800a688 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	f000 80b3 	beq.w	800a688 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	015a      	lsls	r2, r3, #5
 800a526:	69bb      	ldr	r3, [r7, #24]
 800a528:	4413      	add	r3, r2
 800a52a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a52e:	461a      	mov	r2, r3
 800a530:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a534:	6093      	str	r3, [r2, #8]
 800a536:	e0a7      	b.n	800a688 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	f003 0320 	and.w	r3, r3, #32
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d009      	beq.n	800a556 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	015a      	lsls	r2, r3, #5
 800a546:	69bb      	ldr	r3, [r7, #24]
 800a548:	4413      	add	r3, r2
 800a54a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a54e:	461a      	mov	r2, r3
 800a550:	2320      	movs	r3, #32
 800a552:	6093      	str	r3, [r2, #8]
 800a554:	e098      	b.n	800a688 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	f040 8093 	bne.w	800a688 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	4a4b      	ldr	r2, [pc, #300]	@ (800a694 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800a566:	4293      	cmp	r3, r2
 800a568:	d90f      	bls.n	800a58a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a570:	2b00      	cmp	r3, #0
 800a572:	d00a      	beq.n	800a58a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	015a      	lsls	r2, r3, #5
 800a578:	69bb      	ldr	r3, [r7, #24]
 800a57a:	4413      	add	r3, r2
 800a57c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a580:	461a      	mov	r2, r3
 800a582:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a586:	6093      	str	r3, [r2, #8]
 800a588:	e07e      	b.n	800a688 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800a58a:	683a      	ldr	r2, [r7, #0]
 800a58c:	4613      	mov	r3, r2
 800a58e:	00db      	lsls	r3, r3, #3
 800a590:	4413      	add	r3, r2
 800a592:	009b      	lsls	r3, r3, #2
 800a594:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800a598:	687a      	ldr	r2, [r7, #4]
 800a59a:	4413      	add	r3, r2
 800a59c:	3304      	adds	r3, #4
 800a59e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	6a1a      	ldr	r2, [r3, #32]
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	0159      	lsls	r1, r3, #5
 800a5a8:	69bb      	ldr	r3, [r7, #24]
 800a5aa:	440b      	add	r3, r1
 800a5ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5b0:	691b      	ldr	r3, [r3, #16]
 800a5b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a5b6:	1ad2      	subs	r2, r2, r3
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d114      	bne.n	800a5ec <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	691b      	ldr	r3, [r3, #16]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d109      	bne.n	800a5de <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6818      	ldr	r0, [r3, #0]
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	2101      	movs	r1, #1
 800a5d8:	f006 f998 	bl	801090c <USB_EP0_OutStart>
 800a5dc:	e006      	b.n	800a5ec <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	68da      	ldr	r2, [r3, #12]
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	695b      	ldr	r3, [r3, #20]
 800a5e6:	441a      	add	r2, r3
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	4619      	mov	r1, r3
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f008 fce0 	bl	8012fb8 <HAL_PCD_DataOutStageCallback>
 800a5f8:	e046      	b.n	800a688 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	4a26      	ldr	r2, [pc, #152]	@ (800a698 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d124      	bne.n	800a64c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800a602:	693b      	ldr	r3, [r7, #16]
 800a604:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d00a      	beq.n	800a622 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	015a      	lsls	r2, r3, #5
 800a610:	69bb      	ldr	r3, [r7, #24]
 800a612:	4413      	add	r3, r2
 800a614:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a618:	461a      	mov	r2, r3
 800a61a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a61e:	6093      	str	r3, [r2, #8]
 800a620:	e032      	b.n	800a688 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800a622:	693b      	ldr	r3, [r7, #16]
 800a624:	f003 0320 	and.w	r3, r3, #32
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d008      	beq.n	800a63e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	015a      	lsls	r2, r3, #5
 800a630:	69bb      	ldr	r3, [r7, #24]
 800a632:	4413      	add	r3, r2
 800a634:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a638:	461a      	mov	r2, r3
 800a63a:	2320      	movs	r3, #32
 800a63c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	b2db      	uxtb	r3, r3
 800a642:	4619      	mov	r1, r3
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f008 fcb7 	bl	8012fb8 <HAL_PCD_DataOutStageCallback>
 800a64a:	e01d      	b.n	800a688 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d114      	bne.n	800a67c <PCD_EP_OutXfrComplete_int+0x1b0>
 800a652:	6879      	ldr	r1, [r7, #4]
 800a654:	683a      	ldr	r2, [r7, #0]
 800a656:	4613      	mov	r3, r2
 800a658:	00db      	lsls	r3, r3, #3
 800a65a:	4413      	add	r3, r2
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	440b      	add	r3, r1
 800a660:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d108      	bne.n	800a67c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6818      	ldr	r0, [r3, #0]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a674:	461a      	mov	r2, r3
 800a676:	2100      	movs	r1, #0
 800a678:	f006 f948 	bl	801090c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	b2db      	uxtb	r3, r3
 800a680:	4619      	mov	r1, r3
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f008 fc98 	bl	8012fb8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800a688:	2300      	movs	r3, #0
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3720      	adds	r7, #32
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop
 800a694:	4f54300a 	.word	0x4f54300a
 800a698:	4f54310a 	.word	0x4f54310a

0800a69c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b086      	sub	sp, #24
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	333c      	adds	r3, #60	@ 0x3c
 800a6b4:	3304      	adds	r3, #4
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	015a      	lsls	r2, r3, #5
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	4413      	add	r3, r2
 800a6c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6c6:	689b      	ldr	r3, [r3, #8]
 800a6c8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	4a15      	ldr	r2, [pc, #84]	@ (800a724 <PCD_EP_OutSetupPacket_int+0x88>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d90e      	bls.n	800a6f0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d009      	beq.n	800a6f0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	015a      	lsls	r2, r3, #5
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	4413      	add	r3, r2
 800a6e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6e8:	461a      	mov	r2, r3
 800a6ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a6ee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f008 fc4f 	bl	8012f94 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	4a0a      	ldr	r2, [pc, #40]	@ (800a724 <PCD_EP_OutSetupPacket_int+0x88>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d90c      	bls.n	800a718 <PCD_EP_OutSetupPacket_int+0x7c>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	799b      	ldrb	r3, [r3, #6]
 800a702:	2b01      	cmp	r3, #1
 800a704:	d108      	bne.n	800a718 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	6818      	ldr	r0, [r3, #0]
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800a710:	461a      	mov	r2, r3
 800a712:	2101      	movs	r1, #1
 800a714:	f006 f8fa 	bl	801090c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a718:	2300      	movs	r3, #0
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3718      	adds	r7, #24
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}
 800a722:	bf00      	nop
 800a724:	4f54300a 	.word	0x4f54300a

0800a728 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a728:	b480      	push	{r7}
 800a72a:	b085      	sub	sp, #20
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	460b      	mov	r3, r1
 800a732:	70fb      	strb	r3, [r7, #3]
 800a734:	4613      	mov	r3, r2
 800a736:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a73e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a740:	78fb      	ldrb	r3, [r7, #3]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d107      	bne.n	800a756 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a746:	883b      	ldrh	r3, [r7, #0]
 800a748:	0419      	lsls	r1, r3, #16
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	68ba      	ldr	r2, [r7, #8]
 800a750:	430a      	orrs	r2, r1
 800a752:	629a      	str	r2, [r3, #40]	@ 0x28
 800a754:	e028      	b.n	800a7a8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a75c:	0c1b      	lsrs	r3, r3, #16
 800a75e:	68ba      	ldr	r2, [r7, #8]
 800a760:	4413      	add	r3, r2
 800a762:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a764:	2300      	movs	r3, #0
 800a766:	73fb      	strb	r3, [r7, #15]
 800a768:	e00d      	b.n	800a786 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681a      	ldr	r2, [r3, #0]
 800a76e:	7bfb      	ldrb	r3, [r7, #15]
 800a770:	3340      	adds	r3, #64	@ 0x40
 800a772:	009b      	lsls	r3, r3, #2
 800a774:	4413      	add	r3, r2
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	0c1b      	lsrs	r3, r3, #16
 800a77a:	68ba      	ldr	r2, [r7, #8]
 800a77c:	4413      	add	r3, r2
 800a77e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a780:	7bfb      	ldrb	r3, [r7, #15]
 800a782:	3301      	adds	r3, #1
 800a784:	73fb      	strb	r3, [r7, #15]
 800a786:	7bfa      	ldrb	r2, [r7, #15]
 800a788:	78fb      	ldrb	r3, [r7, #3]
 800a78a:	3b01      	subs	r3, #1
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d3ec      	bcc.n	800a76a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a790:	883b      	ldrh	r3, [r7, #0]
 800a792:	0418      	lsls	r0, r3, #16
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6819      	ldr	r1, [r3, #0]
 800a798:	78fb      	ldrb	r3, [r7, #3]
 800a79a:	3b01      	subs	r3, #1
 800a79c:	68ba      	ldr	r2, [r7, #8]
 800a79e:	4302      	orrs	r2, r0
 800a7a0:	3340      	adds	r3, #64	@ 0x40
 800a7a2:	009b      	lsls	r3, r3, #2
 800a7a4:	440b      	add	r3, r1
 800a7a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3714      	adds	r7, #20
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr

0800a7b6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a7b6:	b480      	push	{r7}
 800a7b8:	b083      	sub	sp, #12
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	6078      	str	r0, [r7, #4]
 800a7be:	460b      	mov	r3, r1
 800a7c0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	887a      	ldrh	r2, [r7, #2]
 800a7c8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800a7ca:	2300      	movs	r3, #0
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	370c      	adds	r7, #12
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr

0800a7d8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b085      	sub	sp, #20
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2201      	movs	r2, #1
 800a7ea:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2200      	movs	r2, #0
 800a7f2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	699b      	ldr	r3, [r3, #24]
 800a7fa:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a806:	4b05      	ldr	r3, [pc, #20]	@ (800a81c <HAL_PCDEx_ActivateLPM+0x44>)
 800a808:	4313      	orrs	r3, r2
 800a80a:	68fa      	ldr	r2, [r7, #12]
 800a80c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800a80e:	2300      	movs	r3, #0
}
 800a810:	4618      	mov	r0, r3
 800a812:	3714      	adds	r7, #20
 800a814:	46bd      	mov	sp, r7
 800a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81a:	4770      	bx	lr
 800a81c:	10000003 	.word	0x10000003

0800a820 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800a820:	b480      	push	{r7}
 800a822:	b083      	sub	sp, #12
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	460b      	mov	r3, r1
 800a82a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800a82c:	bf00      	nop
 800a82e:	370c      	adds	r7, #12
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b084      	sub	sp, #16
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800a840:	4b19      	ldr	r3, [pc, #100]	@ (800a8a8 <HAL_PWREx_ConfigSupply+0x70>)
 800a842:	68db      	ldr	r3, [r3, #12]
 800a844:	f003 0304 	and.w	r3, r3, #4
 800a848:	2b04      	cmp	r3, #4
 800a84a:	d00a      	beq.n	800a862 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a84c:	4b16      	ldr	r3, [pc, #88]	@ (800a8a8 <HAL_PWREx_ConfigSupply+0x70>)
 800a84e:	68db      	ldr	r3, [r3, #12]
 800a850:	f003 0307 	and.w	r3, r3, #7
 800a854:	687a      	ldr	r2, [r7, #4]
 800a856:	429a      	cmp	r2, r3
 800a858:	d001      	beq.n	800a85e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800a85a:	2301      	movs	r3, #1
 800a85c:	e01f      	b.n	800a89e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800a85e:	2300      	movs	r3, #0
 800a860:	e01d      	b.n	800a89e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a862:	4b11      	ldr	r3, [pc, #68]	@ (800a8a8 <HAL_PWREx_ConfigSupply+0x70>)
 800a864:	68db      	ldr	r3, [r3, #12]
 800a866:	f023 0207 	bic.w	r2, r3, #7
 800a86a:	490f      	ldr	r1, [pc, #60]	@ (800a8a8 <HAL_PWREx_ConfigSupply+0x70>)
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	4313      	orrs	r3, r2
 800a870:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800a872:	f7f8 fc93 	bl	800319c <HAL_GetTick>
 800a876:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a878:	e009      	b.n	800a88e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a87a:	f7f8 fc8f 	bl	800319c <HAL_GetTick>
 800a87e:	4602      	mov	r2, r0
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	1ad3      	subs	r3, r2, r3
 800a884:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a888:	d901      	bls.n	800a88e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800a88a:	2301      	movs	r3, #1
 800a88c:	e007      	b.n	800a89e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a88e:	4b06      	ldr	r3, [pc, #24]	@ (800a8a8 <HAL_PWREx_ConfigSupply+0x70>)
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a896:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a89a:	d1ee      	bne.n	800a87a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800a89c:	2300      	movs	r3, #0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3710      	adds	r7, #16
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	58024800 	.word	0x58024800

0800a8ac <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800a8b0:	4b05      	ldr	r3, [pc, #20]	@ (800a8c8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a8b2:	68db      	ldr	r3, [r3, #12]
 800a8b4:	4a04      	ldr	r2, [pc, #16]	@ (800a8c8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800a8b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a8ba:	60d3      	str	r3, [r2, #12]
}
 800a8bc:	bf00      	nop
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c4:	4770      	bx	lr
 800a8c6:	bf00      	nop
 800a8c8:	58024800 	.word	0x58024800

0800a8cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a8cc:	b580      	push	{r7, lr}
 800a8ce:	b08c      	sub	sp, #48	@ 0x30
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d102      	bne.n	800a8e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800a8da:	2301      	movs	r3, #1
 800a8dc:	f000 bc1f 	b.w	800b11e <HAL_RCC_OscConfig+0x852>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f003 0301 	and.w	r3, r3, #1
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	f000 80b3 	beq.w	800aa54 <HAL_RCC_OscConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a8ee:	4b95      	ldr	r3, [pc, #596]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800a8f0:	691b      	ldr	r3, [r3, #16]
 800a8f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a8f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a8f8:	4b92      	ldr	r3, [pc, #584]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800a8fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800a8fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a900:	2b10      	cmp	r3, #16
 800a902:	d007      	beq.n	800a914 <HAL_RCC_OscConfig+0x48>
 800a904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a906:	2b18      	cmp	r3, #24
 800a908:	d112      	bne.n	800a930 <HAL_RCC_OscConfig+0x64>
 800a90a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a90c:	f003 0303 	and.w	r3, r3, #3
 800a910:	2b02      	cmp	r3, #2
 800a912:	d10d      	bne.n	800a930 <HAL_RCC_OscConfig+0x64>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a914:	4b8b      	ldr	r3, [pc, #556]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	f000 8098 	beq.w	800aa52 <HAL_RCC_OscConfig+0x186>
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	2b00      	cmp	r3, #0
 800a928:	f040 8093 	bne.w	800aa52 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800a92c:	2301      	movs	r3, #1
 800a92e:	e3f6      	b.n	800b11e <HAL_RCC_OscConfig+0x852>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	685b      	ldr	r3, [r3, #4]
 800a934:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a938:	d106      	bne.n	800a948 <HAL_RCC_OscConfig+0x7c>
 800a93a:	4b82      	ldr	r3, [pc, #520]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a81      	ldr	r2, [pc, #516]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800a940:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a944:	6013      	str	r3, [r2, #0]
 800a946:	e058      	b.n	800a9fa <HAL_RCC_OscConfig+0x12e>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d112      	bne.n	800a976 <HAL_RCC_OscConfig+0xaa>
 800a950:	4b7c      	ldr	r3, [pc, #496]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	4a7b      	ldr	r2, [pc, #492]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800a956:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a95a:	6013      	str	r3, [r2, #0]
 800a95c:	4b79      	ldr	r3, [pc, #484]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	4a78      	ldr	r2, [pc, #480]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800a962:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a966:	6013      	str	r3, [r2, #0]
 800a968:	4b76      	ldr	r3, [pc, #472]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4a75      	ldr	r2, [pc, #468]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800a96e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a972:	6013      	str	r3, [r2, #0]
 800a974:	e041      	b.n	800a9fa <HAL_RCC_OscConfig+0x12e>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	685b      	ldr	r3, [r3, #4]
 800a97a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a97e:	d112      	bne.n	800a9a6 <HAL_RCC_OscConfig+0xda>
 800a980:	4b70      	ldr	r3, [pc, #448]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	4a6f      	ldr	r2, [pc, #444]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800a986:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a98a:	6013      	str	r3, [r2, #0]
 800a98c:	4b6d      	ldr	r3, [pc, #436]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4a6c      	ldr	r2, [pc, #432]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800a992:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a996:	6013      	str	r3, [r2, #0]
 800a998:	4b6a      	ldr	r3, [pc, #424]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	4a69      	ldr	r2, [pc, #420]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800a99e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a9a2:	6013      	str	r3, [r2, #0]
 800a9a4:	e029      	b.n	800a9fa <HAL_RCC_OscConfig+0x12e>
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	685b      	ldr	r3, [r3, #4]
 800a9aa:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 800a9ae:	d112      	bne.n	800a9d6 <HAL_RCC_OscConfig+0x10a>
 800a9b0:	4b64      	ldr	r3, [pc, #400]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	4a63      	ldr	r2, [pc, #396]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800a9b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a9ba:	6013      	str	r3, [r2, #0]
 800a9bc:	4b61      	ldr	r3, [pc, #388]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4a60      	ldr	r2, [pc, #384]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800a9c2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a9c6:	6013      	str	r3, [r2, #0]
 800a9c8:	4b5e      	ldr	r3, [pc, #376]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	4a5d      	ldr	r2, [pc, #372]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800a9ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a9d2:	6013      	str	r3, [r2, #0]
 800a9d4:	e011      	b.n	800a9fa <HAL_RCC_OscConfig+0x12e>
 800a9d6:	4b5b      	ldr	r3, [pc, #364]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	4a5a      	ldr	r2, [pc, #360]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800a9dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a9e0:	6013      	str	r3, [r2, #0]
 800a9e2:	4b58      	ldr	r3, [pc, #352]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	4a57      	ldr	r2, [pc, #348]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800a9e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800a9ec:	6013      	str	r3, [r2, #0]
 800a9ee:	4b55      	ldr	r3, [pc, #340]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	4a54      	ldr	r2, [pc, #336]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800a9f4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a9f8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	685b      	ldr	r3, [r3, #4]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d013      	beq.n	800aa2a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa02:	f7f8 fbcb 	bl	800319c <HAL_GetTick>
 800aa06:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aa08:	e008      	b.n	800aa1c <HAL_RCC_OscConfig+0x150>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aa0a:	f7f8 fbc7 	bl	800319c <HAL_GetTick>
 800aa0e:	4602      	mov	r2, r0
 800aa10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa12:	1ad3      	subs	r3, r2, r3
 800aa14:	2b64      	cmp	r3, #100	@ 0x64
 800aa16:	d901      	bls.n	800aa1c <HAL_RCC_OscConfig+0x150>
          {
            return HAL_TIMEOUT;
 800aa18:	2303      	movs	r3, #3
 800aa1a:	e380      	b.n	800b11e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800aa1c:	4b49      	ldr	r3, [pc, #292]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d0f0      	beq.n	800aa0a <HAL_RCC_OscConfig+0x13e>
 800aa28:	e014      	b.n	800aa54 <HAL_RCC_OscConfig+0x188>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa2a:	f7f8 fbb7 	bl	800319c <HAL_GetTick>
 800aa2e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800aa30:	e008      	b.n	800aa44 <HAL_RCC_OscConfig+0x178>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800aa32:	f7f8 fbb3 	bl	800319c <HAL_GetTick>
 800aa36:	4602      	mov	r2, r0
 800aa38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa3a:	1ad3      	subs	r3, r2, r3
 800aa3c:	2b64      	cmp	r3, #100	@ 0x64
 800aa3e:	d901      	bls.n	800aa44 <HAL_RCC_OscConfig+0x178>
          {
            return HAL_TIMEOUT;
 800aa40:	2303      	movs	r3, #3
 800aa42:	e36c      	b.n	800b11e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800aa44:	4b3f      	ldr	r3, [pc, #252]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d1f0      	bne.n	800aa32 <HAL_RCC_OscConfig+0x166>
 800aa50:	e000      	b.n	800aa54 <HAL_RCC_OscConfig+0x188>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aa52:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f003 0302 	and.w	r3, r3, #2
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	f000 808c 	beq.w	800ab7a <HAL_RCC_OscConfig+0x2ae>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aa62:	4b38      	ldr	r3, [pc, #224]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800aa64:	691b      	ldr	r3, [r3, #16]
 800aa66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aa6a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aa6c:	4b35      	ldr	r3, [pc, #212]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800aa6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa70:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800aa72:	6a3b      	ldr	r3, [r7, #32]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d007      	beq.n	800aa88 <HAL_RCC_OscConfig+0x1bc>
 800aa78:	6a3b      	ldr	r3, [r7, #32]
 800aa7a:	2b18      	cmp	r3, #24
 800aa7c:	d137      	bne.n	800aaee <HAL_RCC_OscConfig+0x222>
 800aa7e:	69fb      	ldr	r3, [r7, #28]
 800aa80:	f003 0303 	and.w	r3, r3, #3
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d132      	bne.n	800aaee <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aa88:	4b2e      	ldr	r3, [pc, #184]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f003 0304 	and.w	r3, r3, #4
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d005      	beq.n	800aaa0 <HAL_RCC_OscConfig+0x1d4>
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	68db      	ldr	r3, [r3, #12]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d101      	bne.n	800aaa0 <HAL_RCC_OscConfig+0x1d4>
      {
        return HAL_ERROR;
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	e33e      	b.n	800b11e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800aaa0:	4b28      	ldr	r3, [pc, #160]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f023 0219 	bic.w	r2, r3, #25
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	68db      	ldr	r3, [r3, #12]
 800aaac:	4925      	ldr	r1, [pc, #148]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800aaae:	4313      	orrs	r3, r2
 800aab0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aab2:	f7f8 fb73 	bl	800319c <HAL_GetTick>
 800aab6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aab8:	e008      	b.n	800aacc <HAL_RCC_OscConfig+0x200>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aaba:	f7f8 fb6f 	bl	800319c <HAL_GetTick>
 800aabe:	4602      	mov	r2, r0
 800aac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aac2:	1ad3      	subs	r3, r2, r3
 800aac4:	2b02      	cmp	r3, #2
 800aac6:	d901      	bls.n	800aacc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800aac8:	2303      	movs	r3, #3
 800aaca:	e328      	b.n	800b11e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800aacc:	4b1d      	ldr	r3, [pc, #116]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f003 0304 	and.w	r3, r3, #4
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d0f0      	beq.n	800aaba <HAL_RCC_OscConfig+0x1ee>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aad8:	4b1a      	ldr	r3, [pc, #104]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800aada:	685b      	ldr	r3, [r3, #4]
 800aadc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	691b      	ldr	r3, [r3, #16]
 800aae4:	061b      	lsls	r3, r3, #24
 800aae6:	4917      	ldr	r1, [pc, #92]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800aae8:	4313      	orrs	r3, r2
 800aaea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aaec:	e045      	b.n	800ab7a <HAL_RCC_OscConfig+0x2ae>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	68db      	ldr	r3, [r3, #12]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d028      	beq.n	800ab48 <HAL_RCC_OscConfig+0x27c>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800aaf6:	4b13      	ldr	r3, [pc, #76]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f023 0219 	bic.w	r2, r3, #25
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	68db      	ldr	r3, [r3, #12]
 800ab02:	4910      	ldr	r1, [pc, #64]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800ab04:	4313      	orrs	r3, r2
 800ab06:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab08:	f7f8 fb48 	bl	800319c <HAL_GetTick>
 800ab0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ab0e:	e008      	b.n	800ab22 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ab10:	f7f8 fb44 	bl	800319c <HAL_GetTick>
 800ab14:	4602      	mov	r2, r0
 800ab16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab18:	1ad3      	subs	r3, r2, r3
 800ab1a:	2b02      	cmp	r3, #2
 800ab1c:	d901      	bls.n	800ab22 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800ab1e:	2303      	movs	r3, #3
 800ab20:	e2fd      	b.n	800b11e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ab22:	4b08      	ldr	r3, [pc, #32]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f003 0304 	and.w	r3, r3, #4
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d0f0      	beq.n	800ab10 <HAL_RCC_OscConfig+0x244>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ab2e:	4b05      	ldr	r3, [pc, #20]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	691b      	ldr	r3, [r3, #16]
 800ab3a:	061b      	lsls	r3, r3, #24
 800ab3c:	4901      	ldr	r1, [pc, #4]	@ (800ab44 <HAL_RCC_OscConfig+0x278>)
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	604b      	str	r3, [r1, #4]
 800ab42:	e01a      	b.n	800ab7a <HAL_RCC_OscConfig+0x2ae>
 800ab44:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800ab48:	4b97      	ldr	r3, [pc, #604]	@ (800ada8 <HAL_RCC_OscConfig+0x4dc>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	4a96      	ldr	r2, [pc, #600]	@ (800ada8 <HAL_RCC_OscConfig+0x4dc>)
 800ab4e:	f023 0301 	bic.w	r3, r3, #1
 800ab52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ab54:	f7f8 fb22 	bl	800319c <HAL_GetTick>
 800ab58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ab5a:	e008      	b.n	800ab6e <HAL_RCC_OscConfig+0x2a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ab5c:	f7f8 fb1e 	bl	800319c <HAL_GetTick>
 800ab60:	4602      	mov	r2, r0
 800ab62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab64:	1ad3      	subs	r3, r2, r3
 800ab66:	2b02      	cmp	r3, #2
 800ab68:	d901      	bls.n	800ab6e <HAL_RCC_OscConfig+0x2a2>
          {
            return HAL_TIMEOUT;
 800ab6a:	2303      	movs	r3, #3
 800ab6c:	e2d7      	b.n	800b11e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800ab6e:	4b8e      	ldr	r3, [pc, #568]	@ (800ada8 <HAL_RCC_OscConfig+0x4dc>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f003 0304 	and.w	r3, r3, #4
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d1f0      	bne.n	800ab5c <HAL_RCC_OscConfig+0x290>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	f003 0310 	and.w	r3, r3, #16
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d06a      	beq.n	800ac5c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ab86:	4b88      	ldr	r3, [pc, #544]	@ (800ada8 <HAL_RCC_OscConfig+0x4dc>)
 800ab88:	691b      	ldr	r3, [r3, #16]
 800ab8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ab8e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ab90:	4b85      	ldr	r3, [pc, #532]	@ (800ada8 <HAL_RCC_OscConfig+0x4dc>)
 800ab92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab94:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ab96:	69bb      	ldr	r3, [r7, #24]
 800ab98:	2b08      	cmp	r3, #8
 800ab9a:	d007      	beq.n	800abac <HAL_RCC_OscConfig+0x2e0>
 800ab9c:	69bb      	ldr	r3, [r7, #24]
 800ab9e:	2b18      	cmp	r3, #24
 800aba0:	d11b      	bne.n	800abda <HAL_RCC_OscConfig+0x30e>
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	f003 0303 	and.w	r3, r3, #3
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d116      	bne.n	800abda <HAL_RCC_OscConfig+0x30e>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800abac:	4b7e      	ldr	r3, [pc, #504]	@ (800ada8 <HAL_RCC_OscConfig+0x4dc>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d005      	beq.n	800abc4 <HAL_RCC_OscConfig+0x2f8>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	69db      	ldr	r3, [r3, #28]
 800abbc:	2b80      	cmp	r3, #128	@ 0x80
 800abbe:	d001      	beq.n	800abc4 <HAL_RCC_OscConfig+0x2f8>
      {
        return HAL_ERROR;
 800abc0:	2301      	movs	r3, #1
 800abc2:	e2ac      	b.n	800b11e <HAL_RCC_OscConfig+0x852>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800abc4:	4b78      	ldr	r3, [pc, #480]	@ (800ada8 <HAL_RCC_OscConfig+0x4dc>)
 800abc6:	68db      	ldr	r3, [r3, #12]
 800abc8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6a1b      	ldr	r3, [r3, #32]
 800abd0:	061b      	lsls	r3, r3, #24
 800abd2:	4975      	ldr	r1, [pc, #468]	@ (800ada8 <HAL_RCC_OscConfig+0x4dc>)
 800abd4:	4313      	orrs	r3, r2
 800abd6:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800abd8:	e040      	b.n	800ac5c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	69db      	ldr	r3, [r3, #28]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d023      	beq.n	800ac2a <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800abe2:	4b71      	ldr	r3, [pc, #452]	@ (800ada8 <HAL_RCC_OscConfig+0x4dc>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4a70      	ldr	r2, [pc, #448]	@ (800ada8 <HAL_RCC_OscConfig+0x4dc>)
 800abe8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800abee:	f7f8 fad5 	bl	800319c <HAL_GetTick>
 800abf2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800abf4:	e008      	b.n	800ac08 <HAL_RCC_OscConfig+0x33c>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800abf6:	f7f8 fad1 	bl	800319c <HAL_GetTick>
 800abfa:	4602      	mov	r2, r0
 800abfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abfe:	1ad3      	subs	r3, r2, r3
 800ac00:	2b02      	cmp	r3, #2
 800ac02:	d901      	bls.n	800ac08 <HAL_RCC_OscConfig+0x33c>
          {
            return HAL_TIMEOUT;
 800ac04:	2303      	movs	r3, #3
 800ac06:	e28a      	b.n	800b11e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ac08:	4b67      	ldr	r3, [pc, #412]	@ (800ada8 <HAL_RCC_OscConfig+0x4dc>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d0f0      	beq.n	800abf6 <HAL_RCC_OscConfig+0x32a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ac14:	4b64      	ldr	r3, [pc, #400]	@ (800ada8 <HAL_RCC_OscConfig+0x4dc>)
 800ac16:	68db      	ldr	r3, [r3, #12]
 800ac18:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	6a1b      	ldr	r3, [r3, #32]
 800ac20:	061b      	lsls	r3, r3, #24
 800ac22:	4961      	ldr	r1, [pc, #388]	@ (800ada8 <HAL_RCC_OscConfig+0x4dc>)
 800ac24:	4313      	orrs	r3, r2
 800ac26:	60cb      	str	r3, [r1, #12]
 800ac28:	e018      	b.n	800ac5c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800ac2a:	4b5f      	ldr	r3, [pc, #380]	@ (800ada8 <HAL_RCC_OscConfig+0x4dc>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	4a5e      	ldr	r2, [pc, #376]	@ (800ada8 <HAL_RCC_OscConfig+0x4dc>)
 800ac30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac36:	f7f8 fab1 	bl	800319c <HAL_GetTick>
 800ac3a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ac3c:	e008      	b.n	800ac50 <HAL_RCC_OscConfig+0x384>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ac3e:	f7f8 faad 	bl	800319c <HAL_GetTick>
 800ac42:	4602      	mov	r2, r0
 800ac44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac46:	1ad3      	subs	r3, r2, r3
 800ac48:	2b02      	cmp	r3, #2
 800ac4a:	d901      	bls.n	800ac50 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 800ac4c:	2303      	movs	r3, #3
 800ac4e:	e266      	b.n	800b11e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ac50:	4b55      	ldr	r3, [pc, #340]	@ (800ada8 <HAL_RCC_OscConfig+0x4dc>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d1f0      	bne.n	800ac3e <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f003 0308 	and.w	r3, r3, #8
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d036      	beq.n	800acd6 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	695b      	ldr	r3, [r3, #20]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d019      	beq.n	800aca4 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ac70:	4b4d      	ldr	r3, [pc, #308]	@ (800ada8 <HAL_RCC_OscConfig+0x4dc>)
 800ac72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac74:	4a4c      	ldr	r2, [pc, #304]	@ (800ada8 <HAL_RCC_OscConfig+0x4dc>)
 800ac76:	f043 0301 	orr.w	r3, r3, #1
 800ac7a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ac7c:	f7f8 fa8e 	bl	800319c <HAL_GetTick>
 800ac80:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ac82:	e008      	b.n	800ac96 <HAL_RCC_OscConfig+0x3ca>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ac84:	f7f8 fa8a 	bl	800319c <HAL_GetTick>
 800ac88:	4602      	mov	r2, r0
 800ac8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac8c:	1ad3      	subs	r3, r2, r3
 800ac8e:	2b02      	cmp	r3, #2
 800ac90:	d901      	bls.n	800ac96 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800ac92:	2303      	movs	r3, #3
 800ac94:	e243      	b.n	800b11e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ac96:	4b44      	ldr	r3, [pc, #272]	@ (800ada8 <HAL_RCC_OscConfig+0x4dc>)
 800ac98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ac9a:	f003 0302 	and.w	r3, r3, #2
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d0f0      	beq.n	800ac84 <HAL_RCC_OscConfig+0x3b8>
 800aca2:	e018      	b.n	800acd6 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aca4:	4b40      	ldr	r3, [pc, #256]	@ (800ada8 <HAL_RCC_OscConfig+0x4dc>)
 800aca6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800aca8:	4a3f      	ldr	r2, [pc, #252]	@ (800ada8 <HAL_RCC_OscConfig+0x4dc>)
 800acaa:	f023 0301 	bic.w	r3, r3, #1
 800acae:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800acb0:	f7f8 fa74 	bl	800319c <HAL_GetTick>
 800acb4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800acb6:	e008      	b.n	800acca <HAL_RCC_OscConfig+0x3fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800acb8:	f7f8 fa70 	bl	800319c <HAL_GetTick>
 800acbc:	4602      	mov	r2, r0
 800acbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acc0:	1ad3      	subs	r3, r2, r3
 800acc2:	2b02      	cmp	r3, #2
 800acc4:	d901      	bls.n	800acca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800acc6:	2303      	movs	r3, #3
 800acc8:	e229      	b.n	800b11e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800acca:	4b37      	ldr	r3, [pc, #220]	@ (800ada8 <HAL_RCC_OscConfig+0x4dc>)
 800accc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800acce:	f003 0302 	and.w	r3, r3, #2
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d1f0      	bne.n	800acb8 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f003 0320 	and.w	r3, r3, #32
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d036      	beq.n	800ad50 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	699b      	ldr	r3, [r3, #24]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d019      	beq.n	800ad1e <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800acea:	4b2f      	ldr	r3, [pc, #188]	@ (800ada8 <HAL_RCC_OscConfig+0x4dc>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	4a2e      	ldr	r2, [pc, #184]	@ (800ada8 <HAL_RCC_OscConfig+0x4dc>)
 800acf0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800acf4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800acf6:	f7f8 fa51 	bl	800319c <HAL_GetTick>
 800acfa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800acfc:	e008      	b.n	800ad10 <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800acfe:	f7f8 fa4d 	bl	800319c <HAL_GetTick>
 800ad02:	4602      	mov	r2, r0
 800ad04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad06:	1ad3      	subs	r3, r2, r3
 800ad08:	2b02      	cmp	r3, #2
 800ad0a:	d901      	bls.n	800ad10 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800ad0c:	2303      	movs	r3, #3
 800ad0e:	e206      	b.n	800b11e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ad10:	4b25      	ldr	r3, [pc, #148]	@ (800ada8 <HAL_RCC_OscConfig+0x4dc>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d0f0      	beq.n	800acfe <HAL_RCC_OscConfig+0x432>
 800ad1c:	e018      	b.n	800ad50 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ad1e:	4b22      	ldr	r3, [pc, #136]	@ (800ada8 <HAL_RCC_OscConfig+0x4dc>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	4a21      	ldr	r2, [pc, #132]	@ (800ada8 <HAL_RCC_OscConfig+0x4dc>)
 800ad24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ad28:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800ad2a:	f7f8 fa37 	bl	800319c <HAL_GetTick>
 800ad2e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ad30:	e008      	b.n	800ad44 <HAL_RCC_OscConfig+0x478>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ad32:	f7f8 fa33 	bl	800319c <HAL_GetTick>
 800ad36:	4602      	mov	r2, r0
 800ad38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad3a:	1ad3      	subs	r3, r2, r3
 800ad3c:	2b02      	cmp	r3, #2
 800ad3e:	d901      	bls.n	800ad44 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 800ad40:	2303      	movs	r3, #3
 800ad42:	e1ec      	b.n	800b11e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ad44:	4b18      	ldr	r3, [pc, #96]	@ (800ada8 <HAL_RCC_OscConfig+0x4dc>)
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d1f0      	bne.n	800ad32 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f003 0304 	and.w	r3, r3, #4
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	f000 80af 	beq.w	800aebc <HAL_RCC_OscConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ad5e:	4b13      	ldr	r3, [pc, #76]	@ (800adac <HAL_RCC_OscConfig+0x4e0>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	4a12      	ldr	r2, [pc, #72]	@ (800adac <HAL_RCC_OscConfig+0x4e0>)
 800ad64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ad68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ad6a:	f7f8 fa17 	bl	800319c <HAL_GetTick>
 800ad6e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ad70:	e008      	b.n	800ad84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ad72:	f7f8 fa13 	bl	800319c <HAL_GetTick>
 800ad76:	4602      	mov	r2, r0
 800ad78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad7a:	1ad3      	subs	r3, r2, r3
 800ad7c:	2b64      	cmp	r3, #100	@ 0x64
 800ad7e:	d901      	bls.n	800ad84 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 800ad80:	2303      	movs	r3, #3
 800ad82:	e1cc      	b.n	800b11e <HAL_RCC_OscConfig+0x852>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ad84:	4b09      	ldr	r3, [pc, #36]	@ (800adac <HAL_RCC_OscConfig+0x4e0>)
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d0f0      	beq.n	800ad72 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	689b      	ldr	r3, [r3, #8]
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d10b      	bne.n	800adb0 <HAL_RCC_OscConfig+0x4e4>
 800ad98:	4b03      	ldr	r3, [pc, #12]	@ (800ada8 <HAL_RCC_OscConfig+0x4dc>)
 800ad9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ad9c:	4a02      	ldr	r2, [pc, #8]	@ (800ada8 <HAL_RCC_OscConfig+0x4dc>)
 800ad9e:	f043 0301 	orr.w	r3, r3, #1
 800ada2:	6713      	str	r3, [r2, #112]	@ 0x70
 800ada4:	e05b      	b.n	800ae5e <HAL_RCC_OscConfig+0x592>
 800ada6:	bf00      	nop
 800ada8:	58024400 	.word	0x58024400
 800adac:	58024800 	.word	0x58024800
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	689b      	ldr	r3, [r3, #8]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d112      	bne.n	800adde <HAL_RCC_OscConfig+0x512>
 800adb8:	4b9d      	ldr	r3, [pc, #628]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800adba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800adbc:	4a9c      	ldr	r2, [pc, #624]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800adbe:	f023 0301 	bic.w	r3, r3, #1
 800adc2:	6713      	str	r3, [r2, #112]	@ 0x70
 800adc4:	4b9a      	ldr	r3, [pc, #616]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800adc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800adc8:	4a99      	ldr	r2, [pc, #612]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800adca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800adce:	6713      	str	r3, [r2, #112]	@ 0x70
 800add0:	4b97      	ldr	r3, [pc, #604]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800add2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800add4:	4a96      	ldr	r2, [pc, #600]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800add6:	f023 0304 	bic.w	r3, r3, #4
 800adda:	6713      	str	r3, [r2, #112]	@ 0x70
 800addc:	e03f      	b.n	800ae5e <HAL_RCC_OscConfig+0x592>
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	689b      	ldr	r3, [r3, #8]
 800ade2:	2b05      	cmp	r3, #5
 800ade4:	d112      	bne.n	800ae0c <HAL_RCC_OscConfig+0x540>
 800ade6:	4b92      	ldr	r3, [pc, #584]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800ade8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800adea:	4a91      	ldr	r2, [pc, #580]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800adec:	f043 0304 	orr.w	r3, r3, #4
 800adf0:	6713      	str	r3, [r2, #112]	@ 0x70
 800adf2:	4b8f      	ldr	r3, [pc, #572]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800adf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800adf6:	4a8e      	ldr	r2, [pc, #568]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800adf8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800adfc:	6713      	str	r3, [r2, #112]	@ 0x70
 800adfe:	4b8c      	ldr	r3, [pc, #560]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800ae00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae02:	4a8b      	ldr	r2, [pc, #556]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800ae04:	f043 0301 	orr.w	r3, r3, #1
 800ae08:	6713      	str	r3, [r2, #112]	@ 0x70
 800ae0a:	e028      	b.n	800ae5e <HAL_RCC_OscConfig+0x592>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	689b      	ldr	r3, [r3, #8]
 800ae10:	2b85      	cmp	r3, #133	@ 0x85
 800ae12:	d112      	bne.n	800ae3a <HAL_RCC_OscConfig+0x56e>
 800ae14:	4b86      	ldr	r3, [pc, #536]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800ae16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae18:	4a85      	ldr	r2, [pc, #532]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800ae1a:	f043 0304 	orr.w	r3, r3, #4
 800ae1e:	6713      	str	r3, [r2, #112]	@ 0x70
 800ae20:	4b83      	ldr	r3, [pc, #524]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800ae22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae24:	4a82      	ldr	r2, [pc, #520]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800ae26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae2a:	6713      	str	r3, [r2, #112]	@ 0x70
 800ae2c:	4b80      	ldr	r3, [pc, #512]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800ae2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae30:	4a7f      	ldr	r2, [pc, #508]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800ae32:	f043 0301 	orr.w	r3, r3, #1
 800ae36:	6713      	str	r3, [r2, #112]	@ 0x70
 800ae38:	e011      	b.n	800ae5e <HAL_RCC_OscConfig+0x592>
 800ae3a:	4b7d      	ldr	r3, [pc, #500]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800ae3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae3e:	4a7c      	ldr	r2, [pc, #496]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800ae40:	f023 0301 	bic.w	r3, r3, #1
 800ae44:	6713      	str	r3, [r2, #112]	@ 0x70
 800ae46:	4b7a      	ldr	r3, [pc, #488]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800ae48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae4a:	4a79      	ldr	r2, [pc, #484]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800ae4c:	f023 0304 	bic.w	r3, r3, #4
 800ae50:	6713      	str	r3, [r2, #112]	@ 0x70
 800ae52:	4b77      	ldr	r3, [pc, #476]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800ae54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae56:	4a76      	ldr	r2, [pc, #472]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800ae58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ae5c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	689b      	ldr	r3, [r3, #8]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d015      	beq.n	800ae92 <HAL_RCC_OscConfig+0x5c6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae66:	f7f8 f999 	bl	800319c <HAL_GetTick>
 800ae6a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ae6c:	e00a      	b.n	800ae84 <HAL_RCC_OscConfig+0x5b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae6e:	f7f8 f995 	bl	800319c <HAL_GetTick>
 800ae72:	4602      	mov	r2, r0
 800ae74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae76:	1ad3      	subs	r3, r2, r3
 800ae78:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d901      	bls.n	800ae84 <HAL_RCC_OscConfig+0x5b8>
        {
          return HAL_TIMEOUT;
 800ae80:	2303      	movs	r3, #3
 800ae82:	e14c      	b.n	800b11e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ae84:	4b6a      	ldr	r3, [pc, #424]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800ae86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ae88:	f003 0302 	and.w	r3, r3, #2
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d0ee      	beq.n	800ae6e <HAL_RCC_OscConfig+0x5a2>
 800ae90:	e014      	b.n	800aebc <HAL_RCC_OscConfig+0x5f0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ae92:	f7f8 f983 	bl	800319c <HAL_GetTick>
 800ae96:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ae98:	e00a      	b.n	800aeb0 <HAL_RCC_OscConfig+0x5e4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ae9a:	f7f8 f97f 	bl	800319c <HAL_GetTick>
 800ae9e:	4602      	mov	r2, r0
 800aea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aea2:	1ad3      	subs	r3, r2, r3
 800aea4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800aea8:	4293      	cmp	r3, r2
 800aeaa:	d901      	bls.n	800aeb0 <HAL_RCC_OscConfig+0x5e4>
        {
          return HAL_TIMEOUT;
 800aeac:	2303      	movs	r3, #3
 800aeae:	e136      	b.n	800b11e <HAL_RCC_OscConfig+0x852>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800aeb0:	4b5f      	ldr	r3, [pc, #380]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800aeb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aeb4:	f003 0302 	and.w	r3, r3, #2
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d1ee      	bne.n	800ae9a <HAL_RCC_OscConfig+0x5ce>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	f000 812b 	beq.w	800b11c <HAL_RCC_OscConfig+0x850>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800aec6:	4b5a      	ldr	r3, [pc, #360]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800aec8:	691b      	ldr	r3, [r3, #16]
 800aeca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800aece:	2b18      	cmp	r3, #24
 800aed0:	f000 80bb 	beq.w	800b04a <HAL_RCC_OscConfig+0x77e>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aed8:	2b02      	cmp	r3, #2
 800aeda:	f040 8095 	bne.w	800b008 <HAL_RCC_OscConfig+0x73c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800aede:	4b54      	ldr	r3, [pc, #336]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	4a53      	ldr	r2, [pc, #332]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800aee4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800aee8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aeea:	f7f8 f957 	bl	800319c <HAL_GetTick>
 800aeee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800aef0:	e008      	b.n	800af04 <HAL_RCC_OscConfig+0x638>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800aef2:	f7f8 f953 	bl	800319c <HAL_GetTick>
 800aef6:	4602      	mov	r2, r0
 800aef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aefa:	1ad3      	subs	r3, r2, r3
 800aefc:	2b02      	cmp	r3, #2
 800aefe:	d901      	bls.n	800af04 <HAL_RCC_OscConfig+0x638>
          {
            return HAL_TIMEOUT;
 800af00:	2303      	movs	r3, #3
 800af02:	e10c      	b.n	800b11e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800af04:	4b4a      	ldr	r3, [pc, #296]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d1f0      	bne.n	800aef2 <HAL_RCC_OscConfig+0x626>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800af10:	4b47      	ldr	r3, [pc, #284]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800af12:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800af14:	4b47      	ldr	r3, [pc, #284]	@ (800b034 <HAL_RCC_OscConfig+0x768>)
 800af16:	4013      	ands	r3, r2
 800af18:	687a      	ldr	r2, [r7, #4]
 800af1a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800af1c:	687a      	ldr	r2, [r7, #4]
 800af1e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800af20:	0112      	lsls	r2, r2, #4
 800af22:	430a      	orrs	r2, r1
 800af24:	4942      	ldr	r1, [pc, #264]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800af26:	4313      	orrs	r3, r2
 800af28:	628b      	str	r3, [r1, #40]	@ 0x28
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af2e:	3b01      	subs	r3, #1
 800af30:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af38:	3b01      	subs	r3, #1
 800af3a:	025b      	lsls	r3, r3, #9
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	431a      	orrs	r2, r3
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af44:	3b01      	subs	r3, #1
 800af46:	041b      	lsls	r3, r3, #16
 800af48:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800af4c:	431a      	orrs	r2, r3
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af52:	3b01      	subs	r3, #1
 800af54:	061b      	lsls	r3, r3, #24
 800af56:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800af5a:	4935      	ldr	r1, [pc, #212]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800af5c:	4313      	orrs	r3, r2
 800af5e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800af60:	4b33      	ldr	r3, [pc, #204]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800af62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af64:	4a32      	ldr	r2, [pc, #200]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800af66:	f023 0301 	bic.w	r3, r3, #1
 800af6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800af6c:	4b30      	ldr	r3, [pc, #192]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800af6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af70:	4b31      	ldr	r3, [pc, #196]	@ (800b038 <HAL_RCC_OscConfig+0x76c>)
 800af72:	4013      	ands	r3, r2
 800af74:	687a      	ldr	r2, [r7, #4]
 800af76:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800af78:	00d2      	lsls	r2, r2, #3
 800af7a:	492d      	ldr	r1, [pc, #180]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800af7c:	4313      	orrs	r3, r2
 800af7e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800af80:	4b2b      	ldr	r3, [pc, #172]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800af82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af84:	f023 020c 	bic.w	r2, r3, #12
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af8c:	4928      	ldr	r1, [pc, #160]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800af8e:	4313      	orrs	r3, r2
 800af90:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800af92:	4b27      	ldr	r3, [pc, #156]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800af94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af96:	f023 0202 	bic.w	r2, r3, #2
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af9e:	4924      	ldr	r1, [pc, #144]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800afa0:	4313      	orrs	r3, r2
 800afa2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800afa4:	4b22      	ldr	r3, [pc, #136]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800afa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afa8:	4a21      	ldr	r2, [pc, #132]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800afaa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800afae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afb0:	4b1f      	ldr	r3, [pc, #124]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800afb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afb4:	4a1e      	ldr	r2, [pc, #120]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800afb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800afba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800afbc:	4b1c      	ldr	r3, [pc, #112]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800afbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afc0:	4a1b      	ldr	r2, [pc, #108]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800afc2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800afc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800afc8:	4b19      	ldr	r3, [pc, #100]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800afca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afcc:	4a18      	ldr	r2, [pc, #96]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800afce:	f043 0301 	orr.w	r3, r3, #1
 800afd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800afd4:	4b16      	ldr	r3, [pc, #88]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	4a15      	ldr	r2, [pc, #84]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800afda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800afde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800afe0:	f7f8 f8dc 	bl	800319c <HAL_GetTick>
 800afe4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800afe6:	e008      	b.n	800affa <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800afe8:	f7f8 f8d8 	bl	800319c <HAL_GetTick>
 800afec:	4602      	mov	r2, r0
 800afee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aff0:	1ad3      	subs	r3, r2, r3
 800aff2:	2b02      	cmp	r3, #2
 800aff4:	d901      	bls.n	800affa <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 800aff6:	2303      	movs	r3, #3
 800aff8:	e091      	b.n	800b11e <HAL_RCC_OscConfig+0x852>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800affa:	4b0d      	ldr	r3, [pc, #52]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b002:	2b00      	cmp	r3, #0
 800b004:	d0f0      	beq.n	800afe8 <HAL_RCC_OscConfig+0x71c>
 800b006:	e089      	b.n	800b11c <HAL_RCC_OscConfig+0x850>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b008:	4b09      	ldr	r3, [pc, #36]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	4a08      	ldr	r2, [pc, #32]	@ (800b030 <HAL_RCC_OscConfig+0x764>)
 800b00e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b012:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b014:	f7f8 f8c2 	bl	800319c <HAL_GetTick>
 800b018:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b01a:	e00f      	b.n	800b03c <HAL_RCC_OscConfig+0x770>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b01c:	f7f8 f8be 	bl	800319c <HAL_GetTick>
 800b020:	4602      	mov	r2, r0
 800b022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b024:	1ad3      	subs	r3, r2, r3
 800b026:	2b02      	cmp	r3, #2
 800b028:	d908      	bls.n	800b03c <HAL_RCC_OscConfig+0x770>
          {
            return HAL_TIMEOUT;
 800b02a:	2303      	movs	r3, #3
 800b02c:	e077      	b.n	800b11e <HAL_RCC_OscConfig+0x852>
 800b02e:	bf00      	nop
 800b030:	58024400 	.word	0x58024400
 800b034:	fffffc0c 	.word	0xfffffc0c
 800b038:	ffff0007 	.word	0xffff0007
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b03c:	4b3a      	ldr	r3, [pc, #232]	@ (800b128 <HAL_RCC_OscConfig+0x85c>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b044:	2b00      	cmp	r3, #0
 800b046:	d1e9      	bne.n	800b01c <HAL_RCC_OscConfig+0x750>
 800b048:	e068      	b.n	800b11c <HAL_RCC_OscConfig+0x850>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b04a:	4b37      	ldr	r3, [pc, #220]	@ (800b128 <HAL_RCC_OscConfig+0x85c>)
 800b04c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b04e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b050:	4b35      	ldr	r3, [pc, #212]	@ (800b128 <HAL_RCC_OscConfig+0x85c>)
 800b052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b054:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b05a:	2b01      	cmp	r3, #1
 800b05c:	d031      	beq.n	800b0c2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b05e:	693b      	ldr	r3, [r7, #16]
 800b060:	f003 0203 	and.w	r2, r3, #3
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b068:	429a      	cmp	r2, r3
 800b06a:	d12a      	bne.n	800b0c2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b06c:	693b      	ldr	r3, [r7, #16]
 800b06e:	091b      	lsrs	r3, r3, #4
 800b070:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b078:	429a      	cmp	r2, r3
 800b07a:	d122      	bne.n	800b0c2 <HAL_RCC_OscConfig+0x7f6>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b086:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b088:	429a      	cmp	r2, r3
 800b08a:	d11a      	bne.n	800b0c2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	0a5b      	lsrs	r3, r3, #9
 800b090:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b098:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d111      	bne.n	800b0c2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	0c1b      	lsrs	r3, r3, #16
 800b0a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0aa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b0ac:	429a      	cmp	r2, r3
 800b0ae:	d108      	bne.n	800b0c2 <HAL_RCC_OscConfig+0x7f6>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	0e1b      	lsrs	r3, r3, #24
 800b0b4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0bc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	d001      	beq.n	800b0c6 <HAL_RCC_OscConfig+0x7fa>
      {
        return HAL_ERROR;
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	e02b      	b.n	800b11e <HAL_RCC_OscConfig+0x852>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b0c6:	4b18      	ldr	r3, [pc, #96]	@ (800b128 <HAL_RCC_OscConfig+0x85c>)
 800b0c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b0ca:	08db      	lsrs	r3, r3, #3
 800b0cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b0d0:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b0d6:	693a      	ldr	r2, [r7, #16]
 800b0d8:	429a      	cmp	r2, r3
 800b0da:	d01f      	beq.n	800b11c <HAL_RCC_OscConfig+0x850>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800b0dc:	4b12      	ldr	r3, [pc, #72]	@ (800b128 <HAL_RCC_OscConfig+0x85c>)
 800b0de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0e0:	4a11      	ldr	r2, [pc, #68]	@ (800b128 <HAL_RCC_OscConfig+0x85c>)
 800b0e2:	f023 0301 	bic.w	r3, r3, #1
 800b0e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b0e8:	f7f8 f858 	bl	800319c <HAL_GetTick>
 800b0ec:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800b0ee:	bf00      	nop
 800b0f0:	f7f8 f854 	bl	800319c <HAL_GetTick>
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0f8:	4293      	cmp	r3, r2
 800b0fa:	d0f9      	beq.n	800b0f0 <HAL_RCC_OscConfig+0x824>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b0fc:	4b0a      	ldr	r3, [pc, #40]	@ (800b128 <HAL_RCC_OscConfig+0x85c>)
 800b0fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b100:	4b0a      	ldr	r3, [pc, #40]	@ (800b12c <HAL_RCC_OscConfig+0x860>)
 800b102:	4013      	ands	r3, r2
 800b104:	687a      	ldr	r2, [r7, #4]
 800b106:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800b108:	00d2      	lsls	r2, r2, #3
 800b10a:	4907      	ldr	r1, [pc, #28]	@ (800b128 <HAL_RCC_OscConfig+0x85c>)
 800b10c:	4313      	orrs	r3, r2
 800b10e:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800b110:	4b05      	ldr	r3, [pc, #20]	@ (800b128 <HAL_RCC_OscConfig+0x85c>)
 800b112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b114:	4a04      	ldr	r2, [pc, #16]	@ (800b128 <HAL_RCC_OscConfig+0x85c>)
 800b116:	f043 0301 	orr.w	r3, r3, #1
 800b11a:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800b11c:	2300      	movs	r3, #0
}
 800b11e:	4618      	mov	r0, r3
 800b120:	3730      	adds	r7, #48	@ 0x30
 800b122:	46bd      	mov	sp, r7
 800b124:	bd80      	pop	{r7, pc}
 800b126:	bf00      	nop
 800b128:	58024400 	.word	0x58024400
 800b12c:	ffff0007 	.word	0xffff0007

0800b130 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b086      	sub	sp, #24
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
 800b138:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d101      	bne.n	800b144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b140:	2301      	movs	r3, #1
 800b142:	e19c      	b.n	800b47e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b144:	4b8a      	ldr	r3, [pc, #552]	@ (800b370 <HAL_RCC_ClockConfig+0x240>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f003 030f 	and.w	r3, r3, #15
 800b14c:	683a      	ldr	r2, [r7, #0]
 800b14e:	429a      	cmp	r2, r3
 800b150:	d910      	bls.n	800b174 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b152:	4b87      	ldr	r3, [pc, #540]	@ (800b370 <HAL_RCC_ClockConfig+0x240>)
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f023 020f 	bic.w	r2, r3, #15
 800b15a:	4985      	ldr	r1, [pc, #532]	@ (800b370 <HAL_RCC_ClockConfig+0x240>)
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	4313      	orrs	r3, r2
 800b160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b162:	4b83      	ldr	r3, [pc, #524]	@ (800b370 <HAL_RCC_ClockConfig+0x240>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	f003 030f 	and.w	r3, r3, #15
 800b16a:	683a      	ldr	r2, [r7, #0]
 800b16c:	429a      	cmp	r2, r3
 800b16e:	d001      	beq.n	800b174 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b170:	2301      	movs	r3, #1
 800b172:	e184      	b.n	800b47e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f003 0304 	and.w	r3, r3, #4
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d010      	beq.n	800b1a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	691a      	ldr	r2, [r3, #16]
 800b184:	4b7b      	ldr	r3, [pc, #492]	@ (800b374 <HAL_RCC_ClockConfig+0x244>)
 800b186:	699b      	ldr	r3, [r3, #24]
 800b188:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b18c:	429a      	cmp	r2, r3
 800b18e:	d908      	bls.n	800b1a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b190:	4b78      	ldr	r3, [pc, #480]	@ (800b374 <HAL_RCC_ClockConfig+0x244>)
 800b192:	699b      	ldr	r3, [r3, #24]
 800b194:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	691b      	ldr	r3, [r3, #16]
 800b19c:	4975      	ldr	r1, [pc, #468]	@ (800b374 <HAL_RCC_ClockConfig+0x244>)
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f003 0308 	and.w	r3, r3, #8
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d010      	beq.n	800b1d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	695a      	ldr	r2, [r3, #20]
 800b1b2:	4b70      	ldr	r3, [pc, #448]	@ (800b374 <HAL_RCC_ClockConfig+0x244>)
 800b1b4:	69db      	ldr	r3, [r3, #28]
 800b1b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b1ba:	429a      	cmp	r2, r3
 800b1bc:	d908      	bls.n	800b1d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b1be:	4b6d      	ldr	r3, [pc, #436]	@ (800b374 <HAL_RCC_ClockConfig+0x244>)
 800b1c0:	69db      	ldr	r3, [r3, #28]
 800b1c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	695b      	ldr	r3, [r3, #20]
 800b1ca:	496a      	ldr	r1, [pc, #424]	@ (800b374 <HAL_RCC_ClockConfig+0x244>)
 800b1cc:	4313      	orrs	r3, r2
 800b1ce:	61cb      	str	r3, [r1, #28]
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f003 0310 	and.w	r3, r3, #16
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d010      	beq.n	800b1fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	699a      	ldr	r2, [r3, #24]
 800b1e0:	4b64      	ldr	r3, [pc, #400]	@ (800b374 <HAL_RCC_ClockConfig+0x244>)
 800b1e2:	69db      	ldr	r3, [r3, #28]
 800b1e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b1e8:	429a      	cmp	r2, r3
 800b1ea:	d908      	bls.n	800b1fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b1ec:	4b61      	ldr	r3, [pc, #388]	@ (800b374 <HAL_RCC_ClockConfig+0x244>)
 800b1ee:	69db      	ldr	r3, [r3, #28]
 800b1f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	699b      	ldr	r3, [r3, #24]
 800b1f8:	495e      	ldr	r1, [pc, #376]	@ (800b374 <HAL_RCC_ClockConfig+0x244>)
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	f003 0320 	and.w	r3, r3, #32
 800b206:	2b00      	cmp	r3, #0
 800b208:	d010      	beq.n	800b22c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	69da      	ldr	r2, [r3, #28]
 800b20e:	4b59      	ldr	r3, [pc, #356]	@ (800b374 <HAL_RCC_ClockConfig+0x244>)
 800b210:	6a1b      	ldr	r3, [r3, #32]
 800b212:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b216:	429a      	cmp	r2, r3
 800b218:	d908      	bls.n	800b22c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b21a:	4b56      	ldr	r3, [pc, #344]	@ (800b374 <HAL_RCC_ClockConfig+0x244>)
 800b21c:	6a1b      	ldr	r3, [r3, #32]
 800b21e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	69db      	ldr	r3, [r3, #28]
 800b226:	4953      	ldr	r1, [pc, #332]	@ (800b374 <HAL_RCC_ClockConfig+0x244>)
 800b228:	4313      	orrs	r3, r2
 800b22a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	f003 0302 	and.w	r3, r3, #2
 800b234:	2b00      	cmp	r3, #0
 800b236:	d010      	beq.n	800b25a <HAL_RCC_ClockConfig+0x12a>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	68da      	ldr	r2, [r3, #12]
 800b23c:	4b4d      	ldr	r3, [pc, #308]	@ (800b374 <HAL_RCC_ClockConfig+0x244>)
 800b23e:	699b      	ldr	r3, [r3, #24]
 800b240:	f003 030f 	and.w	r3, r3, #15
 800b244:	429a      	cmp	r2, r3
 800b246:	d908      	bls.n	800b25a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b248:	4b4a      	ldr	r3, [pc, #296]	@ (800b374 <HAL_RCC_ClockConfig+0x244>)
 800b24a:	699b      	ldr	r3, [r3, #24]
 800b24c:	f023 020f 	bic.w	r2, r3, #15
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	68db      	ldr	r3, [r3, #12]
 800b254:	4947      	ldr	r1, [pc, #284]	@ (800b374 <HAL_RCC_ClockConfig+0x244>)
 800b256:	4313      	orrs	r3, r2
 800b258:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f003 0301 	and.w	r3, r3, #1
 800b262:	2b00      	cmp	r3, #0
 800b264:	d055      	beq.n	800b312 <HAL_RCC_ClockConfig+0x1e2>
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b266:	4b43      	ldr	r3, [pc, #268]	@ (800b374 <HAL_RCC_ClockConfig+0x244>)
 800b268:	699b      	ldr	r3, [r3, #24]
 800b26a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	689b      	ldr	r3, [r3, #8]
 800b272:	4940      	ldr	r1, [pc, #256]	@ (800b374 <HAL_RCC_ClockConfig+0x244>)
 800b274:	4313      	orrs	r3, r2
 800b276:	618b      	str	r3, [r1, #24]
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	685b      	ldr	r3, [r3, #4]
 800b27c:	2b02      	cmp	r3, #2
 800b27e:	d107      	bne.n	800b290 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b280:	4b3c      	ldr	r3, [pc, #240]	@ (800b374 <HAL_RCC_ClockConfig+0x244>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d121      	bne.n	800b2d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b28c:	2301      	movs	r3, #1
 800b28e:	e0f6      	b.n	800b47e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	2b03      	cmp	r3, #3
 800b296:	d107      	bne.n	800b2a8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b298:	4b36      	ldr	r3, [pc, #216]	@ (800b374 <HAL_RCC_ClockConfig+0x244>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d115      	bne.n	800b2d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	e0ea      	b.n	800b47e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	685b      	ldr	r3, [r3, #4]
 800b2ac:	2b01      	cmp	r3, #1
 800b2ae:	d107      	bne.n	800b2c0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b2b0:	4b30      	ldr	r3, [pc, #192]	@ (800b374 <HAL_RCC_ClockConfig+0x244>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d109      	bne.n	800b2d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b2bc:	2301      	movs	r3, #1
 800b2be:	e0de      	b.n	800b47e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b2c0:	4b2c      	ldr	r3, [pc, #176]	@ (800b374 <HAL_RCC_ClockConfig+0x244>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f003 0304 	and.w	r3, r3, #4
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d101      	bne.n	800b2d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800b2cc:	2301      	movs	r3, #1
 800b2ce:	e0d6      	b.n	800b47e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b2d0:	4b28      	ldr	r3, [pc, #160]	@ (800b374 <HAL_RCC_ClockConfig+0x244>)
 800b2d2:	691b      	ldr	r3, [r3, #16]
 800b2d4:	f023 0207 	bic.w	r2, r3, #7
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	4925      	ldr	r1, [pc, #148]	@ (800b374 <HAL_RCC_ClockConfig+0x244>)
 800b2de:	4313      	orrs	r3, r2
 800b2e0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2e2:	f7f7 ff5b 	bl	800319c <HAL_GetTick>
 800b2e6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b2e8:	e00a      	b.n	800b300 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b2ea:	f7f7 ff57 	bl	800319c <HAL_GetTick>
 800b2ee:	4602      	mov	r2, r0
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	1ad3      	subs	r3, r2, r3
 800b2f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b2f8:	4293      	cmp	r3, r2
 800b2fa:	d901      	bls.n	800b300 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800b2fc:	2303      	movs	r3, #3
 800b2fe:	e0be      	b.n	800b47e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b300:	4b1c      	ldr	r3, [pc, #112]	@ (800b374 <HAL_RCC_ClockConfig+0x244>)
 800b302:	691b      	ldr	r3, [r3, #16]
 800b304:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	00db      	lsls	r3, r3, #3
 800b30e:	429a      	cmp	r2, r3
 800b310:	d1eb      	bne.n	800b2ea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f003 0302 	and.w	r3, r3, #2
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d010      	beq.n	800b340 <HAL_RCC_ClockConfig+0x210>
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_HPRE))
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	68da      	ldr	r2, [r3, #12]
 800b322:	4b14      	ldr	r3, [pc, #80]	@ (800b374 <HAL_RCC_ClockConfig+0x244>)
 800b324:	699b      	ldr	r3, [r3, #24]
 800b326:	f003 030f 	and.w	r3, r3, #15
 800b32a:	429a      	cmp	r2, r3
 800b32c:	d208      	bcs.n	800b340 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b32e:	4b11      	ldr	r3, [pc, #68]	@ (800b374 <HAL_RCC_ClockConfig+0x244>)
 800b330:	699b      	ldr	r3, [r3, #24]
 800b332:	f023 020f 	bic.w	r2, r3, #15
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	68db      	ldr	r3, [r3, #12]
 800b33a:	490e      	ldr	r1, [pc, #56]	@ (800b374 <HAL_RCC_ClockConfig+0x244>)
 800b33c:	4313      	orrs	r3, r2
 800b33e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b340:	4b0b      	ldr	r3, [pc, #44]	@ (800b370 <HAL_RCC_ClockConfig+0x240>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f003 030f 	and.w	r3, r3, #15
 800b348:	683a      	ldr	r2, [r7, #0]
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d214      	bcs.n	800b378 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b34e:	4b08      	ldr	r3, [pc, #32]	@ (800b370 <HAL_RCC_ClockConfig+0x240>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	f023 020f 	bic.w	r2, r3, #15
 800b356:	4906      	ldr	r1, [pc, #24]	@ (800b370 <HAL_RCC_ClockConfig+0x240>)
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	4313      	orrs	r3, r2
 800b35c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b35e:	4b04      	ldr	r3, [pc, #16]	@ (800b370 <HAL_RCC_ClockConfig+0x240>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	f003 030f 	and.w	r3, r3, #15
 800b366:	683a      	ldr	r2, [r7, #0]
 800b368:	429a      	cmp	r2, r3
 800b36a:	d005      	beq.n	800b378 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b36c:	2301      	movs	r3, #1
 800b36e:	e086      	b.n	800b47e <HAL_RCC_ClockConfig+0x34e>
 800b370:	52002000 	.word	0x52002000
 800b374:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f003 0304 	and.w	r3, r3, #4
 800b380:	2b00      	cmp	r3, #0
 800b382:	d010      	beq.n	800b3a6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
    }
#else
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->CDCFGR1 & RCC_CDCFGR1_CDPPRE))
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	691a      	ldr	r2, [r3, #16]
 800b388:	4b3f      	ldr	r3, [pc, #252]	@ (800b488 <HAL_RCC_ClockConfig+0x358>)
 800b38a:	699b      	ldr	r3, [r3, #24]
 800b38c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b390:	429a      	cmp	r2, r3
 800b392:	d208      	bcs.n	800b3a6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_CDPCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b394:	4b3c      	ldr	r3, [pc, #240]	@ (800b488 <HAL_RCC_ClockConfig+0x358>)
 800b396:	699b      	ldr	r3, [r3, #24]
 800b398:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	691b      	ldr	r3, [r3, #16]
 800b3a0:	4939      	ldr	r1, [pc, #228]	@ (800b488 <HAL_RCC_ClockConfig+0x358>)
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f003 0308 	and.w	r3, r3, #8
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d010      	beq.n	800b3d4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1))
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	695a      	ldr	r2, [r3, #20]
 800b3b6:	4b34      	ldr	r3, [pc, #208]	@ (800b488 <HAL_RCC_ClockConfig+0x358>)
 800b3b8:	69db      	ldr	r3, [r3, #28]
 800b3ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b3be:	429a      	cmp	r2, r3
 800b3c0:	d208      	bcs.n	800b3d4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b3c2:	4b31      	ldr	r3, [pc, #196]	@ (800b488 <HAL_RCC_ClockConfig+0x358>)
 800b3c4:	69db      	ldr	r3, [r3, #28]
 800b3c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	695b      	ldr	r3, [r3, #20]
 800b3ce:	492e      	ldr	r1, [pc, #184]	@ (800b488 <HAL_RCC_ClockConfig+0x358>)
 800b3d0:	4313      	orrs	r3, r2
 800b3d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f003 0310 	and.w	r3, r3, #16
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d010      	beq.n	800b402 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2))
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	699a      	ldr	r2, [r3, #24]
 800b3e4:	4b28      	ldr	r3, [pc, #160]	@ (800b488 <HAL_RCC_ClockConfig+0x358>)
 800b3e6:	69db      	ldr	r3, [r3, #28]
 800b3e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b3ec:	429a      	cmp	r2, r3
 800b3ee:	d208      	bcs.n	800b402 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b3f0:	4b25      	ldr	r3, [pc, #148]	@ (800b488 <HAL_RCC_ClockConfig+0x358>)
 800b3f2:	69db      	ldr	r3, [r3, #28]
 800b3f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	699b      	ldr	r3, [r3, #24]
 800b3fc:	4922      	ldr	r1, [pc, #136]	@ (800b488 <HAL_RCC_ClockConfig+0x358>)
 800b3fe:	4313      	orrs	r3, r2
 800b400:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	f003 0320 	and.w	r3, r3, #32
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d010      	beq.n	800b430 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
    }
#else
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE))
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	69da      	ldr	r2, [r3, #28]
 800b412:	4b1d      	ldr	r3, [pc, #116]	@ (800b488 <HAL_RCC_ClockConfig+0x358>)
 800b414:	6a1b      	ldr	r3, [r3, #32]
 800b416:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b41a:	429a      	cmp	r2, r3
 800b41c:	d208      	bcs.n	800b430 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_SRDPCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b41e:	4b1a      	ldr	r3, [pc, #104]	@ (800b488 <HAL_RCC_ClockConfig+0x358>)
 800b420:	6a1b      	ldr	r3, [r3, #32]
 800b422:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	69db      	ldr	r3, [r3, #28]
 800b42a:	4917      	ldr	r1, [pc, #92]	@ (800b488 <HAL_RCC_ClockConfig+0x358>)
 800b42c:	4313      	orrs	r3, r2
 800b42e:	620b      	str	r3, [r1, #32]

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
 800b430:	f000 f89e 	bl	800b570 <HAL_RCC_GetSysClockFreq>
 800b434:	4602      	mov	r2, r0
 800b436:	4b14      	ldr	r3, [pc, #80]	@ (800b488 <HAL_RCC_ClockConfig+0x358>)
 800b438:	699b      	ldr	r3, [r3, #24]
 800b43a:	0a1b      	lsrs	r3, r3, #8
 800b43c:	f003 030f 	and.w	r3, r3, #15
 800b440:	4912      	ldr	r1, [pc, #72]	@ (800b48c <HAL_RCC_ClockConfig+0x35c>)
 800b442:	5ccb      	ldrb	r3, [r1, r3]
 800b444:	f003 031f 	and.w	r3, r3, #31
 800b448:	fa22 f303 	lsr.w	r3, r2, r3
 800b44c:	613b      	str	r3, [r7, #16]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b44e:	4b0e      	ldr	r3, [pc, #56]	@ (800b488 <HAL_RCC_ClockConfig+0x358>)
 800b450:	699b      	ldr	r3, [r3, #24]
 800b452:	f003 030f 	and.w	r3, r3, #15
 800b456:	4a0d      	ldr	r2, [pc, #52]	@ (800b48c <HAL_RCC_ClockConfig+0x35c>)
 800b458:	5cd3      	ldrb	r3, [r2, r3]
 800b45a:	f003 031f 	and.w	r3, r3, #31
 800b45e:	693a      	ldr	r2, [r7, #16]
 800b460:	fa22 f303 	lsr.w	r3, r2, r3
 800b464:	4a0a      	ldr	r2, [pc, #40]	@ (800b490 <HAL_RCC_ClockConfig+0x360>)
 800b466:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b468:	4a0a      	ldr	r2, [pc, #40]	@ (800b494 <HAL_RCC_ClockConfig+0x364>)
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800b46e:	4b0a      	ldr	r3, [pc, #40]	@ (800b498 <HAL_RCC_ClockConfig+0x368>)
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	4618      	mov	r0, r3
 800b474:	f7f7 fe48 	bl	8003108 <HAL_InitTick>
 800b478:	4603      	mov	r3, r0
 800b47a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800b47c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b47e:	4618      	mov	r0, r3
 800b480:	3718      	adds	r7, #24
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}
 800b486:	bf00      	nop
 800b488:	58024400 	.word	0x58024400
 800b48c:	08013b04 	.word	0x08013b04
 800b490:	24000008 	.word	0x24000008
 800b494:	24000004 	.word	0x24000004
 800b498:	2400000c 	.word	0x2400000c

0800b49c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b08c      	sub	sp, #48	@ 0x30
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	60f8      	str	r0, [r7, #12]
 800b4a4:	60b9      	str	r1, [r7, #8]
 800b4a6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d12a      	bne.n	800b504 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800b4ae:	4b2d      	ldr	r3, [pc, #180]	@ (800b564 <HAL_RCC_MCOConfig+0xc8>)
 800b4b0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800b4b4:	4a2b      	ldr	r2, [pc, #172]	@ (800b564 <HAL_RCC_MCOConfig+0xc8>)
 800b4b6:	f043 0301 	orr.w	r3, r3, #1
 800b4ba:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800b4be:	4b29      	ldr	r3, [pc, #164]	@ (800b564 <HAL_RCC_MCOConfig+0xc8>)
 800b4c0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800b4c4:	f003 0301 	and.w	r3, r3, #1
 800b4c8:	61bb      	str	r3, [r7, #24]
 800b4ca:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800b4cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b4d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b4d2:	2302      	movs	r3, #2
 800b4d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b4d6:	2303      	movs	r3, #3
 800b4d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b4e2:	f107 031c 	add.w	r3, r7, #28
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	481f      	ldr	r0, [pc, #124]	@ (800b568 <HAL_RCC_MCOConfig+0xcc>)
 800b4ea:	f7fc fdb9 	bl	8008060 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800b4ee:	4b1d      	ldr	r3, [pc, #116]	@ (800b564 <HAL_RCC_MCOConfig+0xc8>)
 800b4f0:	691b      	ldr	r3, [r3, #16]
 800b4f2:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 800b4f6:	68b9      	ldr	r1, [r7, #8]
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	430b      	orrs	r3, r1
 800b4fc:	4919      	ldr	r1, [pc, #100]	@ (800b564 <HAL_RCC_MCOConfig+0xc8>)
 800b4fe:	4313      	orrs	r3, r2
 800b500:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 800b502:	e02a      	b.n	800b55a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 800b504:	4b17      	ldr	r3, [pc, #92]	@ (800b564 <HAL_RCC_MCOConfig+0xc8>)
 800b506:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800b50a:	4a16      	ldr	r2, [pc, #88]	@ (800b564 <HAL_RCC_MCOConfig+0xc8>)
 800b50c:	f043 0304 	orr.w	r3, r3, #4
 800b510:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 800b514:	4b13      	ldr	r3, [pc, #76]	@ (800b564 <HAL_RCC_MCOConfig+0xc8>)
 800b516:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 800b51a:	f003 0304 	and.w	r3, r3, #4
 800b51e:	617b      	str	r3, [r7, #20]
 800b520:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800b522:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b528:	2302      	movs	r3, #2
 800b52a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b52c:	2303      	movs	r3, #3
 800b52e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b530:	2300      	movs	r3, #0
 800b532:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b534:	2300      	movs	r3, #0
 800b536:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b538:	f107 031c 	add.w	r3, r7, #28
 800b53c:	4619      	mov	r1, r3
 800b53e:	480b      	ldr	r0, [pc, #44]	@ (800b56c <HAL_RCC_MCOConfig+0xd0>)
 800b540:	f7fc fd8e 	bl	8008060 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800b544:	4b07      	ldr	r3, [pc, #28]	@ (800b564 <HAL_RCC_MCOConfig+0xc8>)
 800b546:	691b      	ldr	r3, [r3, #16]
 800b548:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	01d9      	lsls	r1, r3, #7
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	430b      	orrs	r3, r1
 800b554:	4903      	ldr	r1, [pc, #12]	@ (800b564 <HAL_RCC_MCOConfig+0xc8>)
 800b556:	4313      	orrs	r3, r2
 800b558:	610b      	str	r3, [r1, #16]
}
 800b55a:	bf00      	nop
 800b55c:	3730      	adds	r7, #48	@ 0x30
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}
 800b562:	bf00      	nop
 800b564:	58024400 	.word	0x58024400
 800b568:	58020000 	.word	0x58020000
 800b56c:	58020800 	.word	0x58020800

0800b570 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b570:	b480      	push	{r7}
 800b572:	b089      	sub	sp, #36	@ 0x24
 800b574:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b576:	4bb3      	ldr	r3, [pc, #716]	@ (800b844 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b578:	691b      	ldr	r3, [r3, #16]
 800b57a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b57e:	2b18      	cmp	r3, #24
 800b580:	f200 8155 	bhi.w	800b82e <HAL_RCC_GetSysClockFreq+0x2be>
 800b584:	a201      	add	r2, pc, #4	@ (adr r2, 800b58c <HAL_RCC_GetSysClockFreq+0x1c>)
 800b586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b58a:	bf00      	nop
 800b58c:	0800b5f1 	.word	0x0800b5f1
 800b590:	0800b82f 	.word	0x0800b82f
 800b594:	0800b82f 	.word	0x0800b82f
 800b598:	0800b82f 	.word	0x0800b82f
 800b59c:	0800b82f 	.word	0x0800b82f
 800b5a0:	0800b82f 	.word	0x0800b82f
 800b5a4:	0800b82f 	.word	0x0800b82f
 800b5a8:	0800b82f 	.word	0x0800b82f
 800b5ac:	0800b617 	.word	0x0800b617
 800b5b0:	0800b82f 	.word	0x0800b82f
 800b5b4:	0800b82f 	.word	0x0800b82f
 800b5b8:	0800b82f 	.word	0x0800b82f
 800b5bc:	0800b82f 	.word	0x0800b82f
 800b5c0:	0800b82f 	.word	0x0800b82f
 800b5c4:	0800b82f 	.word	0x0800b82f
 800b5c8:	0800b82f 	.word	0x0800b82f
 800b5cc:	0800b61d 	.word	0x0800b61d
 800b5d0:	0800b82f 	.word	0x0800b82f
 800b5d4:	0800b82f 	.word	0x0800b82f
 800b5d8:	0800b82f 	.word	0x0800b82f
 800b5dc:	0800b82f 	.word	0x0800b82f
 800b5e0:	0800b82f 	.word	0x0800b82f
 800b5e4:	0800b82f 	.word	0x0800b82f
 800b5e8:	0800b82f 	.word	0x0800b82f
 800b5ec:	0800b623 	.word	0x0800b623
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b5f0:	4b94      	ldr	r3, [pc, #592]	@ (800b844 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f003 0320 	and.w	r3, r3, #32
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d009      	beq.n	800b610 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b5fc:	4b91      	ldr	r3, [pc, #580]	@ (800b844 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	08db      	lsrs	r3, r3, #3
 800b602:	f003 0303 	and.w	r3, r3, #3
 800b606:	4a90      	ldr	r2, [pc, #576]	@ (800b848 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b608:	fa22 f303 	lsr.w	r3, r2, r3
 800b60c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800b60e:	e111      	b.n	800b834 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800b610:	4b8d      	ldr	r3, [pc, #564]	@ (800b848 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b612:	61bb      	str	r3, [r7, #24]
      break;
 800b614:	e10e      	b.n	800b834 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800b616:	4b8d      	ldr	r3, [pc, #564]	@ (800b84c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b618:	61bb      	str	r3, [r7, #24]
      break;
 800b61a:	e10b      	b.n	800b834 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800b61c:	4b8c      	ldr	r3, [pc, #560]	@ (800b850 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800b61e:	61bb      	str	r3, [r7, #24]
      break;
 800b620:	e108      	b.n	800b834 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b622:	4b88      	ldr	r3, [pc, #544]	@ (800b844 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b626:	f003 0303 	and.w	r3, r3, #3
 800b62a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b62c:	4b85      	ldr	r3, [pc, #532]	@ (800b844 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b62e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b630:	091b      	lsrs	r3, r3, #4
 800b632:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b636:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b638:	4b82      	ldr	r3, [pc, #520]	@ (800b844 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b63a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b63c:	f003 0301 	and.w	r3, r3, #1
 800b640:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b642:	4b80      	ldr	r3, [pc, #512]	@ (800b844 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b646:	08db      	lsrs	r3, r3, #3
 800b648:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b64c:	68fa      	ldr	r2, [r7, #12]
 800b64e:	fb02 f303 	mul.w	r3, r2, r3
 800b652:	ee07 3a90 	vmov	s15, r3
 800b656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b65a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800b65e:	693b      	ldr	r3, [r7, #16]
 800b660:	2b00      	cmp	r3, #0
 800b662:	f000 80e1 	beq.w	800b828 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	2b02      	cmp	r3, #2
 800b66a:	f000 8083 	beq.w	800b774 <HAL_RCC_GetSysClockFreq+0x204>
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	2b02      	cmp	r3, #2
 800b672:	f200 80a1 	bhi.w	800b7b8 <HAL_RCC_GetSysClockFreq+0x248>
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d003      	beq.n	800b684 <HAL_RCC_GetSysClockFreq+0x114>
 800b67c:	697b      	ldr	r3, [r7, #20]
 800b67e:	2b01      	cmp	r3, #1
 800b680:	d056      	beq.n	800b730 <HAL_RCC_GetSysClockFreq+0x1c0>
 800b682:	e099      	b.n	800b7b8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b684:	4b6f      	ldr	r3, [pc, #444]	@ (800b844 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f003 0320 	and.w	r3, r3, #32
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d02d      	beq.n	800b6ec <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b690:	4b6c      	ldr	r3, [pc, #432]	@ (800b844 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	08db      	lsrs	r3, r3, #3
 800b696:	f003 0303 	and.w	r3, r3, #3
 800b69a:	4a6b      	ldr	r2, [pc, #428]	@ (800b848 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800b69c:	fa22 f303 	lsr.w	r3, r2, r3
 800b6a0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	ee07 3a90 	vmov	s15, r3
 800b6a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6ac:	693b      	ldr	r3, [r7, #16]
 800b6ae:	ee07 3a90 	vmov	s15, r3
 800b6b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6ba:	4b62      	ldr	r3, [pc, #392]	@ (800b844 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b6bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6c2:	ee07 3a90 	vmov	s15, r3
 800b6c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6ca:	ed97 6a02 	vldr	s12, [r7, #8]
 800b6ce:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800b854 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b6d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b6de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6e6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800b6ea:	e087      	b.n	800b7fc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	ee07 3a90 	vmov	s15, r3
 800b6f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6f6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800b858 <HAL_RCC_GetSysClockFreq+0x2e8>
 800b6fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6fe:	4b51      	ldr	r3, [pc, #324]	@ (800b844 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b706:	ee07 3a90 	vmov	s15, r3
 800b70a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b70e:	ed97 6a02 	vldr	s12, [r7, #8]
 800b712:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800b854 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b71a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b71e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b72a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b72e:	e065      	b.n	800b7fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	ee07 3a90 	vmov	s15, r3
 800b736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b73a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800b85c <HAL_RCC_GetSysClockFreq+0x2ec>
 800b73e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b742:	4b40      	ldr	r3, [pc, #256]	@ (800b844 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b74a:	ee07 3a90 	vmov	s15, r3
 800b74e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b752:	ed97 6a02 	vldr	s12, [r7, #8]
 800b756:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800b854 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b75a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b75e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b762:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b76a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b76e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b772:	e043      	b.n	800b7fc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b774:	693b      	ldr	r3, [r7, #16]
 800b776:	ee07 3a90 	vmov	s15, r3
 800b77a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b77e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800b860 <HAL_RCC_GetSysClockFreq+0x2f0>
 800b782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b786:	4b2f      	ldr	r3, [pc, #188]	@ (800b844 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b78a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b78e:	ee07 3a90 	vmov	s15, r3
 800b792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b796:	ed97 6a02 	vldr	s12, [r7, #8]
 800b79a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800b854 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b79e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b7aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b7b6:	e021      	b.n	800b7fc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	ee07 3a90 	vmov	s15, r3
 800b7be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7c2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800b85c <HAL_RCC_GetSysClockFreq+0x2ec>
 800b7c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b7ca:	4b1e      	ldr	r3, [pc, #120]	@ (800b844 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7d2:	ee07 3a90 	vmov	s15, r3
 800b7d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7da:	ed97 6a02 	vldr	s12, [r7, #8]
 800b7de:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800b854 <HAL_RCC_GetSysClockFreq+0x2e4>
 800b7e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b7ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800b7fa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b7fc:	4b11      	ldr	r3, [pc, #68]	@ (800b844 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800b7fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b800:	0a5b      	lsrs	r3, r3, #9
 800b802:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b806:	3301      	adds	r3, #1
 800b808:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	ee07 3a90 	vmov	s15, r3
 800b810:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b814:	edd7 6a07 	vldr	s13, [r7, #28]
 800b818:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b81c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b820:	ee17 3a90 	vmov	r3, s15
 800b824:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800b826:	e005      	b.n	800b834 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800b828:	2300      	movs	r3, #0
 800b82a:	61bb      	str	r3, [r7, #24]
      break;
 800b82c:	e002      	b.n	800b834 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800b82e:	4b07      	ldr	r3, [pc, #28]	@ (800b84c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800b830:	61bb      	str	r3, [r7, #24]
      break;
 800b832:	bf00      	nop
  }

  return sysclockfreq;
 800b834:	69bb      	ldr	r3, [r7, #24]
}
 800b836:	4618      	mov	r0, r3
 800b838:	3724      	adds	r7, #36	@ 0x24
 800b83a:	46bd      	mov	sp, r7
 800b83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b840:	4770      	bx	lr
 800b842:	bf00      	nop
 800b844:	58024400 	.word	0x58024400
 800b848:	03d09000 	.word	0x03d09000
 800b84c:	003d0900 	.word	0x003d0900
 800b850:	007a1200 	.word	0x007a1200
 800b854:	46000000 	.word	0x46000000
 800b858:	4c742400 	.word	0x4c742400
 800b85c:	4a742400 	.word	0x4a742400
 800b860:	4af42400 	.word	0x4af42400

0800b864 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b082      	sub	sp, #8
 800b868:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
 800b86a:	f7ff fe81 	bl	800b570 <HAL_RCC_GetSysClockFreq>
 800b86e:	4602      	mov	r2, r0
 800b870:	4b10      	ldr	r3, [pc, #64]	@ (800b8b4 <HAL_RCC_GetHCLKFreq+0x50>)
 800b872:	699b      	ldr	r3, [r3, #24]
 800b874:	0a1b      	lsrs	r3, r3, #8
 800b876:	f003 030f 	and.w	r3, r3, #15
 800b87a:	490f      	ldr	r1, [pc, #60]	@ (800b8b8 <HAL_RCC_GetHCLKFreq+0x54>)
 800b87c:	5ccb      	ldrb	r3, [r1, r3]
 800b87e:	f003 031f 	and.w	r3, r3, #31
 800b882:	fa22 f303 	lsr.w	r3, r2, r3
 800b886:	607b      	str	r3, [r7, #4]
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
 800b888:	4b0a      	ldr	r3, [pc, #40]	@ (800b8b4 <HAL_RCC_GetHCLKFreq+0x50>)
 800b88a:	699b      	ldr	r3, [r3, #24]
 800b88c:	f003 030f 	and.w	r3, r3, #15
 800b890:	4a09      	ldr	r2, [pc, #36]	@ (800b8b8 <HAL_RCC_GetHCLKFreq+0x54>)
 800b892:	5cd3      	ldrb	r3, [r2, r3]
 800b894:	f003 031f 	and.w	r3, r3, #31
 800b898:	687a      	ldr	r2, [r7, #4]
 800b89a:	fa22 f303 	lsr.w	r3, r2, r3
 800b89e:	4a07      	ldr	r2, [pc, #28]	@ (800b8bc <HAL_RCC_GetHCLKFreq+0x58>)
 800b8a0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b8a2:	4a07      	ldr	r2, [pc, #28]	@ (800b8c0 <HAL_RCC_GetHCLKFreq+0x5c>)
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800b8a8:	4b04      	ldr	r3, [pc, #16]	@ (800b8bc <HAL_RCC_GetHCLKFreq+0x58>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3708      	adds	r7, #8
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}
 800b8b4:	58024400 	.word	0x58024400
 800b8b8:	08013b04 	.word	0x08013b04
 800b8bc:	24000008 	.word	0x24000008
 800b8c0:	24000004 	.word	0x24000004

0800b8c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
 800b8c8:	f7ff ffcc 	bl	800b864 <HAL_RCC_GetHCLKFreq>
 800b8cc:	4602      	mov	r2, r0
 800b8ce:	4b06      	ldr	r3, [pc, #24]	@ (800b8e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b8d0:	69db      	ldr	r3, [r3, #28]
 800b8d2:	091b      	lsrs	r3, r3, #4
 800b8d4:	f003 0307 	and.w	r3, r3, #7
 800b8d8:	4904      	ldr	r1, [pc, #16]	@ (800b8ec <HAL_RCC_GetPCLK1Freq+0x28>)
 800b8da:	5ccb      	ldrb	r3, [r1, r3]
 800b8dc:	f003 031f 	and.w	r3, r3, #31
 800b8e0:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	bd80      	pop	{r7, pc}
 800b8e8:	58024400 	.word	0x58024400
 800b8ec:	08013b04 	.word	0x08013b04

0800b8f0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b8f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b8f4:	b0c8      	sub	sp, #288	@ 0x120
 800b8f6:	af00      	add	r7, sp, #0
 800b8f8:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b902:	2300      	movs	r3, #0
 800b904:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b908:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b910:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800b914:	2500      	movs	r5, #0
 800b916:	ea54 0305 	orrs.w	r3, r4, r5
 800b91a:	d049      	beq.n	800b9b0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800b91c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b920:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b922:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b926:	d02f      	beq.n	800b988 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800b928:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b92c:	d828      	bhi.n	800b980 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b92e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b932:	d01a      	beq.n	800b96a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800b934:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b938:	d822      	bhi.n	800b980 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d003      	beq.n	800b946 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800b93e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b942:	d007      	beq.n	800b954 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b944:	e01c      	b.n	800b980 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b946:	4ba7      	ldr	r3, [pc, #668]	@ (800bbe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b94a:	4aa6      	ldr	r2, [pc, #664]	@ (800bbe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b94c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b950:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b952:	e01a      	b.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b954:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b958:	3308      	adds	r3, #8
 800b95a:	2102      	movs	r1, #2
 800b95c:	4618      	mov	r0, r3
 800b95e:	f002 fa6d 	bl	800de3c <RCCEx_PLL2_Config>
 800b962:	4603      	mov	r3, r0
 800b964:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b968:	e00f      	b.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b96a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b96e:	3328      	adds	r3, #40	@ 0x28
 800b970:	2102      	movs	r1, #2
 800b972:	4618      	mov	r0, r3
 800b974:	f002 fb14 	bl	800dfa0 <RCCEx_PLL3_Config>
 800b978:	4603      	mov	r3, r0
 800b97a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b97e:	e004      	b.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b980:	2301      	movs	r3, #1
 800b982:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800b986:	e000      	b.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b988:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b98a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d10a      	bne.n	800b9a8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b992:	4b94      	ldr	r3, [pc, #592]	@ (800bbe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b994:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b996:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800b99a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b99e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b9a0:	4a90      	ldr	r2, [pc, #576]	@ (800bbe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b9a2:	430b      	orrs	r3, r1
 800b9a4:	6513      	str	r3, [r2, #80]	@ 0x50
 800b9a6:	e003      	b.n	800b9b0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9a8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800b9ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b9b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800b9bc:	f04f 0900 	mov.w	r9, #0
 800b9c0:	ea58 0309 	orrs.w	r3, r8, r9
 800b9c4:	d047      	beq.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b9c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b9cc:	2b04      	cmp	r3, #4
 800b9ce:	d82a      	bhi.n	800ba26 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b9d0:	a201      	add	r2, pc, #4	@ (adr r2, 800b9d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b9d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9d6:	bf00      	nop
 800b9d8:	0800b9ed 	.word	0x0800b9ed
 800b9dc:	0800b9fb 	.word	0x0800b9fb
 800b9e0:	0800ba11 	.word	0x0800ba11
 800b9e4:	0800ba2f 	.word	0x0800ba2f
 800b9e8:	0800ba2f 	.word	0x0800ba2f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9ec:	4b7d      	ldr	r3, [pc, #500]	@ (800bbe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b9ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9f0:	4a7c      	ldr	r2, [pc, #496]	@ (800bbe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800b9f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b9f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b9f8:	e01a      	b.n	800ba30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b9fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800b9fe:	3308      	adds	r3, #8
 800ba00:	2100      	movs	r1, #0
 800ba02:	4618      	mov	r0, r3
 800ba04:	f002 fa1a 	bl	800de3c <RCCEx_PLL2_Config>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ba0e:	e00f      	b.n	800ba30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ba10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba14:	3328      	adds	r3, #40	@ 0x28
 800ba16:	2100      	movs	r1, #0
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f002 fac1 	bl	800dfa0 <RCCEx_PLL3_Config>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ba24:	e004      	b.n	800ba30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba26:	2301      	movs	r3, #1
 800ba28:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800ba2c:	e000      	b.n	800ba30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800ba2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba30:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d10a      	bne.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ba38:	4b6a      	ldr	r3, [pc, #424]	@ (800bbe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ba3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba3c:	f023 0107 	bic.w	r1, r3, #7
 800ba40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba46:	4a67      	ldr	r2, [pc, #412]	@ (800bbe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800ba48:	430b      	orrs	r3, r1
 800ba4a:	6513      	str	r3, [r2, #80]	@ 0x50
 800ba4c:	e003      	b.n	800ba56 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba4e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ba52:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

#endif /* SAI3 */

#if defined(RCC_CDCCIP1R_SAI2ASEL)
  /*---------------------------- SAI2A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2A) == RCC_PERIPHCLK_SAI2A)
 800ba56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800ba62:	f04f 0b00 	mov.w	fp, #0
 800ba66:	ea5a 030b 	orrs.w	r3, sl, fp
 800ba6a:	d054      	beq.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    switch (PeriphClkInit->Sai2AClockSelection)
 800ba6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ba70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba72:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800ba76:	d036      	beq.n	800bae6 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
 800ba78:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800ba7c:	d82f      	bhi.n	800bade <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800ba7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba82:	d032      	beq.n	800baea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800ba84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba88:	d829      	bhi.n	800bade <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800ba8a:	2bc0      	cmp	r3, #192	@ 0xc0
 800ba8c:	d02f      	beq.n	800baee <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800ba8e:	2bc0      	cmp	r3, #192	@ 0xc0
 800ba90:	d825      	bhi.n	800bade <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800ba92:	2b80      	cmp	r3, #128	@ 0x80
 800ba94:	d018      	beq.n	800bac8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 800ba96:	2b80      	cmp	r3, #128	@ 0x80
 800ba98:	d821      	bhi.n	800bade <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d002      	beq.n	800baa4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800ba9e:	2b40      	cmp	r3, #64	@ 0x40
 800baa0:	d007      	beq.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 800baa2:	e01c      	b.n	800bade <HAL_RCCEx_PeriphCLKConfig+0x1ee>
    {
      case RCC_SAI2ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2A */
        /* Enable SAI2A Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800baa4:	4b4f      	ldr	r3, [pc, #316]	@ (800bbe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800baa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baa8:	4a4e      	ldr	r2, [pc, #312]	@ (800bbe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800baaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800baae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800bab0:	e01e      	b.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2A */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bab2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bab6:	3308      	adds	r3, #8
 800bab8:	2100      	movs	r1, #0
 800baba:	4618      	mov	r0, r3
 800babc:	f002 f9be 	bl	800de3c <RCCEx_PLL2_Config>
 800bac0:	4603      	mov	r3, r0
 800bac2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800bac6:	e013      	b.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0x200>

      case RCC_SAI2ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2A */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bacc:	3328      	adds	r3, #40	@ 0x28
 800bace:	2100      	movs	r1, #0
 800bad0:	4618      	mov	r0, r3
 800bad2:	f002 fa65 	bl	800dfa0 <RCCEx_PLL3_Config>
 800bad6:	4603      	mov	r3, r0
 800bad8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2A clock source configuration done later after clock selection check */
        break;
 800badc:	e008      	b.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        /* SPDIF clock is used as source of SAI2A clock */
        /* SAI2A clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bade:	2301      	movs	r3, #1
 800bae0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bae4:	e004      	b.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800bae6:	bf00      	nop
 800bae8:	e002      	b.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800baea:	bf00      	nop
 800baec:	e000      	b.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0x200>
        break;
 800baee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800baf0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d10a      	bne.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      /* Set the source of SAI2A clock*/
      __HAL_RCC_SAI2A_CONFIG(PeriphClkInit->Sai2AClockSelection);
 800baf8:	4b3a      	ldr	r3, [pc, #232]	@ (800bbe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bafa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bafc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800bb00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bb06:	4a37      	ldr	r2, [pc, #220]	@ (800bbe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bb08:	430b      	orrs	r3, r1
 800bb0a:	6513      	str	r3, [r2, #80]	@ 0x50
 800bb0c:	e003      	b.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0x226>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb0e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bb12:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
#endif  /*SAI2A*/

#if defined(RCC_CDCCIP1R_SAI2BSEL)

  /*---------------------------- SAI2B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2B) == RCC_PERIPHCLK_SAI2B)
 800bb16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb1e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800bb22:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800bb26:	2300      	movs	r3, #0
 800bb28:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800bb2c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800bb30:	460b      	mov	r3, r1
 800bb32:	4313      	orrs	r3, r2
 800bb34:	d05c      	beq.n	800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x300>
  {
    switch (PeriphClkInit->Sai2BClockSelection)
 800bb36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bb3c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800bb40:	d03b      	beq.n	800bbba <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800bb42:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 800bb46:	d834      	bhi.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800bb48:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bb4c:	d037      	beq.n	800bbbe <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800bb4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bb52:	d82e      	bhi.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800bb54:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800bb58:	d033      	beq.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800bb5a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800bb5e:	d828      	bhi.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800bb60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bb64:	d01a      	beq.n	800bb9c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
 800bb66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800bb6a:	d822      	bhi.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d003      	beq.n	800bb78 <HAL_RCCEx_PeriphCLKConfig+0x288>
 800bb70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bb74:	d007      	beq.n	800bb86 <HAL_RCCEx_PeriphCLKConfig+0x296>
 800bb76:	e01c      	b.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      case RCC_SAI2BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2B */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb78:	4b1a      	ldr	r3, [pc, #104]	@ (800bbe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bb7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb7c:	4a19      	ldr	r2, [pc, #100]	@ (800bbe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bb7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bb82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800bb84:	e01e      	b.n	800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2B */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bb8a:	3308      	adds	r3, #8
 800bb8c:	2100      	movs	r1, #0
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f002 f954 	bl	800de3c <RCCEx_PLL2_Config>
 800bb94:	4603      	mov	r3, r0
 800bb96:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800bb9a:	e013      	b.n	800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>

      case RCC_SAI2BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2B */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bb9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bba0:	3328      	adds	r3, #40	@ 0x28
 800bba2:	2100      	movs	r1, #0
 800bba4:	4618      	mov	r0, r3
 800bba6:	f002 f9fb 	bl	800dfa0 <RCCEx_PLL3_Config>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SAI2B clock source configuration done later after clock selection check */
        break;
 800bbb0:	e008      	b.n	800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        /* SPDIF clock is used as source of SAI2B clock */
        /* SAI2B clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bbb8:	e004      	b.n	800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800bbba:	bf00      	nop
 800bbbc:	e002      	b.n	800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800bbbe:	bf00      	nop
 800bbc0:	e000      	b.n	800bbc4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        break;
 800bbc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbc4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d10d      	bne.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI2B clock*/
      __HAL_RCC_SAI2B_CONFIG(PeriphClkInit->Sai2BClockSelection);
 800bbcc:	4b05      	ldr	r3, [pc, #20]	@ (800bbe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bbce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbd0:	f423 6160 	bic.w	r1, r3, #3584	@ 0xe00
 800bbd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800bbda:	4a02      	ldr	r2, [pc, #8]	@ (800bbe4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800bbdc:	430b      	orrs	r3, r1
 800bbde:	6513      	str	r3, [r2, #80]	@ 0x50
 800bbe0:	e006      	b.n	800bbf0 <HAL_RCCEx_PeriphCLKConfig+0x300>
 800bbe2:	bf00      	nop
 800bbe4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbe8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bbec:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800bbf0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800bbfc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800bc00:	2300      	movs	r3, #0
 800bc02:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800bc06:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800bc0a:	460b      	mov	r3, r1
 800bc0c:	4313      	orrs	r3, r2
 800bc0e:	d03a      	beq.n	800bc86 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800bc10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc16:	2b30      	cmp	r3, #48	@ 0x30
 800bc18:	d01f      	beq.n	800bc5a <HAL_RCCEx_PeriphCLKConfig+0x36a>
 800bc1a:	2b30      	cmp	r3, #48	@ 0x30
 800bc1c:	d819      	bhi.n	800bc52 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800bc1e:	2b20      	cmp	r3, #32
 800bc20:	d00c      	beq.n	800bc3c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800bc22:	2b20      	cmp	r3, #32
 800bc24:	d815      	bhi.n	800bc52 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d019      	beq.n	800bc5e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800bc2a:	2b10      	cmp	r3, #16
 800bc2c:	d111      	bne.n	800bc52 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc2e:	4bae      	ldr	r3, [pc, #696]	@ (800bee8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc32:	4aad      	ldr	r2, [pc, #692]	@ (800bee8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bc38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800bc3a:	e011      	b.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x370>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bc3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc40:	3308      	adds	r3, #8
 800bc42:	2102      	movs	r1, #2
 800bc44:	4618      	mov	r0, r3
 800bc46:	f002 f8f9 	bl	800de3c <RCCEx_PLL2_Config>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800bc50:	e006      	b.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x370>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bc52:	2301      	movs	r3, #1
 800bc54:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bc58:	e002      	b.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800bc5a:	bf00      	nop
 800bc5c:	e000      	b.n	800bc60 <HAL_RCCEx_PeriphCLKConfig+0x370>
        break;
 800bc5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc60:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d10a      	bne.n	800bc7e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800bc68:	4b9f      	ldr	r3, [pc, #636]	@ (800bee8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc6c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800bc70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc76:	4a9c      	ldr	r2, [pc, #624]	@ (800bee8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bc78:	430b      	orrs	r3, r1
 800bc7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800bc7c:	e003      	b.n	800bc86 <HAL_RCCEx_PeriphCLKConfig+0x396>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc7e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bc82:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bc86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bc8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc8e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800bc92:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800bc96:	2300      	movs	r3, #0
 800bc98:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800bc9c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800bca0:	460b      	mov	r3, r1
 800bca2:	4313      	orrs	r3, r2
 800bca4:	d051      	beq.n	800bd4a <HAL_RCCEx_PeriphCLKConfig+0x45a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800bca6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bcac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bcb0:	d035      	beq.n	800bd1e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800bcb2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bcb6:	d82e      	bhi.n	800bd16 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800bcb8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bcbc:	d031      	beq.n	800bd22 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800bcbe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bcc2:	d828      	bhi.n	800bd16 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800bcc4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bcc8:	d01a      	beq.n	800bd00 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800bcca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bcce:	d822      	bhi.n	800bd16 <HAL_RCCEx_PeriphCLKConfig+0x426>
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d003      	beq.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800bcd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bcd8:	d007      	beq.n	800bcea <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800bcda:	e01c      	b.n	800bd16 <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bcdc:	4b82      	ldr	r3, [pc, #520]	@ (800bee8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bcde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bce0:	4a81      	ldr	r2, [pc, #516]	@ (800bee8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bce2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bce6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bce8:	e01c      	b.n	800bd24 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bcea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bcee:	3308      	adds	r3, #8
 800bcf0:	2100      	movs	r1, #0
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f002 f8a2 	bl	800de3c <RCCEx_PLL2_Config>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bcfe:	e011      	b.n	800bd24 <HAL_RCCEx_PeriphCLKConfig+0x434>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bd00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd04:	3328      	adds	r3, #40	@ 0x28
 800bd06:	2100      	movs	r1, #0
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f002 f949 	bl	800dfa0 <RCCEx_PLL3_Config>
 800bd0e:	4603      	mov	r3, r0
 800bd10:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800bd14:	e006      	b.n	800bd24 <HAL_RCCEx_PeriphCLKConfig+0x434>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd16:	2301      	movs	r3, #1
 800bd18:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bd1c:	e002      	b.n	800bd24 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800bd1e:	bf00      	nop
 800bd20:	e000      	b.n	800bd24 <HAL_RCCEx_PeriphCLKConfig+0x434>
        break;
 800bd22:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd24:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d10a      	bne.n	800bd42 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bd2c:	4b6e      	ldr	r3, [pc, #440]	@ (800bee8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bd30:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800bd34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800bd3a:	4a6b      	ldr	r2, [pc, #428]	@ (800bee8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bd3c:	430b      	orrs	r3, r1
 800bd3e:	6513      	str	r3, [r2, #80]	@ 0x50
 800bd40:	e003      	b.n	800bd4a <HAL_RCCEx_PeriphCLKConfig+0x45a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd42:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bd46:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bd4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd52:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800bd56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800bd60:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800bd64:	460b      	mov	r3, r1
 800bd66:	4313      	orrs	r3, r2
 800bd68:	d053      	beq.n	800be12 <HAL_RCCEx_PeriphCLKConfig+0x522>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800bd6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bd6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800bd70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bd74:	d033      	beq.n	800bdde <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800bd76:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bd7a:	d82c      	bhi.n	800bdd6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bd7c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bd80:	d02f      	beq.n	800bde2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800bd82:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bd86:	d826      	bhi.n	800bdd6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bd88:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bd8c:	d02b      	beq.n	800bde6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800bd8e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800bd92:	d820      	bhi.n	800bdd6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bd94:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bd98:	d012      	beq.n	800bdc0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
 800bd9a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bd9e:	d81a      	bhi.n	800bdd6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d022      	beq.n	800bdea <HAL_RCCEx_PeriphCLKConfig+0x4fa>
 800bda4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bda8:	d115      	bne.n	800bdd6 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bdaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bdae:	3308      	adds	r3, #8
 800bdb0:	2101      	movs	r1, #1
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f002 f842 	bl	800de3c <RCCEx_PLL2_Config>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bdbe:	e015      	b.n	800bdec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bdc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bdc4:	3328      	adds	r3, #40	@ 0x28
 800bdc6:	2101      	movs	r1, #1
 800bdc8:	4618      	mov	r0, r3
 800bdca:	f002 f8e9 	bl	800dfa0 <RCCEx_PLL3_Config>
 800bdce:	4603      	mov	r3, r0
 800bdd0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800bdd4:	e00a      	b.n	800bdec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bdd6:	2301      	movs	r3, #1
 800bdd8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bddc:	e006      	b.n	800bdec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bdde:	bf00      	nop
 800bde0:	e004      	b.n	800bdec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bde2:	bf00      	nop
 800bde4:	e002      	b.n	800bdec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bde6:	bf00      	nop
 800bde8:	e000      	b.n	800bdec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
        break;
 800bdea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bdec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d10a      	bne.n	800be0a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800bdf4:	4b3c      	ldr	r3, [pc, #240]	@ (800bee8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bdf6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bdf8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800bdfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be00:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800be02:	4a39      	ldr	r2, [pc, #228]	@ (800bee8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800be04:	430b      	orrs	r3, r1
 800be06:	6513      	str	r3, [r2, #80]	@ 0x50
 800be08:	e003      	b.n	800be12 <HAL_RCCEx_PeriphCLKConfig+0x522>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be0a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800be0e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800be12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be1a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800be1e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800be22:	2300      	movs	r3, #0
 800be24:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800be28:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800be2c:	460b      	mov	r3, r1
 800be2e:	4313      	orrs	r3, r2
 800be30:	d060      	beq.n	800bef4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800be32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800be3a:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800be3e:	d039      	beq.n	800beb4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800be40:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800be44:	d832      	bhi.n	800beac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800be46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800be4a:	d035      	beq.n	800beb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800be4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800be50:	d82c      	bhi.n	800beac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800be52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be56:	d031      	beq.n	800bebc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800be58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800be5c:	d826      	bhi.n	800beac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800be5e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800be62:	d02d      	beq.n	800bec0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800be64:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800be68:	d820      	bhi.n	800beac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800be6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800be6e:	d012      	beq.n	800be96 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800be70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800be74:	d81a      	bhi.n	800beac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800be76:	2b00      	cmp	r3, #0
 800be78:	d024      	beq.n	800bec4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800be7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800be7e:	d115      	bne.n	800beac <HAL_RCCEx_PeriphCLKConfig+0x5bc>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800be80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be84:	3308      	adds	r3, #8
 800be86:	2101      	movs	r1, #1
 800be88:	4618      	mov	r0, r3
 800be8a:	f001 ffd7 	bl	800de3c <RCCEx_PLL2_Config>
 800be8e:	4603      	mov	r3, r0
 800be90:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800be94:	e017      	b.n	800bec6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800be96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800be9a:	3328      	adds	r3, #40	@ 0x28
 800be9c:	2101      	movs	r1, #1
 800be9e:	4618      	mov	r0, r3
 800bea0:	f002 f87e 	bl	800dfa0 <RCCEx_PLL3_Config>
 800bea4:	4603      	mov	r3, r0
 800bea6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800beaa:	e00c      	b.n	800bec6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800beac:	2301      	movs	r3, #1
 800beae:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800beb2:	e008      	b.n	800bec6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800beb4:	bf00      	nop
 800beb6:	e006      	b.n	800bec6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800beb8:	bf00      	nop
 800beba:	e004      	b.n	800bec6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bebc:	bf00      	nop
 800bebe:	e002      	b.n	800bec6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bec0:	bf00      	nop
 800bec2:	e000      	b.n	800bec6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800bec4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bec6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800beca:	2b00      	cmp	r3, #0
 800becc:	d10e      	bne.n	800beec <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800bece:	4b06      	ldr	r3, [pc, #24]	@ (800bee8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bed0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bed2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800bed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800beda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bede:	4a02      	ldr	r2, [pc, #8]	@ (800bee8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800bee0:	430b      	orrs	r3, r1
 800bee2:	6593      	str	r3, [r2, #88]	@ 0x58
 800bee4:	e006      	b.n	800bef4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800bee6:	bf00      	nop
 800bee8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800beec:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bef0:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bef4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800bf00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bf04:	2300      	movs	r3, #0
 800bf06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800bf0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800bf0e:	460b      	mov	r3, r1
 800bf10:	4313      	orrs	r3, r2
 800bf12:	d037      	beq.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800bf14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bf1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bf1e:	d00e      	beq.n	800bf3e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800bf20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bf24:	d816      	bhi.n	800bf54 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d018      	beq.n	800bf5c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800bf2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bf2e:	d111      	bne.n	800bf54 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf30:	4bc4      	ldr	r3, [pc, #784]	@ (800c244 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf34:	4ac3      	ldr	r2, [pc, #780]	@ (800c244 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bf3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bf3c:	e00f      	b.n	800bf5e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bf3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf42:	3308      	adds	r3, #8
 800bf44:	2101      	movs	r1, #1
 800bf46:	4618      	mov	r0, r3
 800bf48:	f001 ff78 	bl	800de3c <RCCEx_PLL2_Config>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800bf52:	e004      	b.n	800bf5e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf54:	2301      	movs	r3, #1
 800bf56:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bf5a:	e000      	b.n	800bf5e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 800bf5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf5e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d10a      	bne.n	800bf7c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bf66:	4bb7      	ldr	r3, [pc, #732]	@ (800c244 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf6a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800bf6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bf74:	4ab3      	ldr	r2, [pc, #716]	@ (800c244 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bf76:	430b      	orrs	r3, r1
 800bf78:	6513      	str	r3, [r2, #80]	@ 0x50
 800bf7a:	e003      	b.n	800bf84 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf7c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bf80:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bf84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bf88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf8c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800bf90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800bf94:	2300      	movs	r3, #0
 800bf96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bf9a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800bf9e:	460b      	mov	r3, r1
 800bfa0:	4313      	orrs	r3, r2
 800bfa2:	d039      	beq.n	800c018 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800bfa4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bfa8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800bfaa:	2b03      	cmp	r3, #3
 800bfac:	d81c      	bhi.n	800bfe8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 800bfae:	a201      	add	r2, pc, #4	@ (adr r2, 800bfb4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800bfb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfb4:	0800bff1 	.word	0x0800bff1
 800bfb8:	0800bfc5 	.word	0x0800bfc5
 800bfbc:	0800bfd3 	.word	0x0800bfd3
 800bfc0:	0800bff1 	.word	0x0800bff1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bfc4:	4b9f      	ldr	r3, [pc, #636]	@ (800c244 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfc8:	4a9e      	ldr	r2, [pc, #632]	@ (800c244 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bfca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bfce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bfd0:	e00f      	b.n	800bff2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bfd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800bfd6:	3308      	adds	r3, #8
 800bfd8:	2102      	movs	r1, #2
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f001 ff2e 	bl	800de3c <RCCEx_PLL2_Config>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800bfe6:	e004      	b.n	800bff2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800bfe8:	2301      	movs	r3, #1
 800bfea:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800bfee:	e000      	b.n	800bff2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 800bff0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bff2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d10a      	bne.n	800c010 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800bffa:	4b92      	ldr	r3, [pc, #584]	@ (800c244 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800bffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bffe:	f023 0103 	bic.w	r1, r3, #3
 800c002:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c006:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c008:	4a8e      	ldr	r2, [pc, #568]	@ (800c244 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c00a:	430b      	orrs	r3, r1
 800c00c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c00e:	e003      	b.n	800c018 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c010:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c014:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c018:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c020:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800c024:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c028:	2300      	movs	r3, #0
 800c02a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800c02e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800c032:	460b      	mov	r3, r1
 800c034:	4313      	orrs	r3, r2
 800c036:	f000 8099 	beq.w	800c16c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c03a:	4b83      	ldr	r3, [pc, #524]	@ (800c248 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	4a82      	ldr	r2, [pc, #520]	@ (800c248 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c040:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c044:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c046:	f7f7 f8a9 	bl	800319c <HAL_GetTick>
 800c04a:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c04e:	e00b      	b.n	800c068 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c050:	f7f7 f8a4 	bl	800319c <HAL_GetTick>
 800c054:	4602      	mov	r2, r0
 800c056:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c05a:	1ad3      	subs	r3, r2, r3
 800c05c:	2b64      	cmp	r3, #100	@ 0x64
 800c05e:	d903      	bls.n	800c068 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800c060:	2303      	movs	r3, #3
 800c062:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c066:	e005      	b.n	800c074 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c068:	4b77      	ldr	r3, [pc, #476]	@ (800c248 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c070:	2b00      	cmp	r3, #0
 800c072:	d0ed      	beq.n	800c050 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 800c074:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d173      	bne.n	800c164 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c07c:	4b71      	ldr	r3, [pc, #452]	@ (800c244 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c07e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c080:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c084:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c088:	4053      	eors	r3, r2
 800c08a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d015      	beq.n	800c0be <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c092:	4b6c      	ldr	r3, [pc, #432]	@ (800c244 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c096:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c09a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c09e:	4b69      	ldr	r3, [pc, #420]	@ (800c244 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c0a2:	4a68      	ldr	r2, [pc, #416]	@ (800c244 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c0a8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c0aa:	4b66      	ldr	r3, [pc, #408]	@ (800c244 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c0ae:	4a65      	ldr	r2, [pc, #404]	@ (800c244 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c0b4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c0b6:	4a63      	ldr	r2, [pc, #396]	@ (800c244 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800c0bc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c0be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c0c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c0c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c0ca:	d118      	bne.n	800c0fe <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0cc:	f7f7 f866 	bl	800319c <HAL_GetTick>
 800c0d0:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c0d4:	e00d      	b.n	800c0f2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c0d6:	f7f7 f861 	bl	800319c <HAL_GetTick>
 800c0da:	4602      	mov	r2, r0
 800c0dc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800c0e0:	1ad2      	subs	r2, r2, r3
 800c0e2:	f241 3388 	movw	r3, #5000	@ 0x1388
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d903      	bls.n	800c0f2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 800c0ea:	2303      	movs	r3, #3
 800c0ec:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
            break;
 800c0f0:	e005      	b.n	800c0fe <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c0f2:	4b54      	ldr	r3, [pc, #336]	@ (800c244 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c0f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c0f6:	f003 0302 	and.w	r3, r3, #2
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d0eb      	beq.n	800c0d6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 800c0fe:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c102:	2b00      	cmp	r3, #0
 800c104:	d129      	bne.n	800c15a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c106:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c10a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c10e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c112:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c116:	d10e      	bne.n	800c136 <HAL_RCCEx_PeriphCLKConfig+0x846>
 800c118:	4b4a      	ldr	r3, [pc, #296]	@ (800c244 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c11a:	691b      	ldr	r3, [r3, #16]
 800c11c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800c120:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c124:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c128:	091a      	lsrs	r2, r3, #4
 800c12a:	4b48      	ldr	r3, [pc, #288]	@ (800c24c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800c12c:	4013      	ands	r3, r2
 800c12e:	4a45      	ldr	r2, [pc, #276]	@ (800c244 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c130:	430b      	orrs	r3, r1
 800c132:	6113      	str	r3, [r2, #16]
 800c134:	e005      	b.n	800c142 <HAL_RCCEx_PeriphCLKConfig+0x852>
 800c136:	4b43      	ldr	r3, [pc, #268]	@ (800c244 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c138:	691b      	ldr	r3, [r3, #16]
 800c13a:	4a42      	ldr	r2, [pc, #264]	@ (800c244 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c13c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800c140:	6113      	str	r3, [r2, #16]
 800c142:	4b40      	ldr	r3, [pc, #256]	@ (800c244 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c144:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800c146:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c14a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800c14e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c152:	4a3c      	ldr	r2, [pc, #240]	@ (800c244 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800c154:	430b      	orrs	r3, r1
 800c156:	6713      	str	r3, [r2, #112]	@ 0x70
 800c158:	e008      	b.n	800c16c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c15a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c15e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
 800c162:	e003      	b.n	800c16c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c164:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c168:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c16c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c174:	f002 0301 	and.w	r3, r2, #1
 800c178:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c17c:	2300      	movs	r3, #0
 800c17e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c182:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800c186:	460b      	mov	r3, r1
 800c188:	4313      	orrs	r3, r2
 800c18a:	f000 8090 	beq.w	800c2ae <HAL_RCCEx_PeriphCLKConfig+0x9be>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800c18e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c192:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c196:	2b28      	cmp	r3, #40	@ 0x28
 800c198:	d870      	bhi.n	800c27c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 800c19a:	a201      	add	r2, pc, #4	@ (adr r2, 800c1a0 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 800c19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1a0:	0800c285 	.word	0x0800c285
 800c1a4:	0800c27d 	.word	0x0800c27d
 800c1a8:	0800c27d 	.word	0x0800c27d
 800c1ac:	0800c27d 	.word	0x0800c27d
 800c1b0:	0800c27d 	.word	0x0800c27d
 800c1b4:	0800c27d 	.word	0x0800c27d
 800c1b8:	0800c27d 	.word	0x0800c27d
 800c1bc:	0800c27d 	.word	0x0800c27d
 800c1c0:	0800c251 	.word	0x0800c251
 800c1c4:	0800c27d 	.word	0x0800c27d
 800c1c8:	0800c27d 	.word	0x0800c27d
 800c1cc:	0800c27d 	.word	0x0800c27d
 800c1d0:	0800c27d 	.word	0x0800c27d
 800c1d4:	0800c27d 	.word	0x0800c27d
 800c1d8:	0800c27d 	.word	0x0800c27d
 800c1dc:	0800c27d 	.word	0x0800c27d
 800c1e0:	0800c267 	.word	0x0800c267
 800c1e4:	0800c27d 	.word	0x0800c27d
 800c1e8:	0800c27d 	.word	0x0800c27d
 800c1ec:	0800c27d 	.word	0x0800c27d
 800c1f0:	0800c27d 	.word	0x0800c27d
 800c1f4:	0800c27d 	.word	0x0800c27d
 800c1f8:	0800c27d 	.word	0x0800c27d
 800c1fc:	0800c27d 	.word	0x0800c27d
 800c200:	0800c285 	.word	0x0800c285
 800c204:	0800c27d 	.word	0x0800c27d
 800c208:	0800c27d 	.word	0x0800c27d
 800c20c:	0800c27d 	.word	0x0800c27d
 800c210:	0800c27d 	.word	0x0800c27d
 800c214:	0800c27d 	.word	0x0800c27d
 800c218:	0800c27d 	.word	0x0800c27d
 800c21c:	0800c27d 	.word	0x0800c27d
 800c220:	0800c285 	.word	0x0800c285
 800c224:	0800c27d 	.word	0x0800c27d
 800c228:	0800c27d 	.word	0x0800c27d
 800c22c:	0800c27d 	.word	0x0800c27d
 800c230:	0800c27d 	.word	0x0800c27d
 800c234:	0800c27d 	.word	0x0800c27d
 800c238:	0800c27d 	.word	0x0800c27d
 800c23c:	0800c27d 	.word	0x0800c27d
 800c240:	0800c285 	.word	0x0800c285
 800c244:	58024400 	.word	0x58024400
 800c248:	58024800 	.word	0x58024800
 800c24c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c250:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c254:	3308      	adds	r3, #8
 800c256:	2101      	movs	r1, #1
 800c258:	4618      	mov	r0, r3
 800c25a:	f001 fdef 	bl	800de3c <RCCEx_PLL2_Config>
 800c25e:	4603      	mov	r3, r0
 800c260:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c264:	e00f      	b.n	800c286 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c266:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c26a:	3328      	adds	r3, #40	@ 0x28
 800c26c:	2101      	movs	r1, #1
 800c26e:	4618      	mov	r0, r3
 800c270:	f001 fe96 	bl	800dfa0 <RCCEx_PLL3_Config>
 800c274:	4603      	mov	r3, r0
 800c276:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800c27a:	e004      	b.n	800c286 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c27c:	2301      	movs	r3, #1
 800c27e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c282:	e000      	b.n	800c286 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800c284:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c286:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d10b      	bne.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0x9b6>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c28e:	4bc0      	ldr	r3, [pc, #768]	@ (800c590 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c292:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800c296:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c29a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c29e:	4abc      	ldr	r2, [pc, #752]	@ (800c590 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c2a0:	430b      	orrs	r3, r1
 800c2a2:	6553      	str	r3, [r2, #84]	@ 0x54
 800c2a4:	e003      	b.n	800c2ae <HAL_RCCEx_PeriphCLKConfig+0x9be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2a6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c2aa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c2ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b6:	f002 0302 	and.w	r3, r2, #2
 800c2ba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c2be:	2300      	movs	r3, #0
 800c2c0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800c2c4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800c2c8:	460b      	mov	r3, r1
 800c2ca:	4313      	orrs	r3, r2
 800c2cc:	d043      	beq.n	800c356 <HAL_RCCEx_PeriphCLKConfig+0xa66>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c2ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c2d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c2d6:	2b05      	cmp	r3, #5
 800c2d8:	d824      	bhi.n	800c324 <HAL_RCCEx_PeriphCLKConfig+0xa34>
 800c2da:	a201      	add	r2, pc, #4	@ (adr r2, 800c2e0 <HAL_RCCEx_PeriphCLKConfig+0x9f0>)
 800c2dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2e0:	0800c32d 	.word	0x0800c32d
 800c2e4:	0800c2f9 	.word	0x0800c2f9
 800c2e8:	0800c30f 	.word	0x0800c30f
 800c2ec:	0800c32d 	.word	0x0800c32d
 800c2f0:	0800c32d 	.word	0x0800c32d
 800c2f4:	0800c32d 	.word	0x0800c32d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c2f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c2fc:	3308      	adds	r3, #8
 800c2fe:	2101      	movs	r1, #1
 800c300:	4618      	mov	r0, r3
 800c302:	f001 fd9b 	bl	800de3c <RCCEx_PLL2_Config>
 800c306:	4603      	mov	r3, r0
 800c308:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c30c:	e00f      	b.n	800c32e <HAL_RCCEx_PeriphCLKConfig+0xa3e>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c30e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c312:	3328      	adds	r3, #40	@ 0x28
 800c314:	2101      	movs	r1, #1
 800c316:	4618      	mov	r0, r3
 800c318:	f001 fe42 	bl	800dfa0 <RCCEx_PLL3_Config>
 800c31c:	4603      	mov	r3, r0
 800c31e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800c322:	e004      	b.n	800c32e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c324:	2301      	movs	r3, #1
 800c326:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c32a:	e000      	b.n	800c32e <HAL_RCCEx_PeriphCLKConfig+0xa3e>
        break;
 800c32c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c32e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c332:	2b00      	cmp	r3, #0
 800c334:	d10b      	bne.n	800c34e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c336:	4b96      	ldr	r3, [pc, #600]	@ (800c590 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c33a:	f023 0107 	bic.w	r1, r3, #7
 800c33e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c342:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c346:	4a92      	ldr	r2, [pc, #584]	@ (800c590 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c348:	430b      	orrs	r3, r1
 800c34a:	6553      	str	r3, [r2, #84]	@ 0x54
 800c34c:	e003      	b.n	800c356 <HAL_RCCEx_PeriphCLKConfig+0xa66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c34e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c352:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c356:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c35e:	f002 0304 	and.w	r3, r2, #4
 800c362:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c366:	2300      	movs	r3, #0
 800c368:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c36c:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800c370:	460b      	mov	r3, r1
 800c372:	4313      	orrs	r3, r2
 800c374:	d043      	beq.n	800c3fe <HAL_RCCEx_PeriphCLKConfig+0xb0e>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c376:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c37a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c37e:	2b05      	cmp	r3, #5
 800c380:	d824      	bhi.n	800c3cc <HAL_RCCEx_PeriphCLKConfig+0xadc>
 800c382:	a201      	add	r2, pc, #4	@ (adr r2, 800c388 <HAL_RCCEx_PeriphCLKConfig+0xa98>)
 800c384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c388:	0800c3d5 	.word	0x0800c3d5
 800c38c:	0800c3a1 	.word	0x0800c3a1
 800c390:	0800c3b7 	.word	0x0800c3b7
 800c394:	0800c3d5 	.word	0x0800c3d5
 800c398:	0800c3d5 	.word	0x0800c3d5
 800c39c:	0800c3d5 	.word	0x0800c3d5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c3a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3a4:	3308      	adds	r3, #8
 800c3a6:	2101      	movs	r1, #1
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f001 fd47 	bl	800de3c <RCCEx_PLL2_Config>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c3b4:	e00f      	b.n	800c3d6 <HAL_RCCEx_PeriphCLKConfig+0xae6>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c3b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3ba:	3328      	adds	r3, #40	@ 0x28
 800c3bc:	2101      	movs	r1, #1
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f001 fdee 	bl	800dfa0 <RCCEx_PLL3_Config>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800c3ca:	e004      	b.n	800c3d6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c3d2:	e000      	b.n	800c3d6 <HAL_RCCEx_PeriphCLKConfig+0xae6>
        break;
 800c3d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c3d6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d10b      	bne.n	800c3f6 <HAL_RCCEx_PeriphCLKConfig+0xb06>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c3de:	4b6c      	ldr	r3, [pc, #432]	@ (800c590 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c3e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c3e2:	f023 0107 	bic.w	r1, r3, #7
 800c3e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c3ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800c3ee:	4a68      	ldr	r2, [pc, #416]	@ (800c590 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c3f0:	430b      	orrs	r3, r1
 800c3f2:	6593      	str	r3, [r2, #88]	@ 0x58
 800c3f4:	e003      	b.n	800c3fe <HAL_RCCEx_PeriphCLKConfig+0xb0e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3f6:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c3fa:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c3fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c406:	f002 0320 	and.w	r3, r2, #32
 800c40a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800c40e:	2300      	movs	r3, #0
 800c410:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c414:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800c418:	460b      	mov	r3, r1
 800c41a:	4313      	orrs	r3, r2
 800c41c:	d055      	beq.n	800c4ca <HAL_RCCEx_PeriphCLKConfig+0xbda>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c41e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c422:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c426:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c42a:	d033      	beq.n	800c494 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800c42c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c430:	d82c      	bhi.n	800c48c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c432:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c436:	d02f      	beq.n	800c498 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 800c438:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c43c:	d826      	bhi.n	800c48c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c43e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c442:	d02b      	beq.n	800c49c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800c444:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c448:	d820      	bhi.n	800c48c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c44a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c44e:	d012      	beq.n	800c476 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800c450:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c454:	d81a      	bhi.n	800c48c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
 800c456:	2b00      	cmp	r3, #0
 800c458:	d022      	beq.n	800c4a0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 800c45a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c45e:	d115      	bne.n	800c48c <HAL_RCCEx_PeriphCLKConfig+0xb9c>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c460:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c464:	3308      	adds	r3, #8
 800c466:	2100      	movs	r1, #0
 800c468:	4618      	mov	r0, r3
 800c46a:	f001 fce7 	bl	800de3c <RCCEx_PLL2_Config>
 800c46e:	4603      	mov	r3, r0
 800c470:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c474:	e015      	b.n	800c4a2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c476:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c47a:	3328      	adds	r3, #40	@ 0x28
 800c47c:	2102      	movs	r1, #2
 800c47e:	4618      	mov	r0, r3
 800c480:	f001 fd8e 	bl	800dfa0 <RCCEx_PLL3_Config>
 800c484:	4603      	mov	r3, r0
 800c486:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800c48a:	e00a      	b.n	800c4a2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c48c:	2301      	movs	r3, #1
 800c48e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c492:	e006      	b.n	800c4a2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c494:	bf00      	nop
 800c496:	e004      	b.n	800c4a2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c498:	bf00      	nop
 800c49a:	e002      	b.n	800c4a2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c49c:	bf00      	nop
 800c49e:	e000      	b.n	800c4a2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
        break;
 800c4a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c4a2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d10b      	bne.n	800c4c2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c4aa:	4b39      	ldr	r3, [pc, #228]	@ (800c590 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c4ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4ae:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800c4b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800c4ba:	4a35      	ldr	r2, [pc, #212]	@ (800c590 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c4bc:	430b      	orrs	r3, r1
 800c4be:	6553      	str	r3, [r2, #84]	@ 0x54
 800c4c0:	e003      	b.n	800c4ca <HAL_RCCEx_PeriphCLKConfig+0xbda>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4c2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c4c6:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c4ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4d2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800c4d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800c4da:	2300      	movs	r3, #0
 800c4dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800c4e0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800c4e4:	460b      	mov	r3, r1
 800c4e6:	4313      	orrs	r3, r2
 800c4e8:	d058      	beq.n	800c59c <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c4ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c4ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c4f2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c4f6:	d033      	beq.n	800c560 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800c4f8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800c4fc:	d82c      	bhi.n	800c558 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c4fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c502:	d02f      	beq.n	800c564 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 800c504:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c508:	d826      	bhi.n	800c558 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c50a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c50e:	d02b      	beq.n	800c568 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800c510:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c514:	d820      	bhi.n	800c558 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c516:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c51a:	d012      	beq.n	800c542 <HAL_RCCEx_PeriphCLKConfig+0xc52>
 800c51c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c520:	d81a      	bhi.n	800c558 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 800c522:	2b00      	cmp	r3, #0
 800c524:	d022      	beq.n	800c56c <HAL_RCCEx_PeriphCLKConfig+0xc7c>
 800c526:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c52a:	d115      	bne.n	800c558 <HAL_RCCEx_PeriphCLKConfig+0xc68>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c52c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c530:	3308      	adds	r3, #8
 800c532:	2100      	movs	r1, #0
 800c534:	4618      	mov	r0, r3
 800c536:	f001 fc81 	bl	800de3c <RCCEx_PLL2_Config>
 800c53a:	4603      	mov	r3, r0
 800c53c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c540:	e015      	b.n	800c56e <HAL_RCCEx_PeriphCLKConfig+0xc7e>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c542:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c546:	3328      	adds	r3, #40	@ 0x28
 800c548:	2102      	movs	r1, #2
 800c54a:	4618      	mov	r0, r3
 800c54c:	f001 fd28 	bl	800dfa0 <RCCEx_PLL3_Config>
 800c550:	4603      	mov	r3, r0
 800c552:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800c556:	e00a      	b.n	800c56e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c558:	2301      	movs	r3, #1
 800c55a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c55e:	e006      	b.n	800c56e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c560:	bf00      	nop
 800c562:	e004      	b.n	800c56e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c564:	bf00      	nop
 800c566:	e002      	b.n	800c56e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c568:	bf00      	nop
 800c56a:	e000      	b.n	800c56e <HAL_RCCEx_PeriphCLKConfig+0xc7e>
        break;
 800c56c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c56e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c572:	2b00      	cmp	r3, #0
 800c574:	d10e      	bne.n	800c594 <HAL_RCCEx_PeriphCLKConfig+0xca4>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c576:	4b06      	ldr	r3, [pc, #24]	@ (800c590 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c578:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c57a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800c57e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c582:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800c586:	4a02      	ldr	r2, [pc, #8]	@ (800c590 <HAL_RCCEx_PeriphCLKConfig+0xca0>)
 800c588:	430b      	orrs	r3, r1
 800c58a:	6593      	str	r3, [r2, #88]	@ 0x58
 800c58c:	e006      	b.n	800c59c <HAL_RCCEx_PeriphCLKConfig+0xcac>
 800c58e:	bf00      	nop
 800c590:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c594:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c598:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c59c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800c5a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800c5b2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800c5b6:	460b      	mov	r3, r1
 800c5b8:	4313      	orrs	r3, r2
 800c5ba:	d055      	beq.n	800c668 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c5bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c5c0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c5c4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c5c8:	d033      	beq.n	800c632 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800c5ca:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800c5ce:	d82c      	bhi.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c5d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c5d4:	d02f      	beq.n	800c636 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800c5d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c5da:	d826      	bhi.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c5dc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c5e0:	d02b      	beq.n	800c63a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800c5e2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c5e6:	d820      	bhi.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c5e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c5ec:	d012      	beq.n	800c614 <HAL_RCCEx_PeriphCLKConfig+0xd24>
 800c5ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c5f2:	d81a      	bhi.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d022      	beq.n	800c63e <HAL_RCCEx_PeriphCLKConfig+0xd4e>
 800c5f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c5fc:	d115      	bne.n	800c62a <HAL_RCCEx_PeriphCLKConfig+0xd3a>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c5fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c602:	3308      	adds	r3, #8
 800c604:	2100      	movs	r1, #0
 800c606:	4618      	mov	r0, r3
 800c608:	f001 fc18 	bl	800de3c <RCCEx_PLL2_Config>
 800c60c:	4603      	mov	r3, r0
 800c60e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c612:	e015      	b.n	800c640 <HAL_RCCEx_PeriphCLKConfig+0xd50>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c614:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c618:	3328      	adds	r3, #40	@ 0x28
 800c61a:	2102      	movs	r1, #2
 800c61c:	4618      	mov	r0, r3
 800c61e:	f001 fcbf 	bl	800dfa0 <RCCEx_PLL3_Config>
 800c622:	4603      	mov	r3, r0
 800c624:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800c628:	e00a      	b.n	800c640 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c62a:	2301      	movs	r3, #1
 800c62c:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c630:	e006      	b.n	800c640 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c632:	bf00      	nop
 800c634:	e004      	b.n	800c640 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c636:	bf00      	nop
 800c638:	e002      	b.n	800c640 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c63a:	bf00      	nop
 800c63c:	e000      	b.n	800c640 <HAL_RCCEx_PeriphCLKConfig+0xd50>
        break;
 800c63e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c640:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c644:	2b00      	cmp	r3, #0
 800c646:	d10b      	bne.n	800c660 <HAL_RCCEx_PeriphCLKConfig+0xd70>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c648:	4ba1      	ldr	r3, [pc, #644]	@ (800c8d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c64a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c64c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800c650:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c654:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800c658:	4a9d      	ldr	r2, [pc, #628]	@ (800c8d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c65a:	430b      	orrs	r3, r1
 800c65c:	6593      	str	r3, [r2, #88]	@ 0x58
 800c65e:	e003      	b.n	800c668 <HAL_RCCEx_PeriphCLKConfig+0xd78>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c660:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c664:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c668:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c670:	f002 0308 	and.w	r3, r2, #8
 800c674:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800c678:	2300      	movs	r3, #0
 800c67a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800c67e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800c682:	460b      	mov	r3, r1
 800c684:	4313      	orrs	r3, r2
 800c686:	d01e      	beq.n	800c6c6 <HAL_RCCEx_PeriphCLKConfig+0xdd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c688:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c68c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c690:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c694:	d10c      	bne.n	800c6b0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c696:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c69a:	3328      	adds	r3, #40	@ 0x28
 800c69c:	2102      	movs	r1, #2
 800c69e:	4618      	mov	r0, r3
 800c6a0:	f001 fc7e 	bl	800dfa0 <RCCEx_PLL3_Config>
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d002      	beq.n	800c6b0 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
      {
        status = HAL_ERROR;
 800c6aa:	2301      	movs	r3, #1
 800c6ac:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c6b0:	4b87      	ldr	r3, [pc, #540]	@ (800c8d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c6b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6b4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800c6b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c6bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c6c0:	4a83      	ldr	r2, [pc, #524]	@ (800c8d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c6c2:	430b      	orrs	r3, r1
 800c6c4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c6c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ce:	f002 0310 	and.w	r3, r2, #16
 800c6d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800c6dc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800c6e0:	460b      	mov	r3, r1
 800c6e2:	4313      	orrs	r3, r2
 800c6e4:	d01e      	beq.n	800c724 <HAL_RCCEx_PeriphCLKConfig+0xe34>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c6e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c6ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c6ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c6f2:	d10c      	bne.n	800c70e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c6f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c6f8:	3328      	adds	r3, #40	@ 0x28
 800c6fa:	2102      	movs	r1, #2
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f001 fc4f 	bl	800dfa0 <RCCEx_PLL3_Config>
 800c702:	4603      	mov	r3, r0
 800c704:	2b00      	cmp	r3, #0
 800c706:	d002      	beq.n	800c70e <HAL_RCCEx_PeriphCLKConfig+0xe1e>
      {
        status = HAL_ERROR;
 800c708:	2301      	movs	r3, #1
 800c70a:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c70e:	4b70      	ldr	r3, [pc, #448]	@ (800c8d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c710:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c712:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c716:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c71a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c71e:	4a6c      	ldr	r2, [pc, #432]	@ (800c8d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c720:	430b      	orrs	r3, r1
 800c722:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c724:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c72c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800c730:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800c734:	2300      	movs	r3, #0
 800c736:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800c73a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800c73e:	460b      	mov	r3, r1
 800c740:	4313      	orrs	r3, r2
 800c742:	d03e      	beq.n	800c7c2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800c744:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c748:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c74c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c750:	d022      	beq.n	800c798 <HAL_RCCEx_PeriphCLKConfig+0xea8>
 800c752:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800c756:	d81b      	bhi.n	800c790 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d003      	beq.n	800c764 <HAL_RCCEx_PeriphCLKConfig+0xe74>
 800c75c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c760:	d00b      	beq.n	800c77a <HAL_RCCEx_PeriphCLKConfig+0xe8a>
 800c762:	e015      	b.n	800c790 <HAL_RCCEx_PeriphCLKConfig+0xea0>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c764:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c768:	3308      	adds	r3, #8
 800c76a:	2100      	movs	r1, #0
 800c76c:	4618      	mov	r0, r3
 800c76e:	f001 fb65 	bl	800de3c <RCCEx_PLL2_Config>
 800c772:	4603      	mov	r3, r0
 800c774:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c778:	e00f      	b.n	800c79a <HAL_RCCEx_PeriphCLKConfig+0xeaa>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c77a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c77e:	3328      	adds	r3, #40	@ 0x28
 800c780:	2102      	movs	r1, #2
 800c782:	4618      	mov	r0, r3
 800c784:	f001 fc0c 	bl	800dfa0 <RCCEx_PLL3_Config>
 800c788:	4603      	mov	r3, r0
 800c78a:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800c78e:	e004      	b.n	800c79a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c790:	2301      	movs	r3, #1
 800c792:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c796:	e000      	b.n	800c79a <HAL_RCCEx_PeriphCLKConfig+0xeaa>
        break;
 800c798:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c79a:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d10b      	bne.n	800c7ba <HAL_RCCEx_PeriphCLKConfig+0xeca>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c7a2:	4b4b      	ldr	r3, [pc, #300]	@ (800c8d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c7a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c7a6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800c7aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c7ae:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800c7b2:	4a47      	ldr	r2, [pc, #284]	@ (800c8d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c7b4:	430b      	orrs	r3, r1
 800c7b6:	6593      	str	r3, [r2, #88]	@ 0x58
 800c7b8:	e003      	b.n	800c7c2 <HAL_RCCEx_PeriphCLKConfig+0xed2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c7ba:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c7be:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c7c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c7c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ca:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800c7ce:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800c7d4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800c7d8:	460b      	mov	r3, r1
 800c7da:	4313      	orrs	r3, r2
 800c7dc:	d03b      	beq.n	800c856 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800c7de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c7e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c7e6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c7ea:	d01f      	beq.n	800c82c <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800c7ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c7f0:	d818      	bhi.n	800c824 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800c7f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c7f6:	d003      	beq.n	800c800 <HAL_RCCEx_PeriphCLKConfig+0xf10>
 800c7f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c7fc:	d007      	beq.n	800c80e <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800c7fe:	e011      	b.n	800c824 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c800:	4b33      	ldr	r3, [pc, #204]	@ (800c8d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c804:	4a32      	ldr	r2, [pc, #200]	@ (800c8d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c806:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c80a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800c80c:	e00f      	b.n	800c82e <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c80e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c812:	3328      	adds	r3, #40	@ 0x28
 800c814:	2101      	movs	r1, #1
 800c816:	4618      	mov	r0, r3
 800c818:	f001 fbc2 	bl	800dfa0 <RCCEx_PLL3_Config>
 800c81c:	4603      	mov	r3, r0
 800c81e:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800c822:	e004      	b.n	800c82e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c824:	2301      	movs	r3, #1
 800c826:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c82a:	e000      	b.n	800c82e <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800c82c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c82e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c832:	2b00      	cmp	r3, #0
 800c834:	d10b      	bne.n	800c84e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c836:	4b26      	ldr	r3, [pc, #152]	@ (800c8d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c83a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c83e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c842:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c846:	4a22      	ldr	r2, [pc, #136]	@ (800c8d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c848:	430b      	orrs	r3, r1
 800c84a:	6553      	str	r3, [r2, #84]	@ 0x54
 800c84c:	e003      	b.n	800c856 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c84e:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c852:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c856:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c85a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c85e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800c862:	673b      	str	r3, [r7, #112]	@ 0x70
 800c864:	2300      	movs	r3, #0
 800c866:	677b      	str	r3, [r7, #116]	@ 0x74
 800c868:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800c86c:	460b      	mov	r3, r1
 800c86e:	4313      	orrs	r3, r2
 800c870:	d034      	beq.n	800c8dc <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800c872:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d003      	beq.n	800c884 <HAL_RCCEx_PeriphCLKConfig+0xf94>
 800c87c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c880:	d007      	beq.n	800c892 <HAL_RCCEx_PeriphCLKConfig+0xfa2>
 800c882:	e011      	b.n	800c8a8 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c884:	4b12      	ldr	r3, [pc, #72]	@ (800c8d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c888:	4a11      	ldr	r2, [pc, #68]	@ (800c8d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c88a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c88e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c890:	e00e      	b.n	800c8b0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c892:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c896:	3308      	adds	r3, #8
 800c898:	2102      	movs	r1, #2
 800c89a:	4618      	mov	r0, r3
 800c89c:	f001 face 	bl	800de3c <RCCEx_PLL2_Config>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800c8a6:	e003      	b.n	800c8b0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      default:
        ret = HAL_ERROR;
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c8ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c8b0:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d10d      	bne.n	800c8d4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c8b8:	4b05      	ldr	r3, [pc, #20]	@ (800c8d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c8ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c8bc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c8c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c8c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c8c6:	4a02      	ldr	r2, [pc, #8]	@ (800c8d0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800c8c8:	430b      	orrs	r3, r1
 800c8ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c8cc:	e006      	b.n	800c8dc <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800c8ce:	bf00      	nop
 800c8d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8d4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c8d8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c8dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c8e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8e4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800c8e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800c8ee:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800c8f2:	460b      	mov	r3, r1
 800c8f4:	4313      	orrs	r3, r2
 800c8f6:	d00c      	beq.n	800c912 <HAL_RCCEx_PeriphCLKConfig+0x1022>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c8f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c8fc:	3328      	adds	r3, #40	@ 0x28
 800c8fe:	2102      	movs	r1, #2
 800c900:	4618      	mov	r0, r3
 800c902:	f001 fb4d 	bl	800dfa0 <RCCEx_PLL3_Config>
 800c906:	4603      	mov	r3, r0
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d002      	beq.n	800c912 <HAL_RCCEx_PeriphCLKConfig+0x1022>
    {
      status = HAL_ERROR;
 800c90c:	2301      	movs	r3, #1
 800c90e:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c912:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c91a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800c91e:	663b      	str	r3, [r7, #96]	@ 0x60
 800c920:	2300      	movs	r3, #0
 800c922:	667b      	str	r3, [r7, #100]	@ 0x64
 800c924:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800c928:	460b      	mov	r3, r1
 800c92a:	4313      	orrs	r3, r2
 800c92c:	d038      	beq.n	800c9a0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c92e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c936:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c93a:	d018      	beq.n	800c96e <HAL_RCCEx_PeriphCLKConfig+0x107e>
 800c93c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c940:	d811      	bhi.n	800c966 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c942:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c946:	d014      	beq.n	800c972 <HAL_RCCEx_PeriphCLKConfig+0x1082>
 800c948:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c94c:	d80b      	bhi.n	800c966 <HAL_RCCEx_PeriphCLKConfig+0x1076>
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d011      	beq.n	800c976 <HAL_RCCEx_PeriphCLKConfig+0x1086>
 800c952:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c956:	d106      	bne.n	800c966 <HAL_RCCEx_PeriphCLKConfig+0x1076>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c958:	4bc3      	ldr	r3, [pc, #780]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c95a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c95c:	4ac2      	ldr	r2, [pc, #776]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c95e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c962:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c964:	e008      	b.n	800c978 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c966:	2301      	movs	r3, #1
 800c968:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
        break;
 800c96c:	e004      	b.n	800c978 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c96e:	bf00      	nop
 800c970:	e002      	b.n	800c978 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c972:	bf00      	nop
 800c974:	e000      	b.n	800c978 <HAL_RCCEx_PeriphCLKConfig+0x1088>
        break;
 800c976:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c978:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d10b      	bne.n	800c998 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c980:	4bb9      	ldr	r3, [pc, #740]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c984:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800c988:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c98c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c990:	4ab5      	ldr	r2, [pc, #724]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c992:	430b      	orrs	r3, r1
 800c994:	6553      	str	r3, [r2, #84]	@ 0x54
 800c996:	e003      	b.n	800c9a0 <HAL_RCCEx_PeriphCLKConfig+0x10b0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c998:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800c99c:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c9a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9a8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800c9ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800c9b2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800c9b6:	460b      	mov	r3, r1
 800c9b8:	4313      	orrs	r3, r2
 800c9ba:	d009      	beq.n	800c9d0 <HAL_RCCEx_PeriphCLKConfig+0x10e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c9bc:	4baa      	ldr	r3, [pc, #680]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c9be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c9c0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c9c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c9c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c9ca:	4aa7      	ldr	r2, [pc, #668]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c9cc:	430b      	orrs	r3, r1
 800c9ce:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c9d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9d8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800c9dc:	653b      	str	r3, [r7, #80]	@ 0x50
 800c9de:	2300      	movs	r3, #0
 800c9e0:	657b      	str	r3, [r7, #84]	@ 0x54
 800c9e2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800c9e6:	460b      	mov	r3, r1
 800c9e8:	4313      	orrs	r3, r2
 800c9ea:	d009      	beq.n	800ca00 <HAL_RCCEx_PeriphCLKConfig+0x1110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c9ec:	4b9e      	ldr	r3, [pc, #632]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c9ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c9f0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800c9f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800c9f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c9fa:	4a9b      	ldr	r2, [pc, #620]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800c9fc:	430b      	orrs	r3, r1
 800c9fe:	6513      	str	r3, [r2, #80]	@ 0x50
  }

#if defined(DFSDM2_BASE)
  /*------------------------------ DFSDM2 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 800ca00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ca04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca08:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800ca0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ca0e:	2300      	movs	r3, #0
 800ca10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ca12:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800ca16:	460b      	mov	r3, r1
 800ca18:	4313      	orrs	r3, r2
 800ca1a:	d009      	beq.n	800ca30 <HAL_RCCEx_PeriphCLKConfig+0x1140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM2 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 800ca1c:	4b92      	ldr	r3, [pc, #584]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ca1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca20:	f023 6100 	bic.w	r1, r3, #134217728	@ 0x8000000
 800ca24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ca28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ca2a:	4a8f      	ldr	r2, [pc, #572]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ca2c:	430b      	orrs	r3, r1
 800ca2e:	6593      	str	r3, [r2, #88]	@ 0x58
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ca30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ca34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca38:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800ca3c:	643b      	str	r3, [r7, #64]	@ 0x40
 800ca3e:	2300      	movs	r3, #0
 800ca40:	647b      	str	r3, [r7, #68]	@ 0x44
 800ca42:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800ca46:	460b      	mov	r3, r1
 800ca48:	4313      	orrs	r3, r2
 800ca4a:	d00e      	beq.n	800ca6a <HAL_RCCEx_PeriphCLKConfig+0x117a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ca4c:	4b86      	ldr	r3, [pc, #536]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ca4e:	691b      	ldr	r3, [r3, #16]
 800ca50:	4a85      	ldr	r2, [pc, #532]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ca52:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800ca56:	6113      	str	r3, [r2, #16]
 800ca58:	4b83      	ldr	r3, [pc, #524]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ca5a:	6919      	ldr	r1, [r3, #16]
 800ca5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ca60:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800ca64:	4a80      	ldr	r2, [pc, #512]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ca66:	430b      	orrs	r3, r1
 800ca68:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ca6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ca6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca72:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800ca76:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ca78:	2300      	movs	r3, #0
 800ca7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ca7c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800ca80:	460b      	mov	r3, r1
 800ca82:	4313      	orrs	r3, r2
 800ca84:	d009      	beq.n	800ca9a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ca86:	4b78      	ldr	r3, [pc, #480]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ca88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ca8a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800ca8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ca92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ca94:	4a74      	ldr	r2, [pc, #464]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800ca96:	430b      	orrs	r3, r1
 800ca98:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ca9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ca9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800caa6:	633b      	str	r3, [r7, #48]	@ 0x30
 800caa8:	2300      	movs	r3, #0
 800caaa:	637b      	str	r3, [r7, #52]	@ 0x34
 800caac:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800cab0:	460b      	mov	r3, r1
 800cab2:	4313      	orrs	r3, r2
 800cab4:	d00a      	beq.n	800cacc <HAL_RCCEx_PeriphCLKConfig+0x11dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800cab6:	4b6c      	ldr	r3, [pc, #432]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800caba:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800cabe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800cac6:	4a68      	ldr	r2, [pc, #416]	@ (800cc68 <HAL_RCCEx_PeriphCLKConfig+0x1378>)
 800cac8:	430b      	orrs	r3, r1
 800caca:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800cacc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad4:	2100      	movs	r1, #0
 800cad6:	62b9      	str	r1, [r7, #40]	@ 0x28
 800cad8:	f003 0301 	and.w	r3, r3, #1
 800cadc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cade:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800cae2:	460b      	mov	r3, r1
 800cae4:	4313      	orrs	r3, r2
 800cae6:	d011      	beq.n	800cb0c <HAL_RCCEx_PeriphCLKConfig+0x121c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cae8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800caec:	3308      	adds	r3, #8
 800caee:	2100      	movs	r1, #0
 800caf0:	4618      	mov	r0, r3
 800caf2:	f001 f9a3 	bl	800de3c <RCCEx_PLL2_Config>
 800caf6:	4603      	mov	r3, r0
 800caf8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800cafc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d003      	beq.n	800cb0c <HAL_RCCEx_PeriphCLKConfig+0x121c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb04:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800cb08:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800cb0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb14:	2100      	movs	r1, #0
 800cb16:	6239      	str	r1, [r7, #32]
 800cb18:	f003 0302 	and.w	r3, r3, #2
 800cb1c:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb1e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800cb22:	460b      	mov	r3, r1
 800cb24:	4313      	orrs	r3, r2
 800cb26:	d011      	beq.n	800cb4c <HAL_RCCEx_PeriphCLKConfig+0x125c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cb28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cb2c:	3308      	adds	r3, #8
 800cb2e:	2101      	movs	r1, #1
 800cb30:	4618      	mov	r0, r3
 800cb32:	f001 f983 	bl	800de3c <RCCEx_PLL2_Config>
 800cb36:	4603      	mov	r3, r0
 800cb38:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800cb3c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d003      	beq.n	800cb4c <HAL_RCCEx_PeriphCLKConfig+0x125c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb44:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800cb48:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800cb4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cb50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb54:	2100      	movs	r1, #0
 800cb56:	61b9      	str	r1, [r7, #24]
 800cb58:	f003 0304 	and.w	r3, r3, #4
 800cb5c:	61fb      	str	r3, [r7, #28]
 800cb5e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800cb62:	460b      	mov	r3, r1
 800cb64:	4313      	orrs	r3, r2
 800cb66:	d011      	beq.n	800cb8c <HAL_RCCEx_PeriphCLKConfig+0x129c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cb68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cb6c:	3308      	adds	r3, #8
 800cb6e:	2102      	movs	r1, #2
 800cb70:	4618      	mov	r0, r3
 800cb72:	f001 f963 	bl	800de3c <RCCEx_PLL2_Config>
 800cb76:	4603      	mov	r3, r0
 800cb78:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800cb7c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d003      	beq.n	800cb8c <HAL_RCCEx_PeriphCLKConfig+0x129c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb84:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800cb88:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800cb8c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cb90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb94:	2100      	movs	r1, #0
 800cb96:	6139      	str	r1, [r7, #16]
 800cb98:	f003 0308 	and.w	r3, r3, #8
 800cb9c:	617b      	str	r3, [r7, #20]
 800cb9e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800cba2:	460b      	mov	r3, r1
 800cba4:	4313      	orrs	r3, r2
 800cba6:	d011      	beq.n	800cbcc <HAL_RCCEx_PeriphCLKConfig+0x12dc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cba8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cbac:	3328      	adds	r3, #40	@ 0x28
 800cbae:	2100      	movs	r1, #0
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	f001 f9f5 	bl	800dfa0 <RCCEx_PLL3_Config>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
  
    if (ret == HAL_OK)
 800cbbc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d003      	beq.n	800cbcc <HAL_RCCEx_PeriphCLKConfig+0x12dc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cbc4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800cbc8:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800cbcc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cbd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd4:	2100      	movs	r1, #0
 800cbd6:	60b9      	str	r1, [r7, #8]
 800cbd8:	f003 0310 	and.w	r3, r3, #16
 800cbdc:	60fb      	str	r3, [r7, #12]
 800cbde:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800cbe2:	460b      	mov	r3, r1
 800cbe4:	4313      	orrs	r3, r2
 800cbe6:	d011      	beq.n	800cc0c <HAL_RCCEx_PeriphCLKConfig+0x131c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cbe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cbec:	3328      	adds	r3, #40	@ 0x28
 800cbee:	2101      	movs	r1, #1
 800cbf0:	4618      	mov	r0, r3
 800cbf2:	f001 f9d5 	bl	800dfa0 <RCCEx_PLL3_Config>
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800cbfc:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d003      	beq.n	800cc0c <HAL_RCCEx_PeriphCLKConfig+0x131c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc04:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800cc08:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800cc0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc14:	2100      	movs	r1, #0
 800cc16:	6039      	str	r1, [r7, #0]
 800cc18:	f003 0320 	and.w	r3, r3, #32
 800cc1c:	607b      	str	r3, [r7, #4]
 800cc1e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800cc22:	460b      	mov	r3, r1
 800cc24:	4313      	orrs	r3, r2
 800cc26:	d011      	beq.n	800cc4c <HAL_RCCEx_PeriphCLKConfig+0x135c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cc28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800cc2c:	3328      	adds	r3, #40	@ 0x28
 800cc2e:	2102      	movs	r1, #2
 800cc30:	4618      	mov	r0, r3
 800cc32:	f001 f9b5 	bl	800dfa0 <RCCEx_PLL3_Config>
 800cc36:	4603      	mov	r3, r0
 800cc38:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    
    if (ret == HAL_OK)
 800cc3c:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d003      	beq.n	800cc4c <HAL_RCCEx_PeriphCLKConfig+0x135c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc44:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800cc48:	f887 311e 	strb.w	r3, [r7, #286]	@ 0x11e
    } 
  }

  if (status == HAL_OK)
 800cc4c:	f897 311e 	ldrb.w	r3, [r7, #286]	@ 0x11e
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d101      	bne.n	800cc58 <HAL_RCCEx_PeriphCLKConfig+0x1368>
  {
    return HAL_OK;
 800cc54:	2300      	movs	r3, #0
 800cc56:	e000      	b.n	800cc5a <HAL_RCCEx_PeriphCLKConfig+0x136a>
  }
  return HAL_ERROR;
 800cc58:	2301      	movs	r3, #1
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800cc60:	46bd      	mov	sp, r7
 800cc62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cc66:	bf00      	nop
 800cc68:	58024400 	.word	0x58024400

0800cc6c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b090      	sub	sp, #64	@ 0x40
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800cc76:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc7a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800cc7e:	430b      	orrs	r3, r1
 800cc80:	f040 8094 	bne.w	800cdac <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800cc84:	4b97      	ldr	r3, [pc, #604]	@ (800cee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cc86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cc88:	f003 0307 	and.w	r3, r3, #7
 800cc8c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800cc8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc90:	2b04      	cmp	r3, #4
 800cc92:	f200 8087 	bhi.w	800cda4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800cc96:	a201      	add	r2, pc, #4	@ (adr r2, 800cc9c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800cc98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc9c:	0800ccb1 	.word	0x0800ccb1
 800cca0:	0800ccd9 	.word	0x0800ccd9
 800cca4:	0800cd01 	.word	0x0800cd01
 800cca8:	0800cd9d 	.word	0x0800cd9d
 800ccac:	0800cd29 	.word	0x0800cd29
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ccb0:	4b8c      	ldr	r3, [pc, #560]	@ (800cee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ccb8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ccbc:	d108      	bne.n	800ccd0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ccbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f000 ff68 	bl	800db98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ccc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ccca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cccc:	f000 bc97 	b.w	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ccd4:	f000 bc93 	b.w	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ccd8:	4b82      	ldr	r3, [pc, #520]	@ (800cee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cce0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cce4:	d108      	bne.n	800ccf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cce6:	f107 0318 	add.w	r3, r7, #24
 800ccea:	4618      	mov	r0, r3
 800ccec:	f000 fcac 	bl	800d648 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ccf0:	69bb      	ldr	r3, [r7, #24]
 800ccf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccf4:	f000 bc83 	b.w	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ccfc:	f000 bc7f 	b.w	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cd00:	4b78      	ldr	r3, [pc, #480]	@ (800cee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cd08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cd0c:	d108      	bne.n	800cd20 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd0e:	f107 030c 	add.w	r3, r7, #12
 800cd12:	4618      	mov	r0, r3
 800cd14:	f000 fdec 	bl	800d8f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd1c:	f000 bc6f 	b.w	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cd20:	2300      	movs	r3, #0
 800cd22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cd24:	f000 bc6b 	b.w	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cd28:	4b6e      	ldr	r3, [pc, #440]	@ (800cee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cd2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cd2c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cd30:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cd32:	4b6c      	ldr	r3, [pc, #432]	@ (800cee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	f003 0304 	and.w	r3, r3, #4
 800cd3a:	2b04      	cmp	r3, #4
 800cd3c:	d10c      	bne.n	800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800cd3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d109      	bne.n	800cd58 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd44:	4b67      	ldr	r3, [pc, #412]	@ (800cee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	08db      	lsrs	r3, r3, #3
 800cd4a:	f003 0303 	and.w	r3, r3, #3
 800cd4e:	4a66      	ldr	r2, [pc, #408]	@ (800cee8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800cd50:	fa22 f303 	lsr.w	r3, r2, r3
 800cd54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cd56:	e01f      	b.n	800cd98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cd58:	4b62      	ldr	r3, [pc, #392]	@ (800cee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cd60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cd64:	d106      	bne.n	800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800cd66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cd6c:	d102      	bne.n	800cd74 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cd6e:	4b5f      	ldr	r3, [pc, #380]	@ (800ceec <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800cd70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cd72:	e011      	b.n	800cd98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cd74:	4b5b      	ldr	r3, [pc, #364]	@ (800cee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cd7c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cd80:	d106      	bne.n	800cd90 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800cd82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cd88:	d102      	bne.n	800cd90 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cd8a:	4b59      	ldr	r3, [pc, #356]	@ (800cef0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800cd8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cd8e:	e003      	b.n	800cd98 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cd90:	2300      	movs	r3, #0
 800cd92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800cd94:	f000 bc33 	b.w	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800cd98:	f000 bc31 	b.w	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800cd9c:	4b55      	ldr	r3, [pc, #340]	@ (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800cd9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cda0:	f000 bc2d 	b.w	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800cda4:	2300      	movs	r3, #0
 800cda6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cda8:	f000 bc29 	b.w	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
  }
#endif /* SAI3 */

#if  defined(RCC_CDCCIP1R_SAI2ASEL)

  else if (PeriphClk == RCC_PERIPHCLK_SAI2A)
 800cdac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cdb0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800cdb4:	430b      	orrs	r3, r1
 800cdb6:	f040 809f 	bne.w	800cef8 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>
  {
    saiclocksource = __HAL_RCC_GET_SAI2A_SOURCE();
 800cdba:	4b4a      	ldr	r3, [pc, #296]	@ (800cee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cdbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cdbe:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800cdc2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800cdc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cdca:	d04d      	beq.n	800ce68 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800cdcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cdd2:	f200 8084 	bhi.w	800cede <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800cdd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdd8:	2bc0      	cmp	r3, #192	@ 0xc0
 800cdda:	d07d      	beq.n	800ced8 <HAL_RCCEx_GetPeriphCLKFreq+0x26c>
 800cddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdde:	2bc0      	cmp	r3, #192	@ 0xc0
 800cde0:	d87d      	bhi.n	800cede <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800cde2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cde4:	2b80      	cmp	r3, #128	@ 0x80
 800cde6:	d02d      	beq.n	800ce44 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
 800cde8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdea:	2b80      	cmp	r3, #128	@ 0x80
 800cdec:	d877      	bhi.n	800cede <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 800cdee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d003      	beq.n	800cdfc <HAL_RCCEx_GetPeriphCLKFreq+0x190>
 800cdf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdf6:	2b40      	cmp	r3, #64	@ 0x40
 800cdf8:	d012      	beq.n	800ce20 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800cdfa:	e070      	b.n	800cede <HAL_RCCEx_GetPeriphCLKFreq+0x272>
    {
      case RCC_SAI2ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cdfc:	4b39      	ldr	r3, [pc, #228]	@ (800cee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ce04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ce08:	d107      	bne.n	800ce1a <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ce0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f000 fec2 	bl	800db98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ce14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce18:	e3f1      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce1e:	e3ee      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce20:	4b30      	ldr	r3, [pc, #192]	@ (800cee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ce28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ce2c:	d107      	bne.n	800ce3e <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce2e:	f107 0318 	add.w	r3, r7, #24
 800ce32:	4618      	mov	r0, r3
 800ce34:	f000 fc08 	bl	800d648 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ce38:	69bb      	ldr	r3, [r7, #24]
 800ce3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce3c:	e3df      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce42:	e3dc      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2A  */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ce44:	4b27      	ldr	r3, [pc, #156]	@ (800cee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ce4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ce50:	d107      	bne.n	800ce62 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ce52:	f107 030c 	add.w	r3, r7, #12
 800ce56:	4618      	mov	r0, r3
 800ce58:	f000 fd4a 	bl	800d8f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce60:	e3cd      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800ce62:	2300      	movs	r3, #0
 800ce64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ce66:	e3ca      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI2A  */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ce68:	4b1e      	ldr	r3, [pc, #120]	@ (800cee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ce6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ce6c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ce70:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ce72:	4b1c      	ldr	r3, [pc, #112]	@ (800cee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	f003 0304 	and.w	r3, r3, #4
 800ce7a:	2b04      	cmp	r3, #4
 800ce7c:	d10c      	bne.n	800ce98 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
 800ce7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d109      	bne.n	800ce98 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce84:	4b17      	ldr	r3, [pc, #92]	@ (800cee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	08db      	lsrs	r3, r3, #3
 800ce8a:	f003 0303 	and.w	r3, r3, #3
 800ce8e:	4a16      	ldr	r2, [pc, #88]	@ (800cee8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800ce90:	fa22 f303 	lsr.w	r3, r2, r3
 800ce94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ce96:	e01e      	b.n	800ced6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ce98:	4b12      	ldr	r3, [pc, #72]	@ (800cee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cea0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cea4:	d106      	bne.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 800cea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cea8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ceac:	d102      	bne.n	800ceb4 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ceae:	4b0f      	ldr	r3, [pc, #60]	@ (800ceec <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800ceb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ceb2:	e010      	b.n	800ced6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ceb4:	4b0b      	ldr	r3, [pc, #44]	@ (800cee4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cebc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800cec0:	d106      	bne.n	800ced0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800cec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cec4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cec8:	d102      	bne.n	800ced0 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ceca:	4b09      	ldr	r3, [pc, #36]	@ (800cef0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 800cecc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cece:	e002      	b.n	800ced6 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ced0:	2300      	movs	r3, #0
 800ced2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ced4:	e393      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800ced6:	e392      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2ACLKSOURCE_PIN): /* External clock is the clock source for SAI2A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ced8:	4b06      	ldr	r3, [pc, #24]	@ (800cef4 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 800ceda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cedc:	e38f      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800cede:	2300      	movs	r3, #0
 800cee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cee2:	e38c      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800cee4:	58024400 	.word	0x58024400
 800cee8:	03d09000 	.word	0x03d09000
 800ceec:	003d0900 	.word	0x003d0900
 800cef0:	007a1200 	.word	0x007a1200
 800cef4:	00bb8000 	.word	0x00bb8000

  }
#endif

#if  defined(RCC_CDCCIP1R_SAI2BSEL_0)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2B)
 800cef8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cefc:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800cf00:	430b      	orrs	r3, r1
 800cf02:	f040 809c 	bne.w	800d03e <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
  {

    saiclocksource = __HAL_RCC_GET_SAI2B_SOURCE();
 800cf06:	4b9e      	ldr	r3, [pc, #632]	@ (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cf08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cf0a:	f403 6360 	and.w	r3, r3, #3584	@ 0xe00
 800cf0e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800cf10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf12:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cf16:	d054      	beq.n	800cfc2 <HAL_RCCEx_GetPeriphCLKFreq+0x356>
 800cf18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800cf1e:	f200 808b 	bhi.w	800d038 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800cf22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf24:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800cf28:	f000 8083 	beq.w	800d032 <HAL_RCCEx_GetPeriphCLKFreq+0x3c6>
 800cf2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf2e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800cf32:	f200 8081 	bhi.w	800d038 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800cf36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cf3c:	d02f      	beq.n	800cf9e <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800cf3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cf44:	d878      	bhi.n	800d038 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
 800cf46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d004      	beq.n	800cf56 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 800cf4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cf52:	d012      	beq.n	800cf7a <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 800cf54:	e070      	b.n	800d038 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
    {
      case RCC_SAI2BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cf56:	4b8a      	ldr	r3, [pc, #552]	@ (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cf5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cf62:	d107      	bne.n	800cf74 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cf64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800cf68:	4618      	mov	r0, r3
 800cf6a:	f000 fe15 	bl	800db98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cf6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf72:	e344      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cf74:	2300      	movs	r3, #0
 800cf76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf78:	e341      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SAI2BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cf7a:	4b81      	ldr	r3, [pc, #516]	@ (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800cf82:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800cf86:	d107      	bne.n	800cf98 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cf88:	f107 0318 	add.w	r3, r7, #24
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	f000 fb5b 	bl	800d648 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cf92:	69bb      	ldr	r3, [r7, #24]
 800cf94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cf96:	e332      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cf98:	2300      	movs	r3, #0
 800cf9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cf9c:	e32f      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI2B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cf9e:	4b78      	ldr	r3, [pc, #480]	@ (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cfa6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800cfaa:	d107      	bne.n	800cfbc <HAL_RCCEx_GetPeriphCLKFreq+0x350>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cfac:	f107 030c 	add.w	r3, r7, #12
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f000 fc9d 	bl	800d8f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cfba:	e320      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800cfc0:	e31d      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SAI2BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI2B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cfc2:	4b6f      	ldr	r3, [pc, #444]	@ (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cfc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cfc6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800cfca:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cfcc:	4b6c      	ldr	r3, [pc, #432]	@ (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	f003 0304 	and.w	r3, r3, #4
 800cfd4:	2b04      	cmp	r3, #4
 800cfd6:	d10c      	bne.n	800cff2 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
 800cfd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d109      	bne.n	800cff2 <HAL_RCCEx_GetPeriphCLKFreq+0x386>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cfde:	4b68      	ldr	r3, [pc, #416]	@ (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	08db      	lsrs	r3, r3, #3
 800cfe4:	f003 0303 	and.w	r3, r3, #3
 800cfe8:	4a66      	ldr	r2, [pc, #408]	@ (800d184 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800cfea:	fa22 f303 	lsr.w	r3, r2, r3
 800cfee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cff0:	e01e      	b.n	800d030 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cff2:	4b63      	ldr	r3, [pc, #396]	@ (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cffa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cffe:	d106      	bne.n	800d00e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800d000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d002:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d006:	d102      	bne.n	800d00e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d008:	4b5f      	ldr	r3, [pc, #380]	@ (800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800d00a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d00c:	e010      	b.n	800d030 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d00e:	4b5c      	ldr	r3, [pc, #368]	@ (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d016:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d01a:	d106      	bne.n	800d02a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800d01c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d01e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d022:	d102      	bne.n	800d02a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d024:	4b59      	ldr	r3, [pc, #356]	@ (800d18c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800d026:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d028:	e002      	b.n	800d030 <HAL_RCCEx_GetPeriphCLKFreq+0x3c4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d02a:	2300      	movs	r3, #0
 800d02c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        break;
 800d02e:	e2e6      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800d030:	e2e5      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SAI2BCLKSOURCE_PIN): /* External clock is the clock source for SAI2B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d032:	4b57      	ldr	r3, [pc, #348]	@ (800d190 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d034:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d036:	e2e2      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800d038:	2300      	movs	r3, #0
 800d03a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d03c:	e2df      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
        break;
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800d03e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d042:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800d046:	430b      	orrs	r3, r1
 800d048:	f040 80a7 	bne.w	800d19a <HAL_RCCEx_GetPeriphCLKFreq+0x52e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800d04c:	4b4c      	ldr	r3, [pc, #304]	@ (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800d04e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d050:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800d054:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d058:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d05c:	d055      	beq.n	800d10a <HAL_RCCEx_GetPeriphCLKFreq+0x49e>
 800d05e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d060:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d064:	f200 8096 	bhi.w	800d194 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800d068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d06a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d06e:	f000 8084 	beq.w	800d17a <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
 800d072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d074:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d078:	f200 808c 	bhi.w	800d194 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800d07c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d07e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d082:	d030      	beq.n	800d0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x47a>
 800d084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d086:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d08a:	f200 8083 	bhi.w	800d194 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
 800d08e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d090:	2b00      	cmp	r3, #0
 800d092:	d004      	beq.n	800d09e <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800d094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d096:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d09a:	d012      	beq.n	800d0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x456>
 800d09c:	e07a      	b.n	800d194 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d09e:	4b38      	ldr	r3, [pc, #224]	@ (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d0a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d0aa:	d107      	bne.n	800d0bc <HAL_RCCEx_GetPeriphCLKFreq+0x450>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d0ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f000 fd71 	bl	800db98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d0b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d0b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0ba:	e2a0      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d0bc:	2300      	movs	r3, #0
 800d0be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0c0:	e29d      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d0c2:	4b2f      	ldr	r3, [pc, #188]	@ (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d0ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d0ce:	d107      	bne.n	800d0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d0d0:	f107 0318 	add.w	r3, r7, #24
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f000 fab7 	bl	800d648 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d0da:	69bb      	ldr	r3, [r7, #24]
 800d0dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d0de:	e28e      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d0e4:	e28b      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d0e6:	4b26      	ldr	r3, [pc, #152]	@ (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d0ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d0f2:	d107      	bne.n	800d104 <HAL_RCCEx_GetPeriphCLKFreq+0x498>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d0f4:	f107 030c 	add.w	r3, r7, #12
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	f000 fbf9 	bl	800d8f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d102:	e27c      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d104:	2300      	movs	r3, #0
 800d106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d108:	e279      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d10a:	4b1d      	ldr	r3, [pc, #116]	@ (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800d10c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d10e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d112:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d114:	4b1a      	ldr	r3, [pc, #104]	@ (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	f003 0304 	and.w	r3, r3, #4
 800d11c:	2b04      	cmp	r3, #4
 800d11e:	d10c      	bne.n	800d13a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
 800d120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d122:	2b00      	cmp	r3, #0
 800d124:	d109      	bne.n	800d13a <HAL_RCCEx_GetPeriphCLKFreq+0x4ce>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d126:	4b16      	ldr	r3, [pc, #88]	@ (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800d128:	681b      	ldr	r3, [r3, #0]
 800d12a:	08db      	lsrs	r3, r3, #3
 800d12c:	f003 0303 	and.w	r3, r3, #3
 800d130:	4a14      	ldr	r2, [pc, #80]	@ (800d184 <HAL_RCCEx_GetPeriphCLKFreq+0x518>)
 800d132:	fa22 f303 	lsr.w	r3, r2, r3
 800d136:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d138:	e01e      	b.n	800d178 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d13a:	4b11      	ldr	r3, [pc, #68]	@ (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d142:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d146:	d106      	bne.n	800d156 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800d148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d14a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d14e:	d102      	bne.n	800d156 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d150:	4b0d      	ldr	r3, [pc, #52]	@ (800d188 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>)
 800d152:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d154:	e010      	b.n	800d178 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d156:	4b0a      	ldr	r3, [pc, #40]	@ (800d180 <HAL_RCCEx_GetPeriphCLKFreq+0x514>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d15e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d162:	d106      	bne.n	800d172 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800d164:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d166:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d16a:	d102      	bne.n	800d172 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d16c:	4b07      	ldr	r3, [pc, #28]	@ (800d18c <HAL_RCCEx_GetPeriphCLKFreq+0x520>)
 800d16e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d170:	e002      	b.n	800d178 <HAL_RCCEx_GetPeriphCLKFreq+0x50c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d172:	2300      	movs	r3, #0
 800d174:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d176:	e242      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800d178:	e241      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d17a:	4b05      	ldr	r3, [pc, #20]	@ (800d190 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 800d17c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d17e:	e23e      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800d180:	58024400 	.word	0x58024400
 800d184:	03d09000 	.word	0x03d09000
 800d188:	003d0900 	.word	0x003d0900
 800d18c:	007a1200 	.word	0x007a1200
 800d190:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 800d194:	2300      	movs	r3, #0
 800d196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d198:	e231      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800d19a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d19e:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800d1a2:	430b      	orrs	r3, r1
 800d1a4:	f040 8085 	bne.w	800d2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800d1a8:	4b9c      	ldr	r3, [pc, #624]	@ (800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d1aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d1ac:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800d1b0:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800d1b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d1b8:	d06b      	beq.n	800d292 <HAL_RCCEx_GetPeriphCLKFreq+0x626>
 800d1ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d1c0:	d874      	bhi.n	800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800d1c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1c4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d1c8:	d056      	beq.n	800d278 <HAL_RCCEx_GetPeriphCLKFreq+0x60c>
 800d1ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d1d0:	d86c      	bhi.n	800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800d1d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1d4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d1d8:	d03b      	beq.n	800d252 <HAL_RCCEx_GetPeriphCLKFreq+0x5e6>
 800d1da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d1e0:	d864      	bhi.n	800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800d1e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d1e8:	d021      	beq.n	800d22e <HAL_RCCEx_GetPeriphCLKFreq+0x5c2>
 800d1ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d1f0:	d85c      	bhi.n	800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x640>
 800d1f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d004      	beq.n	800d202 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
 800d1f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d1fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d1fe:	d004      	beq.n	800d20a <HAL_RCCEx_GetPeriphCLKFreq+0x59e>
 800d200:	e054      	b.n	800d2ac <HAL_RCCEx_GetPeriphCLKFreq+0x640>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800d202:	f7fe fb5f 	bl	800b8c4 <HAL_RCC_GetPCLK1Freq>
 800d206:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d208:	e1f9      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d20a:	4b84      	ldr	r3, [pc, #528]	@ (800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d212:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d216:	d107      	bne.n	800d228 <HAL_RCCEx_GetPeriphCLKFreq+0x5bc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d218:	f107 0318 	add.w	r3, r7, #24
 800d21c:	4618      	mov	r0, r3
 800d21e:	f000 fa13 	bl	800d648 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d222:	69fb      	ldr	r3, [r7, #28]
 800d224:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d226:	e1ea      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d228:	2300      	movs	r3, #0
 800d22a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d22c:	e1e7      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d22e:	4b7b      	ldr	r3, [pc, #492]	@ (800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d236:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d23a:	d107      	bne.n	800d24c <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d23c:	f107 030c 	add.w	r3, r7, #12
 800d240:	4618      	mov	r0, r3
 800d242:	f000 fb55 	bl	800d8f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d246:	693b      	ldr	r3, [r7, #16]
 800d248:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d24a:	e1d8      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d24c:	2300      	movs	r3, #0
 800d24e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d250:	e1d5      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d252:	4b72      	ldr	r3, [pc, #456]	@ (800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	f003 0304 	and.w	r3, r3, #4
 800d25a:	2b04      	cmp	r3, #4
 800d25c:	d109      	bne.n	800d272 <HAL_RCCEx_GetPeriphCLKFreq+0x606>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d25e:	4b6f      	ldr	r3, [pc, #444]	@ (800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	08db      	lsrs	r3, r3, #3
 800d264:	f003 0303 	and.w	r3, r3, #3
 800d268:	4a6d      	ldr	r2, [pc, #436]	@ (800d420 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800d26a:	fa22 f303 	lsr.w	r3, r2, r3
 800d26e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d270:	e1c5      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d272:	2300      	movs	r3, #0
 800d274:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d276:	e1c2      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d278:	4b68      	ldr	r3, [pc, #416]	@ (800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d280:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d284:	d102      	bne.n	800d28c <HAL_RCCEx_GetPeriphCLKFreq+0x620>
        {
          frequency = CSI_VALUE;
 800d286:	4b67      	ldr	r3, [pc, #412]	@ (800d424 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800d288:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d28a:	e1b8      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d28c:	2300      	movs	r3, #0
 800d28e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d290:	e1b5      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d292:	4b62      	ldr	r3, [pc, #392]	@ (800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d29a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d29e:	d102      	bne.n	800d2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x63a>
        {
          frequency = HSE_VALUE;
 800d2a0:	4b61      	ldr	r3, [pc, #388]	@ (800d428 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800d2a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d2a4:	e1ab      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2aa:	e1a8      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d2b0:	e1a5      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800d2b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2b6:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800d2ba:	430b      	orrs	r3, r1
 800d2bc:	d173      	bne.n	800d3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x73a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800d2be:	4b57      	ldr	r3, [pc, #348]	@ (800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d2c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d2c2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800d2c6:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d2c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d2ce:	d02f      	beq.n	800d330 <HAL_RCCEx_GetPeriphCLKFreq+0x6c4>
 800d2d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d2d6:	d863      	bhi.n	800d3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
 800d2d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d004      	beq.n	800d2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800d2de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d2e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d2e4:	d012      	beq.n	800d30c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
 800d2e6:	e05b      	b.n	800d3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x734>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d2e8:	4b4c      	ldr	r3, [pc, #304]	@ (800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d2f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d2f4:	d107      	bne.n	800d306 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d2f6:	f107 0318 	add.w	r3, r7, #24
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	f000 f9a4 	bl	800d648 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d300:	69bb      	ldr	r3, [r7, #24]
 800d302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d304:	e17b      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d306:	2300      	movs	r3, #0
 800d308:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d30a:	e178      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d30c:	4b43      	ldr	r3, [pc, #268]	@ (800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d314:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d318:	d107      	bne.n	800d32a <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d31a:	f107 030c 	add.w	r3, r7, #12
 800d31e:	4618      	mov	r0, r3
 800d320:	f000 fae6 	bl	800d8f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800d324:	697b      	ldr	r3, [r7, #20]
 800d326:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d328:	e169      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d32a:	2300      	movs	r3, #0
 800d32c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d32e:	e166      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d330:	4b3a      	ldr	r3, [pc, #232]	@ (800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d332:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d334:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d338:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d33a:	4b38      	ldr	r3, [pc, #224]	@ (800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	f003 0304 	and.w	r3, r3, #4
 800d342:	2b04      	cmp	r3, #4
 800d344:	d10c      	bne.n	800d360 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
 800d346:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d109      	bne.n	800d360 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d34c:	4b33      	ldr	r3, [pc, #204]	@ (800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	08db      	lsrs	r3, r3, #3
 800d352:	f003 0303 	and.w	r3, r3, #3
 800d356:	4a32      	ldr	r2, [pc, #200]	@ (800d420 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800d358:	fa22 f303 	lsr.w	r3, r2, r3
 800d35c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d35e:	e01e      	b.n	800d39e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d360:	4b2e      	ldr	r3, [pc, #184]	@ (800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d368:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d36c:	d106      	bne.n	800d37c <HAL_RCCEx_GetPeriphCLKFreq+0x710>
 800d36e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d370:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d374:	d102      	bne.n	800d37c <HAL_RCCEx_GetPeriphCLKFreq+0x710>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800d376:	4b2b      	ldr	r3, [pc, #172]	@ (800d424 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800d378:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d37a:	e010      	b.n	800d39e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d37c:	4b27      	ldr	r3, [pc, #156]	@ (800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d384:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d388:	d106      	bne.n	800d398 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
 800d38a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d38c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d390:	d102      	bne.n	800d398 <HAL_RCCEx_GetPeriphCLKFreq+0x72c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800d392:	4b25      	ldr	r3, [pc, #148]	@ (800d428 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>)
 800d394:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d396:	e002      	b.n	800d39e <HAL_RCCEx_GetPeriphCLKFreq+0x732>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800d398:	2300      	movs	r3, #0
 800d39a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800d39c:	e12f      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800d39e:	e12e      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d3a4:	e12b      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d3a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d3aa:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800d3ae:	430b      	orrs	r3, r1
 800d3b0:	d13c      	bne.n	800d42c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d3b2:	4b1a      	ldr	r3, [pc, #104]	@ (800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d3b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d3b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d3ba:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d3bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d004      	beq.n	800d3cc <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 800d3c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d3c8:	d012      	beq.n	800d3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 800d3ca:	e023      	b.n	800d414 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d3cc:	4b13      	ldr	r3, [pc, #76]	@ (800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d3d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d3d8:	d107      	bne.n	800d3ea <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d3da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f000 fbda 	bl	800db98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d3e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d3e8:	e109      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d3ee:	e106      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d3f0:	4b0a      	ldr	r3, [pc, #40]	@ (800d41c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d3f8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d3fc:	d107      	bne.n	800d40e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d3fe:	f107 0318 	add.w	r3, r7, #24
 800d402:	4618      	mov	r0, r3
 800d404:	f000 f920 	bl	800d648 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d408:	6a3b      	ldr	r3, [r7, #32]
 800d40a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d40c:	e0f7      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d40e:	2300      	movs	r3, #0
 800d410:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d412:	e0f4      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }

      default :
      {
        frequency = 0;
 800d414:	2300      	movs	r3, #0
 800d416:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d418:	e0f1      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
 800d41a:	bf00      	nop
 800d41c:	58024400 	.word	0x58024400
 800d420:	03d09000 	.word	0x03d09000
 800d424:	003d0900 	.word	0x003d0900
 800d428:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d42c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d430:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800d434:	430b      	orrs	r3, r1
 800d436:	f040 8091 	bne.w	800d55c <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d43a:	4b73      	ldr	r3, [pc, #460]	@ (800d608 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d43c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d43e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800d442:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d444:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d446:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800d44a:	f000 8081 	beq.w	800d550 <HAL_RCCEx_GetPeriphCLKFreq+0x8e4>
 800d44e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d450:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800d454:	d87f      	bhi.n	800d556 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800d456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d458:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d45c:	d06b      	beq.n	800d536 <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
 800d45e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d460:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d464:	d877      	bhi.n	800d556 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800d466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d468:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d46c:	d056      	beq.n	800d51c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
 800d46e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d470:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d474:	d86f      	bhi.n	800d556 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800d476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d478:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d47c:	d03b      	beq.n	800d4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 800d47e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d480:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d484:	d867      	bhi.n	800d556 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800d486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d488:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d48c:	d021      	beq.n	800d4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 800d48e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d490:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d494:	d85f      	bhi.n	800d556 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800d496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d004      	beq.n	800d4a6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800d49c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d49e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d4a2:	d004      	beq.n	800d4ae <HAL_RCCEx_GetPeriphCLKFreq+0x842>
 800d4a4:	e057      	b.n	800d556 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800d4a6:	f000 f8b9 	bl	800d61c <HAL_RCCEx_GetD3PCLK1Freq>
 800d4aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d4ac:	e0a7      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d4ae:	4b56      	ldr	r3, [pc, #344]	@ (800d608 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d4b6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d4ba:	d107      	bne.n	800d4cc <HAL_RCCEx_GetPeriphCLKFreq+0x860>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d4bc:	f107 0318 	add.w	r3, r7, #24
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f000 f8c1 	bl	800d648 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d4c6:	69fb      	ldr	r3, [r7, #28]
 800d4c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d4ca:	e098      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d4cc:	2300      	movs	r3, #0
 800d4ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d4d0:	e095      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d4d2:	4b4d      	ldr	r3, [pc, #308]	@ (800d608 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d4da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d4de:	d107      	bne.n	800d4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d4e0:	f107 030c 	add.w	r3, r7, #12
 800d4e4:	4618      	mov	r0, r3
 800d4e6:	f000 fa03 	bl	800d8f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d4ea:	693b      	ldr	r3, [r7, #16]
 800d4ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d4ee:	e086      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d4f4:	e083      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d4f6:	4b44      	ldr	r3, [pc, #272]	@ (800d608 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	f003 0304 	and.w	r3, r3, #4
 800d4fe:	2b04      	cmp	r3, #4
 800d500:	d109      	bne.n	800d516 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d502:	4b41      	ldr	r3, [pc, #260]	@ (800d608 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	08db      	lsrs	r3, r3, #3
 800d508:	f003 0303 	and.w	r3, r3, #3
 800d50c:	4a3f      	ldr	r2, [pc, #252]	@ (800d60c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 800d50e:	fa22 f303 	lsr.w	r3, r2, r3
 800d512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d514:	e073      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d516:	2300      	movs	r3, #0
 800d518:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d51a:	e070      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d51c:	4b3a      	ldr	r3, [pc, #232]	@ (800d608 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d524:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d528:	d102      	bne.n	800d530 <HAL_RCCEx_GetPeriphCLKFreq+0x8c4>
        {
          frequency = CSI_VALUE;
 800d52a:	4b39      	ldr	r3, [pc, #228]	@ (800d610 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>)
 800d52c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d52e:	e066      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d530:	2300      	movs	r3, #0
 800d532:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d534:	e063      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d536:	4b34      	ldr	r3, [pc, #208]	@ (800d608 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d53e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d542:	d102      	bne.n	800d54a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
        {
          frequency = HSE_VALUE;
 800d544:	4b33      	ldr	r3, [pc, #204]	@ (800d614 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800d546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d548:	e059      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d54a:	2300      	movs	r3, #0
 800d54c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d54e:	e056      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#if defined(RCC_SPI6CLKSOURCE_PIN)
      case RCC_SPI6CLKSOURCE_PIN: /* External clock is the clock source for SPI6 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800d550:	4b31      	ldr	r3, [pc, #196]	@ (800d618 <HAL_RCCEx_GetPeriphCLKFreq+0x9ac>)
 800d552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d554:	e053      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800d556:	2300      	movs	r3, #0
 800d558:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d55a:	e050      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d55c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d560:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800d564:	430b      	orrs	r3, r1
 800d566:	d148      	bne.n	800d5fa <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d568:	4b27      	ldr	r3, [pc, #156]	@ (800d608 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d56a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d56c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800d570:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800d572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d574:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d578:	d02a      	beq.n	800d5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 800d57a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d57c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d580:	d838      	bhi.n	800d5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800d582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d584:	2b00      	cmp	r3, #0
 800d586:	d004      	beq.n	800d592 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 800d588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d58a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d58e:	d00d      	beq.n	800d5ac <HAL_RCCEx_GetPeriphCLKFreq+0x940>
 800d590:	e030      	b.n	800d5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d592:	4b1d      	ldr	r3, [pc, #116]	@ (800d608 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d59a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d59e:	d102      	bne.n	800d5a6 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
        {
          frequency = HSE_VALUE;
 800d5a0:	4b1c      	ldr	r3, [pc, #112]	@ (800d614 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>)
 800d5a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d5a4:	e02b      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5aa:	e028      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d5ac:	4b16      	ldr	r3, [pc, #88]	@ (800d608 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d5b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d5b8:	d107      	bne.n	800d5ca <HAL_RCCEx_GetPeriphCLKFreq+0x95e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d5ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d5be:	4618      	mov	r0, r3
 800d5c0:	f000 faea 	bl	800db98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d5c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d5c8:	e019      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5ce:	e016      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d5d0:	4b0d      	ldr	r3, [pc, #52]	@ (800d608 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800d5d8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800d5dc:	d107      	bne.n	800d5ee <HAL_RCCEx_GetPeriphCLKFreq+0x982>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d5de:	f107 0318 	add.w	r3, r7, #24
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f000 f830 	bl	800d648 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800d5e8:	69fb      	ldr	r3, [r7, #28]
 800d5ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800d5ec:	e007      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
          frequency = 0;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5f2:	e004      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
      default :
      {
        frequency = 0;
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5f8:	e001      	b.n	800d5fe <HAL_RCCEx_GetPeriphCLKFreq+0x992>
      }
    }
  }
  else
  {
    frequency = 0;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800d5fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d600:	4618      	mov	r0, r3
 800d602:	3740      	adds	r7, #64	@ 0x40
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}
 800d608:	58024400 	.word	0x58024400
 800d60c:	03d09000 	.word	0x03d09000
 800d610:	003d0900 	.word	0x003d0900
 800d614:	007a1200 	.word	0x007a1200
 800d618:	00bb8000 	.word	0x00bb8000

0800d61c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
 800d620:	f7fe f920 	bl	800b864 <HAL_RCC_GetHCLKFreq>
 800d624:	4602      	mov	r2, r0
 800d626:	4b06      	ldr	r3, [pc, #24]	@ (800d640 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d628:	6a1b      	ldr	r3, [r3, #32]
 800d62a:	091b      	lsrs	r3, r3, #4
 800d62c:	f003 0307 	and.w	r3, r3, #7
 800d630:	4904      	ldr	r1, [pc, #16]	@ (800d644 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d632:	5ccb      	ldrb	r3, [r1, r3]
 800d634:	f003 031f 	and.w	r3, r3, #31
 800d638:	fa22 f303 	lsr.w	r3, r2, r3
#endif
}
 800d63c:	4618      	mov	r0, r3
 800d63e:	bd80      	pop	{r7, pc}
 800d640:	58024400 	.word	0x58024400
 800d644:	08013b04 	.word	0x08013b04

0800d648 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800d648:	b480      	push	{r7}
 800d64a:	b089      	sub	sp, #36	@ 0x24
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d650:	4ba1      	ldr	r3, [pc, #644]	@ (800d8d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d654:	f003 0303 	and.w	r3, r3, #3
 800d658:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d65a:	4b9f      	ldr	r3, [pc, #636]	@ (800d8d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d65c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d65e:	0b1b      	lsrs	r3, r3, #12
 800d660:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d664:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d666:	4b9c      	ldr	r3, [pc, #624]	@ (800d8d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d66a:	091b      	lsrs	r3, r3, #4
 800d66c:	f003 0301 	and.w	r3, r3, #1
 800d670:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d672:	4b99      	ldr	r3, [pc, #612]	@ (800d8d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d676:	08db      	lsrs	r3, r3, #3
 800d678:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d67c:	693a      	ldr	r2, [r7, #16]
 800d67e:	fb02 f303 	mul.w	r3, r2, r3
 800d682:	ee07 3a90 	vmov	s15, r3
 800d686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d68a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	2b00      	cmp	r3, #0
 800d692:	f000 8111 	beq.w	800d8b8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d696:	69bb      	ldr	r3, [r7, #24]
 800d698:	2b02      	cmp	r3, #2
 800d69a:	f000 8083 	beq.w	800d7a4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d69e:	69bb      	ldr	r3, [r7, #24]
 800d6a0:	2b02      	cmp	r3, #2
 800d6a2:	f200 80a1 	bhi.w	800d7e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d6a6:	69bb      	ldr	r3, [r7, #24]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d003      	beq.n	800d6b4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d6ac:	69bb      	ldr	r3, [r7, #24]
 800d6ae:	2b01      	cmp	r3, #1
 800d6b0:	d056      	beq.n	800d760 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d6b2:	e099      	b.n	800d7e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d6b4:	4b88      	ldr	r3, [pc, #544]	@ (800d8d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	f003 0320 	and.w	r3, r3, #32
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d02d      	beq.n	800d71c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d6c0:	4b85      	ldr	r3, [pc, #532]	@ (800d8d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	08db      	lsrs	r3, r3, #3
 800d6c6:	f003 0303 	and.w	r3, r3, #3
 800d6ca:	4a84      	ldr	r2, [pc, #528]	@ (800d8dc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d6cc:	fa22 f303 	lsr.w	r3, r2, r3
 800d6d0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	ee07 3a90 	vmov	s15, r3
 800d6d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6dc:	697b      	ldr	r3, [r7, #20]
 800d6de:	ee07 3a90 	vmov	s15, r3
 800d6e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d6e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d6ea:	4b7b      	ldr	r3, [pc, #492]	@ (800d8d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d6ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d6ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d6f2:	ee07 3a90 	vmov	s15, r3
 800d6f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d6fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800d6fe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800d8e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d702:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d706:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d70a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d70e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d712:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d716:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d71a:	e087      	b.n	800d82c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d71c:	697b      	ldr	r3, [r7, #20]
 800d71e:	ee07 3a90 	vmov	s15, r3
 800d722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d726:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800d8e4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d72a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d72e:	4b6a      	ldr	r3, [pc, #424]	@ (800d8d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d736:	ee07 3a90 	vmov	s15, r3
 800d73a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d73e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d742:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800d8e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d74a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d74e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d75a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d75e:	e065      	b.n	800d82c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d760:	697b      	ldr	r3, [r7, #20]
 800d762:	ee07 3a90 	vmov	s15, r3
 800d766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d76a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800d8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d76e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d772:	4b59      	ldr	r3, [pc, #356]	@ (800d8d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d77a:	ee07 3a90 	vmov	s15, r3
 800d77e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d782:	ed97 6a03 	vldr	s12, [r7, #12]
 800d786:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800d8e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d78a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d78e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d792:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d79a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d79e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d7a2:	e043      	b.n	800d82c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d7a4:	697b      	ldr	r3, [r7, #20]
 800d7a6:	ee07 3a90 	vmov	s15, r3
 800d7aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7ae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800d8ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d7b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d7b6:	4b48      	ldr	r3, [pc, #288]	@ (800d8d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d7b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7be:	ee07 3a90 	vmov	s15, r3
 800d7c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d7c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d7ca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800d8e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d7ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d7d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d7d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d7da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d7de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d7e6:	e021      	b.n	800d82c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	ee07 3a90 	vmov	s15, r3
 800d7ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d7f2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800d8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d7f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d7fa:	4b37      	ldr	r3, [pc, #220]	@ (800d8d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d7fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d802:	ee07 3a90 	vmov	s15, r3
 800d806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d80a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d80e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800d8e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d81a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d81e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d822:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d826:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d82a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d82c:	4b2a      	ldr	r3, [pc, #168]	@ (800d8d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d82e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d830:	0a5b      	lsrs	r3, r3, #9
 800d832:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d836:	ee07 3a90 	vmov	s15, r3
 800d83a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d83e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d842:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d846:	edd7 6a07 	vldr	s13, [r7, #28]
 800d84a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d84e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d852:	ee17 2a90 	vmov	r2, s15
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d85a:	4b1f      	ldr	r3, [pc, #124]	@ (800d8d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d85c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d85e:	0c1b      	lsrs	r3, r3, #16
 800d860:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d864:	ee07 3a90 	vmov	s15, r3
 800d868:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d86c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d870:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d874:	edd7 6a07 	vldr	s13, [r7, #28]
 800d878:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d87c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d880:	ee17 2a90 	vmov	r2, s15
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d888:	4b13      	ldr	r3, [pc, #76]	@ (800d8d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d88a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d88c:	0e1b      	lsrs	r3, r3, #24
 800d88e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d892:	ee07 3a90 	vmov	s15, r3
 800d896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d89a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800d89e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d8a2:	edd7 6a07 	vldr	s13, [r7, #28]
 800d8a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d8aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8ae:	ee17 2a90 	vmov	r2, s15
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d8b6:	e008      	b.n	800d8ca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	609a      	str	r2, [r3, #8]
}
 800d8ca:	bf00      	nop
 800d8cc:	3724      	adds	r7, #36	@ 0x24
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d4:	4770      	bx	lr
 800d8d6:	bf00      	nop
 800d8d8:	58024400 	.word	0x58024400
 800d8dc:	03d09000 	.word	0x03d09000
 800d8e0:	46000000 	.word	0x46000000
 800d8e4:	4c742400 	.word	0x4c742400
 800d8e8:	4a742400 	.word	0x4a742400
 800d8ec:	4af42400 	.word	0x4af42400

0800d8f0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d8f0:	b480      	push	{r7}
 800d8f2:	b089      	sub	sp, #36	@ 0x24
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d8f8:	4ba1      	ldr	r3, [pc, #644]	@ (800db80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d8fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8fc:	f003 0303 	and.w	r3, r3, #3
 800d900:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d902:	4b9f      	ldr	r3, [pc, #636]	@ (800db80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d906:	0d1b      	lsrs	r3, r3, #20
 800d908:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d90c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d90e:	4b9c      	ldr	r3, [pc, #624]	@ (800db80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d912:	0a1b      	lsrs	r3, r3, #8
 800d914:	f003 0301 	and.w	r3, r3, #1
 800d918:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d91a:	4b99      	ldr	r3, [pc, #612]	@ (800db80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d91c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d91e:	08db      	lsrs	r3, r3, #3
 800d920:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d924:	693a      	ldr	r2, [r7, #16]
 800d926:	fb02 f303 	mul.w	r3, r2, r3
 800d92a:	ee07 3a90 	vmov	s15, r3
 800d92e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d932:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d936:	697b      	ldr	r3, [r7, #20]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	f000 8111 	beq.w	800db60 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d93e:	69bb      	ldr	r3, [r7, #24]
 800d940:	2b02      	cmp	r3, #2
 800d942:	f000 8083 	beq.w	800da4c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d946:	69bb      	ldr	r3, [r7, #24]
 800d948:	2b02      	cmp	r3, #2
 800d94a:	f200 80a1 	bhi.w	800da90 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d94e:	69bb      	ldr	r3, [r7, #24]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d003      	beq.n	800d95c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d954:	69bb      	ldr	r3, [r7, #24]
 800d956:	2b01      	cmp	r3, #1
 800d958:	d056      	beq.n	800da08 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d95a:	e099      	b.n	800da90 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d95c:	4b88      	ldr	r3, [pc, #544]	@ (800db80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	f003 0320 	and.w	r3, r3, #32
 800d964:	2b00      	cmp	r3, #0
 800d966:	d02d      	beq.n	800d9c4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d968:	4b85      	ldr	r3, [pc, #532]	@ (800db80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	08db      	lsrs	r3, r3, #3
 800d96e:	f003 0303 	and.w	r3, r3, #3
 800d972:	4a84      	ldr	r2, [pc, #528]	@ (800db84 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d974:	fa22 f303 	lsr.w	r3, r2, r3
 800d978:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	ee07 3a90 	vmov	s15, r3
 800d980:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d984:	697b      	ldr	r3, [r7, #20]
 800d986:	ee07 3a90 	vmov	s15, r3
 800d98a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d98e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d992:	4b7b      	ldr	r3, [pc, #492]	@ (800db80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d99a:	ee07 3a90 	vmov	s15, r3
 800d99e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d9a6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800db88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d9aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d9b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9be:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d9c2:	e087      	b.n	800dad4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d9c4:	697b      	ldr	r3, [r7, #20]
 800d9c6:	ee07 3a90 	vmov	s15, r3
 800d9ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9ce:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800db8c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d9d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9d6:	4b6a      	ldr	r3, [pc, #424]	@ (800db80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d9d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d9da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9de:	ee07 3a90 	vmov	s15, r3
 800d9e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d9ea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800db88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d9ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800d9fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da06:	e065      	b.n	800dad4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	ee07 3a90 	vmov	s15, r3
 800da0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da12:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800db90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800da16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da1a:	4b59      	ldr	r3, [pc, #356]	@ (800db80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800da1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da22:	ee07 3a90 	vmov	s15, r3
 800da26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800da2e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800db88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800da32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800da3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da4a:	e043      	b.n	800dad4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800da4c:	697b      	ldr	r3, [r7, #20]
 800da4e:	ee07 3a90 	vmov	s15, r3
 800da52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da56:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800db94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800da5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da5e:	4b48      	ldr	r3, [pc, #288]	@ (800db80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800da60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da66:	ee07 3a90 	vmov	s15, r3
 800da6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800da72:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800db88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800da76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800da82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800da8e:	e021      	b.n	800dad4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800da90:	697b      	ldr	r3, [r7, #20]
 800da92:	ee07 3a90 	vmov	s15, r3
 800da96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da9a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800db90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800da9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800daa2:	4b37      	ldr	r3, [pc, #220]	@ (800db80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800daa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800daa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800daaa:	ee07 3a90 	vmov	s15, r3
 800daae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dab2:	ed97 6a03 	vldr	s12, [r7, #12]
 800dab6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800db88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800daba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dabe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dac2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800daca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dace:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dad2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800dad4:	4b2a      	ldr	r3, [pc, #168]	@ (800db80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dad8:	0a5b      	lsrs	r3, r3, #9
 800dada:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dade:	ee07 3a90 	vmov	s15, r3
 800dae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dae6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800daea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800daee:	edd7 6a07 	vldr	s13, [r7, #28]
 800daf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800daf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dafa:	ee17 2a90 	vmov	r2, s15
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800db02:	4b1f      	ldr	r3, [pc, #124]	@ (800db80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800db04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db06:	0c1b      	lsrs	r3, r3, #16
 800db08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db0c:	ee07 3a90 	vmov	s15, r3
 800db10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800db18:	ee37 7a87 	vadd.f32	s14, s15, s14
 800db1c:	edd7 6a07 	vldr	s13, [r7, #28]
 800db20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db28:	ee17 2a90 	vmov	r2, s15
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800db30:	4b13      	ldr	r3, [pc, #76]	@ (800db80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800db32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800db34:	0e1b      	lsrs	r3, r3, #24
 800db36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db3a:	ee07 3a90 	vmov	s15, r3
 800db3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800db46:	ee37 7a87 	vadd.f32	s14, s15, s14
 800db4a:	edd7 6a07 	vldr	s13, [r7, #28]
 800db4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db56:	ee17 2a90 	vmov	r2, s15
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800db5e:	e008      	b.n	800db72 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2200      	movs	r2, #0
 800db64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	2200      	movs	r2, #0
 800db6a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2200      	movs	r2, #0
 800db70:	609a      	str	r2, [r3, #8]
}
 800db72:	bf00      	nop
 800db74:	3724      	adds	r7, #36	@ 0x24
 800db76:	46bd      	mov	sp, r7
 800db78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7c:	4770      	bx	lr
 800db7e:	bf00      	nop
 800db80:	58024400 	.word	0x58024400
 800db84:	03d09000 	.word	0x03d09000
 800db88:	46000000 	.word	0x46000000
 800db8c:	4c742400 	.word	0x4c742400
 800db90:	4a742400 	.word	0x4a742400
 800db94:	4af42400 	.word	0x4af42400

0800db98 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800db98:	b480      	push	{r7}
 800db9a:	b089      	sub	sp, #36	@ 0x24
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800dba0:	4ba0      	ldr	r3, [pc, #640]	@ (800de24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dba4:	f003 0303 	and.w	r3, r3, #3
 800dba8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800dbaa:	4b9e      	ldr	r3, [pc, #632]	@ (800de24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dbac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dbae:	091b      	lsrs	r3, r3, #4
 800dbb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dbb4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800dbb6:	4b9b      	ldr	r3, [pc, #620]	@ (800de24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dbb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dbba:	f003 0301 	and.w	r3, r3, #1
 800dbbe:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800dbc0:	4b98      	ldr	r3, [pc, #608]	@ (800de24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dbc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dbc4:	08db      	lsrs	r3, r3, #3
 800dbc6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dbca:	693a      	ldr	r2, [r7, #16]
 800dbcc:	fb02 f303 	mul.w	r3, r2, r3
 800dbd0:	ee07 3a90 	vmov	s15, r3
 800dbd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbd8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800dbdc:	697b      	ldr	r3, [r7, #20]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	f000 8111 	beq.w	800de06 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800dbe4:	69bb      	ldr	r3, [r7, #24]
 800dbe6:	2b02      	cmp	r3, #2
 800dbe8:	f000 8083 	beq.w	800dcf2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800dbec:	69bb      	ldr	r3, [r7, #24]
 800dbee:	2b02      	cmp	r3, #2
 800dbf0:	f200 80a1 	bhi.w	800dd36 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800dbf4:	69bb      	ldr	r3, [r7, #24]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d003      	beq.n	800dc02 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800dbfa:	69bb      	ldr	r3, [r7, #24]
 800dbfc:	2b01      	cmp	r3, #1
 800dbfe:	d056      	beq.n	800dcae <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800dc00:	e099      	b.n	800dd36 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dc02:	4b88      	ldr	r3, [pc, #544]	@ (800de24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	f003 0320 	and.w	r3, r3, #32
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d02d      	beq.n	800dc6a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800dc0e:	4b85      	ldr	r3, [pc, #532]	@ (800de24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	08db      	lsrs	r3, r3, #3
 800dc14:	f003 0303 	and.w	r3, r3, #3
 800dc18:	4a83      	ldr	r2, [pc, #524]	@ (800de28 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800dc1a:	fa22 f303 	lsr.w	r3, r2, r3
 800dc1e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dc20:	68bb      	ldr	r3, [r7, #8]
 800dc22:	ee07 3a90 	vmov	s15, r3
 800dc26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc2a:	697b      	ldr	r3, [r7, #20]
 800dc2c:	ee07 3a90 	vmov	s15, r3
 800dc30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc38:	4b7a      	ldr	r3, [pc, #488]	@ (800de24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dc3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc40:	ee07 3a90 	vmov	s15, r3
 800dc44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc48:	ed97 6a03 	vldr	s12, [r7, #12]
 800dc4c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800de2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dc50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dc5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc60:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc64:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800dc68:	e087      	b.n	800dd7a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dc6a:	697b      	ldr	r3, [r7, #20]
 800dc6c:	ee07 3a90 	vmov	s15, r3
 800dc70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc74:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800de30 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800dc78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc7c:	4b69      	ldr	r3, [pc, #420]	@ (800de24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dc7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc84:	ee07 3a90 	vmov	s15, r3
 800dc88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc8c:	ed97 6a03 	vldr	s12, [r7, #12]
 800dc90:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800de2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dc94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dca0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dca4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dca8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dcac:	e065      	b.n	800dd7a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dcae:	697b      	ldr	r3, [r7, #20]
 800dcb0:	ee07 3a90 	vmov	s15, r3
 800dcb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcb8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800de34 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800dcbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dcc0:	4b58      	ldr	r3, [pc, #352]	@ (800de24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dcc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dcc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcc8:	ee07 3a90 	vmov	s15, r3
 800dccc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dcd0:	ed97 6a03 	vldr	s12, [r7, #12]
 800dcd4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800de2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dcd8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dcdc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dce0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dce4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dce8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dcec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dcf0:	e043      	b.n	800dd7a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dcf2:	697b      	ldr	r3, [r7, #20]
 800dcf4:	ee07 3a90 	vmov	s15, r3
 800dcf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcfc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800de38 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800dd00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd04:	4b47      	ldr	r3, [pc, #284]	@ (800de24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dd06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd0c:	ee07 3a90 	vmov	s15, r3
 800dd10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd14:	ed97 6a03 	vldr	s12, [r7, #12]
 800dd18:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800de2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dd1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dd28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dd34:	e021      	b.n	800dd7a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800dd36:	697b      	ldr	r3, [r7, #20]
 800dd38:	ee07 3a90 	vmov	s15, r3
 800dd3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd40:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800de30 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800dd44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd48:	4b36      	ldr	r3, [pc, #216]	@ (800de24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dd4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd50:	ee07 3a90 	vmov	s15, r3
 800dd54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd58:	ed97 6a03 	vldr	s12, [r7, #12]
 800dd5c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800de2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800dd60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800dd6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd70:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800dd78:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800dd7a:	4b2a      	ldr	r3, [pc, #168]	@ (800de24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800dd7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd7e:	0a5b      	lsrs	r3, r3, #9
 800dd80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dd84:	ee07 3a90 	vmov	s15, r3
 800dd88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800dd90:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dd94:	edd7 6a07 	vldr	s13, [r7, #28]
 800dd98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dd9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dda0:	ee17 2a90 	vmov	r2, s15
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800dda8:	4b1e      	ldr	r3, [pc, #120]	@ (800de24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ddaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddac:	0c1b      	lsrs	r3, r3, #16
 800ddae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ddb2:	ee07 3a90 	vmov	s15, r3
 800ddb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ddba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ddbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ddc2:	edd7 6a07 	vldr	s13, [r7, #28]
 800ddc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ddca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ddce:	ee17 2a90 	vmov	r2, s15
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800ddd6:	4b13      	ldr	r3, [pc, #76]	@ (800de24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ddd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddda:	0e1b      	lsrs	r3, r3, #24
 800dddc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dde0:	ee07 3a90 	vmov	s15, r3
 800dde4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dde8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ddec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ddf0:	edd7 6a07 	vldr	s13, [r7, #28]
 800ddf4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ddf8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ddfc:	ee17 2a90 	vmov	r2, s15
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800de04:	e008      	b.n	800de18 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	2200      	movs	r2, #0
 800de0a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2200      	movs	r2, #0
 800de10:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	2200      	movs	r2, #0
 800de16:	609a      	str	r2, [r3, #8]
}
 800de18:	bf00      	nop
 800de1a:	3724      	adds	r7, #36	@ 0x24
 800de1c:	46bd      	mov	sp, r7
 800de1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de22:	4770      	bx	lr
 800de24:	58024400 	.word	0x58024400
 800de28:	03d09000 	.word	0x03d09000
 800de2c:	46000000 	.word	0x46000000
 800de30:	4c742400 	.word	0x4c742400
 800de34:	4a742400 	.word	0x4a742400
 800de38:	4af42400 	.word	0x4af42400

0800de3c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b084      	sub	sp, #16
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
 800de44:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800de46:	2300      	movs	r3, #0
 800de48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800de4a:	4b53      	ldr	r3, [pc, #332]	@ (800df98 <RCCEx_PLL2_Config+0x15c>)
 800de4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de4e:	f003 0303 	and.w	r3, r3, #3
 800de52:	2b03      	cmp	r3, #3
 800de54:	d101      	bne.n	800de5a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800de56:	2301      	movs	r3, #1
 800de58:	e099      	b.n	800df8e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800de5a:	4b4f      	ldr	r3, [pc, #316]	@ (800df98 <RCCEx_PLL2_Config+0x15c>)
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	4a4e      	ldr	r2, [pc, #312]	@ (800df98 <RCCEx_PLL2_Config+0x15c>)
 800de60:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800de64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800de66:	f7f5 f999 	bl	800319c <HAL_GetTick>
 800de6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800de6c:	e008      	b.n	800de80 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800de6e:	f7f5 f995 	bl	800319c <HAL_GetTick>
 800de72:	4602      	mov	r2, r0
 800de74:	68bb      	ldr	r3, [r7, #8]
 800de76:	1ad3      	subs	r3, r2, r3
 800de78:	2b02      	cmp	r3, #2
 800de7a:	d901      	bls.n	800de80 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800de7c:	2303      	movs	r3, #3
 800de7e:	e086      	b.n	800df8e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800de80:	4b45      	ldr	r3, [pc, #276]	@ (800df98 <RCCEx_PLL2_Config+0x15c>)
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d1f0      	bne.n	800de6e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800de8c:	4b42      	ldr	r3, [pc, #264]	@ (800df98 <RCCEx_PLL2_Config+0x15c>)
 800de8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de90:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	031b      	lsls	r3, r3, #12
 800de9a:	493f      	ldr	r1, [pc, #252]	@ (800df98 <RCCEx_PLL2_Config+0x15c>)
 800de9c:	4313      	orrs	r3, r2
 800de9e:	628b      	str	r3, [r1, #40]	@ 0x28
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	685b      	ldr	r3, [r3, #4]
 800dea4:	3b01      	subs	r3, #1
 800dea6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	689b      	ldr	r3, [r3, #8]
 800deae:	3b01      	subs	r3, #1
 800deb0:	025b      	lsls	r3, r3, #9
 800deb2:	b29b      	uxth	r3, r3
 800deb4:	431a      	orrs	r2, r3
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	68db      	ldr	r3, [r3, #12]
 800deba:	3b01      	subs	r3, #1
 800debc:	041b      	lsls	r3, r3, #16
 800debe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800dec2:	431a      	orrs	r2, r3
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	691b      	ldr	r3, [r3, #16]
 800dec8:	3b01      	subs	r3, #1
 800deca:	061b      	lsls	r3, r3, #24
 800decc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800ded0:	4931      	ldr	r1, [pc, #196]	@ (800df98 <RCCEx_PLL2_Config+0x15c>)
 800ded2:	4313      	orrs	r3, r2
 800ded4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ded6:	4b30      	ldr	r3, [pc, #192]	@ (800df98 <RCCEx_PLL2_Config+0x15c>)
 800ded8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800deda:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	695b      	ldr	r3, [r3, #20]
 800dee2:	492d      	ldr	r1, [pc, #180]	@ (800df98 <RCCEx_PLL2_Config+0x15c>)
 800dee4:	4313      	orrs	r3, r2
 800dee6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800dee8:	4b2b      	ldr	r3, [pc, #172]	@ (800df98 <RCCEx_PLL2_Config+0x15c>)
 800deea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800deec:	f023 0220 	bic.w	r2, r3, #32
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	699b      	ldr	r3, [r3, #24]
 800def4:	4928      	ldr	r1, [pc, #160]	@ (800df98 <RCCEx_PLL2_Config+0x15c>)
 800def6:	4313      	orrs	r3, r2
 800def8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800defa:	4b27      	ldr	r3, [pc, #156]	@ (800df98 <RCCEx_PLL2_Config+0x15c>)
 800defc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800defe:	4a26      	ldr	r2, [pc, #152]	@ (800df98 <RCCEx_PLL2_Config+0x15c>)
 800df00:	f023 0310 	bic.w	r3, r3, #16
 800df04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800df06:	4b24      	ldr	r3, [pc, #144]	@ (800df98 <RCCEx_PLL2_Config+0x15c>)
 800df08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800df0a:	4b24      	ldr	r3, [pc, #144]	@ (800df9c <RCCEx_PLL2_Config+0x160>)
 800df0c:	4013      	ands	r3, r2
 800df0e:	687a      	ldr	r2, [r7, #4]
 800df10:	69d2      	ldr	r2, [r2, #28]
 800df12:	00d2      	lsls	r2, r2, #3
 800df14:	4920      	ldr	r1, [pc, #128]	@ (800df98 <RCCEx_PLL2_Config+0x15c>)
 800df16:	4313      	orrs	r3, r2
 800df18:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800df1a:	4b1f      	ldr	r3, [pc, #124]	@ (800df98 <RCCEx_PLL2_Config+0x15c>)
 800df1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df1e:	4a1e      	ldr	r2, [pc, #120]	@ (800df98 <RCCEx_PLL2_Config+0x15c>)
 800df20:	f043 0310 	orr.w	r3, r3, #16
 800df24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d106      	bne.n	800df3a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800df2c:	4b1a      	ldr	r3, [pc, #104]	@ (800df98 <RCCEx_PLL2_Config+0x15c>)
 800df2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df30:	4a19      	ldr	r2, [pc, #100]	@ (800df98 <RCCEx_PLL2_Config+0x15c>)
 800df32:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800df36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800df38:	e00f      	b.n	800df5a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800df3a:	683b      	ldr	r3, [r7, #0]
 800df3c:	2b01      	cmp	r3, #1
 800df3e:	d106      	bne.n	800df4e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800df40:	4b15      	ldr	r3, [pc, #84]	@ (800df98 <RCCEx_PLL2_Config+0x15c>)
 800df42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df44:	4a14      	ldr	r2, [pc, #80]	@ (800df98 <RCCEx_PLL2_Config+0x15c>)
 800df46:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800df4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800df4c:	e005      	b.n	800df5a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800df4e:	4b12      	ldr	r3, [pc, #72]	@ (800df98 <RCCEx_PLL2_Config+0x15c>)
 800df50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df52:	4a11      	ldr	r2, [pc, #68]	@ (800df98 <RCCEx_PLL2_Config+0x15c>)
 800df54:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800df58:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800df5a:	4b0f      	ldr	r3, [pc, #60]	@ (800df98 <RCCEx_PLL2_Config+0x15c>)
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	4a0e      	ldr	r2, [pc, #56]	@ (800df98 <RCCEx_PLL2_Config+0x15c>)
 800df60:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800df64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800df66:	f7f5 f919 	bl	800319c <HAL_GetTick>
 800df6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800df6c:	e008      	b.n	800df80 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800df6e:	f7f5 f915 	bl	800319c <HAL_GetTick>
 800df72:	4602      	mov	r2, r0
 800df74:	68bb      	ldr	r3, [r7, #8]
 800df76:	1ad3      	subs	r3, r2, r3
 800df78:	2b02      	cmp	r3, #2
 800df7a:	d901      	bls.n	800df80 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800df7c:	2303      	movs	r3, #3
 800df7e:	e006      	b.n	800df8e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800df80:	4b05      	ldr	r3, [pc, #20]	@ (800df98 <RCCEx_PLL2_Config+0x15c>)
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d0f0      	beq.n	800df6e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800df8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800df8e:	4618      	mov	r0, r3
 800df90:	3710      	adds	r7, #16
 800df92:	46bd      	mov	sp, r7
 800df94:	bd80      	pop	{r7, pc}
 800df96:	bf00      	nop
 800df98:	58024400 	.word	0x58024400
 800df9c:	ffff0007 	.word	0xffff0007

0800dfa0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b084      	sub	sp, #16
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
 800dfa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dfaa:	2300      	movs	r3, #0
 800dfac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dfae:	4b53      	ldr	r3, [pc, #332]	@ (800e0fc <RCCEx_PLL3_Config+0x15c>)
 800dfb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dfb2:	f003 0303 	and.w	r3, r3, #3
 800dfb6:	2b03      	cmp	r3, #3
 800dfb8:	d101      	bne.n	800dfbe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800dfba:	2301      	movs	r3, #1
 800dfbc:	e099      	b.n	800e0f2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800dfbe:	4b4f      	ldr	r3, [pc, #316]	@ (800e0fc <RCCEx_PLL3_Config+0x15c>)
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	4a4e      	ldr	r2, [pc, #312]	@ (800e0fc <RCCEx_PLL3_Config+0x15c>)
 800dfc4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800dfc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dfca:	f7f5 f8e7 	bl	800319c <HAL_GetTick>
 800dfce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dfd0:	e008      	b.n	800dfe4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800dfd2:	f7f5 f8e3 	bl	800319c <HAL_GetTick>
 800dfd6:	4602      	mov	r2, r0
 800dfd8:	68bb      	ldr	r3, [r7, #8]
 800dfda:	1ad3      	subs	r3, r2, r3
 800dfdc:	2b02      	cmp	r3, #2
 800dfde:	d901      	bls.n	800dfe4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800dfe0:	2303      	movs	r3, #3
 800dfe2:	e086      	b.n	800e0f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dfe4:	4b45      	ldr	r3, [pc, #276]	@ (800e0fc <RCCEx_PLL3_Config+0x15c>)
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d1f0      	bne.n	800dfd2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800dff0:	4b42      	ldr	r3, [pc, #264]	@ (800e0fc <RCCEx_PLL3_Config+0x15c>)
 800dff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dff4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	051b      	lsls	r3, r3, #20
 800dffe:	493f      	ldr	r1, [pc, #252]	@ (800e0fc <RCCEx_PLL3_Config+0x15c>)
 800e000:	4313      	orrs	r3, r2
 800e002:	628b      	str	r3, [r1, #40]	@ 0x28
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	685b      	ldr	r3, [r3, #4]
 800e008:	3b01      	subs	r3, #1
 800e00a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	689b      	ldr	r3, [r3, #8]
 800e012:	3b01      	subs	r3, #1
 800e014:	025b      	lsls	r3, r3, #9
 800e016:	b29b      	uxth	r3, r3
 800e018:	431a      	orrs	r2, r3
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	68db      	ldr	r3, [r3, #12]
 800e01e:	3b01      	subs	r3, #1
 800e020:	041b      	lsls	r3, r3, #16
 800e022:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800e026:	431a      	orrs	r2, r3
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	691b      	ldr	r3, [r3, #16]
 800e02c:	3b01      	subs	r3, #1
 800e02e:	061b      	lsls	r3, r3, #24
 800e030:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800e034:	4931      	ldr	r1, [pc, #196]	@ (800e0fc <RCCEx_PLL3_Config+0x15c>)
 800e036:	4313      	orrs	r3, r2
 800e038:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800e03a:	4b30      	ldr	r3, [pc, #192]	@ (800e0fc <RCCEx_PLL3_Config+0x15c>)
 800e03c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e03e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	695b      	ldr	r3, [r3, #20]
 800e046:	492d      	ldr	r1, [pc, #180]	@ (800e0fc <RCCEx_PLL3_Config+0x15c>)
 800e048:	4313      	orrs	r3, r2
 800e04a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800e04c:	4b2b      	ldr	r3, [pc, #172]	@ (800e0fc <RCCEx_PLL3_Config+0x15c>)
 800e04e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e050:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	699b      	ldr	r3, [r3, #24]
 800e058:	4928      	ldr	r1, [pc, #160]	@ (800e0fc <RCCEx_PLL3_Config+0x15c>)
 800e05a:	4313      	orrs	r3, r2
 800e05c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800e05e:	4b27      	ldr	r3, [pc, #156]	@ (800e0fc <RCCEx_PLL3_Config+0x15c>)
 800e060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e062:	4a26      	ldr	r2, [pc, #152]	@ (800e0fc <RCCEx_PLL3_Config+0x15c>)
 800e064:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e068:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e06a:	4b24      	ldr	r3, [pc, #144]	@ (800e0fc <RCCEx_PLL3_Config+0x15c>)
 800e06c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e06e:	4b24      	ldr	r3, [pc, #144]	@ (800e100 <RCCEx_PLL3_Config+0x160>)
 800e070:	4013      	ands	r3, r2
 800e072:	687a      	ldr	r2, [r7, #4]
 800e074:	69d2      	ldr	r2, [r2, #28]
 800e076:	00d2      	lsls	r2, r2, #3
 800e078:	4920      	ldr	r1, [pc, #128]	@ (800e0fc <RCCEx_PLL3_Config+0x15c>)
 800e07a:	4313      	orrs	r3, r2
 800e07c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800e07e:	4b1f      	ldr	r3, [pc, #124]	@ (800e0fc <RCCEx_PLL3_Config+0x15c>)
 800e080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e082:	4a1e      	ldr	r2, [pc, #120]	@ (800e0fc <RCCEx_PLL3_Config+0x15c>)
 800e084:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800e088:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e08a:	683b      	ldr	r3, [r7, #0]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d106      	bne.n	800e09e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e090:	4b1a      	ldr	r3, [pc, #104]	@ (800e0fc <RCCEx_PLL3_Config+0x15c>)
 800e092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e094:	4a19      	ldr	r2, [pc, #100]	@ (800e0fc <RCCEx_PLL3_Config+0x15c>)
 800e096:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800e09a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e09c:	e00f      	b.n	800e0be <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e09e:	683b      	ldr	r3, [r7, #0]
 800e0a0:	2b01      	cmp	r3, #1
 800e0a2:	d106      	bne.n	800e0b2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800e0a4:	4b15      	ldr	r3, [pc, #84]	@ (800e0fc <RCCEx_PLL3_Config+0x15c>)
 800e0a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0a8:	4a14      	ldr	r2, [pc, #80]	@ (800e0fc <RCCEx_PLL3_Config+0x15c>)
 800e0aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800e0ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800e0b0:	e005      	b.n	800e0be <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800e0b2:	4b12      	ldr	r3, [pc, #72]	@ (800e0fc <RCCEx_PLL3_Config+0x15c>)
 800e0b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0b6:	4a11      	ldr	r2, [pc, #68]	@ (800e0fc <RCCEx_PLL3_Config+0x15c>)
 800e0b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e0bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800e0be:	4b0f      	ldr	r3, [pc, #60]	@ (800e0fc <RCCEx_PLL3_Config+0x15c>)
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	4a0e      	ldr	r2, [pc, #56]	@ (800e0fc <RCCEx_PLL3_Config+0x15c>)
 800e0c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e0c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e0ca:	f7f5 f867 	bl	800319c <HAL_GetTick>
 800e0ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e0d0:	e008      	b.n	800e0e4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e0d2:	f7f5 f863 	bl	800319c <HAL_GetTick>
 800e0d6:	4602      	mov	r2, r0
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	1ad3      	subs	r3, r2, r3
 800e0dc:	2b02      	cmp	r3, #2
 800e0de:	d901      	bls.n	800e0e4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e0e0:	2303      	movs	r3, #3
 800e0e2:	e006      	b.n	800e0f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e0e4:	4b05      	ldr	r3, [pc, #20]	@ (800e0fc <RCCEx_PLL3_Config+0x15c>)
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d0f0      	beq.n	800e0d2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800e0f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	3710      	adds	r7, #16
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd80      	pop	{r7, pc}
 800e0fa:	bf00      	nop
 800e0fc:	58024400 	.word	0x58024400
 800e100:	ffff0007 	.word	0xffff0007

0800e104 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b084      	sub	sp, #16
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d101      	bne.n	800e116 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800e112:	2301      	movs	r3, #1
 800e114:	e10f      	b.n	800e336 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2200      	movs	r2, #0
 800e11a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	681b      	ldr	r3, [r3, #0]
 800e120:	4a87      	ldr	r2, [pc, #540]	@ (800e340 <HAL_SPI_Init+0x23c>)
 800e122:	4293      	cmp	r3, r2
 800e124:	d00f      	beq.n	800e146 <HAL_SPI_Init+0x42>
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	4a86      	ldr	r2, [pc, #536]	@ (800e344 <HAL_SPI_Init+0x240>)
 800e12c:	4293      	cmp	r3, r2
 800e12e:	d00a      	beq.n	800e146 <HAL_SPI_Init+0x42>
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	4a84      	ldr	r2, [pc, #528]	@ (800e348 <HAL_SPI_Init+0x244>)
 800e136:	4293      	cmp	r3, r2
 800e138:	d005      	beq.n	800e146 <HAL_SPI_Init+0x42>
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	68db      	ldr	r3, [r3, #12]
 800e13e:	2b0f      	cmp	r3, #15
 800e140:	d901      	bls.n	800e146 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800e142:	2301      	movs	r3, #1
 800e144:	e0f7      	b.n	800e336 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e146:	6878      	ldr	r0, [r7, #4]
 800e148:	f001 f8fc 	bl	800f344 <SPI_GetPacketSize>
 800e14c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	4a7b      	ldr	r2, [pc, #492]	@ (800e340 <HAL_SPI_Init+0x23c>)
 800e154:	4293      	cmp	r3, r2
 800e156:	d00c      	beq.n	800e172 <HAL_SPI_Init+0x6e>
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	4a79      	ldr	r2, [pc, #484]	@ (800e344 <HAL_SPI_Init+0x240>)
 800e15e:	4293      	cmp	r3, r2
 800e160:	d007      	beq.n	800e172 <HAL_SPI_Init+0x6e>
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	4a78      	ldr	r2, [pc, #480]	@ (800e348 <HAL_SPI_Init+0x244>)
 800e168:	4293      	cmp	r3, r2
 800e16a:	d002      	beq.n	800e172 <HAL_SPI_Init+0x6e>
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	2b08      	cmp	r3, #8
 800e170:	d811      	bhi.n	800e196 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e176:	4a72      	ldr	r2, [pc, #456]	@ (800e340 <HAL_SPI_Init+0x23c>)
 800e178:	4293      	cmp	r3, r2
 800e17a:	d009      	beq.n	800e190 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	4a70      	ldr	r2, [pc, #448]	@ (800e344 <HAL_SPI_Init+0x240>)
 800e182:	4293      	cmp	r3, r2
 800e184:	d004      	beq.n	800e190 <HAL_SPI_Init+0x8c>
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	4a6f      	ldr	r2, [pc, #444]	@ (800e348 <HAL_SPI_Init+0x244>)
 800e18c:	4293      	cmp	r3, r2
 800e18e:	d104      	bne.n	800e19a <HAL_SPI_Init+0x96>
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	2b10      	cmp	r3, #16
 800e194:	d901      	bls.n	800e19a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800e196:	2301      	movs	r3, #1
 800e198:	e0cd      	b.n	800e336 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e1a0:	b2db      	uxtb	r3, r3
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d106      	bne.n	800e1b4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f7f4 fd18 	bl	8002be4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2202      	movs	r2, #2
 800e1b8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	681a      	ldr	r2, [r3, #0]
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	f022 0201 	bic.w	r2, r2, #1
 800e1ca:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	689b      	ldr	r3, [r3, #8]
 800e1d2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 800e1d6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	699b      	ldr	r3, [r3, #24]
 800e1dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e1e0:	d119      	bne.n	800e216 <HAL_SPI_Init+0x112>
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	685b      	ldr	r3, [r3, #4]
 800e1e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e1ea:	d103      	bne.n	800e1f4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d008      	beq.n	800e206 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d10c      	bne.n	800e216 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800e200:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e204:	d107      	bne.n	800e216 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	681a      	ldr	r2, [r3, #0]
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800e214:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	685b      	ldr	r3, [r3, #4]
 800e21a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d00f      	beq.n	800e242 <HAL_SPI_Init+0x13e>
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	68db      	ldr	r3, [r3, #12]
 800e226:	2b06      	cmp	r3, #6
 800e228:	d90b      	bls.n	800e242 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	430a      	orrs	r2, r1
 800e23e:	601a      	str	r2, [r3, #0]
 800e240:	e007      	b.n	800e252 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	681a      	ldr	r2, [r3, #0]
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800e250:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	69da      	ldr	r2, [r3, #28]
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e25a:	431a      	orrs	r2, r3
 800e25c:	68bb      	ldr	r3, [r7, #8]
 800e25e:	431a      	orrs	r2, r3
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e264:	ea42 0103 	orr.w	r1, r2, r3
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	68da      	ldr	r2, [r3, #12]
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	430a      	orrs	r2, r1
 800e272:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e27c:	431a      	orrs	r2, r3
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e282:	431a      	orrs	r2, r3
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	699b      	ldr	r3, [r3, #24]
 800e288:	431a      	orrs	r2, r3
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	691b      	ldr	r3, [r3, #16]
 800e28e:	431a      	orrs	r2, r3
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	695b      	ldr	r3, [r3, #20]
 800e294:	431a      	orrs	r2, r3
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6a1b      	ldr	r3, [r3, #32]
 800e29a:	431a      	orrs	r2, r3
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	685b      	ldr	r3, [r3, #4]
 800e2a0:	431a      	orrs	r2, r3
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e2a6:	431a      	orrs	r2, r3
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	689b      	ldr	r3, [r3, #8]
 800e2ac:	431a      	orrs	r2, r3
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e2b2:	ea42 0103 	orr.w	r1, r2, r3
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	430a      	orrs	r2, r1
 800e2c0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	685b      	ldr	r3, [r3, #4]
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d113      	bne.n	800e2f2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	689b      	ldr	r3, [r3, #8]
 800e2d0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e2dc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	689b      	ldr	r3, [r3, #8]
 800e2e4:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800e2f0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	f022 0201 	bic.w	r2, r2, #1
 800e300:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	685b      	ldr	r3, [r3, #4]
 800e306:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d00a      	beq.n	800e324 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	68db      	ldr	r3, [r3, #12]
 800e314:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	430a      	orrs	r2, r1
 800e322:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	2200      	movs	r2, #0
 800e328:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	2201      	movs	r2, #1
 800e330:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 800e334:	2300      	movs	r3, #0
}
 800e336:	4618      	mov	r0, r3
 800e338:	3710      	adds	r7, #16
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd80      	pop	{r7, pc}
 800e33e:	bf00      	nop
 800e340:	40013000 	.word	0x40013000
 800e344:	40003800 	.word	0x40003800
 800e348:	40003c00 	.word	0x40003c00

0800e34c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b088      	sub	sp, #32
 800e350:	af02      	add	r7, sp, #8
 800e352:	60f8      	str	r0, [r7, #12]
 800e354:	60b9      	str	r1, [r7, #8]
 800e356:	603b      	str	r3, [r7, #0]
 800e358:	4613      	mov	r3, r2
 800e35a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	3320      	adds	r3, #32
 800e362:	617b      	str	r3, [r7, #20]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e364:	f7f4 ff1a 	bl	800319c <HAL_GetTick>
 800e368:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e370:	b2db      	uxtb	r3, r3
 800e372:	2b01      	cmp	r3, #1
 800e374:	d001      	beq.n	800e37a <HAL_SPI_Transmit+0x2e>
  {
    return HAL_BUSY;
 800e376:	2302      	movs	r3, #2
 800e378:	e1d1      	b.n	800e71e <HAL_SPI_Transmit+0x3d2>
  }

  if ((pData == NULL) || (Size == 0UL))
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d002      	beq.n	800e386 <HAL_SPI_Transmit+0x3a>
 800e380:	88fb      	ldrh	r3, [r7, #6]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d101      	bne.n	800e38a <HAL_SPI_Transmit+0x3e>
  {
    return HAL_ERROR;
 800e386:	2301      	movs	r3, #1
 800e388:	e1c9      	b.n	800e71e <HAL_SPI_Transmit+0x3d2>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800e390:	2b01      	cmp	r3, #1
 800e392:	d101      	bne.n	800e398 <HAL_SPI_Transmit+0x4c>
 800e394:	2302      	movs	r3, #2
 800e396:	e1c2      	b.n	800e71e <HAL_SPI_Transmit+0x3d2>
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	2201      	movs	r2, #1
 800e39c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	2203      	movs	r2, #3
 800e3a4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	68ba      	ldr	r2, [r7, #8]
 800e3b4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferSize  = Size;
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	88fa      	ldrh	r2, [r7, #6]
 800e3ba:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  hspi->TxXferCount = Size;
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	88fa      	ldrh	r2, [r7, #6]
 800e3c2:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	2200      	movs	r2, #0
 800e3ca:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxISR       = NULL;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	2200      	movs	r2, #0
 800e3e0:	675a      	str	r2, [r3, #116]	@ 0x74
  hspi->RxISR       = NULL;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	689b      	ldr	r3, [r3, #8]
 800e3ec:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
 800e3f0:	d108      	bne.n	800e404 <HAL_SPI_Transmit+0xb8>
  {
    SPI_1LINE_TX(hspi);
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	681a      	ldr	r2, [r3, #0]
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e400:	601a      	str	r2, [r3, #0]
 800e402:	e009      	b.n	800e418 <HAL_SPI_Transmit+0xcc>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	68db      	ldr	r3, [r3, #12]
 800e40a:	f423 22c0 	bic.w	r2, r3, #393216	@ 0x60000
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800e416:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	685a      	ldr	r2, [r3, #4]
 800e41e:	4b96      	ldr	r3, [pc, #600]	@ (800e678 <HAL_SPI_Transmit+0x32c>)
 800e420:	4013      	ands	r3, r2
 800e422:	88f9      	ldrh	r1, [r7, #6]
 800e424:	68fa      	ldr	r2, [r7, #12]
 800e426:	6812      	ldr	r2, [r2, #0]
 800e428:	430b      	orrs	r3, r1
 800e42a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	681a      	ldr	r2, [r3, #0]
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	f042 0201 	orr.w	r2, r2, #1
 800e43a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	685b      	ldr	r3, [r3, #4]
 800e440:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e444:	d107      	bne.n	800e456 <HAL_SPI_Transmit+0x10a>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	681a      	ldr	r2, [r3, #0]
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e454:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	68db      	ldr	r3, [r3, #12]
 800e45a:	2b0f      	cmp	r3, #15
 800e45c:	d947      	bls.n	800e4ee <HAL_SPI_Transmit+0x1a2>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800e45e:	e03f      	b.n	800e4e0 <HAL_SPI_Transmit+0x194>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	695b      	ldr	r3, [r3, #20]
 800e466:	f003 0302 	and.w	r3, r3, #2
 800e46a:	2b02      	cmp	r3, #2
 800e46c:	d114      	bne.n	800e498 <HAL_SPI_Transmit+0x14c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	6812      	ldr	r2, [r2, #0]
 800e478:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e47e:	1d1a      	adds	r2, r3, #4
 800e480:	68fb      	ldr	r3, [r7, #12]
 800e482:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e48a:	b29b      	uxth	r3, r3
 800e48c:	3b01      	subs	r3, #1
 800e48e:	b29a      	uxth	r2, r3
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800e496:	e023      	b.n	800e4e0 <HAL_SPI_Transmit+0x194>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e498:	f7f4 fe80 	bl	800319c <HAL_GetTick>
 800e49c:	4602      	mov	r2, r0
 800e49e:	693b      	ldr	r3, [r7, #16]
 800e4a0:	1ad3      	subs	r3, r2, r3
 800e4a2:	683a      	ldr	r2, [r7, #0]
 800e4a4:	429a      	cmp	r2, r3
 800e4a6:	d803      	bhi.n	800e4b0 <HAL_SPI_Transmit+0x164>
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4ae:	d102      	bne.n	800e4b6 <HAL_SPI_Transmit+0x16a>
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d114      	bne.n	800e4e0 <HAL_SPI_Transmit+0x194>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e4b6:	68f8      	ldr	r0, [r7, #12]
 800e4b8:	f000 fe76 	bl	800f1a8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e4c2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	2201      	movs	r2, #1
 800e4d0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	2200      	movs	r2, #0
 800e4d8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800e4dc:	2303      	movs	r3, #3
 800e4de:	e11e      	b.n	800e71e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e4e6:	b29b      	uxth	r3, r3
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d1b9      	bne.n	800e460 <HAL_SPI_Transmit+0x114>
 800e4ec:	e0f1      	b.n	800e6d2 <HAL_SPI_Transmit+0x386>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	68db      	ldr	r3, [r3, #12]
 800e4f2:	2b07      	cmp	r3, #7
 800e4f4:	f240 80e6 	bls.w	800e6c4 <HAL_SPI_Transmit+0x378>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800e4f8:	e05d      	b.n	800e5b6 <HAL_SPI_Transmit+0x26a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	695b      	ldr	r3, [r3, #20]
 800e500:	f003 0302 	and.w	r3, r3, #2
 800e504:	2b02      	cmp	r3, #2
 800e506:	d132      	bne.n	800e56e <HAL_SPI_Transmit+0x222>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e50e:	b29b      	uxth	r3, r3
 800e510:	2b01      	cmp	r3, #1
 800e512:	d918      	bls.n	800e546 <HAL_SPI_Transmit+0x1fa>
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d014      	beq.n	800e546 <HAL_SPI_Transmit+0x1fa>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	6812      	ldr	r2, [r2, #0]
 800e526:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e52c:	1d1a      	adds	r2, r3, #4
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e538:	b29b      	uxth	r3, r3
 800e53a:	3b02      	subs	r3, #2
 800e53c:	b29a      	uxth	r2, r3
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800e544:	e037      	b.n	800e5b6 <HAL_SPI_Transmit+0x26a>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e54a:	881a      	ldrh	r2, [r3, #0]
 800e54c:	697b      	ldr	r3, [r7, #20]
 800e54e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e554:	1c9a      	adds	r2, r3, #2
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e560:	b29b      	uxth	r3, r3
 800e562:	3b01      	subs	r3, #1
 800e564:	b29a      	uxth	r2, r3
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800e56c:	e023      	b.n	800e5b6 <HAL_SPI_Transmit+0x26a>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e56e:	f7f4 fe15 	bl	800319c <HAL_GetTick>
 800e572:	4602      	mov	r2, r0
 800e574:	693b      	ldr	r3, [r7, #16]
 800e576:	1ad3      	subs	r3, r2, r3
 800e578:	683a      	ldr	r2, [r7, #0]
 800e57a:	429a      	cmp	r2, r3
 800e57c:	d803      	bhi.n	800e586 <HAL_SPI_Transmit+0x23a>
 800e57e:	683b      	ldr	r3, [r7, #0]
 800e580:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e584:	d102      	bne.n	800e58c <HAL_SPI_Transmit+0x240>
 800e586:	683b      	ldr	r3, [r7, #0]
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d114      	bne.n	800e5b6 <HAL_SPI_Transmit+0x26a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e58c:	68f8      	ldr	r0, [r7, #12]
 800e58e:	f000 fe0b 	bl	800f1a8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e592:	68fb      	ldr	r3, [r7, #12]
 800e594:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e598:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	2201      	movs	r2, #1
 800e5a6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	2200      	movs	r2, #0
 800e5ae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800e5b2:	2303      	movs	r3, #3
 800e5b4:	e0b3      	b.n	800e71e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e5bc:	b29b      	uxth	r3, r3
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	d19b      	bne.n	800e4fa <HAL_SPI_Transmit+0x1ae>
 800e5c2:	e086      	b.n	800e6d2 <HAL_SPI_Transmit+0x386>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	695b      	ldr	r3, [r3, #20]
 800e5ca:	f003 0302 	and.w	r3, r3, #2
 800e5ce:	2b02      	cmp	r3, #2
 800e5d0:	d154      	bne.n	800e67c <HAL_SPI_Transmit+0x330>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e5d8:	b29b      	uxth	r3, r3
 800e5da:	2b03      	cmp	r3, #3
 800e5dc:	d918      	bls.n	800e610 <HAL_SPI_Transmit+0x2c4>
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e5e2:	2b40      	cmp	r3, #64	@ 0x40
 800e5e4:	d914      	bls.n	800e610 <HAL_SPI_Transmit+0x2c4>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	6812      	ldr	r2, [r2, #0]
 800e5f0:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e5f6:	1d1a      	adds	r2, r3, #4
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e602:	b29b      	uxth	r3, r3
 800e604:	3b04      	subs	r3, #4
 800e606:	b29a      	uxth	r2, r3
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800e60e:	e059      	b.n	800e6c4 <HAL_SPI_Transmit+0x378>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e616:	b29b      	uxth	r3, r3
 800e618:	2b01      	cmp	r3, #1
 800e61a:	d917      	bls.n	800e64c <HAL_SPI_Transmit+0x300>
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e620:	2b00      	cmp	r3, #0
 800e622:	d013      	beq.n	800e64c <HAL_SPI_Transmit+0x300>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e628:	881a      	ldrh	r2, [r3, #0]
 800e62a:	697b      	ldr	r3, [r7, #20]
 800e62c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e632:	1c9a      	adds	r2, r3, #2
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e63e:	b29b      	uxth	r3, r3
 800e640:	3b02      	subs	r3, #2
 800e642:	b29a      	uxth	r2, r3
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800e64a:	e03b      	b.n	800e6c4 <HAL_SPI_Transmit+0x378>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	3320      	adds	r3, #32
 800e656:	7812      	ldrb	r2, [r2, #0]
 800e658:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e65e:	1c5a      	adds	r2, r3, #1
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	65da      	str	r2, [r3, #92]	@ 0x5c
          hspi->TxXferCount--;
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e66a:	b29b      	uxth	r3, r3
 800e66c:	3b01      	subs	r3, #1
 800e66e:	b29a      	uxth	r2, r3
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
 800e676:	e025      	b.n	800e6c4 <HAL_SPI_Transmit+0x378>
 800e678:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e67c:	f7f4 fd8e 	bl	800319c <HAL_GetTick>
 800e680:	4602      	mov	r2, r0
 800e682:	693b      	ldr	r3, [r7, #16]
 800e684:	1ad3      	subs	r3, r2, r3
 800e686:	683a      	ldr	r2, [r7, #0]
 800e688:	429a      	cmp	r2, r3
 800e68a:	d803      	bhi.n	800e694 <HAL_SPI_Transmit+0x348>
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e692:	d102      	bne.n	800e69a <HAL_SPI_Transmit+0x34e>
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d114      	bne.n	800e6c4 <HAL_SPI_Transmit+0x378>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e69a:	68f8      	ldr	r0, [r7, #12]
 800e69c:	f000 fd84 	bl	800f1a8 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e6a6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	2201      	movs	r2, #1
 800e6b4:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	2200      	movs	r2, #0
 800e6bc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800e6c0:	2303      	movs	r3, #3
 800e6c2:	e02c      	b.n	800e71e <HAL_SPI_Transmit+0x3d2>
    while (hspi->TxXferCount > 0UL)
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e6ca:	b29b      	uxth	r3, r3
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	f47f af79 	bne.w	800e5c4 <HAL_SPI_Transmit+0x278>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800e6d2:	693b      	ldr	r3, [r7, #16]
 800e6d4:	9300      	str	r3, [sp, #0]
 800e6d6:	683b      	ldr	r3, [r7, #0]
 800e6d8:	2200      	movs	r2, #0
 800e6da:	2108      	movs	r1, #8
 800e6dc:	68f8      	ldr	r0, [r7, #12]
 800e6de:	f000 fe03 	bl	800f2e8 <SPI_WaitOnFlagUntilTimeout>
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d007      	beq.n	800e6f8 <HAL_SPI_Transmit+0x3ac>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e6ee:	f043 0220 	orr.w	r2, r3, #32
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e6f8:	68f8      	ldr	r0, [r7, #12]
 800e6fa:	f000 fd55 	bl	800f1a8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	2201      	movs	r2, #1
 800e702:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	2200      	movs	r2, #0
 800e70a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e714:	2b00      	cmp	r3, #0
 800e716:	d001      	beq.n	800e71c <HAL_SPI_Transmit+0x3d0>
  {
    return HAL_ERROR;
 800e718:	2301      	movs	r3, #1
 800e71a:	e000      	b.n	800e71e <HAL_SPI_Transmit+0x3d2>
  }
  else
  {
    return HAL_OK;
 800e71c:	2300      	movs	r3, #0
  }
}
 800e71e:	4618      	mov	r0, r3
 800e720:	3718      	adds	r7, #24
 800e722:	46bd      	mov	sp, r7
 800e724:	bd80      	pop	{r7, pc}
 800e726:	bf00      	nop

0800e728 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b08e      	sub	sp, #56	@ 0x38
 800e72c:	af02      	add	r7, sp, #8
 800e72e:	60f8      	str	r0, [r7, #12]
 800e730:	60b9      	str	r1, [r7, #8]
 800e732:	607a      	str	r2, [r7, #4]
 800e734:	807b      	strh	r3, [r7, #2]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	3320      	adds	r3, #32
 800e73c:	627b      	str	r3, [r7, #36]	@ 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	3330      	adds	r3, #48	@ 0x30
 800e744:	623b      	str	r3, [r7, #32]
  uint32_t   fifo_length;
  uint32_t   temp_sr_reg;
  uint16_t   initial_TxXferCount;
  uint16_t   initial_RxXferCount;
  uint16_t   init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e74a:	095b      	lsrs	r3, r3, #5
 800e74c:	b29b      	uxth	r3, r3
 800e74e:	3301      	adds	r3, #1
 800e750:	83fb      	strh	r3, [r7, #30]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e752:	f7f4 fd23 	bl	800319c <HAL_GetTick>
 800e756:	61b8      	str	r0, [r7, #24]

  initial_TxXferCount = Size;
 800e758:	887b      	ldrh	r3, [r7, #2]
 800e75a:	857b      	strh	r3, [r7, #42]	@ 0x2a
  initial_RxXferCount = Size;
 800e75c:	887b      	ldrh	r3, [r7, #2]
 800e75e:	853b      	strh	r3, [r7, #40]	@ 0x28

  if (hspi->State != HAL_SPI_STATE_READY)
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800e766:	b2db      	uxtb	r3, r3
 800e768:	2b01      	cmp	r3, #1
 800e76a:	d001      	beq.n	800e770 <HAL_SPI_TransmitReceive+0x48>
  {
    return HAL_BUSY;
 800e76c:	2302      	movs	r3, #2
 800e76e:	e310      	b.n	800ed92 <HAL_SPI_TransmitReceive+0x66a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800e770:	68bb      	ldr	r3, [r7, #8]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d005      	beq.n	800e782 <HAL_SPI_TransmitReceive+0x5a>
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d002      	beq.n	800e782 <HAL_SPI_TransmitReceive+0x5a>
 800e77c:	887b      	ldrh	r3, [r7, #2]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d101      	bne.n	800e786 <HAL_SPI_TransmitReceive+0x5e>
  {
    return HAL_ERROR;
 800e782:	2301      	movs	r3, #1
 800e784:	e305      	b.n	800ed92 <HAL_SPI_TransmitReceive+0x66a>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800e78c:	2b01      	cmp	r3, #1
 800e78e:	d101      	bne.n	800e794 <HAL_SPI_TransmitReceive+0x6c>
 800e790:	2302      	movs	r3, #2
 800e792:	e2fe      	b.n	800ed92 <HAL_SPI_TransmitReceive+0x66a>
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	2201      	movs	r2, #1
 800e798:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	2205      	movs	r2, #5
 800e7a0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	687a      	ldr	r2, [r7, #4]
 800e7b0:	665a      	str	r2, [r3, #100]	@ 0x64
  hspi->RxXferCount = Size;
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	887a      	ldrh	r2, [r7, #2]
 800e7b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferSize  = Size;
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	887a      	ldrh	r2, [r7, #2]
 800e7be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	68ba      	ldr	r2, [r7, #8]
 800e7c6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi->TxXferCount = Size;
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	887a      	ldrh	r2, [r7, #2]
 800e7cc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->TxXferSize  = Size;
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	887a      	ldrh	r2, [r7, #2]
 800e7d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	2200      	movs	r2, #0
 800e7dc:	671a      	str	r2, [r3, #112]	@ 0x70
  hspi->TxISR       = NULL;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	2200      	movs	r2, #0
 800e7e2:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Set Full-Duplex mode */
  SPI_2LINES(hspi);
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	68da      	ldr	r2, [r3, #12]
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	f422 22c0 	bic.w	r2, r2, #393216	@ 0x60000
 800e7f2:	60da      	str	r2, [r3, #12]

  /* Initialize FIFO length */
  if (IS_SPI_HIGHEND_INSTANCE(hspi->Instance))
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	4a70      	ldr	r2, [pc, #448]	@ (800e9bc <HAL_SPI_TransmitReceive+0x294>)
 800e7fa:	4293      	cmp	r3, r2
 800e7fc:	d009      	beq.n	800e812 <HAL_SPI_TransmitReceive+0xea>
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	4a6f      	ldr	r2, [pc, #444]	@ (800e9c0 <HAL_SPI_TransmitReceive+0x298>)
 800e804:	4293      	cmp	r3, r2
 800e806:	d004      	beq.n	800e812 <HAL_SPI_TransmitReceive+0xea>
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	4a6d      	ldr	r2, [pc, #436]	@ (800e9c4 <HAL_SPI_TransmitReceive+0x29c>)
 800e80e:	4293      	cmp	r3, r2
 800e810:	d102      	bne.n	800e818 <HAL_SPI_TransmitReceive+0xf0>
  {
    fifo_length = SPI_HIGHEND_FIFO_SIZE;
 800e812:	2310      	movs	r3, #16
 800e814:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e816:	e001      	b.n	800e81c <HAL_SPI_TransmitReceive+0xf4>
  }
  else
  {
    fifo_length = SPI_LOWEND_FIFO_SIZE;
 800e818:	2308      	movs	r3, #8
 800e81a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	685a      	ldr	r2, [r3, #4]
 800e822:	4b69      	ldr	r3, [pc, #420]	@ (800e9c8 <HAL_SPI_TransmitReceive+0x2a0>)
 800e824:	4013      	ands	r3, r2
 800e826:	8879      	ldrh	r1, [r7, #2]
 800e828:	68fa      	ldr	r2, [r7, #12]
 800e82a:	6812      	ldr	r2, [r2, #0]
 800e82c:	430b      	orrs	r3, r1
 800e82e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	681a      	ldr	r2, [r3, #0]
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	f042 0201 	orr.w	r2, r2, #1
 800e83e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	685b      	ldr	r3, [r3, #4]
 800e844:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e848:	d107      	bne.n	800e85a <HAL_SPI_TransmitReceive+0x132>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	681a      	ldr	r2, [r3, #0]
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800e858:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	68db      	ldr	r3, [r3, #12]
 800e85e:	2b0f      	cmp	r3, #15
 800e860:	f240 80a2 	bls.w	800e9a8 <HAL_SPI_TransmitReceive+0x280>
  {
    /* Adapt fifo length to 32bits data width */
    fifo_length = (fifo_length / 4UL);
 800e864:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e866:	089b      	lsrs	r3, r3, #2
 800e868:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e86a:	e094      	b.n	800e996 <HAL_SPI_TransmitReceive+0x26e>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	695b      	ldr	r3, [r3, #20]
 800e872:	f003 0302 	and.w	r3, r3, #2
 800e876:	2b02      	cmp	r3, #2
 800e878:	d120      	bne.n	800e8bc <HAL_SPI_TransmitReceive+0x194>
 800e87a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d01d      	beq.n	800e8bc <HAL_SPI_TransmitReceive+0x194>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800e880:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e882:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800e884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e886:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e888:	429a      	cmp	r2, r3
 800e88a:	d217      	bcs.n	800e8bc <HAL_SPI_TransmitReceive+0x194>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	6812      	ldr	r2, [r2, #0]
 800e896:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e89c:	1d1a      	adds	r2, r3, #4
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount --;
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e8a8:	b29b      	uxth	r3, r3
 800e8aa:	3b01      	subs	r3, #1
 800e8ac:	b29a      	uxth	r2, r3
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800e8ba:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	695b      	ldr	r3, [r3, #20]
 800e8c2:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800e8c4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	d065      	beq.n	800e996 <HAL_SPI_TransmitReceive+0x26e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	695b      	ldr	r3, [r3, #20]
 800e8d0:	f003 0301 	and.w	r3, r3, #1
 800e8d4:	2b01      	cmp	r3, #1
 800e8d6:	d118      	bne.n	800e90a <HAL_SPI_TransmitReceive+0x1e2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	681a      	ldr	r2, [r3, #0]
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e8e0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800e8e2:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e8e4:	68fb      	ldr	r3, [r7, #12]
 800e8e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e8e8:	1d1a      	adds	r2, r3, #4
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e8f4:	b29b      	uxth	r3, r3
 800e8f6:	3b01      	subs	r3, #1
 800e8f8:	b29a      	uxth	r2, r3
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e906:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e908:	e045      	b.n	800e996 <HAL_SPI_TransmitReceive+0x26e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e90a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e90c:	8bfb      	ldrh	r3, [r7, #30]
 800e90e:	429a      	cmp	r2, r3
 800e910:	d21d      	bcs.n	800e94e <HAL_SPI_TransmitReceive+0x226>
 800e912:	697b      	ldr	r3, [r7, #20]
 800e914:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d018      	beq.n	800e94e <HAL_SPI_TransmitReceive+0x226>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	681a      	ldr	r2, [r3, #0]
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e924:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800e926:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800e92c:	1d1a      	adds	r2, r3, #4
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e938:	b29b      	uxth	r3, r3
 800e93a:	3b01      	subs	r3, #1
 800e93c:	b29a      	uxth	r2, r3
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e94a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800e94c:	e023      	b.n	800e996 <HAL_SPI_TransmitReceive+0x26e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e94e:	f7f4 fc25 	bl	800319c <HAL_GetTick>
 800e952:	4602      	mov	r2, r0
 800e954:	69bb      	ldr	r3, [r7, #24]
 800e956:	1ad3      	subs	r3, r2, r3
 800e958:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e95a:	429a      	cmp	r2, r3
 800e95c:	d803      	bhi.n	800e966 <HAL_SPI_TransmitReceive+0x23e>
 800e95e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e960:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e964:	d102      	bne.n	800e96c <HAL_SPI_TransmitReceive+0x244>
 800e966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d114      	bne.n	800e996 <HAL_SPI_TransmitReceive+0x26e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800e96c:	68f8      	ldr	r0, [r7, #12]
 800e96e:	f000 fc1b 	bl	800f1a8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e978:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	2201      	movs	r2, #1
 800e986:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	2200      	movs	r2, #0
 800e98e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800e992:	2303      	movs	r3, #3
 800e994:	e1fd      	b.n	800ed92 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e996:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e998:	2b00      	cmp	r3, #0
 800e99a:	f47f af67 	bne.w	800e86c <HAL_SPI_TransmitReceive+0x144>
 800e99e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	f47f af63 	bne.w	800e86c <HAL_SPI_TransmitReceive+0x144>
 800e9a6:	e1ce      	b.n	800ed46 <HAL_SPI_TransmitReceive+0x61e>
        }
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	68db      	ldr	r3, [r3, #12]
 800e9ac:	2b07      	cmp	r3, #7
 800e9ae:	f240 81c2 	bls.w	800ed36 <HAL_SPI_TransmitReceive+0x60e>
  {
    /* Adapt fifo length to 16bits data width */
    fifo_length = (fifo_length / 2UL);
 800e9b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9b4:	085b      	lsrs	r3, r3, #1
 800e9b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800e9b8:	e0c9      	b.n	800eb4e <HAL_SPI_TransmitReceive+0x426>
 800e9ba:	bf00      	nop
 800e9bc:	40013000 	.word	0x40013000
 800e9c0:	40003800 	.word	0x40003800
 800e9c4:	40003c00 	.word	0x40003c00
 800e9c8:	ffff0000 	.word	0xffff0000
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	695b      	ldr	r3, [r3, #20]
 800e9d2:	f003 0302 	and.w	r3, r3, #2
 800e9d6:	2b02      	cmp	r3, #2
 800e9d8:	d11f      	bne.n	800ea1a <HAL_SPI_TransmitReceive+0x2f2>
 800e9da:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d01c      	beq.n	800ea1a <HAL_SPI_TransmitReceive+0x2f2>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800e9e0:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800e9e2:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800e9e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e9e6:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800e9e8:	429a      	cmp	r2, r3
 800e9ea:	d216      	bcs.n	800ea1a <HAL_SPI_TransmitReceive+0x2f2>
      {
#if defined (__GNUC__)
        *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e9f0:	881a      	ldrh	r2, [r3, #0]
 800e9f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9f4:	801a      	strh	r2, [r3, #0]
#else
        *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e9fa:	1c9a      	adds	r2, r3, #2
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ea06:	b29b      	uxth	r3, r3
 800ea08:	3b01      	subs	r3, #1
 800ea0a:	b29a      	uxth	r2, r3
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800ea12:	68fb      	ldr	r3, [r7, #12]
 800ea14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ea18:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	695b      	ldr	r3, [r3, #20]
 800ea20:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800ea22:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	f000 8092 	beq.w	800eb4e <HAL_SPI_TransmitReceive+0x426>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	695b      	ldr	r3, [r3, #20]
 800ea30:	f003 0301 	and.w	r3, r3, #1
 800ea34:	2b01      	cmp	r3, #1
 800ea36:	d118      	bne.n	800ea6a <HAL_SPI_TransmitReceive+0x342>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ea3c:	6a3a      	ldr	r2, [r7, #32]
 800ea3e:	8812      	ldrh	r2, [r2, #0]
 800ea40:	b292      	uxth	r2, r2
 800ea42:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ea48:	1c9a      	adds	r2, r3, #2
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ea54:	b29b      	uxth	r3, r3
 800ea56:	3b01      	subs	r3, #1
 800ea58:	b29a      	uxth	r2, r3
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ea66:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ea68:	e071      	b.n	800eb4e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ea6a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ea6c:	8bfb      	ldrh	r3, [r7, #30]
 800ea6e:	429a      	cmp	r2, r3
 800ea70:	d228      	bcs.n	800eac4 <HAL_SPI_TransmitReceive+0x39c>
 800ea72:	697b      	ldr	r3, [r7, #20]
 800ea74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d023      	beq.n	800eac4 <HAL_SPI_TransmitReceive+0x39c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ea80:	6a3a      	ldr	r2, [r7, #32]
 800ea82:	8812      	ldrh	r2, [r2, #0]
 800ea84:	b292      	uxth	r2, r2
 800ea86:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ea8c:	1c9a      	adds	r2, r3, #2
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	665a      	str	r2, [r3, #100]	@ 0x64
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ea96:	6a3a      	ldr	r2, [r7, #32]
 800ea98:	8812      	ldrh	r2, [r2, #0]
 800ea9a:	b292      	uxth	r2, r2
 800ea9c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800eaa2:	1c9a      	adds	r2, r3, #2
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800eaa8:	68fb      	ldr	r3, [r7, #12]
 800eaaa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800eaae:	b29b      	uxth	r3, r3
 800eab0:	3b02      	subs	r3, #2
 800eab2:	b29a      	uxth	r2, r3
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800eac0:	853b      	strh	r3, [r7, #40]	@ 0x28
 800eac2:	e044      	b.n	800eb4e <HAL_SPI_TransmitReceive+0x426>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800eac4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800eac6:	2b01      	cmp	r3, #1
 800eac8:	d11d      	bne.n	800eb06 <HAL_SPI_TransmitReceive+0x3de>
 800eaca:	697b      	ldr	r3, [r7, #20]
 800eacc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d018      	beq.n	800eb06 <HAL_SPI_TransmitReceive+0x3de>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ead8:	6a3a      	ldr	r2, [r7, #32]
 800eada:	8812      	ldrh	r2, [r2, #0]
 800eadc:	b292      	uxth	r2, r2
 800eade:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800eae4:	1c9a      	adds	r2, r3, #2
 800eae6:	68fb      	ldr	r3, [r7, #12]
 800eae8:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800eaf0:	b29b      	uxth	r3, r3
 800eaf2:	3b01      	subs	r3, #1
 800eaf4:	b29a      	uxth	r2, r3
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800eb02:	853b      	strh	r3, [r7, #40]	@ 0x28
 800eb04:	e023      	b.n	800eb4e <HAL_SPI_TransmitReceive+0x426>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800eb06:	f7f4 fb49 	bl	800319c <HAL_GetTick>
 800eb0a:	4602      	mov	r2, r0
 800eb0c:	69bb      	ldr	r3, [r7, #24]
 800eb0e:	1ad3      	subs	r3, r2, r3
 800eb10:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800eb12:	429a      	cmp	r2, r3
 800eb14:	d803      	bhi.n	800eb1e <HAL_SPI_TransmitReceive+0x3f6>
 800eb16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb1c:	d102      	bne.n	800eb24 <HAL_SPI_TransmitReceive+0x3fc>
 800eb1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d114      	bne.n	800eb4e <HAL_SPI_TransmitReceive+0x426>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800eb24:	68f8      	ldr	r0, [r7, #12]
 800eb26:	f000 fb3f 	bl	800f1a8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800eb30:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	2201      	movs	r2, #1
 800eb3e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	2200      	movs	r2, #0
 800eb46:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800eb4a:	2303      	movs	r3, #3
 800eb4c:	e121      	b.n	800ed92 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800eb4e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	f47f af3b 	bne.w	800e9cc <HAL_SPI_TransmitReceive+0x2a4>
 800eb56:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	f47f af37 	bne.w	800e9cc <HAL_SPI_TransmitReceive+0x2a4>
 800eb5e:	e0f2      	b.n	800ed46 <HAL_SPI_TransmitReceive+0x61e>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* Check the TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	695b      	ldr	r3, [r3, #20]
 800eb66:	f003 0302 	and.w	r3, r3, #2
 800eb6a:	2b02      	cmp	r3, #2
 800eb6c:	d121      	bne.n	800ebb2 <HAL_SPI_TransmitReceive+0x48a>
 800eb6e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d01e      	beq.n	800ebb2 <HAL_SPI_TransmitReceive+0x48a>
          (initial_RxXferCount  < (initial_TxXferCount + fifo_length)))
 800eb74:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800eb76:	8d79      	ldrh	r1, [r7, #42]	@ 0x2a
 800eb78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eb7a:	440b      	add	r3, r1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL) &&
 800eb7c:	429a      	cmp	r2, r3
 800eb7e:	d218      	bcs.n	800ebb2 <HAL_SPI_TransmitReceive+0x48a>
      {
        *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	3320      	adds	r3, #32
 800eb8a:	7812      	ldrb	r2, [r2, #0]
 800eb8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800eb92:	1c5a      	adds	r2, r3, #1
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	65da      	str	r2, [r3, #92]	@ 0x5c
        hspi->TxXferCount--;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800eb9e:	b29b      	uxth	r3, r3
 800eba0:	3b01      	subs	r3, #1
 800eba2:	b29a      	uxth	r2, r3
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 800ebb0:	857b      	strh	r3, [r7, #42]	@ 0x2a
      }

      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	695b      	ldr	r3, [r3, #20]
 800ebb8:	617b      	str	r3, [r7, #20]

      if (initial_RxXferCount > 0UL)
 800ebba:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	f000 80ba 	beq.w	800ed36 <HAL_SPI_TransmitReceive+0x60e>
      {
        /* Check the RXP flag */
        if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	695b      	ldr	r3, [r3, #20]
 800ebc8:	f003 0301 	and.w	r3, r3, #1
 800ebcc:	2b01      	cmp	r3, #1
 800ebce:	d11b      	bne.n	800ec08 <HAL_SPI_TransmitReceive+0x4e0>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ebdc:	7812      	ldrb	r2, [r2, #0]
 800ebde:	b2d2      	uxtb	r2, r2
 800ebe0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ebe6:	1c5a      	adds	r2, r3, #1
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ebf2:	b29b      	uxth	r3, r3
 800ebf4:	3b01      	subs	r3, #1
 800ebf6:	b29a      	uxth	r2, r3
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ec04:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ec06:	e096      	b.n	800ed36 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXWNE flag if RXP cannot be reached */
        else if ((initial_RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ec08:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800ec0a:	8bfb      	ldrh	r3, [r7, #30]
 800ec0c:	429a      	cmp	r2, r3
 800ec0e:	d24a      	bcs.n	800eca6 <HAL_SPI_TransmitReceive+0x57e>
 800ec10:	697b      	ldr	r3, [r7, #20]
 800ec12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d045      	beq.n	800eca6 <HAL_SPI_TransmitReceive+0x57e>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ec26:	7812      	ldrb	r2, [r2, #0]
 800ec28:	b2d2      	uxtb	r2, r2
 800ec2a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ec30:	1c5a      	adds	r2, r3, #1
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ec42:	7812      	ldrb	r2, [r2, #0]
 800ec44:	b2d2      	uxtb	r2, r2
 800ec46:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ec4c:	1c5a      	adds	r2, r3, #1
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ec5e:	7812      	ldrb	r2, [r2, #0]
 800ec60:	b2d2      	uxtb	r2, r2
 800ec62:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ec68:	1c5a      	adds	r2, r3, #1
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	665a      	str	r2, [r3, #100]	@ 0x64
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ec7a:	7812      	ldrb	r2, [r2, #0]
 800ec7c:	b2d2      	uxtb	r2, r2
 800ec7e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ec84:	1c5a      	adds	r2, r3, #1
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ec90:	b29b      	uxth	r3, r3
 800ec92:	3b04      	subs	r3, #4
 800ec94:	b29a      	uxth	r2, r3
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800eca2:	853b      	strh	r3, [r7, #40]	@ 0x28
 800eca4:	e047      	b.n	800ed36 <HAL_SPI_TransmitReceive+0x60e>
        }
        /* Check RXPLVL flags when RXWNE cannot be reached */
        else if ((initial_RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800eca6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800eca8:	2b03      	cmp	r3, #3
 800ecaa:	d820      	bhi.n	800ecee <HAL_SPI_TransmitReceive+0x5c6>
 800ecac:	697b      	ldr	r3, [r7, #20]
 800ecae:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d01b      	beq.n	800ecee <HAL_SPI_TransmitReceive+0x5c6>
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ecc2:	7812      	ldrb	r2, [r2, #0]
 800ecc4:	b2d2      	uxtb	r2, r2
 800ecc6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800eccc:	1c5a      	adds	r2, r3, #1
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	665a      	str	r2, [r3, #100]	@ 0x64
          hspi->RxXferCount--;
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ecd8:	b29b      	uxth	r3, r3
 800ecda:	3b01      	subs	r3, #1
 800ecdc:	b29a      	uxth	r2, r3
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ecea:	853b      	strh	r3, [r7, #40]	@ 0x28
 800ecec:	e023      	b.n	800ed36 <HAL_SPI_TransmitReceive+0x60e>
        }
        else
        {
          /* Timeout management */
          if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ecee:	f7f4 fa55 	bl	800319c <HAL_GetTick>
 800ecf2:	4602      	mov	r2, r0
 800ecf4:	69bb      	ldr	r3, [r7, #24]
 800ecf6:	1ad3      	subs	r3, r2, r3
 800ecf8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ecfa:	429a      	cmp	r2, r3
 800ecfc:	d803      	bhi.n	800ed06 <HAL_SPI_TransmitReceive+0x5de>
 800ecfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed04:	d102      	bne.n	800ed0c <HAL_SPI_TransmitReceive+0x5e4>
 800ed06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d114      	bne.n	800ed36 <HAL_SPI_TransmitReceive+0x60e>
          {
            /* Call standard close procedure with error check */
            SPI_CloseTransfer(hspi);
 800ed0c:	68f8      	ldr	r0, [r7, #12]
 800ed0e:	f000 fa4b 	bl	800f1a8 <SPI_CloseTransfer>

            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ed18:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
            hspi->State = HAL_SPI_STATE_READY;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	2201      	movs	r2, #1
 800ed26:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

            /* Unlock the process */
            __HAL_UNLOCK(hspi);
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	2200      	movs	r2, #0
 800ed2e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

            return HAL_TIMEOUT;
 800ed32:	2303      	movs	r3, #3
 800ed34:	e02d      	b.n	800ed92 <HAL_SPI_TransmitReceive+0x66a>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ed36:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	f47f af11 	bne.w	800eb60 <HAL_SPI_TransmitReceive+0x438>
 800ed3e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	f47f af0d 	bne.w	800eb60 <HAL_SPI_TransmitReceive+0x438>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800ed46:	69bb      	ldr	r3, [r7, #24]
 800ed48:	9300      	str	r3, [sp, #0]
 800ed4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	2108      	movs	r1, #8
 800ed50:	68f8      	ldr	r0, [r7, #12]
 800ed52:	f000 fac9 	bl	800f2e8 <SPI_WaitOnFlagUntilTimeout>
 800ed56:	4603      	mov	r3, r0
 800ed58:	2b00      	cmp	r3, #0
 800ed5a:	d007      	beq.n	800ed6c <HAL_SPI_TransmitReceive+0x644>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ed62:	f043 0220 	orr.w	r2, r3, #32
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800ed6c:	68f8      	ldr	r0, [r7, #12]
 800ed6e:	f000 fa1b 	bl	800f1a8 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	2201      	movs	r2, #1
 800ed76:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d001      	beq.n	800ed90 <HAL_SPI_TransmitReceive+0x668>
  {
    return HAL_ERROR;
 800ed8c:	2301      	movs	r3, #1
 800ed8e:	e000      	b.n	800ed92 <HAL_SPI_TransmitReceive+0x66a>
  }
  else
  {
    return HAL_OK;
 800ed90:	2300      	movs	r3, #0
  }
}
 800ed92:	4618      	mov	r0, r3
 800ed94:	3730      	adds	r7, #48	@ 0x30
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd80      	pop	{r7, pc}
 800ed9a:	bf00      	nop

0800ed9c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b08a      	sub	sp, #40	@ 0x28
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	691b      	ldr	r3, [r3, #16]
 800edaa:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	695b      	ldr	r3, [r3, #20]
 800edb2:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800edb4:	6a3a      	ldr	r2, [r7, #32]
 800edb6:	69fb      	ldr	r3, [r7, #28]
 800edb8:	4013      	ands	r3, r2
 800edba:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	689b      	ldr	r3, [r3, #8]
 800edc2:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800edc4:	2300      	movs	r3, #0
 800edc6:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800edce:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	3330      	adds	r3, #48	@ 0x30
 800edd6:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800edd8:	69fb      	ldr	r3, [r7, #28]
 800edda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d010      	beq.n	800ee04 <HAL_SPI_IRQHandler+0x68>
 800ede2:	6a3b      	ldr	r3, [r7, #32]
 800ede4:	f003 0308 	and.w	r3, r3, #8
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d00b      	beq.n	800ee04 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	699a      	ldr	r2, [r3, #24]
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800edfa:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f000 f9af 	bl	800f160 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800ee02:	e192      	b.n	800f12a <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800ee04:	69bb      	ldr	r3, [r7, #24]
 800ee06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d113      	bne.n	800ee36 <HAL_SPI_IRQHandler+0x9a>
 800ee0e:	69bb      	ldr	r3, [r7, #24]
 800ee10:	f003 0320 	and.w	r3, r3, #32
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d10e      	bne.n	800ee36 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800ee18:	69bb      	ldr	r3, [r7, #24]
 800ee1a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d009      	beq.n	800ee36 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ee26:	6878      	ldr	r0, [r7, #4]
 800ee28:	4798      	blx	r3
    hspi->RxISR(hspi);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ee2e:	6878      	ldr	r0, [r7, #4]
 800ee30:	4798      	blx	r3
    handled = 1UL;
 800ee32:	2301      	movs	r3, #1
 800ee34:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800ee36:	69bb      	ldr	r3, [r7, #24]
 800ee38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d10f      	bne.n	800ee60 <HAL_SPI_IRQHandler+0xc4>
 800ee40:	69bb      	ldr	r3, [r7, #24]
 800ee42:	f003 0301 	and.w	r3, r3, #1
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d00a      	beq.n	800ee60 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800ee4a:	69bb      	ldr	r3, [r7, #24]
 800ee4c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d105      	bne.n	800ee60 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ee58:	6878      	ldr	r0, [r7, #4]
 800ee5a:	4798      	blx	r3
    handled = 1UL;
 800ee5c:	2301      	movs	r3, #1
 800ee5e:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800ee60:	69bb      	ldr	r3, [r7, #24]
 800ee62:	f003 0320 	and.w	r3, r3, #32
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d10f      	bne.n	800ee8a <HAL_SPI_IRQHandler+0xee>
 800ee6a:	69bb      	ldr	r3, [r7, #24]
 800ee6c:	f003 0302 	and.w	r3, r3, #2
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d00a      	beq.n	800ee8a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800ee74:	69bb      	ldr	r3, [r7, #24]
 800ee76:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d105      	bne.n	800ee8a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ee82:	6878      	ldr	r0, [r7, #4]
 800ee84:	4798      	blx	r3
    handled = 1UL;
 800ee86:	2301      	movs	r3, #1
 800ee88:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800ee8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	f040 8147 	bne.w	800f120 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800ee92:	69bb      	ldr	r3, [r7, #24]
 800ee94:	f003 0308 	and.w	r3, r3, #8
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	f000 808b 	beq.w	800efb4 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	699a      	ldr	r2, [r3, #24]
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	f042 0208 	orr.w	r2, r2, #8
 800eeac:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	681b      	ldr	r3, [r3, #0]
 800eeb2:	699a      	ldr	r2, [r3, #24]
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	f042 0210 	orr.w	r2, r2, #16
 800eebc:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	699a      	ldr	r2, [r3, #24]
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800eecc:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	681b      	ldr	r3, [r3, #0]
 800eed2:	691a      	ldr	r2, [r3, #16]
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	f022 0208 	bic.w	r2, r2, #8
 800eedc:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	689b      	ldr	r3, [r3, #8]
 800eee4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d13d      	bne.n	800ef68 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800eeec:	e036      	b.n	800ef5c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	68db      	ldr	r3, [r3, #12]
 800eef2:	2b0f      	cmp	r3, #15
 800eef4:	d90b      	bls.n	800ef0e <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681a      	ldr	r2, [r3, #0]
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800eefe:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800ef00:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ef06:	1d1a      	adds	r2, r3, #4
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	665a      	str	r2, [r3, #100]	@ 0x64
 800ef0c:	e01d      	b.n	800ef4a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ef0e:	687b      	ldr	r3, [r7, #4]
 800ef10:	68db      	ldr	r3, [r3, #12]
 800ef12:	2b07      	cmp	r3, #7
 800ef14:	d90b      	bls.n	800ef2e <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ef1a:	68fa      	ldr	r2, [r7, #12]
 800ef1c:	8812      	ldrh	r2, [r2, #0]
 800ef1e:	b292      	uxth	r2, r2
 800ef20:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ef26:	1c9a      	adds	r2, r3, #2
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	665a      	str	r2, [r3, #100]	@ 0x64
 800ef2c:	e00d      	b.n	800ef4a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ef3a:	7812      	ldrb	r2, [r2, #0]
 800ef3c:	b2d2      	uxtb	r2, r2
 800ef3e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ef44:	1c5a      	adds	r2, r3, #1
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ef50:	b29b      	uxth	r3, r3
 800ef52:	3b01      	subs	r3, #1
 800ef54:	b29a      	uxth	r2, r3
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800ef62:	b29b      	uxth	r3, r3
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d1c2      	bne.n	800eeee <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800ef68:	6878      	ldr	r0, [r7, #4]
 800ef6a:	f000 f91d 	bl	800f1a8 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	2201      	movs	r2, #1
 800ef72:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d003      	beq.n	800ef88 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ef80:	6878      	ldr	r0, [r7, #4]
 800ef82:	f000 f8e3 	bl	800f14c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ef86:	e0d0      	b.n	800f12a <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800ef88:	7cfb      	ldrb	r3, [r7, #19]
 800ef8a:	2b05      	cmp	r3, #5
 800ef8c:	d103      	bne.n	800ef96 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800ef8e:	6878      	ldr	r0, [r7, #4]
 800ef90:	f7f1 fab0 	bl	80004f4 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800ef94:	e0c6      	b.n	800f124 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800ef96:	7cfb      	ldrb	r3, [r7, #19]
 800ef98:	2b04      	cmp	r3, #4
 800ef9a:	d103      	bne.n	800efa4 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800ef9c:	6878      	ldr	r0, [r7, #4]
 800ef9e:	f000 f8cb 	bl	800f138 <HAL_SPI_RxCpltCallback>
    return;
 800efa2:	e0bf      	b.n	800f124 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800efa4:	7cfb      	ldrb	r3, [r7, #19]
 800efa6:	2b03      	cmp	r3, #3
 800efa8:	f040 80bc 	bne.w	800f124 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800efac:	6878      	ldr	r0, [r7, #4]
 800efae:	f7f1 fa91 	bl	80004d4 <HAL_SPI_TxCpltCallback>
    return;
 800efb2:	e0b7      	b.n	800f124 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800efb4:	69bb      	ldr	r3, [r7, #24]
 800efb6:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 800efba:	2b00      	cmp	r3, #0
 800efbc:	f000 80b5 	beq.w	800f12a <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800efc0:	69bb      	ldr	r3, [r7, #24]
 800efc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d00f      	beq.n	800efea <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800efd0:	f043 0204 	orr.w	r2, r3, #4
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	699a      	ldr	r2, [r3, #24]
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800efe8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800efea:	69bb      	ldr	r3, [r7, #24]
 800efec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d00f      	beq.n	800f014 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800effa:	f043 0201 	orr.w	r2, r3, #1
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	699a      	ldr	r2, [r3, #24]
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f012:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800f014:	69bb      	ldr	r3, [r7, #24]
 800f016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d00f      	beq.n	800f03e <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f024:	f043 0208 	orr.w	r2, r3, #8
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	681b      	ldr	r3, [r3, #0]
 800f032:	699a      	ldr	r2, [r3, #24]
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f03c:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800f03e:	69bb      	ldr	r3, [r7, #24]
 800f040:	f003 0320 	and.w	r3, r3, #32
 800f044:	2b00      	cmp	r3, #0
 800f046:	d00f      	beq.n	800f068 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f04e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	681b      	ldr	r3, [r3, #0]
 800f05c:	699a      	ldr	r2, [r3, #24]
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	f042 0220 	orr.w	r2, r2, #32
 800f066:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d05a      	beq.n	800f128 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	681a      	ldr	r2, [r3, #0]
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	f022 0201 	bic.w	r2, r2, #1
 800f080:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	6919      	ldr	r1, [r3, #16]
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681a      	ldr	r2, [r3, #0]
 800f08c:	4b28      	ldr	r3, [pc, #160]	@ (800f130 <HAL_SPI_IRQHandler+0x394>)
 800f08e:	400b      	ands	r3, r1
 800f090:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800f092:	697b      	ldr	r3, [r7, #20]
 800f094:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800f098:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800f09c:	d138      	bne.n	800f110 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	681b      	ldr	r3, [r3, #0]
 800f0a2:	689a      	ldr	r2, [r3, #8]
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800f0ac:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d013      	beq.n	800f0de <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f0ba:	4a1e      	ldr	r2, [pc, #120]	@ (800f134 <HAL_SPI_IRQHandler+0x398>)
 800f0bc:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f7f6 fd54 	bl	8005b70 <HAL_DMA_Abort_IT>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d007      	beq.n	800f0de <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f0d4:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d020      	beq.n	800f128 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f0ea:	4a12      	ldr	r2, [pc, #72]	@ (800f134 <HAL_SPI_IRQHandler+0x398>)
 800f0ec:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f7f6 fd3c 	bl	8005b70 <HAL_DMA_Abort_IT>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d014      	beq.n	800f128 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f104:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800f10e:	e00b      	b.n	800f128 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2201      	movs	r2, #1
 800f114:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 800f118:	6878      	ldr	r0, [r7, #4]
 800f11a:	f000 f817 	bl	800f14c <HAL_SPI_ErrorCallback>
    return;
 800f11e:	e003      	b.n	800f128 <HAL_SPI_IRQHandler+0x38c>
    return;
 800f120:	bf00      	nop
 800f122:	e002      	b.n	800f12a <HAL_SPI_IRQHandler+0x38e>
    return;
 800f124:	bf00      	nop
 800f126:	e000      	b.n	800f12a <HAL_SPI_IRQHandler+0x38e>
    return;
 800f128:	bf00      	nop
  }
}
 800f12a:	3728      	adds	r7, #40	@ 0x28
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bd80      	pop	{r7, pc}
 800f130:	fffffc94 	.word	0xfffffc94
 800f134:	0800f175 	.word	0x0800f175

0800f138 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800f138:	b480      	push	{r7}
 800f13a:	b083      	sub	sp, #12
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800f140:	bf00      	nop
 800f142:	370c      	adds	r7, #12
 800f144:	46bd      	mov	sp, r7
 800f146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f14a:	4770      	bx	lr

0800f14c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800f14c:	b480      	push	{r7}
 800f14e:	b083      	sub	sp, #12
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800f154:	bf00      	nop
 800f156:	370c      	adds	r7, #12
 800f158:	46bd      	mov	sp, r7
 800f15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15e:	4770      	bx	lr

0800f160 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 800f160:	b480      	push	{r7}
 800f162:	b083      	sub	sp, #12
 800f164:	af00      	add	r7, sp, #0
 800f166:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800f168:	bf00      	nop
 800f16a:	370c      	adds	r7, #12
 800f16c:	46bd      	mov	sp, r7
 800f16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f172:	4770      	bx	lr

0800f174 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f174:	b580      	push	{r7, lr}
 800f176:	b084      	sub	sp, #16
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f180:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	2200      	movs	r2, #0
 800f186:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	2200      	movs	r2, #0
 800f18e:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	2201      	movs	r2, #1
 800f196:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800f19a:	68f8      	ldr	r0, [r7, #12]
 800f19c:	f7ff ffd6 	bl	800f14c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800f1a0:	bf00      	nop
 800f1a2:	3710      	adds	r7, #16
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bd80      	pop	{r7, pc}

0800f1a8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f1a8:	b480      	push	{r7}
 800f1aa:	b085      	sub	sp, #20
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	695b      	ldr	r3, [r3, #20]
 800f1b6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	699a      	ldr	r2, [r3, #24]
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	f042 0208 	orr.w	r2, r2, #8
 800f1c6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	699a      	ldr	r2, [r3, #24]
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	f042 0210 	orr.w	r2, r2, #16
 800f1d6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	681a      	ldr	r2, [r3, #0]
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	f022 0201 	bic.w	r2, r2, #1
 800f1e6:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	6919      	ldr	r1, [r3, #16]
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681a      	ldr	r2, [r3, #0]
 800f1f2:	4b3c      	ldr	r3, [pc, #240]	@ (800f2e4 <SPI_CloseTransfer+0x13c>)
 800f1f4:	400b      	ands	r3, r1
 800f1f6:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	689a      	ldr	r2, [r3, #8]
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800f206:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800f20e:	b2db      	uxtb	r3, r3
 800f210:	2b04      	cmp	r3, #4
 800f212:	d014      	beq.n	800f23e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	f003 0320 	and.w	r3, r3, #32
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d00f      	beq.n	800f23e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f224:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	699a      	ldr	r2, [r3, #24]
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	f042 0220 	orr.w	r2, r2, #32
 800f23c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 800f244:	b2db      	uxtb	r3, r3
 800f246:	2b03      	cmp	r3, #3
 800f248:	d014      	beq.n	800f274 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f250:	2b00      	cmp	r3, #0
 800f252:	d00f      	beq.n	800f274 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f25a:	f043 0204 	orr.w	r2, r3, #4
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	699a      	ldr	r2, [r3, #24]
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f272:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d00f      	beq.n	800f29e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f284:	f043 0201 	orr.w	r2, r3, #1
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	699a      	ldr	r2, [r3, #24]
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800f29c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f29e:	68fb      	ldr	r3, [r7, #12]
 800f2a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d00f      	beq.n	800f2c8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f2ae:	f043 0208 	orr.w	r2, r3, #8
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	699a      	ldr	r2, [r3, #24]
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800f2c6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 800f2d8:	bf00      	nop
 800f2da:	3714      	adds	r7, #20
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e2:	4770      	bx	lr
 800f2e4:	fffffc90 	.word	0xfffffc90

0800f2e8 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(const SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b084      	sub	sp, #16
 800f2ec:	af00      	add	r7, sp, #0
 800f2ee:	60f8      	str	r0, [r7, #12]
 800f2f0:	60b9      	str	r1, [r7, #8]
 800f2f2:	603b      	str	r3, [r7, #0]
 800f2f4:	4613      	mov	r3, r2
 800f2f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f2f8:	e010      	b.n	800f31c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f2fa:	f7f3 ff4f 	bl	800319c <HAL_GetTick>
 800f2fe:	4602      	mov	r2, r0
 800f300:	69bb      	ldr	r3, [r7, #24]
 800f302:	1ad3      	subs	r3, r2, r3
 800f304:	683a      	ldr	r2, [r7, #0]
 800f306:	429a      	cmp	r2, r3
 800f308:	d803      	bhi.n	800f312 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800f30a:	683b      	ldr	r3, [r7, #0]
 800f30c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f310:	d102      	bne.n	800f318 <SPI_WaitOnFlagUntilTimeout+0x30>
 800f312:	683b      	ldr	r3, [r7, #0]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d101      	bne.n	800f31c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800f318:	2303      	movs	r3, #3
 800f31a:	e00f      	b.n	800f33c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	695a      	ldr	r2, [r3, #20]
 800f322:	68bb      	ldr	r3, [r7, #8]
 800f324:	4013      	ands	r3, r2
 800f326:	68ba      	ldr	r2, [r7, #8]
 800f328:	429a      	cmp	r2, r3
 800f32a:	bf0c      	ite	eq
 800f32c:	2301      	moveq	r3, #1
 800f32e:	2300      	movne	r3, #0
 800f330:	b2db      	uxtb	r3, r3
 800f332:	461a      	mov	r2, r3
 800f334:	79fb      	ldrb	r3, [r7, #7]
 800f336:	429a      	cmp	r2, r3
 800f338:	d0df      	beq.n	800f2fa <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800f33a:	2300      	movs	r3, #0
}
 800f33c:	4618      	mov	r0, r3
 800f33e:	3710      	adds	r7, #16
 800f340:	46bd      	mov	sp, r7
 800f342:	bd80      	pop	{r7, pc}

0800f344 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800f344:	b480      	push	{r7}
 800f346:	b085      	sub	sp, #20
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f350:	095b      	lsrs	r3, r3, #5
 800f352:	3301      	adds	r3, #1
 800f354:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	68db      	ldr	r3, [r3, #12]
 800f35a:	3301      	adds	r3, #1
 800f35c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f35e:	68bb      	ldr	r3, [r7, #8]
 800f360:	3307      	adds	r3, #7
 800f362:	08db      	lsrs	r3, r3, #3
 800f364:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800f366:	68bb      	ldr	r3, [r7, #8]
 800f368:	68fa      	ldr	r2, [r7, #12]
 800f36a:	fb02 f303 	mul.w	r3, r2, r3
}
 800f36e:	4618      	mov	r0, r3
 800f370:	3714      	adds	r7, #20
 800f372:	46bd      	mov	sp, r7
 800f374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f378:	4770      	bx	lr
	...

0800f37c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f37c:	b084      	sub	sp, #16
 800f37e:	b580      	push	{r7, lr}
 800f380:	b084      	sub	sp, #16
 800f382:	af00      	add	r7, sp, #0
 800f384:	6078      	str	r0, [r7, #4]
 800f386:	f107 001c 	add.w	r0, r7, #28
 800f38a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f38e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800f392:	2b01      	cmp	r3, #1
 800f394:	d121      	bne.n	800f3da <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f39a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	68da      	ldr	r2, [r3, #12]
 800f3a6:	4b2c      	ldr	r3, [pc, #176]	@ (800f458 <USB_CoreInit+0xdc>)
 800f3a8:	4013      	ands	r3, r2
 800f3aa:	687a      	ldr	r2, [r7, #4]
 800f3ac:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	68db      	ldr	r3, [r3, #12]
 800f3b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f3ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f3be:	2b01      	cmp	r3, #1
 800f3c0:	d105      	bne.n	800f3ce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	68db      	ldr	r3, [r3, #12]
 800f3c6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f001 fafa 	bl	80109c8 <USB_CoreReset>
 800f3d4:	4603      	mov	r3, r0
 800f3d6:	73fb      	strb	r3, [r7, #15]
 800f3d8:	e01b      	b.n	800f412 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	68db      	ldr	r3, [r3, #12]
 800f3de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800f3e6:	6878      	ldr	r0, [r7, #4]
 800f3e8:	f001 faee 	bl	80109c8 <USB_CoreReset>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800f3f0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d106      	bne.n	800f406 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f3fc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	639a      	str	r2, [r3, #56]	@ 0x38
 800f404:	e005      	b.n	800f412 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f40a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800f412:	7fbb      	ldrb	r3, [r7, #30]
 800f414:	2b01      	cmp	r3, #1
 800f416:	d116      	bne.n	800f446 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f41c:	b29a      	uxth	r2, r3
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800f426:	4b0d      	ldr	r3, [pc, #52]	@ (800f45c <USB_CoreInit+0xe0>)
 800f428:	4313      	orrs	r3, r2
 800f42a:	687a      	ldr	r2, [r7, #4]
 800f42c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	689b      	ldr	r3, [r3, #8]
 800f432:	f043 0206 	orr.w	r2, r3, #6
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	689b      	ldr	r3, [r3, #8]
 800f43e:	f043 0220 	orr.w	r2, r3, #32
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f446:	7bfb      	ldrb	r3, [r7, #15]
}
 800f448:	4618      	mov	r0, r3
 800f44a:	3710      	adds	r7, #16
 800f44c:	46bd      	mov	sp, r7
 800f44e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f452:	b004      	add	sp, #16
 800f454:	4770      	bx	lr
 800f456:	bf00      	nop
 800f458:	ffbdffbf 	.word	0xffbdffbf
 800f45c:	03ee0000 	.word	0x03ee0000

0800f460 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f460:	b480      	push	{r7}
 800f462:	b087      	sub	sp, #28
 800f464:	af00      	add	r7, sp, #0
 800f466:	60f8      	str	r0, [r7, #12]
 800f468:	60b9      	str	r1, [r7, #8]
 800f46a:	4613      	mov	r3, r2
 800f46c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f46e:	79fb      	ldrb	r3, [r7, #7]
 800f470:	2b02      	cmp	r3, #2
 800f472:	d165      	bne.n	800f540 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f474:	68bb      	ldr	r3, [r7, #8]
 800f476:	4a41      	ldr	r2, [pc, #260]	@ (800f57c <USB_SetTurnaroundTime+0x11c>)
 800f478:	4293      	cmp	r3, r2
 800f47a:	d906      	bls.n	800f48a <USB_SetTurnaroundTime+0x2a>
 800f47c:	68bb      	ldr	r3, [r7, #8]
 800f47e:	4a40      	ldr	r2, [pc, #256]	@ (800f580 <USB_SetTurnaroundTime+0x120>)
 800f480:	4293      	cmp	r3, r2
 800f482:	d202      	bcs.n	800f48a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f484:	230f      	movs	r3, #15
 800f486:	617b      	str	r3, [r7, #20]
 800f488:	e062      	b.n	800f550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f48a:	68bb      	ldr	r3, [r7, #8]
 800f48c:	4a3c      	ldr	r2, [pc, #240]	@ (800f580 <USB_SetTurnaroundTime+0x120>)
 800f48e:	4293      	cmp	r3, r2
 800f490:	d306      	bcc.n	800f4a0 <USB_SetTurnaroundTime+0x40>
 800f492:	68bb      	ldr	r3, [r7, #8]
 800f494:	4a3b      	ldr	r2, [pc, #236]	@ (800f584 <USB_SetTurnaroundTime+0x124>)
 800f496:	4293      	cmp	r3, r2
 800f498:	d202      	bcs.n	800f4a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f49a:	230e      	movs	r3, #14
 800f49c:	617b      	str	r3, [r7, #20]
 800f49e:	e057      	b.n	800f550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f4a0:	68bb      	ldr	r3, [r7, #8]
 800f4a2:	4a38      	ldr	r2, [pc, #224]	@ (800f584 <USB_SetTurnaroundTime+0x124>)
 800f4a4:	4293      	cmp	r3, r2
 800f4a6:	d306      	bcc.n	800f4b6 <USB_SetTurnaroundTime+0x56>
 800f4a8:	68bb      	ldr	r3, [r7, #8]
 800f4aa:	4a37      	ldr	r2, [pc, #220]	@ (800f588 <USB_SetTurnaroundTime+0x128>)
 800f4ac:	4293      	cmp	r3, r2
 800f4ae:	d202      	bcs.n	800f4b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f4b0:	230d      	movs	r3, #13
 800f4b2:	617b      	str	r3, [r7, #20]
 800f4b4:	e04c      	b.n	800f550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f4b6:	68bb      	ldr	r3, [r7, #8]
 800f4b8:	4a33      	ldr	r2, [pc, #204]	@ (800f588 <USB_SetTurnaroundTime+0x128>)
 800f4ba:	4293      	cmp	r3, r2
 800f4bc:	d306      	bcc.n	800f4cc <USB_SetTurnaroundTime+0x6c>
 800f4be:	68bb      	ldr	r3, [r7, #8]
 800f4c0:	4a32      	ldr	r2, [pc, #200]	@ (800f58c <USB_SetTurnaroundTime+0x12c>)
 800f4c2:	4293      	cmp	r3, r2
 800f4c4:	d802      	bhi.n	800f4cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f4c6:	230c      	movs	r3, #12
 800f4c8:	617b      	str	r3, [r7, #20]
 800f4ca:	e041      	b.n	800f550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f4cc:	68bb      	ldr	r3, [r7, #8]
 800f4ce:	4a2f      	ldr	r2, [pc, #188]	@ (800f58c <USB_SetTurnaroundTime+0x12c>)
 800f4d0:	4293      	cmp	r3, r2
 800f4d2:	d906      	bls.n	800f4e2 <USB_SetTurnaroundTime+0x82>
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	4a2e      	ldr	r2, [pc, #184]	@ (800f590 <USB_SetTurnaroundTime+0x130>)
 800f4d8:	4293      	cmp	r3, r2
 800f4da:	d802      	bhi.n	800f4e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f4dc:	230b      	movs	r3, #11
 800f4de:	617b      	str	r3, [r7, #20]
 800f4e0:	e036      	b.n	800f550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f4e2:	68bb      	ldr	r3, [r7, #8]
 800f4e4:	4a2a      	ldr	r2, [pc, #168]	@ (800f590 <USB_SetTurnaroundTime+0x130>)
 800f4e6:	4293      	cmp	r3, r2
 800f4e8:	d906      	bls.n	800f4f8 <USB_SetTurnaroundTime+0x98>
 800f4ea:	68bb      	ldr	r3, [r7, #8]
 800f4ec:	4a29      	ldr	r2, [pc, #164]	@ (800f594 <USB_SetTurnaroundTime+0x134>)
 800f4ee:	4293      	cmp	r3, r2
 800f4f0:	d802      	bhi.n	800f4f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f4f2:	230a      	movs	r3, #10
 800f4f4:	617b      	str	r3, [r7, #20]
 800f4f6:	e02b      	b.n	800f550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f4f8:	68bb      	ldr	r3, [r7, #8]
 800f4fa:	4a26      	ldr	r2, [pc, #152]	@ (800f594 <USB_SetTurnaroundTime+0x134>)
 800f4fc:	4293      	cmp	r3, r2
 800f4fe:	d906      	bls.n	800f50e <USB_SetTurnaroundTime+0xae>
 800f500:	68bb      	ldr	r3, [r7, #8]
 800f502:	4a25      	ldr	r2, [pc, #148]	@ (800f598 <USB_SetTurnaroundTime+0x138>)
 800f504:	4293      	cmp	r3, r2
 800f506:	d202      	bcs.n	800f50e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f508:	2309      	movs	r3, #9
 800f50a:	617b      	str	r3, [r7, #20]
 800f50c:	e020      	b.n	800f550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f50e:	68bb      	ldr	r3, [r7, #8]
 800f510:	4a21      	ldr	r2, [pc, #132]	@ (800f598 <USB_SetTurnaroundTime+0x138>)
 800f512:	4293      	cmp	r3, r2
 800f514:	d306      	bcc.n	800f524 <USB_SetTurnaroundTime+0xc4>
 800f516:	68bb      	ldr	r3, [r7, #8]
 800f518:	4a20      	ldr	r2, [pc, #128]	@ (800f59c <USB_SetTurnaroundTime+0x13c>)
 800f51a:	4293      	cmp	r3, r2
 800f51c:	d802      	bhi.n	800f524 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f51e:	2308      	movs	r3, #8
 800f520:	617b      	str	r3, [r7, #20]
 800f522:	e015      	b.n	800f550 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f524:	68bb      	ldr	r3, [r7, #8]
 800f526:	4a1d      	ldr	r2, [pc, #116]	@ (800f59c <USB_SetTurnaroundTime+0x13c>)
 800f528:	4293      	cmp	r3, r2
 800f52a:	d906      	bls.n	800f53a <USB_SetTurnaroundTime+0xda>
 800f52c:	68bb      	ldr	r3, [r7, #8]
 800f52e:	4a1c      	ldr	r2, [pc, #112]	@ (800f5a0 <USB_SetTurnaroundTime+0x140>)
 800f530:	4293      	cmp	r3, r2
 800f532:	d202      	bcs.n	800f53a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f534:	2307      	movs	r3, #7
 800f536:	617b      	str	r3, [r7, #20]
 800f538:	e00a      	b.n	800f550 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f53a:	2306      	movs	r3, #6
 800f53c:	617b      	str	r3, [r7, #20]
 800f53e:	e007      	b.n	800f550 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f540:	79fb      	ldrb	r3, [r7, #7]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d102      	bne.n	800f54c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f546:	2309      	movs	r3, #9
 800f548:	617b      	str	r3, [r7, #20]
 800f54a:	e001      	b.n	800f550 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f54c:	2309      	movs	r3, #9
 800f54e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	68db      	ldr	r3, [r3, #12]
 800f554:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	68da      	ldr	r2, [r3, #12]
 800f560:	697b      	ldr	r3, [r7, #20]
 800f562:	029b      	lsls	r3, r3, #10
 800f564:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800f568:	431a      	orrs	r2, r3
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f56e:	2300      	movs	r3, #0
}
 800f570:	4618      	mov	r0, r3
 800f572:	371c      	adds	r7, #28
 800f574:	46bd      	mov	sp, r7
 800f576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57a:	4770      	bx	lr
 800f57c:	00d8acbf 	.word	0x00d8acbf
 800f580:	00e4e1c0 	.word	0x00e4e1c0
 800f584:	00f42400 	.word	0x00f42400
 800f588:	01067380 	.word	0x01067380
 800f58c:	011a499f 	.word	0x011a499f
 800f590:	01312cff 	.word	0x01312cff
 800f594:	014ca43f 	.word	0x014ca43f
 800f598:	016e3600 	.word	0x016e3600
 800f59c:	01a6ab1f 	.word	0x01a6ab1f
 800f5a0:	01e84800 	.word	0x01e84800

0800f5a4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f5a4:	b480      	push	{r7}
 800f5a6:	b083      	sub	sp, #12
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	689b      	ldr	r3, [r3, #8]
 800f5b0:	f043 0201 	orr.w	r2, r3, #1
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f5b8:	2300      	movs	r3, #0
}
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	370c      	adds	r7, #12
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c4:	4770      	bx	lr

0800f5c6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f5c6:	b480      	push	{r7}
 800f5c8:	b083      	sub	sp, #12
 800f5ca:	af00      	add	r7, sp, #0
 800f5cc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	689b      	ldr	r3, [r3, #8]
 800f5d2:	f023 0201 	bic.w	r2, r3, #1
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f5da:	2300      	movs	r3, #0
}
 800f5dc:	4618      	mov	r0, r3
 800f5de:	370c      	adds	r7, #12
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e6:	4770      	bx	lr

0800f5e8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f5e8:	b580      	push	{r7, lr}
 800f5ea:	b084      	sub	sp, #16
 800f5ec:	af00      	add	r7, sp, #0
 800f5ee:	6078      	str	r0, [r7, #4]
 800f5f0:	460b      	mov	r3, r1
 800f5f2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	68db      	ldr	r3, [r3, #12]
 800f5fc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f604:	78fb      	ldrb	r3, [r7, #3]
 800f606:	2b01      	cmp	r3, #1
 800f608:	d115      	bne.n	800f636 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	68db      	ldr	r3, [r3, #12]
 800f60e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800f616:	200a      	movs	r0, #10
 800f618:	f7f3 fdcc 	bl	80031b4 <HAL_Delay>
      ms += 10U;
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	330a      	adds	r3, #10
 800f620:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800f622:	6878      	ldr	r0, [r7, #4]
 800f624:	f001 f93f 	bl	80108a6 <USB_GetMode>
 800f628:	4603      	mov	r3, r0
 800f62a:	2b01      	cmp	r3, #1
 800f62c:	d01e      	beq.n	800f66c <USB_SetCurrentMode+0x84>
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	2bc7      	cmp	r3, #199	@ 0xc7
 800f632:	d9f0      	bls.n	800f616 <USB_SetCurrentMode+0x2e>
 800f634:	e01a      	b.n	800f66c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f636:	78fb      	ldrb	r3, [r7, #3]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d115      	bne.n	800f668 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	68db      	ldr	r3, [r3, #12]
 800f640:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800f648:	200a      	movs	r0, #10
 800f64a:	f7f3 fdb3 	bl	80031b4 <HAL_Delay>
      ms += 10U;
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	330a      	adds	r3, #10
 800f652:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800f654:	6878      	ldr	r0, [r7, #4]
 800f656:	f001 f926 	bl	80108a6 <USB_GetMode>
 800f65a:	4603      	mov	r3, r0
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d005      	beq.n	800f66c <USB_SetCurrentMode+0x84>
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	2bc7      	cmp	r3, #199	@ 0xc7
 800f664:	d9f0      	bls.n	800f648 <USB_SetCurrentMode+0x60>
 800f666:	e001      	b.n	800f66c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f668:	2301      	movs	r3, #1
 800f66a:	e005      	b.n	800f678 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	2bc8      	cmp	r3, #200	@ 0xc8
 800f670:	d101      	bne.n	800f676 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f672:	2301      	movs	r3, #1
 800f674:	e000      	b.n	800f678 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f676:	2300      	movs	r3, #0
}
 800f678:	4618      	mov	r0, r3
 800f67a:	3710      	adds	r7, #16
 800f67c:	46bd      	mov	sp, r7
 800f67e:	bd80      	pop	{r7, pc}

0800f680 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f680:	b084      	sub	sp, #16
 800f682:	b580      	push	{r7, lr}
 800f684:	b086      	sub	sp, #24
 800f686:	af00      	add	r7, sp, #0
 800f688:	6078      	str	r0, [r7, #4]
 800f68a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800f68e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f692:	2300      	movs	r3, #0
 800f694:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f69a:	2300      	movs	r3, #0
 800f69c:	613b      	str	r3, [r7, #16]
 800f69e:	e009      	b.n	800f6b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f6a0:	687a      	ldr	r2, [r7, #4]
 800f6a2:	693b      	ldr	r3, [r7, #16]
 800f6a4:	3340      	adds	r3, #64	@ 0x40
 800f6a6:	009b      	lsls	r3, r3, #2
 800f6a8:	4413      	add	r3, r2
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f6ae:	693b      	ldr	r3, [r7, #16]
 800f6b0:	3301      	adds	r3, #1
 800f6b2:	613b      	str	r3, [r7, #16]
 800f6b4:	693b      	ldr	r3, [r7, #16]
 800f6b6:	2b0e      	cmp	r3, #14
 800f6b8:	d9f2      	bls.n	800f6a0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f6ba:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d11c      	bne.n	800f6fc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f6c8:	685b      	ldr	r3, [r3, #4]
 800f6ca:	68fa      	ldr	r2, [r7, #12]
 800f6cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f6d0:	f043 0302 	orr.w	r3, r3, #2
 800f6d4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6da:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	601a      	str	r2, [r3, #0]
 800f6fa:	e005      	b.n	800f708 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f700:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f70e:	461a      	mov	r2, r3
 800f710:	2300      	movs	r3, #0
 800f712:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f714:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800f718:	2b01      	cmp	r3, #1
 800f71a:	d10d      	bne.n	800f738 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f71c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800f720:	2b00      	cmp	r3, #0
 800f722:	d104      	bne.n	800f72e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f724:	2100      	movs	r1, #0
 800f726:	6878      	ldr	r0, [r7, #4]
 800f728:	f000 f968 	bl	800f9fc <USB_SetDevSpeed>
 800f72c:	e008      	b.n	800f740 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f72e:	2101      	movs	r1, #1
 800f730:	6878      	ldr	r0, [r7, #4]
 800f732:	f000 f963 	bl	800f9fc <USB_SetDevSpeed>
 800f736:	e003      	b.n	800f740 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f738:	2103      	movs	r1, #3
 800f73a:	6878      	ldr	r0, [r7, #4]
 800f73c:	f000 f95e 	bl	800f9fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f740:	2110      	movs	r1, #16
 800f742:	6878      	ldr	r0, [r7, #4]
 800f744:	f000 f8fa 	bl	800f93c <USB_FlushTxFifo>
 800f748:	4603      	mov	r3, r0
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d001      	beq.n	800f752 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800f74e:	2301      	movs	r3, #1
 800f750:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f752:	6878      	ldr	r0, [r7, #4]
 800f754:	f000 f924 	bl	800f9a0 <USB_FlushRxFifo>
 800f758:	4603      	mov	r3, r0
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d001      	beq.n	800f762 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800f75e:	2301      	movs	r3, #1
 800f760:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f768:	461a      	mov	r2, r3
 800f76a:	2300      	movs	r3, #0
 800f76c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f774:	461a      	mov	r2, r3
 800f776:	2300      	movs	r3, #0
 800f778:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f780:	461a      	mov	r2, r3
 800f782:	2300      	movs	r3, #0
 800f784:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f786:	2300      	movs	r3, #0
 800f788:	613b      	str	r3, [r7, #16]
 800f78a:	e043      	b.n	800f814 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f78c:	693b      	ldr	r3, [r7, #16]
 800f78e:	015a      	lsls	r2, r3, #5
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	4413      	add	r3, r2
 800f794:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f79e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f7a2:	d118      	bne.n	800f7d6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 800f7a4:	693b      	ldr	r3, [r7, #16]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d10a      	bne.n	800f7c0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f7aa:	693b      	ldr	r3, [r7, #16]
 800f7ac:	015a      	lsls	r2, r3, #5
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	4413      	add	r3, r2
 800f7b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f7b6:	461a      	mov	r2, r3
 800f7b8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800f7bc:	6013      	str	r3, [r2, #0]
 800f7be:	e013      	b.n	800f7e8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f7c0:	693b      	ldr	r3, [r7, #16]
 800f7c2:	015a      	lsls	r2, r3, #5
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	4413      	add	r3, r2
 800f7c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f7cc:	461a      	mov	r2, r3
 800f7ce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800f7d2:	6013      	str	r3, [r2, #0]
 800f7d4:	e008      	b.n	800f7e8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f7d6:	693b      	ldr	r3, [r7, #16]
 800f7d8:	015a      	lsls	r2, r3, #5
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	4413      	add	r3, r2
 800f7de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f7e2:	461a      	mov	r2, r3
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f7e8:	693b      	ldr	r3, [r7, #16]
 800f7ea:	015a      	lsls	r2, r3, #5
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	4413      	add	r3, r2
 800f7f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f7f4:	461a      	mov	r2, r3
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f7fa:	693b      	ldr	r3, [r7, #16]
 800f7fc:	015a      	lsls	r2, r3, #5
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	4413      	add	r3, r2
 800f802:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f806:	461a      	mov	r2, r3
 800f808:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800f80c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f80e:	693b      	ldr	r3, [r7, #16]
 800f810:	3301      	adds	r3, #1
 800f812:	613b      	str	r3, [r7, #16]
 800f814:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f818:	461a      	mov	r2, r3
 800f81a:	693b      	ldr	r3, [r7, #16]
 800f81c:	4293      	cmp	r3, r2
 800f81e:	d3b5      	bcc.n	800f78c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f820:	2300      	movs	r3, #0
 800f822:	613b      	str	r3, [r7, #16]
 800f824:	e043      	b.n	800f8ae <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f826:	693b      	ldr	r3, [r7, #16]
 800f828:	015a      	lsls	r2, r3, #5
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	4413      	add	r3, r2
 800f82e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f838:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f83c:	d118      	bne.n	800f870 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800f83e:	693b      	ldr	r3, [r7, #16]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d10a      	bne.n	800f85a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f844:	693b      	ldr	r3, [r7, #16]
 800f846:	015a      	lsls	r2, r3, #5
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	4413      	add	r3, r2
 800f84c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f850:	461a      	mov	r2, r3
 800f852:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800f856:	6013      	str	r3, [r2, #0]
 800f858:	e013      	b.n	800f882 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f85a:	693b      	ldr	r3, [r7, #16]
 800f85c:	015a      	lsls	r2, r3, #5
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	4413      	add	r3, r2
 800f862:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f866:	461a      	mov	r2, r3
 800f868:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800f86c:	6013      	str	r3, [r2, #0]
 800f86e:	e008      	b.n	800f882 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f870:	693b      	ldr	r3, [r7, #16]
 800f872:	015a      	lsls	r2, r3, #5
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	4413      	add	r3, r2
 800f878:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f87c:	461a      	mov	r2, r3
 800f87e:	2300      	movs	r3, #0
 800f880:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f882:	693b      	ldr	r3, [r7, #16]
 800f884:	015a      	lsls	r2, r3, #5
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	4413      	add	r3, r2
 800f88a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f88e:	461a      	mov	r2, r3
 800f890:	2300      	movs	r3, #0
 800f892:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f894:	693b      	ldr	r3, [r7, #16]
 800f896:	015a      	lsls	r2, r3, #5
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	4413      	add	r3, r2
 800f89c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f8a0:	461a      	mov	r2, r3
 800f8a2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800f8a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f8a8:	693b      	ldr	r3, [r7, #16]
 800f8aa:	3301      	adds	r3, #1
 800f8ac:	613b      	str	r3, [r7, #16]
 800f8ae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f8b2:	461a      	mov	r2, r3
 800f8b4:	693b      	ldr	r3, [r7, #16]
 800f8b6:	4293      	cmp	r3, r2
 800f8b8:	d3b5      	bcc.n	800f826 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f8c0:	691b      	ldr	r3, [r3, #16]
 800f8c2:	68fa      	ldr	r2, [r7, #12]
 800f8c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f8c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f8cc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800f8da:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f8dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d105      	bne.n	800f8f0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	699b      	ldr	r3, [r3, #24]
 800f8e8:	f043 0210 	orr.w	r2, r3, #16
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	699a      	ldr	r2, [r3, #24]
 800f8f4:	4b0f      	ldr	r3, [pc, #60]	@ (800f934 <USB_DevInit+0x2b4>)
 800f8f6:	4313      	orrs	r3, r2
 800f8f8:	687a      	ldr	r2, [r7, #4]
 800f8fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f8fc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800f900:	2b00      	cmp	r3, #0
 800f902:	d005      	beq.n	800f910 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	699b      	ldr	r3, [r3, #24]
 800f908:	f043 0208 	orr.w	r2, r3, #8
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f910:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800f914:	2b01      	cmp	r3, #1
 800f916:	d105      	bne.n	800f924 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	699a      	ldr	r2, [r3, #24]
 800f91c:	4b06      	ldr	r3, [pc, #24]	@ (800f938 <USB_DevInit+0x2b8>)
 800f91e:	4313      	orrs	r3, r2
 800f920:	687a      	ldr	r2, [r7, #4]
 800f922:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f924:	7dfb      	ldrb	r3, [r7, #23]
}
 800f926:	4618      	mov	r0, r3
 800f928:	3718      	adds	r7, #24
 800f92a:	46bd      	mov	sp, r7
 800f92c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f930:	b004      	add	sp, #16
 800f932:	4770      	bx	lr
 800f934:	803c3800 	.word	0x803c3800
 800f938:	40000004 	.word	0x40000004

0800f93c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f93c:	b480      	push	{r7}
 800f93e:	b085      	sub	sp, #20
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
 800f944:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f946:	2300      	movs	r3, #0
 800f948:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	3301      	adds	r3, #1
 800f94e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f956:	d901      	bls.n	800f95c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800f958:	2303      	movs	r3, #3
 800f95a:	e01b      	b.n	800f994 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	691b      	ldr	r3, [r3, #16]
 800f960:	2b00      	cmp	r3, #0
 800f962:	daf2      	bge.n	800f94a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800f964:	2300      	movs	r3, #0
 800f966:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f968:	683b      	ldr	r3, [r7, #0]
 800f96a:	019b      	lsls	r3, r3, #6
 800f96c:	f043 0220 	orr.w	r2, r3, #32
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	3301      	adds	r3, #1
 800f978:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f980:	d901      	bls.n	800f986 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800f982:	2303      	movs	r3, #3
 800f984:	e006      	b.n	800f994 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	691b      	ldr	r3, [r3, #16]
 800f98a:	f003 0320 	and.w	r3, r3, #32
 800f98e:	2b20      	cmp	r3, #32
 800f990:	d0f0      	beq.n	800f974 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800f992:	2300      	movs	r3, #0
}
 800f994:	4618      	mov	r0, r3
 800f996:	3714      	adds	r7, #20
 800f998:	46bd      	mov	sp, r7
 800f99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99e:	4770      	bx	lr

0800f9a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f9a0:	b480      	push	{r7}
 800f9a2:	b085      	sub	sp, #20
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	3301      	adds	r3, #1
 800f9b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f9b8:	d901      	bls.n	800f9be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800f9ba:	2303      	movs	r3, #3
 800f9bc:	e018      	b.n	800f9f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	691b      	ldr	r3, [r3, #16]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	daf2      	bge.n	800f9ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	2210      	movs	r2, #16
 800f9ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	3301      	adds	r3, #1
 800f9d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f9dc:	d901      	bls.n	800f9e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800f9de:	2303      	movs	r3, #3
 800f9e0:	e006      	b.n	800f9f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	691b      	ldr	r3, [r3, #16]
 800f9e6:	f003 0310 	and.w	r3, r3, #16
 800f9ea:	2b10      	cmp	r3, #16
 800f9ec:	d0f0      	beq.n	800f9d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800f9ee:	2300      	movs	r3, #0
}
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	3714      	adds	r7, #20
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fa:	4770      	bx	lr

0800f9fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f9fc:	b480      	push	{r7}
 800f9fe:	b085      	sub	sp, #20
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
 800fa04:	460b      	mov	r3, r1
 800fa06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fa12:	681a      	ldr	r2, [r3, #0]
 800fa14:	78fb      	ldrb	r3, [r7, #3]
 800fa16:	68f9      	ldr	r1, [r7, #12]
 800fa18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fa1c:	4313      	orrs	r3, r2
 800fa1e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800fa20:	2300      	movs	r3, #0
}
 800fa22:	4618      	mov	r0, r3
 800fa24:	3714      	adds	r7, #20
 800fa26:	46bd      	mov	sp, r7
 800fa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2c:	4770      	bx	lr

0800fa2e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800fa2e:	b480      	push	{r7}
 800fa30:	b087      	sub	sp, #28
 800fa32:	af00      	add	r7, sp, #0
 800fa34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800fa3a:	693b      	ldr	r3, [r7, #16]
 800fa3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fa40:	689b      	ldr	r3, [r3, #8]
 800fa42:	f003 0306 	and.w	r3, r3, #6
 800fa46:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800fa48:	68fb      	ldr	r3, [r7, #12]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d102      	bne.n	800fa54 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800fa4e:	2300      	movs	r3, #0
 800fa50:	75fb      	strb	r3, [r7, #23]
 800fa52:	e00a      	b.n	800fa6a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	2b02      	cmp	r3, #2
 800fa58:	d002      	beq.n	800fa60 <USB_GetDevSpeed+0x32>
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	2b06      	cmp	r3, #6
 800fa5e:	d102      	bne.n	800fa66 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800fa60:	2302      	movs	r3, #2
 800fa62:	75fb      	strb	r3, [r7, #23]
 800fa64:	e001      	b.n	800fa6a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800fa66:	230f      	movs	r3, #15
 800fa68:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800fa6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	371c      	adds	r7, #28
 800fa70:	46bd      	mov	sp, r7
 800fa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa76:	4770      	bx	lr

0800fa78 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800fa78:	b480      	push	{r7}
 800fa7a:	b085      	sub	sp, #20
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
 800fa80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fa86:	683b      	ldr	r3, [r7, #0]
 800fa88:	781b      	ldrb	r3, [r3, #0]
 800fa8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fa8c:	683b      	ldr	r3, [r7, #0]
 800fa8e:	785b      	ldrb	r3, [r3, #1]
 800fa90:	2b01      	cmp	r3, #1
 800fa92:	d139      	bne.n	800fb08 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fa9a:	69da      	ldr	r2, [r3, #28]
 800fa9c:	683b      	ldr	r3, [r7, #0]
 800fa9e:	781b      	ldrb	r3, [r3, #0]
 800faa0:	f003 030f 	and.w	r3, r3, #15
 800faa4:	2101      	movs	r1, #1
 800faa6:	fa01 f303 	lsl.w	r3, r1, r3
 800faaa:	b29b      	uxth	r3, r3
 800faac:	68f9      	ldr	r1, [r7, #12]
 800faae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fab2:	4313      	orrs	r3, r2
 800fab4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800fab6:	68bb      	ldr	r3, [r7, #8]
 800fab8:	015a      	lsls	r2, r3, #5
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	4413      	add	r3, r2
 800fabe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d153      	bne.n	800fb74 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800facc:	68bb      	ldr	r3, [r7, #8]
 800face:	015a      	lsls	r2, r3, #5
 800fad0:	68fb      	ldr	r3, [r7, #12]
 800fad2:	4413      	add	r3, r2
 800fad4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fad8:	681a      	ldr	r2, [r3, #0]
 800fada:	683b      	ldr	r3, [r7, #0]
 800fadc:	689b      	ldr	r3, [r3, #8]
 800fade:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fae2:	683b      	ldr	r3, [r7, #0]
 800fae4:	791b      	ldrb	r3, [r3, #4]
 800fae6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fae8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800faea:	68bb      	ldr	r3, [r7, #8]
 800faec:	059b      	lsls	r3, r3, #22
 800faee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800faf0:	431a      	orrs	r2, r3
 800faf2:	68bb      	ldr	r3, [r7, #8]
 800faf4:	0159      	lsls	r1, r3, #5
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	440b      	add	r3, r1
 800fafa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fafe:	4619      	mov	r1, r3
 800fb00:	4b20      	ldr	r3, [pc, #128]	@ (800fb84 <USB_ActivateEndpoint+0x10c>)
 800fb02:	4313      	orrs	r3, r2
 800fb04:	600b      	str	r3, [r1, #0]
 800fb06:	e035      	b.n	800fb74 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fb0e:	69da      	ldr	r2, [r3, #28]
 800fb10:	683b      	ldr	r3, [r7, #0]
 800fb12:	781b      	ldrb	r3, [r3, #0]
 800fb14:	f003 030f 	and.w	r3, r3, #15
 800fb18:	2101      	movs	r1, #1
 800fb1a:	fa01 f303 	lsl.w	r3, r1, r3
 800fb1e:	041b      	lsls	r3, r3, #16
 800fb20:	68f9      	ldr	r1, [r7, #12]
 800fb22:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fb26:	4313      	orrs	r3, r2
 800fb28:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800fb2a:	68bb      	ldr	r3, [r7, #8]
 800fb2c:	015a      	lsls	r2, r3, #5
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	4413      	add	r3, r2
 800fb32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d119      	bne.n	800fb74 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fb40:	68bb      	ldr	r3, [r7, #8]
 800fb42:	015a      	lsls	r2, r3, #5
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	4413      	add	r3, r2
 800fb48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fb4c:	681a      	ldr	r2, [r3, #0]
 800fb4e:	683b      	ldr	r3, [r7, #0]
 800fb50:	689b      	ldr	r3, [r3, #8]
 800fb52:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800fb56:	683b      	ldr	r3, [r7, #0]
 800fb58:	791b      	ldrb	r3, [r3, #4]
 800fb5a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800fb5c:	430b      	orrs	r3, r1
 800fb5e:	431a      	orrs	r2, r3
 800fb60:	68bb      	ldr	r3, [r7, #8]
 800fb62:	0159      	lsls	r1, r3, #5
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	440b      	add	r3, r1
 800fb68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fb6c:	4619      	mov	r1, r3
 800fb6e:	4b05      	ldr	r3, [pc, #20]	@ (800fb84 <USB_ActivateEndpoint+0x10c>)
 800fb70:	4313      	orrs	r3, r2
 800fb72:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800fb74:	2300      	movs	r3, #0
}
 800fb76:	4618      	mov	r0, r3
 800fb78:	3714      	adds	r7, #20
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb80:	4770      	bx	lr
 800fb82:	bf00      	nop
 800fb84:	10008000 	.word	0x10008000

0800fb88 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800fb88:	b480      	push	{r7}
 800fb8a:	b085      	sub	sp, #20
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
 800fb90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fb96:	683b      	ldr	r3, [r7, #0]
 800fb98:	781b      	ldrb	r3, [r3, #0]
 800fb9a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800fb9c:	683b      	ldr	r3, [r7, #0]
 800fb9e:	785b      	ldrb	r3, [r3, #1]
 800fba0:	2b01      	cmp	r3, #1
 800fba2:	d161      	bne.n	800fc68 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fba4:	68bb      	ldr	r3, [r7, #8]
 800fba6:	015a      	lsls	r2, r3, #5
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	4413      	add	r3, r2
 800fbac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fbb6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fbba:	d11f      	bne.n	800fbfc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800fbbc:	68bb      	ldr	r3, [r7, #8]
 800fbbe:	015a      	lsls	r2, r3, #5
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	4413      	add	r3, r2
 800fbc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	68ba      	ldr	r2, [r7, #8]
 800fbcc:	0151      	lsls	r1, r2, #5
 800fbce:	68fa      	ldr	r2, [r7, #12]
 800fbd0:	440a      	add	r2, r1
 800fbd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fbd6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800fbda:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800fbdc:	68bb      	ldr	r3, [r7, #8]
 800fbde:	015a      	lsls	r2, r3, #5
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	4413      	add	r3, r2
 800fbe4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	68ba      	ldr	r2, [r7, #8]
 800fbec:	0151      	lsls	r1, r2, #5
 800fbee:	68fa      	ldr	r2, [r7, #12]
 800fbf0:	440a      	add	r2, r1
 800fbf2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fbf6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800fbfa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fc02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fc04:	683b      	ldr	r3, [r7, #0]
 800fc06:	781b      	ldrb	r3, [r3, #0]
 800fc08:	f003 030f 	and.w	r3, r3, #15
 800fc0c:	2101      	movs	r1, #1
 800fc0e:	fa01 f303 	lsl.w	r3, r1, r3
 800fc12:	b29b      	uxth	r3, r3
 800fc14:	43db      	mvns	r3, r3
 800fc16:	68f9      	ldr	r1, [r7, #12]
 800fc18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fc1c:	4013      	ands	r3, r2
 800fc1e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fc26:	69da      	ldr	r2, [r3, #28]
 800fc28:	683b      	ldr	r3, [r7, #0]
 800fc2a:	781b      	ldrb	r3, [r3, #0]
 800fc2c:	f003 030f 	and.w	r3, r3, #15
 800fc30:	2101      	movs	r1, #1
 800fc32:	fa01 f303 	lsl.w	r3, r1, r3
 800fc36:	b29b      	uxth	r3, r3
 800fc38:	43db      	mvns	r3, r3
 800fc3a:	68f9      	ldr	r1, [r7, #12]
 800fc3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fc40:	4013      	ands	r3, r2
 800fc42:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800fc44:	68bb      	ldr	r3, [r7, #8]
 800fc46:	015a      	lsls	r2, r3, #5
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	4413      	add	r3, r2
 800fc4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fc50:	681a      	ldr	r2, [r3, #0]
 800fc52:	68bb      	ldr	r3, [r7, #8]
 800fc54:	0159      	lsls	r1, r3, #5
 800fc56:	68fb      	ldr	r3, [r7, #12]
 800fc58:	440b      	add	r3, r1
 800fc5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fc5e:	4619      	mov	r1, r3
 800fc60:	4b35      	ldr	r3, [pc, #212]	@ (800fd38 <USB_DeactivateEndpoint+0x1b0>)
 800fc62:	4013      	ands	r3, r2
 800fc64:	600b      	str	r3, [r1, #0]
 800fc66:	e060      	b.n	800fd2a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fc68:	68bb      	ldr	r3, [r7, #8]
 800fc6a:	015a      	lsls	r2, r3, #5
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	4413      	add	r3, r2
 800fc70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800fc7a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800fc7e:	d11f      	bne.n	800fcc0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800fc80:	68bb      	ldr	r3, [r7, #8]
 800fc82:	015a      	lsls	r2, r3, #5
 800fc84:	68fb      	ldr	r3, [r7, #12]
 800fc86:	4413      	add	r3, r2
 800fc88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	68ba      	ldr	r2, [r7, #8]
 800fc90:	0151      	lsls	r1, r2, #5
 800fc92:	68fa      	ldr	r2, [r7, #12]
 800fc94:	440a      	add	r2, r1
 800fc96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fc9a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800fc9e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800fca0:	68bb      	ldr	r3, [r7, #8]
 800fca2:	015a      	lsls	r2, r3, #5
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	4413      	add	r3, r2
 800fca8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	68ba      	ldr	r2, [r7, #8]
 800fcb0:	0151      	lsls	r1, r2, #5
 800fcb2:	68fa      	ldr	r2, [r7, #12]
 800fcb4:	440a      	add	r2, r1
 800fcb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800fcba:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800fcbe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800fcc0:	68fb      	ldr	r3, [r7, #12]
 800fcc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fcc6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800fcc8:	683b      	ldr	r3, [r7, #0]
 800fcca:	781b      	ldrb	r3, [r3, #0]
 800fccc:	f003 030f 	and.w	r3, r3, #15
 800fcd0:	2101      	movs	r1, #1
 800fcd2:	fa01 f303 	lsl.w	r3, r1, r3
 800fcd6:	041b      	lsls	r3, r3, #16
 800fcd8:	43db      	mvns	r3, r3
 800fcda:	68f9      	ldr	r1, [r7, #12]
 800fcdc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fce0:	4013      	ands	r3, r2
 800fce2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fcea:	69da      	ldr	r2, [r3, #28]
 800fcec:	683b      	ldr	r3, [r7, #0]
 800fcee:	781b      	ldrb	r3, [r3, #0]
 800fcf0:	f003 030f 	and.w	r3, r3, #15
 800fcf4:	2101      	movs	r1, #1
 800fcf6:	fa01 f303 	lsl.w	r3, r1, r3
 800fcfa:	041b      	lsls	r3, r3, #16
 800fcfc:	43db      	mvns	r3, r3
 800fcfe:	68f9      	ldr	r1, [r7, #12]
 800fd00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800fd04:	4013      	ands	r3, r2
 800fd06:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800fd08:	68bb      	ldr	r3, [r7, #8]
 800fd0a:	015a      	lsls	r2, r3, #5
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	4413      	add	r3, r2
 800fd10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd14:	681a      	ldr	r2, [r3, #0]
 800fd16:	68bb      	ldr	r3, [r7, #8]
 800fd18:	0159      	lsls	r1, r3, #5
 800fd1a:	68fb      	ldr	r3, [r7, #12]
 800fd1c:	440b      	add	r3, r1
 800fd1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800fd22:	4619      	mov	r1, r3
 800fd24:	4b05      	ldr	r3, [pc, #20]	@ (800fd3c <USB_DeactivateEndpoint+0x1b4>)
 800fd26:	4013      	ands	r3, r2
 800fd28:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800fd2a:	2300      	movs	r3, #0
}
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	3714      	adds	r7, #20
 800fd30:	46bd      	mov	sp, r7
 800fd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd36:	4770      	bx	lr
 800fd38:	ec337800 	.word	0xec337800
 800fd3c:	eff37800 	.word	0xeff37800

0800fd40 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800fd40:	b580      	push	{r7, lr}
 800fd42:	b08a      	sub	sp, #40	@ 0x28
 800fd44:	af02      	add	r7, sp, #8
 800fd46:	60f8      	str	r0, [r7, #12]
 800fd48:	60b9      	str	r1, [r7, #8]
 800fd4a:	4613      	mov	r3, r2
 800fd4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd4e:	68fb      	ldr	r3, [r7, #12]
 800fd50:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800fd52:	68bb      	ldr	r3, [r7, #8]
 800fd54:	781b      	ldrb	r3, [r3, #0]
 800fd56:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fd58:	68bb      	ldr	r3, [r7, #8]
 800fd5a:	785b      	ldrb	r3, [r3, #1]
 800fd5c:	2b01      	cmp	r3, #1
 800fd5e:	f040 8185 	bne.w	801006c <USB_EPStartXfer+0x32c>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800fd62:	68bb      	ldr	r3, [r7, #8]
 800fd64:	691b      	ldr	r3, [r3, #16]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d132      	bne.n	800fdd0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fd6a:	69bb      	ldr	r3, [r7, #24]
 800fd6c:	015a      	lsls	r2, r3, #5
 800fd6e:	69fb      	ldr	r3, [r7, #28]
 800fd70:	4413      	add	r3, r2
 800fd72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fd76:	691a      	ldr	r2, [r3, #16]
 800fd78:	69bb      	ldr	r3, [r7, #24]
 800fd7a:	0159      	lsls	r1, r3, #5
 800fd7c:	69fb      	ldr	r3, [r7, #28]
 800fd7e:	440b      	add	r3, r1
 800fd80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fd84:	4619      	mov	r1, r3
 800fd86:	4ba7      	ldr	r3, [pc, #668]	@ (8010024 <USB_EPStartXfer+0x2e4>)
 800fd88:	4013      	ands	r3, r2
 800fd8a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fd8c:	69bb      	ldr	r3, [r7, #24]
 800fd8e:	015a      	lsls	r2, r3, #5
 800fd90:	69fb      	ldr	r3, [r7, #28]
 800fd92:	4413      	add	r3, r2
 800fd94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fd98:	691b      	ldr	r3, [r3, #16]
 800fd9a:	69ba      	ldr	r2, [r7, #24]
 800fd9c:	0151      	lsls	r1, r2, #5
 800fd9e:	69fa      	ldr	r2, [r7, #28]
 800fda0:	440a      	add	r2, r1
 800fda2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fda6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800fdaa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fdac:	69bb      	ldr	r3, [r7, #24]
 800fdae:	015a      	lsls	r2, r3, #5
 800fdb0:	69fb      	ldr	r3, [r7, #28]
 800fdb2:	4413      	add	r3, r2
 800fdb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fdb8:	691a      	ldr	r2, [r3, #16]
 800fdba:	69bb      	ldr	r3, [r7, #24]
 800fdbc:	0159      	lsls	r1, r3, #5
 800fdbe:	69fb      	ldr	r3, [r7, #28]
 800fdc0:	440b      	add	r3, r1
 800fdc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fdc6:	4619      	mov	r1, r3
 800fdc8:	4b97      	ldr	r3, [pc, #604]	@ (8010028 <USB_EPStartXfer+0x2e8>)
 800fdca:	4013      	ands	r3, r2
 800fdcc:	610b      	str	r3, [r1, #16]
 800fdce:	e097      	b.n	800ff00 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800fdd0:	69bb      	ldr	r3, [r7, #24]
 800fdd2:	015a      	lsls	r2, r3, #5
 800fdd4:	69fb      	ldr	r3, [r7, #28]
 800fdd6:	4413      	add	r3, r2
 800fdd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fddc:	691a      	ldr	r2, [r3, #16]
 800fdde:	69bb      	ldr	r3, [r7, #24]
 800fde0:	0159      	lsls	r1, r3, #5
 800fde2:	69fb      	ldr	r3, [r7, #28]
 800fde4:	440b      	add	r3, r1
 800fde6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fdea:	4619      	mov	r1, r3
 800fdec:	4b8e      	ldr	r3, [pc, #568]	@ (8010028 <USB_EPStartXfer+0x2e8>)
 800fdee:	4013      	ands	r3, r2
 800fdf0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800fdf2:	69bb      	ldr	r3, [r7, #24]
 800fdf4:	015a      	lsls	r2, r3, #5
 800fdf6:	69fb      	ldr	r3, [r7, #28]
 800fdf8:	4413      	add	r3, r2
 800fdfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fdfe:	691a      	ldr	r2, [r3, #16]
 800fe00:	69bb      	ldr	r3, [r7, #24]
 800fe02:	0159      	lsls	r1, r3, #5
 800fe04:	69fb      	ldr	r3, [r7, #28]
 800fe06:	440b      	add	r3, r1
 800fe08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fe0c:	4619      	mov	r1, r3
 800fe0e:	4b85      	ldr	r3, [pc, #532]	@ (8010024 <USB_EPStartXfer+0x2e4>)
 800fe10:	4013      	ands	r3, r2
 800fe12:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800fe14:	69bb      	ldr	r3, [r7, #24]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d11a      	bne.n	800fe50 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800fe1a:	68bb      	ldr	r3, [r7, #8]
 800fe1c:	691a      	ldr	r2, [r3, #16]
 800fe1e:	68bb      	ldr	r3, [r7, #8]
 800fe20:	689b      	ldr	r3, [r3, #8]
 800fe22:	429a      	cmp	r2, r3
 800fe24:	d903      	bls.n	800fe2e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800fe26:	68bb      	ldr	r3, [r7, #8]
 800fe28:	689a      	ldr	r2, [r3, #8]
 800fe2a:	68bb      	ldr	r3, [r7, #8]
 800fe2c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800fe2e:	69bb      	ldr	r3, [r7, #24]
 800fe30:	015a      	lsls	r2, r3, #5
 800fe32:	69fb      	ldr	r3, [r7, #28]
 800fe34:	4413      	add	r3, r2
 800fe36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fe3a:	691b      	ldr	r3, [r3, #16]
 800fe3c:	69ba      	ldr	r2, [r7, #24]
 800fe3e:	0151      	lsls	r1, r2, #5
 800fe40:	69fa      	ldr	r2, [r7, #28]
 800fe42:	440a      	add	r2, r1
 800fe44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800fe48:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800fe4c:	6113      	str	r3, [r2, #16]
 800fe4e:	e044      	b.n	800feda <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800fe50:	68bb      	ldr	r3, [r7, #8]
 800fe52:	691a      	ldr	r2, [r3, #16]
 800fe54:	68bb      	ldr	r3, [r7, #8]
 800fe56:	689b      	ldr	r3, [r3, #8]
 800fe58:	4413      	add	r3, r2
 800fe5a:	1e5a      	subs	r2, r3, #1
 800fe5c:	68bb      	ldr	r3, [r7, #8]
 800fe5e:	689b      	ldr	r3, [r3, #8]
 800fe60:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe64:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800fe66:	69bb      	ldr	r3, [r7, #24]
 800fe68:	015a      	lsls	r2, r3, #5
 800fe6a:	69fb      	ldr	r3, [r7, #28]
 800fe6c:	4413      	add	r3, r2
 800fe6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fe72:	691a      	ldr	r2, [r3, #16]
 800fe74:	8afb      	ldrh	r3, [r7, #22]
 800fe76:	04d9      	lsls	r1, r3, #19
 800fe78:	4b6c      	ldr	r3, [pc, #432]	@ (801002c <USB_EPStartXfer+0x2ec>)
 800fe7a:	400b      	ands	r3, r1
 800fe7c:	69b9      	ldr	r1, [r7, #24]
 800fe7e:	0148      	lsls	r0, r1, #5
 800fe80:	69f9      	ldr	r1, [r7, #28]
 800fe82:	4401      	add	r1, r0
 800fe84:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800fe88:	4313      	orrs	r3, r2
 800fe8a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800fe8c:	68bb      	ldr	r3, [r7, #8]
 800fe8e:	791b      	ldrb	r3, [r3, #4]
 800fe90:	2b01      	cmp	r3, #1
 800fe92:	d122      	bne.n	800feda <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800fe94:	69bb      	ldr	r3, [r7, #24]
 800fe96:	015a      	lsls	r2, r3, #5
 800fe98:	69fb      	ldr	r3, [r7, #28]
 800fe9a:	4413      	add	r3, r2
 800fe9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fea0:	691b      	ldr	r3, [r3, #16]
 800fea2:	69ba      	ldr	r2, [r7, #24]
 800fea4:	0151      	lsls	r1, r2, #5
 800fea6:	69fa      	ldr	r2, [r7, #28]
 800fea8:	440a      	add	r2, r1
 800feaa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800feae:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800feb2:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800feb4:	69bb      	ldr	r3, [r7, #24]
 800feb6:	015a      	lsls	r2, r3, #5
 800feb8:	69fb      	ldr	r3, [r7, #28]
 800feba:	4413      	add	r3, r2
 800febc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fec0:	691a      	ldr	r2, [r3, #16]
 800fec2:	8afb      	ldrh	r3, [r7, #22]
 800fec4:	075b      	lsls	r3, r3, #29
 800fec6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800feca:	69b9      	ldr	r1, [r7, #24]
 800fecc:	0148      	lsls	r0, r1, #5
 800fece:	69f9      	ldr	r1, [r7, #28]
 800fed0:	4401      	add	r1, r0
 800fed2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800fed6:	4313      	orrs	r3, r2
 800fed8:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800feda:	69bb      	ldr	r3, [r7, #24]
 800fedc:	015a      	lsls	r2, r3, #5
 800fede:	69fb      	ldr	r3, [r7, #28]
 800fee0:	4413      	add	r3, r2
 800fee2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800fee6:	691a      	ldr	r2, [r3, #16]
 800fee8:	68bb      	ldr	r3, [r7, #8]
 800feea:	691b      	ldr	r3, [r3, #16]
 800feec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fef0:	69b9      	ldr	r1, [r7, #24]
 800fef2:	0148      	lsls	r0, r1, #5
 800fef4:	69f9      	ldr	r1, [r7, #28]
 800fef6:	4401      	add	r1, r0
 800fef8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800fefc:	4313      	orrs	r3, r2
 800fefe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ff00:	79fb      	ldrb	r3, [r7, #7]
 800ff02:	2b01      	cmp	r3, #1
 800ff04:	d14b      	bne.n	800ff9e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ff06:	68bb      	ldr	r3, [r7, #8]
 800ff08:	69db      	ldr	r3, [r3, #28]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d009      	beq.n	800ff22 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ff0e:	69bb      	ldr	r3, [r7, #24]
 800ff10:	015a      	lsls	r2, r3, #5
 800ff12:	69fb      	ldr	r3, [r7, #28]
 800ff14:	4413      	add	r3, r2
 800ff16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ff1a:	461a      	mov	r2, r3
 800ff1c:	68bb      	ldr	r3, [r7, #8]
 800ff1e:	69db      	ldr	r3, [r3, #28]
 800ff20:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ff22:	68bb      	ldr	r3, [r7, #8]
 800ff24:	791b      	ldrb	r3, [r3, #4]
 800ff26:	2b01      	cmp	r3, #1
 800ff28:	d128      	bne.n	800ff7c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ff2a:	69fb      	ldr	r3, [r7, #28]
 800ff2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ff30:	689b      	ldr	r3, [r3, #8]
 800ff32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ff36:	2b00      	cmp	r3, #0
 800ff38:	d110      	bne.n	800ff5c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ff3a:	69bb      	ldr	r3, [r7, #24]
 800ff3c:	015a      	lsls	r2, r3, #5
 800ff3e:	69fb      	ldr	r3, [r7, #28]
 800ff40:	4413      	add	r3, r2
 800ff42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ff46:	681b      	ldr	r3, [r3, #0]
 800ff48:	69ba      	ldr	r2, [r7, #24]
 800ff4a:	0151      	lsls	r1, r2, #5
 800ff4c:	69fa      	ldr	r2, [r7, #28]
 800ff4e:	440a      	add	r2, r1
 800ff50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ff54:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ff58:	6013      	str	r3, [r2, #0]
 800ff5a:	e00f      	b.n	800ff7c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ff5c:	69bb      	ldr	r3, [r7, #24]
 800ff5e:	015a      	lsls	r2, r3, #5
 800ff60:	69fb      	ldr	r3, [r7, #28]
 800ff62:	4413      	add	r3, r2
 800ff64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	69ba      	ldr	r2, [r7, #24]
 800ff6c:	0151      	lsls	r1, r2, #5
 800ff6e:	69fa      	ldr	r2, [r7, #28]
 800ff70:	440a      	add	r2, r1
 800ff72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ff76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ff7a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ff7c:	69bb      	ldr	r3, [r7, #24]
 800ff7e:	015a      	lsls	r2, r3, #5
 800ff80:	69fb      	ldr	r3, [r7, #28]
 800ff82:	4413      	add	r3, r2
 800ff84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	69ba      	ldr	r2, [r7, #24]
 800ff8c:	0151      	lsls	r1, r2, #5
 800ff8e:	69fa      	ldr	r2, [r7, #28]
 800ff90:	440a      	add	r2, r1
 800ff92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ff96:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ff9a:	6013      	str	r3, [r2, #0]
 800ff9c:	e169      	b.n	8010272 <USB_EPStartXfer+0x532>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ff9e:	69bb      	ldr	r3, [r7, #24]
 800ffa0:	015a      	lsls	r2, r3, #5
 800ffa2:	69fb      	ldr	r3, [r7, #28]
 800ffa4:	4413      	add	r3, r2
 800ffa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	69ba      	ldr	r2, [r7, #24]
 800ffae:	0151      	lsls	r1, r2, #5
 800ffb0:	69fa      	ldr	r2, [r7, #28]
 800ffb2:	440a      	add	r2, r1
 800ffb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ffb8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ffbc:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ffbe:	68bb      	ldr	r3, [r7, #8]
 800ffc0:	791b      	ldrb	r3, [r3, #4]
 800ffc2:	2b01      	cmp	r3, #1
 800ffc4:	d015      	beq.n	800fff2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ffc6:	68bb      	ldr	r3, [r7, #8]
 800ffc8:	691b      	ldr	r3, [r3, #16]
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	f000 8151 	beq.w	8010272 <USB_EPStartXfer+0x532>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ffd0:	69fb      	ldr	r3, [r7, #28]
 800ffd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ffd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ffd8:	68bb      	ldr	r3, [r7, #8]
 800ffda:	781b      	ldrb	r3, [r3, #0]
 800ffdc:	f003 030f 	and.w	r3, r3, #15
 800ffe0:	2101      	movs	r1, #1
 800ffe2:	fa01 f303 	lsl.w	r3, r1, r3
 800ffe6:	69f9      	ldr	r1, [r7, #28]
 800ffe8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ffec:	4313      	orrs	r3, r2
 800ffee:	634b      	str	r3, [r1, #52]	@ 0x34
 800fff0:	e13f      	b.n	8010272 <USB_EPStartXfer+0x532>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fff2:	69fb      	ldr	r3, [r7, #28]
 800fff4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800fff8:	689b      	ldr	r3, [r3, #8]
 800fffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d116      	bne.n	8010030 <USB_EPStartXfer+0x2f0>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010002:	69bb      	ldr	r3, [r7, #24]
 8010004:	015a      	lsls	r2, r3, #5
 8010006:	69fb      	ldr	r3, [r7, #28]
 8010008:	4413      	add	r3, r2
 801000a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	69ba      	ldr	r2, [r7, #24]
 8010012:	0151      	lsls	r1, r2, #5
 8010014:	69fa      	ldr	r2, [r7, #28]
 8010016:	440a      	add	r2, r1
 8010018:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801001c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010020:	6013      	str	r3, [r2, #0]
 8010022:	e015      	b.n	8010050 <USB_EPStartXfer+0x310>
 8010024:	e007ffff 	.word	0xe007ffff
 8010028:	fff80000 	.word	0xfff80000
 801002c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010030:	69bb      	ldr	r3, [r7, #24]
 8010032:	015a      	lsls	r2, r3, #5
 8010034:	69fb      	ldr	r3, [r7, #28]
 8010036:	4413      	add	r3, r2
 8010038:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	69ba      	ldr	r2, [r7, #24]
 8010040:	0151      	lsls	r1, r2, #5
 8010042:	69fa      	ldr	r2, [r7, #28]
 8010044:	440a      	add	r2, r1
 8010046:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801004a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801004e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8010050:	68bb      	ldr	r3, [r7, #8]
 8010052:	68d9      	ldr	r1, [r3, #12]
 8010054:	68bb      	ldr	r3, [r7, #8]
 8010056:	781a      	ldrb	r2, [r3, #0]
 8010058:	68bb      	ldr	r3, [r7, #8]
 801005a:	691b      	ldr	r3, [r3, #16]
 801005c:	b298      	uxth	r0, r3
 801005e:	79fb      	ldrb	r3, [r7, #7]
 8010060:	9300      	str	r3, [sp, #0]
 8010062:	4603      	mov	r3, r0
 8010064:	68f8      	ldr	r0, [r7, #12]
 8010066:	f000 f9b9 	bl	80103dc <USB_WritePacket>
 801006a:	e102      	b.n	8010272 <USB_EPStartXfer+0x532>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801006c:	69bb      	ldr	r3, [r7, #24]
 801006e:	015a      	lsls	r2, r3, #5
 8010070:	69fb      	ldr	r3, [r7, #28]
 8010072:	4413      	add	r3, r2
 8010074:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010078:	691a      	ldr	r2, [r3, #16]
 801007a:	69bb      	ldr	r3, [r7, #24]
 801007c:	0159      	lsls	r1, r3, #5
 801007e:	69fb      	ldr	r3, [r7, #28]
 8010080:	440b      	add	r3, r1
 8010082:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010086:	4619      	mov	r1, r3
 8010088:	4b7c      	ldr	r3, [pc, #496]	@ (801027c <USB_EPStartXfer+0x53c>)
 801008a:	4013      	ands	r3, r2
 801008c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801008e:	69bb      	ldr	r3, [r7, #24]
 8010090:	015a      	lsls	r2, r3, #5
 8010092:	69fb      	ldr	r3, [r7, #28]
 8010094:	4413      	add	r3, r2
 8010096:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801009a:	691a      	ldr	r2, [r3, #16]
 801009c:	69bb      	ldr	r3, [r7, #24]
 801009e:	0159      	lsls	r1, r3, #5
 80100a0:	69fb      	ldr	r3, [r7, #28]
 80100a2:	440b      	add	r3, r1
 80100a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80100a8:	4619      	mov	r1, r3
 80100aa:	4b75      	ldr	r3, [pc, #468]	@ (8010280 <USB_EPStartXfer+0x540>)
 80100ac:	4013      	ands	r3, r2
 80100ae:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 80100b0:	69bb      	ldr	r3, [r7, #24]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d12f      	bne.n	8010116 <USB_EPStartXfer+0x3d6>
    {
      if (ep->xfer_len > 0U)
 80100b6:	68bb      	ldr	r3, [r7, #8]
 80100b8:	691b      	ldr	r3, [r3, #16]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d003      	beq.n	80100c6 <USB_EPStartXfer+0x386>
      {
        ep->xfer_len = ep->maxpacket;
 80100be:	68bb      	ldr	r3, [r7, #8]
 80100c0:	689a      	ldr	r2, [r3, #8]
 80100c2:	68bb      	ldr	r3, [r7, #8]
 80100c4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80100c6:	68bb      	ldr	r3, [r7, #8]
 80100c8:	689a      	ldr	r2, [r3, #8]
 80100ca:	68bb      	ldr	r3, [r7, #8]
 80100cc:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80100ce:	69bb      	ldr	r3, [r7, #24]
 80100d0:	015a      	lsls	r2, r3, #5
 80100d2:	69fb      	ldr	r3, [r7, #28]
 80100d4:	4413      	add	r3, r2
 80100d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80100da:	691a      	ldr	r2, [r3, #16]
 80100dc:	68bb      	ldr	r3, [r7, #8]
 80100de:	6a1b      	ldr	r3, [r3, #32]
 80100e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80100e4:	69b9      	ldr	r1, [r7, #24]
 80100e6:	0148      	lsls	r0, r1, #5
 80100e8:	69f9      	ldr	r1, [r7, #28]
 80100ea:	4401      	add	r1, r0
 80100ec:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80100f0:	4313      	orrs	r3, r2
 80100f2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80100f4:	69bb      	ldr	r3, [r7, #24]
 80100f6:	015a      	lsls	r2, r3, #5
 80100f8:	69fb      	ldr	r3, [r7, #28]
 80100fa:	4413      	add	r3, r2
 80100fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010100:	691b      	ldr	r3, [r3, #16]
 8010102:	69ba      	ldr	r2, [r7, #24]
 8010104:	0151      	lsls	r1, r2, #5
 8010106:	69fa      	ldr	r2, [r7, #28]
 8010108:	440a      	add	r2, r1
 801010a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801010e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010112:	6113      	str	r3, [r2, #16]
 8010114:	e05f      	b.n	80101d6 <USB_EPStartXfer+0x496>
    }
    else
    {
      if (ep->xfer_len == 0U)
 8010116:	68bb      	ldr	r3, [r7, #8]
 8010118:	691b      	ldr	r3, [r3, #16]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d123      	bne.n	8010166 <USB_EPStartXfer+0x426>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801011e:	69bb      	ldr	r3, [r7, #24]
 8010120:	015a      	lsls	r2, r3, #5
 8010122:	69fb      	ldr	r3, [r7, #28]
 8010124:	4413      	add	r3, r2
 8010126:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801012a:	691a      	ldr	r2, [r3, #16]
 801012c:	68bb      	ldr	r3, [r7, #8]
 801012e:	689b      	ldr	r3, [r3, #8]
 8010130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010134:	69b9      	ldr	r1, [r7, #24]
 8010136:	0148      	lsls	r0, r1, #5
 8010138:	69f9      	ldr	r1, [r7, #28]
 801013a:	4401      	add	r1, r0
 801013c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8010140:	4313      	orrs	r3, r2
 8010142:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010144:	69bb      	ldr	r3, [r7, #24]
 8010146:	015a      	lsls	r2, r3, #5
 8010148:	69fb      	ldr	r3, [r7, #28]
 801014a:	4413      	add	r3, r2
 801014c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010150:	691b      	ldr	r3, [r3, #16]
 8010152:	69ba      	ldr	r2, [r7, #24]
 8010154:	0151      	lsls	r1, r2, #5
 8010156:	69fa      	ldr	r2, [r7, #28]
 8010158:	440a      	add	r2, r1
 801015a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801015e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010162:	6113      	str	r3, [r2, #16]
 8010164:	e037      	b.n	80101d6 <USB_EPStartXfer+0x496>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010166:	68bb      	ldr	r3, [r7, #8]
 8010168:	691a      	ldr	r2, [r3, #16]
 801016a:	68bb      	ldr	r3, [r7, #8]
 801016c:	689b      	ldr	r3, [r3, #8]
 801016e:	4413      	add	r3, r2
 8010170:	1e5a      	subs	r2, r3, #1
 8010172:	68bb      	ldr	r3, [r7, #8]
 8010174:	689b      	ldr	r3, [r3, #8]
 8010176:	fbb2 f3f3 	udiv	r3, r2, r3
 801017a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 801017c:	68bb      	ldr	r3, [r7, #8]
 801017e:	689b      	ldr	r3, [r3, #8]
 8010180:	8afa      	ldrh	r2, [r7, #22]
 8010182:	fb03 f202 	mul.w	r2, r3, r2
 8010186:	68bb      	ldr	r3, [r7, #8]
 8010188:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801018a:	69bb      	ldr	r3, [r7, #24]
 801018c:	015a      	lsls	r2, r3, #5
 801018e:	69fb      	ldr	r3, [r7, #28]
 8010190:	4413      	add	r3, r2
 8010192:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010196:	691a      	ldr	r2, [r3, #16]
 8010198:	8afb      	ldrh	r3, [r7, #22]
 801019a:	04d9      	lsls	r1, r3, #19
 801019c:	4b39      	ldr	r3, [pc, #228]	@ (8010284 <USB_EPStartXfer+0x544>)
 801019e:	400b      	ands	r3, r1
 80101a0:	69b9      	ldr	r1, [r7, #24]
 80101a2:	0148      	lsls	r0, r1, #5
 80101a4:	69f9      	ldr	r1, [r7, #28]
 80101a6:	4401      	add	r1, r0
 80101a8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80101ac:	4313      	orrs	r3, r2
 80101ae:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80101b0:	69bb      	ldr	r3, [r7, #24]
 80101b2:	015a      	lsls	r2, r3, #5
 80101b4:	69fb      	ldr	r3, [r7, #28]
 80101b6:	4413      	add	r3, r2
 80101b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80101bc:	691a      	ldr	r2, [r3, #16]
 80101be:	68bb      	ldr	r3, [r7, #8]
 80101c0:	6a1b      	ldr	r3, [r3, #32]
 80101c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80101c6:	69b9      	ldr	r1, [r7, #24]
 80101c8:	0148      	lsls	r0, r1, #5
 80101ca:	69f9      	ldr	r1, [r7, #28]
 80101cc:	4401      	add	r1, r0
 80101ce:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80101d2:	4313      	orrs	r3, r2
 80101d4:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80101d6:	79fb      	ldrb	r3, [r7, #7]
 80101d8:	2b01      	cmp	r3, #1
 80101da:	d10d      	bne.n	80101f8 <USB_EPStartXfer+0x4b8>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80101dc:	68bb      	ldr	r3, [r7, #8]
 80101de:	68db      	ldr	r3, [r3, #12]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d009      	beq.n	80101f8 <USB_EPStartXfer+0x4b8>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80101e4:	68bb      	ldr	r3, [r7, #8]
 80101e6:	68d9      	ldr	r1, [r3, #12]
 80101e8:	69bb      	ldr	r3, [r7, #24]
 80101ea:	015a      	lsls	r2, r3, #5
 80101ec:	69fb      	ldr	r3, [r7, #28]
 80101ee:	4413      	add	r3, r2
 80101f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80101f4:	460a      	mov	r2, r1
 80101f6:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80101f8:	68bb      	ldr	r3, [r7, #8]
 80101fa:	791b      	ldrb	r3, [r3, #4]
 80101fc:	2b01      	cmp	r3, #1
 80101fe:	d128      	bne.n	8010252 <USB_EPStartXfer+0x512>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010200:	69fb      	ldr	r3, [r7, #28]
 8010202:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010206:	689b      	ldr	r3, [r3, #8]
 8010208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801020c:	2b00      	cmp	r3, #0
 801020e:	d110      	bne.n	8010232 <USB_EPStartXfer+0x4f2>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8010210:	69bb      	ldr	r3, [r7, #24]
 8010212:	015a      	lsls	r2, r3, #5
 8010214:	69fb      	ldr	r3, [r7, #28]
 8010216:	4413      	add	r3, r2
 8010218:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	69ba      	ldr	r2, [r7, #24]
 8010220:	0151      	lsls	r1, r2, #5
 8010222:	69fa      	ldr	r2, [r7, #28]
 8010224:	440a      	add	r2, r1
 8010226:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801022a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 801022e:	6013      	str	r3, [r2, #0]
 8010230:	e00f      	b.n	8010252 <USB_EPStartXfer+0x512>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010232:	69bb      	ldr	r3, [r7, #24]
 8010234:	015a      	lsls	r2, r3, #5
 8010236:	69fb      	ldr	r3, [r7, #28]
 8010238:	4413      	add	r3, r2
 801023a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	69ba      	ldr	r2, [r7, #24]
 8010242:	0151      	lsls	r1, r2, #5
 8010244:	69fa      	ldr	r2, [r7, #28]
 8010246:	440a      	add	r2, r1
 8010248:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801024c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010250:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010252:	69bb      	ldr	r3, [r7, #24]
 8010254:	015a      	lsls	r2, r3, #5
 8010256:	69fb      	ldr	r3, [r7, #28]
 8010258:	4413      	add	r3, r2
 801025a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	69ba      	ldr	r2, [r7, #24]
 8010262:	0151      	lsls	r1, r2, #5
 8010264:	69fa      	ldr	r2, [r7, #28]
 8010266:	440a      	add	r2, r1
 8010268:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801026c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8010270:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010272:	2300      	movs	r3, #0
}
 8010274:	4618      	mov	r0, r3
 8010276:	3720      	adds	r7, #32
 8010278:	46bd      	mov	sp, r7
 801027a:	bd80      	pop	{r7, pc}
 801027c:	fff80000 	.word	0xfff80000
 8010280:	e007ffff 	.word	0xe007ffff
 8010284:	1ff80000 	.word	0x1ff80000

08010288 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010288:	b480      	push	{r7}
 801028a:	b087      	sub	sp, #28
 801028c:	af00      	add	r7, sp, #0
 801028e:	6078      	str	r0, [r7, #4]
 8010290:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010292:	2300      	movs	r3, #0
 8010294:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8010296:	2300      	movs	r3, #0
 8010298:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801029e:	683b      	ldr	r3, [r7, #0]
 80102a0:	785b      	ldrb	r3, [r3, #1]
 80102a2:	2b01      	cmp	r3, #1
 80102a4:	d14a      	bne.n	801033c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80102a6:	683b      	ldr	r3, [r7, #0]
 80102a8:	781b      	ldrb	r3, [r3, #0]
 80102aa:	015a      	lsls	r2, r3, #5
 80102ac:	693b      	ldr	r3, [r7, #16]
 80102ae:	4413      	add	r3, r2
 80102b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80102ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80102be:	f040 8086 	bne.w	80103ce <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80102c2:	683b      	ldr	r3, [r7, #0]
 80102c4:	781b      	ldrb	r3, [r3, #0]
 80102c6:	015a      	lsls	r2, r3, #5
 80102c8:	693b      	ldr	r3, [r7, #16]
 80102ca:	4413      	add	r3, r2
 80102cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	683a      	ldr	r2, [r7, #0]
 80102d4:	7812      	ldrb	r2, [r2, #0]
 80102d6:	0151      	lsls	r1, r2, #5
 80102d8:	693a      	ldr	r2, [r7, #16]
 80102da:	440a      	add	r2, r1
 80102dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80102e0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80102e4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80102e6:	683b      	ldr	r3, [r7, #0]
 80102e8:	781b      	ldrb	r3, [r3, #0]
 80102ea:	015a      	lsls	r2, r3, #5
 80102ec:	693b      	ldr	r3, [r7, #16]
 80102ee:	4413      	add	r3, r2
 80102f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	683a      	ldr	r2, [r7, #0]
 80102f8:	7812      	ldrb	r2, [r2, #0]
 80102fa:	0151      	lsls	r1, r2, #5
 80102fc:	693a      	ldr	r2, [r7, #16]
 80102fe:	440a      	add	r2, r1
 8010300:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010304:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010308:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	3301      	adds	r3, #1
 801030e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	f242 7210 	movw	r2, #10000	@ 0x2710
 8010316:	4293      	cmp	r3, r2
 8010318:	d902      	bls.n	8010320 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801031a:	2301      	movs	r3, #1
 801031c:	75fb      	strb	r3, [r7, #23]
          break;
 801031e:	e056      	b.n	80103ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8010320:	683b      	ldr	r3, [r7, #0]
 8010322:	781b      	ldrb	r3, [r3, #0]
 8010324:	015a      	lsls	r2, r3, #5
 8010326:	693b      	ldr	r3, [r7, #16]
 8010328:	4413      	add	r3, r2
 801032a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010334:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010338:	d0e7      	beq.n	801030a <USB_EPStopXfer+0x82>
 801033a:	e048      	b.n	80103ce <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801033c:	683b      	ldr	r3, [r7, #0]
 801033e:	781b      	ldrb	r3, [r3, #0]
 8010340:	015a      	lsls	r2, r3, #5
 8010342:	693b      	ldr	r3, [r7, #16]
 8010344:	4413      	add	r3, r2
 8010346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010350:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010354:	d13b      	bne.n	80103ce <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8010356:	683b      	ldr	r3, [r7, #0]
 8010358:	781b      	ldrb	r3, [r3, #0]
 801035a:	015a      	lsls	r2, r3, #5
 801035c:	693b      	ldr	r3, [r7, #16]
 801035e:	4413      	add	r3, r2
 8010360:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	683a      	ldr	r2, [r7, #0]
 8010368:	7812      	ldrb	r2, [r2, #0]
 801036a:	0151      	lsls	r1, r2, #5
 801036c:	693a      	ldr	r2, [r7, #16]
 801036e:	440a      	add	r2, r1
 8010370:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010374:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010378:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801037a:	683b      	ldr	r3, [r7, #0]
 801037c:	781b      	ldrb	r3, [r3, #0]
 801037e:	015a      	lsls	r2, r3, #5
 8010380:	693b      	ldr	r3, [r7, #16]
 8010382:	4413      	add	r3, r2
 8010384:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	683a      	ldr	r2, [r7, #0]
 801038c:	7812      	ldrb	r2, [r2, #0]
 801038e:	0151      	lsls	r1, r2, #5
 8010390:	693a      	ldr	r2, [r7, #16]
 8010392:	440a      	add	r2, r1
 8010394:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010398:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801039c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	3301      	adds	r3, #1
 80103a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80103aa:	4293      	cmp	r3, r2
 80103ac:	d902      	bls.n	80103b4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80103ae:	2301      	movs	r3, #1
 80103b0:	75fb      	strb	r3, [r7, #23]
          break;
 80103b2:	e00c      	b.n	80103ce <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80103b4:	683b      	ldr	r3, [r7, #0]
 80103b6:	781b      	ldrb	r3, [r3, #0]
 80103b8:	015a      	lsls	r2, r3, #5
 80103ba:	693b      	ldr	r3, [r7, #16]
 80103bc:	4413      	add	r3, r2
 80103be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80103c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80103cc:	d0e7      	beq.n	801039e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80103ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80103d0:	4618      	mov	r0, r3
 80103d2:	371c      	adds	r7, #28
 80103d4:	46bd      	mov	sp, r7
 80103d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103da:	4770      	bx	lr

080103dc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80103dc:	b480      	push	{r7}
 80103de:	b089      	sub	sp, #36	@ 0x24
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	60f8      	str	r0, [r7, #12]
 80103e4:	60b9      	str	r1, [r7, #8]
 80103e6:	4611      	mov	r1, r2
 80103e8:	461a      	mov	r2, r3
 80103ea:	460b      	mov	r3, r1
 80103ec:	71fb      	strb	r3, [r7, #7]
 80103ee:	4613      	mov	r3, r2
 80103f0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80103f6:	68bb      	ldr	r3, [r7, #8]
 80103f8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80103fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d123      	bne.n	801044a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8010402:	88bb      	ldrh	r3, [r7, #4]
 8010404:	3303      	adds	r3, #3
 8010406:	089b      	lsrs	r3, r3, #2
 8010408:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801040a:	2300      	movs	r3, #0
 801040c:	61bb      	str	r3, [r7, #24]
 801040e:	e018      	b.n	8010442 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010410:	79fb      	ldrb	r3, [r7, #7]
 8010412:	031a      	lsls	r2, r3, #12
 8010414:	697b      	ldr	r3, [r7, #20]
 8010416:	4413      	add	r3, r2
 8010418:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801041c:	461a      	mov	r2, r3
 801041e:	69fb      	ldr	r3, [r7, #28]
 8010420:	681b      	ldr	r3, [r3, #0]
 8010422:	6013      	str	r3, [r2, #0]
      pSrc++;
 8010424:	69fb      	ldr	r3, [r7, #28]
 8010426:	3301      	adds	r3, #1
 8010428:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801042a:	69fb      	ldr	r3, [r7, #28]
 801042c:	3301      	adds	r3, #1
 801042e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010430:	69fb      	ldr	r3, [r7, #28]
 8010432:	3301      	adds	r3, #1
 8010434:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8010436:	69fb      	ldr	r3, [r7, #28]
 8010438:	3301      	adds	r3, #1
 801043a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801043c:	69bb      	ldr	r3, [r7, #24]
 801043e:	3301      	adds	r3, #1
 8010440:	61bb      	str	r3, [r7, #24]
 8010442:	69ba      	ldr	r2, [r7, #24]
 8010444:	693b      	ldr	r3, [r7, #16]
 8010446:	429a      	cmp	r2, r3
 8010448:	d3e2      	bcc.n	8010410 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801044a:	2300      	movs	r3, #0
}
 801044c:	4618      	mov	r0, r3
 801044e:	3724      	adds	r7, #36	@ 0x24
 8010450:	46bd      	mov	sp, r7
 8010452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010456:	4770      	bx	lr

08010458 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010458:	b480      	push	{r7}
 801045a:	b08b      	sub	sp, #44	@ 0x2c
 801045c:	af00      	add	r7, sp, #0
 801045e:	60f8      	str	r0, [r7, #12]
 8010460:	60b9      	str	r1, [r7, #8]
 8010462:	4613      	mov	r3, r2
 8010464:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801046a:	68bb      	ldr	r3, [r7, #8]
 801046c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 801046e:	88fb      	ldrh	r3, [r7, #6]
 8010470:	089b      	lsrs	r3, r3, #2
 8010472:	b29b      	uxth	r3, r3
 8010474:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8010476:	88fb      	ldrh	r3, [r7, #6]
 8010478:	f003 0303 	and.w	r3, r3, #3
 801047c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801047e:	2300      	movs	r3, #0
 8010480:	623b      	str	r3, [r7, #32]
 8010482:	e014      	b.n	80104ae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010484:	69bb      	ldr	r3, [r7, #24]
 8010486:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801048a:	681a      	ldr	r2, [r3, #0]
 801048c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801048e:	601a      	str	r2, [r3, #0]
    pDest++;
 8010490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010492:	3301      	adds	r3, #1
 8010494:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8010496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010498:	3301      	adds	r3, #1
 801049a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801049c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801049e:	3301      	adds	r3, #1
 80104a0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80104a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104a4:	3301      	adds	r3, #1
 80104a6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80104a8:	6a3b      	ldr	r3, [r7, #32]
 80104aa:	3301      	adds	r3, #1
 80104ac:	623b      	str	r3, [r7, #32]
 80104ae:	6a3a      	ldr	r2, [r7, #32]
 80104b0:	697b      	ldr	r3, [r7, #20]
 80104b2:	429a      	cmp	r2, r3
 80104b4:	d3e6      	bcc.n	8010484 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80104b6:	8bfb      	ldrh	r3, [r7, #30]
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d01e      	beq.n	80104fa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80104bc:	2300      	movs	r3, #0
 80104be:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80104c0:	69bb      	ldr	r3, [r7, #24]
 80104c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80104c6:	461a      	mov	r2, r3
 80104c8:	f107 0310 	add.w	r3, r7, #16
 80104cc:	6812      	ldr	r2, [r2, #0]
 80104ce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80104d0:	693a      	ldr	r2, [r7, #16]
 80104d2:	6a3b      	ldr	r3, [r7, #32]
 80104d4:	b2db      	uxtb	r3, r3
 80104d6:	00db      	lsls	r3, r3, #3
 80104d8:	fa22 f303 	lsr.w	r3, r2, r3
 80104dc:	b2da      	uxtb	r2, r3
 80104de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104e0:	701a      	strb	r2, [r3, #0]
      i++;
 80104e2:	6a3b      	ldr	r3, [r7, #32]
 80104e4:	3301      	adds	r3, #1
 80104e6:	623b      	str	r3, [r7, #32]
      pDest++;
 80104e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104ea:	3301      	adds	r3, #1
 80104ec:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80104ee:	8bfb      	ldrh	r3, [r7, #30]
 80104f0:	3b01      	subs	r3, #1
 80104f2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80104f4:	8bfb      	ldrh	r3, [r7, #30]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d1ea      	bne.n	80104d0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80104fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80104fc:	4618      	mov	r0, r3
 80104fe:	372c      	adds	r7, #44	@ 0x2c
 8010500:	46bd      	mov	sp, r7
 8010502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010506:	4770      	bx	lr

08010508 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8010508:	b480      	push	{r7}
 801050a:	b085      	sub	sp, #20
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
 8010510:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010516:	683b      	ldr	r3, [r7, #0]
 8010518:	781b      	ldrb	r3, [r3, #0]
 801051a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801051c:	683b      	ldr	r3, [r7, #0]
 801051e:	785b      	ldrb	r3, [r3, #1]
 8010520:	2b01      	cmp	r3, #1
 8010522:	d12c      	bne.n	801057e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010524:	68bb      	ldr	r3, [r7, #8]
 8010526:	015a      	lsls	r2, r3, #5
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	4413      	add	r3, r2
 801052c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	2b00      	cmp	r3, #0
 8010534:	db12      	blt.n	801055c <USB_EPSetStall+0x54>
 8010536:	68bb      	ldr	r3, [r7, #8]
 8010538:	2b00      	cmp	r3, #0
 801053a:	d00f      	beq.n	801055c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801053c:	68bb      	ldr	r3, [r7, #8]
 801053e:	015a      	lsls	r2, r3, #5
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	4413      	add	r3, r2
 8010544:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	68ba      	ldr	r2, [r7, #8]
 801054c:	0151      	lsls	r1, r2, #5
 801054e:	68fa      	ldr	r2, [r7, #12]
 8010550:	440a      	add	r2, r1
 8010552:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010556:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 801055a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801055c:	68bb      	ldr	r3, [r7, #8]
 801055e:	015a      	lsls	r2, r3, #5
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	4413      	add	r3, r2
 8010564:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	68ba      	ldr	r2, [r7, #8]
 801056c:	0151      	lsls	r1, r2, #5
 801056e:	68fa      	ldr	r2, [r7, #12]
 8010570:	440a      	add	r2, r1
 8010572:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010576:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801057a:	6013      	str	r3, [r2, #0]
 801057c:	e02b      	b.n	80105d6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801057e:	68bb      	ldr	r3, [r7, #8]
 8010580:	015a      	lsls	r2, r3, #5
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	4413      	add	r3, r2
 8010586:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	2b00      	cmp	r3, #0
 801058e:	db12      	blt.n	80105b6 <USB_EPSetStall+0xae>
 8010590:	68bb      	ldr	r3, [r7, #8]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d00f      	beq.n	80105b6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010596:	68bb      	ldr	r3, [r7, #8]
 8010598:	015a      	lsls	r2, r3, #5
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	4413      	add	r3, r2
 801059e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	68ba      	ldr	r2, [r7, #8]
 80105a6:	0151      	lsls	r1, r2, #5
 80105a8:	68fa      	ldr	r2, [r7, #12]
 80105aa:	440a      	add	r2, r1
 80105ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80105b0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80105b4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80105b6:	68bb      	ldr	r3, [r7, #8]
 80105b8:	015a      	lsls	r2, r3, #5
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	4413      	add	r3, r2
 80105be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	68ba      	ldr	r2, [r7, #8]
 80105c6:	0151      	lsls	r1, r2, #5
 80105c8:	68fa      	ldr	r2, [r7, #12]
 80105ca:	440a      	add	r2, r1
 80105cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80105d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80105d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80105d6:	2300      	movs	r3, #0
}
 80105d8:	4618      	mov	r0, r3
 80105da:	3714      	adds	r7, #20
 80105dc:	46bd      	mov	sp, r7
 80105de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e2:	4770      	bx	lr

080105e4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80105e4:	b480      	push	{r7}
 80105e6:	b085      	sub	sp, #20
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	6078      	str	r0, [r7, #4]
 80105ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80105f2:	683b      	ldr	r3, [r7, #0]
 80105f4:	781b      	ldrb	r3, [r3, #0]
 80105f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80105f8:	683b      	ldr	r3, [r7, #0]
 80105fa:	785b      	ldrb	r3, [r3, #1]
 80105fc:	2b01      	cmp	r3, #1
 80105fe:	d128      	bne.n	8010652 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010600:	68bb      	ldr	r3, [r7, #8]
 8010602:	015a      	lsls	r2, r3, #5
 8010604:	68fb      	ldr	r3, [r7, #12]
 8010606:	4413      	add	r3, r2
 8010608:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	68ba      	ldr	r2, [r7, #8]
 8010610:	0151      	lsls	r1, r2, #5
 8010612:	68fa      	ldr	r2, [r7, #12]
 8010614:	440a      	add	r2, r1
 8010616:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801061a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801061e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010620:	683b      	ldr	r3, [r7, #0]
 8010622:	791b      	ldrb	r3, [r3, #4]
 8010624:	2b03      	cmp	r3, #3
 8010626:	d003      	beq.n	8010630 <USB_EPClearStall+0x4c>
 8010628:	683b      	ldr	r3, [r7, #0]
 801062a:	791b      	ldrb	r3, [r3, #4]
 801062c:	2b02      	cmp	r3, #2
 801062e:	d138      	bne.n	80106a2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010630:	68bb      	ldr	r3, [r7, #8]
 8010632:	015a      	lsls	r2, r3, #5
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	4413      	add	r3, r2
 8010638:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	68ba      	ldr	r2, [r7, #8]
 8010640:	0151      	lsls	r1, r2, #5
 8010642:	68fa      	ldr	r2, [r7, #12]
 8010644:	440a      	add	r2, r1
 8010646:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801064a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801064e:	6013      	str	r3, [r2, #0]
 8010650:	e027      	b.n	80106a2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010652:	68bb      	ldr	r3, [r7, #8]
 8010654:	015a      	lsls	r2, r3, #5
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	4413      	add	r3, r2
 801065a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	68ba      	ldr	r2, [r7, #8]
 8010662:	0151      	lsls	r1, r2, #5
 8010664:	68fa      	ldr	r2, [r7, #12]
 8010666:	440a      	add	r2, r1
 8010668:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801066c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8010670:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010672:	683b      	ldr	r3, [r7, #0]
 8010674:	791b      	ldrb	r3, [r3, #4]
 8010676:	2b03      	cmp	r3, #3
 8010678:	d003      	beq.n	8010682 <USB_EPClearStall+0x9e>
 801067a:	683b      	ldr	r3, [r7, #0]
 801067c:	791b      	ldrb	r3, [r3, #4]
 801067e:	2b02      	cmp	r3, #2
 8010680:	d10f      	bne.n	80106a2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010682:	68bb      	ldr	r3, [r7, #8]
 8010684:	015a      	lsls	r2, r3, #5
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	4413      	add	r3, r2
 801068a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	68ba      	ldr	r2, [r7, #8]
 8010692:	0151      	lsls	r1, r2, #5
 8010694:	68fa      	ldr	r2, [r7, #12]
 8010696:	440a      	add	r2, r1
 8010698:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801069c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80106a0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80106a2:	2300      	movs	r3, #0
}
 80106a4:	4618      	mov	r0, r3
 80106a6:	3714      	adds	r7, #20
 80106a8:	46bd      	mov	sp, r7
 80106aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ae:	4770      	bx	lr

080106b0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80106b0:	b480      	push	{r7}
 80106b2:	b085      	sub	sp, #20
 80106b4:	af00      	add	r7, sp, #0
 80106b6:	6078      	str	r0, [r7, #4]
 80106b8:	460b      	mov	r3, r1
 80106ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80106c6:	681b      	ldr	r3, [r3, #0]
 80106c8:	68fa      	ldr	r2, [r7, #12]
 80106ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80106ce:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80106d2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80106da:	681a      	ldr	r2, [r3, #0]
 80106dc:	78fb      	ldrb	r3, [r7, #3]
 80106de:	011b      	lsls	r3, r3, #4
 80106e0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80106e4:	68f9      	ldr	r1, [r7, #12]
 80106e6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80106ea:	4313      	orrs	r3, r2
 80106ec:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80106ee:	2300      	movs	r3, #0
}
 80106f0:	4618      	mov	r0, r3
 80106f2:	3714      	adds	r7, #20
 80106f4:	46bd      	mov	sp, r7
 80106f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fa:	4770      	bx	lr

080106fc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80106fc:	b480      	push	{r7}
 80106fe:	b085      	sub	sp, #20
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	68fa      	ldr	r2, [r7, #12]
 8010712:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8010716:	f023 0303 	bic.w	r3, r3, #3
 801071a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010722:	685b      	ldr	r3, [r3, #4]
 8010724:	68fa      	ldr	r2, [r7, #12]
 8010726:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801072a:	f023 0302 	bic.w	r3, r3, #2
 801072e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010730:	2300      	movs	r3, #0
}
 8010732:	4618      	mov	r0, r3
 8010734:	3714      	adds	r7, #20
 8010736:	46bd      	mov	sp, r7
 8010738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801073c:	4770      	bx	lr

0801073e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801073e:	b480      	push	{r7}
 8010740:	b085      	sub	sp, #20
 8010742:	af00      	add	r7, sp, #0
 8010744:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010750:	681b      	ldr	r3, [r3, #0]
 8010752:	68fa      	ldr	r2, [r7, #12]
 8010754:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8010758:	f023 0303 	bic.w	r3, r3, #3
 801075c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010764:	685b      	ldr	r3, [r3, #4]
 8010766:	68fa      	ldr	r2, [r7, #12]
 8010768:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801076c:	f043 0302 	orr.w	r3, r3, #2
 8010770:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010772:	2300      	movs	r3, #0
}
 8010774:	4618      	mov	r0, r3
 8010776:	3714      	adds	r7, #20
 8010778:	46bd      	mov	sp, r7
 801077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077e:	4770      	bx	lr

08010780 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8010780:	b480      	push	{r7}
 8010782:	b085      	sub	sp, #20
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	695b      	ldr	r3, [r3, #20]
 801078c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	699b      	ldr	r3, [r3, #24]
 8010792:	68fa      	ldr	r2, [r7, #12]
 8010794:	4013      	ands	r3, r2
 8010796:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010798:	68fb      	ldr	r3, [r7, #12]
}
 801079a:	4618      	mov	r0, r3
 801079c:	3714      	adds	r7, #20
 801079e:	46bd      	mov	sp, r7
 80107a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a4:	4770      	bx	lr

080107a6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80107a6:	b480      	push	{r7}
 80107a8:	b085      	sub	sp, #20
 80107aa:	af00      	add	r7, sp, #0
 80107ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80107b8:	699b      	ldr	r3, [r3, #24]
 80107ba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80107c2:	69db      	ldr	r3, [r3, #28]
 80107c4:	68ba      	ldr	r2, [r7, #8]
 80107c6:	4013      	ands	r3, r2
 80107c8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80107ca:	68bb      	ldr	r3, [r7, #8]
 80107cc:	0c1b      	lsrs	r3, r3, #16
}
 80107ce:	4618      	mov	r0, r3
 80107d0:	3714      	adds	r7, #20
 80107d2:	46bd      	mov	sp, r7
 80107d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d8:	4770      	bx	lr

080107da <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80107da:	b480      	push	{r7}
 80107dc:	b085      	sub	sp, #20
 80107de:	af00      	add	r7, sp, #0
 80107e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80107ec:	699b      	ldr	r3, [r3, #24]
 80107ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80107f6:	69db      	ldr	r3, [r3, #28]
 80107f8:	68ba      	ldr	r2, [r7, #8]
 80107fa:	4013      	ands	r3, r2
 80107fc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80107fe:	68bb      	ldr	r3, [r7, #8]
 8010800:	b29b      	uxth	r3, r3
}
 8010802:	4618      	mov	r0, r3
 8010804:	3714      	adds	r7, #20
 8010806:	46bd      	mov	sp, r7
 8010808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080c:	4770      	bx	lr

0801080e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801080e:	b480      	push	{r7}
 8010810:	b085      	sub	sp, #20
 8010812:	af00      	add	r7, sp, #0
 8010814:	6078      	str	r0, [r7, #4]
 8010816:	460b      	mov	r3, r1
 8010818:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801081e:	78fb      	ldrb	r3, [r7, #3]
 8010820:	015a      	lsls	r2, r3, #5
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	4413      	add	r3, r2
 8010826:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801082a:	689b      	ldr	r3, [r3, #8]
 801082c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010834:	695b      	ldr	r3, [r3, #20]
 8010836:	68ba      	ldr	r2, [r7, #8]
 8010838:	4013      	ands	r3, r2
 801083a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801083c:	68bb      	ldr	r3, [r7, #8]
}
 801083e:	4618      	mov	r0, r3
 8010840:	3714      	adds	r7, #20
 8010842:	46bd      	mov	sp, r7
 8010844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010848:	4770      	bx	lr

0801084a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801084a:	b480      	push	{r7}
 801084c:	b087      	sub	sp, #28
 801084e:	af00      	add	r7, sp, #0
 8010850:	6078      	str	r0, [r7, #4]
 8010852:	460b      	mov	r3, r1
 8010854:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010856:	687b      	ldr	r3, [r7, #4]
 8010858:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 801085a:	697b      	ldr	r3, [r7, #20]
 801085c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010860:	691b      	ldr	r3, [r3, #16]
 8010862:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010864:	697b      	ldr	r3, [r7, #20]
 8010866:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801086a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801086c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801086e:	78fb      	ldrb	r3, [r7, #3]
 8010870:	f003 030f 	and.w	r3, r3, #15
 8010874:	68fa      	ldr	r2, [r7, #12]
 8010876:	fa22 f303 	lsr.w	r3, r2, r3
 801087a:	01db      	lsls	r3, r3, #7
 801087c:	b2db      	uxtb	r3, r3
 801087e:	693a      	ldr	r2, [r7, #16]
 8010880:	4313      	orrs	r3, r2
 8010882:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010884:	78fb      	ldrb	r3, [r7, #3]
 8010886:	015a      	lsls	r2, r3, #5
 8010888:	697b      	ldr	r3, [r7, #20]
 801088a:	4413      	add	r3, r2
 801088c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010890:	689b      	ldr	r3, [r3, #8]
 8010892:	693a      	ldr	r2, [r7, #16]
 8010894:	4013      	ands	r3, r2
 8010896:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010898:	68bb      	ldr	r3, [r7, #8]
}
 801089a:	4618      	mov	r0, r3
 801089c:	371c      	adds	r7, #28
 801089e:	46bd      	mov	sp, r7
 80108a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a4:	4770      	bx	lr

080108a6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80108a6:	b480      	push	{r7}
 80108a8:	b083      	sub	sp, #12
 80108aa:	af00      	add	r7, sp, #0
 80108ac:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	695b      	ldr	r3, [r3, #20]
 80108b2:	f003 0301 	and.w	r3, r3, #1
}
 80108b6:	4618      	mov	r0, r3
 80108b8:	370c      	adds	r7, #12
 80108ba:	46bd      	mov	sp, r7
 80108bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c0:	4770      	bx	lr
	...

080108c4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80108c4:	b480      	push	{r7}
 80108c6:	b085      	sub	sp, #20
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80108d6:	681a      	ldr	r2, [r3, #0]
 80108d8:	68fb      	ldr	r3, [r7, #12]
 80108da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80108de:	4619      	mov	r1, r3
 80108e0:	4b09      	ldr	r3, [pc, #36]	@ (8010908 <USB_ActivateSetup+0x44>)
 80108e2:	4013      	ands	r3, r2
 80108e4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80108e6:	68fb      	ldr	r3, [r7, #12]
 80108e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80108ec:	685b      	ldr	r3, [r3, #4]
 80108ee:	68fa      	ldr	r2, [r7, #12]
 80108f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80108f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80108f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80108fa:	2300      	movs	r3, #0
}
 80108fc:	4618      	mov	r0, r3
 80108fe:	3714      	adds	r7, #20
 8010900:	46bd      	mov	sp, r7
 8010902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010906:	4770      	bx	lr
 8010908:	fffff800 	.word	0xfffff800

0801090c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 801090c:	b480      	push	{r7}
 801090e:	b087      	sub	sp, #28
 8010910:	af00      	add	r7, sp, #0
 8010912:	60f8      	str	r0, [r7, #12]
 8010914:	460b      	mov	r3, r1
 8010916:	607a      	str	r2, [r7, #4]
 8010918:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	333c      	adds	r3, #60	@ 0x3c
 8010922:	3304      	adds	r3, #4
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010928:	693b      	ldr	r3, [r7, #16]
 801092a:	4a26      	ldr	r2, [pc, #152]	@ (80109c4 <USB_EP0_OutStart+0xb8>)
 801092c:	4293      	cmp	r3, r2
 801092e:	d90a      	bls.n	8010946 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010930:	697b      	ldr	r3, [r7, #20]
 8010932:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801093c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010940:	d101      	bne.n	8010946 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010942:	2300      	movs	r3, #0
 8010944:	e037      	b.n	80109b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010946:	697b      	ldr	r3, [r7, #20]
 8010948:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801094c:	461a      	mov	r2, r3
 801094e:	2300      	movs	r3, #0
 8010950:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010952:	697b      	ldr	r3, [r7, #20]
 8010954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010958:	691b      	ldr	r3, [r3, #16]
 801095a:	697a      	ldr	r2, [r7, #20]
 801095c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010960:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010964:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010966:	697b      	ldr	r3, [r7, #20]
 8010968:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801096c:	691b      	ldr	r3, [r3, #16]
 801096e:	697a      	ldr	r2, [r7, #20]
 8010970:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010974:	f043 0318 	orr.w	r3, r3, #24
 8010978:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801097a:	697b      	ldr	r3, [r7, #20]
 801097c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010980:	691b      	ldr	r3, [r3, #16]
 8010982:	697a      	ldr	r2, [r7, #20]
 8010984:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010988:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 801098c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801098e:	7afb      	ldrb	r3, [r7, #11]
 8010990:	2b01      	cmp	r3, #1
 8010992:	d10f      	bne.n	80109b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010994:	697b      	ldr	r3, [r7, #20]
 8010996:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801099a:	461a      	mov	r2, r3
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80109a0:	697b      	ldr	r3, [r7, #20]
 80109a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	697a      	ldr	r2, [r7, #20]
 80109aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80109ae:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80109b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80109b4:	2300      	movs	r3, #0
}
 80109b6:	4618      	mov	r0, r3
 80109b8:	371c      	adds	r7, #28
 80109ba:	46bd      	mov	sp, r7
 80109bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c0:	4770      	bx	lr
 80109c2:	bf00      	nop
 80109c4:	4f54300a 	.word	0x4f54300a

080109c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80109c8:	b480      	push	{r7}
 80109ca:	b085      	sub	sp, #20
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80109d0:	2300      	movs	r3, #0
 80109d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	3301      	adds	r3, #1
 80109d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80109e0:	d901      	bls.n	80109e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80109e2:	2303      	movs	r3, #3
 80109e4:	e01b      	b.n	8010a1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	691b      	ldr	r3, [r3, #16]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	daf2      	bge.n	80109d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80109ee:	2300      	movs	r3, #0
 80109f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80109f2:	687b      	ldr	r3, [r7, #4]
 80109f4:	691b      	ldr	r3, [r3, #16]
 80109f6:	f043 0201 	orr.w	r2, r3, #1
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	3301      	adds	r3, #1
 8010a02:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010a0a:	d901      	bls.n	8010a10 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010a0c:	2303      	movs	r3, #3
 8010a0e:	e006      	b.n	8010a1e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	691b      	ldr	r3, [r3, #16]
 8010a14:	f003 0301 	and.w	r3, r3, #1
 8010a18:	2b01      	cmp	r3, #1
 8010a1a:	d0f0      	beq.n	80109fe <USB_CoreReset+0x36>

  return HAL_OK;
 8010a1c:	2300      	movs	r3, #0
}
 8010a1e:	4618      	mov	r0, r3
 8010a20:	3714      	adds	r7, #20
 8010a22:	46bd      	mov	sp, r7
 8010a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a28:	4770      	bx	lr
	...

08010a2c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b084      	sub	sp, #16
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
 8010a34:	460b      	mov	r3, r1
 8010a36:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8010a38:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8010a3c:	f002 fd2c 	bl	8013498 <USBD_static_malloc>
 8010a40:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d109      	bne.n	8010a5c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	32b0      	adds	r2, #176	@ 0xb0
 8010a52:	2100      	movs	r1, #0
 8010a54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8010a58:	2302      	movs	r3, #2
 8010a5a:	e0d4      	b.n	8010c06 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8010a5c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8010a60:	2100      	movs	r1, #0
 8010a62:	68f8      	ldr	r0, [r7, #12]
 8010a64:	f002 fd5c 	bl	8013520 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	32b0      	adds	r2, #176	@ 0xb0
 8010a72:	68f9      	ldr	r1, [r7, #12]
 8010a74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	32b0      	adds	r2, #176	@ 0xb0
 8010a82:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	7c1b      	ldrb	r3, [r3, #16]
 8010a90:	2b00      	cmp	r3, #0
 8010a92:	d138      	bne.n	8010b06 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8010a94:	4b5e      	ldr	r3, [pc, #376]	@ (8010c10 <USBD_CDC_Init+0x1e4>)
 8010a96:	7819      	ldrb	r1, [r3, #0]
 8010a98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010a9c:	2202      	movs	r2, #2
 8010a9e:	6878      	ldr	r0, [r7, #4]
 8010aa0:	f002 fbd7 	bl	8013252 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010aa4:	4b5a      	ldr	r3, [pc, #360]	@ (8010c10 <USBD_CDC_Init+0x1e4>)
 8010aa6:	781b      	ldrb	r3, [r3, #0]
 8010aa8:	f003 020f 	and.w	r2, r3, #15
 8010aac:	6879      	ldr	r1, [r7, #4]
 8010aae:	4613      	mov	r3, r2
 8010ab0:	009b      	lsls	r3, r3, #2
 8010ab2:	4413      	add	r3, r2
 8010ab4:	009b      	lsls	r3, r3, #2
 8010ab6:	440b      	add	r3, r1
 8010ab8:	3324      	adds	r3, #36	@ 0x24
 8010aba:	2201      	movs	r2, #1
 8010abc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8010abe:	4b55      	ldr	r3, [pc, #340]	@ (8010c14 <USBD_CDC_Init+0x1e8>)
 8010ac0:	7819      	ldrb	r1, [r3, #0]
 8010ac2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010ac6:	2202      	movs	r2, #2
 8010ac8:	6878      	ldr	r0, [r7, #4]
 8010aca:	f002 fbc2 	bl	8013252 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8010ace:	4b51      	ldr	r3, [pc, #324]	@ (8010c14 <USBD_CDC_Init+0x1e8>)
 8010ad0:	781b      	ldrb	r3, [r3, #0]
 8010ad2:	f003 020f 	and.w	r2, r3, #15
 8010ad6:	6879      	ldr	r1, [r7, #4]
 8010ad8:	4613      	mov	r3, r2
 8010ada:	009b      	lsls	r3, r3, #2
 8010adc:	4413      	add	r3, r2
 8010ade:	009b      	lsls	r3, r3, #2
 8010ae0:	440b      	add	r3, r1
 8010ae2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010ae6:	2201      	movs	r2, #1
 8010ae8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8010aea:	4b4b      	ldr	r3, [pc, #300]	@ (8010c18 <USBD_CDC_Init+0x1ec>)
 8010aec:	781b      	ldrb	r3, [r3, #0]
 8010aee:	f003 020f 	and.w	r2, r3, #15
 8010af2:	6879      	ldr	r1, [r7, #4]
 8010af4:	4613      	mov	r3, r2
 8010af6:	009b      	lsls	r3, r3, #2
 8010af8:	4413      	add	r3, r2
 8010afa:	009b      	lsls	r3, r3, #2
 8010afc:	440b      	add	r3, r1
 8010afe:	3326      	adds	r3, #38	@ 0x26
 8010b00:	2210      	movs	r2, #16
 8010b02:	801a      	strh	r2, [r3, #0]
 8010b04:	e035      	b.n	8010b72 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8010b06:	4b42      	ldr	r3, [pc, #264]	@ (8010c10 <USBD_CDC_Init+0x1e4>)
 8010b08:	7819      	ldrb	r1, [r3, #0]
 8010b0a:	2340      	movs	r3, #64	@ 0x40
 8010b0c:	2202      	movs	r2, #2
 8010b0e:	6878      	ldr	r0, [r7, #4]
 8010b10:	f002 fb9f 	bl	8013252 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8010b14:	4b3e      	ldr	r3, [pc, #248]	@ (8010c10 <USBD_CDC_Init+0x1e4>)
 8010b16:	781b      	ldrb	r3, [r3, #0]
 8010b18:	f003 020f 	and.w	r2, r3, #15
 8010b1c:	6879      	ldr	r1, [r7, #4]
 8010b1e:	4613      	mov	r3, r2
 8010b20:	009b      	lsls	r3, r3, #2
 8010b22:	4413      	add	r3, r2
 8010b24:	009b      	lsls	r3, r3, #2
 8010b26:	440b      	add	r3, r1
 8010b28:	3324      	adds	r3, #36	@ 0x24
 8010b2a:	2201      	movs	r2, #1
 8010b2c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8010b2e:	4b39      	ldr	r3, [pc, #228]	@ (8010c14 <USBD_CDC_Init+0x1e8>)
 8010b30:	7819      	ldrb	r1, [r3, #0]
 8010b32:	2340      	movs	r3, #64	@ 0x40
 8010b34:	2202      	movs	r2, #2
 8010b36:	6878      	ldr	r0, [r7, #4]
 8010b38:	f002 fb8b 	bl	8013252 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8010b3c:	4b35      	ldr	r3, [pc, #212]	@ (8010c14 <USBD_CDC_Init+0x1e8>)
 8010b3e:	781b      	ldrb	r3, [r3, #0]
 8010b40:	f003 020f 	and.w	r2, r3, #15
 8010b44:	6879      	ldr	r1, [r7, #4]
 8010b46:	4613      	mov	r3, r2
 8010b48:	009b      	lsls	r3, r3, #2
 8010b4a:	4413      	add	r3, r2
 8010b4c:	009b      	lsls	r3, r3, #2
 8010b4e:	440b      	add	r3, r1
 8010b50:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010b54:	2201      	movs	r2, #1
 8010b56:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8010b58:	4b2f      	ldr	r3, [pc, #188]	@ (8010c18 <USBD_CDC_Init+0x1ec>)
 8010b5a:	781b      	ldrb	r3, [r3, #0]
 8010b5c:	f003 020f 	and.w	r2, r3, #15
 8010b60:	6879      	ldr	r1, [r7, #4]
 8010b62:	4613      	mov	r3, r2
 8010b64:	009b      	lsls	r3, r3, #2
 8010b66:	4413      	add	r3, r2
 8010b68:	009b      	lsls	r3, r3, #2
 8010b6a:	440b      	add	r3, r1
 8010b6c:	3326      	adds	r3, #38	@ 0x26
 8010b6e:	2210      	movs	r2, #16
 8010b70:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8010b72:	4b29      	ldr	r3, [pc, #164]	@ (8010c18 <USBD_CDC_Init+0x1ec>)
 8010b74:	7819      	ldrb	r1, [r3, #0]
 8010b76:	2308      	movs	r3, #8
 8010b78:	2203      	movs	r2, #3
 8010b7a:	6878      	ldr	r0, [r7, #4]
 8010b7c:	f002 fb69 	bl	8013252 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8010b80:	4b25      	ldr	r3, [pc, #148]	@ (8010c18 <USBD_CDC_Init+0x1ec>)
 8010b82:	781b      	ldrb	r3, [r3, #0]
 8010b84:	f003 020f 	and.w	r2, r3, #15
 8010b88:	6879      	ldr	r1, [r7, #4]
 8010b8a:	4613      	mov	r3, r2
 8010b8c:	009b      	lsls	r3, r3, #2
 8010b8e:	4413      	add	r3, r2
 8010b90:	009b      	lsls	r3, r3, #2
 8010b92:	440b      	add	r3, r1
 8010b94:	3324      	adds	r3, #36	@ 0x24
 8010b96:	2201      	movs	r2, #1
 8010b98:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	2200      	movs	r2, #0
 8010b9e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010ba8:	687a      	ldr	r2, [r7, #4]
 8010baa:	33b0      	adds	r3, #176	@ 0xb0
 8010bac:	009b      	lsls	r3, r3, #2
 8010bae:	4413      	add	r3, r2
 8010bb0:	685b      	ldr	r3, [r3, #4]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	2200      	movs	r2, #0
 8010bba:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	2200      	movs	r2, #0
 8010bc2:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8010bc6:	68fb      	ldr	r3, [r7, #12]
 8010bc8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d101      	bne.n	8010bd4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8010bd0:	2302      	movs	r3, #2
 8010bd2:	e018      	b.n	8010c06 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	7c1b      	ldrb	r3, [r3, #16]
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d10a      	bne.n	8010bf2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8010c14 <USBD_CDC_Init+0x1e8>)
 8010bde:	7819      	ldrb	r1, [r3, #0]
 8010be0:	68fb      	ldr	r3, [r7, #12]
 8010be2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010be6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8010bea:	6878      	ldr	r0, [r7, #4]
 8010bec:	f002 fc20 	bl	8013430 <USBD_LL_PrepareReceive>
 8010bf0:	e008      	b.n	8010c04 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8010bf2:	4b08      	ldr	r3, [pc, #32]	@ (8010c14 <USBD_CDC_Init+0x1e8>)
 8010bf4:	7819      	ldrb	r1, [r3, #0]
 8010bf6:	68fb      	ldr	r3, [r7, #12]
 8010bf8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8010bfc:	2340      	movs	r3, #64	@ 0x40
 8010bfe:	6878      	ldr	r0, [r7, #4]
 8010c00:	f002 fc16 	bl	8013430 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8010c04:	2300      	movs	r3, #0
}
 8010c06:	4618      	mov	r0, r3
 8010c08:	3710      	adds	r7, #16
 8010c0a:	46bd      	mov	sp, r7
 8010c0c:	bd80      	pop	{r7, pc}
 8010c0e:	bf00      	nop
 8010c10:	2400009b 	.word	0x2400009b
 8010c14:	2400009c 	.word	0x2400009c
 8010c18:	2400009d 	.word	0x2400009d

08010c1c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b082      	sub	sp, #8
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	6078      	str	r0, [r7, #4]
 8010c24:	460b      	mov	r3, r1
 8010c26:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8010c28:	4b3a      	ldr	r3, [pc, #232]	@ (8010d14 <USBD_CDC_DeInit+0xf8>)
 8010c2a:	781b      	ldrb	r3, [r3, #0]
 8010c2c:	4619      	mov	r1, r3
 8010c2e:	6878      	ldr	r0, [r7, #4]
 8010c30:	f002 fb35 	bl	801329e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8010c34:	4b37      	ldr	r3, [pc, #220]	@ (8010d14 <USBD_CDC_DeInit+0xf8>)
 8010c36:	781b      	ldrb	r3, [r3, #0]
 8010c38:	f003 020f 	and.w	r2, r3, #15
 8010c3c:	6879      	ldr	r1, [r7, #4]
 8010c3e:	4613      	mov	r3, r2
 8010c40:	009b      	lsls	r3, r3, #2
 8010c42:	4413      	add	r3, r2
 8010c44:	009b      	lsls	r3, r3, #2
 8010c46:	440b      	add	r3, r1
 8010c48:	3324      	adds	r3, #36	@ 0x24
 8010c4a:	2200      	movs	r2, #0
 8010c4c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8010c4e:	4b32      	ldr	r3, [pc, #200]	@ (8010d18 <USBD_CDC_DeInit+0xfc>)
 8010c50:	781b      	ldrb	r3, [r3, #0]
 8010c52:	4619      	mov	r1, r3
 8010c54:	6878      	ldr	r0, [r7, #4]
 8010c56:	f002 fb22 	bl	801329e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8010c5a:	4b2f      	ldr	r3, [pc, #188]	@ (8010d18 <USBD_CDC_DeInit+0xfc>)
 8010c5c:	781b      	ldrb	r3, [r3, #0]
 8010c5e:	f003 020f 	and.w	r2, r3, #15
 8010c62:	6879      	ldr	r1, [r7, #4]
 8010c64:	4613      	mov	r3, r2
 8010c66:	009b      	lsls	r3, r3, #2
 8010c68:	4413      	add	r3, r2
 8010c6a:	009b      	lsls	r3, r3, #2
 8010c6c:	440b      	add	r3, r1
 8010c6e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010c72:	2200      	movs	r2, #0
 8010c74:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8010c76:	4b29      	ldr	r3, [pc, #164]	@ (8010d1c <USBD_CDC_DeInit+0x100>)
 8010c78:	781b      	ldrb	r3, [r3, #0]
 8010c7a:	4619      	mov	r1, r3
 8010c7c:	6878      	ldr	r0, [r7, #4]
 8010c7e:	f002 fb0e 	bl	801329e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8010c82:	4b26      	ldr	r3, [pc, #152]	@ (8010d1c <USBD_CDC_DeInit+0x100>)
 8010c84:	781b      	ldrb	r3, [r3, #0]
 8010c86:	f003 020f 	and.w	r2, r3, #15
 8010c8a:	6879      	ldr	r1, [r7, #4]
 8010c8c:	4613      	mov	r3, r2
 8010c8e:	009b      	lsls	r3, r3, #2
 8010c90:	4413      	add	r3, r2
 8010c92:	009b      	lsls	r3, r3, #2
 8010c94:	440b      	add	r3, r1
 8010c96:	3324      	adds	r3, #36	@ 0x24
 8010c98:	2200      	movs	r2, #0
 8010c9a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8010c9c:	4b1f      	ldr	r3, [pc, #124]	@ (8010d1c <USBD_CDC_DeInit+0x100>)
 8010c9e:	781b      	ldrb	r3, [r3, #0]
 8010ca0:	f003 020f 	and.w	r2, r3, #15
 8010ca4:	6879      	ldr	r1, [r7, #4]
 8010ca6:	4613      	mov	r3, r2
 8010ca8:	009b      	lsls	r3, r3, #2
 8010caa:	4413      	add	r3, r2
 8010cac:	009b      	lsls	r3, r3, #2
 8010cae:	440b      	add	r3, r1
 8010cb0:	3326      	adds	r3, #38	@ 0x26
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	32b0      	adds	r2, #176	@ 0xb0
 8010cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d01f      	beq.n	8010d08 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010cce:	687a      	ldr	r2, [r7, #4]
 8010cd0:	33b0      	adds	r3, #176	@ 0xb0
 8010cd2:	009b      	lsls	r3, r3, #2
 8010cd4:	4413      	add	r3, r2
 8010cd6:	685b      	ldr	r3, [r3, #4]
 8010cd8:	685b      	ldr	r3, [r3, #4]
 8010cda:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	32b0      	adds	r2, #176	@ 0xb0
 8010ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010cea:	4618      	mov	r0, r3
 8010cec:	f002 fbe2 	bl	80134b4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	32b0      	adds	r2, #176	@ 0xb0
 8010cfa:	2100      	movs	r1, #0
 8010cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	2200      	movs	r2, #0
 8010d04:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8010d08:	2300      	movs	r3, #0
}
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	3708      	adds	r7, #8
 8010d0e:	46bd      	mov	sp, r7
 8010d10:	bd80      	pop	{r7, pc}
 8010d12:	bf00      	nop
 8010d14:	2400009b 	.word	0x2400009b
 8010d18:	2400009c 	.word	0x2400009c
 8010d1c:	2400009d 	.word	0x2400009d

08010d20 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8010d20:	b580      	push	{r7, lr}
 8010d22:	b086      	sub	sp, #24
 8010d24:	af00      	add	r7, sp, #0
 8010d26:	6078      	str	r0, [r7, #4]
 8010d28:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	32b0      	adds	r2, #176	@ 0xb0
 8010d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010d38:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8010d3e:	2300      	movs	r3, #0
 8010d40:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8010d42:	2300      	movs	r3, #0
 8010d44:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8010d46:	693b      	ldr	r3, [r7, #16]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d101      	bne.n	8010d50 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8010d4c:	2303      	movs	r3, #3
 8010d4e:	e0bf      	b.n	8010ed0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010d50:	683b      	ldr	r3, [r7, #0]
 8010d52:	781b      	ldrb	r3, [r3, #0]
 8010d54:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d050      	beq.n	8010dfe <USBD_CDC_Setup+0xde>
 8010d5c:	2b20      	cmp	r3, #32
 8010d5e:	f040 80af 	bne.w	8010ec0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8010d62:	683b      	ldr	r3, [r7, #0]
 8010d64:	88db      	ldrh	r3, [r3, #6]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d03a      	beq.n	8010de0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8010d6a:	683b      	ldr	r3, [r7, #0]
 8010d6c:	781b      	ldrb	r3, [r3, #0]
 8010d6e:	b25b      	sxtb	r3, r3
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	da1b      	bge.n	8010dac <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010d7a:	687a      	ldr	r2, [r7, #4]
 8010d7c:	33b0      	adds	r3, #176	@ 0xb0
 8010d7e:	009b      	lsls	r3, r3, #2
 8010d80:	4413      	add	r3, r2
 8010d82:	685b      	ldr	r3, [r3, #4]
 8010d84:	689b      	ldr	r3, [r3, #8]
 8010d86:	683a      	ldr	r2, [r7, #0]
 8010d88:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8010d8a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010d8c:	683a      	ldr	r2, [r7, #0]
 8010d8e:	88d2      	ldrh	r2, [r2, #6]
 8010d90:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8010d92:	683b      	ldr	r3, [r7, #0]
 8010d94:	88db      	ldrh	r3, [r3, #6]
 8010d96:	2b07      	cmp	r3, #7
 8010d98:	bf28      	it	cs
 8010d9a:	2307      	movcs	r3, #7
 8010d9c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8010d9e:	693b      	ldr	r3, [r7, #16]
 8010da0:	89fa      	ldrh	r2, [r7, #14]
 8010da2:	4619      	mov	r1, r3
 8010da4:	6878      	ldr	r0, [r7, #4]
 8010da6:	f001 fdbd 	bl	8012924 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8010daa:	e090      	b.n	8010ece <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8010dac:	683b      	ldr	r3, [r7, #0]
 8010dae:	785a      	ldrb	r2, [r3, #1]
 8010db0:	693b      	ldr	r3, [r7, #16]
 8010db2:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8010db6:	683b      	ldr	r3, [r7, #0]
 8010db8:	88db      	ldrh	r3, [r3, #6]
 8010dba:	2b3f      	cmp	r3, #63	@ 0x3f
 8010dbc:	d803      	bhi.n	8010dc6 <USBD_CDC_Setup+0xa6>
 8010dbe:	683b      	ldr	r3, [r7, #0]
 8010dc0:	88db      	ldrh	r3, [r3, #6]
 8010dc2:	b2da      	uxtb	r2, r3
 8010dc4:	e000      	b.n	8010dc8 <USBD_CDC_Setup+0xa8>
 8010dc6:	2240      	movs	r2, #64	@ 0x40
 8010dc8:	693b      	ldr	r3, [r7, #16]
 8010dca:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8010dce:	6939      	ldr	r1, [r7, #16]
 8010dd0:	693b      	ldr	r3, [r7, #16]
 8010dd2:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8010dd6:	461a      	mov	r2, r3
 8010dd8:	6878      	ldr	r0, [r7, #4]
 8010dda:	f001 fdcf 	bl	801297c <USBD_CtlPrepareRx>
      break;
 8010dde:	e076      	b.n	8010ece <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010de6:	687a      	ldr	r2, [r7, #4]
 8010de8:	33b0      	adds	r3, #176	@ 0xb0
 8010dea:	009b      	lsls	r3, r3, #2
 8010dec:	4413      	add	r3, r2
 8010dee:	685b      	ldr	r3, [r3, #4]
 8010df0:	689b      	ldr	r3, [r3, #8]
 8010df2:	683a      	ldr	r2, [r7, #0]
 8010df4:	7850      	ldrb	r0, [r2, #1]
 8010df6:	2200      	movs	r2, #0
 8010df8:	6839      	ldr	r1, [r7, #0]
 8010dfa:	4798      	blx	r3
      break;
 8010dfc:	e067      	b.n	8010ece <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010dfe:	683b      	ldr	r3, [r7, #0]
 8010e00:	785b      	ldrb	r3, [r3, #1]
 8010e02:	2b0b      	cmp	r3, #11
 8010e04:	d851      	bhi.n	8010eaa <USBD_CDC_Setup+0x18a>
 8010e06:	a201      	add	r2, pc, #4	@ (adr r2, 8010e0c <USBD_CDC_Setup+0xec>)
 8010e08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e0c:	08010e3d 	.word	0x08010e3d
 8010e10:	08010eb9 	.word	0x08010eb9
 8010e14:	08010eab 	.word	0x08010eab
 8010e18:	08010eab 	.word	0x08010eab
 8010e1c:	08010eab 	.word	0x08010eab
 8010e20:	08010eab 	.word	0x08010eab
 8010e24:	08010eab 	.word	0x08010eab
 8010e28:	08010eab 	.word	0x08010eab
 8010e2c:	08010eab 	.word	0x08010eab
 8010e30:	08010eab 	.word	0x08010eab
 8010e34:	08010e67 	.word	0x08010e67
 8010e38:	08010e91 	.word	0x08010e91
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010e42:	b2db      	uxtb	r3, r3
 8010e44:	2b03      	cmp	r3, #3
 8010e46:	d107      	bne.n	8010e58 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8010e48:	f107 030a 	add.w	r3, r7, #10
 8010e4c:	2202      	movs	r2, #2
 8010e4e:	4619      	mov	r1, r3
 8010e50:	6878      	ldr	r0, [r7, #4]
 8010e52:	f001 fd67 	bl	8012924 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010e56:	e032      	b.n	8010ebe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010e58:	6839      	ldr	r1, [r7, #0]
 8010e5a:	6878      	ldr	r0, [r7, #4]
 8010e5c:	f001 fce5 	bl	801282a <USBD_CtlError>
            ret = USBD_FAIL;
 8010e60:	2303      	movs	r3, #3
 8010e62:	75fb      	strb	r3, [r7, #23]
          break;
 8010e64:	e02b      	b.n	8010ebe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010e6c:	b2db      	uxtb	r3, r3
 8010e6e:	2b03      	cmp	r3, #3
 8010e70:	d107      	bne.n	8010e82 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8010e72:	f107 030d 	add.w	r3, r7, #13
 8010e76:	2201      	movs	r2, #1
 8010e78:	4619      	mov	r1, r3
 8010e7a:	6878      	ldr	r0, [r7, #4]
 8010e7c:	f001 fd52 	bl	8012924 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8010e80:	e01d      	b.n	8010ebe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8010e82:	6839      	ldr	r1, [r7, #0]
 8010e84:	6878      	ldr	r0, [r7, #4]
 8010e86:	f001 fcd0 	bl	801282a <USBD_CtlError>
            ret = USBD_FAIL;
 8010e8a:	2303      	movs	r3, #3
 8010e8c:	75fb      	strb	r3, [r7, #23]
          break;
 8010e8e:	e016      	b.n	8010ebe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010e96:	b2db      	uxtb	r3, r3
 8010e98:	2b03      	cmp	r3, #3
 8010e9a:	d00f      	beq.n	8010ebc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8010e9c:	6839      	ldr	r1, [r7, #0]
 8010e9e:	6878      	ldr	r0, [r7, #4]
 8010ea0:	f001 fcc3 	bl	801282a <USBD_CtlError>
            ret = USBD_FAIL;
 8010ea4:	2303      	movs	r3, #3
 8010ea6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8010ea8:	e008      	b.n	8010ebc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8010eaa:	6839      	ldr	r1, [r7, #0]
 8010eac:	6878      	ldr	r0, [r7, #4]
 8010eae:	f001 fcbc 	bl	801282a <USBD_CtlError>
          ret = USBD_FAIL;
 8010eb2:	2303      	movs	r3, #3
 8010eb4:	75fb      	strb	r3, [r7, #23]
          break;
 8010eb6:	e002      	b.n	8010ebe <USBD_CDC_Setup+0x19e>
          break;
 8010eb8:	bf00      	nop
 8010eba:	e008      	b.n	8010ece <USBD_CDC_Setup+0x1ae>
          break;
 8010ebc:	bf00      	nop
      }
      break;
 8010ebe:	e006      	b.n	8010ece <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8010ec0:	6839      	ldr	r1, [r7, #0]
 8010ec2:	6878      	ldr	r0, [r7, #4]
 8010ec4:	f001 fcb1 	bl	801282a <USBD_CtlError>
      ret = USBD_FAIL;
 8010ec8:	2303      	movs	r3, #3
 8010eca:	75fb      	strb	r3, [r7, #23]
      break;
 8010ecc:	bf00      	nop
  }

  return (uint8_t)ret;
 8010ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	3718      	adds	r7, #24
 8010ed4:	46bd      	mov	sp, r7
 8010ed6:	bd80      	pop	{r7, pc}

08010ed8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b084      	sub	sp, #16
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
 8010ee0:	460b      	mov	r3, r1
 8010ee2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8010eea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	32b0      	adds	r2, #176	@ 0xb0
 8010ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d101      	bne.n	8010f02 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8010efe:	2303      	movs	r3, #3
 8010f00:	e065      	b.n	8010fce <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	32b0      	adds	r2, #176	@ 0xb0
 8010f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f10:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8010f12:	78fb      	ldrb	r3, [r7, #3]
 8010f14:	f003 020f 	and.w	r2, r3, #15
 8010f18:	6879      	ldr	r1, [r7, #4]
 8010f1a:	4613      	mov	r3, r2
 8010f1c:	009b      	lsls	r3, r3, #2
 8010f1e:	4413      	add	r3, r2
 8010f20:	009b      	lsls	r3, r3, #2
 8010f22:	440b      	add	r3, r1
 8010f24:	3318      	adds	r3, #24
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	2b00      	cmp	r3, #0
 8010f2a:	d02f      	beq.n	8010f8c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8010f2c:	78fb      	ldrb	r3, [r7, #3]
 8010f2e:	f003 020f 	and.w	r2, r3, #15
 8010f32:	6879      	ldr	r1, [r7, #4]
 8010f34:	4613      	mov	r3, r2
 8010f36:	009b      	lsls	r3, r3, #2
 8010f38:	4413      	add	r3, r2
 8010f3a:	009b      	lsls	r3, r3, #2
 8010f3c:	440b      	add	r3, r1
 8010f3e:	3318      	adds	r3, #24
 8010f40:	681a      	ldr	r2, [r3, #0]
 8010f42:	78fb      	ldrb	r3, [r7, #3]
 8010f44:	f003 010f 	and.w	r1, r3, #15
 8010f48:	68f8      	ldr	r0, [r7, #12]
 8010f4a:	460b      	mov	r3, r1
 8010f4c:	00db      	lsls	r3, r3, #3
 8010f4e:	440b      	add	r3, r1
 8010f50:	009b      	lsls	r3, r3, #2
 8010f52:	4403      	add	r3, r0
 8010f54:	331c      	adds	r3, #28
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	fbb2 f1f3 	udiv	r1, r2, r3
 8010f5c:	fb01 f303 	mul.w	r3, r1, r3
 8010f60:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d112      	bne.n	8010f8c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8010f66:	78fb      	ldrb	r3, [r7, #3]
 8010f68:	f003 020f 	and.w	r2, r3, #15
 8010f6c:	6879      	ldr	r1, [r7, #4]
 8010f6e:	4613      	mov	r3, r2
 8010f70:	009b      	lsls	r3, r3, #2
 8010f72:	4413      	add	r3, r2
 8010f74:	009b      	lsls	r3, r3, #2
 8010f76:	440b      	add	r3, r1
 8010f78:	3318      	adds	r3, #24
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8010f7e:	78f9      	ldrb	r1, [r7, #3]
 8010f80:	2300      	movs	r3, #0
 8010f82:	2200      	movs	r2, #0
 8010f84:	6878      	ldr	r0, [r7, #4]
 8010f86:	f002 fa32 	bl	80133ee <USBD_LL_Transmit>
 8010f8a:	e01f      	b.n	8010fcc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8010f8c:	68bb      	ldr	r3, [r7, #8]
 8010f8e:	2200      	movs	r2, #0
 8010f90:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010f9a:	687a      	ldr	r2, [r7, #4]
 8010f9c:	33b0      	adds	r3, #176	@ 0xb0
 8010f9e:	009b      	lsls	r3, r3, #2
 8010fa0:	4413      	add	r3, r2
 8010fa2:	685b      	ldr	r3, [r3, #4]
 8010fa4:	691b      	ldr	r3, [r3, #16]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d010      	beq.n	8010fcc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010fb0:	687a      	ldr	r2, [r7, #4]
 8010fb2:	33b0      	adds	r3, #176	@ 0xb0
 8010fb4:	009b      	lsls	r3, r3, #2
 8010fb6:	4413      	add	r3, r2
 8010fb8:	685b      	ldr	r3, [r3, #4]
 8010fba:	691b      	ldr	r3, [r3, #16]
 8010fbc:	68ba      	ldr	r2, [r7, #8]
 8010fbe:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8010fc2:	68ba      	ldr	r2, [r7, #8]
 8010fc4:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8010fc8:	78fa      	ldrb	r2, [r7, #3]
 8010fca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8010fcc:	2300      	movs	r3, #0
}
 8010fce:	4618      	mov	r0, r3
 8010fd0:	3710      	adds	r7, #16
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	bd80      	pop	{r7, pc}

08010fd6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8010fd6:	b580      	push	{r7, lr}
 8010fd8:	b084      	sub	sp, #16
 8010fda:	af00      	add	r7, sp, #0
 8010fdc:	6078      	str	r0, [r7, #4]
 8010fde:	460b      	mov	r3, r1
 8010fe0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	32b0      	adds	r2, #176	@ 0xb0
 8010fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ff0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	32b0      	adds	r2, #176	@ 0xb0
 8010ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d101      	bne.n	8011008 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8011004:	2303      	movs	r3, #3
 8011006:	e01a      	b.n	801103e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8011008:	78fb      	ldrb	r3, [r7, #3]
 801100a:	4619      	mov	r1, r3
 801100c:	6878      	ldr	r0, [r7, #4]
 801100e:	f002 fa30 	bl	8013472 <USBD_LL_GetRxDataSize>
 8011012:	4602      	mov	r2, r0
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011020:	687a      	ldr	r2, [r7, #4]
 8011022:	33b0      	adds	r3, #176	@ 0xb0
 8011024:	009b      	lsls	r3, r3, #2
 8011026:	4413      	add	r3, r2
 8011028:	685b      	ldr	r3, [r3, #4]
 801102a:	68db      	ldr	r3, [r3, #12]
 801102c:	68fa      	ldr	r2, [r7, #12]
 801102e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8011032:	68fa      	ldr	r2, [r7, #12]
 8011034:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8011038:	4611      	mov	r1, r2
 801103a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 801103c:	2300      	movs	r3, #0
}
 801103e:	4618      	mov	r0, r3
 8011040:	3710      	adds	r7, #16
 8011042:	46bd      	mov	sp, r7
 8011044:	bd80      	pop	{r7, pc}

08011046 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011046:	b580      	push	{r7, lr}
 8011048:	b084      	sub	sp, #16
 801104a:	af00      	add	r7, sp, #0
 801104c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	32b0      	adds	r2, #176	@ 0xb0
 8011058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801105c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d101      	bne.n	8011068 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011064:	2303      	movs	r3, #3
 8011066:	e024      	b.n	80110b2 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801106e:	687a      	ldr	r2, [r7, #4]
 8011070:	33b0      	adds	r3, #176	@ 0xb0
 8011072:	009b      	lsls	r3, r3, #2
 8011074:	4413      	add	r3, r2
 8011076:	685b      	ldr	r3, [r3, #4]
 8011078:	2b00      	cmp	r3, #0
 801107a:	d019      	beq.n	80110b0 <USBD_CDC_EP0_RxReady+0x6a>
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8011082:	2bff      	cmp	r3, #255	@ 0xff
 8011084:	d014      	beq.n	80110b0 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801108c:	687a      	ldr	r2, [r7, #4]
 801108e:	33b0      	adds	r3, #176	@ 0xb0
 8011090:	009b      	lsls	r3, r3, #2
 8011092:	4413      	add	r3, r2
 8011094:	685b      	ldr	r3, [r3, #4]
 8011096:	689b      	ldr	r3, [r3, #8]
 8011098:	68fa      	ldr	r2, [r7, #12]
 801109a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 801109e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80110a0:	68fa      	ldr	r2, [r7, #12]
 80110a2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80110a6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	22ff      	movs	r2, #255	@ 0xff
 80110ac:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80110b0:	2300      	movs	r3, #0
}
 80110b2:	4618      	mov	r0, r3
 80110b4:	3710      	adds	r7, #16
 80110b6:	46bd      	mov	sp, r7
 80110b8:	bd80      	pop	{r7, pc}
	...

080110bc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80110bc:	b580      	push	{r7, lr}
 80110be:	b086      	sub	sp, #24
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80110c4:	2182      	movs	r1, #130	@ 0x82
 80110c6:	4818      	ldr	r0, [pc, #96]	@ (8011128 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80110c8:	f000 fd4f 	bl	8011b6a <USBD_GetEpDesc>
 80110cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80110ce:	2101      	movs	r1, #1
 80110d0:	4815      	ldr	r0, [pc, #84]	@ (8011128 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80110d2:	f000 fd4a 	bl	8011b6a <USBD_GetEpDesc>
 80110d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80110d8:	2181      	movs	r1, #129	@ 0x81
 80110da:	4813      	ldr	r0, [pc, #76]	@ (8011128 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80110dc:	f000 fd45 	bl	8011b6a <USBD_GetEpDesc>
 80110e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80110e2:	697b      	ldr	r3, [r7, #20]
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d002      	beq.n	80110ee <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80110e8:	697b      	ldr	r3, [r7, #20]
 80110ea:	2210      	movs	r2, #16
 80110ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80110ee:	693b      	ldr	r3, [r7, #16]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d006      	beq.n	8011102 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80110f4:	693b      	ldr	r3, [r7, #16]
 80110f6:	2200      	movs	r2, #0
 80110f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80110fc:	711a      	strb	r2, [r3, #4]
 80110fe:	2200      	movs	r2, #0
 8011100:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d006      	beq.n	8011116 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	2200      	movs	r2, #0
 801110c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8011110:	711a      	strb	r2, [r3, #4]
 8011112:	2200      	movs	r2, #0
 8011114:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	2243      	movs	r2, #67	@ 0x43
 801111a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801111c:	4b02      	ldr	r3, [pc, #8]	@ (8011128 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801111e:	4618      	mov	r0, r3
 8011120:	3718      	adds	r7, #24
 8011122:	46bd      	mov	sp, r7
 8011124:	bd80      	pop	{r7, pc}
 8011126:	bf00      	nop
 8011128:	24000058 	.word	0x24000058

0801112c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801112c:	b580      	push	{r7, lr}
 801112e:	b086      	sub	sp, #24
 8011130:	af00      	add	r7, sp, #0
 8011132:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8011134:	2182      	movs	r1, #130	@ 0x82
 8011136:	4818      	ldr	r0, [pc, #96]	@ (8011198 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011138:	f000 fd17 	bl	8011b6a <USBD_GetEpDesc>
 801113c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801113e:	2101      	movs	r1, #1
 8011140:	4815      	ldr	r0, [pc, #84]	@ (8011198 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011142:	f000 fd12 	bl	8011b6a <USBD_GetEpDesc>
 8011146:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011148:	2181      	movs	r1, #129	@ 0x81
 801114a:	4813      	ldr	r0, [pc, #76]	@ (8011198 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801114c:	f000 fd0d 	bl	8011b6a <USBD_GetEpDesc>
 8011150:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8011152:	697b      	ldr	r3, [r7, #20]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d002      	beq.n	801115e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8011158:	697b      	ldr	r3, [r7, #20]
 801115a:	2210      	movs	r2, #16
 801115c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801115e:	693b      	ldr	r3, [r7, #16]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d006      	beq.n	8011172 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8011164:	693b      	ldr	r3, [r7, #16]
 8011166:	2200      	movs	r2, #0
 8011168:	711a      	strb	r2, [r3, #4]
 801116a:	2200      	movs	r2, #0
 801116c:	f042 0202 	orr.w	r2, r2, #2
 8011170:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	2b00      	cmp	r3, #0
 8011176:	d006      	beq.n	8011186 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	2200      	movs	r2, #0
 801117c:	711a      	strb	r2, [r3, #4]
 801117e:	2200      	movs	r2, #0
 8011180:	f042 0202 	orr.w	r2, r2, #2
 8011184:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	2243      	movs	r2, #67	@ 0x43
 801118a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801118c:	4b02      	ldr	r3, [pc, #8]	@ (8011198 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801118e:	4618      	mov	r0, r3
 8011190:	3718      	adds	r7, #24
 8011192:	46bd      	mov	sp, r7
 8011194:	bd80      	pop	{r7, pc}
 8011196:	bf00      	nop
 8011198:	24000058 	.word	0x24000058

0801119c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801119c:	b580      	push	{r7, lr}
 801119e:	b086      	sub	sp, #24
 80111a0:	af00      	add	r7, sp, #0
 80111a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80111a4:	2182      	movs	r1, #130	@ 0x82
 80111a6:	4818      	ldr	r0, [pc, #96]	@ (8011208 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80111a8:	f000 fcdf 	bl	8011b6a <USBD_GetEpDesc>
 80111ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80111ae:	2101      	movs	r1, #1
 80111b0:	4815      	ldr	r0, [pc, #84]	@ (8011208 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80111b2:	f000 fcda 	bl	8011b6a <USBD_GetEpDesc>
 80111b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80111b8:	2181      	movs	r1, #129	@ 0x81
 80111ba:	4813      	ldr	r0, [pc, #76]	@ (8011208 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80111bc:	f000 fcd5 	bl	8011b6a <USBD_GetEpDesc>
 80111c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80111c2:	697b      	ldr	r3, [r7, #20]
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d002      	beq.n	80111ce <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80111c8:	697b      	ldr	r3, [r7, #20]
 80111ca:	2210      	movs	r2, #16
 80111cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80111ce:	693b      	ldr	r3, [r7, #16]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d006      	beq.n	80111e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80111d4:	693b      	ldr	r3, [r7, #16]
 80111d6:	2200      	movs	r2, #0
 80111d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80111dc:	711a      	strb	r2, [r3, #4]
 80111de:	2200      	movs	r2, #0
 80111e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d006      	beq.n	80111f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	2200      	movs	r2, #0
 80111ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80111f0:	711a      	strb	r2, [r3, #4]
 80111f2:	2200      	movs	r2, #0
 80111f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	2243      	movs	r2, #67	@ 0x43
 80111fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80111fc:	4b02      	ldr	r3, [pc, #8]	@ (8011208 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80111fe:	4618      	mov	r0, r3
 8011200:	3718      	adds	r7, #24
 8011202:	46bd      	mov	sp, r7
 8011204:	bd80      	pop	{r7, pc}
 8011206:	bf00      	nop
 8011208:	24000058 	.word	0x24000058

0801120c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801120c:	b480      	push	{r7}
 801120e:	b083      	sub	sp, #12
 8011210:	af00      	add	r7, sp, #0
 8011212:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	220a      	movs	r2, #10
 8011218:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801121a:	4b03      	ldr	r3, [pc, #12]	@ (8011228 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801121c:	4618      	mov	r0, r3
 801121e:	370c      	adds	r7, #12
 8011220:	46bd      	mov	sp, r7
 8011222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011226:	4770      	bx	lr
 8011228:	24000014 	.word	0x24000014

0801122c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801122c:	b480      	push	{r7}
 801122e:	b083      	sub	sp, #12
 8011230:	af00      	add	r7, sp, #0
 8011232:	6078      	str	r0, [r7, #4]
 8011234:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8011236:	683b      	ldr	r3, [r7, #0]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d101      	bne.n	8011240 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801123c:	2303      	movs	r3, #3
 801123e:	e009      	b.n	8011254 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011246:	687a      	ldr	r2, [r7, #4]
 8011248:	33b0      	adds	r3, #176	@ 0xb0
 801124a:	009b      	lsls	r3, r3, #2
 801124c:	4413      	add	r3, r2
 801124e:	683a      	ldr	r2, [r7, #0]
 8011250:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8011252:	2300      	movs	r3, #0
}
 8011254:	4618      	mov	r0, r3
 8011256:	370c      	adds	r7, #12
 8011258:	46bd      	mov	sp, r7
 801125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801125e:	4770      	bx	lr

08011260 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011260:	b480      	push	{r7}
 8011262:	b087      	sub	sp, #28
 8011264:	af00      	add	r7, sp, #0
 8011266:	60f8      	str	r0, [r7, #12]
 8011268:	60b9      	str	r1, [r7, #8]
 801126a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801126c:	68fb      	ldr	r3, [r7, #12]
 801126e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	32b0      	adds	r2, #176	@ 0xb0
 8011276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801127a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 801127c:	697b      	ldr	r3, [r7, #20]
 801127e:	2b00      	cmp	r3, #0
 8011280:	d101      	bne.n	8011286 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8011282:	2303      	movs	r3, #3
 8011284:	e008      	b.n	8011298 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8011286:	697b      	ldr	r3, [r7, #20]
 8011288:	68ba      	ldr	r2, [r7, #8]
 801128a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 801128e:	697b      	ldr	r3, [r7, #20]
 8011290:	687a      	ldr	r2, [r7, #4]
 8011292:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8011296:	2300      	movs	r3, #0
}
 8011298:	4618      	mov	r0, r3
 801129a:	371c      	adds	r7, #28
 801129c:	46bd      	mov	sp, r7
 801129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112a2:	4770      	bx	lr

080112a4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80112a4:	b480      	push	{r7}
 80112a6:	b085      	sub	sp, #20
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	6078      	str	r0, [r7, #4]
 80112ac:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	32b0      	adds	r2, #176	@ 0xb0
 80112b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80112bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d101      	bne.n	80112c8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80112c4:	2303      	movs	r3, #3
 80112c6:	e004      	b.n	80112d2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	683a      	ldr	r2, [r7, #0]
 80112cc:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80112d0:	2300      	movs	r3, #0
}
 80112d2:	4618      	mov	r0, r3
 80112d4:	3714      	adds	r7, #20
 80112d6:	46bd      	mov	sp, r7
 80112d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112dc:	4770      	bx	lr
	...

080112e0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b084      	sub	sp, #16
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	32b0      	adds	r2, #176	@ 0xb0
 80112f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80112f6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 80112f8:	2301      	movs	r3, #1
 80112fa:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80112fc:	68bb      	ldr	r3, [r7, #8]
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d101      	bne.n	8011306 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8011302:	2303      	movs	r3, #3
 8011304:	e025      	b.n	8011352 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8011306:	68bb      	ldr	r3, [r7, #8]
 8011308:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 801130c:	2b00      	cmp	r3, #0
 801130e:	d11f      	bne.n	8011350 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8011310:	68bb      	ldr	r3, [r7, #8]
 8011312:	2201      	movs	r2, #1
 8011314:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8011318:	4b10      	ldr	r3, [pc, #64]	@ (801135c <USBD_CDC_TransmitPacket+0x7c>)
 801131a:	781b      	ldrb	r3, [r3, #0]
 801131c:	f003 020f 	and.w	r2, r3, #15
 8011320:	68bb      	ldr	r3, [r7, #8]
 8011322:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8011326:	6878      	ldr	r0, [r7, #4]
 8011328:	4613      	mov	r3, r2
 801132a:	009b      	lsls	r3, r3, #2
 801132c:	4413      	add	r3, r2
 801132e:	009b      	lsls	r3, r3, #2
 8011330:	4403      	add	r3, r0
 8011332:	3318      	adds	r3, #24
 8011334:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8011336:	4b09      	ldr	r3, [pc, #36]	@ (801135c <USBD_CDC_TransmitPacket+0x7c>)
 8011338:	7819      	ldrb	r1, [r3, #0]
 801133a:	68bb      	ldr	r3, [r7, #8]
 801133c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8011340:	68bb      	ldr	r3, [r7, #8]
 8011342:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8011346:	6878      	ldr	r0, [r7, #4]
 8011348:	f002 f851 	bl	80133ee <USBD_LL_Transmit>

    ret = USBD_OK;
 801134c:	2300      	movs	r3, #0
 801134e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8011350:	7bfb      	ldrb	r3, [r7, #15]
}
 8011352:	4618      	mov	r0, r3
 8011354:	3710      	adds	r7, #16
 8011356:	46bd      	mov	sp, r7
 8011358:	bd80      	pop	{r7, pc}
 801135a:	bf00      	nop
 801135c:	2400009b 	.word	0x2400009b

08011360 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011360:	b580      	push	{r7, lr}
 8011362:	b084      	sub	sp, #16
 8011364:	af00      	add	r7, sp, #0
 8011366:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	32b0      	adds	r2, #176	@ 0xb0
 8011372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011376:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011378:	687b      	ldr	r3, [r7, #4]
 801137a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	32b0      	adds	r2, #176	@ 0xb0
 8011382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d101      	bne.n	801138e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801138a:	2303      	movs	r3, #3
 801138c:	e018      	b.n	80113c0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	7c1b      	ldrb	r3, [r3, #16]
 8011392:	2b00      	cmp	r3, #0
 8011394:	d10a      	bne.n	80113ac <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011396:	4b0c      	ldr	r3, [pc, #48]	@ (80113c8 <USBD_CDC_ReceivePacket+0x68>)
 8011398:	7819      	ldrb	r1, [r3, #0]
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80113a0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80113a4:	6878      	ldr	r0, [r7, #4]
 80113a6:	f002 f843 	bl	8013430 <USBD_LL_PrepareReceive>
 80113aa:	e008      	b.n	80113be <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80113ac:	4b06      	ldr	r3, [pc, #24]	@ (80113c8 <USBD_CDC_ReceivePacket+0x68>)
 80113ae:	7819      	ldrb	r1, [r3, #0]
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80113b6:	2340      	movs	r3, #64	@ 0x40
 80113b8:	6878      	ldr	r0, [r7, #4]
 80113ba:	f002 f839 	bl	8013430 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80113be:	2300      	movs	r3, #0
}
 80113c0:	4618      	mov	r0, r3
 80113c2:	3710      	adds	r7, #16
 80113c4:	46bd      	mov	sp, r7
 80113c6:	bd80      	pop	{r7, pc}
 80113c8:	2400009c 	.word	0x2400009c

080113cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80113cc:	b580      	push	{r7, lr}
 80113ce:	b086      	sub	sp, #24
 80113d0:	af00      	add	r7, sp, #0
 80113d2:	60f8      	str	r0, [r7, #12]
 80113d4:	60b9      	str	r1, [r7, #8]
 80113d6:	4613      	mov	r3, r2
 80113d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d101      	bne.n	80113e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80113e0:	2303      	movs	r3, #3
 80113e2:	e01f      	b.n	8011424 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	2200      	movs	r2, #0
 80113e8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	2200      	movs	r2, #0
 80113f0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	2200      	movs	r2, #0
 80113f8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80113fc:	68bb      	ldr	r3, [r7, #8]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d003      	beq.n	801140a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8011402:	68fb      	ldr	r3, [r7, #12]
 8011404:	68ba      	ldr	r2, [r7, #8]
 8011406:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	2201      	movs	r2, #1
 801140e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	79fa      	ldrb	r2, [r7, #7]
 8011416:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011418:	68f8      	ldr	r0, [r7, #12]
 801141a:	f001 fead 	bl	8013178 <USBD_LL_Init>
 801141e:	4603      	mov	r3, r0
 8011420:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011422:	7dfb      	ldrb	r3, [r7, #23]
}
 8011424:	4618      	mov	r0, r3
 8011426:	3718      	adds	r7, #24
 8011428:	46bd      	mov	sp, r7
 801142a:	bd80      	pop	{r7, pc}

0801142c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801142c:	b580      	push	{r7, lr}
 801142e:	b084      	sub	sp, #16
 8011430:	af00      	add	r7, sp, #0
 8011432:	6078      	str	r0, [r7, #4]
 8011434:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011436:	2300      	movs	r3, #0
 8011438:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801143a:	683b      	ldr	r3, [r7, #0]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d101      	bne.n	8011444 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011440:	2303      	movs	r3, #3
 8011442:	e025      	b.n	8011490 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	683a      	ldr	r2, [r7, #0]
 8011448:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	32ae      	adds	r2, #174	@ 0xae
 8011456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801145a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801145c:	2b00      	cmp	r3, #0
 801145e:	d00f      	beq.n	8011480 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011466:	687b      	ldr	r3, [r7, #4]
 8011468:	32ae      	adds	r2, #174	@ 0xae
 801146a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801146e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011470:	f107 020e 	add.w	r2, r7, #14
 8011474:	4610      	mov	r0, r2
 8011476:	4798      	blx	r3
 8011478:	4602      	mov	r2, r0
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8011486:	1c5a      	adds	r2, r3, #1
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 801148e:	2300      	movs	r3, #0
}
 8011490:	4618      	mov	r0, r3
 8011492:	3710      	adds	r7, #16
 8011494:	46bd      	mov	sp, r7
 8011496:	bd80      	pop	{r7, pc}

08011498 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b082      	sub	sp, #8
 801149c:	af00      	add	r7, sp, #0
 801149e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80114a0:	6878      	ldr	r0, [r7, #4]
 80114a2:	f001 febb 	bl	801321c <USBD_LL_Start>
 80114a6:	4603      	mov	r3, r0
}
 80114a8:	4618      	mov	r0, r3
 80114aa:	3708      	adds	r7, #8
 80114ac:	46bd      	mov	sp, r7
 80114ae:	bd80      	pop	{r7, pc}

080114b0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80114b0:	b480      	push	{r7}
 80114b2:	b083      	sub	sp, #12
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80114b8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80114ba:	4618      	mov	r0, r3
 80114bc:	370c      	adds	r7, #12
 80114be:	46bd      	mov	sp, r7
 80114c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c4:	4770      	bx	lr

080114c6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80114c6:	b580      	push	{r7, lr}
 80114c8:	b084      	sub	sp, #16
 80114ca:	af00      	add	r7, sp, #0
 80114cc:	6078      	str	r0, [r7, #4]
 80114ce:	460b      	mov	r3, r1
 80114d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80114d2:	2300      	movs	r3, #0
 80114d4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d009      	beq.n	80114f4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	78fa      	ldrb	r2, [r7, #3]
 80114ea:	4611      	mov	r1, r2
 80114ec:	6878      	ldr	r0, [r7, #4]
 80114ee:	4798      	blx	r3
 80114f0:	4603      	mov	r3, r0
 80114f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80114f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80114f6:	4618      	mov	r0, r3
 80114f8:	3710      	adds	r7, #16
 80114fa:	46bd      	mov	sp, r7
 80114fc:	bd80      	pop	{r7, pc}

080114fe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80114fe:	b580      	push	{r7, lr}
 8011500:	b084      	sub	sp, #16
 8011502:	af00      	add	r7, sp, #0
 8011504:	6078      	str	r0, [r7, #4]
 8011506:	460b      	mov	r3, r1
 8011508:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801150a:	2300      	movs	r3, #0
 801150c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011514:	685b      	ldr	r3, [r3, #4]
 8011516:	78fa      	ldrb	r2, [r7, #3]
 8011518:	4611      	mov	r1, r2
 801151a:	6878      	ldr	r0, [r7, #4]
 801151c:	4798      	blx	r3
 801151e:	4603      	mov	r3, r0
 8011520:	2b00      	cmp	r3, #0
 8011522:	d001      	beq.n	8011528 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8011524:	2303      	movs	r3, #3
 8011526:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011528:	7bfb      	ldrb	r3, [r7, #15]
}
 801152a:	4618      	mov	r0, r3
 801152c:	3710      	adds	r7, #16
 801152e:	46bd      	mov	sp, r7
 8011530:	bd80      	pop	{r7, pc}

08011532 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011532:	b580      	push	{r7, lr}
 8011534:	b084      	sub	sp, #16
 8011536:	af00      	add	r7, sp, #0
 8011538:	6078      	str	r0, [r7, #4]
 801153a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011542:	6839      	ldr	r1, [r7, #0]
 8011544:	4618      	mov	r0, r3
 8011546:	f001 f936 	bl	80127b6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	2201      	movs	r2, #1
 801154e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8011558:	461a      	mov	r2, r3
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011566:	f003 031f 	and.w	r3, r3, #31
 801156a:	2b02      	cmp	r3, #2
 801156c:	d01a      	beq.n	80115a4 <USBD_LL_SetupStage+0x72>
 801156e:	2b02      	cmp	r3, #2
 8011570:	d822      	bhi.n	80115b8 <USBD_LL_SetupStage+0x86>
 8011572:	2b00      	cmp	r3, #0
 8011574:	d002      	beq.n	801157c <USBD_LL_SetupStage+0x4a>
 8011576:	2b01      	cmp	r3, #1
 8011578:	d00a      	beq.n	8011590 <USBD_LL_SetupStage+0x5e>
 801157a:	e01d      	b.n	80115b8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011582:	4619      	mov	r1, r3
 8011584:	6878      	ldr	r0, [r7, #4]
 8011586:	f000 fb63 	bl	8011c50 <USBD_StdDevReq>
 801158a:	4603      	mov	r3, r0
 801158c:	73fb      	strb	r3, [r7, #15]
      break;
 801158e:	e020      	b.n	80115d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8011596:	4619      	mov	r1, r3
 8011598:	6878      	ldr	r0, [r7, #4]
 801159a:	f000 fbcb 	bl	8011d34 <USBD_StdItfReq>
 801159e:	4603      	mov	r3, r0
 80115a0:	73fb      	strb	r3, [r7, #15]
      break;
 80115a2:	e016      	b.n	80115d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80115aa:	4619      	mov	r1, r3
 80115ac:	6878      	ldr	r0, [r7, #4]
 80115ae:	f000 fc2d 	bl	8011e0c <USBD_StdEPReq>
 80115b2:	4603      	mov	r3, r0
 80115b4:	73fb      	strb	r3, [r7, #15]
      break;
 80115b6:	e00c      	b.n	80115d2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80115be:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80115c2:	b2db      	uxtb	r3, r3
 80115c4:	4619      	mov	r1, r3
 80115c6:	6878      	ldr	r0, [r7, #4]
 80115c8:	f001 fe88 	bl	80132dc <USBD_LL_StallEP>
 80115cc:	4603      	mov	r3, r0
 80115ce:	73fb      	strb	r3, [r7, #15]
      break;
 80115d0:	bf00      	nop
  }

  return ret;
 80115d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80115d4:	4618      	mov	r0, r3
 80115d6:	3710      	adds	r7, #16
 80115d8:	46bd      	mov	sp, r7
 80115da:	bd80      	pop	{r7, pc}

080115dc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80115dc:	b580      	push	{r7, lr}
 80115de:	b086      	sub	sp, #24
 80115e0:	af00      	add	r7, sp, #0
 80115e2:	60f8      	str	r0, [r7, #12]
 80115e4:	460b      	mov	r3, r1
 80115e6:	607a      	str	r2, [r7, #4]
 80115e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80115ea:	2300      	movs	r3, #0
 80115ec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80115ee:	7afb      	ldrb	r3, [r7, #11]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d16e      	bne.n	80116d2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80115fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8011602:	2b03      	cmp	r3, #3
 8011604:	f040 8098 	bne.w	8011738 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8011608:	693b      	ldr	r3, [r7, #16]
 801160a:	689a      	ldr	r2, [r3, #8]
 801160c:	693b      	ldr	r3, [r7, #16]
 801160e:	68db      	ldr	r3, [r3, #12]
 8011610:	429a      	cmp	r2, r3
 8011612:	d913      	bls.n	801163c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8011614:	693b      	ldr	r3, [r7, #16]
 8011616:	689a      	ldr	r2, [r3, #8]
 8011618:	693b      	ldr	r3, [r7, #16]
 801161a:	68db      	ldr	r3, [r3, #12]
 801161c:	1ad2      	subs	r2, r2, r3
 801161e:	693b      	ldr	r3, [r7, #16]
 8011620:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011622:	693b      	ldr	r3, [r7, #16]
 8011624:	68da      	ldr	r2, [r3, #12]
 8011626:	693b      	ldr	r3, [r7, #16]
 8011628:	689b      	ldr	r3, [r3, #8]
 801162a:	4293      	cmp	r3, r2
 801162c:	bf28      	it	cs
 801162e:	4613      	movcs	r3, r2
 8011630:	461a      	mov	r2, r3
 8011632:	6879      	ldr	r1, [r7, #4]
 8011634:	68f8      	ldr	r0, [r7, #12]
 8011636:	f001 f9be 	bl	80129b6 <USBD_CtlContinueRx>
 801163a:	e07d      	b.n	8011738 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8011642:	f003 031f 	and.w	r3, r3, #31
 8011646:	2b02      	cmp	r3, #2
 8011648:	d014      	beq.n	8011674 <USBD_LL_DataOutStage+0x98>
 801164a:	2b02      	cmp	r3, #2
 801164c:	d81d      	bhi.n	801168a <USBD_LL_DataOutStage+0xae>
 801164e:	2b00      	cmp	r3, #0
 8011650:	d002      	beq.n	8011658 <USBD_LL_DataOutStage+0x7c>
 8011652:	2b01      	cmp	r3, #1
 8011654:	d003      	beq.n	801165e <USBD_LL_DataOutStage+0x82>
 8011656:	e018      	b.n	801168a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8011658:	2300      	movs	r3, #0
 801165a:	75bb      	strb	r3, [r7, #22]
            break;
 801165c:	e018      	b.n	8011690 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8011664:	b2db      	uxtb	r3, r3
 8011666:	4619      	mov	r1, r3
 8011668:	68f8      	ldr	r0, [r7, #12]
 801166a:	f000 fa64 	bl	8011b36 <USBD_CoreFindIF>
 801166e:	4603      	mov	r3, r0
 8011670:	75bb      	strb	r3, [r7, #22]
            break;
 8011672:	e00d      	b.n	8011690 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801167a:	b2db      	uxtb	r3, r3
 801167c:	4619      	mov	r1, r3
 801167e:	68f8      	ldr	r0, [r7, #12]
 8011680:	f000 fa66 	bl	8011b50 <USBD_CoreFindEP>
 8011684:	4603      	mov	r3, r0
 8011686:	75bb      	strb	r3, [r7, #22]
            break;
 8011688:	e002      	b.n	8011690 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801168a:	2300      	movs	r3, #0
 801168c:	75bb      	strb	r3, [r7, #22]
            break;
 801168e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8011690:	7dbb      	ldrb	r3, [r7, #22]
 8011692:	2b00      	cmp	r3, #0
 8011694:	d119      	bne.n	80116ca <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801169c:	b2db      	uxtb	r3, r3
 801169e:	2b03      	cmp	r3, #3
 80116a0:	d113      	bne.n	80116ca <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80116a2:	7dba      	ldrb	r2, [r7, #22]
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	32ae      	adds	r2, #174	@ 0xae
 80116a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116ac:	691b      	ldr	r3, [r3, #16]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d00b      	beq.n	80116ca <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80116b2:	7dba      	ldrb	r2, [r7, #22]
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80116ba:	7dba      	ldrb	r2, [r7, #22]
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	32ae      	adds	r2, #174	@ 0xae
 80116c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116c4:	691b      	ldr	r3, [r3, #16]
 80116c6:	68f8      	ldr	r0, [r7, #12]
 80116c8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80116ca:	68f8      	ldr	r0, [r7, #12]
 80116cc:	f001 f984 	bl	80129d8 <USBD_CtlSendStatus>
 80116d0:	e032      	b.n	8011738 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80116d2:	7afb      	ldrb	r3, [r7, #11]
 80116d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80116d8:	b2db      	uxtb	r3, r3
 80116da:	4619      	mov	r1, r3
 80116dc:	68f8      	ldr	r0, [r7, #12]
 80116de:	f000 fa37 	bl	8011b50 <USBD_CoreFindEP>
 80116e2:	4603      	mov	r3, r0
 80116e4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80116e6:	7dbb      	ldrb	r3, [r7, #22]
 80116e8:	2bff      	cmp	r3, #255	@ 0xff
 80116ea:	d025      	beq.n	8011738 <USBD_LL_DataOutStage+0x15c>
 80116ec:	7dbb      	ldrb	r3, [r7, #22]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d122      	bne.n	8011738 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80116f8:	b2db      	uxtb	r3, r3
 80116fa:	2b03      	cmp	r3, #3
 80116fc:	d117      	bne.n	801172e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80116fe:	7dba      	ldrb	r2, [r7, #22]
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	32ae      	adds	r2, #174	@ 0xae
 8011704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011708:	699b      	ldr	r3, [r3, #24]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d00f      	beq.n	801172e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801170e:	7dba      	ldrb	r2, [r7, #22]
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8011716:	7dba      	ldrb	r2, [r7, #22]
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	32ae      	adds	r2, #174	@ 0xae
 801171c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011720:	699b      	ldr	r3, [r3, #24]
 8011722:	7afa      	ldrb	r2, [r7, #11]
 8011724:	4611      	mov	r1, r2
 8011726:	68f8      	ldr	r0, [r7, #12]
 8011728:	4798      	blx	r3
 801172a:	4603      	mov	r3, r0
 801172c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801172e:	7dfb      	ldrb	r3, [r7, #23]
 8011730:	2b00      	cmp	r3, #0
 8011732:	d001      	beq.n	8011738 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8011734:	7dfb      	ldrb	r3, [r7, #23]
 8011736:	e000      	b.n	801173a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8011738:	2300      	movs	r3, #0
}
 801173a:	4618      	mov	r0, r3
 801173c:	3718      	adds	r7, #24
 801173e:	46bd      	mov	sp, r7
 8011740:	bd80      	pop	{r7, pc}

08011742 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011742:	b580      	push	{r7, lr}
 8011744:	b086      	sub	sp, #24
 8011746:	af00      	add	r7, sp, #0
 8011748:	60f8      	str	r0, [r7, #12]
 801174a:	460b      	mov	r3, r1
 801174c:	607a      	str	r2, [r7, #4]
 801174e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8011750:	7afb      	ldrb	r3, [r7, #11]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d16f      	bne.n	8011836 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	3314      	adds	r3, #20
 801175a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8011762:	2b02      	cmp	r3, #2
 8011764:	d15a      	bne.n	801181c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8011766:	693b      	ldr	r3, [r7, #16]
 8011768:	689a      	ldr	r2, [r3, #8]
 801176a:	693b      	ldr	r3, [r7, #16]
 801176c:	68db      	ldr	r3, [r3, #12]
 801176e:	429a      	cmp	r2, r3
 8011770:	d914      	bls.n	801179c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011772:	693b      	ldr	r3, [r7, #16]
 8011774:	689a      	ldr	r2, [r3, #8]
 8011776:	693b      	ldr	r3, [r7, #16]
 8011778:	68db      	ldr	r3, [r3, #12]
 801177a:	1ad2      	subs	r2, r2, r3
 801177c:	693b      	ldr	r3, [r7, #16]
 801177e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011780:	693b      	ldr	r3, [r7, #16]
 8011782:	689b      	ldr	r3, [r3, #8]
 8011784:	461a      	mov	r2, r3
 8011786:	6879      	ldr	r1, [r7, #4]
 8011788:	68f8      	ldr	r0, [r7, #12]
 801178a:	f001 f8e6 	bl	801295a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801178e:	2300      	movs	r3, #0
 8011790:	2200      	movs	r2, #0
 8011792:	2100      	movs	r1, #0
 8011794:	68f8      	ldr	r0, [r7, #12]
 8011796:	f001 fe4b 	bl	8013430 <USBD_LL_PrepareReceive>
 801179a:	e03f      	b.n	801181c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801179c:	693b      	ldr	r3, [r7, #16]
 801179e:	68da      	ldr	r2, [r3, #12]
 80117a0:	693b      	ldr	r3, [r7, #16]
 80117a2:	689b      	ldr	r3, [r3, #8]
 80117a4:	429a      	cmp	r2, r3
 80117a6:	d11c      	bne.n	80117e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80117a8:	693b      	ldr	r3, [r7, #16]
 80117aa:	685a      	ldr	r2, [r3, #4]
 80117ac:	693b      	ldr	r3, [r7, #16]
 80117ae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80117b0:	429a      	cmp	r2, r3
 80117b2:	d316      	bcc.n	80117e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80117b4:	693b      	ldr	r3, [r7, #16]
 80117b6:	685a      	ldr	r2, [r3, #4]
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80117be:	429a      	cmp	r2, r3
 80117c0:	d20f      	bcs.n	80117e2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80117c2:	2200      	movs	r2, #0
 80117c4:	2100      	movs	r1, #0
 80117c6:	68f8      	ldr	r0, [r7, #12]
 80117c8:	f001 f8c7 	bl	801295a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	2200      	movs	r2, #0
 80117d0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80117d4:	2300      	movs	r3, #0
 80117d6:	2200      	movs	r2, #0
 80117d8:	2100      	movs	r1, #0
 80117da:	68f8      	ldr	r0, [r7, #12]
 80117dc:	f001 fe28 	bl	8013430 <USBD_LL_PrepareReceive>
 80117e0:	e01c      	b.n	801181c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80117e8:	b2db      	uxtb	r3, r3
 80117ea:	2b03      	cmp	r3, #3
 80117ec:	d10f      	bne.n	801180e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80117f4:	68db      	ldr	r3, [r3, #12]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d009      	beq.n	801180e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	2200      	movs	r2, #0
 80117fe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011808:	68db      	ldr	r3, [r3, #12]
 801180a:	68f8      	ldr	r0, [r7, #12]
 801180c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801180e:	2180      	movs	r1, #128	@ 0x80
 8011810:	68f8      	ldr	r0, [r7, #12]
 8011812:	f001 fd63 	bl	80132dc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011816:	68f8      	ldr	r0, [r7, #12]
 8011818:	f001 f8f1 	bl	80129fe <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8011822:	2b00      	cmp	r3, #0
 8011824:	d03a      	beq.n	801189c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8011826:	68f8      	ldr	r0, [r7, #12]
 8011828:	f7ff fe42 	bl	80114b0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	2200      	movs	r2, #0
 8011830:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8011834:	e032      	b.n	801189c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8011836:	7afb      	ldrb	r3, [r7, #11]
 8011838:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801183c:	b2db      	uxtb	r3, r3
 801183e:	4619      	mov	r1, r3
 8011840:	68f8      	ldr	r0, [r7, #12]
 8011842:	f000 f985 	bl	8011b50 <USBD_CoreFindEP>
 8011846:	4603      	mov	r3, r0
 8011848:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801184a:	7dfb      	ldrb	r3, [r7, #23]
 801184c:	2bff      	cmp	r3, #255	@ 0xff
 801184e:	d025      	beq.n	801189c <USBD_LL_DataInStage+0x15a>
 8011850:	7dfb      	ldrb	r3, [r7, #23]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d122      	bne.n	801189c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801185c:	b2db      	uxtb	r3, r3
 801185e:	2b03      	cmp	r3, #3
 8011860:	d11c      	bne.n	801189c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8011862:	7dfa      	ldrb	r2, [r7, #23]
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	32ae      	adds	r2, #174	@ 0xae
 8011868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801186c:	695b      	ldr	r3, [r3, #20]
 801186e:	2b00      	cmp	r3, #0
 8011870:	d014      	beq.n	801189c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8011872:	7dfa      	ldrb	r2, [r7, #23]
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801187a:	7dfa      	ldrb	r2, [r7, #23]
 801187c:	68fb      	ldr	r3, [r7, #12]
 801187e:	32ae      	adds	r2, #174	@ 0xae
 8011880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011884:	695b      	ldr	r3, [r3, #20]
 8011886:	7afa      	ldrb	r2, [r7, #11]
 8011888:	4611      	mov	r1, r2
 801188a:	68f8      	ldr	r0, [r7, #12]
 801188c:	4798      	blx	r3
 801188e:	4603      	mov	r3, r0
 8011890:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8011892:	7dbb      	ldrb	r3, [r7, #22]
 8011894:	2b00      	cmp	r3, #0
 8011896:	d001      	beq.n	801189c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8011898:	7dbb      	ldrb	r3, [r7, #22]
 801189a:	e000      	b.n	801189e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801189c:	2300      	movs	r3, #0
}
 801189e:	4618      	mov	r0, r3
 80118a0:	3718      	adds	r7, #24
 80118a2:	46bd      	mov	sp, r7
 80118a4:	bd80      	pop	{r7, pc}

080118a6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80118a6:	b580      	push	{r7, lr}
 80118a8:	b084      	sub	sp, #16
 80118aa:	af00      	add	r7, sp, #0
 80118ac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80118ae:	2300      	movs	r3, #0
 80118b0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	2201      	movs	r2, #1
 80118b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	2200      	movs	r2, #0
 80118be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	2200      	movs	r2, #0
 80118c6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	2200      	movs	r2, #0
 80118cc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	2200      	movs	r2, #0
 80118d4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d014      	beq.n	801190c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80118e8:	685b      	ldr	r3, [r3, #4]
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d00e      	beq.n	801190c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80118f4:	685b      	ldr	r3, [r3, #4]
 80118f6:	687a      	ldr	r2, [r7, #4]
 80118f8:	6852      	ldr	r2, [r2, #4]
 80118fa:	b2d2      	uxtb	r2, r2
 80118fc:	4611      	mov	r1, r2
 80118fe:	6878      	ldr	r0, [r7, #4]
 8011900:	4798      	blx	r3
 8011902:	4603      	mov	r3, r0
 8011904:	2b00      	cmp	r3, #0
 8011906:	d001      	beq.n	801190c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8011908:	2303      	movs	r3, #3
 801190a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801190c:	2340      	movs	r3, #64	@ 0x40
 801190e:	2200      	movs	r2, #0
 8011910:	2100      	movs	r1, #0
 8011912:	6878      	ldr	r0, [r7, #4]
 8011914:	f001 fc9d 	bl	8013252 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	2201      	movs	r2, #1
 801191c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	2240      	movs	r2, #64	@ 0x40
 8011924:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011928:	2340      	movs	r3, #64	@ 0x40
 801192a:	2200      	movs	r2, #0
 801192c:	2180      	movs	r1, #128	@ 0x80
 801192e:	6878      	ldr	r0, [r7, #4]
 8011930:	f001 fc8f 	bl	8013252 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	2201      	movs	r2, #1
 8011938:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	2240      	movs	r2, #64	@ 0x40
 801193e:	621a      	str	r2, [r3, #32]

  return ret;
 8011940:	7bfb      	ldrb	r3, [r7, #15]
}
 8011942:	4618      	mov	r0, r3
 8011944:	3710      	adds	r7, #16
 8011946:	46bd      	mov	sp, r7
 8011948:	bd80      	pop	{r7, pc}

0801194a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801194a:	b480      	push	{r7}
 801194c:	b083      	sub	sp, #12
 801194e:	af00      	add	r7, sp, #0
 8011950:	6078      	str	r0, [r7, #4]
 8011952:	460b      	mov	r3, r1
 8011954:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	78fa      	ldrb	r2, [r7, #3]
 801195a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801195c:	2300      	movs	r3, #0
}
 801195e:	4618      	mov	r0, r3
 8011960:	370c      	adds	r7, #12
 8011962:	46bd      	mov	sp, r7
 8011964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011968:	4770      	bx	lr

0801196a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801196a:	b480      	push	{r7}
 801196c:	b083      	sub	sp, #12
 801196e:	af00      	add	r7, sp, #0
 8011970:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011978:	b2db      	uxtb	r3, r3
 801197a:	2b04      	cmp	r3, #4
 801197c:	d006      	beq.n	801198c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011984:	b2da      	uxtb	r2, r3
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	2204      	movs	r2, #4
 8011990:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8011994:	2300      	movs	r3, #0
}
 8011996:	4618      	mov	r0, r3
 8011998:	370c      	adds	r7, #12
 801199a:	46bd      	mov	sp, r7
 801199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119a0:	4770      	bx	lr

080119a2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80119a2:	b480      	push	{r7}
 80119a4:	b083      	sub	sp, #12
 80119a6:	af00      	add	r7, sp, #0
 80119a8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80119b0:	b2db      	uxtb	r3, r3
 80119b2:	2b04      	cmp	r3, #4
 80119b4:	d106      	bne.n	80119c4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80119bc:	b2da      	uxtb	r2, r3
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80119c4:	2300      	movs	r3, #0
}
 80119c6:	4618      	mov	r0, r3
 80119c8:	370c      	adds	r7, #12
 80119ca:	46bd      	mov	sp, r7
 80119cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119d0:	4770      	bx	lr

080119d2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80119d2:	b580      	push	{r7, lr}
 80119d4:	b082      	sub	sp, #8
 80119d6:	af00      	add	r7, sp, #0
 80119d8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80119e0:	b2db      	uxtb	r3, r3
 80119e2:	2b03      	cmp	r3, #3
 80119e4:	d110      	bne.n	8011a08 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d00b      	beq.n	8011a08 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80119f6:	69db      	ldr	r3, [r3, #28]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d005      	beq.n	8011a08 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011a02:	69db      	ldr	r3, [r3, #28]
 8011a04:	6878      	ldr	r0, [r7, #4]
 8011a06:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8011a08:	2300      	movs	r3, #0
}
 8011a0a:	4618      	mov	r0, r3
 8011a0c:	3708      	adds	r7, #8
 8011a0e:	46bd      	mov	sp, r7
 8011a10:	bd80      	pop	{r7, pc}

08011a12 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8011a12:	b580      	push	{r7, lr}
 8011a14:	b082      	sub	sp, #8
 8011a16:	af00      	add	r7, sp, #0
 8011a18:	6078      	str	r0, [r7, #4]
 8011a1a:	460b      	mov	r3, r1
 8011a1c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	32ae      	adds	r2, #174	@ 0xae
 8011a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d101      	bne.n	8011a34 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8011a30:	2303      	movs	r3, #3
 8011a32:	e01c      	b.n	8011a6e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011a3a:	b2db      	uxtb	r3, r3
 8011a3c:	2b03      	cmp	r3, #3
 8011a3e:	d115      	bne.n	8011a6c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	32ae      	adds	r2, #174	@ 0xae
 8011a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a4e:	6a1b      	ldr	r3, [r3, #32]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d00b      	beq.n	8011a6c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8011a54:	687b      	ldr	r3, [r7, #4]
 8011a56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	32ae      	adds	r2, #174	@ 0xae
 8011a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a62:	6a1b      	ldr	r3, [r3, #32]
 8011a64:	78fa      	ldrb	r2, [r7, #3]
 8011a66:	4611      	mov	r1, r2
 8011a68:	6878      	ldr	r0, [r7, #4]
 8011a6a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011a6c:	2300      	movs	r3, #0
}
 8011a6e:	4618      	mov	r0, r3
 8011a70:	3708      	adds	r7, #8
 8011a72:	46bd      	mov	sp, r7
 8011a74:	bd80      	pop	{r7, pc}

08011a76 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8011a76:	b580      	push	{r7, lr}
 8011a78:	b082      	sub	sp, #8
 8011a7a:	af00      	add	r7, sp, #0
 8011a7c:	6078      	str	r0, [r7, #4]
 8011a7e:	460b      	mov	r3, r1
 8011a80:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	32ae      	adds	r2, #174	@ 0xae
 8011a8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d101      	bne.n	8011a98 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8011a94:	2303      	movs	r3, #3
 8011a96:	e01c      	b.n	8011ad2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011a9e:	b2db      	uxtb	r3, r3
 8011aa0:	2b03      	cmp	r3, #3
 8011aa2:	d115      	bne.n	8011ad0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	32ae      	adds	r2, #174	@ 0xae
 8011aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d00b      	beq.n	8011ad0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	32ae      	adds	r2, #174	@ 0xae
 8011ac2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ac8:	78fa      	ldrb	r2, [r7, #3]
 8011aca:	4611      	mov	r1, r2
 8011acc:	6878      	ldr	r0, [r7, #4]
 8011ace:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011ad0:	2300      	movs	r3, #0
}
 8011ad2:	4618      	mov	r0, r3
 8011ad4:	3708      	adds	r7, #8
 8011ad6:	46bd      	mov	sp, r7
 8011ad8:	bd80      	pop	{r7, pc}

08011ada <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011ada:	b480      	push	{r7}
 8011adc:	b083      	sub	sp, #12
 8011ade:	af00      	add	r7, sp, #0
 8011ae0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011ae2:	2300      	movs	r3, #0
}
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	370c      	adds	r7, #12
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aee:	4770      	bx	lr

08011af0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b084      	sub	sp, #16
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8011af8:	2300      	movs	r3, #0
 8011afa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	2201      	movs	r2, #1
 8011b00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d00e      	beq.n	8011b2c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011b14:	685b      	ldr	r3, [r3, #4]
 8011b16:	687a      	ldr	r2, [r7, #4]
 8011b18:	6852      	ldr	r2, [r2, #4]
 8011b1a:	b2d2      	uxtb	r2, r2
 8011b1c:	4611      	mov	r1, r2
 8011b1e:	6878      	ldr	r0, [r7, #4]
 8011b20:	4798      	blx	r3
 8011b22:	4603      	mov	r3, r0
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d001      	beq.n	8011b2c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8011b28:	2303      	movs	r3, #3
 8011b2a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b2e:	4618      	mov	r0, r3
 8011b30:	3710      	adds	r7, #16
 8011b32:	46bd      	mov	sp, r7
 8011b34:	bd80      	pop	{r7, pc}

08011b36 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011b36:	b480      	push	{r7}
 8011b38:	b083      	sub	sp, #12
 8011b3a:	af00      	add	r7, sp, #0
 8011b3c:	6078      	str	r0, [r7, #4]
 8011b3e:	460b      	mov	r3, r1
 8011b40:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011b42:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011b44:	4618      	mov	r0, r3
 8011b46:	370c      	adds	r7, #12
 8011b48:	46bd      	mov	sp, r7
 8011b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b4e:	4770      	bx	lr

08011b50 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8011b50:	b480      	push	{r7}
 8011b52:	b083      	sub	sp, #12
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	6078      	str	r0, [r7, #4]
 8011b58:	460b      	mov	r3, r1
 8011b5a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8011b5c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8011b5e:	4618      	mov	r0, r3
 8011b60:	370c      	adds	r7, #12
 8011b62:	46bd      	mov	sp, r7
 8011b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b68:	4770      	bx	lr

08011b6a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8011b6a:	b580      	push	{r7, lr}
 8011b6c:	b086      	sub	sp, #24
 8011b6e:	af00      	add	r7, sp, #0
 8011b70:	6078      	str	r0, [r7, #4]
 8011b72:	460b      	mov	r3, r1
 8011b74:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8011b7e:	2300      	movs	r3, #0
 8011b80:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	885b      	ldrh	r3, [r3, #2]
 8011b86:	b29b      	uxth	r3, r3
 8011b88:	68fa      	ldr	r2, [r7, #12]
 8011b8a:	7812      	ldrb	r2, [r2, #0]
 8011b8c:	4293      	cmp	r3, r2
 8011b8e:	d91f      	bls.n	8011bd0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	781b      	ldrb	r3, [r3, #0]
 8011b94:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8011b96:	e013      	b.n	8011bc0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8011b98:	f107 030a 	add.w	r3, r7, #10
 8011b9c:	4619      	mov	r1, r3
 8011b9e:	6978      	ldr	r0, [r7, #20]
 8011ba0:	f000 f81b 	bl	8011bda <USBD_GetNextDesc>
 8011ba4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8011ba6:	697b      	ldr	r3, [r7, #20]
 8011ba8:	785b      	ldrb	r3, [r3, #1]
 8011baa:	2b05      	cmp	r3, #5
 8011bac:	d108      	bne.n	8011bc0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8011bae:	697b      	ldr	r3, [r7, #20]
 8011bb0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8011bb2:	693b      	ldr	r3, [r7, #16]
 8011bb4:	789b      	ldrb	r3, [r3, #2]
 8011bb6:	78fa      	ldrb	r2, [r7, #3]
 8011bb8:	429a      	cmp	r2, r3
 8011bba:	d008      	beq.n	8011bce <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8011bbc:	2300      	movs	r3, #0
 8011bbe:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8011bc0:	68fb      	ldr	r3, [r7, #12]
 8011bc2:	885b      	ldrh	r3, [r3, #2]
 8011bc4:	b29a      	uxth	r2, r3
 8011bc6:	897b      	ldrh	r3, [r7, #10]
 8011bc8:	429a      	cmp	r2, r3
 8011bca:	d8e5      	bhi.n	8011b98 <USBD_GetEpDesc+0x2e>
 8011bcc:	e000      	b.n	8011bd0 <USBD_GetEpDesc+0x66>
          break;
 8011bce:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8011bd0:	693b      	ldr	r3, [r7, #16]
}
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	3718      	adds	r7, #24
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	bd80      	pop	{r7, pc}

08011bda <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8011bda:	b480      	push	{r7}
 8011bdc:	b085      	sub	sp, #20
 8011bde:	af00      	add	r7, sp, #0
 8011be0:	6078      	str	r0, [r7, #4]
 8011be2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8011be8:	683b      	ldr	r3, [r7, #0]
 8011bea:	881b      	ldrh	r3, [r3, #0]
 8011bec:	68fa      	ldr	r2, [r7, #12]
 8011bee:	7812      	ldrb	r2, [r2, #0]
 8011bf0:	4413      	add	r3, r2
 8011bf2:	b29a      	uxth	r2, r3
 8011bf4:	683b      	ldr	r3, [r7, #0]
 8011bf6:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	781b      	ldrb	r3, [r3, #0]
 8011bfc:	461a      	mov	r2, r3
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	4413      	add	r3, r2
 8011c02:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8011c04:	68fb      	ldr	r3, [r7, #12]
}
 8011c06:	4618      	mov	r0, r3
 8011c08:	3714      	adds	r7, #20
 8011c0a:	46bd      	mov	sp, r7
 8011c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c10:	4770      	bx	lr

08011c12 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011c12:	b480      	push	{r7}
 8011c14:	b087      	sub	sp, #28
 8011c16:	af00      	add	r7, sp, #0
 8011c18:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011c1e:	697b      	ldr	r3, [r7, #20]
 8011c20:	781b      	ldrb	r3, [r3, #0]
 8011c22:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011c24:	697b      	ldr	r3, [r7, #20]
 8011c26:	3301      	adds	r3, #1
 8011c28:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011c2a:	697b      	ldr	r3, [r7, #20]
 8011c2c:	781b      	ldrb	r3, [r3, #0]
 8011c2e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011c30:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8011c34:	021b      	lsls	r3, r3, #8
 8011c36:	b21a      	sxth	r2, r3
 8011c38:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011c3c:	4313      	orrs	r3, r2
 8011c3e:	b21b      	sxth	r3, r3
 8011c40:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011c42:	89fb      	ldrh	r3, [r7, #14]
}
 8011c44:	4618      	mov	r0, r3
 8011c46:	371c      	adds	r7, #28
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c4e:	4770      	bx	lr

08011c50 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011c50:	b580      	push	{r7, lr}
 8011c52:	b084      	sub	sp, #16
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
 8011c58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011c5e:	683b      	ldr	r3, [r7, #0]
 8011c60:	781b      	ldrb	r3, [r3, #0]
 8011c62:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011c66:	2b40      	cmp	r3, #64	@ 0x40
 8011c68:	d005      	beq.n	8011c76 <USBD_StdDevReq+0x26>
 8011c6a:	2b40      	cmp	r3, #64	@ 0x40
 8011c6c:	d857      	bhi.n	8011d1e <USBD_StdDevReq+0xce>
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d00f      	beq.n	8011c92 <USBD_StdDevReq+0x42>
 8011c72:	2b20      	cmp	r3, #32
 8011c74:	d153      	bne.n	8011d1e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	32ae      	adds	r2, #174	@ 0xae
 8011c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c84:	689b      	ldr	r3, [r3, #8]
 8011c86:	6839      	ldr	r1, [r7, #0]
 8011c88:	6878      	ldr	r0, [r7, #4]
 8011c8a:	4798      	blx	r3
 8011c8c:	4603      	mov	r3, r0
 8011c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8011c90:	e04a      	b.n	8011d28 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011c92:	683b      	ldr	r3, [r7, #0]
 8011c94:	785b      	ldrb	r3, [r3, #1]
 8011c96:	2b09      	cmp	r3, #9
 8011c98:	d83b      	bhi.n	8011d12 <USBD_StdDevReq+0xc2>
 8011c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8011ca0 <USBD_StdDevReq+0x50>)
 8011c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ca0:	08011cf5 	.word	0x08011cf5
 8011ca4:	08011d09 	.word	0x08011d09
 8011ca8:	08011d13 	.word	0x08011d13
 8011cac:	08011cff 	.word	0x08011cff
 8011cb0:	08011d13 	.word	0x08011d13
 8011cb4:	08011cd3 	.word	0x08011cd3
 8011cb8:	08011cc9 	.word	0x08011cc9
 8011cbc:	08011d13 	.word	0x08011d13
 8011cc0:	08011ceb 	.word	0x08011ceb
 8011cc4:	08011cdd 	.word	0x08011cdd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8011cc8:	6839      	ldr	r1, [r7, #0]
 8011cca:	6878      	ldr	r0, [r7, #4]
 8011ccc:	f000 fa3c 	bl	8012148 <USBD_GetDescriptor>
          break;
 8011cd0:	e024      	b.n	8011d1c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8011cd2:	6839      	ldr	r1, [r7, #0]
 8011cd4:	6878      	ldr	r0, [r7, #4]
 8011cd6:	f000 fbcb 	bl	8012470 <USBD_SetAddress>
          break;
 8011cda:	e01f      	b.n	8011d1c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8011cdc:	6839      	ldr	r1, [r7, #0]
 8011cde:	6878      	ldr	r0, [r7, #4]
 8011ce0:	f000 fc0a 	bl	80124f8 <USBD_SetConfig>
 8011ce4:	4603      	mov	r3, r0
 8011ce6:	73fb      	strb	r3, [r7, #15]
          break;
 8011ce8:	e018      	b.n	8011d1c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8011cea:	6839      	ldr	r1, [r7, #0]
 8011cec:	6878      	ldr	r0, [r7, #4]
 8011cee:	f000 fcad 	bl	801264c <USBD_GetConfig>
          break;
 8011cf2:	e013      	b.n	8011d1c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8011cf4:	6839      	ldr	r1, [r7, #0]
 8011cf6:	6878      	ldr	r0, [r7, #4]
 8011cf8:	f000 fcde 	bl	80126b8 <USBD_GetStatus>
          break;
 8011cfc:	e00e      	b.n	8011d1c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8011cfe:	6839      	ldr	r1, [r7, #0]
 8011d00:	6878      	ldr	r0, [r7, #4]
 8011d02:	f000 fd0d 	bl	8012720 <USBD_SetFeature>
          break;
 8011d06:	e009      	b.n	8011d1c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8011d08:	6839      	ldr	r1, [r7, #0]
 8011d0a:	6878      	ldr	r0, [r7, #4]
 8011d0c:	f000 fd31 	bl	8012772 <USBD_ClrFeature>
          break;
 8011d10:	e004      	b.n	8011d1c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8011d12:	6839      	ldr	r1, [r7, #0]
 8011d14:	6878      	ldr	r0, [r7, #4]
 8011d16:	f000 fd88 	bl	801282a <USBD_CtlError>
          break;
 8011d1a:	bf00      	nop
      }
      break;
 8011d1c:	e004      	b.n	8011d28 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8011d1e:	6839      	ldr	r1, [r7, #0]
 8011d20:	6878      	ldr	r0, [r7, #4]
 8011d22:	f000 fd82 	bl	801282a <USBD_CtlError>
      break;
 8011d26:	bf00      	nop
  }

  return ret;
 8011d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	3710      	adds	r7, #16
 8011d2e:	46bd      	mov	sp, r7
 8011d30:	bd80      	pop	{r7, pc}
 8011d32:	bf00      	nop

08011d34 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011d34:	b580      	push	{r7, lr}
 8011d36:	b084      	sub	sp, #16
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	6078      	str	r0, [r7, #4]
 8011d3c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011d3e:	2300      	movs	r3, #0
 8011d40:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011d42:	683b      	ldr	r3, [r7, #0]
 8011d44:	781b      	ldrb	r3, [r3, #0]
 8011d46:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011d4a:	2b40      	cmp	r3, #64	@ 0x40
 8011d4c:	d005      	beq.n	8011d5a <USBD_StdItfReq+0x26>
 8011d4e:	2b40      	cmp	r3, #64	@ 0x40
 8011d50:	d852      	bhi.n	8011df8 <USBD_StdItfReq+0xc4>
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d001      	beq.n	8011d5a <USBD_StdItfReq+0x26>
 8011d56:	2b20      	cmp	r3, #32
 8011d58:	d14e      	bne.n	8011df8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011d60:	b2db      	uxtb	r3, r3
 8011d62:	3b01      	subs	r3, #1
 8011d64:	2b02      	cmp	r3, #2
 8011d66:	d840      	bhi.n	8011dea <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011d68:	683b      	ldr	r3, [r7, #0]
 8011d6a:	889b      	ldrh	r3, [r3, #4]
 8011d6c:	b2db      	uxtb	r3, r3
 8011d6e:	2b01      	cmp	r3, #1
 8011d70:	d836      	bhi.n	8011de0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8011d72:	683b      	ldr	r3, [r7, #0]
 8011d74:	889b      	ldrh	r3, [r3, #4]
 8011d76:	b2db      	uxtb	r3, r3
 8011d78:	4619      	mov	r1, r3
 8011d7a:	6878      	ldr	r0, [r7, #4]
 8011d7c:	f7ff fedb 	bl	8011b36 <USBD_CoreFindIF>
 8011d80:	4603      	mov	r3, r0
 8011d82:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011d84:	7bbb      	ldrb	r3, [r7, #14]
 8011d86:	2bff      	cmp	r3, #255	@ 0xff
 8011d88:	d01d      	beq.n	8011dc6 <USBD_StdItfReq+0x92>
 8011d8a:	7bbb      	ldrb	r3, [r7, #14]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d11a      	bne.n	8011dc6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8011d90:	7bba      	ldrb	r2, [r7, #14]
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	32ae      	adds	r2, #174	@ 0xae
 8011d96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d9a:	689b      	ldr	r3, [r3, #8]
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d00f      	beq.n	8011dc0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8011da0:	7bba      	ldrb	r2, [r7, #14]
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011da8:	7bba      	ldrb	r2, [r7, #14]
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	32ae      	adds	r2, #174	@ 0xae
 8011dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011db2:	689b      	ldr	r3, [r3, #8]
 8011db4:	6839      	ldr	r1, [r7, #0]
 8011db6:	6878      	ldr	r0, [r7, #4]
 8011db8:	4798      	blx	r3
 8011dba:	4603      	mov	r3, r0
 8011dbc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011dbe:	e004      	b.n	8011dca <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8011dc0:	2303      	movs	r3, #3
 8011dc2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8011dc4:	e001      	b.n	8011dca <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8011dc6:	2303      	movs	r3, #3
 8011dc8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8011dca:	683b      	ldr	r3, [r7, #0]
 8011dcc:	88db      	ldrh	r3, [r3, #6]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d110      	bne.n	8011df4 <USBD_StdItfReq+0xc0>
 8011dd2:	7bfb      	ldrb	r3, [r7, #15]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d10d      	bne.n	8011df4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8011dd8:	6878      	ldr	r0, [r7, #4]
 8011dda:	f000 fdfd 	bl	80129d8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8011dde:	e009      	b.n	8011df4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8011de0:	6839      	ldr	r1, [r7, #0]
 8011de2:	6878      	ldr	r0, [r7, #4]
 8011de4:	f000 fd21 	bl	801282a <USBD_CtlError>
          break;
 8011de8:	e004      	b.n	8011df4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8011dea:	6839      	ldr	r1, [r7, #0]
 8011dec:	6878      	ldr	r0, [r7, #4]
 8011dee:	f000 fd1c 	bl	801282a <USBD_CtlError>
          break;
 8011df2:	e000      	b.n	8011df6 <USBD_StdItfReq+0xc2>
          break;
 8011df4:	bf00      	nop
      }
      break;
 8011df6:	e004      	b.n	8011e02 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8011df8:	6839      	ldr	r1, [r7, #0]
 8011dfa:	6878      	ldr	r0, [r7, #4]
 8011dfc:	f000 fd15 	bl	801282a <USBD_CtlError>
      break;
 8011e00:	bf00      	nop
  }

  return ret;
 8011e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e04:	4618      	mov	r0, r3
 8011e06:	3710      	adds	r7, #16
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	bd80      	pop	{r7, pc}

08011e0c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b084      	sub	sp, #16
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
 8011e14:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8011e16:	2300      	movs	r3, #0
 8011e18:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8011e1a:	683b      	ldr	r3, [r7, #0]
 8011e1c:	889b      	ldrh	r3, [r3, #4]
 8011e1e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011e20:	683b      	ldr	r3, [r7, #0]
 8011e22:	781b      	ldrb	r3, [r3, #0]
 8011e24:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011e28:	2b40      	cmp	r3, #64	@ 0x40
 8011e2a:	d007      	beq.n	8011e3c <USBD_StdEPReq+0x30>
 8011e2c:	2b40      	cmp	r3, #64	@ 0x40
 8011e2e:	f200 817f 	bhi.w	8012130 <USBD_StdEPReq+0x324>
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d02a      	beq.n	8011e8c <USBD_StdEPReq+0x80>
 8011e36:	2b20      	cmp	r3, #32
 8011e38:	f040 817a 	bne.w	8012130 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8011e3c:	7bbb      	ldrb	r3, [r7, #14]
 8011e3e:	4619      	mov	r1, r3
 8011e40:	6878      	ldr	r0, [r7, #4]
 8011e42:	f7ff fe85 	bl	8011b50 <USBD_CoreFindEP>
 8011e46:	4603      	mov	r3, r0
 8011e48:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011e4a:	7b7b      	ldrb	r3, [r7, #13]
 8011e4c:	2bff      	cmp	r3, #255	@ 0xff
 8011e4e:	f000 8174 	beq.w	801213a <USBD_StdEPReq+0x32e>
 8011e52:	7b7b      	ldrb	r3, [r7, #13]
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	f040 8170 	bne.w	801213a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8011e5a:	7b7a      	ldrb	r2, [r7, #13]
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8011e62:	7b7a      	ldrb	r2, [r7, #13]
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	32ae      	adds	r2, #174	@ 0xae
 8011e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e6c:	689b      	ldr	r3, [r3, #8]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	f000 8163 	beq.w	801213a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8011e74:	7b7a      	ldrb	r2, [r7, #13]
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	32ae      	adds	r2, #174	@ 0xae
 8011e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e7e:	689b      	ldr	r3, [r3, #8]
 8011e80:	6839      	ldr	r1, [r7, #0]
 8011e82:	6878      	ldr	r0, [r7, #4]
 8011e84:	4798      	blx	r3
 8011e86:	4603      	mov	r3, r0
 8011e88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8011e8a:	e156      	b.n	801213a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011e8c:	683b      	ldr	r3, [r7, #0]
 8011e8e:	785b      	ldrb	r3, [r3, #1]
 8011e90:	2b03      	cmp	r3, #3
 8011e92:	d008      	beq.n	8011ea6 <USBD_StdEPReq+0x9a>
 8011e94:	2b03      	cmp	r3, #3
 8011e96:	f300 8145 	bgt.w	8012124 <USBD_StdEPReq+0x318>
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	f000 809b 	beq.w	8011fd6 <USBD_StdEPReq+0x1ca>
 8011ea0:	2b01      	cmp	r3, #1
 8011ea2:	d03c      	beq.n	8011f1e <USBD_StdEPReq+0x112>
 8011ea4:	e13e      	b.n	8012124 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011eac:	b2db      	uxtb	r3, r3
 8011eae:	2b02      	cmp	r3, #2
 8011eb0:	d002      	beq.n	8011eb8 <USBD_StdEPReq+0xac>
 8011eb2:	2b03      	cmp	r3, #3
 8011eb4:	d016      	beq.n	8011ee4 <USBD_StdEPReq+0xd8>
 8011eb6:	e02c      	b.n	8011f12 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011eb8:	7bbb      	ldrb	r3, [r7, #14]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d00d      	beq.n	8011eda <USBD_StdEPReq+0xce>
 8011ebe:	7bbb      	ldrb	r3, [r7, #14]
 8011ec0:	2b80      	cmp	r3, #128	@ 0x80
 8011ec2:	d00a      	beq.n	8011eda <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011ec4:	7bbb      	ldrb	r3, [r7, #14]
 8011ec6:	4619      	mov	r1, r3
 8011ec8:	6878      	ldr	r0, [r7, #4]
 8011eca:	f001 fa07 	bl	80132dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011ece:	2180      	movs	r1, #128	@ 0x80
 8011ed0:	6878      	ldr	r0, [r7, #4]
 8011ed2:	f001 fa03 	bl	80132dc <USBD_LL_StallEP>
 8011ed6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011ed8:	e020      	b.n	8011f1c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8011eda:	6839      	ldr	r1, [r7, #0]
 8011edc:	6878      	ldr	r0, [r7, #4]
 8011ede:	f000 fca4 	bl	801282a <USBD_CtlError>
              break;
 8011ee2:	e01b      	b.n	8011f1c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011ee4:	683b      	ldr	r3, [r7, #0]
 8011ee6:	885b      	ldrh	r3, [r3, #2]
 8011ee8:	2b00      	cmp	r3, #0
 8011eea:	d10e      	bne.n	8011f0a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8011eec:	7bbb      	ldrb	r3, [r7, #14]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d00b      	beq.n	8011f0a <USBD_StdEPReq+0xfe>
 8011ef2:	7bbb      	ldrb	r3, [r7, #14]
 8011ef4:	2b80      	cmp	r3, #128	@ 0x80
 8011ef6:	d008      	beq.n	8011f0a <USBD_StdEPReq+0xfe>
 8011ef8:	683b      	ldr	r3, [r7, #0]
 8011efa:	88db      	ldrh	r3, [r3, #6]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d104      	bne.n	8011f0a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8011f00:	7bbb      	ldrb	r3, [r7, #14]
 8011f02:	4619      	mov	r1, r3
 8011f04:	6878      	ldr	r0, [r7, #4]
 8011f06:	f001 f9e9 	bl	80132dc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8011f0a:	6878      	ldr	r0, [r7, #4]
 8011f0c:	f000 fd64 	bl	80129d8 <USBD_CtlSendStatus>

              break;
 8011f10:	e004      	b.n	8011f1c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8011f12:	6839      	ldr	r1, [r7, #0]
 8011f14:	6878      	ldr	r0, [r7, #4]
 8011f16:	f000 fc88 	bl	801282a <USBD_CtlError>
              break;
 8011f1a:	bf00      	nop
          }
          break;
 8011f1c:	e107      	b.n	801212e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011f24:	b2db      	uxtb	r3, r3
 8011f26:	2b02      	cmp	r3, #2
 8011f28:	d002      	beq.n	8011f30 <USBD_StdEPReq+0x124>
 8011f2a:	2b03      	cmp	r3, #3
 8011f2c:	d016      	beq.n	8011f5c <USBD_StdEPReq+0x150>
 8011f2e:	e04b      	b.n	8011fc8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011f30:	7bbb      	ldrb	r3, [r7, #14]
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d00d      	beq.n	8011f52 <USBD_StdEPReq+0x146>
 8011f36:	7bbb      	ldrb	r3, [r7, #14]
 8011f38:	2b80      	cmp	r3, #128	@ 0x80
 8011f3a:	d00a      	beq.n	8011f52 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8011f3c:	7bbb      	ldrb	r3, [r7, #14]
 8011f3e:	4619      	mov	r1, r3
 8011f40:	6878      	ldr	r0, [r7, #4]
 8011f42:	f001 f9cb 	bl	80132dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8011f46:	2180      	movs	r1, #128	@ 0x80
 8011f48:	6878      	ldr	r0, [r7, #4]
 8011f4a:	f001 f9c7 	bl	80132dc <USBD_LL_StallEP>
 8011f4e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8011f50:	e040      	b.n	8011fd4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8011f52:	6839      	ldr	r1, [r7, #0]
 8011f54:	6878      	ldr	r0, [r7, #4]
 8011f56:	f000 fc68 	bl	801282a <USBD_CtlError>
              break;
 8011f5a:	e03b      	b.n	8011fd4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8011f5c:	683b      	ldr	r3, [r7, #0]
 8011f5e:	885b      	ldrh	r3, [r3, #2]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d136      	bne.n	8011fd2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8011f64:	7bbb      	ldrb	r3, [r7, #14]
 8011f66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d004      	beq.n	8011f78 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8011f6e:	7bbb      	ldrb	r3, [r7, #14]
 8011f70:	4619      	mov	r1, r3
 8011f72:	6878      	ldr	r0, [r7, #4]
 8011f74:	f001 f9d1 	bl	801331a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8011f78:	6878      	ldr	r0, [r7, #4]
 8011f7a:	f000 fd2d 	bl	80129d8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8011f7e:	7bbb      	ldrb	r3, [r7, #14]
 8011f80:	4619      	mov	r1, r3
 8011f82:	6878      	ldr	r0, [r7, #4]
 8011f84:	f7ff fde4 	bl	8011b50 <USBD_CoreFindEP>
 8011f88:	4603      	mov	r3, r0
 8011f8a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011f8c:	7b7b      	ldrb	r3, [r7, #13]
 8011f8e:	2bff      	cmp	r3, #255	@ 0xff
 8011f90:	d01f      	beq.n	8011fd2 <USBD_StdEPReq+0x1c6>
 8011f92:	7b7b      	ldrb	r3, [r7, #13]
 8011f94:	2b00      	cmp	r3, #0
 8011f96:	d11c      	bne.n	8011fd2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8011f98:	7b7a      	ldrb	r2, [r7, #13]
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8011fa0:	7b7a      	ldrb	r2, [r7, #13]
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	32ae      	adds	r2, #174	@ 0xae
 8011fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011faa:	689b      	ldr	r3, [r3, #8]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d010      	beq.n	8011fd2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8011fb0:	7b7a      	ldrb	r2, [r7, #13]
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	32ae      	adds	r2, #174	@ 0xae
 8011fb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011fba:	689b      	ldr	r3, [r3, #8]
 8011fbc:	6839      	ldr	r1, [r7, #0]
 8011fbe:	6878      	ldr	r0, [r7, #4]
 8011fc0:	4798      	blx	r3
 8011fc2:	4603      	mov	r3, r0
 8011fc4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8011fc6:	e004      	b.n	8011fd2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8011fc8:	6839      	ldr	r1, [r7, #0]
 8011fca:	6878      	ldr	r0, [r7, #4]
 8011fcc:	f000 fc2d 	bl	801282a <USBD_CtlError>
              break;
 8011fd0:	e000      	b.n	8011fd4 <USBD_StdEPReq+0x1c8>
              break;
 8011fd2:	bf00      	nop
          }
          break;
 8011fd4:	e0ab      	b.n	801212e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011fdc:	b2db      	uxtb	r3, r3
 8011fde:	2b02      	cmp	r3, #2
 8011fe0:	d002      	beq.n	8011fe8 <USBD_StdEPReq+0x1dc>
 8011fe2:	2b03      	cmp	r3, #3
 8011fe4:	d032      	beq.n	801204c <USBD_StdEPReq+0x240>
 8011fe6:	e097      	b.n	8012118 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8011fe8:	7bbb      	ldrb	r3, [r7, #14]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d007      	beq.n	8011ffe <USBD_StdEPReq+0x1f2>
 8011fee:	7bbb      	ldrb	r3, [r7, #14]
 8011ff0:	2b80      	cmp	r3, #128	@ 0x80
 8011ff2:	d004      	beq.n	8011ffe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8011ff4:	6839      	ldr	r1, [r7, #0]
 8011ff6:	6878      	ldr	r0, [r7, #4]
 8011ff8:	f000 fc17 	bl	801282a <USBD_CtlError>
                break;
 8011ffc:	e091      	b.n	8012122 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8011ffe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012002:	2b00      	cmp	r3, #0
 8012004:	da0b      	bge.n	801201e <USBD_StdEPReq+0x212>
 8012006:	7bbb      	ldrb	r3, [r7, #14]
 8012008:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801200c:	4613      	mov	r3, r2
 801200e:	009b      	lsls	r3, r3, #2
 8012010:	4413      	add	r3, r2
 8012012:	009b      	lsls	r3, r3, #2
 8012014:	3310      	adds	r3, #16
 8012016:	687a      	ldr	r2, [r7, #4]
 8012018:	4413      	add	r3, r2
 801201a:	3304      	adds	r3, #4
 801201c:	e00b      	b.n	8012036 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801201e:	7bbb      	ldrb	r3, [r7, #14]
 8012020:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012024:	4613      	mov	r3, r2
 8012026:	009b      	lsls	r3, r3, #2
 8012028:	4413      	add	r3, r2
 801202a:	009b      	lsls	r3, r3, #2
 801202c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8012030:	687a      	ldr	r2, [r7, #4]
 8012032:	4413      	add	r3, r2
 8012034:	3304      	adds	r3, #4
 8012036:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8012038:	68bb      	ldr	r3, [r7, #8]
 801203a:	2200      	movs	r2, #0
 801203c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801203e:	68bb      	ldr	r3, [r7, #8]
 8012040:	2202      	movs	r2, #2
 8012042:	4619      	mov	r1, r3
 8012044:	6878      	ldr	r0, [r7, #4]
 8012046:	f000 fc6d 	bl	8012924 <USBD_CtlSendData>
              break;
 801204a:	e06a      	b.n	8012122 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801204c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012050:	2b00      	cmp	r3, #0
 8012052:	da11      	bge.n	8012078 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012054:	7bbb      	ldrb	r3, [r7, #14]
 8012056:	f003 020f 	and.w	r2, r3, #15
 801205a:	6879      	ldr	r1, [r7, #4]
 801205c:	4613      	mov	r3, r2
 801205e:	009b      	lsls	r3, r3, #2
 8012060:	4413      	add	r3, r2
 8012062:	009b      	lsls	r3, r3, #2
 8012064:	440b      	add	r3, r1
 8012066:	3324      	adds	r3, #36	@ 0x24
 8012068:	881b      	ldrh	r3, [r3, #0]
 801206a:	2b00      	cmp	r3, #0
 801206c:	d117      	bne.n	801209e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801206e:	6839      	ldr	r1, [r7, #0]
 8012070:	6878      	ldr	r0, [r7, #4]
 8012072:	f000 fbda 	bl	801282a <USBD_CtlError>
                  break;
 8012076:	e054      	b.n	8012122 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012078:	7bbb      	ldrb	r3, [r7, #14]
 801207a:	f003 020f 	and.w	r2, r3, #15
 801207e:	6879      	ldr	r1, [r7, #4]
 8012080:	4613      	mov	r3, r2
 8012082:	009b      	lsls	r3, r3, #2
 8012084:	4413      	add	r3, r2
 8012086:	009b      	lsls	r3, r3, #2
 8012088:	440b      	add	r3, r1
 801208a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801208e:	881b      	ldrh	r3, [r3, #0]
 8012090:	2b00      	cmp	r3, #0
 8012092:	d104      	bne.n	801209e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8012094:	6839      	ldr	r1, [r7, #0]
 8012096:	6878      	ldr	r0, [r7, #4]
 8012098:	f000 fbc7 	bl	801282a <USBD_CtlError>
                  break;
 801209c:	e041      	b.n	8012122 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801209e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	da0b      	bge.n	80120be <USBD_StdEPReq+0x2b2>
 80120a6:	7bbb      	ldrb	r3, [r7, #14]
 80120a8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80120ac:	4613      	mov	r3, r2
 80120ae:	009b      	lsls	r3, r3, #2
 80120b0:	4413      	add	r3, r2
 80120b2:	009b      	lsls	r3, r3, #2
 80120b4:	3310      	adds	r3, #16
 80120b6:	687a      	ldr	r2, [r7, #4]
 80120b8:	4413      	add	r3, r2
 80120ba:	3304      	adds	r3, #4
 80120bc:	e00b      	b.n	80120d6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80120be:	7bbb      	ldrb	r3, [r7, #14]
 80120c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80120c4:	4613      	mov	r3, r2
 80120c6:	009b      	lsls	r3, r3, #2
 80120c8:	4413      	add	r3, r2
 80120ca:	009b      	lsls	r3, r3, #2
 80120cc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80120d0:	687a      	ldr	r2, [r7, #4]
 80120d2:	4413      	add	r3, r2
 80120d4:	3304      	adds	r3, #4
 80120d6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80120d8:	7bbb      	ldrb	r3, [r7, #14]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d002      	beq.n	80120e4 <USBD_StdEPReq+0x2d8>
 80120de:	7bbb      	ldrb	r3, [r7, #14]
 80120e0:	2b80      	cmp	r3, #128	@ 0x80
 80120e2:	d103      	bne.n	80120ec <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80120e4:	68bb      	ldr	r3, [r7, #8]
 80120e6:	2200      	movs	r2, #0
 80120e8:	601a      	str	r2, [r3, #0]
 80120ea:	e00e      	b.n	801210a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80120ec:	7bbb      	ldrb	r3, [r7, #14]
 80120ee:	4619      	mov	r1, r3
 80120f0:	6878      	ldr	r0, [r7, #4]
 80120f2:	f001 f931 	bl	8013358 <USBD_LL_IsStallEP>
 80120f6:	4603      	mov	r3, r0
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d003      	beq.n	8012104 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80120fc:	68bb      	ldr	r3, [r7, #8]
 80120fe:	2201      	movs	r2, #1
 8012100:	601a      	str	r2, [r3, #0]
 8012102:	e002      	b.n	801210a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8012104:	68bb      	ldr	r3, [r7, #8]
 8012106:	2200      	movs	r2, #0
 8012108:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801210a:	68bb      	ldr	r3, [r7, #8]
 801210c:	2202      	movs	r2, #2
 801210e:	4619      	mov	r1, r3
 8012110:	6878      	ldr	r0, [r7, #4]
 8012112:	f000 fc07 	bl	8012924 <USBD_CtlSendData>
              break;
 8012116:	e004      	b.n	8012122 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8012118:	6839      	ldr	r1, [r7, #0]
 801211a:	6878      	ldr	r0, [r7, #4]
 801211c:	f000 fb85 	bl	801282a <USBD_CtlError>
              break;
 8012120:	bf00      	nop
          }
          break;
 8012122:	e004      	b.n	801212e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8012124:	6839      	ldr	r1, [r7, #0]
 8012126:	6878      	ldr	r0, [r7, #4]
 8012128:	f000 fb7f 	bl	801282a <USBD_CtlError>
          break;
 801212c:	bf00      	nop
      }
      break;
 801212e:	e005      	b.n	801213c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8012130:	6839      	ldr	r1, [r7, #0]
 8012132:	6878      	ldr	r0, [r7, #4]
 8012134:	f000 fb79 	bl	801282a <USBD_CtlError>
      break;
 8012138:	e000      	b.n	801213c <USBD_StdEPReq+0x330>
      break;
 801213a:	bf00      	nop
  }

  return ret;
 801213c:	7bfb      	ldrb	r3, [r7, #15]
}
 801213e:	4618      	mov	r0, r3
 8012140:	3710      	adds	r7, #16
 8012142:	46bd      	mov	sp, r7
 8012144:	bd80      	pop	{r7, pc}
	...

08012148 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012148:	b580      	push	{r7, lr}
 801214a:	b084      	sub	sp, #16
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]
 8012150:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012152:	2300      	movs	r3, #0
 8012154:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8012156:	2300      	movs	r3, #0
 8012158:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801215a:	2300      	movs	r3, #0
 801215c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801215e:	683b      	ldr	r3, [r7, #0]
 8012160:	885b      	ldrh	r3, [r3, #2]
 8012162:	0a1b      	lsrs	r3, r3, #8
 8012164:	b29b      	uxth	r3, r3
 8012166:	3b01      	subs	r3, #1
 8012168:	2b0e      	cmp	r3, #14
 801216a:	f200 8152 	bhi.w	8012412 <USBD_GetDescriptor+0x2ca>
 801216e:	a201      	add	r2, pc, #4	@ (adr r2, 8012174 <USBD_GetDescriptor+0x2c>)
 8012170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012174:	080121e5 	.word	0x080121e5
 8012178:	080121fd 	.word	0x080121fd
 801217c:	0801223d 	.word	0x0801223d
 8012180:	08012413 	.word	0x08012413
 8012184:	08012413 	.word	0x08012413
 8012188:	080123b3 	.word	0x080123b3
 801218c:	080123df 	.word	0x080123df
 8012190:	08012413 	.word	0x08012413
 8012194:	08012413 	.word	0x08012413
 8012198:	08012413 	.word	0x08012413
 801219c:	08012413 	.word	0x08012413
 80121a0:	08012413 	.word	0x08012413
 80121a4:	08012413 	.word	0x08012413
 80121a8:	08012413 	.word	0x08012413
 80121ac:	080121b1 	.word	0x080121b1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80121b6:	69db      	ldr	r3, [r3, #28]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d00b      	beq.n	80121d4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80121c2:	69db      	ldr	r3, [r3, #28]
 80121c4:	687a      	ldr	r2, [r7, #4]
 80121c6:	7c12      	ldrb	r2, [r2, #16]
 80121c8:	f107 0108 	add.w	r1, r7, #8
 80121cc:	4610      	mov	r0, r2
 80121ce:	4798      	blx	r3
 80121d0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80121d2:	e126      	b.n	8012422 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80121d4:	6839      	ldr	r1, [r7, #0]
 80121d6:	6878      	ldr	r0, [r7, #4]
 80121d8:	f000 fb27 	bl	801282a <USBD_CtlError>
        err++;
 80121dc:	7afb      	ldrb	r3, [r7, #11]
 80121de:	3301      	adds	r3, #1
 80121e0:	72fb      	strb	r3, [r7, #11]
      break;
 80121e2:	e11e      	b.n	8012422 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	687a      	ldr	r2, [r7, #4]
 80121ee:	7c12      	ldrb	r2, [r2, #16]
 80121f0:	f107 0108 	add.w	r1, r7, #8
 80121f4:	4610      	mov	r0, r2
 80121f6:	4798      	blx	r3
 80121f8:	60f8      	str	r0, [r7, #12]
      break;
 80121fa:	e112      	b.n	8012422 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	7c1b      	ldrb	r3, [r3, #16]
 8012200:	2b00      	cmp	r3, #0
 8012202:	d10d      	bne.n	8012220 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801220a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801220c:	f107 0208 	add.w	r2, r7, #8
 8012210:	4610      	mov	r0, r2
 8012212:	4798      	blx	r3
 8012214:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	3301      	adds	r3, #1
 801221a:	2202      	movs	r2, #2
 801221c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801221e:	e100      	b.n	8012422 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012228:	f107 0208 	add.w	r2, r7, #8
 801222c:	4610      	mov	r0, r2
 801222e:	4798      	blx	r3
 8012230:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012232:	68fb      	ldr	r3, [r7, #12]
 8012234:	3301      	adds	r3, #1
 8012236:	2202      	movs	r2, #2
 8012238:	701a      	strb	r2, [r3, #0]
      break;
 801223a:	e0f2      	b.n	8012422 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801223c:	683b      	ldr	r3, [r7, #0]
 801223e:	885b      	ldrh	r3, [r3, #2]
 8012240:	b2db      	uxtb	r3, r3
 8012242:	2b05      	cmp	r3, #5
 8012244:	f200 80ac 	bhi.w	80123a0 <USBD_GetDescriptor+0x258>
 8012248:	a201      	add	r2, pc, #4	@ (adr r2, 8012250 <USBD_GetDescriptor+0x108>)
 801224a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801224e:	bf00      	nop
 8012250:	08012269 	.word	0x08012269
 8012254:	0801229d 	.word	0x0801229d
 8012258:	080122d1 	.word	0x080122d1
 801225c:	08012305 	.word	0x08012305
 8012260:	08012339 	.word	0x08012339
 8012264:	0801236d 	.word	0x0801236d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801226e:	685b      	ldr	r3, [r3, #4]
 8012270:	2b00      	cmp	r3, #0
 8012272:	d00b      	beq.n	801228c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801227a:	685b      	ldr	r3, [r3, #4]
 801227c:	687a      	ldr	r2, [r7, #4]
 801227e:	7c12      	ldrb	r2, [r2, #16]
 8012280:	f107 0108 	add.w	r1, r7, #8
 8012284:	4610      	mov	r0, r2
 8012286:	4798      	blx	r3
 8012288:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801228a:	e091      	b.n	80123b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801228c:	6839      	ldr	r1, [r7, #0]
 801228e:	6878      	ldr	r0, [r7, #4]
 8012290:	f000 facb 	bl	801282a <USBD_CtlError>
            err++;
 8012294:	7afb      	ldrb	r3, [r7, #11]
 8012296:	3301      	adds	r3, #1
 8012298:	72fb      	strb	r3, [r7, #11]
          break;
 801229a:	e089      	b.n	80123b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80122a2:	689b      	ldr	r3, [r3, #8]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d00b      	beq.n	80122c0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80122ae:	689b      	ldr	r3, [r3, #8]
 80122b0:	687a      	ldr	r2, [r7, #4]
 80122b2:	7c12      	ldrb	r2, [r2, #16]
 80122b4:	f107 0108 	add.w	r1, r7, #8
 80122b8:	4610      	mov	r0, r2
 80122ba:	4798      	blx	r3
 80122bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80122be:	e077      	b.n	80123b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80122c0:	6839      	ldr	r1, [r7, #0]
 80122c2:	6878      	ldr	r0, [r7, #4]
 80122c4:	f000 fab1 	bl	801282a <USBD_CtlError>
            err++;
 80122c8:	7afb      	ldrb	r3, [r7, #11]
 80122ca:	3301      	adds	r3, #1
 80122cc:	72fb      	strb	r3, [r7, #11]
          break;
 80122ce:	e06f      	b.n	80123b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80122d6:	68db      	ldr	r3, [r3, #12]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	d00b      	beq.n	80122f4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80122e2:	68db      	ldr	r3, [r3, #12]
 80122e4:	687a      	ldr	r2, [r7, #4]
 80122e6:	7c12      	ldrb	r2, [r2, #16]
 80122e8:	f107 0108 	add.w	r1, r7, #8
 80122ec:	4610      	mov	r0, r2
 80122ee:	4798      	blx	r3
 80122f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80122f2:	e05d      	b.n	80123b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80122f4:	6839      	ldr	r1, [r7, #0]
 80122f6:	6878      	ldr	r0, [r7, #4]
 80122f8:	f000 fa97 	bl	801282a <USBD_CtlError>
            err++;
 80122fc:	7afb      	ldrb	r3, [r7, #11]
 80122fe:	3301      	adds	r3, #1
 8012300:	72fb      	strb	r3, [r7, #11]
          break;
 8012302:	e055      	b.n	80123b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801230a:	691b      	ldr	r3, [r3, #16]
 801230c:	2b00      	cmp	r3, #0
 801230e:	d00b      	beq.n	8012328 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012316:	691b      	ldr	r3, [r3, #16]
 8012318:	687a      	ldr	r2, [r7, #4]
 801231a:	7c12      	ldrb	r2, [r2, #16]
 801231c:	f107 0108 	add.w	r1, r7, #8
 8012320:	4610      	mov	r0, r2
 8012322:	4798      	blx	r3
 8012324:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012326:	e043      	b.n	80123b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012328:	6839      	ldr	r1, [r7, #0]
 801232a:	6878      	ldr	r0, [r7, #4]
 801232c:	f000 fa7d 	bl	801282a <USBD_CtlError>
            err++;
 8012330:	7afb      	ldrb	r3, [r7, #11]
 8012332:	3301      	adds	r3, #1
 8012334:	72fb      	strb	r3, [r7, #11]
          break;
 8012336:	e03b      	b.n	80123b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801233e:	695b      	ldr	r3, [r3, #20]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d00b      	beq.n	801235c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801234a:	695b      	ldr	r3, [r3, #20]
 801234c:	687a      	ldr	r2, [r7, #4]
 801234e:	7c12      	ldrb	r2, [r2, #16]
 8012350:	f107 0108 	add.w	r1, r7, #8
 8012354:	4610      	mov	r0, r2
 8012356:	4798      	blx	r3
 8012358:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801235a:	e029      	b.n	80123b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801235c:	6839      	ldr	r1, [r7, #0]
 801235e:	6878      	ldr	r0, [r7, #4]
 8012360:	f000 fa63 	bl	801282a <USBD_CtlError>
            err++;
 8012364:	7afb      	ldrb	r3, [r7, #11]
 8012366:	3301      	adds	r3, #1
 8012368:	72fb      	strb	r3, [r7, #11]
          break;
 801236a:	e021      	b.n	80123b0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8012372:	699b      	ldr	r3, [r3, #24]
 8012374:	2b00      	cmp	r3, #0
 8012376:	d00b      	beq.n	8012390 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801237e:	699b      	ldr	r3, [r3, #24]
 8012380:	687a      	ldr	r2, [r7, #4]
 8012382:	7c12      	ldrb	r2, [r2, #16]
 8012384:	f107 0108 	add.w	r1, r7, #8
 8012388:	4610      	mov	r0, r2
 801238a:	4798      	blx	r3
 801238c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801238e:	e00f      	b.n	80123b0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8012390:	6839      	ldr	r1, [r7, #0]
 8012392:	6878      	ldr	r0, [r7, #4]
 8012394:	f000 fa49 	bl	801282a <USBD_CtlError>
            err++;
 8012398:	7afb      	ldrb	r3, [r7, #11]
 801239a:	3301      	adds	r3, #1
 801239c:	72fb      	strb	r3, [r7, #11]
          break;
 801239e:	e007      	b.n	80123b0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80123a0:	6839      	ldr	r1, [r7, #0]
 80123a2:	6878      	ldr	r0, [r7, #4]
 80123a4:	f000 fa41 	bl	801282a <USBD_CtlError>
          err++;
 80123a8:	7afb      	ldrb	r3, [r7, #11]
 80123aa:	3301      	adds	r3, #1
 80123ac:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80123ae:	bf00      	nop
      }
      break;
 80123b0:	e037      	b.n	8012422 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	7c1b      	ldrb	r3, [r3, #16]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d109      	bne.n	80123ce <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80123ba:	687b      	ldr	r3, [r7, #4]
 80123bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80123c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80123c2:	f107 0208 	add.w	r2, r7, #8
 80123c6:	4610      	mov	r0, r2
 80123c8:	4798      	blx	r3
 80123ca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80123cc:	e029      	b.n	8012422 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80123ce:	6839      	ldr	r1, [r7, #0]
 80123d0:	6878      	ldr	r0, [r7, #4]
 80123d2:	f000 fa2a 	bl	801282a <USBD_CtlError>
        err++;
 80123d6:	7afb      	ldrb	r3, [r7, #11]
 80123d8:	3301      	adds	r3, #1
 80123da:	72fb      	strb	r3, [r7, #11]
      break;
 80123dc:	e021      	b.n	8012422 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	7c1b      	ldrb	r3, [r3, #16]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d10d      	bne.n	8012402 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80123e6:	687b      	ldr	r3, [r7, #4]
 80123e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80123ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80123ee:	f107 0208 	add.w	r2, r7, #8
 80123f2:	4610      	mov	r0, r2
 80123f4:	4798      	blx	r3
 80123f6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	3301      	adds	r3, #1
 80123fc:	2207      	movs	r2, #7
 80123fe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012400:	e00f      	b.n	8012422 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8012402:	6839      	ldr	r1, [r7, #0]
 8012404:	6878      	ldr	r0, [r7, #4]
 8012406:	f000 fa10 	bl	801282a <USBD_CtlError>
        err++;
 801240a:	7afb      	ldrb	r3, [r7, #11]
 801240c:	3301      	adds	r3, #1
 801240e:	72fb      	strb	r3, [r7, #11]
      break;
 8012410:	e007      	b.n	8012422 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8012412:	6839      	ldr	r1, [r7, #0]
 8012414:	6878      	ldr	r0, [r7, #4]
 8012416:	f000 fa08 	bl	801282a <USBD_CtlError>
      err++;
 801241a:	7afb      	ldrb	r3, [r7, #11]
 801241c:	3301      	adds	r3, #1
 801241e:	72fb      	strb	r3, [r7, #11]
      break;
 8012420:	bf00      	nop
  }

  if (err != 0U)
 8012422:	7afb      	ldrb	r3, [r7, #11]
 8012424:	2b00      	cmp	r3, #0
 8012426:	d11e      	bne.n	8012466 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8012428:	683b      	ldr	r3, [r7, #0]
 801242a:	88db      	ldrh	r3, [r3, #6]
 801242c:	2b00      	cmp	r3, #0
 801242e:	d016      	beq.n	801245e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8012430:	893b      	ldrh	r3, [r7, #8]
 8012432:	2b00      	cmp	r3, #0
 8012434:	d00e      	beq.n	8012454 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8012436:	683b      	ldr	r3, [r7, #0]
 8012438:	88da      	ldrh	r2, [r3, #6]
 801243a:	893b      	ldrh	r3, [r7, #8]
 801243c:	4293      	cmp	r3, r2
 801243e:	bf28      	it	cs
 8012440:	4613      	movcs	r3, r2
 8012442:	b29b      	uxth	r3, r3
 8012444:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8012446:	893b      	ldrh	r3, [r7, #8]
 8012448:	461a      	mov	r2, r3
 801244a:	68f9      	ldr	r1, [r7, #12]
 801244c:	6878      	ldr	r0, [r7, #4]
 801244e:	f000 fa69 	bl	8012924 <USBD_CtlSendData>
 8012452:	e009      	b.n	8012468 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012454:	6839      	ldr	r1, [r7, #0]
 8012456:	6878      	ldr	r0, [r7, #4]
 8012458:	f000 f9e7 	bl	801282a <USBD_CtlError>
 801245c:	e004      	b.n	8012468 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801245e:	6878      	ldr	r0, [r7, #4]
 8012460:	f000 faba 	bl	80129d8 <USBD_CtlSendStatus>
 8012464:	e000      	b.n	8012468 <USBD_GetDescriptor+0x320>
    return;
 8012466:	bf00      	nop
  }
}
 8012468:	3710      	adds	r7, #16
 801246a:	46bd      	mov	sp, r7
 801246c:	bd80      	pop	{r7, pc}
 801246e:	bf00      	nop

08012470 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012470:	b580      	push	{r7, lr}
 8012472:	b084      	sub	sp, #16
 8012474:	af00      	add	r7, sp, #0
 8012476:	6078      	str	r0, [r7, #4]
 8012478:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801247a:	683b      	ldr	r3, [r7, #0]
 801247c:	889b      	ldrh	r3, [r3, #4]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d131      	bne.n	80124e6 <USBD_SetAddress+0x76>
 8012482:	683b      	ldr	r3, [r7, #0]
 8012484:	88db      	ldrh	r3, [r3, #6]
 8012486:	2b00      	cmp	r3, #0
 8012488:	d12d      	bne.n	80124e6 <USBD_SetAddress+0x76>
 801248a:	683b      	ldr	r3, [r7, #0]
 801248c:	885b      	ldrh	r3, [r3, #2]
 801248e:	2b7f      	cmp	r3, #127	@ 0x7f
 8012490:	d829      	bhi.n	80124e6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012492:	683b      	ldr	r3, [r7, #0]
 8012494:	885b      	ldrh	r3, [r3, #2]
 8012496:	b2db      	uxtb	r3, r3
 8012498:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801249c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80124a4:	b2db      	uxtb	r3, r3
 80124a6:	2b03      	cmp	r3, #3
 80124a8:	d104      	bne.n	80124b4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80124aa:	6839      	ldr	r1, [r7, #0]
 80124ac:	6878      	ldr	r0, [r7, #4]
 80124ae:	f000 f9bc 	bl	801282a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80124b2:	e01d      	b.n	80124f0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	7bfa      	ldrb	r2, [r7, #15]
 80124b8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80124bc:	7bfb      	ldrb	r3, [r7, #15]
 80124be:	4619      	mov	r1, r3
 80124c0:	6878      	ldr	r0, [r7, #4]
 80124c2:	f000 ff75 	bl	80133b0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80124c6:	6878      	ldr	r0, [r7, #4]
 80124c8:	f000 fa86 	bl	80129d8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80124cc:	7bfb      	ldrb	r3, [r7, #15]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d004      	beq.n	80124dc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	2202      	movs	r2, #2
 80124d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80124da:	e009      	b.n	80124f0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	2201      	movs	r2, #1
 80124e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80124e4:	e004      	b.n	80124f0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80124e6:	6839      	ldr	r1, [r7, #0]
 80124e8:	6878      	ldr	r0, [r7, #4]
 80124ea:	f000 f99e 	bl	801282a <USBD_CtlError>
  }
}
 80124ee:	bf00      	nop
 80124f0:	bf00      	nop
 80124f2:	3710      	adds	r7, #16
 80124f4:	46bd      	mov	sp, r7
 80124f6:	bd80      	pop	{r7, pc}

080124f8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80124f8:	b580      	push	{r7, lr}
 80124fa:	b084      	sub	sp, #16
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	6078      	str	r0, [r7, #4]
 8012500:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012502:	2300      	movs	r3, #0
 8012504:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012506:	683b      	ldr	r3, [r7, #0]
 8012508:	885b      	ldrh	r3, [r3, #2]
 801250a:	b2da      	uxtb	r2, r3
 801250c:	4b4e      	ldr	r3, [pc, #312]	@ (8012648 <USBD_SetConfig+0x150>)
 801250e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012510:	4b4d      	ldr	r3, [pc, #308]	@ (8012648 <USBD_SetConfig+0x150>)
 8012512:	781b      	ldrb	r3, [r3, #0]
 8012514:	2b01      	cmp	r3, #1
 8012516:	d905      	bls.n	8012524 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012518:	6839      	ldr	r1, [r7, #0]
 801251a:	6878      	ldr	r0, [r7, #4]
 801251c:	f000 f985 	bl	801282a <USBD_CtlError>
    return USBD_FAIL;
 8012520:	2303      	movs	r3, #3
 8012522:	e08c      	b.n	801263e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801252a:	b2db      	uxtb	r3, r3
 801252c:	2b02      	cmp	r3, #2
 801252e:	d002      	beq.n	8012536 <USBD_SetConfig+0x3e>
 8012530:	2b03      	cmp	r3, #3
 8012532:	d029      	beq.n	8012588 <USBD_SetConfig+0x90>
 8012534:	e075      	b.n	8012622 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8012536:	4b44      	ldr	r3, [pc, #272]	@ (8012648 <USBD_SetConfig+0x150>)
 8012538:	781b      	ldrb	r3, [r3, #0]
 801253a:	2b00      	cmp	r3, #0
 801253c:	d020      	beq.n	8012580 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801253e:	4b42      	ldr	r3, [pc, #264]	@ (8012648 <USBD_SetConfig+0x150>)
 8012540:	781b      	ldrb	r3, [r3, #0]
 8012542:	461a      	mov	r2, r3
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012548:	4b3f      	ldr	r3, [pc, #252]	@ (8012648 <USBD_SetConfig+0x150>)
 801254a:	781b      	ldrb	r3, [r3, #0]
 801254c:	4619      	mov	r1, r3
 801254e:	6878      	ldr	r0, [r7, #4]
 8012550:	f7fe ffb9 	bl	80114c6 <USBD_SetClassConfig>
 8012554:	4603      	mov	r3, r0
 8012556:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8012558:	7bfb      	ldrb	r3, [r7, #15]
 801255a:	2b00      	cmp	r3, #0
 801255c:	d008      	beq.n	8012570 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801255e:	6839      	ldr	r1, [r7, #0]
 8012560:	6878      	ldr	r0, [r7, #4]
 8012562:	f000 f962 	bl	801282a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	2202      	movs	r2, #2
 801256a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801256e:	e065      	b.n	801263c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012570:	6878      	ldr	r0, [r7, #4]
 8012572:	f000 fa31 	bl	80129d8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	2203      	movs	r2, #3
 801257a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801257e:	e05d      	b.n	801263c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012580:	6878      	ldr	r0, [r7, #4]
 8012582:	f000 fa29 	bl	80129d8 <USBD_CtlSendStatus>
      break;
 8012586:	e059      	b.n	801263c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012588:	4b2f      	ldr	r3, [pc, #188]	@ (8012648 <USBD_SetConfig+0x150>)
 801258a:	781b      	ldrb	r3, [r3, #0]
 801258c:	2b00      	cmp	r3, #0
 801258e:	d112      	bne.n	80125b6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	2202      	movs	r2, #2
 8012594:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8012598:	4b2b      	ldr	r3, [pc, #172]	@ (8012648 <USBD_SetConfig+0x150>)
 801259a:	781b      	ldrb	r3, [r3, #0]
 801259c:	461a      	mov	r2, r3
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80125a2:	4b29      	ldr	r3, [pc, #164]	@ (8012648 <USBD_SetConfig+0x150>)
 80125a4:	781b      	ldrb	r3, [r3, #0]
 80125a6:	4619      	mov	r1, r3
 80125a8:	6878      	ldr	r0, [r7, #4]
 80125aa:	f7fe ffa8 	bl	80114fe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80125ae:	6878      	ldr	r0, [r7, #4]
 80125b0:	f000 fa12 	bl	80129d8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80125b4:	e042      	b.n	801263c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80125b6:	4b24      	ldr	r3, [pc, #144]	@ (8012648 <USBD_SetConfig+0x150>)
 80125b8:	781b      	ldrb	r3, [r3, #0]
 80125ba:	461a      	mov	r2, r3
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	685b      	ldr	r3, [r3, #4]
 80125c0:	429a      	cmp	r2, r3
 80125c2:	d02a      	beq.n	801261a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	685b      	ldr	r3, [r3, #4]
 80125c8:	b2db      	uxtb	r3, r3
 80125ca:	4619      	mov	r1, r3
 80125cc:	6878      	ldr	r0, [r7, #4]
 80125ce:	f7fe ff96 	bl	80114fe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80125d2:	4b1d      	ldr	r3, [pc, #116]	@ (8012648 <USBD_SetConfig+0x150>)
 80125d4:	781b      	ldrb	r3, [r3, #0]
 80125d6:	461a      	mov	r2, r3
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80125dc:	4b1a      	ldr	r3, [pc, #104]	@ (8012648 <USBD_SetConfig+0x150>)
 80125de:	781b      	ldrb	r3, [r3, #0]
 80125e0:	4619      	mov	r1, r3
 80125e2:	6878      	ldr	r0, [r7, #4]
 80125e4:	f7fe ff6f 	bl	80114c6 <USBD_SetClassConfig>
 80125e8:	4603      	mov	r3, r0
 80125ea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80125ec:	7bfb      	ldrb	r3, [r7, #15]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d00f      	beq.n	8012612 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80125f2:	6839      	ldr	r1, [r7, #0]
 80125f4:	6878      	ldr	r0, [r7, #4]
 80125f6:	f000 f918 	bl	801282a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	685b      	ldr	r3, [r3, #4]
 80125fe:	b2db      	uxtb	r3, r3
 8012600:	4619      	mov	r1, r3
 8012602:	6878      	ldr	r0, [r7, #4]
 8012604:	f7fe ff7b 	bl	80114fe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	2202      	movs	r2, #2
 801260c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8012610:	e014      	b.n	801263c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012612:	6878      	ldr	r0, [r7, #4]
 8012614:	f000 f9e0 	bl	80129d8 <USBD_CtlSendStatus>
      break;
 8012618:	e010      	b.n	801263c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801261a:	6878      	ldr	r0, [r7, #4]
 801261c:	f000 f9dc 	bl	80129d8 <USBD_CtlSendStatus>
      break;
 8012620:	e00c      	b.n	801263c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8012622:	6839      	ldr	r1, [r7, #0]
 8012624:	6878      	ldr	r0, [r7, #4]
 8012626:	f000 f900 	bl	801282a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801262a:	4b07      	ldr	r3, [pc, #28]	@ (8012648 <USBD_SetConfig+0x150>)
 801262c:	781b      	ldrb	r3, [r3, #0]
 801262e:	4619      	mov	r1, r3
 8012630:	6878      	ldr	r0, [r7, #4]
 8012632:	f7fe ff64 	bl	80114fe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8012636:	2303      	movs	r3, #3
 8012638:	73fb      	strb	r3, [r7, #15]
      break;
 801263a:	bf00      	nop
  }

  return ret;
 801263c:	7bfb      	ldrb	r3, [r7, #15]
}
 801263e:	4618      	mov	r0, r3
 8012640:	3710      	adds	r7, #16
 8012642:	46bd      	mov	sp, r7
 8012644:	bd80      	pop	{r7, pc}
 8012646:	bf00      	nop
 8012648:	240004d0 	.word	0x240004d0

0801264c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801264c:	b580      	push	{r7, lr}
 801264e:	b082      	sub	sp, #8
 8012650:	af00      	add	r7, sp, #0
 8012652:	6078      	str	r0, [r7, #4]
 8012654:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012656:	683b      	ldr	r3, [r7, #0]
 8012658:	88db      	ldrh	r3, [r3, #6]
 801265a:	2b01      	cmp	r3, #1
 801265c:	d004      	beq.n	8012668 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801265e:	6839      	ldr	r1, [r7, #0]
 8012660:	6878      	ldr	r0, [r7, #4]
 8012662:	f000 f8e2 	bl	801282a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8012666:	e023      	b.n	80126b0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801266e:	b2db      	uxtb	r3, r3
 8012670:	2b02      	cmp	r3, #2
 8012672:	dc02      	bgt.n	801267a <USBD_GetConfig+0x2e>
 8012674:	2b00      	cmp	r3, #0
 8012676:	dc03      	bgt.n	8012680 <USBD_GetConfig+0x34>
 8012678:	e015      	b.n	80126a6 <USBD_GetConfig+0x5a>
 801267a:	2b03      	cmp	r3, #3
 801267c:	d00b      	beq.n	8012696 <USBD_GetConfig+0x4a>
 801267e:	e012      	b.n	80126a6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	2200      	movs	r2, #0
 8012684:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	3308      	adds	r3, #8
 801268a:	2201      	movs	r2, #1
 801268c:	4619      	mov	r1, r3
 801268e:	6878      	ldr	r0, [r7, #4]
 8012690:	f000 f948 	bl	8012924 <USBD_CtlSendData>
        break;
 8012694:	e00c      	b.n	80126b0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	3304      	adds	r3, #4
 801269a:	2201      	movs	r2, #1
 801269c:	4619      	mov	r1, r3
 801269e:	6878      	ldr	r0, [r7, #4]
 80126a0:	f000 f940 	bl	8012924 <USBD_CtlSendData>
        break;
 80126a4:	e004      	b.n	80126b0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80126a6:	6839      	ldr	r1, [r7, #0]
 80126a8:	6878      	ldr	r0, [r7, #4]
 80126aa:	f000 f8be 	bl	801282a <USBD_CtlError>
        break;
 80126ae:	bf00      	nop
}
 80126b0:	bf00      	nop
 80126b2:	3708      	adds	r7, #8
 80126b4:	46bd      	mov	sp, r7
 80126b6:	bd80      	pop	{r7, pc}

080126b8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b082      	sub	sp, #8
 80126bc:	af00      	add	r7, sp, #0
 80126be:	6078      	str	r0, [r7, #4]
 80126c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80126c2:	687b      	ldr	r3, [r7, #4]
 80126c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80126c8:	b2db      	uxtb	r3, r3
 80126ca:	3b01      	subs	r3, #1
 80126cc:	2b02      	cmp	r3, #2
 80126ce:	d81e      	bhi.n	801270e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80126d0:	683b      	ldr	r3, [r7, #0]
 80126d2:	88db      	ldrh	r3, [r3, #6]
 80126d4:	2b02      	cmp	r3, #2
 80126d6:	d004      	beq.n	80126e2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80126d8:	6839      	ldr	r1, [r7, #0]
 80126da:	6878      	ldr	r0, [r7, #4]
 80126dc:	f000 f8a5 	bl	801282a <USBD_CtlError>
        break;
 80126e0:	e01a      	b.n	8012718 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	2201      	movs	r2, #1
 80126e6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d005      	beq.n	80126fe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	68db      	ldr	r3, [r3, #12]
 80126f6:	f043 0202 	orr.w	r2, r3, #2
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	330c      	adds	r3, #12
 8012702:	2202      	movs	r2, #2
 8012704:	4619      	mov	r1, r3
 8012706:	6878      	ldr	r0, [r7, #4]
 8012708:	f000 f90c 	bl	8012924 <USBD_CtlSendData>
      break;
 801270c:	e004      	b.n	8012718 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801270e:	6839      	ldr	r1, [r7, #0]
 8012710:	6878      	ldr	r0, [r7, #4]
 8012712:	f000 f88a 	bl	801282a <USBD_CtlError>
      break;
 8012716:	bf00      	nop
  }
}
 8012718:	bf00      	nop
 801271a:	3708      	adds	r7, #8
 801271c:	46bd      	mov	sp, r7
 801271e:	bd80      	pop	{r7, pc}

08012720 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012720:	b580      	push	{r7, lr}
 8012722:	b082      	sub	sp, #8
 8012724:	af00      	add	r7, sp, #0
 8012726:	6078      	str	r0, [r7, #4]
 8012728:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801272a:	683b      	ldr	r3, [r7, #0]
 801272c:	885b      	ldrh	r3, [r3, #2]
 801272e:	2b01      	cmp	r3, #1
 8012730:	d107      	bne.n	8012742 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	2201      	movs	r2, #1
 8012736:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801273a:	6878      	ldr	r0, [r7, #4]
 801273c:	f000 f94c 	bl	80129d8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8012740:	e013      	b.n	801276a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8012742:	683b      	ldr	r3, [r7, #0]
 8012744:	885b      	ldrh	r3, [r3, #2]
 8012746:	2b02      	cmp	r3, #2
 8012748:	d10b      	bne.n	8012762 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801274a:	683b      	ldr	r3, [r7, #0]
 801274c:	889b      	ldrh	r3, [r3, #4]
 801274e:	0a1b      	lsrs	r3, r3, #8
 8012750:	b29b      	uxth	r3, r3
 8012752:	b2da      	uxtb	r2, r3
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801275a:	6878      	ldr	r0, [r7, #4]
 801275c:	f000 f93c 	bl	80129d8 <USBD_CtlSendStatus>
}
 8012760:	e003      	b.n	801276a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8012762:	6839      	ldr	r1, [r7, #0]
 8012764:	6878      	ldr	r0, [r7, #4]
 8012766:	f000 f860 	bl	801282a <USBD_CtlError>
}
 801276a:	bf00      	nop
 801276c:	3708      	adds	r7, #8
 801276e:	46bd      	mov	sp, r7
 8012770:	bd80      	pop	{r7, pc}

08012772 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012772:	b580      	push	{r7, lr}
 8012774:	b082      	sub	sp, #8
 8012776:	af00      	add	r7, sp, #0
 8012778:	6078      	str	r0, [r7, #4]
 801277a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012782:	b2db      	uxtb	r3, r3
 8012784:	3b01      	subs	r3, #1
 8012786:	2b02      	cmp	r3, #2
 8012788:	d80b      	bhi.n	80127a2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801278a:	683b      	ldr	r3, [r7, #0]
 801278c:	885b      	ldrh	r3, [r3, #2]
 801278e:	2b01      	cmp	r3, #1
 8012790:	d10c      	bne.n	80127ac <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	2200      	movs	r2, #0
 8012796:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801279a:	6878      	ldr	r0, [r7, #4]
 801279c:	f000 f91c 	bl	80129d8 <USBD_CtlSendStatus>
      }
      break;
 80127a0:	e004      	b.n	80127ac <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80127a2:	6839      	ldr	r1, [r7, #0]
 80127a4:	6878      	ldr	r0, [r7, #4]
 80127a6:	f000 f840 	bl	801282a <USBD_CtlError>
      break;
 80127aa:	e000      	b.n	80127ae <USBD_ClrFeature+0x3c>
      break;
 80127ac:	bf00      	nop
  }
}
 80127ae:	bf00      	nop
 80127b0:	3708      	adds	r7, #8
 80127b2:	46bd      	mov	sp, r7
 80127b4:	bd80      	pop	{r7, pc}

080127b6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80127b6:	b580      	push	{r7, lr}
 80127b8:	b084      	sub	sp, #16
 80127ba:	af00      	add	r7, sp, #0
 80127bc:	6078      	str	r0, [r7, #4]
 80127be:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80127c0:	683b      	ldr	r3, [r7, #0]
 80127c2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80127c4:	68fb      	ldr	r3, [r7, #12]
 80127c6:	781a      	ldrb	r2, [r3, #0]
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80127cc:	68fb      	ldr	r3, [r7, #12]
 80127ce:	3301      	adds	r3, #1
 80127d0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	781a      	ldrb	r2, [r3, #0]
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	3301      	adds	r3, #1
 80127de:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80127e0:	68f8      	ldr	r0, [r7, #12]
 80127e2:	f7ff fa16 	bl	8011c12 <SWAPBYTE>
 80127e6:	4603      	mov	r3, r0
 80127e8:	461a      	mov	r2, r3
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	3301      	adds	r3, #1
 80127f2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	3301      	adds	r3, #1
 80127f8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80127fa:	68f8      	ldr	r0, [r7, #12]
 80127fc:	f7ff fa09 	bl	8011c12 <SWAPBYTE>
 8012800:	4603      	mov	r3, r0
 8012802:	461a      	mov	r2, r3
 8012804:	687b      	ldr	r3, [r7, #4]
 8012806:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	3301      	adds	r3, #1
 801280c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801280e:	68fb      	ldr	r3, [r7, #12]
 8012810:	3301      	adds	r3, #1
 8012812:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012814:	68f8      	ldr	r0, [r7, #12]
 8012816:	f7ff f9fc 	bl	8011c12 <SWAPBYTE>
 801281a:	4603      	mov	r3, r0
 801281c:	461a      	mov	r2, r3
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	80da      	strh	r2, [r3, #6]
}
 8012822:	bf00      	nop
 8012824:	3710      	adds	r7, #16
 8012826:	46bd      	mov	sp, r7
 8012828:	bd80      	pop	{r7, pc}

0801282a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801282a:	b580      	push	{r7, lr}
 801282c:	b082      	sub	sp, #8
 801282e:	af00      	add	r7, sp, #0
 8012830:	6078      	str	r0, [r7, #4]
 8012832:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012834:	2180      	movs	r1, #128	@ 0x80
 8012836:	6878      	ldr	r0, [r7, #4]
 8012838:	f000 fd50 	bl	80132dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801283c:	2100      	movs	r1, #0
 801283e:	6878      	ldr	r0, [r7, #4]
 8012840:	f000 fd4c 	bl	80132dc <USBD_LL_StallEP>
}
 8012844:	bf00      	nop
 8012846:	3708      	adds	r7, #8
 8012848:	46bd      	mov	sp, r7
 801284a:	bd80      	pop	{r7, pc}

0801284c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801284c:	b580      	push	{r7, lr}
 801284e:	b086      	sub	sp, #24
 8012850:	af00      	add	r7, sp, #0
 8012852:	60f8      	str	r0, [r7, #12]
 8012854:	60b9      	str	r1, [r7, #8]
 8012856:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012858:	2300      	movs	r3, #0
 801285a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	2b00      	cmp	r3, #0
 8012860:	d042      	beq.n	80128e8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8012866:	6938      	ldr	r0, [r7, #16]
 8012868:	f000 f842 	bl	80128f0 <USBD_GetLen>
 801286c:	4603      	mov	r3, r0
 801286e:	3301      	adds	r3, #1
 8012870:	005b      	lsls	r3, r3, #1
 8012872:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012876:	d808      	bhi.n	801288a <USBD_GetString+0x3e>
 8012878:	6938      	ldr	r0, [r7, #16]
 801287a:	f000 f839 	bl	80128f0 <USBD_GetLen>
 801287e:	4603      	mov	r3, r0
 8012880:	3301      	adds	r3, #1
 8012882:	b29b      	uxth	r3, r3
 8012884:	005b      	lsls	r3, r3, #1
 8012886:	b29a      	uxth	r2, r3
 8012888:	e001      	b.n	801288e <USBD_GetString+0x42>
 801288a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012892:	7dfb      	ldrb	r3, [r7, #23]
 8012894:	68ba      	ldr	r2, [r7, #8]
 8012896:	4413      	add	r3, r2
 8012898:	687a      	ldr	r2, [r7, #4]
 801289a:	7812      	ldrb	r2, [r2, #0]
 801289c:	701a      	strb	r2, [r3, #0]
  idx++;
 801289e:	7dfb      	ldrb	r3, [r7, #23]
 80128a0:	3301      	adds	r3, #1
 80128a2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80128a4:	7dfb      	ldrb	r3, [r7, #23]
 80128a6:	68ba      	ldr	r2, [r7, #8]
 80128a8:	4413      	add	r3, r2
 80128aa:	2203      	movs	r2, #3
 80128ac:	701a      	strb	r2, [r3, #0]
  idx++;
 80128ae:	7dfb      	ldrb	r3, [r7, #23]
 80128b0:	3301      	adds	r3, #1
 80128b2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80128b4:	e013      	b.n	80128de <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80128b6:	7dfb      	ldrb	r3, [r7, #23]
 80128b8:	68ba      	ldr	r2, [r7, #8]
 80128ba:	4413      	add	r3, r2
 80128bc:	693a      	ldr	r2, [r7, #16]
 80128be:	7812      	ldrb	r2, [r2, #0]
 80128c0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80128c2:	693b      	ldr	r3, [r7, #16]
 80128c4:	3301      	adds	r3, #1
 80128c6:	613b      	str	r3, [r7, #16]
    idx++;
 80128c8:	7dfb      	ldrb	r3, [r7, #23]
 80128ca:	3301      	adds	r3, #1
 80128cc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80128ce:	7dfb      	ldrb	r3, [r7, #23]
 80128d0:	68ba      	ldr	r2, [r7, #8]
 80128d2:	4413      	add	r3, r2
 80128d4:	2200      	movs	r2, #0
 80128d6:	701a      	strb	r2, [r3, #0]
    idx++;
 80128d8:	7dfb      	ldrb	r3, [r7, #23]
 80128da:	3301      	adds	r3, #1
 80128dc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80128de:	693b      	ldr	r3, [r7, #16]
 80128e0:	781b      	ldrb	r3, [r3, #0]
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d1e7      	bne.n	80128b6 <USBD_GetString+0x6a>
 80128e6:	e000      	b.n	80128ea <USBD_GetString+0x9e>
    return;
 80128e8:	bf00      	nop
  }
}
 80128ea:	3718      	adds	r7, #24
 80128ec:	46bd      	mov	sp, r7
 80128ee:	bd80      	pop	{r7, pc}

080128f0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80128f0:	b480      	push	{r7}
 80128f2:	b085      	sub	sp, #20
 80128f4:	af00      	add	r7, sp, #0
 80128f6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80128f8:	2300      	movs	r3, #0
 80128fa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012900:	e005      	b.n	801290e <USBD_GetLen+0x1e>
  {
    len++;
 8012902:	7bfb      	ldrb	r3, [r7, #15]
 8012904:	3301      	adds	r3, #1
 8012906:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012908:	68bb      	ldr	r3, [r7, #8]
 801290a:	3301      	adds	r3, #1
 801290c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801290e:	68bb      	ldr	r3, [r7, #8]
 8012910:	781b      	ldrb	r3, [r3, #0]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d1f5      	bne.n	8012902 <USBD_GetLen+0x12>
  }

  return len;
 8012916:	7bfb      	ldrb	r3, [r7, #15]
}
 8012918:	4618      	mov	r0, r3
 801291a:	3714      	adds	r7, #20
 801291c:	46bd      	mov	sp, r7
 801291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012922:	4770      	bx	lr

08012924 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012924:	b580      	push	{r7, lr}
 8012926:	b084      	sub	sp, #16
 8012928:	af00      	add	r7, sp, #0
 801292a:	60f8      	str	r0, [r7, #12]
 801292c:	60b9      	str	r1, [r7, #8]
 801292e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	2202      	movs	r2, #2
 8012934:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	687a      	ldr	r2, [r7, #4]
 801293c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	687a      	ldr	r2, [r7, #4]
 8012942:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	68ba      	ldr	r2, [r7, #8]
 8012948:	2100      	movs	r1, #0
 801294a:	68f8      	ldr	r0, [r7, #12]
 801294c:	f000 fd4f 	bl	80133ee <USBD_LL_Transmit>

  return USBD_OK;
 8012950:	2300      	movs	r3, #0
}
 8012952:	4618      	mov	r0, r3
 8012954:	3710      	adds	r7, #16
 8012956:	46bd      	mov	sp, r7
 8012958:	bd80      	pop	{r7, pc}

0801295a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801295a:	b580      	push	{r7, lr}
 801295c:	b084      	sub	sp, #16
 801295e:	af00      	add	r7, sp, #0
 8012960:	60f8      	str	r0, [r7, #12]
 8012962:	60b9      	str	r1, [r7, #8]
 8012964:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	68ba      	ldr	r2, [r7, #8]
 801296a:	2100      	movs	r1, #0
 801296c:	68f8      	ldr	r0, [r7, #12]
 801296e:	f000 fd3e 	bl	80133ee <USBD_LL_Transmit>

  return USBD_OK;
 8012972:	2300      	movs	r3, #0
}
 8012974:	4618      	mov	r0, r3
 8012976:	3710      	adds	r7, #16
 8012978:	46bd      	mov	sp, r7
 801297a:	bd80      	pop	{r7, pc}

0801297c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801297c:	b580      	push	{r7, lr}
 801297e:	b084      	sub	sp, #16
 8012980:	af00      	add	r7, sp, #0
 8012982:	60f8      	str	r0, [r7, #12]
 8012984:	60b9      	str	r1, [r7, #8]
 8012986:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	2203      	movs	r2, #3
 801298c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	687a      	ldr	r2, [r7, #4]
 8012994:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	687a      	ldr	r2, [r7, #4]
 801299c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	68ba      	ldr	r2, [r7, #8]
 80129a4:	2100      	movs	r1, #0
 80129a6:	68f8      	ldr	r0, [r7, #12]
 80129a8:	f000 fd42 	bl	8013430 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80129ac:	2300      	movs	r3, #0
}
 80129ae:	4618      	mov	r0, r3
 80129b0:	3710      	adds	r7, #16
 80129b2:	46bd      	mov	sp, r7
 80129b4:	bd80      	pop	{r7, pc}

080129b6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80129b6:	b580      	push	{r7, lr}
 80129b8:	b084      	sub	sp, #16
 80129ba:	af00      	add	r7, sp, #0
 80129bc:	60f8      	str	r0, [r7, #12]
 80129be:	60b9      	str	r1, [r7, #8]
 80129c0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	68ba      	ldr	r2, [r7, #8]
 80129c6:	2100      	movs	r1, #0
 80129c8:	68f8      	ldr	r0, [r7, #12]
 80129ca:	f000 fd31 	bl	8013430 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80129ce:	2300      	movs	r3, #0
}
 80129d0:	4618      	mov	r0, r3
 80129d2:	3710      	adds	r7, #16
 80129d4:	46bd      	mov	sp, r7
 80129d6:	bd80      	pop	{r7, pc}

080129d8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80129d8:	b580      	push	{r7, lr}
 80129da:	b082      	sub	sp, #8
 80129dc:	af00      	add	r7, sp, #0
 80129de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	2204      	movs	r2, #4
 80129e4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80129e8:	2300      	movs	r3, #0
 80129ea:	2200      	movs	r2, #0
 80129ec:	2100      	movs	r1, #0
 80129ee:	6878      	ldr	r0, [r7, #4]
 80129f0:	f000 fcfd 	bl	80133ee <USBD_LL_Transmit>

  return USBD_OK;
 80129f4:	2300      	movs	r3, #0
}
 80129f6:	4618      	mov	r0, r3
 80129f8:	3708      	adds	r7, #8
 80129fa:	46bd      	mov	sp, r7
 80129fc:	bd80      	pop	{r7, pc}

080129fe <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80129fe:	b580      	push	{r7, lr}
 8012a00:	b082      	sub	sp, #8
 8012a02:	af00      	add	r7, sp, #0
 8012a04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	2205      	movs	r2, #5
 8012a0a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012a0e:	2300      	movs	r3, #0
 8012a10:	2200      	movs	r2, #0
 8012a12:	2100      	movs	r1, #0
 8012a14:	6878      	ldr	r0, [r7, #4]
 8012a16:	f000 fd0b 	bl	8013430 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012a1a:	2300      	movs	r3, #0
}
 8012a1c:	4618      	mov	r0, r3
 8012a1e:	3708      	adds	r7, #8
 8012a20:	46bd      	mov	sp, r7
 8012a22:	bd80      	pop	{r7, pc}

08012a24 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012a24:	b580      	push	{r7, lr}
 8012a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8012a28:	2201      	movs	r2, #1
 8012a2a:	4913      	ldr	r1, [pc, #76]	@ (8012a78 <MX_USB_DEVICE_Init+0x54>)
 8012a2c:	4813      	ldr	r0, [pc, #76]	@ (8012a7c <MX_USB_DEVICE_Init+0x58>)
 8012a2e:	f7fe fccd 	bl	80113cc <USBD_Init>
 8012a32:	4603      	mov	r3, r0
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d001      	beq.n	8012a3c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8012a38:	f7ee fba4 	bl	8001184 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8012a3c:	4910      	ldr	r1, [pc, #64]	@ (8012a80 <MX_USB_DEVICE_Init+0x5c>)
 8012a3e:	480f      	ldr	r0, [pc, #60]	@ (8012a7c <MX_USB_DEVICE_Init+0x58>)
 8012a40:	f7fe fcf4 	bl	801142c <USBD_RegisterClass>
 8012a44:	4603      	mov	r3, r0
 8012a46:	2b00      	cmp	r3, #0
 8012a48:	d001      	beq.n	8012a4e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8012a4a:	f7ee fb9b 	bl	8001184 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8012a4e:	490d      	ldr	r1, [pc, #52]	@ (8012a84 <MX_USB_DEVICE_Init+0x60>)
 8012a50:	480a      	ldr	r0, [pc, #40]	@ (8012a7c <MX_USB_DEVICE_Init+0x58>)
 8012a52:	f7fe fbeb 	bl	801122c <USBD_CDC_RegisterInterface>
 8012a56:	4603      	mov	r3, r0
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d001      	beq.n	8012a60 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8012a5c:	f7ee fb92 	bl	8001184 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8012a60:	4806      	ldr	r0, [pc, #24]	@ (8012a7c <MX_USB_DEVICE_Init+0x58>)
 8012a62:	f7fe fd19 	bl	8011498 <USBD_Start>
 8012a66:	4603      	mov	r3, r0
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d001      	beq.n	8012a70 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8012a6c:	f7ee fb8a 	bl	8001184 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8012a70:	f7f7 ff1c 	bl	800a8ac <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012a74:	bf00      	nop
 8012a76:	bd80      	pop	{r7, pc}
 8012a78:	240000b4 	.word	0x240000b4
 8012a7c:	240004d4 	.word	0x240004d4
 8012a80:	24000020 	.word	0x24000020
 8012a84:	240000a0 	.word	0x240000a0

08012a88 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8012a88:	b580      	push	{r7, lr}
 8012a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8012a8c:	2200      	movs	r2, #0
 8012a8e:	4905      	ldr	r1, [pc, #20]	@ (8012aa4 <CDC_Init_HS+0x1c>)
 8012a90:	4805      	ldr	r0, [pc, #20]	@ (8012aa8 <CDC_Init_HS+0x20>)
 8012a92:	f7fe fbe5 	bl	8011260 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8012a96:	4905      	ldr	r1, [pc, #20]	@ (8012aac <CDC_Init_HS+0x24>)
 8012a98:	4803      	ldr	r0, [pc, #12]	@ (8012aa8 <CDC_Init_HS+0x20>)
 8012a9a:	f7fe fc03 	bl	80112a4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8012a9e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	bd80      	pop	{r7, pc}
 8012aa4:	24000fb0 	.word	0x24000fb0
 8012aa8:	240004d4 	.word	0x240004d4
 8012aac:	240007b0 	.word	0x240007b0

08012ab0 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8012ab0:	b480      	push	{r7}
 8012ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8012ab4:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8012ab6:	4618      	mov	r0, r3
 8012ab8:	46bd      	mov	sp, r7
 8012aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012abe:	4770      	bx	lr

08012ac0 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8012ac0:	b480      	push	{r7}
 8012ac2:	b083      	sub	sp, #12
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	4603      	mov	r3, r0
 8012ac8:	6039      	str	r1, [r7, #0]
 8012aca:	71fb      	strb	r3, [r7, #7]
 8012acc:	4613      	mov	r3, r2
 8012ace:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8012ad0:	79fb      	ldrb	r3, [r7, #7]
 8012ad2:	2b23      	cmp	r3, #35	@ 0x23
 8012ad4:	d84a      	bhi.n	8012b6c <CDC_Control_HS+0xac>
 8012ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8012adc <CDC_Control_HS+0x1c>)
 8012ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012adc:	08012b6d 	.word	0x08012b6d
 8012ae0:	08012b6d 	.word	0x08012b6d
 8012ae4:	08012b6d 	.word	0x08012b6d
 8012ae8:	08012b6d 	.word	0x08012b6d
 8012aec:	08012b6d 	.word	0x08012b6d
 8012af0:	08012b6d 	.word	0x08012b6d
 8012af4:	08012b6d 	.word	0x08012b6d
 8012af8:	08012b6d 	.word	0x08012b6d
 8012afc:	08012b6d 	.word	0x08012b6d
 8012b00:	08012b6d 	.word	0x08012b6d
 8012b04:	08012b6d 	.word	0x08012b6d
 8012b08:	08012b6d 	.word	0x08012b6d
 8012b0c:	08012b6d 	.word	0x08012b6d
 8012b10:	08012b6d 	.word	0x08012b6d
 8012b14:	08012b6d 	.word	0x08012b6d
 8012b18:	08012b6d 	.word	0x08012b6d
 8012b1c:	08012b6d 	.word	0x08012b6d
 8012b20:	08012b6d 	.word	0x08012b6d
 8012b24:	08012b6d 	.word	0x08012b6d
 8012b28:	08012b6d 	.word	0x08012b6d
 8012b2c:	08012b6d 	.word	0x08012b6d
 8012b30:	08012b6d 	.word	0x08012b6d
 8012b34:	08012b6d 	.word	0x08012b6d
 8012b38:	08012b6d 	.word	0x08012b6d
 8012b3c:	08012b6d 	.word	0x08012b6d
 8012b40:	08012b6d 	.word	0x08012b6d
 8012b44:	08012b6d 	.word	0x08012b6d
 8012b48:	08012b6d 	.word	0x08012b6d
 8012b4c:	08012b6d 	.word	0x08012b6d
 8012b50:	08012b6d 	.word	0x08012b6d
 8012b54:	08012b6d 	.word	0x08012b6d
 8012b58:	08012b6d 	.word	0x08012b6d
 8012b5c:	08012b6d 	.word	0x08012b6d
 8012b60:	08012b6d 	.word	0x08012b6d
 8012b64:	08012b6d 	.word	0x08012b6d
 8012b68:	08012b6d 	.word	0x08012b6d
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8012b6c:	bf00      	nop
  }

  return (USBD_OK);
 8012b6e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8012b70:	4618      	mov	r0, r3
 8012b72:	370c      	adds	r7, #12
 8012b74:	46bd      	mov	sp, r7
 8012b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b7a:	4770      	bx	lr

08012b7c <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8012b7c:	b580      	push	{r7, lr}
 8012b7e:	b082      	sub	sp, #8
 8012b80:	af00      	add	r7, sp, #0
 8012b82:	6078      	str	r0, [r7, #4]
 8012b84:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8012b86:	6879      	ldr	r1, [r7, #4]
 8012b88:	480b      	ldr	r0, [pc, #44]	@ (8012bb8 <CDC_Receive_HS+0x3c>)
 8012b8a:	f7fe fb8b 	bl	80112a4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8012b8e:	480a      	ldr	r0, [pc, #40]	@ (8012bb8 <CDC_Receive_HS+0x3c>)
 8012b90:	f7fe fbe6 	bl	8011360 <USBD_CDC_ReceivePacket>
  USB_CDC_RxHandler(UserRxBufferHS, *Len);
 8012b94:	683b      	ldr	r3, [r7, #0]
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	4619      	mov	r1, r3
 8012b9a:	4808      	ldr	r0, [pc, #32]	@ (8012bbc <CDC_Receive_HS+0x40>)
 8012b9c:	f7ed fe02 	bl	80007a4 <USB_CDC_RxHandler>
  memset(UserRxBufferHS, '\0', *Len);
 8012ba0:	683b      	ldr	r3, [r7, #0]
 8012ba2:	681b      	ldr	r3, [r3, #0]
 8012ba4:	461a      	mov	r2, r3
 8012ba6:	2100      	movs	r1, #0
 8012ba8:	4804      	ldr	r0, [pc, #16]	@ (8012bbc <CDC_Receive_HS+0x40>)
 8012baa:	f000 fcb9 	bl	8013520 <memset>
  return (USBD_OK);
 8012bae:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	3708      	adds	r7, #8
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	bd80      	pop	{r7, pc}
 8012bb8:	240004d4 	.word	0x240004d4
 8012bbc:	240007b0 	.word	0x240007b0

08012bc0 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b084      	sub	sp, #16
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	6078      	str	r0, [r7, #4]
 8012bc8:	460b      	mov	r3, r1
 8012bca:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8012bcc:	2300      	movs	r3, #0
 8012bce:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8012bd0:	4b0d      	ldr	r3, [pc, #52]	@ (8012c08 <CDC_Transmit_HS+0x48>)
 8012bd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8012bd6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8012bd8:	68bb      	ldr	r3, [r7, #8]
 8012bda:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d001      	beq.n	8012be6 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8012be2:	2301      	movs	r3, #1
 8012be4:	e00b      	b.n	8012bfe <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8012be6:	887b      	ldrh	r3, [r7, #2]
 8012be8:	461a      	mov	r2, r3
 8012bea:	6879      	ldr	r1, [r7, #4]
 8012bec:	4806      	ldr	r0, [pc, #24]	@ (8012c08 <CDC_Transmit_HS+0x48>)
 8012bee:	f7fe fb37 	bl	8011260 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8012bf2:	4805      	ldr	r0, [pc, #20]	@ (8012c08 <CDC_Transmit_HS+0x48>)
 8012bf4:	f7fe fb74 	bl	80112e0 <USBD_CDC_TransmitPacket>
 8012bf8:	4603      	mov	r3, r0
 8012bfa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 8012bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8012bfe:	4618      	mov	r0, r3
 8012c00:	3710      	adds	r7, #16
 8012c02:	46bd      	mov	sp, r7
 8012c04:	bd80      	pop	{r7, pc}
 8012c06:	bf00      	nop
 8012c08:	240004d4 	.word	0x240004d4

08012c0c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8012c0c:	b480      	push	{r7}
 8012c0e:	b087      	sub	sp, #28
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	60f8      	str	r0, [r7, #12]
 8012c14:	60b9      	str	r1, [r7, #8]
 8012c16:	4613      	mov	r3, r2
 8012c18:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8012c1a:	2300      	movs	r3, #0
 8012c1c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8012c1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012c22:	4618      	mov	r0, r3
 8012c24:	371c      	adds	r7, #28
 8012c26:	46bd      	mov	sp, r7
 8012c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c2c:	4770      	bx	lr
	...

08012c30 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c30:	b480      	push	{r7}
 8012c32:	b083      	sub	sp, #12
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	4603      	mov	r3, r0
 8012c38:	6039      	str	r1, [r7, #0]
 8012c3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8012c3c:	683b      	ldr	r3, [r7, #0]
 8012c3e:	2212      	movs	r2, #18
 8012c40:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8012c42:	4b03      	ldr	r3, [pc, #12]	@ (8012c50 <USBD_HS_DeviceDescriptor+0x20>)
}
 8012c44:	4618      	mov	r0, r3
 8012c46:	370c      	adds	r7, #12
 8012c48:	46bd      	mov	sp, r7
 8012c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c4e:	4770      	bx	lr
 8012c50:	240000d4 	.word	0x240000d4

08012c54 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c54:	b480      	push	{r7}
 8012c56:	b083      	sub	sp, #12
 8012c58:	af00      	add	r7, sp, #0
 8012c5a:	4603      	mov	r3, r0
 8012c5c:	6039      	str	r1, [r7, #0]
 8012c5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012c60:	683b      	ldr	r3, [r7, #0]
 8012c62:	2204      	movs	r2, #4
 8012c64:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012c66:	4b03      	ldr	r3, [pc, #12]	@ (8012c74 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8012c68:	4618      	mov	r0, r3
 8012c6a:	370c      	adds	r7, #12
 8012c6c:	46bd      	mov	sp, r7
 8012c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c72:	4770      	bx	lr
 8012c74:	240000e8 	.word	0x240000e8

08012c78 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012c78:	b580      	push	{r7, lr}
 8012c7a:	b082      	sub	sp, #8
 8012c7c:	af00      	add	r7, sp, #0
 8012c7e:	4603      	mov	r3, r0
 8012c80:	6039      	str	r1, [r7, #0]
 8012c82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012c84:	79fb      	ldrb	r3, [r7, #7]
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	d105      	bne.n	8012c96 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8012c8a:	683a      	ldr	r2, [r7, #0]
 8012c8c:	4907      	ldr	r1, [pc, #28]	@ (8012cac <USBD_HS_ProductStrDescriptor+0x34>)
 8012c8e:	4808      	ldr	r0, [pc, #32]	@ (8012cb0 <USBD_HS_ProductStrDescriptor+0x38>)
 8012c90:	f7ff fddc 	bl	801284c <USBD_GetString>
 8012c94:	e004      	b.n	8012ca0 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8012c96:	683a      	ldr	r2, [r7, #0]
 8012c98:	4904      	ldr	r1, [pc, #16]	@ (8012cac <USBD_HS_ProductStrDescriptor+0x34>)
 8012c9a:	4805      	ldr	r0, [pc, #20]	@ (8012cb0 <USBD_HS_ProductStrDescriptor+0x38>)
 8012c9c:	f7ff fdd6 	bl	801284c <USBD_GetString>
  }
  return USBD_StrDesc;
 8012ca0:	4b02      	ldr	r3, [pc, #8]	@ (8012cac <USBD_HS_ProductStrDescriptor+0x34>)
}
 8012ca2:	4618      	mov	r0, r3
 8012ca4:	3708      	adds	r7, #8
 8012ca6:	46bd      	mov	sp, r7
 8012ca8:	bd80      	pop	{r7, pc}
 8012caa:	bf00      	nop
 8012cac:	240017b0 	.word	0x240017b0
 8012cb0:	08013abc 	.word	0x08013abc

08012cb4 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012cb4:	b580      	push	{r7, lr}
 8012cb6:	b082      	sub	sp, #8
 8012cb8:	af00      	add	r7, sp, #0
 8012cba:	4603      	mov	r3, r0
 8012cbc:	6039      	str	r1, [r7, #0]
 8012cbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012cc0:	683a      	ldr	r2, [r7, #0]
 8012cc2:	4904      	ldr	r1, [pc, #16]	@ (8012cd4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8012cc4:	4804      	ldr	r0, [pc, #16]	@ (8012cd8 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8012cc6:	f7ff fdc1 	bl	801284c <USBD_GetString>
  return USBD_StrDesc;
 8012cca:	4b02      	ldr	r3, [pc, #8]	@ (8012cd4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8012ccc:	4618      	mov	r0, r3
 8012cce:	3708      	adds	r7, #8
 8012cd0:	46bd      	mov	sp, r7
 8012cd2:	bd80      	pop	{r7, pc}
 8012cd4:	240017b0 	.word	0x240017b0
 8012cd8:	08013ad4 	.word	0x08013ad4

08012cdc <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012cdc:	b580      	push	{r7, lr}
 8012cde:	b082      	sub	sp, #8
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	4603      	mov	r3, r0
 8012ce4:	6039      	str	r1, [r7, #0]
 8012ce6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012ce8:	683b      	ldr	r3, [r7, #0]
 8012cea:	221a      	movs	r2, #26
 8012cec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012cee:	f000 f843 	bl	8012d78 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8012cf2:	4b02      	ldr	r3, [pc, #8]	@ (8012cfc <USBD_HS_SerialStrDescriptor+0x20>)
}
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	3708      	adds	r7, #8
 8012cf8:	46bd      	mov	sp, r7
 8012cfa:	bd80      	pop	{r7, pc}
 8012cfc:	240000ec 	.word	0x240000ec

08012d00 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b082      	sub	sp, #8
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	4603      	mov	r3, r0
 8012d08:	6039      	str	r1, [r7, #0]
 8012d0a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012d0c:	79fb      	ldrb	r3, [r7, #7]
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d105      	bne.n	8012d1e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8012d12:	683a      	ldr	r2, [r7, #0]
 8012d14:	4907      	ldr	r1, [pc, #28]	@ (8012d34 <USBD_HS_ConfigStrDescriptor+0x34>)
 8012d16:	4808      	ldr	r0, [pc, #32]	@ (8012d38 <USBD_HS_ConfigStrDescriptor+0x38>)
 8012d18:	f7ff fd98 	bl	801284c <USBD_GetString>
 8012d1c:	e004      	b.n	8012d28 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8012d1e:	683a      	ldr	r2, [r7, #0]
 8012d20:	4904      	ldr	r1, [pc, #16]	@ (8012d34 <USBD_HS_ConfigStrDescriptor+0x34>)
 8012d22:	4805      	ldr	r0, [pc, #20]	@ (8012d38 <USBD_HS_ConfigStrDescriptor+0x38>)
 8012d24:	f7ff fd92 	bl	801284c <USBD_GetString>
  }
  return USBD_StrDesc;
 8012d28:	4b02      	ldr	r3, [pc, #8]	@ (8012d34 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	3708      	adds	r7, #8
 8012d2e:	46bd      	mov	sp, r7
 8012d30:	bd80      	pop	{r7, pc}
 8012d32:	bf00      	nop
 8012d34:	240017b0 	.word	0x240017b0
 8012d38:	08013ae8 	.word	0x08013ae8

08012d3c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012d3c:	b580      	push	{r7, lr}
 8012d3e:	b082      	sub	sp, #8
 8012d40:	af00      	add	r7, sp, #0
 8012d42:	4603      	mov	r3, r0
 8012d44:	6039      	str	r1, [r7, #0]
 8012d46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012d48:	79fb      	ldrb	r3, [r7, #7]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d105      	bne.n	8012d5a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8012d4e:	683a      	ldr	r2, [r7, #0]
 8012d50:	4907      	ldr	r1, [pc, #28]	@ (8012d70 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8012d52:	4808      	ldr	r0, [pc, #32]	@ (8012d74 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8012d54:	f7ff fd7a 	bl	801284c <USBD_GetString>
 8012d58:	e004      	b.n	8012d64 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8012d5a:	683a      	ldr	r2, [r7, #0]
 8012d5c:	4904      	ldr	r1, [pc, #16]	@ (8012d70 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8012d5e:	4805      	ldr	r0, [pc, #20]	@ (8012d74 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8012d60:	f7ff fd74 	bl	801284c <USBD_GetString>
  }
  return USBD_StrDesc;
 8012d64:	4b02      	ldr	r3, [pc, #8]	@ (8012d70 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8012d66:	4618      	mov	r0, r3
 8012d68:	3708      	adds	r7, #8
 8012d6a:	46bd      	mov	sp, r7
 8012d6c:	bd80      	pop	{r7, pc}
 8012d6e:	bf00      	nop
 8012d70:	240017b0 	.word	0x240017b0
 8012d74:	08013af4 	.word	0x08013af4

08012d78 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012d78:	b580      	push	{r7, lr}
 8012d7a:	b084      	sub	sp, #16
 8012d7c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012d7e:	4b0f      	ldr	r3, [pc, #60]	@ (8012dbc <Get_SerialNum+0x44>)
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012d84:	4b0e      	ldr	r3, [pc, #56]	@ (8012dc0 <Get_SerialNum+0x48>)
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8012dc4 <Get_SerialNum+0x4c>)
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012d90:	68fa      	ldr	r2, [r7, #12]
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	4413      	add	r3, r2
 8012d96:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012d98:	68fb      	ldr	r3, [r7, #12]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d009      	beq.n	8012db2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012d9e:	2208      	movs	r2, #8
 8012da0:	4909      	ldr	r1, [pc, #36]	@ (8012dc8 <Get_SerialNum+0x50>)
 8012da2:	68f8      	ldr	r0, [r7, #12]
 8012da4:	f000 f814 	bl	8012dd0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012da8:	2204      	movs	r2, #4
 8012daa:	4908      	ldr	r1, [pc, #32]	@ (8012dcc <Get_SerialNum+0x54>)
 8012dac:	68b8      	ldr	r0, [r7, #8]
 8012dae:	f000 f80f 	bl	8012dd0 <IntToUnicode>
  }
}
 8012db2:	bf00      	nop
 8012db4:	3710      	adds	r7, #16
 8012db6:	46bd      	mov	sp, r7
 8012db8:	bd80      	pop	{r7, pc}
 8012dba:	bf00      	nop
 8012dbc:	08fff800 	.word	0x08fff800
 8012dc0:	08fff804 	.word	0x08fff804
 8012dc4:	08fff808 	.word	0x08fff808
 8012dc8:	240000ee 	.word	0x240000ee
 8012dcc:	240000fe 	.word	0x240000fe

08012dd0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012dd0:	b480      	push	{r7}
 8012dd2:	b087      	sub	sp, #28
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	60f8      	str	r0, [r7, #12]
 8012dd8:	60b9      	str	r1, [r7, #8]
 8012dda:	4613      	mov	r3, r2
 8012ddc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012dde:	2300      	movs	r3, #0
 8012de0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012de2:	2300      	movs	r3, #0
 8012de4:	75fb      	strb	r3, [r7, #23]
 8012de6:	e027      	b.n	8012e38 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	0f1b      	lsrs	r3, r3, #28
 8012dec:	2b09      	cmp	r3, #9
 8012dee:	d80b      	bhi.n	8012e08 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	0f1b      	lsrs	r3, r3, #28
 8012df4:	b2da      	uxtb	r2, r3
 8012df6:	7dfb      	ldrb	r3, [r7, #23]
 8012df8:	005b      	lsls	r3, r3, #1
 8012dfa:	4619      	mov	r1, r3
 8012dfc:	68bb      	ldr	r3, [r7, #8]
 8012dfe:	440b      	add	r3, r1
 8012e00:	3230      	adds	r2, #48	@ 0x30
 8012e02:	b2d2      	uxtb	r2, r2
 8012e04:	701a      	strb	r2, [r3, #0]
 8012e06:	e00a      	b.n	8012e1e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	0f1b      	lsrs	r3, r3, #28
 8012e0c:	b2da      	uxtb	r2, r3
 8012e0e:	7dfb      	ldrb	r3, [r7, #23]
 8012e10:	005b      	lsls	r3, r3, #1
 8012e12:	4619      	mov	r1, r3
 8012e14:	68bb      	ldr	r3, [r7, #8]
 8012e16:	440b      	add	r3, r1
 8012e18:	3237      	adds	r2, #55	@ 0x37
 8012e1a:	b2d2      	uxtb	r2, r2
 8012e1c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	011b      	lsls	r3, r3, #4
 8012e22:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012e24:	7dfb      	ldrb	r3, [r7, #23]
 8012e26:	005b      	lsls	r3, r3, #1
 8012e28:	3301      	adds	r3, #1
 8012e2a:	68ba      	ldr	r2, [r7, #8]
 8012e2c:	4413      	add	r3, r2
 8012e2e:	2200      	movs	r2, #0
 8012e30:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012e32:	7dfb      	ldrb	r3, [r7, #23]
 8012e34:	3301      	adds	r3, #1
 8012e36:	75fb      	strb	r3, [r7, #23]
 8012e38:	7dfa      	ldrb	r2, [r7, #23]
 8012e3a:	79fb      	ldrb	r3, [r7, #7]
 8012e3c:	429a      	cmp	r2, r3
 8012e3e:	d3d3      	bcc.n	8012de8 <IntToUnicode+0x18>
  }
}
 8012e40:	bf00      	nop
 8012e42:	bf00      	nop
 8012e44:	371c      	adds	r7, #28
 8012e46:	46bd      	mov	sp, r7
 8012e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e4c:	4770      	bx	lr
	...

08012e50 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8012e50:	b580      	push	{r7, lr}
 8012e52:	b0ba      	sub	sp, #232	@ 0xe8
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012e58:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8012e5c:	2200      	movs	r2, #0
 8012e5e:	601a      	str	r2, [r3, #0]
 8012e60:	605a      	str	r2, [r3, #4]
 8012e62:	609a      	str	r2, [r3, #8]
 8012e64:	60da      	str	r2, [r3, #12]
 8012e66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8012e68:	f107 0310 	add.w	r3, r7, #16
 8012e6c:	22c0      	movs	r2, #192	@ 0xc0
 8012e6e:	2100      	movs	r1, #0
 8012e70:	4618      	mov	r0, r3
 8012e72:	f000 fb55 	bl	8013520 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	4a43      	ldr	r2, [pc, #268]	@ (8012f88 <HAL_PCD_MspInit+0x138>)
 8012e7c:	4293      	cmp	r3, r2
 8012e7e:	d17f      	bne.n	8012f80 <HAL_PCD_MspInit+0x130>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8012e80:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8012e84:	f04f 0300 	mov.w	r3, #0
 8012e88:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8012e8c:	2301      	movs	r3, #1
 8012e8e:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8012e90:	2312      	movs	r3, #18
 8012e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8012e94:	2302      	movs	r3, #2
 8012e96:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8012e98:	2303      	movs	r3, #3
 8012e9a:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 128;
 8012e9c:	2380      	movs	r3, #128	@ 0x80
 8012e9e:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8012ea0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8012ea4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8012ea6:	2300      	movs	r3, #0
 8012ea8:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8012eaa:	2300      	movs	r3, #0
 8012eac:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8012eae:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8012eb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8012eb6:	f107 0310 	add.w	r3, r7, #16
 8012eba:	4618      	mov	r0, r3
 8012ebc:	f7f8 fd18 	bl	800b8f0 <HAL_RCCEx_PeriphCLKConfig>
 8012ec0:	4603      	mov	r3, r0
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d001      	beq.n	8012eca <HAL_PCD_MspInit+0x7a>
    {
      Error_Handler();
 8012ec6:	f7ee f95d 	bl	8001184 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8012eca:	f7f7 fcef 	bl	800a8ac <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012ece:	4b2f      	ldr	r3, [pc, #188]	@ (8012f8c <HAL_PCD_MspInit+0x13c>)
 8012ed0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8012ed4:	4a2d      	ldr	r2, [pc, #180]	@ (8012f8c <HAL_PCD_MspInit+0x13c>)
 8012ed6:	f043 0301 	orr.w	r3, r3, #1
 8012eda:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
 8012ede:	4b2b      	ldr	r3, [pc, #172]	@ (8012f8c <HAL_PCD_MspInit+0x13c>)
 8012ee0:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 8012ee4:	f003 0301 	and.w	r3, r3, #1
 8012ee8:	60fb      	str	r3, [r7, #12]
 8012eea:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PA9     ------> USB_OTG_HS_VBUS
    PA11     ------> USB_OTG_HS_DM
    PA12     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8012eec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012ef0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012ef4:	2300      	movs	r3, #0
 8012ef6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012efa:	2300      	movs	r3, #0
 8012efc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012f00:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8012f04:	4619      	mov	r1, r3
 8012f06:	4822      	ldr	r0, [pc, #136]	@ (8012f90 <HAL_PCD_MspInit+0x140>)
 8012f08:	f7f5 f8aa 	bl	8008060 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012f0c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8012f10:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012f14:	2302      	movs	r3, #2
 8012f16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012f1a:	2300      	movs	r3, #0
 8012f1c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012f20:	2300      	movs	r3, #0
 8012f22:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012f26:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8012f2a:	4619      	mov	r1, r3
 8012f2c:	4818      	ldr	r0, [pc, #96]	@ (8012f90 <HAL_PCD_MspInit+0x140>)
 8012f2e:	f7f5 f897 	bl	8008060 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8012f32:	4b16      	ldr	r3, [pc, #88]	@ (8012f8c <HAL_PCD_MspInit+0x13c>)
 8012f34:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8012f38:	4a14      	ldr	r2, [pc, #80]	@ (8012f8c <HAL_PCD_MspInit+0x13c>)
 8012f3a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8012f3e:	f8c2 3138 	str.w	r3, [r2, #312]	@ 0x138
 8012f42:	4b12      	ldr	r3, [pc, #72]	@ (8012f8c <HAL_PCD_MspInit+0x13c>)
 8012f44:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8012f48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012f4c:	60bb      	str	r3, [r7, #8]
 8012f4e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_EP1_OUT_IRQn, 0, 0);
 8012f50:	2200      	movs	r2, #0
 8012f52:	2100      	movs	r1, #0
 8012f54:	204a      	movs	r0, #74	@ 0x4a
 8012f56:	f7f1 f952 	bl	80041fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_OUT_IRQn);
 8012f5a:	204a      	movs	r0, #74	@ 0x4a
 8012f5c:	f7f1 f969 	bl	8004232 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_EP1_IN_IRQn, 0, 0);
 8012f60:	2200      	movs	r2, #0
 8012f62:	2100      	movs	r1, #0
 8012f64:	204b      	movs	r0, #75	@ 0x4b
 8012f66:	f7f1 f94a 	bl	80041fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_EP1_IN_IRQn);
 8012f6a:	204b      	movs	r0, #75	@ 0x4b
 8012f6c:	f7f1 f961 	bl	8004232 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8012f70:	2200      	movs	r2, #0
 8012f72:	2100      	movs	r1, #0
 8012f74:	204d      	movs	r0, #77	@ 0x4d
 8012f76:	f7f1 f942 	bl	80041fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8012f7a:	204d      	movs	r0, #77	@ 0x4d
 8012f7c:	f7f1 f959 	bl	8004232 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8012f80:	bf00      	nop
 8012f82:	37e8      	adds	r7, #232	@ 0xe8
 8012f84:	46bd      	mov	sp, r7
 8012f86:	bd80      	pop	{r7, pc}
 8012f88:	40040000 	.word	0x40040000
 8012f8c:	58024400 	.word	0x58024400
 8012f90:	58020000 	.word	0x58020000

08012f94 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012f94:	b580      	push	{r7, lr}
 8012f96:	b082      	sub	sp, #8
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8012fa8:	4619      	mov	r1, r3
 8012faa:	4610      	mov	r0, r2
 8012fac:	f7fe fac1 	bl	8011532 <USBD_LL_SetupStage>
}
 8012fb0:	bf00      	nop
 8012fb2:	3708      	adds	r7, #8
 8012fb4:	46bd      	mov	sp, r7
 8012fb6:	bd80      	pop	{r7, pc}

08012fb8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012fb8:	b580      	push	{r7, lr}
 8012fba:	b082      	sub	sp, #8
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	6078      	str	r0, [r7, #4]
 8012fc0:	460b      	mov	r3, r1
 8012fc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8012fca:	78fa      	ldrb	r2, [r7, #3]
 8012fcc:	6879      	ldr	r1, [r7, #4]
 8012fce:	4613      	mov	r3, r2
 8012fd0:	00db      	lsls	r3, r3, #3
 8012fd2:	4413      	add	r3, r2
 8012fd4:	009b      	lsls	r3, r3, #2
 8012fd6:	440b      	add	r3, r1
 8012fd8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8012fdc:	681a      	ldr	r2, [r3, #0]
 8012fde:	78fb      	ldrb	r3, [r7, #3]
 8012fe0:	4619      	mov	r1, r3
 8012fe2:	f7fe fafb 	bl	80115dc <USBD_LL_DataOutStage>
}
 8012fe6:	bf00      	nop
 8012fe8:	3708      	adds	r7, #8
 8012fea:	46bd      	mov	sp, r7
 8012fec:	bd80      	pop	{r7, pc}

08012fee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8012fee:	b580      	push	{r7, lr}
 8012ff0:	b082      	sub	sp, #8
 8012ff2:	af00      	add	r7, sp, #0
 8012ff4:	6078      	str	r0, [r7, #4]
 8012ff6:	460b      	mov	r3, r1
 8012ff8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8013000:	78fa      	ldrb	r2, [r7, #3]
 8013002:	6879      	ldr	r1, [r7, #4]
 8013004:	4613      	mov	r3, r2
 8013006:	00db      	lsls	r3, r3, #3
 8013008:	4413      	add	r3, r2
 801300a:	009b      	lsls	r3, r3, #2
 801300c:	440b      	add	r3, r1
 801300e:	3320      	adds	r3, #32
 8013010:	681a      	ldr	r2, [r3, #0]
 8013012:	78fb      	ldrb	r3, [r7, #3]
 8013014:	4619      	mov	r1, r3
 8013016:	f7fe fb94 	bl	8011742 <USBD_LL_DataInStage>
}
 801301a:	bf00      	nop
 801301c:	3708      	adds	r7, #8
 801301e:	46bd      	mov	sp, r7
 8013020:	bd80      	pop	{r7, pc}

08013022 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013022:	b580      	push	{r7, lr}
 8013024:	b082      	sub	sp, #8
 8013026:	af00      	add	r7, sp, #0
 8013028:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013030:	4618      	mov	r0, r3
 8013032:	f7fe fcce 	bl	80119d2 <USBD_LL_SOF>
}
 8013036:	bf00      	nop
 8013038:	3708      	adds	r7, #8
 801303a:	46bd      	mov	sp, r7
 801303c:	bd80      	pop	{r7, pc}

0801303e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801303e:	b580      	push	{r7, lr}
 8013040:	b084      	sub	sp, #16
 8013042:	af00      	add	r7, sp, #0
 8013044:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8013046:	2301      	movs	r3, #1
 8013048:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	79db      	ldrb	r3, [r3, #7]
 801304e:	2b00      	cmp	r3, #0
 8013050:	d102      	bne.n	8013058 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8013052:	2300      	movs	r3, #0
 8013054:	73fb      	strb	r3, [r7, #15]
 8013056:	e008      	b.n	801306a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8013058:	687b      	ldr	r3, [r7, #4]
 801305a:	79db      	ldrb	r3, [r3, #7]
 801305c:	2b02      	cmp	r3, #2
 801305e:	d102      	bne.n	8013066 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8013060:	2301      	movs	r3, #1
 8013062:	73fb      	strb	r3, [r7, #15]
 8013064:	e001      	b.n	801306a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8013066:	f7ee f88d 	bl	8001184 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013070:	7bfa      	ldrb	r2, [r7, #15]
 8013072:	4611      	mov	r1, r2
 8013074:	4618      	mov	r0, r3
 8013076:	f7fe fc68 	bl	801194a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8013080:	4618      	mov	r0, r3
 8013082:	f7fe fc10 	bl	80118a6 <USBD_LL_Reset>
}
 8013086:	bf00      	nop
 8013088:	3710      	adds	r7, #16
 801308a:	46bd      	mov	sp, r7
 801308c:	bd80      	pop	{r7, pc}
	...

08013090 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013090:	b580      	push	{r7, lr}
 8013092:	b082      	sub	sp, #8
 8013094:	af00      	add	r7, sp, #0
 8013096:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801309e:	4618      	mov	r0, r3
 80130a0:	f7fe fc63 	bl	801196a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	687a      	ldr	r2, [r7, #4]
 80130b0:	6812      	ldr	r2, [r2, #0]
 80130b2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80130b6:	f043 0301 	orr.w	r3, r3, #1
 80130ba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	7adb      	ldrb	r3, [r3, #11]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d005      	beq.n	80130d0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80130c4:	4b04      	ldr	r3, [pc, #16]	@ (80130d8 <HAL_PCD_SuspendCallback+0x48>)
 80130c6:	691b      	ldr	r3, [r3, #16]
 80130c8:	4a03      	ldr	r2, [pc, #12]	@ (80130d8 <HAL_PCD_SuspendCallback+0x48>)
 80130ca:	f043 0306 	orr.w	r3, r3, #6
 80130ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80130d0:	bf00      	nop
 80130d2:	3708      	adds	r7, #8
 80130d4:	46bd      	mov	sp, r7
 80130d6:	bd80      	pop	{r7, pc}
 80130d8:	e000ed00 	.word	0xe000ed00

080130dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80130dc:	b580      	push	{r7, lr}
 80130de:	b082      	sub	sp, #8
 80130e0:	af00      	add	r7, sp, #0
 80130e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80130ea:	4618      	mov	r0, r3
 80130ec:	f7fe fc59 	bl	80119a2 <USBD_LL_Resume>
}
 80130f0:	bf00      	nop
 80130f2:	3708      	adds	r7, #8
 80130f4:	46bd      	mov	sp, r7
 80130f6:	bd80      	pop	{r7, pc}

080130f8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80130f8:	b580      	push	{r7, lr}
 80130fa:	b082      	sub	sp, #8
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	6078      	str	r0, [r7, #4]
 8013100:	460b      	mov	r3, r1
 8013102:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801310a:	78fa      	ldrb	r2, [r7, #3]
 801310c:	4611      	mov	r1, r2
 801310e:	4618      	mov	r0, r3
 8013110:	f7fe fcb1 	bl	8011a76 <USBD_LL_IsoOUTIncomplete>
}
 8013114:	bf00      	nop
 8013116:	3708      	adds	r7, #8
 8013118:	46bd      	mov	sp, r7
 801311a:	bd80      	pop	{r7, pc}

0801311c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801311c:	b580      	push	{r7, lr}
 801311e:	b082      	sub	sp, #8
 8013120:	af00      	add	r7, sp, #0
 8013122:	6078      	str	r0, [r7, #4]
 8013124:	460b      	mov	r3, r1
 8013126:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801312e:	78fa      	ldrb	r2, [r7, #3]
 8013130:	4611      	mov	r1, r2
 8013132:	4618      	mov	r0, r3
 8013134:	f7fe fc6d 	bl	8011a12 <USBD_LL_IsoINIncomplete>
}
 8013138:	bf00      	nop
 801313a:	3708      	adds	r7, #8
 801313c:	46bd      	mov	sp, r7
 801313e:	bd80      	pop	{r7, pc}

08013140 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013140:	b580      	push	{r7, lr}
 8013142:	b082      	sub	sp, #8
 8013144:	af00      	add	r7, sp, #0
 8013146:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801314e:	4618      	mov	r0, r3
 8013150:	f7fe fcc3 	bl	8011ada <USBD_LL_DevConnected>
}
 8013154:	bf00      	nop
 8013156:	3708      	adds	r7, #8
 8013158:	46bd      	mov	sp, r7
 801315a:	bd80      	pop	{r7, pc}

0801315c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801315c:	b580      	push	{r7, lr}
 801315e:	b082      	sub	sp, #8
 8013160:	af00      	add	r7, sp, #0
 8013162:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801316a:	4618      	mov	r0, r3
 801316c:	f7fe fcc0 	bl	8011af0 <USBD_LL_DevDisconnected>
}
 8013170:	bf00      	nop
 8013172:	3708      	adds	r7, #8
 8013174:	46bd      	mov	sp, r7
 8013176:	bd80      	pop	{r7, pc}

08013178 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8013178:	b580      	push	{r7, lr}
 801317a:	b082      	sub	sp, #8
 801317c:	af00      	add	r7, sp, #0
 801317e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	781b      	ldrb	r3, [r3, #0]
 8013184:	2b01      	cmp	r3, #1
 8013186:	d140      	bne.n	801320a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8013188:	4a22      	ldr	r2, [pc, #136]	@ (8013214 <USBD_LL_Init+0x9c>)
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_HS;
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	4a20      	ldr	r2, [pc, #128]	@ (8013214 <USBD_LL_Init+0x9c>)
 8013194:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8013198:	4b1e      	ldr	r3, [pc, #120]	@ (8013214 <USBD_LL_Init+0x9c>)
 801319a:	4a1f      	ldr	r2, [pc, #124]	@ (8013218 <USBD_LL_Init+0xa0>)
 801319c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 801319e:	4b1d      	ldr	r3, [pc, #116]	@ (8013214 <USBD_LL_Init+0x9c>)
 80131a0:	2209      	movs	r2, #9
 80131a2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 80131a4:	4b1b      	ldr	r3, [pc, #108]	@ (8013214 <USBD_LL_Init+0x9c>)
 80131a6:	2202      	movs	r2, #2
 80131a8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80131aa:	4b1a      	ldr	r3, [pc, #104]	@ (8013214 <USBD_LL_Init+0x9c>)
 80131ac:	2200      	movs	r2, #0
 80131ae:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80131b0:	4b18      	ldr	r3, [pc, #96]	@ (8013214 <USBD_LL_Init+0x9c>)
 80131b2:	2202      	movs	r2, #2
 80131b4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80131b6:	4b17      	ldr	r3, [pc, #92]	@ (8013214 <USBD_LL_Init+0x9c>)
 80131b8:	2200      	movs	r2, #0
 80131ba:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80131bc:	4b15      	ldr	r3, [pc, #84]	@ (8013214 <USBD_LL_Init+0x9c>)
 80131be:	2200      	movs	r2, #0
 80131c0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80131c2:	4b14      	ldr	r3, [pc, #80]	@ (8013214 <USBD_LL_Init+0x9c>)
 80131c4:	2200      	movs	r2, #0
 80131c6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = ENABLE;
 80131c8:	4b12      	ldr	r3, [pc, #72]	@ (8013214 <USBD_LL_Init+0x9c>)
 80131ca:	2201      	movs	r2, #1
 80131cc:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80131ce:	4b11      	ldr	r3, [pc, #68]	@ (8013214 <USBD_LL_Init+0x9c>)
 80131d0:	2200      	movs	r2, #0
 80131d2:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80131d4:	4b0f      	ldr	r3, [pc, #60]	@ (8013214 <USBD_LL_Init+0x9c>)
 80131d6:	2200      	movs	r2, #0
 80131d8:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80131da:	480e      	ldr	r0, [pc, #56]	@ (8013214 <USBD_LL_Init+0x9c>)
 80131dc:	f7f6 f88b 	bl	80092f6 <HAL_PCD_Init>
 80131e0:	4603      	mov	r3, r0
 80131e2:	2b00      	cmp	r3, #0
 80131e4:	d001      	beq.n	80131ea <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80131e6:	f7ed ffcd 	bl	8001184 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_HS_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80131ea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80131ee:	4809      	ldr	r0, [pc, #36]	@ (8013214 <USBD_LL_Init+0x9c>)
 80131f0:	f7f7 fae1 	bl	800a7b6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 80131f4:	2280      	movs	r2, #128	@ 0x80
 80131f6:	2100      	movs	r1, #0
 80131f8:	4806      	ldr	r0, [pc, #24]	@ (8013214 <USBD_LL_Init+0x9c>)
 80131fa:	f7f7 fa95 	bl	800a728 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 80131fe:	f44f 72ba 	mov.w	r2, #372	@ 0x174
 8013202:	2101      	movs	r1, #1
 8013204:	4803      	ldr	r0, [pc, #12]	@ (8013214 <USBD_LL_Init+0x9c>)
 8013206:	f7f7 fa8f 	bl	800a728 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_HS_Configuration */
  }
  return USBD_OK;
 801320a:	2300      	movs	r3, #0
}
 801320c:	4618      	mov	r0, r3
 801320e:	3708      	adds	r7, #8
 8013210:	46bd      	mov	sp, r7
 8013212:	bd80      	pop	{r7, pc}
 8013214:	240019b0 	.word	0x240019b0
 8013218:	40040000 	.word	0x40040000

0801321c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801321c:	b580      	push	{r7, lr}
 801321e:	b084      	sub	sp, #16
 8013220:	af00      	add	r7, sp, #0
 8013222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013224:	2300      	movs	r3, #0
 8013226:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013228:	2300      	movs	r3, #0
 801322a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013232:	4618      	mov	r0, r3
 8013234:	f7f6 f96b 	bl	800950e <HAL_PCD_Start>
 8013238:	4603      	mov	r3, r0
 801323a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801323c:	7bfb      	ldrb	r3, [r7, #15]
 801323e:	4618      	mov	r0, r3
 8013240:	f000 f942 	bl	80134c8 <USBD_Get_USB_Status>
 8013244:	4603      	mov	r3, r0
 8013246:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013248:	7bbb      	ldrb	r3, [r7, #14]
}
 801324a:	4618      	mov	r0, r3
 801324c:	3710      	adds	r7, #16
 801324e:	46bd      	mov	sp, r7
 8013250:	bd80      	pop	{r7, pc}

08013252 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8013252:	b580      	push	{r7, lr}
 8013254:	b084      	sub	sp, #16
 8013256:	af00      	add	r7, sp, #0
 8013258:	6078      	str	r0, [r7, #4]
 801325a:	4608      	mov	r0, r1
 801325c:	4611      	mov	r1, r2
 801325e:	461a      	mov	r2, r3
 8013260:	4603      	mov	r3, r0
 8013262:	70fb      	strb	r3, [r7, #3]
 8013264:	460b      	mov	r3, r1
 8013266:	70bb      	strb	r3, [r7, #2]
 8013268:	4613      	mov	r3, r2
 801326a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801326c:	2300      	movs	r3, #0
 801326e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013270:	2300      	movs	r3, #0
 8013272:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801327a:	78bb      	ldrb	r3, [r7, #2]
 801327c:	883a      	ldrh	r2, [r7, #0]
 801327e:	78f9      	ldrb	r1, [r7, #3]
 8013280:	f7f6 fe6c 	bl	8009f5c <HAL_PCD_EP_Open>
 8013284:	4603      	mov	r3, r0
 8013286:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013288:	7bfb      	ldrb	r3, [r7, #15]
 801328a:	4618      	mov	r0, r3
 801328c:	f000 f91c 	bl	80134c8 <USBD_Get_USB_Status>
 8013290:	4603      	mov	r3, r0
 8013292:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013294:	7bbb      	ldrb	r3, [r7, #14]
}
 8013296:	4618      	mov	r0, r3
 8013298:	3710      	adds	r7, #16
 801329a:	46bd      	mov	sp, r7
 801329c:	bd80      	pop	{r7, pc}

0801329e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801329e:	b580      	push	{r7, lr}
 80132a0:	b084      	sub	sp, #16
 80132a2:	af00      	add	r7, sp, #0
 80132a4:	6078      	str	r0, [r7, #4]
 80132a6:	460b      	mov	r3, r1
 80132a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80132aa:	2300      	movs	r3, #0
 80132ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80132ae:	2300      	movs	r3, #0
 80132b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80132b8:	78fa      	ldrb	r2, [r7, #3]
 80132ba:	4611      	mov	r1, r2
 80132bc:	4618      	mov	r0, r3
 80132be:	f7f6 feb7 	bl	800a030 <HAL_PCD_EP_Close>
 80132c2:	4603      	mov	r3, r0
 80132c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80132c6:	7bfb      	ldrb	r3, [r7, #15]
 80132c8:	4618      	mov	r0, r3
 80132ca:	f000 f8fd 	bl	80134c8 <USBD_Get_USB_Status>
 80132ce:	4603      	mov	r3, r0
 80132d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80132d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80132d4:	4618      	mov	r0, r3
 80132d6:	3710      	adds	r7, #16
 80132d8:	46bd      	mov	sp, r7
 80132da:	bd80      	pop	{r7, pc}

080132dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80132dc:	b580      	push	{r7, lr}
 80132de:	b084      	sub	sp, #16
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	6078      	str	r0, [r7, #4]
 80132e4:	460b      	mov	r3, r1
 80132e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80132e8:	2300      	movs	r3, #0
 80132ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80132ec:	2300      	movs	r3, #0
 80132ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80132f6:	78fa      	ldrb	r2, [r7, #3]
 80132f8:	4611      	mov	r1, r2
 80132fa:	4618      	mov	r0, r3
 80132fc:	f7f6 ff6f 	bl	800a1de <HAL_PCD_EP_SetStall>
 8013300:	4603      	mov	r3, r0
 8013302:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013304:	7bfb      	ldrb	r3, [r7, #15]
 8013306:	4618      	mov	r0, r3
 8013308:	f000 f8de 	bl	80134c8 <USBD_Get_USB_Status>
 801330c:	4603      	mov	r3, r0
 801330e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013310:	7bbb      	ldrb	r3, [r7, #14]
}
 8013312:	4618      	mov	r0, r3
 8013314:	3710      	adds	r7, #16
 8013316:	46bd      	mov	sp, r7
 8013318:	bd80      	pop	{r7, pc}

0801331a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801331a:	b580      	push	{r7, lr}
 801331c:	b084      	sub	sp, #16
 801331e:	af00      	add	r7, sp, #0
 8013320:	6078      	str	r0, [r7, #4]
 8013322:	460b      	mov	r3, r1
 8013324:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013326:	2300      	movs	r3, #0
 8013328:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801332a:	2300      	movs	r3, #0
 801332c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013334:	78fa      	ldrb	r2, [r7, #3]
 8013336:	4611      	mov	r1, r2
 8013338:	4618      	mov	r0, r3
 801333a:	f7f6 ffb3 	bl	800a2a4 <HAL_PCD_EP_ClrStall>
 801333e:	4603      	mov	r3, r0
 8013340:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013342:	7bfb      	ldrb	r3, [r7, #15]
 8013344:	4618      	mov	r0, r3
 8013346:	f000 f8bf 	bl	80134c8 <USBD_Get_USB_Status>
 801334a:	4603      	mov	r3, r0
 801334c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801334e:	7bbb      	ldrb	r3, [r7, #14]
}
 8013350:	4618      	mov	r0, r3
 8013352:	3710      	adds	r7, #16
 8013354:	46bd      	mov	sp, r7
 8013356:	bd80      	pop	{r7, pc}

08013358 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013358:	b480      	push	{r7}
 801335a:	b085      	sub	sp, #20
 801335c:	af00      	add	r7, sp, #0
 801335e:	6078      	str	r0, [r7, #4]
 8013360:	460b      	mov	r3, r1
 8013362:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801336a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801336c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013370:	2b00      	cmp	r3, #0
 8013372:	da0b      	bge.n	801338c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013374:	78fb      	ldrb	r3, [r7, #3]
 8013376:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801337a:	68f9      	ldr	r1, [r7, #12]
 801337c:	4613      	mov	r3, r2
 801337e:	00db      	lsls	r3, r3, #3
 8013380:	4413      	add	r3, r2
 8013382:	009b      	lsls	r3, r3, #2
 8013384:	440b      	add	r3, r1
 8013386:	3316      	adds	r3, #22
 8013388:	781b      	ldrb	r3, [r3, #0]
 801338a:	e00b      	b.n	80133a4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801338c:	78fb      	ldrb	r3, [r7, #3]
 801338e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013392:	68f9      	ldr	r1, [r7, #12]
 8013394:	4613      	mov	r3, r2
 8013396:	00db      	lsls	r3, r3, #3
 8013398:	4413      	add	r3, r2
 801339a:	009b      	lsls	r3, r3, #2
 801339c:	440b      	add	r3, r1
 801339e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80133a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80133a4:	4618      	mov	r0, r3
 80133a6:	3714      	adds	r7, #20
 80133a8:	46bd      	mov	sp, r7
 80133aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ae:	4770      	bx	lr

080133b0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80133b0:	b580      	push	{r7, lr}
 80133b2:	b084      	sub	sp, #16
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	6078      	str	r0, [r7, #4]
 80133b8:	460b      	mov	r3, r1
 80133ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80133bc:	2300      	movs	r3, #0
 80133be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80133c0:	2300      	movs	r3, #0
 80133c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80133ca:	78fa      	ldrb	r2, [r7, #3]
 80133cc:	4611      	mov	r1, r2
 80133ce:	4618      	mov	r0, r3
 80133d0:	f7f6 fda0 	bl	8009f14 <HAL_PCD_SetAddress>
 80133d4:	4603      	mov	r3, r0
 80133d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80133d8:	7bfb      	ldrb	r3, [r7, #15]
 80133da:	4618      	mov	r0, r3
 80133dc:	f000 f874 	bl	80134c8 <USBD_Get_USB_Status>
 80133e0:	4603      	mov	r3, r0
 80133e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80133e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80133e6:	4618      	mov	r0, r3
 80133e8:	3710      	adds	r7, #16
 80133ea:	46bd      	mov	sp, r7
 80133ec:	bd80      	pop	{r7, pc}

080133ee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80133ee:	b580      	push	{r7, lr}
 80133f0:	b086      	sub	sp, #24
 80133f2:	af00      	add	r7, sp, #0
 80133f4:	60f8      	str	r0, [r7, #12]
 80133f6:	607a      	str	r2, [r7, #4]
 80133f8:	603b      	str	r3, [r7, #0]
 80133fa:	460b      	mov	r3, r1
 80133fc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80133fe:	2300      	movs	r3, #0
 8013400:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013402:	2300      	movs	r3, #0
 8013404:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013406:	68fb      	ldr	r3, [r7, #12]
 8013408:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801340c:	7af9      	ldrb	r1, [r7, #11]
 801340e:	683b      	ldr	r3, [r7, #0]
 8013410:	687a      	ldr	r2, [r7, #4]
 8013412:	f7f6 feaa 	bl	800a16a <HAL_PCD_EP_Transmit>
 8013416:	4603      	mov	r3, r0
 8013418:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801341a:	7dfb      	ldrb	r3, [r7, #23]
 801341c:	4618      	mov	r0, r3
 801341e:	f000 f853 	bl	80134c8 <USBD_Get_USB_Status>
 8013422:	4603      	mov	r3, r0
 8013424:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013426:	7dbb      	ldrb	r3, [r7, #22]
}
 8013428:	4618      	mov	r0, r3
 801342a:	3718      	adds	r7, #24
 801342c:	46bd      	mov	sp, r7
 801342e:	bd80      	pop	{r7, pc}

08013430 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013430:	b580      	push	{r7, lr}
 8013432:	b086      	sub	sp, #24
 8013434:	af00      	add	r7, sp, #0
 8013436:	60f8      	str	r0, [r7, #12]
 8013438:	607a      	str	r2, [r7, #4]
 801343a:	603b      	str	r3, [r7, #0]
 801343c:	460b      	mov	r3, r1
 801343e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013440:	2300      	movs	r3, #0
 8013442:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013444:	2300      	movs	r3, #0
 8013446:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801344e:	7af9      	ldrb	r1, [r7, #11]
 8013450:	683b      	ldr	r3, [r7, #0]
 8013452:	687a      	ldr	r2, [r7, #4]
 8013454:	f7f6 fe36 	bl	800a0c4 <HAL_PCD_EP_Receive>
 8013458:	4603      	mov	r3, r0
 801345a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801345c:	7dfb      	ldrb	r3, [r7, #23]
 801345e:	4618      	mov	r0, r3
 8013460:	f000 f832 	bl	80134c8 <USBD_Get_USB_Status>
 8013464:	4603      	mov	r3, r0
 8013466:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013468:	7dbb      	ldrb	r3, [r7, #22]
}
 801346a:	4618      	mov	r0, r3
 801346c:	3718      	adds	r7, #24
 801346e:	46bd      	mov	sp, r7
 8013470:	bd80      	pop	{r7, pc}

08013472 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013472:	b580      	push	{r7, lr}
 8013474:	b082      	sub	sp, #8
 8013476:	af00      	add	r7, sp, #0
 8013478:	6078      	str	r0, [r7, #4]
 801347a:	460b      	mov	r3, r1
 801347c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8013484:	78fa      	ldrb	r2, [r7, #3]
 8013486:	4611      	mov	r1, r2
 8013488:	4618      	mov	r0, r3
 801348a:	f7f6 fe56 	bl	800a13a <HAL_PCD_EP_GetRxCount>
 801348e:	4603      	mov	r3, r0
}
 8013490:	4618      	mov	r0, r3
 8013492:	3708      	adds	r7, #8
 8013494:	46bd      	mov	sp, r7
 8013496:	bd80      	pop	{r7, pc}

08013498 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013498:	b480      	push	{r7}
 801349a:	b083      	sub	sp, #12
 801349c:	af00      	add	r7, sp, #0
 801349e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80134a0:	4b03      	ldr	r3, [pc, #12]	@ (80134b0 <USBD_static_malloc+0x18>)
}
 80134a2:	4618      	mov	r0, r3
 80134a4:	370c      	adds	r7, #12
 80134a6:	46bd      	mov	sp, r7
 80134a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ac:	4770      	bx	lr
 80134ae:	bf00      	nop
 80134b0:	24001e94 	.word	0x24001e94

080134b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80134b4:	b480      	push	{r7}
 80134b6:	b083      	sub	sp, #12
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 80134bc:	bf00      	nop
 80134be:	370c      	adds	r7, #12
 80134c0:	46bd      	mov	sp, r7
 80134c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c6:	4770      	bx	lr

080134c8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80134c8:	b480      	push	{r7}
 80134ca:	b085      	sub	sp, #20
 80134cc:	af00      	add	r7, sp, #0
 80134ce:	4603      	mov	r3, r0
 80134d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80134d2:	2300      	movs	r3, #0
 80134d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80134d6:	79fb      	ldrb	r3, [r7, #7]
 80134d8:	2b03      	cmp	r3, #3
 80134da:	d817      	bhi.n	801350c <USBD_Get_USB_Status+0x44>
 80134dc:	a201      	add	r2, pc, #4	@ (adr r2, 80134e4 <USBD_Get_USB_Status+0x1c>)
 80134de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134e2:	bf00      	nop
 80134e4:	080134f5 	.word	0x080134f5
 80134e8:	080134fb 	.word	0x080134fb
 80134ec:	08013501 	.word	0x08013501
 80134f0:	08013507 	.word	0x08013507
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80134f4:	2300      	movs	r3, #0
 80134f6:	73fb      	strb	r3, [r7, #15]
    break;
 80134f8:	e00b      	b.n	8013512 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80134fa:	2303      	movs	r3, #3
 80134fc:	73fb      	strb	r3, [r7, #15]
    break;
 80134fe:	e008      	b.n	8013512 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013500:	2301      	movs	r3, #1
 8013502:	73fb      	strb	r3, [r7, #15]
    break;
 8013504:	e005      	b.n	8013512 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013506:	2303      	movs	r3, #3
 8013508:	73fb      	strb	r3, [r7, #15]
    break;
 801350a:	e002      	b.n	8013512 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801350c:	2303      	movs	r3, #3
 801350e:	73fb      	strb	r3, [r7, #15]
    break;
 8013510:	bf00      	nop
  }
  return usb_status;
 8013512:	7bfb      	ldrb	r3, [r7, #15]
}
 8013514:	4618      	mov	r0, r3
 8013516:	3714      	adds	r7, #20
 8013518:	46bd      	mov	sp, r7
 801351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801351e:	4770      	bx	lr

08013520 <memset>:
 8013520:	4402      	add	r2, r0
 8013522:	4603      	mov	r3, r0
 8013524:	4293      	cmp	r3, r2
 8013526:	d100      	bne.n	801352a <memset+0xa>
 8013528:	4770      	bx	lr
 801352a:	f803 1b01 	strb.w	r1, [r3], #1
 801352e:	e7f9      	b.n	8013524 <memset+0x4>

08013530 <__libc_init_array>:
 8013530:	b570      	push	{r4, r5, r6, lr}
 8013532:	4d0d      	ldr	r5, [pc, #52]	@ (8013568 <__libc_init_array+0x38>)
 8013534:	4c0d      	ldr	r4, [pc, #52]	@ (801356c <__libc_init_array+0x3c>)
 8013536:	1b64      	subs	r4, r4, r5
 8013538:	10a4      	asrs	r4, r4, #2
 801353a:	2600      	movs	r6, #0
 801353c:	42a6      	cmp	r6, r4
 801353e:	d109      	bne.n	8013554 <__libc_init_array+0x24>
 8013540:	4d0b      	ldr	r5, [pc, #44]	@ (8013570 <__libc_init_array+0x40>)
 8013542:	4c0c      	ldr	r4, [pc, #48]	@ (8013574 <__libc_init_array+0x44>)
 8013544:	f000 f826 	bl	8013594 <_init>
 8013548:	1b64      	subs	r4, r4, r5
 801354a:	10a4      	asrs	r4, r4, #2
 801354c:	2600      	movs	r6, #0
 801354e:	42a6      	cmp	r6, r4
 8013550:	d105      	bne.n	801355e <__libc_init_array+0x2e>
 8013552:	bd70      	pop	{r4, r5, r6, pc}
 8013554:	f855 3b04 	ldr.w	r3, [r5], #4
 8013558:	4798      	blx	r3
 801355a:	3601      	adds	r6, #1
 801355c:	e7ee      	b.n	801353c <__libc_init_array+0xc>
 801355e:	f855 3b04 	ldr.w	r3, [r5], #4
 8013562:	4798      	blx	r3
 8013564:	3601      	adds	r6, #1
 8013566:	e7f2      	b.n	801354e <__libc_init_array+0x1e>
 8013568:	08013b1c 	.word	0x08013b1c
 801356c:	08013b1c 	.word	0x08013b1c
 8013570:	08013b1c 	.word	0x08013b1c
 8013574:	08013b20 	.word	0x08013b20

08013578 <memcpy>:
 8013578:	440a      	add	r2, r1
 801357a:	4291      	cmp	r1, r2
 801357c:	f100 33ff 	add.w	r3, r0, #4294967295
 8013580:	d100      	bne.n	8013584 <memcpy+0xc>
 8013582:	4770      	bx	lr
 8013584:	b510      	push	{r4, lr}
 8013586:	f811 4b01 	ldrb.w	r4, [r1], #1
 801358a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801358e:	4291      	cmp	r1, r2
 8013590:	d1f9      	bne.n	8013586 <memcpy+0xe>
 8013592:	bd10      	pop	{r4, pc}

08013594 <_init>:
 8013594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013596:	bf00      	nop
 8013598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801359a:	bc08      	pop	{r3}
 801359c:	469e      	mov	lr, r3
 801359e:	4770      	bx	lr

080135a0 <_fini>:
 80135a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135a2:	bf00      	nop
 80135a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80135a6:	bc08      	pop	{r3}
 80135a8:	469e      	mov	lr, r3
 80135aa:	4770      	bx	lr
